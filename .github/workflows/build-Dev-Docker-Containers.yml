#
#
#
name: build-Dev-Docker-Containers

on:
  # push:
  workflow_dispatch:
    inputs:
      run_all:
        description: "run all"
        required: false
        default: "true"

jobs:
  LinuxMatrixPrep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
    - id: set-matrix
      run: |
        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  
        matrix=$(jq --arg branchName "$branchName" 'map( 
            . | select((.run_on_branch==$branchName) or (.run_on_branch=="always") or ("${{github.event.inputs.run_all}}"=="true") and (.run_on_branch!="never")) | select(.build_job=="Linux")
        )' .github/workflows/build-Dev-Docker-Containers-Matrix.json)                
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
  MacOSMatrixPrep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
    - id: set-matrix
      run: |
        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  
        matrix=$(jq --arg branchName "$branchName" 'map( 
            . | select((.run_on_branch==$branchName) or (.run_on_branch=="always") or ("${{github.event.inputs.run_all}}"=="true")) | select(.build_job=="MacOS")
        )' .github/workflows/build-Dev-Docker-Containers-Matrix.json)                
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
  WindowsMatrixPrep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
    - id: set-matrix
      run: |
        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  
        matrix=$(jq --arg branchName "$branchName" 'map( 
            . | select((.run_on_branch==$branchName) or (.run_on_branch=="always") or ("${{github.event.inputs.run_all}}"=="true")) | select(.build_job=="Windows")
        )' .github/workflows/build-Dev-Docker-Containers-Matrix.json)                
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
  build-Linux:
    runs-on: ubuntu-latest
    env:
      "BUILD_DEV_IMAGES": "0" 
    steps:
      - uses: actions/checkout@v4
      - name: Build System Info
        shell: "bash"
        run: |
          df -h
          uname -a
          echo "DetectedHostOS: `./ScriptsLib/DetectedHostOS`"
      - name: Install Tools
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install dos2unix
      - name: Build Linux Container Images
        run: |
          DEBIAN_FRONTEND=noninteractive make --directory DockerBuildContainers --no-print-directory build-images
          DEBIAN_FRONTEND=noninteractive make --directory DockerBuildContainers --no-print-directory tag-images
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push Linux Container Images
        run: |
          DEBIAN_FRONTEND=noninteractive make --directory DockerBuildContainers --no-print-directory push-images

  build-Windows:
    needs: WindowsMatrixPrep
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix: ${{fromJson(needs.WindowsMatrixPrep.outputs.matrix)}}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            make
      - uses: actions/checkout@v4
      - name: Build System Info
        shell: "bash"
        run: |
          df -h
          uname -a
          systeminfo
          echo "DetectedHostOS: `./ScriptsLib/DetectedHostOS`"
          echo NUMBER_OF_PROCESSORS=$NUMBER_OF_PROCESSORS
          # Was running out of space, and doesn't seem to be commandline way to set storage opts, so
          # add --storage-opts ["size=60GB"] or some such, to this file, and see if it works better, but not needed for now --LGP 2024-02-26
          echo "C:/ProgramData/Docker/config/daemon.json:" -n ; cat "C:/ProgramData/Docker/config/daemon.json"
      - name: Build Windows Container Images (STEP1-vs2k22)
        # Done as separate step since takes so long, and can see the time for this step more clearly... (could be omitted)
        #   DIDNT WORKmake --directory DockerBuildContainers --no-print-directory EXTRA_DOCKER_BUILD_ARGS="--storage-opt 'size=50GB'" sophistsolutionsinc/stroika-buildvm-windows-vs2k22
        run: |
          make --directory DockerBuildContainers --no-print-directory sophistsolutionsinc/stroika-buildvm-windows-vs2k22
      - name: Build Windows Container Images
        run: |
          make --directory DockerBuildContainers --no-print-directory IMAGES="${{ matrix.container_image }}" build-images
      - name: Tag Windows Container Images
        run: |
          make --directory DockerBuildContainers --no-print-directory IMAGES="${{ matrix.container_image }}" tag-images
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push Windows Container Images
        run: |
          make --directory DockerBuildContainers --no-print-directory IMAGES="${{ matrix.container_image }}" push-images
