#!/usr/bin/perl

#
# TODO
#
#		@todo	Consider adding output variables CFLAGS_ADDITIONS, CXXFLAGS_ADDITIONS, CFLAGS_REMOVEALS, CXXFLAGS_REMOVEALS
#		@todo	Consider adding support for ASFLAGS (like CFLAGS)
#

use strict;
use warnings;
no if $] >= 5.017011, warnings => 'experimental::smartmatch';

BEGIN{ @INC = ( "./", @INC ); }

use constant false => 0;
use constant true  => 1;
use constant DEFAULT_BOOL_OPTIONS => -1;

my $configurationFiles	=	"ConfigurationFiles/";

my $configurationName	=	undef;

my $MAKE_INDENT_LEVEL = $ENV{'MAKE_INDENT_LEVEL'};
if (!defined $MAKE_INDENT_LEVEL) {
	$MAKE_INDENT_LEVEL = 0;
}


sub	GetThisScriptDir {
	use File::Basename;
	use Cwd 'abs_path';
	my $p = __FILE__;
	my $A = abs_path ($p);
	my $dirname = dirname($A);
	return $dirname;
}
my	$thisScriptDir	=	GetThisScriptDir ();

sub trim($)
{
	my $string = shift;
	if (not defined($string)) {
		return $string;
	}
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

sub indexOf
{
	my @arr = shift;
	my $v = shift;
	for (my $ii = 0; $ii <= $#arr; $ii++) {
	   if ($arr[$ii] eq $v) {
			return $ii;
	   }
	}
	return -1;
}


my @EXTRA_ARGS = ();


########### CONFIG_Variables ###############
my $ARCH='';
my $BUILD_TOOLS_ROOT=undef;
my $PROJECTPLATFORMSUBDIR='';
my $TARGET_PLATFORMS='';

my @useExtraCDefines;
my @useExtraMakeDefines;
my @packageConfigLinkLines;

my @CPPFLAGS = qw ();
my @CPPFLAGS2Remove = qw ();
my $CPPFLAGS_Overridden = false;
my @CFLAGS = qw ();
my @CFLAGS2Remove = qw ();
my $CFLAGS_Overridden = false;
my @CXXFLAGS = qw ();
my @CXXFLAGS2Remove = qw ();
my $CXXFLAGS_Overridden = false;


#
# BUILD iff LIBFEATUREFLAG_BuildOnly OR LIBFEATUREFLAG_UseStaticTPP
# HAS_FEATURE iff LIBFEATUREFLAG_UseStaticTPP OR LIBFEATUREFLAG_UseSystem
#
my $LIBFEATUREFLAG_BuildOnly = "build-only";
my $LIBFEATUREFLAG_UseStaticTPP = "use";
my $LIBFEATUREFLAG_UseSystem = "use-system";
my $LIBFEATUREFLAG_No = "no";


my $ENABLE_LTO = DEFAULT_BOOL_OPTIONS;
my $ENABLE_ASSERTIONS = DEFAULT_BOOL_OPTIONS;
my $ENABLE_GLIBCXX_DEBUG = DEFAULT_BOOL_OPTIONS;
my $CPPSTD_VERSION_FLAG = '';
my $CWARNING_FLAGS = undef;
my $SharedSymbolVisibility = undef;	# gcc visibility flag - -fvisible=hidden

my $runtimeStackProtectorFlag = DEFAULT_BOOL_OPTIONS;
my $sanitizerFlagsIsDefined = false;		#sadly perl arrays cannot be 'undefined'
my $sanitizerFlagsNoneSet = false;
my @sanitizerFlags = ();
my $noSanitizerFlags = "";

my $HasMakefileBugWorkaround_lto_skipping_undefined_incompatible = DEFAULT_BOOL_OPTIONS;


my $ApplyDebugFlags = DEFAULT_BOOL_OPTIONS;
my $ApplyReleaseFlags = DEFAULT_BOOL_OPTIONS;


## /Zi or /Zl (as opposed to using /Z7 for debug info)
## Z7 may use more disk space but less confusing for library to
## not have symbol information written into .pdb file
my $WinFlag_DebugProgramDatabase = false;	# ignored except for visual studio


### @todo finish review of what warnings we still want - disable a few more... --LGP 2019-08-29
### FOR COMMON ONES - SEE IF THEY SHOULD REALLY BE GCC SPECIFIC
my $DEFAULT_CWARNING_FLAGS_SAFE_COMMON_ = '-Wall ';
$DEFAULT_CWARNING_FLAGS_SAFE_COMMON_	= $DEFAULT_CWARNING_FLAGS_SAFE_COMMON_ . '-Wno-switch ';			# This warning needed because of pattern with eEnd being injected into enums but not looked for in switch
$DEFAULT_CWARNING_FLAGS_SAFE_COMMON_	= $DEFAULT_CWARNING_FLAGS_SAFE_COMMON_ . '-Wno-sign-compare ';		# someday tackle this, but I'm not sure its helpful
$DEFAULT_CWARNING_FLAGS_SAFE_COMMON_	= $DEFAULT_CWARNING_FLAGS_SAFE_COMMON_ . '-Wno-unused-function ';	# we have many of these - review if makes sense warning?

my $DEFAULT_CWARNING_FLAGS_GCC		= $DEFAULT_CWARNING_FLAGS_SAFE_COMMON_;

my $DEFAULT_CWARNING_FLAGS_CLANG	= $DEFAULT_CWARNING_FLAGS_SAFE_COMMON_;
$DEFAULT_CWARNING_FLAGS_CLANG		= $DEFAULT_CWARNING_FLAGS_CLANG . '-Wno-unused-local-typedef '; 		### really needed - get alot of them - e.g. using inherited = ... - (maybe can use [[maybe_unused]])
$DEFAULT_CWARNING_FLAGS_CLANG		= $DEFAULT_CWARNING_FLAGS_CLANG . '-Wno-future-compat ';

my $Config_Tag = undef;   #see 	https://stroika.atlassian.net/browse/STK-667 to support plural

my $FEATUREFLAG_ActivePerl = undef;
my $FEATUREFLAG_LIBCURL = $LIBFEATUREFLAG_No;		#$LIBFEATUREFLAG_UseStaticTPP; tricky some places because of dependencies - resolve that first
my $FEATUREFLAG_boost = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_OpenSSL = "";
my $FEATUREFLAG_OpenSSLExtraArgs = "";
my $FEATUREFLAG_WinHTTP = $LIBFEATUREFLAG_No;
my $FEATUREFLAG_ATLMFC = $LIBFEATUREFLAG_No;
my $FEATUREFLAG_Xerces = undef;
my $FEATUREFLAG_ZLib = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_sqlite = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_LZMA = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_librt = undef;
my $FEATUREFLAG_WIX = undef;
my $qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy = undef;
my $ENABLE_TRACE2FILE = DEFAULT_BOOL_OPTIONS;
my $INCLUDE_SYMBOLS_LIB = true;
my $INCLUDE_SYMBOLS_EXE = DEFAULT_BOOL_OPTIONS;
my $MALLOC_GUARD = DEFAULT_BOOL_OPTIONS;
my $COPTIMIZE_FLAGS = "";
my $STATIC_LINK_GCCRUNTIME = DEFAULT_BOOL_OPTIONS;
my $STATIC_LINK_SANITIZERS = DEFAULT_BOOL_OPTIONS;
my $COMPILER_DRIVER = "";
my $COMPILER_DRIVER_C = "";				# @todo allow cmdline option to set _C or _CPlusPlus version
my $COMPILER_DRIVER_CPlusPlus = "";
my $AS = undef;
my $AR = undef;
my $LIBTOOL = undef; # Windows format LIB tool
my $RANLIB = undef;
my $Linker = undef;
my $MIDL = undef;
my $RC = undef;
my $STRIP = undef;
my $EXTRA_PREFIX_LINKER_ARGS = "";
my $EXTRA_SUFFIX_LINKER_ARGS = "";
my $RUN_PREFIX = "";			# for now just used as prefix for stuff like LD_PRELOAD=/usr/lib/arm-linux-gnueabihf/libasan.so.3, esp for running tests
my $CrossCompiling = "false";
my $onlyGenerateIfCompilerExists = false;
my $INCLUDES_PATH = undef;		# space separated list
my @INCLUDES_PATH_ADD  = qw();
my $LIBS_PATH = undef;			# space separated list
my @LIBS_PATH_ADD  = qw();
my $LIB_DEPENDENCIES  = undef;	# space separated list
my @LIB_DEPENDENCIES_ADD  = qw();
my $STDCXXLIB = undef;
my $TOOLS_PATH_ADDITIONS = undef;
my $TOOLS_PATH_ADDITIONS_BUGWORKAROUND = "";			# space separated list



# More standard to have false, true is the value used in VS2k project files (through 2.1a2)
# for a while in Stroika based apps /EHa versus /EHsc - https://docs.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model?view=vs-2019
# So in Stroika 2.1a2 switch default to more standard (and recommended by MSFT docs above) no structured exceptions
my $Windows_Exceptions_SupportStructuredExceptions = false;

sub	DoHelp_
{
	my $x = shift(@_);
	print("Usage:\n");
		print("  configure CONFIGURATION-NAME [OPTIONS]* where options can be:\n");
		print("	    --arch {ARCH}                                   /* for high level architecture - first section of gcc -machine - e.g. x86, x86_64, arm - usually auto-detected */\n");
		print("	    [--config-tag {TAG-NAME}]*                      /* Add TAG-NAME to the list of tags associated with this configuration (for now limit one). Maybe repeated */\n");
		print("	    --platform {PLATFORM}                           /* Specifies the ProjectPlatformSubdir (Unix, VisualStudio.Net-2017, VisualStudio.Net-2019) - usually auto-detected */\n");
		print("	    --target-platforms {TARGET_PLATFORMS}           /* Specifies the target-platforms- system compiling Stroika for - (set of ENUM where ENUM=(Windows, POSIX, Linux, MacOS)) - usually auto-detected */\n");
		print("	    --build-tools-root {BUILD_TOOLS_ROOT}           /* Specifies the BUILD_TOOLS_ROOT - initially just for visual studio - usually auto-detected */\n");
		print("	    --assertions { enable|disable|default }         /* Enables/disable assertion feature (setting qDebug) */\n");
		print("	    --block-allocation { enable|disable|default }   /* Enables/disable block-allocation (a feature that improves performance, but messes up valgrind) */\n");
		print("	    --valgrind { enable|disable|default }           /* Enables/disable valgrind-specific runtime code (so far only needed for clean helgrind use) */\n");
		print("	    --GLIBCXX_DEBUG { enable|disable|default }      /* Enables/Disables GLIBCXX_DEBUG (G++-specific) */\n");
		print("	    --cppstd-version {FLAG}                         /* Sets can be c++17, or c++2a */\n");
		print("	    --stdlib {LIB}                                  /* libc++ (clang lib), libstdc++ (gcc and often clang) */\n");
		print("	    --ActivePerl {use|no}                           /* Enables/disables use of ActivePerl (Windows Only) - JUST USED TO BUILD OPENSSL for Windows*/\n");
		print("	    --LibCurl {build-only|use|use-system|no}        /* Enables/disables use of LibCurl for this configuration [default TBD]*/\n");
		print("	    --boost {build-only|use|use-system|no}          /* Enables/disables use of boost for this configuration [default use] */\n");
		print("	    --OpenSSL {build-only|use|use-system|no}        /* Enables/disables use of OpenSSL for this configuration [default use] */\n");
		print("	    --OpenSSL-ExtraArgs { purify? }                 /* Optionally configure extra OpenSSL features (see Stroika/OpenSSL makefile) */\n");
		print("	    --WinHTTP {use-system|no}                       /* Enables/disables use of WinHTTP for this configuration [default use-system on windows, and no otherwise] */\n");
		print("	    --ATLMFC {use-system|no}                        /* Enables/disables use of ATLMFC for this configuration [default use-system on windows, and no otherwise] */\n");
		print("	    --Xerces {build-only|use|use-system|no}         /* Enables/disables use of Xerces for this configuration [default use] */\n");
		print("	    --sqlite {build-only|use|use-system|no}         /* Enables/disables use of sqlite for this configuration [default use] */\n");
		print("	    --ZLib {build-only|use|use-system|no}           /* Enables/disables use of ZLib for this configuration [default use] */\n");
		print("	    --WIX {use|use-system|no}                       /* Enables/disables use of WIX (Windows Only) - to build windows installers*/\n");
		print("	    --lzma {build-only|use|use-system|no}           /* Enables/disables use of LZMA SDK for this configuration [default use] */\n");
		print("	    --no-third-party-components           			/* equivilent to --ActivePerl no --LibCurl no --boost no --OpenSSL no --WinHTTP no --ATLMFC no --Xerces no --sqlite no --ZLib no --WIX no --lzma no  */\n");
		print("	    --trace2file { enable|disable|default }         /* Enables/disable trace2file feature */\n");
		print("	    --static-link-gccruntime { enable|disable }     /* Enables/disable gcc runtime static link (only applies if gcc family compiler) */\n");
		print("	    --make-define {ARG}                             /* Define makefile define for the given configuration: text of arg appears as line in Configuration.mk */\n");
		print("	    --compiler-driver {ARG}                         /* default is gcc */\n");
		print("	    --ar {ARG}                                      /* default is undefined, but if compiler-driver is gcc or g++, this is gcc-ar */\n");
		print("	    --as {ARG}                                      /* default is 'as' on unix, and retrieved from visual studio on visual studio */\n");
		print("	    --ranlib {ARG}                                  /* default is undefined, but if compiler-driver is gcc or g++, this is gcc-ranlib */\n");
		print("	    --strip {ARG}                                   /* sets program to do stripping; default is undefined, but for POSIX, defaults to strip */\n");
		print("	    --append-CFLAGS {ARG}                           /* Appends ARG to CFLAGS */\n");
		print("	    --remove-CFLAGS {ARG}                           /* Remove ARG from CFLAGS (including default added args; processed after all adds applied) */\n");
		print("	    --replace-all-CFLAGS {ARG}                      /* OVERRIDES DEFAULTS- and sets CFLAGS to just these values */\n");
		print("	    --append-CPPFLAGS {ARG}                         /* Appends ARG to CPPFLAGS; alias for append-CFLAGS AND append-CXXFLAGS, elg --append-CPPFLAGS -DA=B */\n");
		print("	    --remove-CPPFLAGS {ARG}                         /* Remove ARG from CPPFLAGS (including default added args; processed after all adds applied) */\n");
		print("	    --replace-all-CPPFLAGS {ARG}                    /* OVERRIDES DEFAULTS- and sets CPPFLAGS to just these values */\n");
		print("	    --append-CXXFLAGS {ARG}                         /* Appends ARG to CXXFLAGS */\n");
		print("	    --remove-CXXFLAGS {ARG}                         /* Remove ARG from CXXFLAGS (including default added args; processed after all adds applied) */\n");
		print("	    --replace-all-CXXFLAGS {ARG}                    /* OVERRIDES DEFAULTS- and sets CXXFLAGS to just these values */\n");
		print("	    --SharedSymbolVisibility {ARG}                  /* alias for append-CFLAGS AND append-CXXFLAGS with -fvisibility=XXX (defaults to hidden on gcc/clang/unix compilers) */\n");
		print("	    --append-extra-prefix-linker-args {ARG}         /* Appends ARG to 'extra prefix linker args */\n");
		print("	    --append-extra-suffix-linker-args {ARG}         /* Appends ARG to 'extra suffix linker args */\n");
		print("	    --append-extra-compiler-and-linker-args {ARG}   /* Appends ARG to 'extra compiler' and 'extra linker' args */\n");
		print("	    --includes-path {ARG}                           /* Sets INCLUDES_PATH variable (: separated, since unix standard and allows spaces) */\n");
		print("	    --append-includes-path {ARG}                    /* Appends ARG to 'INCLUDES_PATH */\n");
		print("	    --libs-path {ARG}                               /* Sets LIBS_PATH variable (':' separated, since unix standard and allows spaces) */\n");
		print("	    --append-libs-path {ARG}                        /* Appends ARG to 'LIBS_PATH */\n");
		print("	    --lib-dependencies {ARG}                        /* Sets LIB_DEPENDENCIES variable (space separated) */\n");
		print("	    --append-lib-dependencies {ARG}                 /* Appends ARG to 'LIB_DEPENDENCIES */\n");
		print("	    --run-prefix {ARG}                              /* Sets variable RUN_PREFIX with stuff injected before run for built executables,\n");
		print("	                                                       such as LD_PRELOAD=/usr/lib/arm-linux-gnueabihf/libasan.so.3 */\n");
		print("	    --append-run-prefix {ARG}                       /* Appends ARG to 'extra linker */\n");
		print("	    --pg {ARG}                                      /* Turn on -pg option (profile for UNIX/gcc platform) on linker/compiler */\n");
		print("	    --lto { enable|disable }                        /* Turn on link time code gen on linker/compiler (for now only gcc/unix stack) */\n");
		print("	    --cross-compiling {true|false}                  /* Defaults generally to false, but set explicitly to control if certain tests will be run */\n");
		print("	    --apply-default-debug-flags                     /*  */\n");
		print("	    --apply-default-release-flags                   /*  */\n");
		print("	    --only-if-has-compiler                          /* Only generate this configuration if the compiler appears to exist (test run)*/\n");
		print("	    --debug-symbols {true|false}                    /* --debug-symbols-lib AND --debug-symbols-exe at the same time */\n");
		print("	    --debug-symbols-lib {true|false}                /* defaults to true, but can be disabled if makes compile/link/etc too big/slow */\n");
		print("	    --debug-symbols-exe {true|false}                /* defaults to true, but can be disabled if makes compile/link/etc too big/slow */\n");
		print("	    --malloc-guard {true|false}                     /* defaults to false (for now experimental and only works with GCC) */\n");
		print("	    --runtime-stack-check {true|false}              /* gcc -fstack-protector-all */\n");
		print("	    --sanitize {none|thread|address|undefined|leak} /* if arg none, reset to none, else adds arg to sanitized feature (gcc/clang only) -\n");
		print("	                                                       any arg you can pass to -fsanitize=XXXX */\n");
		print("	                                                    /* see https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc.pdf (search -fsanitize=; eg. --sanitize address,undefined */\n");
		print("	    --no-sanitize {thread|vptr|etc...}              /* any from --sanitize or all */\n");
		print("\n");
		print("Configure's behavior is also influenced by the following environment variables:\n");
		print("	    CC, CXX, PLATFORM, TARGET_PLATFORMS, ARCH, AS, AR, RANLIB, STRIP; these just simpulate adding the obvoius associated argument to configure\n");
		print("	    EXTRA_CONFIGURE_ARGS= a space separated list of arguments added to the beginning of the configure command\n");
		
	exit ($x);
}





sub     ToBool_
{
	my $x = shift(@_);
	if ($x eq "true") {
		return true;
	}
	if ($x eq "false") {
		return false;
	}
	die ("expected bool argument to be true/false");
}




sub     IsGCCOrGPlusPlus_
{
	my $x = shift(@_);
	return ($x =~ /gcc[!\/]*/) || (($x =~ /g\+\+[!\/]*/) && !($x =~ /clang\+\+/));
}

sub     IsClangOrClangPlusPlus_
{
	my $x = shift(@_);
	return ($x =~ /clang[!\/]*/);
}

sub     IsClangPlusPlus_
{
	my $x = shift(@_);
	return ($x =~ /clang\+\+[!\/]*/);
}

#return number
sub     GetGCCVersion_
{
	no warnings;	#@todo sometimes gives warning about use of  uninitialized variable - not sure why - debug later
	my $x = shift(@_);
	return trim (`($x --version 2>/dev/null) | head -1 | sed 's/([^)]*)/x/' | awk '{print \$3;}'`) * 1;
}


#return number
sub     GetClangVersion_
{
	my $x = trim(shift(@_));
	my $firstLine = trim (`($x --version 2>/dev/null) | head -1`);
	if (not defined($firstLine)) {
		return 0;
	}
	no warnings 'numeric';
	if (index($firstLine, "Apple ") == 0) {
		my $ver = trim(`echo "$firstLine" | awk '{print \$4}'`);
		$ver = $ver * 1;
		return $ver;
	}
	else {
		my $ver = trim (`echo "$firstLine" |  sed 's/.*LLVM/x/' | sed 's/)//' |  awk '{print \$3;}'`);
		# Starting in ubuntu 20.10, they switched to the format used by crapple
		if ($ver == "version") {
			$ver = trim(`echo "$firstLine" | awk '{print \$4}'`);
		}
		$ver = $ver * 1;
		return $ver;
	}
}

sub     IsMSVCCompiler_
{
   #bad way but best I know for now
	if ("$^O" eq "cygwin") {
		return true;
	}
	return false
}

sub     Get_MSVC_CL_Version_
{
	my $x = trim(shift(@_));
	my $firstLine = trim (`('$x' 2>&1) | head -1`);
	if (not defined($firstLine)) {
		return 0;
	}
	no warnings 'numeric';
	my $ver = trim(`echo "$firstLine" | awk '{print \$7}' | sed 's/\\.//g'`);
	$ver = $ver * 1;
	return $ver;
}





sub     FillDefaultIncludesPathIfNeeded_
{
	#IF we set include path  explicitly, then suppress adding include path automatically (based on features etc) - just explicitly added ones from the commandline
	my $includeAutomaticDependencies = !defined ($INCLUDES_PATH);
	if ($includeAutomaticDependencies) {
		if (
			$FEATUREFLAG_Xerces eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_LIBCURL eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_boost eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_OpenSSL eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_ZLib eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_sqlite eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_LZMA eq $LIBFEATUREFLAG_UseStaticTPP
		) {
			push @INCLUDES_PATH_ADD, trim (`realpath --canonicalize-missing Builds/$configurationName/ThirdPartyComponents/include/`) . "/";
		}
		push @INCLUDES_PATH_ADD, trim (`realpath --canonicalize-missing Library/Sources/`) . "/";
		push @INCLUDES_PATH_ADD, trim (`realpath --canonicalize-missing IntermediateFiles/$configurationName`) . "/";
	}
	if (!defined ($INCLUDES_PATH)) {
		if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			my $x = GetMSVCVarName_ ("INCLUDE");
			$INCLUDES_PATH = trim (`cygpath --unix --path \"$x\"`);
		}
		else {
			$INCLUDES_PATH = "";
		}
	}
	my $var;
	foreach $var (@INCLUDES_PATH_ADD) {
		if (not ($INCLUDES_PATH eq "")) {
			$INCLUDES_PATH .= ":";
		}
		$INCLUDES_PATH .= $var;
	}
}
sub     FillDefaultLibsPathIfNeeded_
{
	my $includeAutomaticDependencies = !defined ($LIBS_PATH);
	if ($includeAutomaticDependencies) {
		if (
			$FEATUREFLAG_Xerces eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_LIBCURL eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_boost eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_OpenSSL eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_ZLib eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_sqlite eq $LIBFEATUREFLAG_UseStaticTPP ||
			$FEATUREFLAG_LZMA eq $LIBFEATUREFLAG_UseStaticTPP
		) {
			push @LIBS_PATH_ADD, trim (`realpath --canonicalize-missing Builds/$configurationName/ThirdPartyComponents/lib/`) . "/";
		}
	}
	if (!defined ($LIBS_PATH)) {
		if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			my $x = GetMSVCVarName_ ("LIB");
			$LIBS_PATH = trim (`cygpath --unix --path \"$x\"`);
		}
		else {
			$LIBS_PATH = "";
		}
	}
	my $var;
	foreach $var (@LIBS_PATH_ADD) {
		if (not ($LIBS_PATH eq "")) {
			$LIBS_PATH .= ":";
		}
		$LIBS_PATH .= $var;
	}
}
sub		PortablyAddLibToLibDependencies_
{
	my $libBaseName = trim(shift(@_));
	if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
		$LIB_DEPENDENCIES .= "$libBaseName.lib ";
	}
	else {
		$LIB_DEPENDENCIES .= "-l$libBaseName ";
	}
}
sub     FillDefaultLibDependencies_
{
	#IF we set lib dependencies explicitly, then suppress adding libs automatically (based on features etc) - just explicitly added ones from the commandline
	my $includeAutomaticLibDependencies = !defined ($LIB_DEPENDENCIES);
	if (!defined ($LIB_DEPENDENCIES)) {
		$LIB_DEPENDENCIES = "";
	}

	my $mustAppendDefaults = false;

	if ($LIB_DEPENDENCIES eq "") {
		$mustAppendDefaults = true;
	}

	my $var;
	foreach $var (@LIB_DEPENDENCIES_ADD) {
		$LIB_DEPENDENCIES .= $var . " ";
	}

	if ($includeAutomaticLibDependencies) {
		if ($FEATUREFLAG_Xerces ne $LIBFEATUREFLAG_No) {
			if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
				if ($ENABLE_ASSERTIONS) {
					PortablyAddLibToLibDependencies_("xerces-c_3D");
				}
				else {
					PortablyAddLibToLibDependencies_("xerces-c_3");
				}
			}
			else {
				PortablyAddLibToLibDependencies_("xerces-c");
			}
		}

		#	$ pkg-config --static --libs openssl
		#		which produces
		#			-lssl -ldl -lcrypto -ldl
		if ($FEATUREFLAG_OpenSSL ne $LIBFEATUREFLAG_No) {
			if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
				#???dont thnik needed cuz of pragma comment link...
			}
			else {
				push (@packageConfigLinkLines, "PKG_CONFIG_PATH=\$(shell realpath --canonicalize-missing \$(StroikaRoot)Builds/\$(CONFIGURATION)/ThirdPartyComponents/lib/pkgconfig) pkg-config --static --libs openssl");
			}
		}


		#	PKG_CONFIG_PATH=Builds/Debug/ThirdPartyComponents/lib/pkgconfig/ pkg-config --static --libs libcurl
		#		which produces
		#			-L/mnt/c/Sandbox/Stroika/DevRoot/Builds/Debug/ThirdPartyComponents/lib -lcurl -lssl -lcrypto -lssl -lcrypto -ldl -lpthread
		if ($FEATUREFLAG_LIBCURL ne $LIBFEATUREFLAG_No) {
			if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
				#???dont thnik needed cuz of pragma comment link...
			}
			else {
				push (@packageConfigLinkLines, "PKG_CONFIG_PATH=\$(shell realpath --canonicalize-missing \$(StroikaRoot)Builds/\$(CONFIGURATION)/ThirdPartyComponents/lib/pkgconfig) pkg-config --static --libs libcurl");
			}
		}


		if ($FEATUREFLAG_LZMA ne $LIBFEATUREFLAG_No) {
			PortablyAddLibToLibDependencies_("lzma");
		}
		if ($FEATUREFLAG_sqlite ne $LIBFEATUREFLAG_No) {
			PortablyAddLibToLibDependencies_("sqlite");
		}
		if ($FEATUREFLAG_ZLib ne $LIBFEATUREFLAG_No) {
			if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
				PortablyAddLibToLibDependencies_("zlib");
			}
			else {
				PortablyAddLibToLibDependencies_("z");
			}
		}
	}

	if ($mustAppendDefaults == true) {
		if (index ($TARGET_PLATFORMS, "Windows") != -1) {
			$LIB_DEPENDENCIES .= "urlmon.lib ";
			$LIB_DEPENDENCIES .= "rpcrt4.lib ";
			$LIB_DEPENDENCIES .= "kernel32.lib ";
			$LIB_DEPENDENCIES .= "user32.lib ";
			$LIB_DEPENDENCIES .= "gdi32.lib ";
			$LIB_DEPENDENCIES .= "winspool.lib ";
			$LIB_DEPENDENCIES .= "comdlg32.lib ";
			$LIB_DEPENDENCIES .= "advapi32.lib ";
			$LIB_DEPENDENCIES .= "shell32.lib ";
			$LIB_DEPENDENCIES .= "ole32.lib ";
			$LIB_DEPENDENCIES .= "oleaut32.lib ";
			$LIB_DEPENDENCIES .= "uuid.lib ";
			$LIB_DEPENDENCIES .= "odbc32.lib ";
			$LIB_DEPENDENCIES .= "odbccp32.lib ";
		}
		if (index ($TARGET_PLATFORMS, "POSIX") != -1) {
			$LIB_DEPENDENCIES .= "-lpthread ";
			$LIB_DEPENDENCIES .= "-lm ";
			if ($FEATUREFLAG_librt eq $LIBFEATUREFLAG_UseSystem) {
				$LIB_DEPENDENCIES .= "-lrt ";
			}
		}
	}


}
sub     FillInToolsPathAdditionsIfNeeded_
{
	my $includeAutomaticDependencies = !defined ($TOOLS_PATH_ADDITIONS);
	if ($includeAutomaticDependencies) {
		if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			my $x = GetMSVCVarName_ ("TOOLS_PATH_ADDITIONS");
			$TOOLS_PATH_ADDITIONS = trim ($x);
			my $v = Get_MSVC_CL_Version_ ($COMPILER_DRIVER_CPlusPlus) ;
			if (IsMSVCCompiler_ () && 191627034 <= $v  && $v <= 191800000 ) {
				## only need the one, but this is easiest way to get the right path
				## $TOOLS_PATH_ADDITIONS_BUGWORKAROUND = '/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64';
				$TOOLS_PATH_ADDITIONS_BUGWORKAROUND = $TOOLS_PATH_ADDITIONS;
			}
		}
		else {
			$TOOLS_PATH_ADDITIONS = "";
		}
	}
}




### Initial defaults before looking at command-line arguments
sub	SetInitialDefaults_
{
	if ($TARGET_PLATFORMS eq "") {
		if ("$^O" eq "linux") {
			$TARGET_PLATFORMS = 'Linux POSIX';
		}
		elsif ("$^O" eq "darwin") {
			$TARGET_PLATFORMS = 'MacOS POSIX';
		}
		elsif ("$^O" eq "cygwin") {
			$TARGET_PLATFORMS = 'Windows';
		}
	}
	if (("$^O" eq "linux") or ("$^O" eq "darwin")) {
		$PROJECTPLATFORMSUBDIR = 'Unix';
	}
	if ("$^O" eq "cygwin") {
		# try vs 2k19
		if ($PROJECTPLATFORMSUBDIR eq "") {
			my $PROGRAMFILESDIR= trim (`cygpath \"$ENV{'PROGRAMFILES'}\"`);
			my $PROGRAMFILESDIR2= "/cygdrive/c/Program Files (x86)/";
			system ('ls -l "/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/"2019/*/VC >/dev/null 2> /dev/null');
			if ($? == 0) {
				$PROJECTPLATFORMSUBDIR = 'VisualStudio.Net-2019';
			}
			system ('ls -l "/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/"2019/*/VC >/dev/null 2> /dev/null');
			if ($? == 0) {
				$PROJECTPLATFORMSUBDIR = 'VisualStudio.Net-2019';
			}
			#autodetect ATLMFC (Express verison missing it)
			if ($PROJECTPLATFORMSUBDIR eq "VisualStudio.Net-2019") {
				system ('ls -l "/cygdrive/c/Program Files (x86)//Microsoft Visual Studio/2019/"*/VC/Tools/MSVC/*/atlmfc/include/afxext.h >/dev/null 2> /dev/null');
				if ($? == 0) {
					$FEATUREFLAG_ATLMFC = $LIBFEATUREFLAG_UseSystem;
				}
				else  {
					$FEATUREFLAG_ATLMFC = $LIBFEATUREFLAG_No;
				}
			}
		}
		# try vs 2k17
		if ($PROJECTPLATFORMSUBDIR eq "") {
			my $PROGRAMFILESDIR= trim (`cygpath \"$ENV{'PROGRAMFILES'}\"`);
			my $PROGRAMFILESDIR2= "/cygdrive/c/Program Files (x86)/";
			system ('ls -l "/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/"2017/*/VC >/dev/null 2> /dev/null');
			if ($? == 0) {
				$PROJECTPLATFORMSUBDIR = 'VisualStudio.Net-2017';
			}
			system ('ls -l "/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/"2017/*/VC >/dev/null 2> /dev/null');
			if ($? == 0) {
				$PROJECTPLATFORMSUBDIR = 'VisualStudio.Net-2017';
			}
			#autodetect ATLMFC (Express verison missing it)
			if ($PROJECTPLATFORMSUBDIR eq "VisualStudio.Net-2017") {
				system ('ls -l "/cygdrive/c/Program Files (x86)//Microsoft Visual Studio/2017/"*/VC/Tools/MSVC/*/atlmfc/include/afxext.h >/dev/null 2> /dev/null');
				if ($? == 0) {
					$FEATUREFLAG_ATLMFC = $LIBFEATUREFLAG_UseSystem;
				}
				else  {
					$FEATUREFLAG_ATLMFC = $LIBFEATUREFLAG_No;
				}
			}
		}
	}

	if (("$^O" eq "linux") or ("$^O" eq "darwin")) {
		$FEATUREFLAG_LIBCURL = $LIBFEATUREFLAG_UseStaticTPP;
	}
	if ("$^O" eq "cygwin") {
		$FEATUREFLAG_WinHTTP = $LIBFEATUREFLAG_UseSystem;
	}
	if ("$^O" eq "darwin") {
		# hacks so can do initial port/compile
		$FEATUREFLAG_librt = $LIBFEATUREFLAG_No;
		$STATIC_LINK_GCCRUNTIME = 0;
		$COMPILER_DRIVER = "clang";
		$COMPILER_DRIVER_C = "clang";
		$COMPILER_DRIVER_CPlusPlus = "clang++";
		$CWARNING_FLAGS = $DEFAULT_CWARNING_FLAGS_CLANG;
		$AR = "ar";
		$AS = "as";
		$RANLIB = "ranlib";
	}
}



sub     ReplaceLast_
{
	my $srcString = shift(@_);
	my $replaceThis = shift(@_);
	my $withThis = shift(@_);

	#@todo find a better way to safely substitute
	my $rreplaceThis = trim (`echo $replaceThis | rev`);
	my $rwithThis = trim (`echo $withThis | rev`);
	return trim (`echo $srcString | rev | sed 's/$rreplaceThis/$rwithThis/' | rev`);
}


sub	SetDefaultForCompilerDriver_
{
	my $isVisualStudio = 		($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/);
	if ($isVisualStudio eq 1) {
		$isVisualStudio = true;
	}
	else {
		$isVisualStudio = false;
	}

	if ($isVisualStudio) {
		if ($ARCH eq "32" or $ARCH eq "WIN32") {
			$ARCH = "x86";
		}
		if ($ARCH eq "64" or $ARCH eq "WIN64") {
			$ARCH = "x86_64";
		}
		if ($ARCH eq "") {
			if ($configurationName =~ /64$/) {
				$ARCH = "x86_64";
				print STDERR "WARNING: guessing the target arch (x86 or x86_64) from the configuration name: use --arch instead!\n";
			}
			if ($configurationName =~ /32/) {
				$ARCH = "x86";
				print STDERR "WARNING: guessing the target arch (x86 or x86_64) from the configuration name: use --arch instead!\n";
			}
		}
		if ($ARCH eq "") {
			$ARCH = "x86_64";
			print STDERR "WARNING: guessing the target arch x86_64: use --arch (x86 or x86_64) instead!\n";
		}
	}

	no warnings;	#@todo fix - not sure why we get warning on use of $CPPSTD_VERSION_FLAG
	if ($CPPSTD_VERSION_FLAG eq '') {
		if (IsGCCOrGPlusPlus_ ($COMPILER_DRIVER)) {
			$CPPSTD_VERSION_FLAG="--std=c++17"
		}
		elsif (IsClangOrClangPlusPlus_ ($COMPILER_DRIVER)) {
			$CPPSTD_VERSION_FLAG="--std=c++17"
		}
		elsif ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			$CPPSTD_VERSION_FLAG="/std:c++latest"
		}
	}
	if ($PROJECTPLATFORMSUBDIR eq 'Unix') {
		if ($STATIC_LINK_GCCRUNTIME == DEFAULT_BOOL_OPTIONS) {
			$STATIC_LINK_GCCRUNTIME = 1;
		}
	}
	if (! defined $CWARNING_FLAGS) {
		$CWARNING_FLAGS = '';
		if (IsGCCOrGPlusPlus_ ($COMPILER_DRIVER)) {
			$CWARNING_FLAGS = $CWARNING_FLAGS . $DEFAULT_CWARNING_FLAGS_GCC;
			if (GetGCCVersion_ ($COMPILER_DRIVER) >= 5.2 && GetGCCVersion_ ($COMPILER_DRIVER) < 6) {
				#This is broken in gcc 5.2 - #https://gcc.gnu.org/ml/gcc-bugs/2015-08/msg01811.html
				$EXTRA_PREFIX_LINKER_ARGS = $EXTRA_PREFIX_LINKER_ARGS . " -Wno-odr"
			}
		}
		elsif (IsClangOrClangPlusPlus_($COMPILER_DRIVER)) {
			$CWARNING_FLAGS = $CWARNING_FLAGS . $DEFAULT_CWARNING_FLAGS_CLANG;
		}
	}

	if ($COMPILER_DRIVER_C eq "") {
		$COMPILER_DRIVER_C = $COMPILER_DRIVER;
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER)) {
			$COMPILER_DRIVER_C = ReplaceLast_ ($COMPILER_DRIVER, 'g++', 'gcc');
		}
		elsif (IsClangOrClangPlusPlus_($COMPILER_DRIVER)) {
			$COMPILER_DRIVER_C = ReplaceLast_ ($COMPILER_DRIVER, 'clang++', 'clang');
		}
	}
	if ($COMPILER_DRIVER_CPlusPlus eq "") {
		$COMPILER_DRIVER_CPlusPlus = $COMPILER_DRIVER;
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER)) {
			$COMPILER_DRIVER_CPlusPlus = ReplaceLast_ ($COMPILER_DRIVER, 'gcc', 'g++');
		}
		elsif (IsClangOrClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			if (!IsClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
				$COMPILER_DRIVER_CPlusPlus = ReplaceLast_ ($COMPILER_DRIVER_CPlusPlus, 'clang', 'clang++');
			}
		}
	}
	if ($AS eq "") {
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			$AS = ReplaceLast_ ($COMPILER_DRIVER_CPlusPlus, 'g++', 'as');
			$AS =~ s/-as-.*$/-as/;
		}
		elsif (IsClangOrClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			if (!IsClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
				$AS = ReplaceLast_ ($COMPILER_DRIVER_CPlusPlus, 'clang++', 'as');
				$AS =~ s/-as-.*$/-as/;
			}
		}
	}
	if (! defined $STDCXXLIB) {
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			$STDCXXLIB = "libstdc++";
		}
		if (IsClangOrClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			$STDCXXLIB = "libc++";
		}
	}
	if (! defined $SharedSymbolVisibility) {
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus) or IsClangOrClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			# harmless either way on Linux but on MacOSX sileneces a warning when linking with boost;
			# probably a good idea in general anyhow as a default
			# -- LGP 2019-02-09
			$SharedSymbolVisibility = "hidden";
		}
	}
	if ($ApplyDebugFlags == true) {
		if ($ENABLE_ASSERTIONS == DEFAULT_BOOL_OPTIONS) {
			$ENABLE_ASSERTIONS = 1;
		}
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus) || IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
			if ($ENABLE_GLIBCXX_DEBUG == DEFAULT_BOOL_OPTIONS) {
				$ENABLE_GLIBCXX_DEBUG = 1;
			}
			if ($runtimeStackProtectorFlag == DEFAULT_BOOL_OPTIONS) {
				$runtimeStackProtectorFlag = true;
			}
			if (trim (`uname -r`) eq "4.4.0-43-Microsoft" || trim (`uname -r`) eq "4.4.0-17134-Microsoft") {
				#LEAVE empty default, cuz for this version of WSL, asan doesn't work - insufficient procfs support
				### NOTE - this is FIXED in 4.4.0-17763-Microsoft
			}
			elsif (!$sanitizerFlagsNoneSet) {
				my %already = map { $_ => 1 } @sanitizerFlags;
				if(!exists($already{'address'})) {
					if (trim(`awk -F= '/^NAME/{print $2}' /etc/os-release 2>/dev/null`) =~ /CentOS/) {
						#skip cuz broken on Centos7  - spurrious address-use-after-scope errors (I THINK)
					}
					else {
						push @sanitizerFlags, 'address';
					}
				}
				if(!exists($already{'undefined'})) {
					if (trim(`awk -F= '/^NAME/{print $2}' /etc/os-release 2>/dev/null`) =~ /CentOS/) {
						#skip cuz broken on Centos8  - spurrious warnings when run...
					}
					else {
						push @sanitizerFlags, 'undefined';
					}
				}
				$sanitizerFlagsIsDefined = true;
			}
			# @see https://stroika.atlassian.net/browse/STK-601 for details on why this is needed (ObjectVariantMapper) - qCompiler_SanitizerFunctionPtrConversionSuppressionBug
			# NOTE - this workaround
			# VERIFIED still needed as of 2020-11-22, on macos/xcode 11 and Ubuntu 20.04 and 20.10 with clang 10/11
			if (IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus) && GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) <= ("$^O" eq "darwin"? 13.0 : 11.0)) {
				#broken in clang++-8.0 (at least without fiddling more with more targetted suppressions)
				#my $test2Suppress = "function";
				my $test2Suppress = "undefined";
				if ("$^O" eq "darwin") {
					### verified still broken in XCode 10 (or cannot find other workaround without this)
					$test2Suppress = "vptr";
				}
				if ($noSanitizerFlags eq "") {
					$noSanitizerFlags = $test2Suppress;
				}
				else {
					$noSanitizerFlags = $test2Suppress . "," . $noSanitizerFlags;
				}
			}
		}

		if ($ENABLE_TRACE2FILE == DEFAULT_BOOL_OPTIONS) {
			$ENABLE_TRACE2FILE = 1;
		}
		if ($INCLUDE_SYMBOLS_EXE == DEFAULT_BOOL_OPTIONS) {
			$INCLUDE_SYMBOLS_EXE = true;
		}

		#helpful to print stack traces in log (not critical, and has performance overhead)
		#see Debug::BackTrace ()
		if ($PROJECTPLATFORMSUBDIR eq 'Unix') {
			$EXTRA_PREFIX_LINKER_ARGS .= " -rdynamic";
		}

	}
	elsif ($ApplyReleaseFlags == true) {
		if ($ENABLE_ASSERTIONS == DEFAULT_BOOL_OPTIONS) {
			$ENABLE_ASSERTIONS = 0;
		}
		if ($ENABLE_LTO == DEFAULT_BOOL_OPTIONS) {
			if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus) || IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
				if (trim(`awk -F= '/^NAME/{print $2}' /etc/os-release 2>/dev/null`) =~ /CentOS/) {
					#skip cuz broken on Centos7  - generates link errors with boost (maybe an issue how I build boost)
				}
				else {
					$ENABLE_LTO = true;
				}
			}
			if ($isVisualStudio) {
				$ENABLE_LTO = true;
			}
		}
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus) || IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
			if ($COPTIMIZE_FLAGS eq "") {
				$COPTIMIZE_FLAGS = "-O3";
			}
			if ($ENABLE_GLIBCXX_DEBUG == DEFAULT_BOOL_OPTIONS) {
				$ENABLE_GLIBCXX_DEBUG = 0;
			}
		}
		if (IsMSVCCompiler_ ($COMPILER_DRIVER_CPlusPlus)) {
			$COPTIMIZE_FLAGS = "/O2 /Oi /Oy";
		}
		if ($ENABLE_TRACE2FILE == DEFAULT_BOOL_OPTIONS) {
			$ENABLE_TRACE2FILE = 0;
		}

		if ($isVisualStudio) {
			#	/OPT:REF eliminates functions and or data that are never referenced
			#	/OPT:ICF[=iterations] to perform identical COMDAT folding
			$EXTRA_PREFIX_LINKER_ARGS .= " /OPT:REF";
			$EXTRA_PREFIX_LINKER_ARGS .= " /OPT:ICF";
		}

	}

	if (!(defined $AR)) {
		if ( IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			my $ccLessArgs = $COMPILER_DRIVER_C;
			$ccLessArgs  =~ s/\ .*//;
			$AR = ReplaceLast_ ($ccLessArgs, 'gcc', 'gcc-ar');
		}
		elsif ( IsClangOrClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			my $ccLessArgs = $COMPILER_DRIVER_C;
			$ccLessArgs  =~ s/\ .*//;
			$AR = ReplaceLast_ ($ccLessArgs, 'clang', 'llvm-ar');
		}
	}
	if (!(defined $AS) and (!("$^O" eq "cygwin"))) {
		$AS = "as";
	}
	if (!(defined $AR) and (!("$^O" eq "cygwin"))) {
		$AR = "ar";
	}
	if (!(defined $RANLIB)) {
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			my $ccLessArgs = $COMPILER_DRIVER_C;
			$ccLessArgs  =~ s/\ .*//;
			$RANLIB = ReplaceLast_ ($ccLessArgs, 'gcc', 'gcc-ranlib');
		}
		elsif (IsClangOrClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
			my $ccLessArgs = $COMPILER_DRIVER_C;
			$ccLessArgs  =~ s/\ .*//;
			$RANLIB = ReplaceLast_ ($ccLessArgs, 'clang', 'llvm-ranlib');
		}
		elsif (!("$^O" eq "cygwin")) {
			$RANLIB = "ranlib";
		}
	}
	if (!(defined $STRIP) and (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus))) {
		my $ccLessArgs = $COMPILER_DRIVER_C;
		$ccLessArgs  =~ s/\ .*//;
		my $ma = trim (`$ccLessArgs -print-multiarch`);
		if ($ma eq '') {
			$STRIP = "strip";
		}
		else {
			$STRIP = $ma . "-strip";
		}
	}
	if (trim (`lsb_release -rs 2>/dev/null`) == "20.10") {
		# so far only seen on ubuntu 20.10, clang++11, and g++10 - https://stroika.atlassian.net/browse/STK-717
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus) and (10.0 <= GetGCCVersion_ ($COMPILER_DRIVER_CPlusPlus) and GetGCCVersion_ ($COMPILER_DRIVER_CPlusPlus) < 11.0)) {
			$qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy = true;
		}
		elsif (IsClangOrClangPlusPlus_($COMPILER_DRIVER_CPlusPlus) and (11.0 <= GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) and GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < 12.0)) {
			$qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy = true;
		}
	}
	if (defined ($qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy) and $qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy) {
		push (@useExtraCDefines, '#define qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy 1');
	}
	if (!(defined $FEATUREFLAG_librt) and (!("$^O" eq "cygwin"))) {
		$FEATUREFLAG_librt = $LIBFEATUREFLAG_UseSystem;
	}
	if (!(defined $FEATUREFLAG_librt)) {
		$FEATUREFLAG_librt = $LIBFEATUREFLAG_No;
	}
	if (!(defined $STRIP) and  $PROJECTPLATFORMSUBDIR eq 'Unix') {
		$STRIP = "strip";
	}

	if (!(defined $AS) and ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/)) {
		$AS = GetMSVCVarName_ ("AS");
	}
	if (($COMPILER_DRIVER_C eq "") and ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/)) {
		$COMPILER_DRIVER_C = GetMSVCVarName_ ("CC");
	}
	if (($COMPILER_DRIVER_CPlusPlus eq "") and ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/)) {
		$COMPILER_DRIVER_CPlusPlus = GetMSVCVarName_ ("CC");	# not cxx for msvc
	}

	if (!(defined $STRIP)) {
		$STRIP = "";
	}
	if (!(defined $AR)) {
		$AR = "";
	}
	if (!(defined $LIBTOOL)) {
		if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			my $x = GetMSVCVarName_ ("AR");
			$LIBTOOL = trim ($x);
		}
		else {
			$LIBTOOL = "";
		}
	}
	if (!(defined $RANLIB)) {
		$RANLIB = "";
	}
	if (!(defined $Linker)) {
		if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			my $x = GetMSVCVarName_ ("LD");
			$Linker = trim ($x);
		}
		else {
			$Linker = $COMPILER_DRIVER_CPlusPlus;
		}
	}

	if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
		$MIDL = GetMSVCVarName_ ("MIDL");
		$RC = GetMSVCVarName_ ("RC");
	}

	#https://stroika.atlassian.net/browse/STK-696
	if ($PROJECTPLATFORMSUBDIR eq 'Unix' && trim(`awk -F= '/^NAME/{print $2}' /etc/os-release 2> /dev/null`) =~ /CentOS/) {
		$FEATUREFLAG_Xerces = $LIBFEATUREFLAG_No;
	}
	elsif (! defined $FEATUREFLAG_Xerces) {
		$FEATUREFLAG_Xerces = $LIBFEATUREFLAG_UseStaticTPP;
	}

	# This doesn't work with (at least how I've setup) centos8 under docker - not sure how to get the libs there...
	if ($PROJECTPLATFORMSUBDIR eq 'Unix' && trim(`awk -F= '/^NAME/{print $2}' /etc/os-release 2> /dev/null`) =~ /CentOS/) {
		$STATIC_LINK_GCCRUNTIME = 0;
	}
}

sub	SetDefaultForPlatform_
{
	if ($PROJECTPLATFORMSUBDIR eq 'Unix' && $COMPILER_DRIVER eq '') {
		$COMPILER_DRIVER = "gcc";
		#$COMPILER_DRIVER = "clang++";
		#$COMPILER_DRIVER = "gcc";
		#$COMPILER_DRIVER = "g++ -V5.0";
	}
}


sub	ParseEnvVarsToSetupInfluencedVariables_
{
	if (defined ($ENV{'ARCH'})) {
		push @EXTRA_ARGS, "--arch";
		push @EXTRA_ARGS, $ENV{'ARCH'};
	}
	if (defined ($ENV{'PLATFORM'})) {
		push @EXTRA_ARGS, "--platform";
		push @EXTRA_ARGS, $ENV{'PLATFORM'};
	}
	if (defined ($ENV{'CC'})) {
		push @EXTRA_ARGS, "--compiler-driver";
		push @EXTRA_ARGS, $ENV{'CC'};
		$COMPILER_DRIVER_C = $ENV{'CC'};
	}
	if (defined ($ENV{'CXX'})) {
		push @EXTRA_ARGS, "--compiler-driver";
		push @EXTRA_ARGS, $ENV{'CXX'};
		$COMPILER_DRIVER_CPlusPlus = $ENV{'CXX'};
	}
	if (defined ($ENV{'AR'})) {
		push @EXTRA_ARGS, "--ar";
		push @EXTRA_ARGS, $ENV{'AR'};
	}
	if (defined ($ENV{'AS'})) {
		push @EXTRA_ARGS, "--as";
		push @EXTRA_ARGS, $ENV{'AS'};
	}
	if (defined ($ENV{'$RANLIB'})) {
		push @EXTRA_ARGS, "--ranlib";
		push @EXTRA_ARGS, $ENV{'$RANLIB'};
	}
	if (defined ($ENV{'STRIP'})) {
		push @EXTRA_ARGS, "--strip";
		push @EXTRA_ARGS, $ENV{'STRIP'};
	}

	if (defined ($ENV{'EXTRA_CONFIGURE_ARGS'})) {
		for my $i (split / /, $ENV{'EXTRA_CONFIGURE_ARGS'}) {
			push @EXTRA_ARGS, "$i";
		}
	}

}


# merge 'extra' args (from environment variables) with those specified on the commandline
sub GetAppArgs_ ()
{
	my @args = @ARGV;
	splice(@args, 1, 0, @EXTRA_ARGS);
	return @args;
}


### Do initial pass, just looking for platform
sub	ParseCommandLine_Platform_
{
	my @args = GetAppArgs_ ();
	for (my $i = 0; $i <= $#args; $i++) {
		my $var = $args[$i];
		if ((lc ($var) eq "-platform") or (lc ($var) eq "--platform")) {
			$i++;
			$var = $args[$i];
			$PROJECTPLATFORMSUBDIR = $var;
			SetDefaultForPlatform_ ();
		}
	}
}

### Do initial pass, just looking for platform
sub	ParseCommandLine_CompilerDriver_
{
	my @args = GetAppArgs_ ();
	for (my $i = 0; $i <= $#args; $i++) {
		my $var = $args[$i];
		if (lc ($var) eq "-compiler-driver" or lc ($var) eq "--compiler-driver") {
			$i++;
			$var = $args[$i];
			$COMPILER_DRIVER = $var;
			$COMPILER_DRIVER_C = "";		#reset so computed later
			$COMPILER_DRIVER_CPlusPlus = "";
		}
		elsif ((lc ($var) eq "-apply-default-debug-flags") or (lc ($var) eq "--apply-default-debug-flags")) {
			$ApplyDebugFlags = true;
		}
		elsif ((lc ($var) eq "-apply-default-release-flags") or (lc ($var) eq "--apply-default-release-flags")) {
			$ApplyReleaseFlags = true;
		}
	}
}

sub	ParseCommandLine_Remaining_
{
	my @args = GetAppArgs_ ();
	for (my $i = 1; $i <= $#args; $i++) {
		my $var = $args[$i];
		if (lc ($var) eq "-make-define" or lc ($var) eq "--make-define") {
			$i++;
			$var = $args[$i];
			push (@useExtraMakeDefines, $var);
		}
		elsif (lc ($var) eq "-platform" or lc ($var) eq "--platform") {
			$i++;
			$var = $args[$i];
			$PROJECTPLATFORMSUBDIR = $var;
		}
		elsif (lc ($var) eq "-target-platforms" or lc ($var) eq "--target-platforms") {
			$i++;
			$var = $args[$i];
			$TARGET_PLATFORMS = $var;
		}
		elsif (lc ($var) eq "-build-tools-root" or lc ($var) eq "--build-tools-root") {
			$i++;
			$var = $args[$i];
			$BUILD_TOOLS_ROOT = $var;
		}
		elsif (lc ($var) eq "-arch" or lc ($var) eq "--arch") {
			$i++;
			$var = $args[$i];
			$ARCH = $var;
		}
		elsif ((lc ($var) eq "-assertions") or (lc ($var) eq "--assertions")) {
			$i++;
			$var = $args[$i];
			if ($var eq "enable") {
				$ENABLE_ASSERTIONS = 1;
			}
			elsif ($var eq "disable") {
				$ENABLE_ASSERTIONS = 0;
			}
			elsif ($var eq "default") {
				$ENABLE_ASSERTIONS = DEFAULT_BOOL_OPTIONS;
			}
			else  {
				print ("UNRECOGNIZED assertions ARG: $var\n");
				DoHelp_ (1);
			}
		}
		elsif ((lc ($var) eq "-shared-symbol-visibility") or (lc ($var) eq "--shared-symbol-visibility")) {
			$i++;
			$var = $args[$i];
			$SharedSymbolVisibility = $args[$i];
		}
		elsif ((lc ($var) eq "-block-allocation") or (lc ($var) eq "--block-allocation")) {
			$i++;
			$var = $args[$i];
			if ($var eq "enable") {
				push (@useExtraCDefines, '#define qAllowBlockAllocation 1');
			}
			elsif ($var eq "disable") {
				push (@useExtraCDefines, '#define qAllowBlockAllocation 0');
			}
			elsif ($var eq "default") {
			}
			else  {
				print ("UNRECOGNIZED block-allocation ARG: $var\n");
				DoHelp_ (1);
			}
		}
		elsif ((lc ($var) eq "-valgrind") or (lc ($var) eq "--valgrind")) {
			$i++;
			$var = $args[$i];
			if ($var eq "enable") {
				push (@useExtraCDefines, '#define qStroika_FeatureSupported_Valgrind 1');
			}
			elsif ($var eq "disable") {
				push (@useExtraCDefines, '#define qStroika_FeatureSupported_Valgrind 0');
			}
			elsif ($var eq "default") {
			}
			else  {
				print ("UNRECOGNIZED block-allocation ARG: $var\n");
				DoHelp_ (1);
			}
		}
		elsif ((lc ($var) eq "-glibcxx_debug") or (lc ($var) eq "--glibcxx_debug")) {
			$i++;
			$var = $args[$i];
			if ($var eq "enable") {
				$ENABLE_GLIBCXX_DEBUG = 1;
			}
			elsif ($var eq "disable") {
				$ENABLE_GLIBCXX_DEBUG = 0;
			}
			elsif ($var eq "default") {
				$ENABLE_GLIBCXX_DEBUG = DEFAULT_BOOL_OPTIONS;
			}
			else  {
				print ("UNRECOGNIZED$ENABLE_GLIBCXX_DEBUG ARG: $var\n");
				DoHelp_ (1);
			}
		}
		elsif ((lc ($var) eq "-stdlib") or (lc ($var) eq "--stdlib")) {
			$i++;
			$var = $args[$i];
			$STDCXXLIB = $var;
		}
		elsif ((lc ($var) eq "-cppstd-version") or (lc ($var) eq "--cppstd-version")) {
			$i++;
			$var = $args[$i];
			if ($var eq "c++14" ) {
				print "Warning: c++14 not supported by Stroika v2.1 or later\n";
			}
			if ($var ne "c++17" && $var ne "c++2a") {
				print "Warning: unrecognized arg to --cppstd-version\n";
			}
			$CPPSTD_VERSION_FLAG = "--std=" . $var;
		}
		elsif ((lc ($var) eq "-activeperl") or (lc ($var) eq "--activeperl")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_ActivePerl = $var;
		}
		elsif ((lc ($var) eq "-WIX") or (lc ($var) eq "--WIX")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_WIX = $var;
		}
		elsif ((lc ($var) eq "-config-tag") or (lc ($var) eq "--config-tag")) {
			$i++;
			$var = $args[$i];
			if ($var=~/[\s+.]+/)  {
				die "No spaces allowed in config-tag" 
			}
			if (! defined $Config_Tag) {
				$Config_Tag = "";
			}
			else {
				$Config_Tag .= " ";
			}
			$Config_Tag .= $var;
		}
		elsif ((lc ($var) eq "-libcurl") or (lc ($var) eq "--libcurl")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_LIBCURL = $var;
		}
		elsif ((lc ($var) eq "-boost") or (lc ($var) eq "--boost")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_boost = $var;
		}
		elsif ((lc ($var) eq "-openssl") or (lc ($var) eq "--openssl")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_OpenSSL = $var;
		}
		elsif ((lc ($var) eq "-openssl-extraargs") or (lc ($var) eq "--openssl-extraargs")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_OpenSSLExtraArgs = $var;
		}
		elsif ((lc ($var) eq "-winhttp") or (lc ($var) eq "--winhttp")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_WinHTTP = $var;
		}
		elsif ((lc ($var) eq "-atlmfc") or (lc ($var) eq "--atlmfc")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_ATLMFC = $var;
		}
		elsif ((lc ($var) eq "-xerces") or (lc ($var) eq "--xerces")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_Xerces = $var;
		}
		elsif ((lc ($var) eq "-zlib") or (lc ($var) eq "--zlib")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_ZLib = $var;
		}
		elsif ((lc ($var) eq "-sqlite") or (lc ($var) eq "--sqlite")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_sqlite = $var;
		}
		elsif ((lc ($var) eq "-lzma") or (lc ($var) eq "--lzma")) {
			$i++;
			$var = $args[$i];
			$FEATUREFLAG_LZMA = $var;
		}
		elsif ((lc ($var) eq "-no-third-party-components") or (lc ($var) eq "--no-third-party-components")) {
			$FEATUREFLAG_ATLMFC = "no";
			$FEATUREFLAG_boost = "no";
			$FEATUREFLAG_LIBCURL = "no";
			$FEATUREFLAG_LZMA = "no";
			$FEATUREFLAG_OpenSSL = "no";
			$FEATUREFLAG_sqlite = "no";
			$FEATUREFLAG_WinHTTP = "no";
			$FEATUREFLAG_ZLib = "no";
		}
		elsif ((lc ($var) eq "-trace2file") or (lc ($var) eq "--trace2file")) {
			$i++;
			$var = $args[$i];
			if ($var eq "enable") {
				$ENABLE_TRACE2FILE = 1;
			}
			elsif ($var eq "disable") {
				$ENABLE_TRACE2FILE = 0;
			}
			elsif ($var eq "default") {
				$ENABLE_TRACE2FILE = DEFAULT_BOOL_OPTIONS;
			}
			else  {
				print ("UNRECOGNIZED ENABLE_TRACE2FILEG ARG: $var\n");
				DoHelp_ (1);
			}
		}
		elsif ((lc ($var) eq "-static-link-gccruntime") or (lc ($var) eq "--static-link-gccruntime")) {
			$i++;
			$var = $args[$i];
			if ($var eq "enable") {
				$STATIC_LINK_GCCRUNTIME = 1;
			}
			elsif ($var eq "disable") {
				$STATIC_LINK_GCCRUNTIME = 0;
			}
			else {
				print ("UNRECOGNIZED static-link-gccruntime ARG: $var\n");
				DoHelp_ (1);
			}
		}
		elsif ((lc ($var) eq "-ar") or (lc ($var) eq "--ar")) {
			$i++;
			$var = $args[$i];
			$AR = $var;
		}
		elsif ((lc ($var) eq "-as") or (lc ($var) eq "--as")) {
			$i++;
			$var = $args[$i];
			$AS = $var;
		}
		elsif ((lc ($var) eq "-ranlib") or (lc ($var) eq "--ranlib")) {
			$i++;
			$var = $args[$i];
			$RANLIB = $var;
		}
		elsif ((lc ($var) eq "-strip") or (lc ($var) eq "--strip")) {
			$i++;
			$var = $args[$i];
			$STRIP = $var;
		}
		elsif ((lc ($var) eq "-extra-prefix-linker-args") or (lc ($var) eq "--extra-prefix-linker-args")) {
			$i++;
			$var = $args[$i];
			$EXTRA_PREFIX_LINKER_ARGS = $var;
		}
		elsif ((lc ($var) eq "-append-extra-prefix-linker-args") or (lc ($var) eq "--append-extra-prefix-linker-args")) {
			$i++;
			$var = $args[$i];
			if (not ($EXTRA_PREFIX_LINKER_ARGS eq "")) {
				$EXTRA_PREFIX_LINKER_ARGS .= " ";
			}
			$EXTRA_PREFIX_LINKER_ARGS .= $var;
		}
		elsif ((lc ($var) eq "-extra-suffix-linker-args") or (lc ($var) eq "--extra-suffix-linker-args")) {
			$i++;
			$var = $args[$i];
			$EXTRA_SUFFIX_LINKER_ARGS = $var;
		}
		elsif ((lc ($var) eq "-append-extra-suffix-linker-args") or (lc ($var) eq "--append-extra-suffix-linker-args")) {
			$i++;
			$var = $args[$i];
			if (not ($EXTRA_SUFFIX_LINKER_ARGS eq "")) {
				$EXTRA_SUFFIX_LINKER_ARGS .= " ";
			}
			$EXTRA_SUFFIX_LINKER_ARGS .= $var;
		}
		elsif ((lc ($var) eq "-append-CPPFLAGS") or (lc ($var) eq "--append-CPPFLAGS")) {
			$i++;
			$var = $args[$i];
			push @CPPFLAGS, $var;
		}
		elsif ((lc ($var) eq "-remove-CPPFLAGS") or (lc ($var) eq "--remove-CPPFLAGS")) {
			$i++;
			$var = $args[$i];
			push @CPPFLAGS2Remove, $var;
		}
		elsif ((lc ($var) eq "-replace-all -CPPFLAGS") or (lc ($var) eq "--replace-all-CPPFLAGS")) {
			$i++;
			$var = $args[$i];
			for my $i (split / /, $var) {
				push @CPPFLAGS, "$i";
			}
			$CPPFLAGS_Overridden = true;
		}
		elsif ((lc ($var) eq "-append-CFLAGS") or (lc ($var) eq "--append-cflags")) {
			$i++;
			$var = $args[$i];
			push @CFLAGS, $var;
		}
		elsif ((lc ($var) eq "-remove-CFLAGS") or (lc ($var) eq "--remove-cflags")) {
			$i++;
			$var = $args[$i];
			push @CFLAGS2Remove, $var;
		}
		elsif ((lc ($var) eq "-replace-all -CFLAGS") or (lc ($var) eq "--replace-all-cflags")) {
			$i++;
			$var = $args[$i];
			for my $i (split / /, $var) {
				push @CFLAGS, "$i";
			}
			$CFLAGS_Overridden = true;
		}
		elsif ((lc ($var) eq "-append-CXXFLAGS") or (lc ($var) eq "--append-cxxflags")) {
			$i++;
			$var = $args[$i];
			push @CXXFLAGS, $var;
		}
		elsif ((lc ($var) eq "-remove-CXXFLAGS") or (lc ($var) eq "--remove-cxxflags")) {
			$i++;
			$var = $args[$i];
			push @CXXFLAGS2Remove, $var;
		}
		elsif ((lc ($var) eq "-replace-all -CXXFLAGS") or (lc ($var) eq "--replace-all-cxxflags")) {
			$i++;
			$var = $args[$i];
			for my $i (split / /, $var) {
				push @CXXFLAGS, "$i";
			}
			$CXXFLAGS_Overridden = true;
		}
		elsif ((lc ($var) eq "-append-CPPFLAGS") or (lc ($var) eq "--append-cppflags")) {
			$i++;
			$var = $args[$i];
			push @CFLAGS, $var;
			push @CXXFLAGS, $var;
		}
		elsif ((lc ($var) eq "-includes-path") or (lc ($var) eq "--includes-path")) {
			$i++;
			$var = $args[$i];
			$INCLUDES_PATH = $var;
		}
		elsif ((lc ($var) eq "-append-includes-path") or (lc ($var) eq "--append-includes-path")) {
			$i++;
			$var = $args[$i];
			push @INCLUDES_PATH_ADD, $var;
		}
		elsif ((lc ($var) eq "-libs-path") or (lc ($var) eq "--libs-path")) {
			$i++;
			$var = $args[$i];
			$LIBS_PATH = $var;
		}
		elsif ((lc ($var) eq "-append-libs-path") or (lc ($var) eq "--append-libs-path")) {
			$i++;
			$var = $args[$i];
			push @LIBS_PATH_ADD, $var;
		}
		elsif ((lc ($var) eq "-lib-dependencies") or (lc ($var) eq "--lib-dependencies")) {
			$i++;
			$var = $args[$i];
			$LIB_DEPENDENCIES = $var;
		}
		elsif ((lc ($var) eq "-append-lib-dependencies") or (lc ($var) eq "--append-lib-dependencies")) {
			$i++;
			$var = $args[$i];
			push @LIB_DEPENDENCIES_ADD, $var;
		}
		elsif ((lc ($var) eq "-run-prefix") or (lc ($var) eq "--run-prefix")) {
			$i++;
			$var = $args[$i];
			$RUN_PREFIX = $var;
		}
		elsif ((lc ($var) eq "-append-run-prefix") or (lc ($var) eq "--append-run-prefix")) {
			$i++;
			$var = $args[$i];
			if (not ($RUN_PREFIX eq "")) {
				$RUN_PREFIX .= " ";
			}
			$RUN_PREFIX .= $var;
		}
		elsif ((lc ($var) eq "-append-extra-compiler-and-linker-args") or (lc ($var) eq "--append-extra-compiler-and-linker-args")) {
			$i++;
			$var = $args[$i];

			push @CFLAGS, $var;
			push @CXXFLAGS, $var;

			if (not ($EXTRA_PREFIX_LINKER_ARGS eq "")) {
				$EXTRA_PREFIX_LINKER_ARGS .= " ";
			}
			$EXTRA_PREFIX_LINKER_ARGS .= $var;
			if (not ($EXTRA_SUFFIX_LINKER_ARGS eq "")) {
				$EXTRA_SUFFIX_LINKER_ARGS .= " ";
			}
			$EXTRA_SUFFIX_LINKER_ARGS .= $var;
		}
		elsif ((lc ($var) eq "-lto") or (lc ($var) eq "--lto")) {
			$i++;
			$var = $args[$i];
			if ($var eq "enable") {
				$ENABLE_LTO = true;
			}
			elsif ($var eq "disable") {
				$ENABLE_LTO = false;
			}
			elsif ($var eq "default") {
				$ENABLE_LTO = DEFAULT_BOOL_OPTIONS;
			}
			else  {
				print ("UNRECOGNIZED assertions ARG: $var\n");
				DoHelp_ (1);
			}
		}
		elsif ((lc ($var) eq "-cross-compiling") or (lc ($var) eq "--cross-compiling")) {
			$i++;
			$var = $args[$i];
			if (not ($var eq "true" || $var eq "false")) {
				die ("Invalid argument to --cross-compiling");
			}
			$CrossCompiling = $var;
		}
		elsif ((lc ($var) eq "-debug-symbols") or (lc ($var) eq "--debug-symbols")) {
			$i++;
			$var = $args[$i];
			if (not ($var eq "true" || $var eq "false")) {
				die ("Invalid argument to --debug-symbols");
			}
			$INCLUDE_SYMBOLS_LIB = ToBool_ ($var);
			$INCLUDE_SYMBOLS_EXE = ToBool_ ($var);
		}
		elsif ((lc ($var) eq "-debug-symbols-lib") or (lc ($var) eq "--debug-symbols-lib")) {
			$i++;
			$var = $args[$i];
			if (not ($var eq "true" || $var eq "false")) {
				die ("Invalid argument to --debug-symbols-lib");
			}
			$INCLUDE_SYMBOLS_LIB = ToBool_ ($var);
		}
		elsif ((lc ($var) eq "-debug-symbols-exe") or (lc ($var) eq "--debug-symbols-exe")) {
			$i++;
			$var = $args[$i];
			if (not ($var eq "true" || $var eq "false")) {
				die ("Invalid argument to --debug-symbols");
			}
			$INCLUDE_SYMBOLS_EXE = ToBool_ ($var);
		}
		elsif ((lc ($var) eq "-malloc-guard") or (lc ($var) eq "--malloc-guard")) {
			$i++;
			$MALLOC_GUARD = ToBool_ ($args[$i]);
			### DISABLE LTO BY DEFAULT IF MALLOC_GAURD TURNED ON BECAUSE FOR NOW THEY DON'T WORK TOGETHER
			### -- LGP 2016-07-14
			if ($MALLOC_GUARD == true) {
				$ENABLE_LTO = false;
			}
		}
		elsif ((lc ($var) eq "-runtime-stack-check") or (lc ($var) eq "--runtime-stack-check")) {
			$i++;
			$var = $args[$i];
			if (not ($var eq "true" || $var eq "false")) {
				die ("Invalid argument to --runtime-stack-check");
			}
			$runtimeStackProtectorFlag = $var;
		}
		elsif ((lc ($var) eq "-sanitize") or (lc ($var) eq "--sanitize")) {
			$i++;
			$var = $args[$i];
			my @splitSanFlags = split(/,/, $var);
			foreach my $ii (0 .. $#splitSanFlags) {
				my $flag = $splitSanFlags[$ii];
				if ($flag eq "none") {
					@sanitizerFlags = ();
					$sanitizerFlagsNoneSet = true;
				}
				else {
					my %already = map { $_ => 1 } @sanitizerFlags;
					if(!exists($already{$flag})) {
						push @sanitizerFlags, $flag;
					}
				}
				$sanitizerFlagsIsDefined = true;
			}
		}
		elsif ((lc ($var) eq "-no-sanitize") or (lc ($var) eq "--no-sanitize")) {
			$i++;
			$var = $args[$i];
			if ($var eq "none") {
				$noSanitizerFlags = "";
			}
			else {
				if (not ($noSanitizerFlags eq "")) {
					$noSanitizerFlags  .= ",";
				}
				$noSanitizerFlags .= $var;
			}
		}
		elsif ((lc ($var) eq "-only-if-has-compiler") or (lc ($var) eq "--only-if-has-compiler")) {
			$onlyGenerateIfCompilerExists = true;
		}
		elsif ((lc ($var) eq "-pg") or (lc ($var) eq "--pg")) {
			push @CFLAGS, "-pg";
			push @CXXFLAGS, "-pg";
			$EXTRA_PREFIX_LINKER_ARGS .= " -pg";
		}
		elsif ((lc ($var) eq "-apply-default-debug-flags") or (lc ($var) eq "--apply-default-debug-flags")) {
			#HANDLED EARLIER
		}
		elsif ((lc ($var) eq "-apply-default-release-flags") or (lc ($var) eq "--apply-default-release-flags")) {
			#HANDLED EARLIER
		}
		elsif ((lc ($var) eq "-help") or (lc ($var) eq "--help") or (lc ($var) eq "-?")) {
			DoHelp_ (0);
		}
		else {
			if ((lc ($var) eq "-platform") or (lc ($var) eq "--platform")) {
				$i++;
			}
			elsif (lc ($var) eq "-compiler-driver" or lc ($var) eq "--compiler-driver") {
				$i++;
			}
			else {
				print ("UNRECOGNIZED ARG: $var\n");
				DoHelp_ (1);
			}
		}
	}
}

sub ZERO_OR_1_
{
	my $x = shift(@_);
	if ($x eq "") {
		return 0;
	}
	if ($x == 1) {
		return 1;
	}
	return 0;
}

sub     CHECK_FEATURE_OPTION
{
	my $x = shift(@_);
	if (!($x eq $LIBFEATUREFLAG_BuildOnly) && !($x eq $LIBFEATUREFLAG_UseStaticTPP) && !($x eq $LIBFEATUREFLAG_UseSystem) && !($x eq $LIBFEATUREFLAG_No)) {
			die ("Cannot identify feature argument");
	}
}

sub	CHECK_OPTIONS_
{
	if ($PROJECTPLATFORMSUBDIR eq "") {
		die ("Cannot identify ProjectPlatformSubdir");
	}
	if ($PROJECTPLATFORMSUBDIR eq "VisualStudio.Net-2012") {
		die ("WE NO LONGER SUPPORT VISUAL STUDIO.Net 2012");
	}
	if ($PROJECTPLATFORMSUBDIR eq "VisualStudio.Net-2015") {
		die ("WE NO LONGER SUPPORT VISUAL STUDIO.Net 2015");
	}
	my @validProjectPlatfromSubDirs = ("Unix", "VisualStudio.Net-2017", "VisualStudio.Net-2019");
	my %params = map { $_ => 1 } @validProjectPlatfromSubDirs;
	if (not exists ($params{$PROJECTPLATFORMSUBDIR})) {
		die ("Unrecognized --platfrom argument: valid ones include: " . join(",", @validProjectPlatfromSubDirs));
	}
	if ($TARGET_PLATFORMS eq "") {
		die ("Cannot identify TARGET_PLATFORMS");
	}
	CHECK_FEATURE_OPTION($FEATUREFLAG_LIBCURL);
}

sub	ParseCommandLine_
{
	if (false) {
		# Helpful to debug scripts...
		print "Entering configure (";
		for (my $i = 0; $i <= $#ARGV; $i++) {
			my $var = $ARGV[$i];
			print ("\"$var\"");
			print (" ");
		}
		print ")\n";
	}

	SetInitialDefaults_ ();
	
	if ($#ARGV >= 0) {
		$configurationName  = $ARGV[0];
	}
	else {
		print ("Expected configuration name as first argument\n");
		DoHelp_ (1);
	}
	if ((lc ($configurationName) eq "-h") || (lc ($configurationName) eq "--h") || (lc ($configurationName) eq "-help")  || (lc ($configurationName) eq "--help")) { 
		DoHelp_ (0);
	}
	elsif ($configurationName =~ /^\-/) { 
		print ("Expected configuration name (got $configurationName) as first argument\n");
		DoHelp_ (1);
	}

	ParseEnvVarsToSetupInfluencedVariables_();
	ParseCommandLine_Platform_ ();
	SetDefaultForPlatform_ ();

	ParseCommandLine_CompilerDriver_ ();

	ParseCommandLine_Remaining_ ();

	SetDefaultForCompilerDriver_();

	CHECK_OPTIONS_ ();
}



ParseCommandLine_ ();


my @GetDefaultCZZFLAGS_flags_flags;
my @GetDefaultCZZFLAGS_flags_flagValues2Remove;
sub GetDefaultCZZFLAGS_flags_
{
	my @flags  = ();
	my @flagValues2Remove  = @GetDefaultCZZFLAGS_flags_flagValues2Remove;
	my $doCFLAGS = shift(@_);
	#print "entering GetDefaultCZZFLAGS_flags_: with flags=", join("\n", @flags), ", flagValues2Remove=", join("\n", @flagValues2Remove), " and doCFLags=$doCFLAGS\n";

	my $isVisualStudio = 		($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/);
	if ($isVisualStudio eq 1) {
		$isVisualStudio = true;
	}
	else {
		$isVisualStudio = false;
	}

	if ($doCFLAGS eq 2) {
		# C++ only flags
		if (not ($CPPSTD_VERSION_FLAG eq "")) {
			push @flags, $CPPSTD_VERSION_FLAG;
		}
	}

	if (defined $INCLUDES_PATH) {
		for my $i (split /:/, $INCLUDES_PATH) {
			if ($isVisualStudio) {
				my $wpath = trim (`cygpath --mixed \"$i\"`);
				push @flags, "/I\"$wpath\"";
			}
			else {
				push @flags, "-I$i";
			}
		}
	}
	if (not ($CWARNING_FLAGS eq "")) {
		### @todo - need separate flags for C and CXX
		for my $i (split / /, $CWARNING_FLAGS) {
			push @flags, "$i";
		}
	}

	if (not ($doCFLAGS eq 0)) {
		if (not ($COPTIMIZE_FLAGS eq "")) {
			push @flags, $COPTIMIZE_FLAGS;
		}

		if (defined $SharedSymbolVisibility) {
			push @flags, "-fvisibility=$SharedSymbolVisibility";
		}
		
		if ($INCLUDE_SYMBOLS_LIB) {
			if ($isVisualStudio) {
				####? push @flags, "/Z7";
			}
			else {
				push @flags, "-g";
			}
		}
		if ( $isVisualStudio ) {
			if ($Windows_Exceptions_SupportStructuredExceptions == true) {
				push @flags, "/EHa";
			}
			else {
				push @flags, "/EHsc";
			}
			push @flags, "/nologo";
			push @flags, "/GR";			#  Enable Run-Time Type Information
			push @flags, "/Gd";			#  Calling Convention - the default setting, specifies the __cdecl calling convention for all functions
			push @flags, "/W4";			#  Warning Level (most less than WALL)
			#push @flags, "/WX-";		#  (Dont) treat warnings as errors
			#push @flags, "/JMC";		#  Just my code debugging (DONT TURN ON - let users add this but dont default on)
			push @flags, "/Zc:inline";	#  Remove unreferenced code and data
			push @flags, "/FC";			#  Use full paths in diagnostic messages
			push @flags, "/bigobj";		# Avoid these failures - fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj

	#		push @flags, "/errorReport:prompt";	users can add this if desired

			###push @flags, "/experimental:module";
			
			if ($ApplyDebugFlags == true) {
				push @flags, "/RTCsu";		# 	Run-Time Error Checks - https://docs.microsoft.com/en-us/cpp/build/reference/rtc-run-time-error-checks?view=vs-2019
				push @flags, "/GS";			#	Enable Security Check
				push @flags, "/Oy-";		#	(Dont) omit frame pointers
				push @flags, "/Od";			#	Disable Optimization
				push @flags, "/MTd";		#	Multithreaded (Debug; but not dll)
			}
			if ($ApplyReleaseFlags == true) {
				push @flags, "/GS-";		#	Disable Security Check
				push @flags, "/Gy";			#	Enable Function Level Linking
				push @flags, "/Oy";			#	Omit frame pointers
				push @flags, "/O2";			#	Maximum Optimization (Favor Speed)
				push @flags, "/GL";			#	Whole Program Optimization
				push @flags, "/Oi";			#	Enable Intrinsic Functions
				push @flags, "/GF";			#	Enable String Pooling
				push @flags, "/MT";			#	Multithreaded (not debug not dll)
			}
			##push @flags, "/fp:precise";	#vs2k sample projects define this, but maybe can use default?
		
			if ($INCLUDE_SYMBOLS_LIB) {
				if ($WinFlag_DebugProgramDatabase) {
					push @flags, "/Zi";		#	Program Database (Debug Information)
					push @flags, "/FS";		# 	Force Synchronous PDB Writes (needed for parallel make/build)
				}
				else {
					push @flags, "/Z7";		#	Use intra-obj file debug info format 
				}
			}
		}
	}
	if (not $isVisualStudio and $ENABLE_GLIBCXX_DEBUG eq 1) {
		push @flags, "-D_GLIBCXX_DEBUG";
	}
	if ( $isVisualStudio ) {
		push @flags, "/D_UNICODE";
		push @flags, "/DUNICODE";
		push @flags, "/D_WINDOWS";	# just because visual studio .net sample projects defined this
		
		if ($ApplyDebugFlags == true) {
			push @flags, "/D_DEBUG";
		}
		if ($ApplyReleaseFlags == true) {
			push @flags, "/DNDEBUG";
		}
	}
	{
		# Unitl Stroika v2.1d18 these were written to Stroika-Config.h, but now all just provided to C++ compiler via -D
		# Doing this way means the defines appear in compiles of third-party-components, but they should not interfere, and if they ever
		# did we could add a new separate flag to extract/remove/keep them out (e.g STROIKA_CPP_DEFINE_ARGS, and just -filter-out all those from the CXXFLAGS)
		#
		# Doing ALL the flags through the command line is somewhat clear than having MOST done through the Stroika-Configs.h file but a few done through the commandline.
		#
		# It has ONE possible disadvantage, which is confusing some tools that preparse the the (like visual studio code) but we must just find some way
		# to get them to also know about these defines (TBD)
		#		--LGP 2019-02-10
		my $dashFlag=$isVisualStudio? "/D" : "-D";
		push @flags, $dashFlag . "qDebug=" . ZERO_OR_1_ ($ENABLE_ASSERTIONS);
		push @flags, $dashFlag . "qHasFeature_LibCurl=" . ZERO_OR_1_ (($FEATUREFLAG_LIBCURL eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_LIBCURL eq $LIBFEATUREFLAG_UseSystem));
		push @flags, $dashFlag . "qHasFeature_OpenSSL=" . ZERO_OR_1_ (($FEATUREFLAG_OpenSSL eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_OpenSSL eq $LIBFEATUREFLAG_UseSystem));
		push @flags, $dashFlag . "qHasFeature_WinHTTP=" . ZERO_OR_1_ ($FEATUREFLAG_WinHTTP eq $LIBFEATUREFLAG_UseSystem);
		push @flags, $dashFlag . "qHasFeature_ATLMFC=" . ZERO_OR_1_ ($FEATUREFLAG_ATLMFC eq $LIBFEATUREFLAG_UseSystem);
		push @flags, $dashFlag . "qHasFeature_Xerces=" . ZERO_OR_1_ (($FEATUREFLAG_Xerces eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_Xerces eq $LIBFEATUREFLAG_UseSystem));
		push @flags, $dashFlag . "qHasFeature_ZLib=" . ZERO_OR_1_ (($FEATUREFLAG_ZLib eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_ZLib eq $LIBFEATUREFLAG_UseSystem));
		push @flags, $dashFlag . "qHasFeature_sqlite=" . ZERO_OR_1_ (($FEATUREFLAG_sqlite eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_sqlite eq $LIBFEATUREFLAG_UseSystem));
		push @flags, $dashFlag . "qHasFeature_LZMA=" . ZERO_OR_1_ (($FEATUREFLAG_LZMA eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_LZMA eq $LIBFEATUREFLAG_UseSystem));
		push @flags, $dashFlag . "qHasFeature_boost=" . ZERO_OR_1_ (($FEATUREFLAG_boost eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_boost eq $LIBFEATUREFLAG_UseSystem));
		if ($ENABLE_TRACE2FILE != DEFAULT_BOOL_OPTIONS) {
			push @flags, $dashFlag . "qTraceToFile=" . ZERO_OR_1_ ($ENABLE_TRACE2FILE);
			#override the default (true iff qDebug) - if set the trace2file option set 
			if ($ENABLE_TRACE2FILE == 1) {
				push @flags, $dashFlag . "qDefaultTracingOn=1";
			}
		}

		foreach my $var (@useExtraCDefines)
		{
			my ($define, $name, $value) = split(/ /, $var);
			if (!($define eq '#define')) {
				die ("NYI: mapping extraCDEFINE: $var");
			}
			if ($value eq "") {
				$value = 0;
			}
			push @flags, $dashFlag . "$name=" . $value;
		}

	}

	for my $r (@GetDefaultCZZFLAGS_flags_flags) {
		my $i = indexOf (@flags, $r);
		if ($i != -1) {
			splice (@flags, $i, 1);
		}
		else {
			push @flags, $r;
		}
	}
	for my $r (@flagValues2Remove) {
		my $i = indexOf (@flags, $r);
		if ($i != -1) {
			splice (@flags, $i, 1);
		}
	}
	#print " GetDefaultCZZFLAGS_flags_: returning flags=", join("\n", @flags),"\n";
	return @flags;
}

sub PostProcessOptions_ ()
{
	my $isVisualStudio = 		($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/);
	if ($isVisualStudio eq 1) {
		$isVisualStudio = true;
	}
	else {
		$isVisualStudio = false;
	}

	if ($isVisualStudio) {
		if (! defined $BUILD_TOOLS_ROOT) {
			$BUILD_TOOLS_ROOT = GetDefaultToolsBuildDir($PROJECTPLATFORMSUBDIR);
		}
	}

	if (IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
		$HasMakefileBugWorkaround_lto_skipping_undefined_incompatible = true;
	}
	if ($ENABLE_LTO == true) {
		if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus) || IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
			push @CFLAGS, "-flto";
			push @CXXFLAGS, "-flto";
			$EXTRA_PREFIX_LINKER_ARGS .= " -flto";
		}
		if (IsMSVCCompiler_($COMPILER_DRIVER_CPlusPlus)) {
			push @CFLAGS, "/GL";			#	Whole Program Optimization
			push @CXXFLAGS, "/GL";			#	Whole Program Optimization
			$EXTRA_PREFIX_LINKER_ARGS .= " /LTCG";
		}
	}
	if ($sanitizerFlagsIsDefined and ($#sanitizerFlags != -1)) {
		{
			my $crap2Add2CZZFlags = "";
			$crap2Add2CZZFlags .= " -fsanitize=";
			foreach my $i (0 .. $#sanitizerFlags) {
				$crap2Add2CZZFlags .= $sanitizerFlags[$i];
				if ($i < $#sanitizerFlags) {
					$crap2Add2CZZFlags .= ",";
				}
			}
			$EXTRA_PREFIX_LINKER_ARGS .= $crap2Add2CZZFlags;
			push @CFLAGS, $crap2Add2CZZFlags;
			push @CXXFLAGS, $crap2Add2CZZFlags;
		}

		if ($STATIC_LINK_SANITIZERS == DEFAULT_BOOL_OPTIONS) {
			if ($PROJECTPLATFORMSUBDIR eq 'Unix' && trim(`awk -F= '/^NAME/{print \$2}' /etc/os-release 2> /dev/null`) =~ /CentOS/) {
				$STATIC_LINK_SANITIZERS = 0;	# missing on (my install of) centos8 - until I figure out how to detect/fix
			}
		}

		if ($sanitizerFlagsIsDefined and ($#sanitizerFlags != -1) and ($STATIC_LINK_SANITIZERS != 0)) {
			if (IsGCCOrGPlusPlus_ ($COMPILER_DRIVER)) {
				foreach my $i (0 .. $#sanitizerFlags) {
					if ($sanitizerFlags[$i] eq "address") {
						$EXTRA_PREFIX_LINKER_ARGS .= " -static-libasan";
					}
					elsif ($sanitizerFlags[$i] eq "undefined") {
						$EXTRA_PREFIX_LINKER_ARGS .= " -static-libubsan";
					}
					elsif ($sanitizerFlags[$i] eq "thread") {
						$EXTRA_PREFIX_LINKER_ARGS .= " -static-libtsan";
					}
					elsif ($sanitizerFlags[$i] eq "leak") {
						$EXTRA_PREFIX_LINKER_ARGS .= " -static-liblsan";
					}
				}
			}
			elsif (IsClangOrClangPlusPlus_ ($COMPILER_DRIVER)) {
				if ($#sanitizerFlags != 0) {
					$EXTRA_PREFIX_LINKER_ARGS .= " -static-libsan";
				}
			}
		}
	}
	if (not ($noSanitizerFlags eq "")) {
		$EXTRA_PREFIX_LINKER_ARGS .= " -fno-sanitize=" . $noSanitizerFlags;
		push @CFLAGS, " -fno-sanitize=" . $noSanitizerFlags;
		push @CXXFLAGS, " -fno-sanitize=" . $noSanitizerFlags;
	}
	if ($FEATUREFLAG_OpenSSL eq "") {
		$FEATUREFLAG_OpenSSL = $LIBFEATUREFLAG_UseStaticTPP;
	}

	if ($isVisualStudio) {
		# Default to true for visual studio, because debug symbols go in separate file, and don't balloon the exe size (.pdb)
		if ($INCLUDE_SYMBOLS_EXE == DEFAULT_BOOL_OPTIONS) {
			$INCLUDE_SYMBOLS_EXE = true;
		}
	}

	if ($INCLUDE_SYMBOLS_EXE == DEFAULT_BOOL_OPTIONS) {
		$INCLUDE_SYMBOLS_EXE = false;
	}

	if ($MALLOC_GUARD eq true) {
		push (@useExtraCDefines, '#define qStroika_Foundation_Debug_MallocGuard 1');
	}

	
	
	if (! defined $FEATUREFLAG_ActivePerl) {
		if ($FEATUREFLAG_OpenSSL eq "use" && ("$^O" eq "cygwin")) {
			$FEATUREFLAG_ActivePerl = "use";
		}
		else {
			$FEATUREFLAG_ActivePerl = $LIBFEATUREFLAG_No;
		}
	}
	if (! defined $FEATUREFLAG_WIX) {
		if ("$^O" eq "cygwin") {
			$FEATUREFLAG_WIX = "use";
		}
		else {
			$FEATUREFLAG_WIX = $LIBFEATUREFLAG_No;
		}
	}

	if ($ARCH eq "") {
		if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			die ("assert error - sb handled earlier");
		}
		else {
			$ARCH = trim (`./ScriptsLib/GetCompilerArch $COMPILER_DRIVER_CPlusPlus`);
		}
	}

	if (defined $STDCXXLIB) {
		if (IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
			$EXTRA_PREFIX_LINKER_ARGS .= " -stdlib=" . $STDCXXLIB;
			push @CXXFLAGS, " -stdlib=" . $STDCXXLIB;
		}
	}

	if ($PROJECTPLATFORMSUBDIR eq 'Unix') {
		if ($STATIC_LINK_GCCRUNTIME == 1) {
			# tried $IF_STATIC_LINK_GCCRUNTIME_USE_PRINTPATH_METHOD=0 in Ubuntu 1804, and g++-7, and failed (still left .so file in ldd)
			my $IF_STATIC_LINK_GCCRUNTIME_USE_PRINTPATH_METHOD = 1;
			if ($IF_STATIC_LINK_GCCRUNTIME_USE_PRINTPATH_METHOD == 1) {
				my $lib2FindStatic = $STDCXXLIB . ".a";
				my $lib = trim (`$COMPILER_DRIVER_CPlusPlus -print-file-name=$lib2FindStatic 2>/dev/null`);
				if (defined $lib) {
					if ($lib ne $lib2FindStatic) {
						push @LIB_DEPENDENCIES_ADD, "$lib";
					}
					else {
						# consider using apt-get install glibc-static libstdc++-static
						my $dashLName = trim (`echo $STDCXXLIB | sed s/lib//`);
						push @LIB_DEPENDENCIES_ADD, "-l$dashLName";
					}
				}
			}
			else {
				push @LIB_DEPENDENCIES_ADD, "-lstdc++";
				$EXTRA_PREFIX_LINKER_ARGS .= " -static-libstdc++";
			}
		}

		if (IsGCCOrGPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
			if (!$STATIC_LINK_GCCRUNTIME ) {
				push @LIB_DEPENDENCIES_ADD, "-lstdc++";
			}
			if (GetGCCVersion_ ($COMPILER_DRIVER_CPlusPlus) < '9') {	## directly included as of gcc-9 in stdc++lib
				push @LIB_DEPENDENCIES_ADD, "-lstdc++fs";
			}
			if ($STATIC_LINK_GCCRUNTIME == 1) {
				# https://stroika.atlassian.net/browse/STK-676 (-static causes some apps crash; and there is no option to JUST staticly link libc - eg no -static-libc)
				# https://stackoverflow.com/questions/26304531/compiling-with-static-libgcc-static-libstdc-still-results-in-dynamic-depende
				$EXTRA_PREFIX_LINKER_ARGS .= " -static-libstdc++";
				$EXTRA_PREFIX_LINKER_ARGS .= " -static-libgcc";
				#$EXTRA_PREFIX_LINKER_ARGS .= " -static-libc";		# Wish this existed as option!
			}
		}
		elsif (IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
			if ("$^O" eq "darwin") {
				#xcode not supporting filesystem API (so use boost)
				#$EXTRA_SUFFIX_LINKER_ARGS .= " -lc++experimental";
				##qCompilerAndStdLib_stdfilesystemAppearsPresentButDoesntWork_Buggy
				if ($FEATUREFLAG_boost ne $LIBFEATUREFLAG_No) {
					push @LIB_DEPENDENCIES_ADD, "-lboost_filesystem";
					push @LIB_DEPENDENCIES_ADD, "-lboost_system";
					push @LIB_DEPENDENCIES_ADD, "-lboost_thread";
					push @LIB_DEPENDENCIES_ADD, "-lboost_chrono";
				}
			}
			else {
				if (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '7.0') {
					if ($STDCXXLIB eq "libc++") {
						$EXTRA_SUFFIX_LINKER_ARGS .= " ";
						push @LIB_DEPENDENCIES_ADD, "-lc++";
						push @LIB_DEPENDENCIES_ADD, "-lc++experimental";
					}
					else {
						push @LIB_DEPENDENCIES_ADD, "-lstdc++fs";
					}
				}
				else {
					if ($STDCXXLIB eq "libc++") {
						$EXTRA_SUFFIX_LINKER_ARGS .= " ";
						push @LIB_DEPENDENCIES_ADD, "-lc++";
						# from https://libcxx.llvm.org/docs/UsingLibcxx.html: Starting with LLVM 9.0, support for <filesystem> is provided in the main library and nothing special is required to use <filesystem>.
						if (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '9.0') {
							push @LIB_DEPENDENCIES_ADD, "-lc++fs";
						}
					}
					else {
						push @LIB_DEPENDENCIES_ADD, "-lstdc++fs";
					}
				}
			}
		}

		# if boost is available, Stroika adds utilities that depend on parts of it
		if ($FEATUREFLAG_boost ne $LIBFEATUREFLAG_No) {
			push @LIB_DEPENDENCIES_ADD, "-lboost_filesystem";
			push @LIB_DEPENDENCIES_ADD, "-lboost_system";
			push @LIB_DEPENDENCIES_ADD, "-lboost_thread";
			push @LIB_DEPENDENCIES_ADD, "-lboost_chrono";
		}

	}

	FillDefaultIncludesPathIfNeeded_();
	FillDefaultLibsPathIfNeeded_();
	FillDefaultLibDependencies_();
	FillInToolsPathAdditionsIfNeeded_ ();


	if ($isVisualStudio) {
		$EXTRA_PREFIX_LINKER_ARGS .= " /nologo";
		my $WIN_LIBCOMPATIBLE_ARCH = $ARCH;
		if ($WIN_LIBCOMPATIBLE_ARCH eq "x86_64") {
			$WIN_LIBCOMPATIBLE_ARCH = "x64";
		}
		$EXTRA_PREFIX_LINKER_ARGS .= " /MACHINE:${WIN_LIBCOMPATIBLE_ARCH}";
	}


	#
	# generate CFLAGS and CXXFLAGS
	# roughly as follows:
	#	CFLAGS		+=	$(COPTIMIZE_FLAGS) $(INCLUDES_PATH_COMPILER_DIRECTIVES) $(CWARNING_FLAGS)
	#	ifeq ($(IncludeDebugSymbolsInLibraries), 1)
	#		CFLAGS += -g
	#	endif
	#	ifeq ($(ENABLE_GLIBCXX_DEBUG), 1)
	#		CFLAGS +=  -D_GLIBCXX_DEBUG 
	#	endif
	#
	if ($CPPFLAGS_Overridden eq false) {
		@GetDefaultCZZFLAGS_flags_flags = @CPPFLAGS;
		@GetDefaultCZZFLAGS_flags_flagValues2Remove = @CPPFLAGS2Remove;
		@CPPFLAGS = GetDefaultCZZFLAGS_flags_ (0);
	}
	if ($CFLAGS_Overridden eq false) {
		@GetDefaultCZZFLAGS_flags_flags = @CFLAGS;
		@GetDefaultCZZFLAGS_flags_flagValues2Remove = @CFLAGS2Remove;
		@CFLAGS = GetDefaultCZZFLAGS_flags_ (1);
	}
	if ($CXXFLAGS_Overridden eq false) {
		@GetDefaultCZZFLAGS_flags_flags = @CXXFLAGS;
		@GetDefaultCZZFLAGS_flags_flagValues2Remove = @CXXFLAGS2Remove;
		@CXXFLAGS = GetDefaultCZZFLAGS_flags_ (2);
	}

	if ($PROJECTPLATFORMSUBDIR eq 'Unix' && not ($CPPSTD_VERSION_FLAG eq '')) {
		$EXTRA_PREFIX_LINKER_ARGS .= " $CPPSTD_VERSION_FLAG";
	}

	if ($INCLUDE_SYMBOLS_EXE) {
		if ($isVisualStudio) {
			$EXTRA_PREFIX_LINKER_ARGS .= " /DEBUG";
		}
		elsif ($PROJECTPLATFORMSUBDIR eq 'Unix') {
			$EXTRA_PREFIX_LINKER_ARGS .= " -g";
		}
	}

}




PostProcessOptions_ ();



sub ValidateConfigurationAndEmitNeededWarnings_
{
	if (("$^O" eq "darwin") and IsClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
		if (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < 10) {
			print "CONFIGURATION-WARNING: Stroika 2.1 requires clang 10 (xcode 10) or later needed (compiler-driver: $COMPILER_DRIVER_CPlusPlus).\n";
		}
	}
	if (!("$^O" eq "darwin") and IsClangPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
		if (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '6.0') {
			print "CONFIGURATION-WARNING: Stroika 2.1 requires clang 6 or later (compiler-driver: $COMPILER_DRIVER_CPlusPlus).\n";
		}
	}
	if (IsGCCOrGPlusPlus_($COMPILER_DRIVER_CPlusPlus)) {
		if (GetGCCVersion_ ($COMPILER_DRIVER) < 7) {
			print "CONFIGURATION-WARNING: Stroika 2.1 requires gcc 7 or later (compiler-driver: $COMPILER_DRIVER_CPlusPlus).\n";
		}
	}
}


my %GetMSVCVarName_e_;	### cache map of var 2 values since $ARCH and $BUILD_TOOLS_ROOT shouldn't change once we start calling this
my $GetMSVCVarName_filled_ = false;
sub GetMSVCVarName_
{
	my $envVarName= shift;
	if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
		require "$thisScriptDir/ScriptsLib/Configure-VisualStudio-Support.pl";
	}
	if ($ARCH eq "") {
		die ("reorg code so this set first");
	}
	if (!$GetMSVCVarName_filled_) {
		if (! defined $BUILD_TOOLS_ROOT) {
			$BUILD_TOOLS_ROOT = GetDefaultToolsBuildDir($PROJECTPLATFORMSUBDIR);
		}
		%GetMSVCVarName_e_ = GetAugmentedEnvironmentVariablesForConfiguration ($ARCH, $BUILD_TOOLS_ROOT);
		$GetMSVCVarName_filled_ = true;
	}
	return "$GetMSVCVarName_e_{$envVarName}"
}


# Eventually  -make this more central - put all configs here, and then
# build C++/dirs etc from this!
sub	WriteConfigFile_
{
	my @appArgs = GetAppArgs_ ();

	my $configFileName = shift(@_);

	open(OUT,">$configFileName");
	print (OUT "<!--This file autogenerated by the configure command: see Configure-Command-Line, modify it, and re-run-->\n\n");
	print (OUT "<Configuration>\n");


	print (OUT "    <Configure-Command-Line>");
	print (OUT "configure ");
	foreach my $argnum (0 .. $#appArgs) {
		if ($argnum != 0) {
			print OUT (" ");
		}
	   print (OUT "$appArgs[$argnum]");
	}
	print (OUT "</Configure-Command-Line>\n");



	print (OUT "    <ProjectPlatformSubdir>$PROJECTPLATFORMSUBDIR</ProjectPlatformSubdir>\n");
	if (defined $BUILD_TOOLS_ROOT) {
		print (OUT "    <BUILD_TOOLS_ROOT>$BUILD_TOOLS_ROOT</BUILD_TOOLS_ROOT>\n");
	}
	print (OUT "    <TARGET_PLATFORMS>$TARGET_PLATFORMS</TARGET_PLATFORMS>\n");
	print (OUT "    <ARCH>$ARCH</ARCH>\n");
	if (defined $Config_Tag) {
		print (OUT "    <ConfigTags>$Config_Tag</ConfigTags>\n");
	}
	else {
		print (OUT "    <ConfigTags></ConfigTags>\n");
	}
	print (OUT "    <AS>$AS</AS>\n");
	print (OUT "    <CC>$COMPILER_DRIVER_C</CC>\n");
	print (OUT "    <CXX>$COMPILER_DRIVER_CPlusPlus</CXX>\n");

	if (defined $MIDL) {
		print (OUT "    <MIDL>$MIDL</MIDL>\n");
	}
	if (defined $RC) {
		print (OUT "    <RC>$RC</RC>\n");
	}

	print (OUT "    <ExtraMakeDefines>\n");
		foreach my $var (@useExtraMakeDefines)
		{
			print (OUT "       <MakeDefine>$var</MakeDefine>\n");
		}
	print (OUT "    </ExtraMakeDefines>\n");

	print (OUT "    <PkgConfigLinkLineAppendages>\n");
		foreach my $var (@packageConfigLinkLines)
		{
			print (OUT "       <PkgConfigLinkLineAppendage>$var</PkgConfigLinkLineAppendage>\n");
		}
	print (OUT "    </PkgConfigLinkLineAppendages>\n");


	if ($ENABLE_ASSERTIONS != DEFAULT_BOOL_OPTIONS) {
		print (OUT "    <ENABLE_ASSERTIONS>$ENABLE_ASSERTIONS</ENABLE_ASSERTIONS>\n");
	}

	
	print (OUT "    <qFeatureFlag_ActivePerl>$FEATUREFLAG_ActivePerl</qFeatureFlag_ActivePerl>\n");
	print (OUT "    <qFeatureFlag_boost>$FEATUREFLAG_boost</qFeatureFlag_boost>\n");
	print (OUT "    <qFeatureFlag_LibCurl>$FEATUREFLAG_LIBCURL</qFeatureFlag_LibCurl>\n");
	print (OUT "    <qFeatureFlag_OpenSSL>$FEATUREFLAG_OpenSSL</qFeatureFlag_OpenSSL>\n");
	if (not ($FEATUREFLAG_OpenSSLExtraArgs eq "")) {
		if ($FEATUREFLAG_OpenSSL eq $LIBFEATUREFLAG_UseStaticTPP) {
			print (OUT "    <qFeatureFlag_OpenSSL_ExtraArgs>$FEATUREFLAG_OpenSSLExtraArgs</qFeatureFlag_OpenSSL_ExtraArgs>\n");
		}
		else {
			die ("Cannot specify OpenSSL-ExtraArgs unless --OpenSSL use");
		}
	}
	print (OUT "    <qFeatureFlag_WinHTTP>$FEATUREFLAG_WinHTTP</qFeatureFlag_WinHTTP>\n");
	print (OUT "    <qFeatureFlag_ATLMFC>$FEATUREFLAG_ATLMFC</qFeatureFlag_ATLMFC>\n");
	print (OUT "    <qFeatureFlag_Xerces>$FEATUREFLAG_Xerces</qFeatureFlag_Xerces>\n");
	print (OUT "    <qFeatureFlag_ZLib>$FEATUREFLAG_ZLib</qFeatureFlag_ZLib>\n");
	print (OUT "    <qFeatureFlag_sqlite>$FEATUREFLAG_sqlite</qFeatureFlag_sqlite>\n");
	print (OUT "    <qFeatureFlag_LZMA>$FEATUREFLAG_LZMA</qFeatureFlag_LZMA>\n");
	print (OUT "    <qFeatureFlag_WIX>$FEATUREFLAG_WIX</qFeatureFlag_WIX>\n");

	if ($HasMakefileBugWorkaround_lto_skipping_undefined_incompatible == true) {
		print (OUT "    <HasMakefileBugWorkaround_lto_skipping_undefined_incompatible>true</HasMakefileBugWorkaround_lto_skipping_undefined_incompatible>\n");
	}

	
	my $firstTime = true;
	print (OUT "    <CPPFLAGS>");
		foreach my $var (@CPPFLAGS)
		{
			if ($firstTime) {
				$firstTime = false;
			}
			else {
				print (OUT " ");
			}
			print (OUT "$var");
		}
	print (OUT "</CPPFLAGS>\n");

	$firstTime = true;
	print (OUT "    <CFLAGS>");
		foreach my $var (@CFLAGS)
		{
			if ($firstTime) {
				$firstTime = false;
			}
			else {
				print (OUT " ");
			}
			print (OUT "$var");
		}
	print (OUT "</CFLAGS>\n");

	$firstTime = true;
	print (OUT "    <CXXFLAGS>");
		foreach my $var (@CXXFLAGS)
		{
			if ($firstTime) {
				$firstTime = false;
			}
			else {
				print (OUT " ");
			}
			print (OUT "$var");
		}
	print (OUT "</CXXFLAGS>\n");

	if ($runtimeStackProtectorFlag == true) {
		unshift(@CFLAGS, '-fstack-protector-all');
		unshift(@CXXFLAGS, '-fstack-protector-all');
	}

	print (OUT "    <INCLUDES_PATH>$INCLUDES_PATH</INCLUDES_PATH>\n");

	print (OUT "    <CrossCompiling>$CrossCompiling</CrossCompiling>\n");

	print (OUT "    <IncludeDebugSymbolsInLibraries>$INCLUDE_SYMBOLS_LIB</IncludeDebugSymbolsInLibraries>\n");
	print (OUT "    <IncludeDebugSymbolsInExecutables>$INCLUDE_SYMBOLS_EXE</IncludeDebugSymbolsInExecutables>\n");

	print (OUT "    <TOOLS_PATH_ADDITIONS>$TOOLS_PATH_ADDITIONS</TOOLS_PATH_ADDITIONS>\n");
	if (not ($TOOLS_PATH_ADDITIONS_BUGWORKAROUND eq "")) {
		print (OUT "    <TOOLS_PATH_ADDITIONS_BUGWORKAROUND>$TOOLS_PATH_ADDITIONS_BUGWORKAROUND</TOOLS_PATH_ADDITIONS_BUGWORKAROUND>\n");
	}
	
	print (OUT "    <LIBS_PATH>$LIBS_PATH</LIBS_PATH>\n");
	print (OUT "    <LIB_DEPENDENCIES>$LIB_DEPENDENCIES</LIB_DEPENDENCIES>\n");
	print (OUT "    <EXTRA_PREFIX_LINKER_ARGS>$EXTRA_PREFIX_LINKER_ARGS</EXTRA_PREFIX_LINKER_ARGS>\n");
	print (OUT "    <EXTRA_SUFFIX_LINKER_ARGS>$EXTRA_SUFFIX_LINKER_ARGS</EXTRA_SUFFIX_LINKER_ARGS>\n");

	print (OUT "    <AR>$AR</AR>\n");
	print (OUT "    <LIBTOOL>$LIBTOOL</LIBTOOL>\n");
	print (OUT "    <RANLIB>$RANLIB</RANLIB>\n");
	print (OUT "    <Linker>$Linker</Linker>\n");
	
	print (OUT "    <STRIP>$STRIP</STRIP>\n");

	print (OUT "    <RUN_PREFIX>$RUN_PREFIX</RUN_PREFIX>\n");

	if (defined ($qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy)) {
		print (OUT "    <qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy>$qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy</qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy>\n");
	}

	print (OUT "</Configuration>\n");
	close(OUT);
}

#print ("OS: $^O\n");

mkdir ($configurationFiles);

my $generate = true;
my $generateBecause = '';
if ($onlyGenerateIfCompilerExists) {
	if (trim (`./ScriptsLib/HasCompiler $COMPILER_DRIVER_CPlusPlus`) eq "0") {
		$generate = false;
		$generateBecause = "compiler $COMPILER_DRIVER_CPlusPlus not present";
	}
	# if flag to use libc++ - check if right version is available
	if (IsClangOrClangPlusPlus_ ($COMPILER_DRIVER_CPlusPlus) && ($STDCXXLIB eq 'libc++')) {
		if (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '7.0') {
			if (! -e ('/usr/lib/llvm-6/include/c++/v1/cstddef')) {
				$generate = false;
				$generateBecause = "/usr/lib/llvm-6/include/c++/v1/cstddef not present";
			}
		}
		elsif (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '8.0') {
			if (! -e ('/usr/lib/llvm-7/include/c++/v1/cstddef')) {
				$generate = false;
				$generateBecause = "/usr/lib/llvm-7/include/c++/v1/cstddef not present";
			}
		}
		elsif (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '9.0') {
			if (! -e ('/usr/lib/llvm-8/include/c++/v1/cstddef')) {
				$generate = false;
				$generateBecause = "/usr/lib/llvm-8/include/c++/v1/cstddef not present";
			}
		}
		elsif (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '10.0') {
			if (! -e ('/usr/lib/llvm-9/include/c++/v1/cstddef')) {
				$generate = false;
				$generateBecause = "/usr/lib/llvm-9/include/c++/v1/cstddef not present";
			}
		}
		elsif (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '11.0') {
			if (! -e ('/usr/lib/llvm-10/include/c++/v1/cstddef')) {
				$generate = false;
				$generateBecause = "/usr/lib/llvm-10/include/c++/v1/cstddef not present";
			}
		}
		elsif (GetClangVersion_ ($COMPILER_DRIVER_CPlusPlus) < '12.0') {
			if (! -e ('/usr/lib/llvm-11/include/c++/v1/cstddef')) {
				$generate = false;
				$generateBecause = "/usr/lib/llvm-11/include/c++/v1/cstddef not present";
			}
		}
	}
	if (IsGCCOrGPlusPlus_ ($COMPILER_DRIVER_CPlusPlus)) {
		my $itsVersion = GetGCCVersion_ ($COMPILER_DRIVER_CPlusPlus);
		if ($itsVersion < 8.0) {
			$generate = false;
			$generateBecause = "GCC (" . $COMPILER_DRIVER_CPlusPlus . ") versions < 8 (v=" . $itsVersion . ") are missing <filesystem> code and wont work with this version of Stroika";
		}
	}
}

if ($generate) {
	ValidateConfigurationAndEmitNeededWarnings_ ();
	my $masterXMLConfigFile	=	"$configurationFiles" . "$configurationName.xml";
	print(`ScriptsLib/PrintLevelLeader $MAKE_INDENT_LEVEL` . "Writing \"$masterXMLConfigFile\" ... ");
	WriteConfigFile_ ($masterXMLConfigFile);
	system ("rm -f IntermediateFiles/APPLIED_CONFIGURATIONS");
	print("done\n");
}
else {
	print(`ScriptsLib/PrintLevelLeader $MAKE_INDENT_LEVEL` . "Skipping configuration $configurationName because $generateBecause and configuration invoked with --only-if-has-compiler\n");
}
