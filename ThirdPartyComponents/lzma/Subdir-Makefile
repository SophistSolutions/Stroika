

OBJSUFFIX=o
LIBSUFFIX=a

COMMON_OBJS = \
  CommandLineParser.$(OBJSUFFIX) \
  CRC.$(OBJSUFFIX) \
  CrcReg.$(OBJSUFFIX) \
  IntToString.$(OBJSUFFIX) \
  ListFileUtils.$(OBJSUFFIX) \
  NewHandler.$(OBJSUFFIX) \
  StdInStream.$(OBJSUFFIX) \
  StdOutStream.$(OBJSUFFIX) \
  MyString.$(OBJSUFFIX) \
  Sha256Reg.$(OBJSUFFIX) \
  StringConvert.$(OBJSUFFIX) \
  StringToInt.$(OBJSUFFIX) \
  UTFConvert.$(OBJSUFFIX) \
  MyVector.$(OBJSUFFIX) \
  Wildcard.$(OBJSUFFIX) \
  XzCrc64Reg.$(OBJSUFFIX) \

WIN_OBJS = \
  DLL.$(OBJSUFFIX) \
  ErrorMsg.$(OBJSUFFIX) \
  FileDir.$(OBJSUFFIX) \
  FileFind.$(OBJSUFFIX) \
  FileIO.$(OBJSUFFIX) \
  FileLink.$(OBJSUFFIX) \
  FileName.$(OBJSUFFIX) \
  MemoryLock.$(OBJSUFFIX) \
  PropVariant.$(OBJSUFFIX) \
  PropVariantConv.$(OBJSUFFIX) \
  Synchronization.$(OBJSUFFIX) \
  System.$(OBJSUFFIX) \
  TimeUtils.$(OBJSUFFIX) \

7ZIP_COMMON_OBJS = \
  CreateCoder.$(OBJSUFFIX) \
  CWrappers.$(OBJSUFFIX) \
  FilePathAutoRename.$(OBJSUFFIX) \
  FileStreams.$(OBJSUFFIX) \
  InBuffer.$(OBJSUFFIX) \
  InOutTempBuffer.$(OBJSUFFIX) \
  FilterCoder.$(OBJSUFFIX) \
  LimitedStreams.$(OBJSUFFIX) \
  MethodId.$(OBJSUFFIX) \
  MethodProps.$(OBJSUFFIX) \
  OffsetStream.$(OBJSUFFIX) \
  OutBuffer.$(OBJSUFFIX) \
  ProgressUtils.$(OBJSUFFIX) \
  PropId.$(OBJSUFFIX) \
  StreamBinder.$(OBJSUFFIX) \
  StreamObjects.$(OBJSUFFIX) \
  StreamUtils.$(OBJSUFFIX) \
  UniqBlocks.$(OBJSUFFIX) \
  VirtThread.$(OBJSUFFIX) \

AR_OBJS = \
  LzmaHandler.$(OBJSUFFIX) \
  SplitHandler.$(OBJSUFFIX) \
  XzHandler.$(OBJSUFFIX) \

AR_COMMON_OBJS = \
  CoderMixer2.$(OBJSUFFIX) \
  CrossThreadProgress.$(OBJSUFFIX) \
  DummyOutStream.$(OBJSUFFIX) \
  HandlerOut.$(OBJSUFFIX) \
  InStreamWithCRC.$(OBJSUFFIX) \
  ItemNameUtils.$(OBJSUFFIX) \
  MultiStream.$(OBJSUFFIX) \
  OutStreamWithCRC.$(OBJSUFFIX) \
  ParseProperties.$(OBJSUFFIX) \


7Z_OBJS = \
  $O\7zCompressionMode.$(OBJSUFFIX) \
  $O\7zDecode.$(OBJSUFFIX) \
  $O\7zEncode.$(OBJSUFFIX) \
  $O\7zExtract.$(OBJSUFFIX) \
  $O\7zFolderInStream.$(OBJSUFFIX) \
  $O\7zFolderOutStream.$(OBJSUFFIX) \
  $O\7zHandler.$(OBJSUFFIX) \
  $O\7zHandlerOut.$(OBJSUFFIX) \
  $O\7zHeader.$(OBJSUFFIX) \
  $O\7zIn.$(OBJSUFFIX) \
  $O\7zOut.$(OBJSUFFIX) \
  $O\7zProperties.$(OBJSUFFIX) \
  $O\7zRegister.$(OBJSUFFIX) \
  $O\7zSpecStream.$(OBJSUFFIX) \
  $O\7zUpdate.$(OBJSUFFIX) \

COMPRESS_OBJS = \
  $O\Bcj2Coder.$(OBJSUFFIX) \
  $O\Bcj2Register.$(OBJSUFFIX) \
  $O\BcjCoder.$(OBJSUFFIX) \
  $O\BcjRegister.$(OBJSUFFIX) \
  $O\BranchMisc.$(OBJSUFFIX) \
  $O\BranchRegister.$(OBJSUFFIX) \
  $O\ByteSwap.$(OBJSUFFIX) \
  $O\CopyCoder.$(OBJSUFFIX) \
  $O\CopyRegister.$(OBJSUFFIX) \
  $O\DeltaFilter.$(OBJSUFFIX) \
  $O\Lzma2Decoder.$(OBJSUFFIX) \
  $O\Lzma2Encoder.$(OBJSUFFIX) \
  $O\Lzma2Register.$(OBJSUFFIX) \
  $O\LzmaDecoder.$(OBJSUFFIX) \
  $O\LzmaEncoder.$(OBJSUFFIX) \
  $O\LzmaRegister.$(OBJSUFFIX) \

CRYPTO_OBJS = \
  7zAes.$(OBJSUFFIX) \
  7zAesRegister.$(OBJSUFFIX) \
  MyAes.$(OBJSUFFIX) \
  MyAesReg.$(OBJSUFFIX) \
  RandGen.$(OBJSUFFIX) \





C_OBJS = \
  7zStream.$(OBJSUFFIX) \
  7zAlloc.$(OBJSUFFIX) \
  7zArcIn.$(OBJSUFFIX) \
  7zBuf.$(OBJSUFFIX) \
  7zBuf2.$(OBJSUFFIX) \
  7zCrc.$(OBJSUFFIX) \
  7zCrcOpt.$(OBJSUFFIX) \
  7zDec.$(OBJSUFFIX) \
  CpuArch.$(OBJSUFFIX) \
  Delta.$(OBJSUFFIX) \
  LzmaDec.$(OBJSUFFIX) \
  Lzma2Dec.$(OBJSUFFIX) \
  Ppmd7.$(OBJSUFFIX) \
  Ppmd7Dec.$(OBJSUFFIX) \
  7zFile.$(OBJSUFFIX) \
  7zStream.$(OBJSUFFIX) \
  7zArcIn.$(OBJSUFFIX) \
  Alloc.$(OBJSUFFIX) \
  Bcj2.$(OBJSUFFIX) \
  Bra.$(OBJSUFFIX) \
  Bra86.$(OBJSUFFIX) \
  BraIA64.$(OBJSUFFIX) \
  CpuArch.$(OBJSUFFIX) \
  Delta.$(OBJSUFFIX) \
  LzFind.$(OBJSUFFIX) \
  Lzma2Dec.$(OBJSUFFIX) \
  Lzma2Enc.$(OBJSUFFIX) \
  LzmaDec.$(OBJSUFFIX) \
  LzmaEnc.$(OBJSUFFIX) \
  Sha256.$(OBJSUFFIX) \
  Sort.$(OBJSUFFIX) \
  Xz.$(OBJSUFFIX) \
  XzDec.$(OBJSUFFIX) \
  XzEnc.$(OBJSUFFIX) \
  XzIn.$(OBJSUFFIX)


ifneq (,$(findstring VisualStudio,$(ProjectPlatformSubdir)))
C_OBJS+=\
  Bcj2Enc.$(OBJSUFFIX)\
  MtCoder.$(OBJSUFFIX)\
  Threads.$(OBJSUFFIX)\
  LzFindMt.$(OBJSUFFIX)
endif
  
  
LibObjs=	\
		$(C_OBJS)\
		C_FileIO.$(OBJSUFFIX) \
		System.$(OBJSUFFIX) \
		Bench.$(OBJSUFFIX) \
		BenchCon.$(OBJSUFFIX) \
		ConsoleClose.$(OBJSUFFIX) \
		LzmaDecoder.$(OBJSUFFIX) \
		LzmaEncoder.$(OBJSUFFIX) \
		LzmaRegister.$(OBJSUFFIX) \
		CreateCoder.$(OBJSUFFIX) \
		CWrappers.$(OBJSUFFIX) \
		FileStreams.$(OBJSUFFIX) \
		FilterCoder.$(OBJSUFFIX) \
		MethodProps.$(OBJSUFFIX) \
		StreamUtils.$(OBJSUFFIX) \
		CommandLineParser.$(OBJSUFFIX) \
		CRC.$(OBJSUFFIX) \
		CrcReg.$(OBJSUFFIX) \
		IntToString.$(OBJSUFFIX) \
		MyString.$(OBJSUFFIX) \
		MyVector.$(OBJSUFFIX) \
		MyWindows.$(OBJSUFFIX) \
		StringConvert.$(OBJSUFFIX) \
		StringToInt.$(OBJSUFFIX) \
		PropVariant.$(OBJSUFFIX) \
		7zCrc.$(OBJSUFFIX) \
		7zCrcOpt.$(OBJSUFFIX) \
		Alloc.$(OBJSUFFIX) \
		Bra86.$(OBJSUFFIX) \
		CpuArch.$(OBJSUFFIX) \
		LzFind.$(OBJSUFFIX) \
		LzmaDec.$(OBJSUFFIX) \
		LzmaEnc.$(OBJSUFFIX) \
		Lzma86Dec.$(OBJSUFFIX) \
		Lzma86Enc.$(OBJSUFFIX)

ifneq (,$(findstring VisualStudio,$(ProjectPlatformSubdir)))
LibObjs+=		\
  FileIO.$(OBJSUFFIX)\
  System.$(OBJSUFFIX)
endif



Objs=	$(LibObjs) \
		LzmaAlone.$(OBJSUFFIX) \


SubDirs2Compile=	\
	CPP/7zip/Bundles/LzmaCon \
	CPP/Common \
	CPP/7zip/UI/Common \
	CPP/7zip/UI/Console \
	CPP/7zip/Compress \
	CPP/7zip/Common \
	CPP/Windows \
	C \
	C/Util/7z


vpath %cpp $(SubDirs2Compile)
vpath %c $(SubDirs2Compile)

CC=gcc
CFLAGS+=-D_7ZIP_ST

AR=ar
ARCRATEFLAGS=cru
ARTARGETPREFIX=

LD=$(CC)
LDFLAGS=
LINKTARGETPREFIX= -o 

# may need to add define
#-D_7ZIP_PPMD_SUPPPORT


%.$(OBJSUFFIX) : %.cpp
	@#echo "      Compiling $(subst ../,, $<)..."
	"$(CC)" $(CFLAGS) -c $<

%.$(OBJSUFFIX) : %.c
	@#echo "      Compiling $(subst ../,, $<)..."
	"$(CC)" $(CFLAGS) -c $<


all:		lzma.$(LIBSUFFIX) 7zDec$(EXESUFFIX) lzma$(EXESUFFIX)

lzma.$(LIBSUFFIX):	$(LibObjs)
	"$(AR)" $(ARCRATEFLAGS) $(ARTARGETPREFIX)lzma.$(LIBSUFFIX) $(LibObjs)

7zDec$(EXESUFFIX):	7zMain.$(OBJSUFFIX) lzma.$(LIBSUFFIX)
	"$(LD)" $(LDFLAGS) $(LINKTARGETPREFIX)7zDec$(EXESUFFIX) 7zMain.$(OBJSUFFIX) lzma.$(LIBSUFFIX) $(LIBS)
	
lzma$(EXESUFFIX):	LzmaAlone.$(OBJSUFFIX) 	lzma.$(LIBSUFFIX)
	"$(LD)" $(LDFLAGS) $(LINKTARGETPREFIX)lzma$(EXESUFFIX) LzmaAlone.$(OBJSUFFIX) lzma.$(LIBSUFFIX) $(LIBS)

clean:
	@rm -f *.$(OBJSUFFIX)

clobber:	clean
	@rm -f *.$(LIBSUFFIX) lzma
