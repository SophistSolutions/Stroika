/*
 * Copyright(c) Sophist Solutions, Inc. 1990-2014.  All rights reserved
 */

/*
 * Description:
 *
 *	ActiveLedIt.odl : type library source for ActiveX Control project.
 *
 *		This file will be processed by the Make Type Library (mktyplib) tool to
 *	produce the type library (ActiveLedIt.tlb) that will become a resource in
 *	ActiveLedIt.ocx.
 *
 */

#include <olectl.h>
#include <idispids.h>

#include	"ActiveLedItConfig.h"
#include	"DispIDs.h"



[ uuid (9A013A72-AD34-11D0-8D9B-00A0C9080C73), version(qActiveLedIt_MajorDotMinorVersion),
  helpstring ("ActiveLedIt! ActiveX Control"),
  control
]
library ACTIVELEDITLib
{
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);

	typedef	enum	HasScrollBarFlag { eNoScrollBar, eShowScrollBar, eShowScrollbarIfNeeded}	HasScrollBarFlag;

	typedef	enum	JustificationFlag { eLeftJustification, eRightJustification, eCenterJustification, eFullJustification, eNoCommonJustification}	JustificationFlag;

	// NB: these values (except for eNoCommonListStyle) are synced with the Led values, which in turn,
	// are synced with the predefined RTF values... (thats where 23 comes from) -- LGP 2003-06-03
	typedef	enum	ListStyle { eListStyle_None = 9999, eListStyle_Bullet = 23, eNoCommonListStyle = -1 }	ListStyle;


	//  Primary dispatch interface for ActiveLedItControl
	[ uuid (9A013A74-AD34-11D0-8D9B-00A0C9080C73),
	  helpstring ("Dispatch interface for ActiveLedIt! Control"), hidden
	]
	dispinterface _DActiveLedIt
	{
		properties:
			[id (DISPID_VersionNumber),
				helpstring ("")
			]
			int	VersionNumber;

			[id (DISPID_ShortVersionString),
				helpstring ("")
			]
			BSTR	ShortVersionString;

			[id (DISPID_HWND),
				helpstring ("This read-only property returns the HWND associated with the ActiveLedIt control.")
			]
			int	hWnd;

			[id(DISPID_BACKCOLOR), bindable, requestedit,
				helpstring ("Controls background color. Default is inherited from control container.")
			]
			OLE_COLOR BackColor;

			[id(DISPID_APPEARANCE),
				helpstring ("The appearance of the control: 0   Flat appearance, 1   3D appearance.")
			]
			short	Appearance;

			[id(DISPID_BORDERSTYLE),
				helpstring ("1 if the control has a normal border; 0 if the control has no border.")
			]
			short	BorderStyle;

			[id (DISPID_ReadOnly),
				helpstring ("Like MSWindows ES_READONLY flag. Defaults off.")
			]
			boolean	ReadOnly;

			[id (DISPID_ENABLED),
				helpstring ("Like MSWindows NOT WS_DISABLED flag. Defaults true.")
			]
			boolean	Enabled;

			[id (DISPID_EnableAutoChangesBackgroundColor),
				helpstring ("If true, then disabling or making readonly (see ReadOnly/Enabled properties) makes control gray regardless of 'BackColor' property. Defaults true.")
			]
			boolean	EnableAutoChangesBackgroundColor;

			[id (DISPID_Dirty),
				helpstring ("Document dirty. Automatically set dirty by editing. But flag only cleared by explicitly setting this property.")
			]
			boolean	Dirty;

			[id (DISPID_HasVerticalScrollBar)]
			HasScrollBarFlag	HasVerticalScrollBar;

			[id (DISPID_HasHorizontalScrollBar)]
			HasScrollBarFlag	HasHorizontalScrollBar;

			[id (DISPID_MaxUndoLevel),
				helpstring ("0 implies no undo, and 1 implies UNDO has same effect as REDO. Values >1 imply Undo/Redo methods do different things. Check CanUndo/CanRedo for more info.")
			]
			int	MaxUndoLevel;

			[id (DISPID_CanUndo), /*propget,*/
				helpstring ("OK to call Undo () function - something user has done which can be undone.")
			]
			boolean	CanUndo;

			[id (DISPID_CanRedo), /*propget,*/
				helpstring ("OK to call Redo () function - something user has undone which can be redone.")
			]
			boolean	CanRedo;


			[id (DISPID_WindowMarginTop),
				helpstring ("The WindowMarginTop is the space between the edge of the text (view rect) and the top of the control window (in TWIPS). Its location is relative to the controls bounding rectangle.")
			]
			int	WindowMarginTop;

			[id (DISPID_WindowMarginLeft),
				helpstring ("The WindowMarginLeft is the space between the edge of the text (view rect) and the left side of the control window (in TWIPS). Its location is relative to the controls bounding rectangle.")
			]
			int	WindowMarginLeft;

			[id (DISPID_WindowMarginBottom),
				helpstring ("The WindowMarginBottom is the space between the edge of the text (view rect) and the top of the control window (in TWIPS). Its location is relative to the controls bounding rectangle.")
			]
			int	WindowMarginBottom;

			[id (DISPID_WindowMarginRight),
				helpstring ("The WindowMarginRight is the space between the right edge of the text (view rect) and the right edige of the control window (in TWIPS). If there is a scrollbar, it comes to the RIGHT of this value. Its location is relative to the controls bounding rectangle")
			]
			int	WindowMarginRight;



			[id (DISPID_PrintMarginTop),
				helpstring ("The PrintMarginTop is the space between the top edge of the paper and where the text begins printing (in TWIPS).")
			]
			int	PrintMarginTop;

			[id (DISPID_PrintMarginLeft),
				helpstring ("The PrintMarginLeft is the space between the left edge of the paper and where the text begins printing (in TWIPS).")
			]
			int	PrintMarginLeft;

			[id (DISPID_PrintMarginBottom),
				helpstring ("The PrintMarginBottom is the space between the bottom edge of the paper and where the text ends printing (in TWIPS).")
			]
			int	PrintMarginBottom;

			[id (DISPID_PrintMarginRight),
				helpstring ("The PrintMarginRight is the space between the right edge of the paper and where the text ends printing (in TWIPS). Note - this is really only applicable when WrapToWindow is true. Otherwise - the text extent to the right is specified by the ruler wrapping settings.")
			]
			int	PrintMarginRight;


			[id (DISPID_Text),
				helpstring ("Returns/sets ALL the text. Returns LF characters as line term (but accepts ANY standard line term on input)")
			]
			BSTR Text;

			[id (DISPID_TextCRLF),
				helpstring ("Returns/sets ALL the text. Always returns CR/LF terminated text - even though Led internally uses a single LF for paragraph termination. So length of this string isn't same.")
			]
			BSTR TextCRLF;

			[id (DISPID_TextRTF),
				helpstring ("Returns/sets ALL the text. The format of the property is RTF.")
			]
			BSTR TextRTF;

			[id (DISPID_TextHTML),
				helpstring ("Returns/sets ALL the text. The format of the property is HTML.")
			]
			BSTR TextHTML;

			[id (DISPID_TextBitmap), /*propget,*/
				helpstring ("Returns ALL the text in the form of a bitmap. Simulates a print command. Bitmap is an OLE IPicture Object created with OleCreatePictureIndirect ().")
			]
			VARIANT TextBitmap;

			[id (DISPID_Length), /*propget,*/
				helpstring ("Returns the total number of characters in the buffer. Note this DOESNT correspond to length (Text), cuz that returns CRLF text.")
			]
			long	Length;

			[id (DISPID_MaxLength),
				helpstring ("Maximum length (in characters, with CR/LF treated as ONE) of the input buffer. -1 => no maximum.")
			]
			long	MaxLength;

			[id (DISPID_SupportContextMenu),
				helpstring ("If enabled, right-clicks bring up context menu.")
			]
			boolean	SupportContextMenu;

			[id (DISPID_HideDisabledContextMenuItems),
				helpstring ("If enabled, disabled menu items are not shown in the context menu. This is true by default and makes the popup menu more terse.")
			]
			boolean	HideDisabledContextMenuItems;

			[id (DISPID_ContextMenu),
				helpstring ("Object supporting the IALCommandList interface. Can be set to NULL to disable, or to GetDefaultContextMenu.")
			]
			VARIANT	ContextMenu;

			[id (DISPID_ToolbarList),
				helpstring ("Object supporting the IALToolbarList interface. Can be set to NULL or any other instance value supproting IALToolbarList.")
			]
			VARIANT	Toolbars;

			[id (DISPID_BuiltinCommands),
				helpstring ("This read-only property returns an object supporting the IALCommandList interface. It lists all the IALCommand interface-supporting objects for each command supported by ActiveLedIt. You can use this to lookup a particular builtin command by name.")
			]
			VARIANT	BuiltinCommands;

			[id (DISPID_PredefinedMenus),
				helpstring ("This read-only property returns an object supporting the IALCommandList interface. Its elements are all popup menus that could be added to another menu - like a context menu.")
			]
			VARIANT	PredefinedMenus;

			[id (DISPID_AcceleratorTable),
				helpstring ("This property contains an object of type IALAcceleratorTable. It can be replaced - including with the value of GetDefaultAcceleratorTable (which it defaults to). Accelerator elements can be freely added or removed.")
			]
			VARIANT	AcceleratorTable;

			[id (DISPID_SmartCutAndPaste),
				helpstring ("If enabled, try to make good guesses about cutting/pasting extra whitespace (and drag and drop).")
			]
			boolean	SmartCutAndPaste;

			[id (DISPID_SmartQuoteMode),
				helpstring ("If enabled, replace a double quote character with either an open quote or close quote character.")
			]
			boolean	SmartQuoteMode;

			[id (DISPID_WrapToWindow),
				helpstring ("If true, then text is wrapped to the window, and otherwise to the ruler (page).")
			]
			boolean	WrapToWindow;

			[id (DISPID_ShowParagraphGlyphs),
				helpstring ("If true, end-of-paragraph glyphs are displayed.")
			]
			boolean	ShowParagraphGlyphs;

			[id (DISPID_ShowTabGlyphs),
				helpstring ("If true, tab glyphs are displayed (not just empty space - but an icon so you can see them).")
			]
			boolean	ShowTabGlyphs;

			[id (DISPID_ShowSpaceGlyphs),
				helpstring ("If true, space glyphs are displayed (not just empty space - but an icon so you can see them).")
			]
			boolean	ShowSpaceGlyphs;

			[id (DISPID_UseSelectEOLBOLRowHilightStyle),
				helpstring ("If true (default) then selections will hilight to the end of line (and beginning of line) for newlines.")
			]
			boolean	UseSelectEOLBOLRowHilightStyle;

			[id (DISPID_ShowSecondaryHilight),
				helpstring ("If true (default) then even when the control is deactivated, a subtle indication of the selected region will still be shown.")
			]
			boolean	ShowSecondaryHilight;

			[id (DISPID_ShowHidableText),
				helpstring ("If true, hidable text (RTF \v) is displayed in the HidableTextColor, and the strike-through style.")
			]
			boolean	ShowHidableText;

			[id (DISPID_HidableTextColor),
				helpstring ("See ShowHidableText. This color is used to augment the display of hidable text which is currently being displayed if HidableTextColored is true.")
			]
			long	HidableTextColor;

			[id (DISPID_HidableTextColored),
				helpstring ("See ShowHidableText. If true, then use 'HidableTextColor' to color hidable text which is shown. Otherwise - use (default) light gray underline.")
			]
			boolean	HidableTextColored;

			[id (DISPID_SpellChecker),
				helpstring ("get method returns object(IDispatch). Set method can take object or CLSID or PROGID")
			]
			VARIANT	SpellChecker;

			// APIs which apply to the current selection (based on Microsoft Rich Text Control
			[id (DISPID_SELSTART),
				helpstring ("Returns/sets START of the selection (nb: offsets assume a paragraph-term single char).")
			]
			long	SelStart;

			[id (DISPID_SELLENGTH),
				helpstring ("Returns/sets LENGTH of the selection (nb: offsets assume a paragraph-term single char).")
			]
			long	SelLength;

			[id (DISPID_SELTEXT),
				helpstring ("Returns/sets the selected text (if any).  (but accepts ANY standard line term on input)")
			]
			BSTR	SelText;

			[id (DISPID_SelTextRTF),
				helpstring ("Returns/sets the selected text (in RTF format - and can be stuff other than text - so long as in RTF format).")
			]
			BSTR	SelTextRTF;

			[id (DISPID_SelTextHTML),
				helpstring ("Returns/sets the selected text (in RTF format - and can be stuff other than text - so long as in RTF format).")
			]
			BSTR	SelTextHTML;

			[id (DISPID_SelColor),
				helpstring ("Returns/sets the color of the selected text (or insertion point if selection empty).")
			]
			OLE_COLOR	SelColor;

			[id (DISPID_SelFontFace),
				helpstring ("Returns/sets the FontFace of the selected text (or insertion point if selection empty).")
			]
			BSTR	SelFontFace;

			[id (DISPID_SelFontSize),
				helpstring ("Returns/sets the Font Size of the selected text (or insertion point if selection empty - in Points).")
			]
			long	SelFontSize;

			[id (DISPID_SelBold),
				helpstring ("Returns/sets the Font Style BOLD of the selected text (or insertion point if selection empty). 0=>false, 1=>true, 2=>no-universal-answer.")
			]
			long	SelBold;

			[id (DISPID_SelItalic),
				helpstring ("Returns/sets the Font Style Italic of the selected text (or insertion point if selection empty). 0=>false, 1=>true, 2=>no-universal-answer.")
			]
			long	SelItalic;

			[id (DISPID_SelStrikeThru),
				helpstring ("Returns/sets the Font Style StrikeThru of the selected text (or insertion point if selection empty). 0=>false, 1=>true, 2=>no-universal-answer.")
			]
			long	SelStrikeThru;

			[id (DISPID_SelUnderline),
				helpstring ("Returns/sets the Font Style Underline of the selected text (or insertion point if selection empty). 0=>false, 1=>true, 2=>no-universal-answer.")
			]
			long	SelUnderline;

			[id (DISPID_SelJustification),
				helpstring ("Returns/sets the Justification of the selected paragraphs. eNoCommonJustification =>no-universal-answer, can be returned - but not set. FullJustification not fully supported (displayed as left-justification).")
			]
			JustificationFlag	SelJustification;

			[id (DISPID_SelListStyle),
				helpstring ("Returns/sets the ListStyle of the selected paragraphs. eNoCommonListStyle =>no-universal-answer, can be returned - but not set.")
			]
			ListStyle	SelListStyle;

			[id (DISPID_SelHidable),
				helpstring ("Returns/sets the Hidable flag of the selected text. 0=>false, 1=>true, 2=>no-universal-answer.")
			]
			long	SelHidable;

			[id (DISPID_CurrentEventArguments),
				helpstring ("read-only property supporting the IALCurrentEventArguments interface. Returns NULL outside the context of an event being processed, but during an event can be used to pass extra parameters to/from the event.")
			]
			VARIANT	CurrentEventArguments;

		methods:
			[id (DISPID_ABOUTBOX),
				helpstring ("Displays the modal aboutbox.")
			]
			void	AboutBox ();

			[id (DISPID_LoadFile),
				helpstring ("Loads a file into the control. This routine will guess the file format, based on the file extension, and perhaps its contents.")
			]
			void	LoadFile ([in]BSTR filename);

			[id (DISPID_SaveFile),
				helpstring ("Saves the contents of the control to the named file. Guess the file format based on the file name.")
			]
			void	SaveFile ([in]BSTR filename);

			[id (DISPID_SaveFileCRLF),
				helpstring ("Saves the contents of the control to the named file as CRLF-terminated text.")
			]
			void	SaveFileCRLF ([in]BSTR filename);

			[id (DISPID_SaveFileRTF),
				helpstring ("Saves the contents of the control to the named file as RTF")
			]
			void	SaveFileRTF ([in]BSTR filename);

			[id (DISPID_SaveFileHTML),
				helpstring ("Saves the contents of the control to the named file as HTML.")
			]
			void	SaveFileHTML ([in]BSTR filename);

			[id (DISPID_REFRESH),
				helpstring ("Forces a complete repaint of a control.")
			]
			void	Refresh ();

			[id (DISPID_ScrollToSelection),
				helpstring ("Scroll the current window so that the selection is shown.")
			]
			void	ScrollToSelection ();
 
 			[id (DISPID_Undo),
				helpstring ("Undo last user action (same as menu command undo). If CanRedo and MaxUndoLevel==1, same as Redo (). NB: unlike UI undo command - doesn't scrolltoselection afterwards.")
			]
			void Undo ();

			[id (DISPID_Redo),
				helpstring ("Redo last undone action (same as menu command redo). NB: unlike UI undo command - doesn't scrolltoselection afterwards.")
			]
			void Redo ();

			[id (DISPID_CommitUndo),
				helpstring ("Erases existing Undo/Redo history. Future user actions can still be undone.")
			]
			void CommitUndo ();

			[id (DISPID_LaunchFontSettingsDialog),
				helpstring ("Bring up the Font Settings Dialog.")
			]
			void LaunchFontSettingsDialog ();

			[id (DISPID_LaunchParagraphSettingsDialog),
				helpstring ("Bring up the Paragraph Settings Dialog.")
			]
			void LaunchParagraphSettingsDialog ();

			[id (DISPID_LaunchFindDialog),
				helpstring ("Bring up the Find Dialog, so the user can type in text and search. See also the 'Find' method")
			]
			void LaunchFindDialog ();

			[id (DISPID_Find),
				helpstring ("Search from the given position, using the given parameters. Return offset in text where specified string is found, or -1 if none. Doesn't change selection. See also the 'LaunchFindDialog' method")
			]
			long	Find ([in]long searchFrom, [in]VARIANT findText, [in,defaultvalue(TRUE)]BOOL wrapSearch, [in,defaultvalue(FALSE)]BOOL wholeWordSearch, [in,defaultvalue(FALSE)]BOOL caseSensativeSearch);
 
			[id (DISPID_LaunchReplaceDialog),
				helpstring ("Bring up the Find/Replace Dialog, so the user can type in text to match and replace. See also the 'FindReplace' method")
			]
			void LaunchReplaceDialog ();

			[id (DISPID_FindReplace),
				helpstring ("Search for the given 'findText' from the given offset, and replace with 'replaceWith'. Return offset of END of where replace text inserted, if successfull, or -1 if search text not found. See also the 'LaunchReplaceDialog' method")
			]
			long	FindReplace ([in]long searchFrom, [in]VARIANT findText, [in]VARIANT replaceWith, [in,defaultvalue(TRUE)]BOOL wrapSearch, [in,defaultvalue(FALSE)]BOOL wholeWordSearch, [in,defaultvalue(FALSE)]BOOL caseSensativeSearch);
 
			[id (DISPID_PrinterSetupDialog),
				helpstring ("Bring up the 'Printer Setup' dialog. This is the same as the 'Printer setup' command accessible from the context menu.")
			]
			void PrinterSetupDialog ();

			[id (DISPID_PrintDialog),
				helpstring ("Bring up the standard 'Print' dialog. This is the same as the 'Print' command accessible from the context menu.")
			]
			void PrintDialog ();

			[id (DISPID_PrintOnce),
				helpstring ("Print the current document once.")
			]
			void PrintOnce ();

 			[id (DISPID_GetHeight),
				helpstring ("Compute the height of the given document range (from to to). They default to the start and end of the document. Note this can be slow to compute for large documents.")
			]
			int GetHeight ([in,defaultvalue(-1)]INT from, [in,defaultvalue(-1)]INT to);

			[id (DISPID_GetDefaultContextMenu),
				helpstring ("returns a newly created modifyable copy of the default context menu.")
			]
			IDispatch*	GetDefaultContextMenu ();

			[id (DISPID_GetDefaultAcceleratorTable),
				helpstring ("returns a newly created modifyable copy of the default accelerator table.")
			]
			IDispatch*	GetDefaultAcceleratorTable ();

			[id (DISPID_MakeNewPopupMenuItem),
				helpstring ("returns a newly created, modifyable popup menu item. This is both an IALCommand and IALCommandList. So - it can be added to any menu item, and still itself contain sub-menu items. This is the same as creating an instance of PROGID 'ActiveLedIt.MenuItemPopup'.")
			]
			IDispatch*	MakeNewPopupMenuItem ();

			[id (DISPID_MakeNewUserMenuItem),
				helpstring ("returns a newly created, modifyable menu item supporting the IALUserCommand interface. This can be added to any menu (supporting IALUserCommandList - eg one from calling MakeNewPopupMenuItem or GetDefaultContextMenu). Works with Event callbacks or XXX property of IALUserCommand.")
			]
			IDispatch*	MakeNewUserMenuItem ();

			[id (DISPID_MakeNewAcceleratorElement),
				helpstring ("return an object supporting the IALAcceleratorElement interface.")
			]
			IDispatch*	MakeNewAcceleratorElement ();

			[id (DISPID_InvokeCommand),
				helpstring ("argument can be a string which is the 'InternalName' of a builtin command named (from BuiltinCommands property) - or any object supporting the IALCommand interface.")
			]
			void	InvokeCommand (VARIANT command);

			[id (DISPID_CommandEnabled),
				helpstring ("argument can be a string which is the 'InternalName' of a builtin command named (from BuiltinCommands property) - or any object supporting the IALCommand interface.")
			]
			bool	ComandEnabled (VARIANT command);

			[id (DISPID_CommandChecked),
				helpstring ("argument can be a string which is the 'InternalName' of a builtin command named (from BuiltinCommands property) - or any object supporting the IALCommand interface.")
			]
			bool	ComandChecked (VARIANT command);

			[id (DISPID_MakeNewToolbarList),
				helpstring ("return an object supporting the IALToolbarList interface.")
			]
			IDispatch*	MakeNewToolbarList ();

			[id (DISPID_MakeNewToolbar),
				helpstring ("return an object supporting the IALToolbar interface.")
			]
			IDispatch*	MakeNewToolbar ();

			[id (DISPID_MakeIconButtonToolbarItem),
				helpstring ("return an object supporting the IALIconButtonToolbarElement interface. (should take OPTIONAL param for IPicture and IALCommand (or intenralCMDNAME)")
			]
			IDispatch*	MakeIconButtonToolbarItem ();

			[id (DISPID_MakeSeparatorToolbarItem),
				helpstring ("return an object supporting the IALToolbarElement interface.")
			]
			IDispatch*	MakeSeparatorToolbarItem ();

			[id (DISPID_MakeBuiltinToolbar),
				helpstring ("MUST ENUM PREDEF NAMES AS CONSTANTS ABOVE.")
			]
			IDispatch*	MakeBuiltinToolbar ([in]BSTR builtinToolbarName);

			[id (DISPID_MakeBuiltinToolbarItem),
				helpstring ("MUST ENUM PREDEF NAMES AS CONSTANTS ABOVE.")
			]
			IDispatch*	MakeBuiltinToolbarItem ([in]BSTR builtinToolbarItemName);

			[hidden, id (DISPID_InvalidateLayout),
				helpstring ("PRIVATE - used to let toolbars notify OCX of need to change layout.")
			]
			void	InvalidateLayout ();
	};


	//  Event dispatch interface for ActiveLedItControl
	[ uuid (9A013A75-AD34-11D0-8D9B-00A0C9080C73),
	  helpstring ("Event interface for ActiveLedIt! Control") ]
	dispinterface _DActiveLedItEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			[id (DISPID_Change), helpstring ("Indicates that the contents of a control have changed.")]
			void Change ();
	
			[id (DISPID_CLICK), helpstring ("Occurs when the user presses and then releases a left mouse button over an object.")]
			void Click ();

			[id (DISPID_DBLCLICK), helpstring ("Occurs when the user presses and releases a left mouse button and then presses and releases it again over an object.")]
			void DblClick ();
	
			[id (DISPID_KEYDOWN), helpstring ("Occurs when the user presses a key while an object has the focus.")]
			void KeyDown (short* KeyCode,short Shift);

			[id (DISPID_KEYUP), helpstring ("Occurs when the user releases a key while an object has the focus.")]
			void KeyUp (short* KeyCode, short Shift);

			[id (DISPID_KEYPRESS), helpstring ("Occurs when the user presses and releases an ANSI key.")]
			void KeyPress (short* KeyAscii);

			[id (DISPID_MOUSEDOWN), helpstring ("Occurs when the user presses a mouse button (left or right).")]
			void MouseDown (short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);

			[id (DISPID_MOUSEMOVE), helpstring ("Occurs when the user moves the mouse.")]
			void MouseMove (short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);

			[id (DISPID_MOUSEUP), helpstring ("Occurs when the user presses and releases a mouse button (left or right).")]
			void MouseUp (short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);

			[id (DISPID_SelChange), helpstring ("Occurs when the current selection of text in the ActiveLedIt control has changed or the insertion point has moved.")]
			void SelChange ();

			[id (DISPID_UpdateUserCommand), helpstring ("TO BE DESCRIBED-callback before user comamdn to enable/disable - params in CurrentEventArguments")]
			void UpdateUserCommand ();

			[id (DISPID_UserCommand), helpstring ("TO BE DESCRIBED-callback from user command invoked... - params in CurrentEventArguments")]
			void UserCommand ();
	};






	[
		object,
		uuid(0C9C2C7F-BA8A-4654-9357-4DC09A9B6A32),
		dual,
		helpstring("Because the IE window.event object doesn't offer any way to pass along extra parameters, we are forced to store them in a global as part of the original control (CurrentEventParameters property)"),
		pointer_default(unique)
	]
	interface IALCurrentEventArguments : IDispatch {
		[propget, helpstring ("")]
		HRESULT InternalCommandName ([out, retval] BSTR* pVal);

		[propput, helpstring ("")]
		HRESULT InternalCommandName ([in] BSTR val);

		[propget, helpstring ("")]
		HRESULT Enabled ([out, retval] VARIANT_BOOL* pVal);

		[propput, helpstring ("")]
		HRESULT Enabled ([in] VARIANT_BOOL val);

		[propget, helpstring ("")]
		HRESULT Checked ([out, retval] VARIANT_BOOL* pVal);

		[propput, helpstring ("")]
		HRESULT Checked ([in] VARIANT_BOOL val);

		[propget, helpstring ("")]
		HRESULT Name ([out, retval] BSTR* pVal);

		[propput, helpstring ("")]
		HRESULT Name ([in] BSTR val);
	};




	/*
	 *	Predefined menu names for pre-defined (builtin) menus.
	 */
	const char*	kName_SelectMenu				=	"SelectMenu";
	const char*	kName_InsertMenu				=	"InsertMenu";
	const char*	kName_FontNameMenu				=	"FontNameMenu";
	const char*	kName_FontStyleMenu				=	"FontStyleMenu";
	const char*	kName_FontSizeMenu				=	"FontSizeMenu";
	const char*	kName_FontColorMenu				=	"FontColorMenu";
	const char*	kName_ParagraphJustification	=	"ParagraphJustificationMenu";
	const char*	kName_ListStyle					=	"ListStyleMenu";



	[
		object,
		uuid(E331D383-5BBA-401a-91EB-5D3538B16053),
		dual,
		helpstring("IALCommand Interface"),
		pointer_default(unique)
	]
	interface IALCommand : IDispatch {
		[propget, helpstring ("UI language dedependent name.")]
		HRESULT Name ([out, retval] BSTR* pVal);
		
		[propget, helpstring ("UI language independent name.")]
		HRESULT InternalName ([out, retval] BSTR* pVal);
		
		[helpstring ("")]
		HRESULT AppendSelfToMenu ([in]HMENU menu, [in]IDispatch* acceleratorTable);
	};



	[
		object,
		uuid(AE068DD2-681A-4582-891E-CC3CC6FFD266),
		dual,
		helpstring("IALUserCommand Interface  - MUST ADD EVENT INTERFACE FOR CALLBACK WHEN THESE COMMANDS HAPPEN? OR FOR ALL COMMANDS?"),
		pointer_default(unique)
	]
	interface IALUserCommand : IDispatch {
		[propget, helpstring ("UI language dedependent name.")]
		HRESULT Name ([out, retval] BSTR* pVal);

		[propput, helpstring ("UI language dedependent name.")]
		HRESULT Name ([in] BSTR val);

		[propget, helpstring ("UI language independent name.")]
		HRESULT InternalName ([out, retval] BSTR* pVal);

		[propput, helpstring ("UI language independent name.")]
		HRESULT InternalName ([in] BSTR val);

		[helpstring ("")]
		HRESULT AppendSelfToMenu ([in]HMENU menu, [in]IDispatch* acceleratorTable);
	};



	[
		object,
		uuid(AE36308E-681B-402b-AFB5-EC4737844073),
		dual,
		helpstring("IALCommandList Interface"),
		pointer_default(unique)
	]
	interface IALCommandList : IDispatch {
		[helpstring ("")]
		HRESULT GeneratePopupMenu ([in,defaultvalue(NULL)]IDispatch* acceleratorTable, [out, retval] HMENU* val);

		[helpstring ("recurses through subcommand lists (popup menus). Can also be used to retrieve popup menus (TYPE) using the right inernal popup menu name.")]
		HRESULT LookupCommand ([in]BSTR internalName, [out, retval] IDispatch** val);
		
		[helpstring ("Finds the index of the given command (either by name or dispatch) - returning 0xffffffff if not present.")]
		HRESULT IndexOf ([in]VARIANT internalNameOrObject, [out, retval] UINT* val);
		
		[id(DISPID_NEWENUM), propget]
		HRESULT	_NewEnum ([out, retval]IUnknown** ppUnk);

		[id(DISPID_VALUE), propget, helpstring ("index must be a numeric index")]
		HRESULT	Item ([in] long Index, [out, retval]IDispatch** pVal);

		[propget]
		HRESULT Count ([out, retval]long* pVal);
	};


	[
		object,
		uuid(61D26B79-200B-4ad7-81AE-F0CEA8D26B80),
		dual,
		helpstring("IALUserCommandList Interface"),
		pointer_default(unique)
	]
	interface IALUserCommandList : IALCommandList {
		[helpstring ("")]
		HRESULT Insert ([in]IDispatch* newElt, [in, defaultvalue(-1)]UINT afterElt);

		[helpstring ("arg can be either an element itself or an index ")]
		HRESULT Remove ([in]VARIANT eltOrIndex);
		
		[helpstring ("")]
		HRESULT Clear ();
	};



	typedef	enum	AcceleratorModifierFlag {
		eALT			=	0x10,			/*FALT*/
		eCONTROL		=	0x08,			/*FCONTROL*/
		eNOINVERT		=	0x02,			/*FNOINVERT*/
		eSHIFT			=	0x04,			/*FSHIFT*/
		eVIRTKEY		=	1				/*FVIRTKEY*/
	}	AcceleratorModifierFlag;

	[
		object,
		uuid(5B206739-2E76-455f-8C8B-FCA4C006F5C6),
		dual,
		helpstring("IALAcceleratorElement Interface"),
		pointer_default(unique)
	]
	interface IALAcceleratorElement : IDispatch {
		[propget, helpstring ("(from builtin cmd table - or from any user command internal name)")]
		HRESULT CommandInternalName ([out, retval] BSTR* pVal);
		
		[propput, helpstring ("")]
		HRESULT CommandInternalName ([in] BSTR val);

		[propget, helpstring ("")]
		HRESULT ModifierFlag ([out, retval] AcceleratorModifierFlag* pVal);
		
		[propput, helpstring ("")]
		HRESULT ModifierFlag ([in] AcceleratorModifierFlag val);

		[propget, helpstring ("")]
		HRESULT Key ([out, retval] WORD* pVal);
		
		[propput, helpstring ("")]
		HRESULT Key ([in] WORD val);
	};




	[
		object,
		uuid(7025E7F1-BE82-478a-8C63-E3D96C664F61),
		dual,
		helpstring("IALAcceleratorTable Interface - contains a list of elements supporting the IALAcceleratorElement interface."),
		pointer_default(unique)
	]
	interface IALAcceleratorTable : IDispatch {
		[id(DISPID_NEWENUM), propget]
		HRESULT	_NewEnum ([out, retval]IUnknown** ppUnk);

		[id(DISPID_VALUE), propget, helpstring ("index must be a numeric index")]
		HRESULT	Item ([in] long Index, [out, retval]IDispatch** pVal);

		[propget]
		HRESULT Count ([out, retval]long* pVal);

		[helpstring ("")]
		HRESULT Lookup ([in]BSTR cmdInternalName, [out, retval]IDispatch** pVal);

		[helpstring ("If there are conflicts - elts at the beginning take precedence")]
		HRESULT Add ([in]IDispatch* newElt, [in, defaultvalue(0xffffffff)]UINT atIndex);

		[helpstring ("arg can be either an element itself or an index ")]
		HRESULT Remove ([in]VARIANT eltOrIndex);
		
		[helpstring ("")]
		HRESULT Clear ();

		[helpstring ("")]
		HRESULT GenerateWin32AcceleratorTable ([out, retval]HACCEL* pVal);
	};




	[
		object,
		uuid(B59F22A3-1A5D-4187-A77C-E6AE4EB6D4C2),
		dual,
		helpstring("IALMenuItemPopup is conceptually a mixin of IALUserCommandList and IALUserCommand - but due to limitations of COMs interface and subclassing mechanisms - this must be accomplished by duplication - rather than direct statement."),
		pointer_default(unique)
	]
	interface IALMenuItemPopup : IALUserCommandList {
		[propget, helpstring ("UI language dedependent name.")]
		HRESULT Name ([out, retval] BSTR* pVal);

		[propput, helpstring ("UI language dedependent name.")]
		HRESULT Name ([in] BSTR val);
		
		[propget, helpstring ("UI language independent name.")]
		HRESULT InternalName ([out, retval] BSTR* pVal);

		[propput, helpstring ("UI language independent name.")]
		HRESULT InternalName ([in] BSTR val);
		
		[helpstring ("")]
		HRESULT AppendSelfToMenu ([in]HMENU menu, [in]IDispatch* acceleratorTable);
	};







	[
		object,
		uuid(CCE5DD27-2DC6-4468-8B4F-3935F01DAD8A),
		dual,
		helpstring(""),
		pointer_default(unique)
	]
	interface IALToolbarList : IDispatch {
		[id(DISPID_NEWENUM), propget]
		HRESULT	_NewEnum ([out, retval]IUnknown** ppUnk);

		[id(DISPID_VALUE), propget, helpstring ("index must be a numeric index")]
		HRESULT	Item ([in] long Index, [out, retval]IDispatch** pVal);

		[propget]
		HRESULT Count ([out, retval]UINT* pVal);

		[helpstring ("")]
		HRESULT Add ([in]IDispatch* newElt, [in, defaultvalue(0xffffffff)]UINT atIndex);

		[helpstring ("arg can be either an element itself or an index ")]
		HRESULT Remove ([in]VARIANT eltOrIndex);
		
		[helpstring ("")]
		HRESULT Clear ();

		[propget, id (DISPID_HWND),
			helpstring ("This read-only property returns the HWND associated with the toolbar.")
		]
		HRESULT hWnd ([out, retval]HWND* pVal);

		[propget, helpstring ("")]
		HRESULT PreferredHeight ([out, retval] UINT* pVal);

		[propget, helpstring ("")]
		HRESULT PreferredWidth ([out, retval] UINT* pVal);

		[helpstring ("Called by ActiveLedIt (owner) itself internally. Not meant to be called directly (maybe should mark hidden?).")]
		HRESULT NotifyOfOwningActiveLedIt ([in]IDispatch* owningActiveLedIt, [in]HWND owningHWND);

		[ helpstring ("X/Y pos relative to the HWND property of the ActiveLedIt control from NotifyOfOwningActiveLedIt")]
		HRESULT SetRectangle ([in]int X, [in]int Y, [in]UINT width, [in]UINT height);
	};






	[
		object,
		uuid(BABD9344-94F2-428a-BCD9-E6460EFAE549),
		dual,
		helpstring(""),
		pointer_default(unique)
	]
	interface IALToolbar : IDispatch {
		[id(DISPID_NEWENUM), propget]
		HRESULT	_NewEnum ([out, retval]IUnknown** ppUnk);

		[id(DISPID_VALUE), propget, helpstring ("index must be a numeric index")]
		HRESULT	Item ([in] long Index, [out, retval]IDispatch** pVal);

		[propget]
		HRESULT Count ([out, retval]long* pVal);

		[helpstring ("")]
		HRESULT Add ([in]IDispatch* newElt, [in, defaultvalue(0xffffffff)]UINT atIndex);

		[helpstring ("newElt must be of a type that supports IALToolbar, and then each ELEMENT of that list is inserted after afterElt (retining original list order)")]
		HRESULT MergeAdd ([in]IDispatch* newElts, [in, defaultvalue(-1)]UINT afterElt);

		[helpstring ("arg can be either an element itself or an index ")]
		HRESULT Remove ([in]VARIANT eltOrIndex);
		
		[helpstring ("")]
		HRESULT Clear ();

		[propget, id (DISPID_HWND),
			helpstring ("This read-only property returns the HWND associated with the toolbar.")
		]
		HRESULT hWnd ([out, retval]HWND* pVal);

		[propget, helpstring ("")]
		HRESULT PreferredHeight ([out, retval] UINT* pVal);

		[propget, helpstring ("")]
		HRESULT PreferredWidth ([out, retval] UINT* pVal);

		[helpstring ("Called by IALToolbarList itself internally. Not meant to be called directly (maybe should mark hidden?).")]
		HRESULT NotifyOfOwningActiveLedIt ([in]IDispatch* owningActiveLedIt, [in]IDispatch* owningALToolbar);

		[ helpstring ("X/Y pos relative to the HWND property of the IALToolbarList control from NotifyOfOwningActiveLedIt")]
		HRESULT SetRectangle ([in]int X, [in]int Y, [in]UINT width, [in]UINT height);
	};







	[
		object,
		uuid(EE7B636A-2150-442c-942B-9DDB7D211DE3),
		dual,
		helpstring(""),
		pointer_default(unique)
	]
	interface IALToolbarElement : IDispatch {
		[propget, helpstring ("")]
		HRESULT PreferredHeight ([out, retval] UINT* pVal);

		[propget, helpstring ("")]
		HRESULT PreferredWidth ([out, retval] UINT* pVal);

		[propget, helpstring ("")]
		HRESULT X ([out, retval] INT* pVal);

		[propget, helpstring ("")]
		HRESULT Y ([out, retval] INT* pVal);

		[propget, helpstring ("")]
		HRESULT Height ([out, retval] UINT* pVal);

		[propget, helpstring ("")]
		HRESULT Width ([out, retval] UINT* pVal);

		[ helpstring ("X/Y pos relative to the containing toolbar")]
		HRESULT SetRectangle ([in]int X, [in]int Y, [in]UINT width, [in]UINT height);

		[ helpstring ("Called by the Toolbar itself internally. Not meant to be called directly (maybe should mark hidden?). Used to 'realize/unrealize' object.")]
		HRESULT NotifyOfOwningToolbar ([in]IDispatch* owningToolbar, [in]IDispatch* owningActiveLedIt);

		[ helpstring ("")]
		HRESULT UpdateEnableState ();
	};



	typedef	enum	IconButtonStyle { eIconButton_PushButton, eIconButton_Popup, eIconButton_Toggle, eIconButton_Sticky	}	IconButtonStyle;

	[
		object,
		uuid(3DAD6846-D90F-4c80-9042-CD832E9D8F80),
		dual,
		helpstring(""),
		pointer_default(unique)
	]
	interface IALIconButtonToolbarElement : IALToolbarElement {
		[propget, helpstring ("image is an object supporting Bitmap is an OLE IPicture interface")]
		HRESULT ButtonImage ([out, retval] IDispatch** pVal);

		[propput, helpstring ("")]
		HRESULT ButtonImage ([in] IDispatch* val);


		[propget, helpstring ("Command is invoked when button is pressed. Command supports IALCommand interface, or its a string ('Internal' command name). OR - can be an COMMANDLIST (supproting IALCOMMANDLIST), in whcih case - button invokes popup menu with theirin contained commands.")]
		HRESULT Command ([out, retval] VARIANT* pVal);

		[propput, helpstring ("")]
		HRESULT Command ([in] VARIANT val);


		[propget, helpstring ("NOW uses IconButtonStyle- REDO DOCS - true iff acts as a 'checkbox' like button - and calls 'IsCommandChecked' on AL instance to see if shown ON or OFF.")]
		HRESULT ButtonStyle ([out, retval] IconButtonStyle* pVal);

		[propput, helpstring ("")]
		HRESULT ButtonStyle ([in] IconButtonStyle val);
	};




	[
		object,
		uuid(D9524CEF-B289-43b5-8B0D-54A2A1ED0FBD),
		dual,
		helpstring(""),
		pointer_default(unique)
	]
	interface IALComboBoxToolbarElement : IALToolbarElement {
		[propget, helpstring ("COMMANDLIST (supproting IALCOMMANDLIST), in whcih case - button invokes popup menu with theirin contained commands.")]
		HRESULT CommandList ([out, retval] IDispatch** pVal);

		[propput, helpstring ("")]
		HRESULT CommandList ([in] IDispatch* val);
	};







	//  Class information for ActiveLedItControl

	[ uuid (9A013A76-AD34-11D0-8D9B-00A0C9080C73),  helpstring ("ActiveLedIt! Control"), control ]
	coclass ActiveLedIt
	{
		[default] dispinterface _DActiveLedIt;
		[default, source] dispinterface _DActiveLedItEvents;
	};



	[ uuid (66A3AB41-6E80-4EA8-9D01-35206962E65E),  helpstring (""), control ]
	coclass ActiveLedIt_MenuItemPopup
	{
		[default] interface IALMenuItemPopup;
		interface IALCommandList;
		interface IALCommand;
	};

	[
		uuid(D277FC38-000E-4845-98C9-BC62E1C4650F),
		hidden,
		helpstring("For some reason - interface definitions don't appear to get generated in the typelib unless you declare define a co-class that uses them. Thats a problem if you want to generate the object internally.")
	]
	coclass BOGUS_TO_GET_INTERFACES_EXPORTED
	{
		interface	IALCommand;
		interface	IALUserCommand;
		interface	IALCommandList;
		interface	IALUserCommandList;
		interface	IALCurrentEventArguments;
		interface	IALAcceleratorTable;
		interface	IALAcceleratorElement;
		interface	IALMenuItemPopup;
		interface	IALToolbar;
		interface	IALToolbarList;
		interface	IALToolbarElement;
		interface	IALIconButtonToolbarElement;
		interface	IALComboBoxToolbarElement;
	};
};
