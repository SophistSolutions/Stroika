## NOTE: ThreadSanitizerSuppressions_qCompiler_SanitizerDoubleLockWithConditionVariables_Buggy.supp is the same as ThreadSanitizerSuppressions.supp with a few extras
## appended. Cannot see how to load multiple .supp files from TSAN_OPTIONS=
## and not sure we'll need this bug workaround file much longer??? --LGP 2022-02-15



#race:__interceptor_pipe #### NO LONGER SEEMS NEEDED - LGP 2023-10-03
#workaround http://stroika-bugs.sophists.com/browse/STK-673 - Seen on Ubuntu 23.04, and appears unrelated to my code
race:pipe


#workaround http://stroika-bugs.sophists.com/browse/STK-677 - sem_post() called from inside signal handler, and can spoil errno	- rare and only seen so far on Ubunt1804 but should affect anything
# REMOVED workaround when I added code that should eliminate the problem in SemWaitableEvent::Set(). Not sure tsan will see
# this as a fix, so must test quite a few times (this was hard to reproduce) -- LGP 2018-12-13
#
# re-added the signal suppression since I got the error again in TSAN on Ubuntu 1810:
#   WARNING: ThreadSanitizer: signal handler spoils errno (pid=25253)
#       #0 Stroika::Foundation::Execution::SignalHandlerRegistry::FirstPassSignalHandler_(int) /home/lewis/Sandbox/Stroika-Build-Dir-Ubuntu1810_x86_64/Library/Sources/Stroika/Foundation/Execution/SignalHandlers.cpp:497 (Test38+0xa545b6)
#       #1 __gnu_debug::_Safe_sequence_base::_M_detach(__gnu_debug::_Safe_iterator_base*) <null> (Test38+0xe63a3b)
#       #2 __gnu_debug::_Safe_iterator<std::_Rb_tree_const_iterator<std::thread::id>, std::__debug::multiset<std::thread::id, std::less<std::thread::id>, std::allocator<std::thread::id> > >::~_Safe_iterator() /usr/include/c++/8/debug/safe_iterator.h:86 (Test38+0xa36d80)
#       #3 Stroika::Foundation::Debug::AssertExternallySynchronizedMutex::unlock_shared_() const /home/lewis/Sandbox/Stroika-Build-Dir-Ubuntu1810_x86_64/Library/Sources/Stroika/Foundation/Debug/AssertExternallySynchronizedMutex.cpp:82 (Test38+0xa35c99)
#       #4 Stroika::Foundation::Debug::AssertExternallySynchronizedMutex::unlock_shared() const ../Characters/../Containers/../Traversal/../Debug/AssertExternallySynchronizedMutex.inl:88 (Test38+0x8554a0)
# not 100% clear this is right thing, but FirstPassSignalHandler_ does indirect call sem_post which could spoil though I wrote code to unspoil iterators
# may not look that way to tsan -- LGP 2018-02-13
#
# NOTE - I see this very rarely, but did see again on Ununtu 1904 - 2019-10-03 regtest. So this suppression doesn't work.
#
# SINCE NOT WORKING - COMMENT OUT AND LATER REMOVE ENTIRELY - LGP 2019-11-23
# see jira ticket for how I handled instead
#signal:Stroika::Foundation::Execution::SignalHandlerRegistry::FirstPassSignalHandler_(int)
#
# SAW TWICE in one week, but always on ubuntu 1910, so trying to re-enable to see if that
# supresses on ubuntu 1910
signal:Stroika::Foundation::Execution::SignalHandlerRegistry::FirstPassSignalHandler_(int)


#http://stroika-bugs.sophists.com/browse/STK-647 - possible deadlock/bug detected by tsan (debug iterators and FirstPassSignalHandler_
#since hard to reproduce hard to write/test supressions - want to match on BOTH FirstPassSignalHandler_ AND AssertExternallySynchronizedMutex (in one stacktrace)
#NB: This is ONLY needed on DEBUG builds

# tried this suppression and got the error again. TRY NEW SUPPRESSION STRING
#deadlock:FirstPassSignalHandler_*AssertExternallySynchronizedMutex

# Ideally, we would match on having ONE of these in one stack, and the other in the other stack, but could come in either order
deadlock:Stroika::Foundation::Debug::AssertExternallySynchronizedMutex::AssertExternallySynchronizedMutex
deadlock:Stroika::Foundation::Execution::SignalHandlerRegistry::FirstPassSignalHandler_

#WARNING: ThreadSanitizer: unlock of an unlocked mutex (or by a wrong thread) (pid=392243)
#    #0 pthread_mutex_unlock <null> (Test40+0xaf4abe)
#    #1 __gthread_mutex_unlock /usr/include/x86_64-linux-gnu/c++/12/bits/gthr-default.h:779 (Test40+0xb95e12)
#    #2 __gthread_recursive_mutex_unlock /usr/include/x86_64-linux-gnu/c++/12/bits/gthr-default.h:832 (Test40+0xb95e82)
#    #3 std::recursive_timed_mutex::unlock() <null> (Test40+0xbdb585)
#    #4 std::unique_lock<std::recursive_timed_mutex>::unlock() <null> (Test40+0xc223b1)
#    #5 std::unique_lock<std::recursive_timed_mutex>::~unique_lock() <null> (Test40+0xc0c21e)
#
#       I looked closely - Oct 3 2023 on Ubuntu 23.04 - and this appears a bogus tsan report, only affecting if you do timed locks.
#mutex:__gthread_recursive_mutex_unlock
#   Seen with RELEASE builds (only?), Ubuntu 23.10, and like above an issue with timed locks
#    #0 pthread_mutex_unlock <null> (Test40+0x3429af) (BuildId: 0e9fdb4e3e3d0f9b3285f641780af737de7a5122)
#    #1 __gthread_mutex_unlock /usr/include/x86_64-linux-gnu/c++/13/bits/gthr-default.h:779 (Test40+0x3feb40) (BuildId: 0e9fdb4e3e3d0f9b3285f641780af737de7a5122)
#    #2 std::recursive_timed_mutex::unlock() /usr/include/c++/13/mutex:359 (Test40+0x3feb40)
#    #3 std::unique_lock<std::recursive_timed_mutex>::unlock() /usr/include/c++/13/bits/unique_lock.h:200 (Test40+0x3feb40)
#    #4 std::unique_lock<std::recursive_timed_mutex>::~unique_lock() /usr/include/c++/13/bits/unique_lock.h:106 (Test40+0x3feb40)
#    #5 Stroika::Foundation::Execution::Synchronized<int, Stroika::Foundation::Execution::Synchronized_Traits<std::recursive_timed_mutex> >::ReadableReference::~ReadableReference() /home/lewis/Sandbox/Stroika-Build-Dir-Ubuntu2310_x86_64/Library/Sources/Stroika/Foundation/Characters/../Execution/Synchronized.inl:432 (Test40+0x3feb40)
#    #6 RegressionTest23_SycnhonizedWithTimeout_ /home/lewis/Sandbox/Stroika-Build-Dir-Ubuntu2310_x86_64/Tests/40/Test.cpp:1253 (Test40+0x411d66) (BuildId: 0e9fdb4e3e3d0f9b3285f641780af737de7a5122)
#    #7 DoRegressionTests_ /home/lewis/Sandbox/Stroika-Build-Dir-Ubuntu2310_x86_64/Tests/40/Test.cpp:1412 (Test40+0x30cb9d) (BuildId: 0e9fdb4e3e3d0f9b3285f641780af737de7a5122)
#    #8 Stroika::TestHarness::PrintPassOrFail(void (*)()) ../TestHarness/TestHarness.cpp:91 (Test40+0x30cb9d)
#    #9 main /home/lewis/Sandbox/Stroika-Build-Dir-Ubuntu2310_x86_64/Tests/40/Test.cpp:1421 (Test40+0x30cb9d)
#mutex:__gthread_mutex_unlock
mutex:std::recursive_timed_mutex::unlock()

# This is a REAL RACE, but on purpose, to avoid recursive locks and deadlocks in DBGTRACE calls.
# Should be VERY rarely used (right now just in ToString() for thread rep).
#       -- LGP 2023-10-19
race:Stroika::Foundation::Execution::WaitableEvent::PeekIsSet() const 