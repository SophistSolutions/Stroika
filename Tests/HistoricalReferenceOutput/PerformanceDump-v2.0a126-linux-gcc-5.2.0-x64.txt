Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 2/15/16 11:17:04]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.1692 secs, and comparison 4.08075 sec, and warnIfPerfScore > 0.5, and perfScore=0.789434]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.02308 secs, and comparison 2.74761 sec, and warnIfPerfScore > 0.35, and perfScore=0.546997]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.92701 secs, and comparison 7.92186 sec, and warnIfPerfScore > 0.89, and perfScore=0.99935]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.68652 secs, and comparison 7.74059 sec, and warnIfPerfScore > 1.15, and perfScore=1.00703]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.65659 secs, and comparison 2.73215 sec, and warnIfPerfScore > 0.5, and perfScore=0.483003]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.06129 secs, and comparison 4.39257 sec, and warnIfPerfScore > 0.68, and perfScore=0.622064]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.97738 secs, and comparison 23.5743 sec, and warnIfPerfScore > 4.3, and perfScore=2.62597]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.92098 secs, and comparison 24.7082 sec, and warnIfPerfScore > 4, and perfScore=2.4905]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 8.26391 secs, and comparison 70.973 sec, and warnIfPerfScore > 9.1, and perfScore=8.5883]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 14.7124 secs, and comparison 12.4707 sec, and warnIfPerfScore > 2.45, and perfScore=0.847629]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.77088 secs, and comparison 5.36022 sec, and warnIfPerfScore > 1.65, and perfScore=0.928839]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.41043 secs, and comparison 16.1454 sec, and warnIfPerfScore > 2.7, and perfScore=2.51861]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 6.91404 secs, and comparison 32.4178 sec, and warnIfPerfScore > 3, and perfScore=4.6887]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.92291 secs, and comparison 2.1621 sec, and warnIfPerfScore > 0.14, and perfScore=0.312311]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.70475 secs, and comparison 6.74989 sec, and warnIfPerfScore > 1.25, and perfScore=1.18321]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.65252 secs, and comparison 30.966 sec, and warnIfPerfScore > 7.7, and perfScore=3.57884]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.3496 secs, and comparison 4.23151 sec, and warnIfPerfScore > 1.55, and perfScore=0.342644]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.68597 secs, and comparison 30.3409 sec, and warnIfPerfScore > 7.7, and perfScore=3.49309]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.4727 secs, and comparison 4.24866 sec, and warnIfPerfScore > 1.4, and perfScore=0.340638]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 6.09784 secs, and comparison 54.2485 sec, and warnIfPerfScore > 7.9, and perfScore=8.89635]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 11.6217 secs, and comparison 5.96671 sec, and warnIfPerfScore > 0.8, and perfScore=0.51341]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2377 secs, and comparison 12.6533 sec, and warnIfPerfScore > 1.6, and perfScore=1.03397]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 18.9969 secs, and comparison 2.87182 sec, and warnIfPerfScore > 0.32, and perfScore=0.151173]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 15 secs, and comparison 1.33087 sec, and warnIfPerfScore > 0.4, and perfScore=0.0887247]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.46982 sec, and warnIfPerfScore > 1.1, and perfScore=0.231321]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 40 seconds]]]

