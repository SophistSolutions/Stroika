Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/18/16 9:22:19]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.34113 secs, and comparison 4.35411 sec, and warnIfPerfScore > 0.58, and perfScore=0.815204]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.32444 secs, and comparison 2.37882 sec, and warnIfPerfScore > 0.42, and perfScore=0.446774]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.06068 secs, and comparison 8.18205 sec, and warnIfPerfScore > 0.9, and perfScore=1.01506]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.03091 secs, and comparison 7.86351 sec, and warnIfPerfScore > 1.15, and perfScore=0.979156]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.70889 secs, and comparison 2.77167 sec, and warnIfPerfScore > 0.5, and perfScore=0.4855]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.23602 secs, and comparison 4.28039 sec, and warnIfPerfScore > 0.68, and perfScore=0.59154]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.70212 secs, and comparison 23.1832 sec, and warnIfPerfScore > 4.3, and perfScore=2.38949]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.3181 secs, and comparison 24.9293 sec, and warnIfPerfScore > 4, and perfScore=2.41607]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 8.25317 secs, and comparison 73.8858 sec, and warnIfPerfScore > 9.1, and perfScore=8.95242]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 15.7 secs, and comparison 13.3981 sec, and warnIfPerfScore > 3.2, and perfScore=0.853386]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 6.02609 secs, and comparison 5.64569 sec, and warnIfPerfScore > 1.7, and perfScore=0.936874]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.57719 secs, and comparison 18.575 sec, and warnIfPerfScore > 2.7, and perfScore=2.82415]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 6.75391 secs, and comparison 24.7185 sec, and warnIfPerfScore > 3, and perfScore=3.65988]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.66335 secs, and comparison 2.30191 sec, and warnIfPerfScore > 0.22, and perfScore=0.345457]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.82262 secs, and comparison 6.64215 sec, and warnIfPerfScore > 1.25, and perfScore=1.14075]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.67481 secs, and comparison 30.7575 sec, and warnIfPerfScore > 7.7, and perfScore=3.5456]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.19335 secs, and comparison 3.32528 sec, and warnIfPerfScore > 1.55, and perfScore=0.462271]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.47221 secs, and comparison 31.4198 sec, and warnIfPerfScore > 7.7, and perfScore=3.70857]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.43841 secs, and comparison 3.45763 sec, and warnIfPerfScore > 1.4, and perfScore=0.464835]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 6.3329 secs, and comparison 58.09 sec, and warnIfPerfScore > 7.9, and perfScore=9.17273]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 7.13652 secs, and comparison 5.50791 sec, and warnIfPerfScore > 0.8, and perfScore=0.771792]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9098 secs, and comparison 12.6332 sec, and warnIfPerfScore > 1.7, and perfScore=1.06074]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 16.5404 secs, and comparison 2.80627 sec, and warnIfPerfScore > 0.42, and perfScore=0.169662]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 15 secs, and comparison 1.28988 sec, and warnIfPerfScore > 0.4, and perfScore=0.0859919]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.22438 sec, and warnIfPerfScore > 1.1, and perfScore=0.214959]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 31 seconds]]]

