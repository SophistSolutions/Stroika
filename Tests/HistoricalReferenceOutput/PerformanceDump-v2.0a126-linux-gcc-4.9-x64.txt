Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 2/15/16 10:42:47]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.55225 secs, and comparison 4.08261 sec, and warnIfPerfScore > 0.5, and perfScore=0.896833]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 4.56789 secs, and comparison 2.50595 sec, and warnIfPerfScore > 0.35, and perfScore=0.548601]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.94052 secs, and comparison 7.96334 sec, and warnIfPerfScore > 0.89, and perfScore=1.00287]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.49242 secs, and comparison 8.2275 sec, and warnIfPerfScore > 1.15, and perfScore=0.968806]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.29794 secs, and comparison 2.74008 sec, and warnIfPerfScore > 0.5, and perfScore=1.1924]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 2.91212 secs, and comparison 4.36555 sec, and warnIfPerfScore > 0.68, and perfScore=1.4991]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.0947 secs, and comparison 25.8474 sec, and warnIfPerfScore > 4.3, and perfScore=2.5605]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.5851 secs, and comparison 26.289 sec, and warnIfPerfScore > 4, and perfScore=2.48359]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 8.96689 secs, and comparison 73.4211 sec, and warnIfPerfScore > 9.1, and perfScore=8.18803]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.6945 secs, and comparison 13.5723 sec, and warnIfPerfScore > 2.45, and perfScore=1.26909]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 6.29773 secs, and comparison 5.41717 sec, and warnIfPerfScore > 1.65, and perfScore=0.860178]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.50639 secs, and comparison 16.8646 sec, and warnIfPerfScore > 2.7, and perfScore=1.77403]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 6.27277 secs, and comparison 24.1891 sec, and warnIfPerfScore > 3, and perfScore=3.85621]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.3354 secs, and comparison 2.07814 sec, and warnIfPerfScore > 0.14, and perfScore=0.32802]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.64354 secs, and comparison 6.67021 sec, and warnIfPerfScore > 1.25, and perfScore=1.18192]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 7.28673 secs, and comparison 32.6182 sec, and warnIfPerfScore > 7.7, and perfScore=4.47638]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 4.89912 secs, and comparison 2.96533 sec, and warnIfPerfScore > 1.55, and perfScore=0.605279]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 7.06523 secs, and comparison 31.3128 sec, and warnIfPerfScore > 7.7, and perfScore=4.43196]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 4.89701 secs, and comparison 2.93731 sec, and warnIfPerfScore > 1.4, and perfScore=0.599818]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 6.08665 secs, and comparison 62.3737 sec, and warnIfPerfScore > 7.9, and perfScore=10.2476]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.54221 secs, and comparison 5.83147 sec, and warnIfPerfScore > 0.8, and perfScore=1.28384]
	                 	Collection<string> is ***SLOWER***

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.5341 secs, and comparison 12.4635 sec, and warnIfPerfScore > 1.6, and perfScore=0.99437]
	                 	String Characters::Format is FASTER

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.3566 secs, and comparison 3.11139 sec, and warnIfPerfScore > 0.32, and perfScore=0.332534]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.50265 sec, and warnIfPerfScore > 0.4, and perfScore=0.100176]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.63568 sec, and warnIfPerfScore > 1.1, and perfScore=0.175712]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 5 seconds]]]

