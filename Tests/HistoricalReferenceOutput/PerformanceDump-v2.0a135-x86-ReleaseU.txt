Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/21/16 23:48:57]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.9606 secs, and comparison 6.87762 sec, and warnIfPerfScore > 0.5, and perfScore=0.459715]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.9389 secs, and comparison 4.52905 sec, and warnIfPerfScore > 0.35, and perfScore=0.303171]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 15.5502 secs, and comparison 12.5828 sec, and warnIfPerfScore > 0.9, and perfScore=0.809174]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.0703 secs, and comparison 14.829 sec, and warnIfPerfScore > 1.15, and perfScore=0.983988]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 17.2947 secs, and comparison 3.73927 sec, and warnIfPerfScore > 0.5, and perfScore=0.216208]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.2279 secs, and comparison 4.82723 sec, and warnIfPerfScore > 0.68, and perfScore=0.17729]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 17.4675 secs, and comparison 44.1837 sec, and warnIfPerfScore > 4.3, and perfScore=2.52949]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 17.5542 secs, and comparison 44.6907 sec, and warnIfPerfScore > 4, and perfScore=2.54588]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 15.8909 secs, and comparison 109.21 sec, and warnIfPerfScore > 9.1, and perfScore=6.87247]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.8811 secs, and comparison 24.4878 sec, and warnIfPerfScore > 2.45, and perfScore=1.54194]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.748 secs, and comparison 14.8146 sec, and warnIfPerfScore > 1.65, and perfScore=1.00452]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.663 secs, and comparison 31.0279 sec, and warnIfPerfScore > 2.7, and perfScore=1.98097]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.6579 secs, and comparison 42.9117 sec, and warnIfPerfScore > 3, and perfScore=2.74058]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.9031 secs, and comparison 1.75546 sec, and warnIfPerfScore > 0.14, and perfScore=0.110385]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.8456 secs, and comparison 16.771 sec, and warnIfPerfScore > 1.25, and perfScore=1.12969]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 16.0043 secs, and comparison 36.9402 sec, and warnIfPerfScore > 7.7, and perfScore=2.30814]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.1299 secs, and comparison 4.93157 sec, and warnIfPerfScore > 1.55, and perfScore=0.325948]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.6905 secs, and comparison 36.3618 sec, and warnIfPerfScore > 7.7, and perfScore=2.31743]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.3394 secs, and comparison 4.99704 sec, and warnIfPerfScore > 1.4, and perfScore=0.325764]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.2479 secs, and comparison 61.5703 sec, and warnIfPerfScore > 7.9, and perfScore=4.03795]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.8536 secs, and comparison 7.0243 sec, and warnIfPerfScore > 0.8, and perfScore=0.4729]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.533 secs, and comparison 19.5827 sec, and warnIfPerfScore > 1.7, and perfScore=1.26072]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.6176 secs, and comparison 4.28839 sec, and warnIfPerfScore > 0.35, and perfScore=0.274587]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.29201 sec, and warnIfPerfScore > 0.4, and perfScore=0.152801]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.05315 sec, and warnIfPerfScore > 1.1, and perfScore=0.336877]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.8996 secs, and comparison 22.8741 sec, and warnIfPerfScore > 2.4, and perfScore=1.53522]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.7423 secs, and comparison 27.606 sec, and warnIfPerfScore > 2.8, and perfScore=1.64888]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 54 seconds]]]

