Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/13/16 13:51:27]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.15896 secs, and comparison 4.13551 sec, and warnIfPerfScore > 0.5, and perfScore=0.801618]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.208 secs, and comparison 2.35524 sec, and warnIfPerfScore > 0.35, and perfScore=0.452234]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.82036 secs, and comparison 7.83849 sec, and warnIfPerfScore > 0.89, and perfScore=1.00232]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.73265 secs, and comparison 7.49802 sec, and warnIfPerfScore > 1.15, and perfScore=0.969657]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.66301 secs, and comparison 2.6819 sec, and warnIfPerfScore > 0.5, and perfScore=0.473582]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.03519 secs, and comparison 4.272 sec, and warnIfPerfScore > 0.68, and perfScore=0.607234]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.99348 secs, and comparison 23.1209 sec, and warnIfPerfScore > 4.3, and perfScore=2.57085]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.96551 secs, and comparison 23.224 sec, and warnIfPerfScore > 4, and perfScore=2.33044]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 8.10681 secs, and comparison 67.7036 sec, and warnIfPerfScore > 9.1, and perfScore=8.35145]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 14.8309 secs, and comparison 12.1451 sec, and warnIfPerfScore > 2.45, and perfScore=0.818905]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.66023 secs, and comparison 5.20174 sec, and warnIfPerfScore > 1.65, and perfScore=0.918998]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 6.70841 secs, and comparison 15.9349 sec, and warnIfPerfScore > 2.7, and perfScore=2.37535]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 6.46029 secs, and comparison 23.7685 sec, and warnIfPerfScore > 3, and perfScore=3.67917]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.56317 secs, and comparison 1.9998 sec, and warnIfPerfScore > 0.14, and perfScore=0.3047]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.45884 secs, and comparison 6.5351 sec, and warnIfPerfScore > 1.25, and perfScore=1.19716]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.50802 secs, and comparison 29.9389 sec, and warnIfPerfScore > 7.7, and perfScore=3.5189]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.1233 secs, and comparison 4.11769 sec, and warnIfPerfScore > 1.55, and perfScore=0.339651]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.42411 secs, and comparison 29.6134 sec, and warnIfPerfScore > 7.7, and perfScore=3.51532]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.2632 secs, and comparison 4.14988 sec, and warnIfPerfScore > 1.4, and perfScore=0.3384]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 6.08951 secs, and comparison 53.2603 sec, and warnIfPerfScore > 7.9, and perfScore=8.74623]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 11.2031 secs, and comparison 5.57446 sec, and warnIfPerfScore > 0.8, and perfScore=0.497583]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5275 secs, and comparison 12.1278 sec, and warnIfPerfScore > 1.6, and perfScore=1.05208]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15.0615 secs, and comparison 2.89637 sec, and warnIfPerfScore > 0.32, and perfScore=0.192303]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 15 secs, and comparison 1.3116 sec, and warnIfPerfScore > 0.4, and perfScore=0.0874403]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.33576 sec, and warnIfPerfScore > 1.1, and perfScore=0.222384]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 14 seconds]]]

