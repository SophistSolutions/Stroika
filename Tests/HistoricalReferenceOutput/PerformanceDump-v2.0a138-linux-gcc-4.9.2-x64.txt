Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/3/16 16:42:19]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.61869 secs, and comparison 4.11115 sec, and warnIfPerfScore > 0.58, and perfScore=0.890111]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 4.60565 secs, and comparison 2.53899 sec, and warnIfPerfScore > 0.42, and perfScore=0.551278]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.0077 secs, and comparison 9.51648 sec, and warnIfPerfScore > 0.9, and perfScore=1.18842]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.54902 secs, and comparison 8.22328 sec, and warnIfPerfScore > 1.15, and perfScore=0.961897]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.36796 secs, and comparison 2.72641 sec, and warnIfPerfScore > 0.5, and perfScore=1.15137]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 2.97651 secs, and comparison 4.46026 sec, and warnIfPerfScore > 0.68, and perfScore=1.49849]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.97956 secs, and comparison 25.6237 sec, and warnIfPerfScore > 4.3, and perfScore=2.56762]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.8849 secs, and comparison 26.687 sec, and warnIfPerfScore > 4, and perfScore=2.45175]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 8.67837 secs, and comparison 73.2187 sec, and warnIfPerfScore > 9.1, and perfScore=8.43692]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.8043 secs, and comparison 13.3329 sec, and warnIfPerfScore > 2.5, and perfScore=1.1295]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.90077 secs, and comparison 5.3747 sec, and warnIfPerfScore > 1.7, and perfScore=0.910847]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.19788 secs, and comparison 17.4443 sec, and warnIfPerfScore > 2.7, and perfScore=1.89656]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 6.43285 secs, and comparison 24.437 sec, and warnIfPerfScore > 3, and perfScore=3.79878]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.51972 secs, and comparison 2.05599 sec, and warnIfPerfScore > 0.18, and perfScore=0.315349]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.57521 secs, and comparison 6.74787 sec, and warnIfPerfScore > 1.25, and perfScore=1.21034]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 6.99906 secs, and comparison 32.8531 sec, and warnIfPerfScore > 7.7, and perfScore=4.69393]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 5.02641 secs, and comparison 3.80942 sec, and warnIfPerfScore > 1.55, and perfScore=0.757881]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 7.01918 secs, and comparison 32.8694 sec, and warnIfPerfScore > 7.7, and perfScore=4.6828]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 4.99407 secs, and comparison 3.73399 sec, and warnIfPerfScore > 1.4, and perfScore=0.747686]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.8
	DETAILS:         	[baseline test 6.20793 secs, and comparison 61.0904 sec, and warnIfPerfScore > 7.9, and perfScore=9.8407]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.50541 secs, and comparison 5.67467 sec, and warnIfPerfScore > 0.8, and perfScore=1.25952]
	                 	Collection<string> is ***SLOWER***

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9164 secs, and comparison 12.2477 sec, and warnIfPerfScore > 1.7, and perfScore=1.0278]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.74411 secs, and comparison 3.48777 sec, and warnIfPerfScore > 0.36, and perfScore=0.398871]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43461 sec, and warnIfPerfScore > 0.4, and perfScore=0.0956405]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.51877 sec, and warnIfPerfScore > 1.1, and perfScore=0.167918]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 8 seconds]]]

