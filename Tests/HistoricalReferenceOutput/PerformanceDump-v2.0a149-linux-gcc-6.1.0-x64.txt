Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/11/16 21:37:27]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.45181 secs, and comparison 5.13358 sec, and warnIfPerfScore > 0.6, and perfScore=0.79568]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.57094 secs, and comparison 2.9429 sec, and warnIfPerfScore > 0.42, and perfScore=0.447867]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.81971 secs, and comparison 9.9206 sec, and warnIfPerfScore > 0.97, and perfScore=1.01027]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.45069 secs, and comparison 9.67691 sec, and warnIfPerfScore > 1.15, and perfScore=1.02394]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.22551 secs, and comparison 3.45026 sec, and warnIfPerfScore > 0.5, and perfScore=0.477511]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.17332 secs, and comparison 5.73768 sec, and warnIfPerfScore > 0.68, and perfScore=0.625475]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 11.2324 secs, and comparison 33.3378 sec, and warnIfPerfScore > 4.3, and perfScore=2.96801]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.17782 secs, and comparison 34.1261 sec, and warnIfPerfScore > 4, and perfScore=3.71832]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 8.19683 secs, and comparison 104.683 sec, and warnIfPerfScore > 9.1, and perfScore=12.7711]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.5525 secs, and comparison 18.8845 sec, and warnIfPerfScore > 3.2, and perfScore=1.63467]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.62835 secs, and comparison 5.50116 sec, and warnIfPerfScore > 1.7, and perfScore=0.977402]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.53104 secs, and comparison 23.7734 sec, and warnIfPerfScore > 2.8, and perfScore=3.64006]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 6.71576 secs, and comparison 25.4024 sec, and warnIfPerfScore > 3, and perfScore=3.7825]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.90253 secs, and comparison 2.79143 sec, and warnIfPerfScore > 0.22, and perfScore=0.404406]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.02393 secs, and comparison 6.36597 sec, and warnIfPerfScore > 1.25, and perfScore=1.05678]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.30524 secs, and comparison 33.2093 sec, and warnIfPerfScore > 7.7, and perfScore=3.56888]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.11644 secs, and comparison 3.64583 sec, and warnIfPerfScore > 1.55, and perfScore=0.449191]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.01591 secs, and comparison 38.4016 sec, and warnIfPerfScore > 7.7, and perfScore=4.25931]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.31889 secs, and comparison 4.24375 sec, and warnIfPerfScore > 1.4, and perfScore=0.455392]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 7.3305 secs, and comparison 67.8345 sec, and warnIfPerfScore > 7.9, and perfScore=9.25373]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.20814 secs, and comparison 5.47607 sec, and warnIfPerfScore > 0.8, and perfScore=0.759707]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1634 secs, and comparison 14.1054 sec, and warnIfPerfScore > 1.7, and perfScore=1.15965]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 16.2225 secs, and comparison 3.90396 sec, and warnIfPerfScore > 0.47, and perfScore=0.240652]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 15 secs, and comparison 1.34338 sec, and warnIfPerfScore > 0.4, and perfScore=0.0895585]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.14282 sec, and warnIfPerfScore > 1.1, and perfScore=0.209521]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 4 seconds]]]

