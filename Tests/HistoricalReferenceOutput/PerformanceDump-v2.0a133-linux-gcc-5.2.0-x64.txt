Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/13/16 21:12:29]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.31003 secs, and comparison 4.14606 sec, and warnIfPerfScore > 0.5, and perfScore=0.780797]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.25237 secs, and comparison 2.37127 sec, and warnIfPerfScore > 0.35, and perfScore=0.451467]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.91936 secs, and comparison 7.87913 sec, and warnIfPerfScore > 0.89, and perfScore=0.99492]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.67619 secs, and comparison 7.72231 sec, and warnIfPerfScore > 1.15, and perfScore=1.00601]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.49683 secs, and comparison 2.62881 sec, and warnIfPerfScore > 0.5, and perfScore=0.47824]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.12477 secs, and comparison 4.29928 sec, and warnIfPerfScore > 0.68, and perfScore=0.603427]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.18344 secs, and comparison 22.9399 sec, and warnIfPerfScore > 4.3, and perfScore=2.49796]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.84231 secs, and comparison 23.4664 sec, and warnIfPerfScore > 4, and perfScore=2.38423]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 8.04952 secs, and comparison 67.2721 sec, and warnIfPerfScore > 9.1, and perfScore=8.35728]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 14.9532 secs, and comparison 12.28 sec, and warnIfPerfScore > 2.45, and perfScore=0.821232]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.68112 secs, and comparison 5.27556 sec, and warnIfPerfScore > 1.65, and perfScore=0.928613]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 6.83864 secs, and comparison 16.0259 sec, and warnIfPerfScore > 2.7, and perfScore=2.34343]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 6.1768 secs, and comparison 23.6365 sec, and warnIfPerfScore > 3, and perfScore=3.82666]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.39248 secs, and comparison 2.07143 sec, and warnIfPerfScore > 0.14, and perfScore=0.324041]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.54806 secs, and comparison 6.65189 sec, and warnIfPerfScore > 1.25, and perfScore=1.19896]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.44284 secs, and comparison 29.4209 sec, and warnIfPerfScore > 7.7, and perfScore=3.48471]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.9213 secs, and comparison 4.05784 sec, and warnIfPerfScore > 1.55, and perfScore=0.340387]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.24531 secs, and comparison 29.0969 sec, and warnIfPerfScore > 7.7, and perfScore=3.5289]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.0513 secs, and comparison 4.08414 sec, and warnIfPerfScore > 1.4, and perfScore=0.338895]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 5.84704 secs, and comparison 52.4167 sec, and warnIfPerfScore > 7.9, and perfScore=8.96465]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.0872 secs, and comparison 5.47872 sec, and warnIfPerfScore > 0.8, and perfScore=0.494148]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.4834 secs, and comparison 12.1428 sec, and warnIfPerfScore > 1.6, and perfScore=1.05743]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15.0156 secs, and comparison 2.87016 sec, and warnIfPerfScore > 0.32, and perfScore=0.191146]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 15 secs, and comparison 1.26755 sec, and warnIfPerfScore > 0.4, and perfScore=0.0845035]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.39056 sec, and warnIfPerfScore > 1.1, and perfScore=0.226038]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 11 seconds]]]

