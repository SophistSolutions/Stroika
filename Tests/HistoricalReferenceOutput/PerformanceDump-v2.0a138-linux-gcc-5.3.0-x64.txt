Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/3/16 22:50:21]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.18141 secs, and comparison 4.10905 sec, and warnIfPerfScore > 0.58, and perfScore=0.793036]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.24153 secs, and comparison 2.34444 sec, and warnIfPerfScore > 0.42, and perfScore=0.447281]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.9496 secs, and comparison 7.8998 sec, and warnIfPerfScore > 0.9, and perfScore=0.993736]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.68268 secs, and comparison 7.71457 sec, and warnIfPerfScore > 1.15, and perfScore=1.00415]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.67302 secs, and comparison 2.83693 sec, and warnIfPerfScore > 0.5, and perfScore=0.500074]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.16453 secs, and comparison 4.46148 sec, and warnIfPerfScore > 0.68, and perfScore=0.622718]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.43196 secs, and comparison 23.1544 sec, and warnIfPerfScore > 4.3, and perfScore=2.45489]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.3099 secs, and comparison 25.3012 sec, and warnIfPerfScore > 4, and perfScore=2.45406]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 7.87064 secs, and comparison 72.4021 sec, and warnIfPerfScore > 9.1, and perfScore=9.19901]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 15.8049 secs, and comparison 13.5405 sec, and warnIfPerfScore > 2.5, and perfScore=0.856724]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.06181 secs, and comparison 5.49903 sec, and warnIfPerfScore > 1.7, and perfScore=0.907161]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.52185 secs, and comparison 17.3477 sec, and warnIfPerfScore > 2.7, and perfScore=2.65994]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 6.57241 secs, and comparison 26.6803 sec, and warnIfPerfScore > 3, and perfScore=4.05944]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.50714 secs, and comparison 2.0839 sec, and warnIfPerfScore > 0.18, and perfScore=0.320248]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.55595 secs, and comparison 6.50812 sec, and warnIfPerfScore > 1.25, and perfScore=1.17138]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.70067 secs, and comparison 30.6725 sec, and warnIfPerfScore > 7.7, and perfScore=3.5253]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.1015 secs, and comparison 3.32985 sec, and warnIfPerfScore > 1.55, and perfScore=0.468894]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.47761 secs, and comparison 29.8014 sec, and warnIfPerfScore > 7.7, and perfScore=3.51531]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.15695 secs, and comparison 3.33379 sec, and warnIfPerfScore > 1.4, and perfScore=0.465812]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 6.01947 secs, and comparison 53.5366 sec, and warnIfPerfScore > 7.9, and perfScore=8.8939]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.96188 secs, and comparison 5.2406 sec, and warnIfPerfScore > 0.8, and perfScore=0.752756]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.7535 secs, and comparison 12.2525 sec, and warnIfPerfScore > 1.7, and perfScore=1.04245]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15.363 secs, and comparison 2.72482 sec, and warnIfPerfScore > 0.36, and perfScore=0.177363]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 15 secs, and comparison 1.33403 sec, and warnIfPerfScore > 0.4, and perfScore=0.0889354]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.17219 sec, and warnIfPerfScore > 1.1, and perfScore=0.211479]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 15 seconds]]]

