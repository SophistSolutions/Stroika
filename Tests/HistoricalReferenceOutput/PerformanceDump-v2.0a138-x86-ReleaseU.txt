Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/3/16 14:49:49]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.318 secs, and comparison 6.57194 sec, and warnIfPerfScore > 0.58, and perfScore=0.458999]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.2739 secs, and comparison 4.32196 sec, and warnIfPerfScore > 0.42, and perfScore=0.302788]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 14.8531 secs, and comparison 12.0402 sec, and warnIfPerfScore > 0.9, and perfScore=0.810619]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.4862 secs, and comparison 14.1927 sec, and warnIfPerfScore > 1.15, and perfScore=0.97974]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.496 secs, and comparison 3.56087 sec, and warnIfPerfScore > 0.5, and perfScore=0.215863]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 25.8005 secs, and comparison 4.63304 sec, and warnIfPerfScore > 0.68, and perfScore=0.179572]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.3255 secs, and comparison 41.9733 sec, and warnIfPerfScore > 4.3, and perfScore=2.57102]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.2676 secs, and comparison 42.5897 sec, and warnIfPerfScore > 4, and perfScore=2.61807]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 14.9976 secs, and comparison 104.378 sec, and warnIfPerfScore > 9.1, and perfScore=6.95965]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.9664 secs, and comparison 22.7366 sec, and warnIfPerfScore > 2.5, and perfScore=1.51918]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.0782 secs, and comparison 14.1077 sec, and warnIfPerfScore > 1.7, and perfScore=1.0021]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.111 secs, and comparison 29.6621 sec, and warnIfPerfScore > 2.7, and perfScore=1.96294]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.6123 secs, and comparison 40.7361 sec, and warnIfPerfScore > 3, and perfScore=2.78779]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 14.8373 secs, and comparison 1.65505 sec, and warnIfPerfScore > 0.18, and perfScore=0.111547]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.1031 secs, and comparison 16.1553 sec, and warnIfPerfScore > 1.25, and perfScore=1.14551]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.3944 secs, and comparison 35.3154 sec, and warnIfPerfScore > 7.7, and perfScore=2.29405]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.5103 secs, and comparison 4.74626 sec, and warnIfPerfScore > 1.55, and perfScore=0.327095]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.2428 secs, and comparison 34.9359 sec, and warnIfPerfScore > 7.7, and perfScore=2.29196]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.6397 secs, and comparison 4.76631 sec, and warnIfPerfScore > 1.4, and perfScore=0.325575]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 14.5944 secs, and comparison 58.8483 sec, and warnIfPerfScore > 7.9, and perfScore=4.03226]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.1253 secs, and comparison 6.70898 sec, and warnIfPerfScore > 0.8, and perfScore=0.474962]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.8876 secs, and comparison 19.0749 sec, and warnIfPerfScore > 1.7, and perfScore=1.28127]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 14.6032 secs, and comparison 4.05999 sec, and warnIfPerfScore > 0.36, and perfScore=0.27802]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.16988 sec, and warnIfPerfScore > 0.4, and perfScore=0.144659]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.77659 sec, and warnIfPerfScore > 1.1, and perfScore=0.318439]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.0048 secs, and comparison 21.6513 sec, and warnIfPerfScore > 2.4, and perfScore=1.546]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.5513 secs, and comparison 26.8879 sec, and warnIfPerfScore > 2.8, and perfScore=1.8478]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 7 seconds]]]

