Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/29/16 22:46:26]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.29541 secs, and comparison 4.17319 sec, and warnIfPerfScore > 0.5, and perfScore=0.788077]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.32138 secs, and comparison 2.44625 sec, and warnIfPerfScore > 0.35, and perfScore=0.459702]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.25421 secs, and comparison 8.20071 sec, and warnIfPerfScore > 0.9, and perfScore=0.993518]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.72609 secs, and comparison 7.81333 sec, and warnIfPerfScore > 1.15, and perfScore=1.01129]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.60134 secs, and comparison 2.88274 sec, and warnIfPerfScore > 0.5, and perfScore=0.514652]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.19853 secs, and comparison 4.36865 sec, and warnIfPerfScore > 0.68, and perfScore=0.606881]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.28819 secs, and comparison 22.4415 sec, and warnIfPerfScore > 4.3, and perfScore=2.41614]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.1205 secs, and comparison 24.5159 sec, and warnIfPerfScore > 4, and perfScore=2.42239]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 8.2286 secs, and comparison 71.4304 sec, and warnIfPerfScore > 9.1, and perfScore=8.68075]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 15.483 secs, and comparison 13.2992 sec, and warnIfPerfScore > 2.45, and perfScore=0.85895]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.84732 secs, and comparison 5.27031 sec, and warnIfPerfScore > 1.65, and perfScore=0.90132]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.45626 secs, and comparison 16.8997 sec, and warnIfPerfScore > 2.7, and perfScore=2.61758]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 6.27841 secs, and comparison 24.268 sec, and warnIfPerfScore > 3, and perfScore=3.86531]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.79123 secs, and comparison 2.16927 sec, and warnIfPerfScore > 0.14, and perfScore=0.319422]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.93373 secs, and comparison 6.56734 sec, and warnIfPerfScore > 1.25, and perfScore=1.10678]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.65735 secs, and comparison 30.5648 sec, and warnIfPerfScore > 7.7, and perfScore=3.53051]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.6061 secs, and comparison 4.26734 sec, and warnIfPerfScore > 1.55, and perfScore=0.338513]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.70888 secs, and comparison 30.5501 sec, and warnIfPerfScore > 7.7, and perfScore=3.50792]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.5242 secs, and comparison 4.29756 sec, and warnIfPerfScore > 1.4, and perfScore=0.34314]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 6.12409 secs, and comparison 55.024 sec, and warnIfPerfScore > 7.9, and perfScore=8.98484]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 11.6863 secs, and comparison 5.89004 sec, and warnIfPerfScore > 0.8, and perfScore=0.504011]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.059 secs, and comparison 12.4206 sec, and warnIfPerfScore > 1.7, and perfScore=1.02999]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15.4034 secs, and comparison 2.8192 sec, and warnIfPerfScore > 0.35, and perfScore=0.183024]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 15 secs, and comparison 1.24067 sec, and warnIfPerfScore > 0.4, and perfScore=0.0827111]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.39832 sec, and warnIfPerfScore > 1.1, and perfScore=0.226555]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 30 seconds]]]

