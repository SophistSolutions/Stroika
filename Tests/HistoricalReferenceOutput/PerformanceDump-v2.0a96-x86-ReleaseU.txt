Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/22/15 0:41:58]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.1289 secs, and comparison 6.50395 sec, and warnIfPerfScore > 0.5, and perfScore=0.460331]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.1121 secs, and comparison 4.28375 sec, and warnIfPerfScore > 0.35, and perfScore=0.303552]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 14.1532 secs, and comparison 12.0327 sec, and warnIfPerfScore > 0.89, and perfScore=0.85017]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.3335 secs, and comparison 14.0671 sec, and warnIfPerfScore > 1.15, and perfScore=0.981416]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15.1064 secs, and comparison 3.74741 sec, and warnIfPerfScore > 0.5, and perfScore=0.248068]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 17.4018 secs, and comparison 4.98365 sec, and warnIfPerfScore > 0.68, and perfScore=0.286387]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 14.6455 secs, and comparison 47.9184 sec, and warnIfPerfScore > 4.3, and perfScore=3.2719]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 14.8686 secs, and comparison 48.3605 sec, and warnIfPerfScore > 4, and perfScore=3.25252]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 14.7776 secs, and comparison 112.733 sec, and warnIfPerfScore > 9.1, and perfScore=7.6286]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.0518 secs, and comparison 25.8425 sec, and warnIfPerfScore > 2.45, and perfScore=1.83909]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.7265 secs, and comparison 13.928 sec, and warnIfPerfScore > 1.65, and perfScore=1.01468]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.0157 secs, and comparison 36.1512 sec, and warnIfPerfScore > 2.6, and perfScore=2.57934]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 14.3869 secs, and comparison 53.0055 sec, and warnIfPerfScore > 4, and perfScore=3.68429]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 14.6305 secs, and comparison 1.78678 sec, and warnIfPerfScore > 0.14, and perfScore=0.122127]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.8258 secs, and comparison 15.8199 sec, and warnIfPerfScore > 1.25, and perfScore=1.14423]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.1036 secs, and comparison 38.9667 sec, and warnIfPerfScore > 7.7, and perfScore=2.76289]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.2578 secs, and comparison 6.26863 sec, and warnIfPerfScore > 1.55, and perfScore=0.439663]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.9772 secs, and comparison 38.5108 sec, and warnIfPerfScore > 7.7, and perfScore=2.75526]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.3673 secs, and comparison 6.32292 sec, and warnIfPerfScore > 1.4, and perfScore=0.440092]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 13.4274 secs, and comparison 58.2322 sec, and warnIfPerfScore > 7.9, and perfScore=4.33682]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.8766 secs, and comparison 6.87575 sec, and warnIfPerfScore > 0.8, and perfScore=0.495494]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.687 secs, and comparison 21.706 sec, and warnIfPerfScore > 1.6, and perfScore=1.4779]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.9287 secs, and comparison 3.86764 sec, and warnIfPerfScore > 0.29, and perfScore=0.277675]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.52653 sec, and warnIfPerfScore > 0.4, and perfScore=0.168436]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 15 secs, and comparison 7.86626 sec, and warnIfPerfScore > 1.1, and perfScore=0.524417]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.0594 secs, and comparison 21.338 sec, and warnIfPerfScore > 1.6, and perfScore=1.5177]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.6178 secs, and comparison 25.5398 sec, and warnIfPerfScore > 1.9, and perfScore=1.87547]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 38 seconds]]]

