Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/11/16 17:43:57]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 11.2048 secs, and comparison 7.01589 sec, and warnIfPerfScore > 0.6, and perfScore=0.626149]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.626149}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.5584 secs, and comparison 4.99793 sec, and warnIfPerfScore > 0.42, and perfScore=0.397976]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 16.2925 secs, and comparison 14.4125 sec, and warnIfPerfScore > 0.97, and perfScore=0.884613]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 18.084 secs, and comparison 17.7876 sec, and warnIfPerfScore > 1.15, and perfScore=0.983612]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.5799 secs, and comparison 4.10028 sec, and warnIfPerfScore > 0.5, and perfScore=0.325938]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15.5623 secs, and comparison 6.11767 sec, and warnIfPerfScore > 0.68, and perfScore=0.393108]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 17.746 secs, and comparison 49.8225 sec, and warnIfPerfScore > 4.3, and perfScore=2.80754]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 16.1255 secs, and comparison 47.1748 sec, and warnIfPerfScore > 4, and perfScore=2.92547]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 13.9334 secs, and comparison 113.872 sec, and warnIfPerfScore > 9.1, and perfScore=8.17256]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 14.5471 secs, and comparison 24.8259 sec, and warnIfPerfScore > 3.2, and perfScore=1.7066]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 16.7018 secs, and comparison 16.2604 sec, and warnIfPerfScore > 1.7, and perfScore=0.973572]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.8182 secs, and comparison 38.6785 sec, and warnIfPerfScore > 2.8, and perfScore=2.6102]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 19.0559 secs, and comparison 53.3139 sec, and warnIfPerfScore > 3, and perfScore=2.79777]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 19.4469 secs, and comparison 4.15156 sec, and warnIfPerfScore > 0.22, and perfScore=0.213482]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.3695 secs, and comparison 20.4743 sec, and warnIfPerfScore > 1.25, and perfScore=1.00514]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.3874 secs, and comparison 44.8722 sec, and warnIfPerfScore > 7.7, and perfScore=2.73822]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.5149 secs, and comparison 5.18968 sec, and warnIfPerfScore > 1.55, and perfScore=0.334496]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 16.1008 secs, and comparison 44.3182 sec, and warnIfPerfScore > 7.7, and perfScore=2.75255]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.708 secs, and comparison 5.20654 sec, and warnIfPerfScore > 1.4, and perfScore=0.331457]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 17.0544 secs, and comparison 62.4225 sec, and warnIfPerfScore > 7.9, and perfScore=3.66021]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 14.5271 secs, and comparison 7.21414 sec, and warnIfPerfScore > 0.8, and perfScore=0.496599]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.4598 secs, and comparison 20.826 sec, and warnIfPerfScore > 1.7, and perfScore=1.26527]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.6086 secs, and comparison 4.80141 sec, and warnIfPerfScore > 0.47, and perfScore=0.413608]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.64162 sec, and warnIfPerfScore > 0.4, and perfScore=0.176108]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15 secs, and comparison 6.38838 sec, and warnIfPerfScore > 1.1, and perfScore=0.425892]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.6233 secs, and comparison 27.6243 sec, and warnIfPerfScore > 2.4, and perfScore=1.33947]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.2126 secs, and comparison 34.2371 sec, and warnIfPerfScore > 2.8, and perfScore=1.69384]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 14 seconds]]]

