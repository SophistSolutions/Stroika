[[[Started testing at: 10/8/14 22:11:29]]]

Using TIME MULTIPLIER: 30

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 22.6502 secs, and comparison 9.23893 sec, and warnIfPerfScore > 0.5, and perfScore=0.407897]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 22.4723 secs, and comparison 6.80446 sec, and warnIfPerfScore > 0.35, and perfScore=0.302794]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 23.394 secs, and comparison 18.6556 sec, and warnIfPerfScore > 0.9, and perfScore=0.797453]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 23.4193 secs, and comparison 9.18959 sec, and warnIfPerfScore > 0.5, and perfScore=0.392393]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 24.6983 secs, and comparison 9.7647 sec, and warnIfPerfScore > 0.56, and perfScore=0.395359]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 24.5141 secs, and comparison 87.8075 sec, and warnIfPerfScore > 4.1, and perfScore=3.58192]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 24.3854 secs, and comparison 78.4739 sec, and warnIfPerfScore > 3.7, and perfScore=3.21807]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.7
	DETAILS:         	[baseline test 26.1391 secs, and comparison 201.194 sec, and warnIfPerfScore > 8.6, and perfScore=7.69706]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 24.5478 secs, and comparison 47.6246 sec, and warnIfPerfScore > 2.3, and perfScore=1.94008]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.082 secs, and comparison 29.8443 sec, and warnIfPerfScore > 1.5, and perfScore=1.48612]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.8222 secs, and comparison 39.7099 sec, and warnIfPerfScore > 1.9, and perfScore=1.66693]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 22.1442 secs, and comparison 83.0343 sec, and warnIfPerfScore > 3.8, and perfScore=3.74971]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 21.8226 secs, and comparison 2.4569 sec, and warnIfPerfScore > 0.14, and perfScore=0.112585]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 22.845 secs, and comparison 22.7135 sec, and warnIfPerfScore > 1.2, and perfScore=0.994246]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 22.8852 secs, and comparison 153.83 sec, and warnIfPerfScore > 7.2, and perfScore=6.72181]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 26.6188 secs, and comparison 20.466 sec, and warnIfPerfScore > 0.9, and perfScore=0.768856]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 22.4659 secs, and comparison 152.6 sec, and warnIfPerfScore > 7.2, and perfScore=6.79249]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 25.716 secs, and comparison 19.9862 sec, and warnIfPerfScore > 1.1, and perfScore=0.777189]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 21.9971 secs, and comparison 159.173 sec, and warnIfPerfScore > 7.7, and perfScore=7.23608]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 27.033 secs, and comparison 18.596 sec, and warnIfPerfScore > 0.9, and perfScore=0.687899]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.9722 secs, and comparison 26.5659 sec, and warnIfPerfScore > 1.5, and perfScore=1.33014]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 18.4248 secs, and comparison 4.5134 sec, and warnIfPerfScore > 0.25, and perfScore=0.244963]
	                 	BLOB is FASTER

[[[Tests took: 28 minutes, 35 seconds]]]

