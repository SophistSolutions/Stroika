Using TIME MULTIPLIER: 10

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.1138 secs, and comparison 4.23179 sec, and warnIfPerfScore> = 0.5, and perfScore=0.418416]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.0945 secs, and comparison 2.86073 sec, and warnIfPerfScore> = 0.35, and perfScore=0.283394]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.4467 secs, and comparison 8.14014 sec, and warnIfPerfScore> = 0.9, and perfScore=0.77921]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.406 secs, and comparison 4.07927 sec, and warnIfPerfScore> = 0.5, and perfScore=0.392013]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.8756 secs, and comparison 4.23351 sec, and warnIfPerfScore> = 0.56, and perfScore=0.389267]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.3658 secs, and comparison 38.7862 sec, and warnIfPerfScore> = 4.1, and perfScore=3.74176]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.3639 secs, and comparison 35.063 sec, and warnIfPerfScore> = 3.7, and perfScore=3.38319]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 10.4779 secs, and comparison 87.3823 sec, and warnIfPerfScore> = 8.6, and perfScore=8.3397]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 10.2084 secs, and comparison 20.364 sec, and warnIfPerfScore> = 2.3, and perfScore=1.99482]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.7016 secs, and comparison 15.6415 sec, and warnIfPerfScore> = 1.5, and perfScore=1.4616]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.3484 secs, and comparison 18.8172 sec, and warnIfPerfScore> = 1.9, and perfScore=1.65814]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.005 secs, and comparison 38.6125 sec, and warnIfPerfScore> = 3.7, and perfScore=3.50863]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.7613 secs, and comparison 1.26161 sec, and warnIfPerfScore> = 0.14, and perfScore=0.117235]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.2563 secs, and comparison 11.4639 sec, and warnIfPerfScore> = 1.2, and perfScore=1.11774]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 10.4269 secs, and comparison 73.501 sec, and warnIfPerfScore> = 7.2, and perfScore=7.04916]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.5647 secs, and comparison 8.92167 sec, and warnIfPerfScore> = 0.9, and perfScore=0.844479]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 10.5356 secs, and comparison 73.7019 sec, and warnIfPerfScore> = 7.2, and perfScore=6.99552]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.1411 secs, and comparison 9.72844 sec, and warnIfPerfScore> = 1.1, and perfScore=0.959306]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 10.5128 secs, and comparison 70.9848 sec, and warnIfPerfScore> = 7.3, and perfScore=6.7522]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.2279 secs, and comparison 7.97424 sec, and warnIfPerfScore> = 0.9, and perfScore=0.779657]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.3745 secs, and comparison 12.9771 sec, and warnIfPerfScore> = 1.5, and perfScore=1.25086]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 14.5527 secs, and comparison 2.20768 sec, and warnIfPerfScore> = 0.25, and perfScore=0.151702]
	                 	BLOB is FASTER

