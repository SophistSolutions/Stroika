Using TIME MULTIPLIER: 10

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.98033 secs, and comparison 4.06299 sec, and warnIfPerfScore> = 0.5, and perfScore=0.407099]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.94748 secs, and comparison 2.80717 sec, and warnIfPerfScore> = 0.4, and perfScore=0.282199]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 10.0092 secs, and comparison 7.88825 sec, and warnIfPerfScore> = 0.9, and perfScore=0.788097]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.1051 secs, and comparison 5.19093 sec, and warnIfPerfScore> = 0.6, and perfScore=0.513695]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.2205 secs, and comparison 5.39554 sec, and warnIfPerfScore> = 0.8, and perfScore=0.527912]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.0871 secs, and comparison 43.0249 sec, and warnIfPerfScore> = 4.8, and perfScore=4.26532]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.73917 secs, and comparison 39.5355 sec, and warnIfPerfScore> = 4.4, and perfScore=4.05943]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 10.1022 secs, and comparison 98.3378 sec, and warnIfPerfScore> = 10, and perfScore=9.73432]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 10.1031 secs, and comparison 22.3308 sec, and warnIfPerfScore> = 2.3, and perfScore=2.21029]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.0307 secs, and comparison 14.0919 sec, and warnIfPerfScore> = 1.5, and perfScore=1.40488]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.89208 secs, and comparison 19.0266 sec, and warnIfPerfScore> = 2.1, and perfScore=1.92341]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.2616 secs, and comparison 36.8052 sec, and warnIfPerfScore> = 3.7, and perfScore=3.58669]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.1743 secs, and comparison 1.20013 sec, and warnIfPerfScore> = 0.14, and perfScore=0.117957]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.76088 secs, and comparison 10.0305 sec, and warnIfPerfScore> = 1.2, and perfScore=1.02762]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 9.95775 secs, and comparison 103.978 sec, and warnIfPerfScore> = 11, and perfScore=10.4419]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.1588 secs, and comparison 10.5877 sec, and warnIfPerfScore> = 1.1, and perfScore=1.04222]
	                 	Sequence<string> is ***SLOWER***

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 9.89704 secs, and comparison 103.927 sec, and warnIfPerfScore> = 11, and perfScore=10.5008]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.70294 secs, and comparison 10.9445 sec, and warnIfPerfScore> = 1.2, and perfScore=1.12796]
	                 	Sequence_DoublyLinkedList<string> is ***SLOWER***

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 9.85922 secs, and comparison 90.941 sec, and warnIfPerfScore> = 9.5, and perfScore=9.22396]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.6697 secs, and comparison 9.85996 sec, and warnIfPerfScore> = 1.1, and perfScore=1.01967]
	                 	Collection<string> is ***SLOWER***

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.69509 secs, and comparison 12.7392 sec, and warnIfPerfScore> = 1.4, and perfScore=1.31398]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.0023 secs, and comparison 2.10931 sec, and warnIfPerfScore> = 0.25, and perfScore=0.210883]
	                 	BLOB is FASTER

