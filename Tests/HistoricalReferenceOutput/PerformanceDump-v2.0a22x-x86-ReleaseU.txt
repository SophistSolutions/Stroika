Using TIME MULTIPLIER: 10

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.97803 secs, and comparison 4.25634 sec, and warnIfPerfScore> = 0.5, and perfScore=0.426571]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.95152 secs, and comparison 2.93611 sec, and warnIfPerfScore> = 0.4, and perfScore=0.295041]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 9.56798 secs, and comparison 7.52474 sec, and warnIfPerfScore> = 0.9, and perfScore=0.786451]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.3051 secs, and comparison 5.24158 sec, and warnIfPerfScore> = 0.6, and perfScore=0.508637]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 14.2234 secs, and comparison 7.51261 sec, and warnIfPerfScore> = 0.8, and perfScore=0.528188]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.3104 secs, and comparison 44.7631 sec, and warnIfPerfScore> = 4.6, and perfScore=4.34152]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.2945 secs, and comparison 40.5746 sec, and warnIfPerfScore> = 4.3, and perfScore=3.94139]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 10.3958 secs, and comparison 98.7757 sec, and warnIfPerfScore> = 10.2, and perfScore=9.50148]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 10.2799 secs, and comparison 22.2908 sec, and warnIfPerfScore> = 2.3, and perfScore=2.16839]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.97842 secs, and comparison 14.5924 sec, and warnIfPerfScore> = 1.6, and perfScore=1.46239]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.388 secs, and comparison 20.2412 sec, and warnIfPerfScore> = 2, and perfScore=1.94852]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.1498 secs, and comparison 36.2058 sec, and warnIfPerfScore> = 3.7, and perfScore=3.56716]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.1162 secs, and comparison 1.35252 sec, and warnIfPerfScore> = 0.14, and perfScore=0.133699]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.7049 secs, and comparison 10.7503 sec, and warnIfPerfScore> = 1.2, and perfScore=1.00424]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 9.9996 secs, and comparison 124.787 sec, and warnIfPerfScore> = 6.1, and perfScore=12.4792]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 6.1 and got 12.4792}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.2596 secs, and comparison 12.5576 sec, and warnIfPerfScore> = 0.8, and perfScore=1.22399]
	                 	Sequence<string> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.22399}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 9.83855 secs, and comparison 124.65 sec, and warnIfPerfScore> = 5.6, and perfScore=12.6696]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 5.6 and got 12.6696}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.16347 secs, and comparison 11.6354 sec, and warnIfPerfScore> = 0.9, and perfScore=1.26976]
	                 	Sequence_DoublyLinkedList<string> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.9 and got 1.26976}}}

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 9.96631 secs, and comparison 106.809 sec, and warnIfPerfScore> = 5.9, and perfScore=10.717]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 5.9 and got 10.717}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.27428 secs, and comparison 10.7104 sec, and warnIfPerfScore> = 0.8, and perfScore=1.15485]
	                 	Collection<string> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.15485}}}

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.55792 secs, and comparison 12.5676 sec, and warnIfPerfScore> = 1.4, and perfScore=1.31489]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.57414 secs, and comparison 2.15178 sec, and warnIfPerfScore> = 0.25, and perfScore=0.224749]
	                 	BLOB is FASTER

