Using TIME MULTIPLIER: 10

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.96085 secs, and comparison 4.04227 sec, and warnIfPerfScore> = 0.5, and perfScore=0.405816]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.1329 secs, and comparison 2.9092 sec, and warnIfPerfScore> = 0.35, and perfScore=0.287105]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.97034 secs, and comparison 7.93321 sec, and warnIfPerfScore> = 0.9, and perfScore=0.795681]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.2506 secs, and comparison 4.11228 sec, and warnIfPerfScore> = 0.5, and perfScore=0.401173]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.6191 secs, and comparison 4.14453 sec, and warnIfPerfScore> = 0.5, and perfScore=0.390289]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.85 secs, and comparison 37.8385 sec, and warnIfPerfScore> = 4.1, and perfScore=3.84147]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.2189 secs, and comparison 34.6454 sec, and warnIfPerfScore> = 3.7, and perfScore=3.39034]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 10.2332 secs, and comparison 85.3085 sec, and warnIfPerfScore> = 8.6, and perfScore=8.33642]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 10.142 secs, and comparison 20.3395 sec, and warnIfPerfScore> = 2.3, and perfScore=2.00546]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.7757 secs, and comparison 14.6975 sec, and warnIfPerfScore> = 1.5, and perfScore=1.36395]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.6274 secs, and comparison 17.7247 sec, and warnIfPerfScore> = 1.9, and perfScore=1.66784]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 10.7082 secs, and comparison 37.797 sec, and warnIfPerfScore> = 3.7, and perfScore=3.52974]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.6301 secs, and comparison 1.26084 sec, and warnIfPerfScore> = 0.14, and perfScore=0.118611]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.88019 secs, and comparison 10.6013 sec, and warnIfPerfScore> = 1.2, and perfScore=1.07298]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 9.85731 secs, and comparison 68.2999 sec, and warnIfPerfScore> = 7.1, and perfScore=6.92886]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.89642 secs, and comparison 7.97636 sec, and warnIfPerfScore> = 0.9, and perfScore=0.805984]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.1
	DETAILS:         	[baseline test 9.7928 secs, and comparison 69.2196 sec, and warnIfPerfScore> = 7.1, and perfScore=7.06842]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.53949 secs, and comparison 8.50142 sec, and warnIfPerfScore> = 1.1, and perfScore=0.891182]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 9.72111 secs, and comparison 66.42 sec, and warnIfPerfScore> = 7.3, and perfScore=6.83256]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 9.86546 secs, and comparison 7.67436 sec, and warnIfPerfScore> = 0.9, and perfScore=0.777902]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.90764 secs, and comparison 12.4371 sec, and warnIfPerfScore> = 1.5, and perfScore=1.2553]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.1048 secs, and comparison 2.13532 sec, and warnIfPerfScore> = 0.25, and perfScore=0.211317]
	                 	BLOB is FASTER

