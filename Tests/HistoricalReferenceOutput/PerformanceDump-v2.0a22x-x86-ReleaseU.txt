Using TIME MULTIPLIER: 10

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.2461 secs, and comparison 4.41963 sec, and warnIfPerfScore> = 0.5, and perfScore=0.431347]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.7656 secs, and comparison 3.05803 sec, and warnIfPerfScore> = 0.4, and perfScore=0.284054]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.79124 secs, and comparison 7.80204 sec, and warnIfPerfScore> = 0.9, and perfScore=0.796839]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.5101 secs, and comparison 5.26574 sec, and warnIfPerfScore> = 0.6, and perfScore=0.501017]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 10.2868 secs, and comparison 7.65429 sec, and warnIfPerfScore> = 0.8, and perfScore=0.744091]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.5472 secs, and comparison 46.3403 sec, and warnIfPerfScore> = 4.6, and perfScore=4.3936]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.4534 secs, and comparison 41.9744 sec, and warnIfPerfScore> = 4.3, and perfScore=4.01537]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 10.0604 secs, and comparison 100.15 sec, and warnIfPerfScore> = 10.2, and perfScore=9.95487]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.86503 secs, and comparison 22.3905 sec, and warnIfPerfScore> = 2.3, and perfScore=2.26968]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.1572 secs, and comparison 14.748 sec, and warnIfPerfScore> = 1.6, and perfScore=1.45198]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.2659 secs, and comparison 19.2053 sec, and warnIfPerfScore> = 2, and perfScore=1.87079]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.98909 secs, and comparison 35.5403 sec, and warnIfPerfScore> = 3.7, and perfScore=3.55791]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.89989 secs, and comparison 1.30117 sec, and warnIfPerfScore> = 0.14, and perfScore=0.131433]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.7014 secs, and comparison 10.6835 sec, and warnIfPerfScore> = 1.2, and perfScore=1.10124]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 9.57161 secs, and comparison 53.678 sec, and warnIfPerfScore> = 6.1, and perfScore=5.60804]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 10.2774 secs, and comparison 7.91027 sec, and warnIfPerfScore> = 0.8, and perfScore=0.769678]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 9.89451 secs, and comparison 54.01 sec, and warnIfPerfScore> = 5.6, and perfScore=5.45859]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.96783 secs, and comparison 7.5487 sec, and warnIfPerfScore> = 0.9, and perfScore=0.841754]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 9.59545 secs, and comparison 53.7145 sec, and warnIfPerfScore> = 5.9, and perfScore=5.59792]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.21583 secs, and comparison 6.48664 sec, and warnIfPerfScore> = 0.8, and perfScore=0.703858]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.57741 secs, and comparison 12.5662 sec, and warnIfPerfScore> = 1.4, and perfScore=1.31207]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.43891 secs, and comparison 2.01905 sec, and warnIfPerfScore> = 0.25, and perfScore=0.213907]
	                 	BLOB is FASTER

