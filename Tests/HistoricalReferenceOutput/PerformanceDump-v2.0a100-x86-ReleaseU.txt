Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/21/15 23:12:07]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.1814 secs, and comparison 6.52795 sec, and warnIfPerfScore > 0.5, and perfScore=0.460317]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.2564 secs, and comparison 4.30232 sec, and warnIfPerfScore > 0.35, and perfScore=0.301782]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 14.4097 secs, and comparison 12.2362 sec, and warnIfPerfScore > 0.89, and perfScore=0.849159]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.3375 secs, and comparison 14.059 sec, and warnIfPerfScore > 1.15, and perfScore=0.98057]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15.1838 secs, and comparison 3.77341 sec, and warnIfPerfScore > 0.5, and perfScore=0.248515]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 17.5793 secs, and comparison 5.01554 sec, and warnIfPerfScore > 0.68, and perfScore=0.285309]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 14.7027 secs, and comparison 48.0323 sec, and warnIfPerfScore > 4.3, and perfScore=3.2669]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 15.0135 secs, and comparison 48.858 sec, and warnIfPerfScore > 4, and perfScore=3.25428]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.7
	DETAILS:         	[baseline test 14.8184 secs, and comparison 114.642 sec, and warnIfPerfScore > 9.1, and perfScore=7.73645]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.0986 secs, and comparison 25.9092 sec, and warnIfPerfScore > 2.45, and perfScore=1.83771]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.9348 secs, and comparison 13.9594 sec, and warnIfPerfScore > 1.65, and perfScore=1.00176]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.1043 secs, and comparison 36.1564 sec, and warnIfPerfScore > 2.7, and perfScore=2.5635]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.4101 secs, and comparison 40.7613 sec, and warnIfPerfScore > 3, and perfScore=2.82866]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 14.6495 secs, and comparison 1.89435 sec, and warnIfPerfScore > 0.14, and perfScore=0.129312]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.841 secs, and comparison 16.2943 sec, and warnIfPerfScore > 1.25, and perfScore=1.02861]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.2126 secs, and comparison 38.5537 sec, and warnIfPerfScore > 7.7, and perfScore=2.71264]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.3259 secs, and comparison 6.2806 sec, and warnIfPerfScore > 1.55, and perfScore=0.438409]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.0119 secs, and comparison 38.1238 sec, and warnIfPerfScore > 7.7, and perfScore=2.72082]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.4642 secs, and comparison 6.34111 sec, and warnIfPerfScore > 1.4, and perfScore=0.4384]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 13.4686 secs, and comparison 58.4349 sec, and warnIfPerfScore > 7.9, and perfScore=4.3386]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 13.9384 secs, and comparison 6.63187 sec, and warnIfPerfScore > 0.8, and perfScore=0.475798]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.8058 secs, and comparison 21.7696 sec, and warnIfPerfScore > 1.6, and perfScore=1.47035]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.5645 secs, and comparison 3.85116 sec, and warnIfPerfScore > 0.29, and perfScore=0.264422]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.41634 sec, and warnIfPerfScore > 0.4, and perfScore=0.161089]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 15 secs, and comparison 7.877 sec, and warnIfPerfScore > 1.1, and perfScore=0.525134]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.1937 secs, and comparison 21.294 sec, and warnIfPerfScore > 1.8, and perfScore=1.50024]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.2136 secs, and comparison 25.3872 sec, and warnIfPerfScore > 2.1, and perfScore=1.78612]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 34 seconds]]]

