Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/22/16 22:07:26]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.77185 secs, and comparison 5.49616 sec, and warnIfPerfScore > 0.58, and perfScore=0.562448]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.81419 secs, and comparison 3.93209 sec, and warnIfPerfScore > 0.42, and perfScore=0.400654]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.8536 secs, and comparison 11.2782 sec, and warnIfPerfScore > 0.9, and perfScore=0.877433]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.2286 secs, and comparison 14.3241 sec, and warnIfPerfScore > 1.15, and perfScore=1.00672]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.355 secs, and comparison 3.26853 sec, and warnIfPerfScore > 0.5, and perfScore=0.315647]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.5023 secs, and comparison 4.80153 sec, and warnIfPerfScore > 0.68, and perfScore=0.384052]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.6069 secs, and comparison 40.512 sec, and warnIfPerfScore > 4.3, and perfScore=2.97731]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.7902 secs, and comparison 41.5261 sec, and warnIfPerfScore > 4, and perfScore=2.62987]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 12.7287 secs, and comparison 102.263 sec, and warnIfPerfScore > 9.1, and perfScore=8.03406]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.6276 secs, and comparison 22.5859 sec, and warnIfPerfScore > 3.2, and perfScore=1.65736]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 16.1814 secs, and comparison 15.4953 sec, and warnIfPerfScore > 1.7, and perfScore=0.957597]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.838 secs, and comparison 30.2509 sec, and warnIfPerfScore > 2.7, and perfScore=2.18608]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.2782 secs, and comparison 41.4428 sec, and warnIfPerfScore > 3, and perfScore=2.71255]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15.5303 secs, and comparison 2.9995 sec, and warnIfPerfScore > 0.22, and perfScore=0.193139]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.878 secs, and comparison 16.4787 sec, and warnIfPerfScore > 1.25, and perfScore=1.03783]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.0938 secs, and comparison 41.435 sec, and warnIfPerfScore > 7.7, and perfScore=2.74517]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.386 secs, and comparison 4.77664 sec, and warnIfPerfScore > 1.55, and perfScore=0.332035]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.9467 secs, and comparison 40.8635 sec, and warnIfPerfScore > 7.7, and perfScore=2.73395]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.5259 secs, and comparison 4.81866 sec, and warnIfPerfScore > 1.4, and perfScore=0.331729]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 15.9245 secs, and comparison 57.1825 sec, and warnIfPerfScore > 7.9, and perfScore=3.59085]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 13.4079 secs, and comparison 6.58778 sec, and warnIfPerfScore > 0.8, and perfScore=0.491337]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.015 secs, and comparison 19.2319 sec, and warnIfPerfScore > 1.7, and perfScore=1.28084]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.92431 secs, and comparison 3.7253 sec, and warnIfPerfScore > 0.42, and perfScore=0.417433]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.03951 sec, and warnIfPerfScore > 0.4, and perfScore=0.135967]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.86794 sec, and warnIfPerfScore > 1.1, and perfScore=0.32453]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.0703 secs, and comparison 21.4908 sec, and warnIfPerfScore > 2.4, and perfScore=1.3373]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.8825 secs, and comparison 26.4469 sec, and warnIfPerfScore > 2.8, and perfScore=1.77705]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 39 seconds]]]

