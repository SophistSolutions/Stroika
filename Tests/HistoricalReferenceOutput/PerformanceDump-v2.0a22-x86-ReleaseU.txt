Using TIME MULTIPLIER: 10

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.88971 secs, and comparison 4.07943 sec, and warnIfPerfScore> = 0.5, and perfScore=0.412492]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.0611 secs, and comparison 2.85135 sec, and warnIfPerfScore> = 0.35, and perfScore=0.283403]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.1767 secs, and comparison 7.93396 sec, and warnIfPerfScore> = 0.9, and perfScore=0.779621]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.2238 secs, and comparison 4.02636 sec, and warnIfPerfScore> = 0.5, and perfScore=0.393822]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.6418 secs, and comparison 4.15666 sec, and warnIfPerfScore> = 0.5, and perfScore=0.390597]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.1192 secs, and comparison 38.0064 sec, and warnIfPerfScore> = 4.1, and perfScore=3.75588]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.2279 secs, and comparison 34.2213 sec, and warnIfPerfScore> = 3.7, and perfScore=3.34586]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 10.069 secs, and comparison 86.1015 sec, and warnIfPerfScore> = 8.6, and perfScore=8.55118]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 10.1769 secs, and comparison 20.1628 sec, and warnIfPerfScore> = 2.3, and perfScore=1.98123]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.98202 secs, and comparison 14.498 sec, and warnIfPerfScore> = 1.5, and perfScore=1.45241]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.2896 secs, and comparison 17.5032 sec, and warnIfPerfScore> = 1.9, and perfScore=1.70105]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 10.5538 secs, and comparison 36.8869 sec, and warnIfPerfScore> = 3.7, and perfScore=3.49513]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.3786 secs, and comparison 1.2317 sec, and warnIfPerfScore> = 0.14, and perfScore=0.118677]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.90172 secs, and comparison 10.6326 sec, and warnIfPerfScore> = 1.2, and perfScore=1.07381]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	7.1
	DETAILS:         	[baseline test 9.92219 secs, and comparison 70.5777 sec, and warnIfPerfScore> = 7.2, and perfScore=7.11312]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 10.0327 secs, and comparison 8.26194 sec, and warnIfPerfScore> = 0.9, and perfScore=0.823499]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 9.79963 secs, and comparison 70.2996 sec, and warnIfPerfScore> = 7.2, and perfScore=7.1737]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 9.51437 secs, and comparison 8.79852 sec, and warnIfPerfScore> = 1.1, and perfScore=0.924761]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 9.61907 secs, and comparison 69.4436 sec, and warnIfPerfScore> = 7.3, and perfScore=7.21937]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 9.81946 secs, and comparison 7.707 sec, and warnIfPerfScore> = 0.9, and perfScore=0.784869]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.9568 secs, and comparison 12.4665 sec, and warnIfPerfScore> = 1.5, and perfScore=1.25206]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.3159 secs, and comparison 2.15548 sec, and warnIfPerfScore> = 0.25, and perfScore=0.208948]
	                 	BLOB is FASTER

