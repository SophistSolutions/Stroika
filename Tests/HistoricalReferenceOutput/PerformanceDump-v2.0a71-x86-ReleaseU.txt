Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/27/15 22:17:26]]]

Using TIME MULTIPLIER: 30

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 22.4896 secs, and comparison 10.3477 sec, and warnIfPerfScore > 0.5, and perfScore=0.460113]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 22.747 secs, and comparison 6.83036 sec, and warnIfPerfScore > 0.35, and perfScore=0.300275]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 25.9301 secs, and comparison 18.6136 sec, and warnIfPerfScore > 0.9, and perfScore=0.717835]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 36.7914 secs, and comparison 36.1669 sec, and warnIfPerfScore > 1.1, and perfScore=0.983025]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 21.8583 secs, and comparison 9.97144 sec, and warnIfPerfScore > 0.5, and perfScore=0.456186]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 16.2874 secs, and comparison 10.1958 sec, and warnIfPerfScore > 0.56, and perfScore=0.625994]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.56 and got 0.625994}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 24.3644 secs, and comparison 89.3103 sec, and warnIfPerfScore > 4.1, and perfScore=3.66561]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 24.0325 secs, and comparison 80.414 sec, and warnIfPerfScore > 3.7, and perfScore=3.34606]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 26.2339 secs, and comparison 205.7 sec, and warnIfPerfScore > 8.6, and perfScore=7.84102]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 24.4657 secs, and comparison 49.3857 sec, and warnIfPerfScore > 2.3, and perfScore=2.01857]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 20.4998 secs, and comparison 32.4194 sec, and warnIfPerfScore > 1.6, and perfScore=1.58145]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 23.4578 secs, and comparison 42.1633 sec, and warnIfPerfScore > 1.9, and perfScore=1.79741]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs BasicTextOutputStream)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 22.9445 secs, and comparison 87.0331 sec, and warnIfPerfScore > 4, and perfScore=3.7932]
	                 	BasicTextOutputStream is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 21.9811 secs, and comparison 2.49019 sec, and warnIfPerfScore > 0.14, and perfScore=0.113288]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 22.4902 secs, and comparison 22.5621 sec, and warnIfPerfScore > 1.2, and perfScore=1.0032]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 23.0244 secs, and comparison 166.802 sec, and warnIfPerfScore > 7.3, and perfScore=7.24458]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 26.7364 secs, and comparison 20.8167 sec, and warnIfPerfScore > 0.9, and perfScore=0.778592]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 23.1943 secs, and comparison 167.587 sec, and warnIfPerfScore > 7.2, and perfScore=7.22536]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 7.2 and got 7.22536}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 25.7881 secs, and comparison 20.5801 sec, and warnIfPerfScore > 1.1, and perfScore=0.798049]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 23.4757 secs, and comparison 165.479 sec, and warnIfPerfScore > 7.7, and perfScore=7.04896]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 27.0783 secs, and comparison 19.3038 sec, and warnIfPerfScore > 0.9, and perfScore=0.712888]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.4696 secs, and comparison 27.3854 sec, and warnIfPerfScore > 2.1, and perfScore=1.33786]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 19.0538 secs, and comparison 4.50693 sec, and warnIfPerfScore > 0.26, and perfScore=0.236538]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (30.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 30 secs, and comparison 9.38045 sec, and warnIfPerfScore > 1, and perfScore=0.312682]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (30.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 30 secs, and comparison 31.4335 sec, and warnIfPerfScore > 1.1, and perfScore=1.04778]
	                 	Test_Optional_ is ***SLOWER***

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.81663 secs, and comparison 10.0904 sec, and warnIfPerfScore > 2.1, and perfScore=1.48026]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.6475 secs, and comparison 19.8743 sec, and warnIfPerfScore > 2.1, and perfScore=1.86657]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 32 minutes, 10 seconds]]]

