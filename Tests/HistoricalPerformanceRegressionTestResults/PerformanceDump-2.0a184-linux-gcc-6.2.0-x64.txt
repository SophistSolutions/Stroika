Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/7/16 10:23:55]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.37346 secs, and comparison 4.2522 sec, and warnIfPerfScore > 0.62, and perfScore=0.791335]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.37203 secs, and comparison 2.67761 sec, and warnIfPerfScore > 0.65, and perfScore=0.498436]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.23141 secs, and comparison 8.1168 sec, and warnIfPerfScore > 1, and perfScore=0.986077]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.81644 secs, and comparison 7.8951 sec, and warnIfPerfScore > 1.15, and perfScore=1.01006]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.31714 secs, and comparison 2.80391 sec, and warnIfPerfScore > 0.5, and perfScore=0.527334]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.78819 secs, and comparison 4.64295 sec, and warnIfPerfScore > 0.68, and perfScore=0.683974]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.42042 secs, and comparison 31.7363 sec, and warnIfPerfScore > 4.3, and perfScore=3.36889]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.1006 secs, and comparison 32.8691 sec, and warnIfPerfScore > 4, and perfScore=3.25418]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.18136 secs, and comparison 98.8796 sec, and warnIfPerfScore > 10.4, and perfScore=13.7689]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.6497 secs, and comparison 13.547 sec, and warnIfPerfScore > 3.2, and perfScore=1.27205]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 4.98814 secs, and comparison 4.83931 sec, and warnIfPerfScore > 1.7, and perfScore=0.970162]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 5.58023 secs, and comparison 21.2446 sec, and warnIfPerfScore > 2.8, and perfScore=3.80713]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 5.96804 secs, and comparison 30.4817 sec, and warnIfPerfScore > 3.3, and perfScore=5.10749]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.03385 secs, and comparison 2.42991 sec, and warnIfPerfScore > 0.22, and perfScore=0.402713]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.4499 secs, and comparison 6.29702 sec, and warnIfPerfScore > 1.25, and perfScore=1.15544]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.0867 secs, and comparison 30.4536 sec, and warnIfPerfScore > 7.7, and perfScore=3.35145]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.59849 secs, and comparison 3.30275 sec, and warnIfPerfScore > 1.55, and perfScore=0.43466]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.93258 secs, and comparison 29.9034 sec, and warnIfPerfScore > 7.7, and perfScore=3.34768]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.72362 secs, and comparison 3.35075 sec, and warnIfPerfScore > 1.4, and perfScore=0.433831]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 6.39214 secs, and comparison 57.953 sec, and warnIfPerfScore > 7.9, and perfScore=9.06629]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.26089 secs, and comparison 5.94809 sec, and warnIfPerfScore > 0.8, and perfScore=0.819196]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.0928 secs, and comparison 13.406 sec, and warnIfPerfScore > 1.7, and perfScore=1.20854]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 16.8312 secs, and comparison 4.26517 sec, and warnIfPerfScore > 0.55, and perfScore=0.253408]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 15 secs, and comparison 1.34161 sec, and warnIfPerfScore > 0.4, and perfScore=0.089441]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.49948 sec, and warnIfPerfScore > 1.1, and perfScore=0.233299]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 6 seconds]]]

Succeeded
