Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/29/16 13:20:09]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.9084 secs, and comparison 5.53627 sec, and warnIfPerfScore > 0.6, and perfScore=0.558745]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.92939 secs, and comparison 3.73436 sec, and warnIfPerfScore > 0.42, and perfScore=0.376091]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.9447 secs, and comparison 11.3777 sec, and warnIfPerfScore > 0.97, and perfScore=0.878946]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.3814 secs, and comparison 14.0087 sec, and warnIfPerfScore > 1.15, and perfScore=0.974086]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.77356 secs, and comparison 3.11195 sec, and warnIfPerfScore > 0.5, and perfScore=0.318405]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.3373 secs, and comparison 4.68638 sec, and warnIfPerfScore > 0.68, and perfScore=0.379855]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 13.5177 secs, and comparison 34.5859 sec, and warnIfPerfScore > 4.3, and perfScore=2.55856]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.926 secs, and comparison 35.1175 sec, and warnIfPerfScore > 4, and perfScore=2.52173]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 11.5306 secs, and comparison 92.747 sec, and warnIfPerfScore > 9.1, and perfScore=8.04354]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.4081 secs, and comparison 18.1679 sec, and warnIfPerfScore > 3.2, and perfScore=1.355]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.832 secs, and comparison 14.3536 sec, and warnIfPerfScore > 1.7, and perfScore=0.967745]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.8972 secs, and comparison 22.5188 sec, and warnIfPerfScore > 2.8, and perfScore=1.62038]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 15.3226 secs, and comparison 44.7 sec, and warnIfPerfScore > 3, and perfScore=2.91725]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15.5872 secs, and comparison 3.07966 sec, and warnIfPerfScore > 0.22, and perfScore=0.197576]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.0889 secs, and comparison 16.3149 sec, and warnIfPerfScore > 1.25, and perfScore=1.158]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.1476 secs, and comparison 39.1831 sec, and warnIfPerfScore > 7.7, and perfScore=2.58675]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.3912 secs, and comparison 4.93697 sec, and warnIfPerfScore > 1.55, and perfScore=0.343055]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.0175 secs, and comparison 38.7316 sec, and warnIfPerfScore > 7.7, and perfScore=2.57909]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.5841 secs, and comparison 4.99851 sec, and warnIfPerfScore > 1.4, and perfScore=0.342737]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 14.7138 secs, and comparison 58.5919 sec, and warnIfPerfScore > 7.9, and perfScore=3.9821]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.4128 secs, and comparison 6.6954 sec, and warnIfPerfScore > 0.8, and perfScore=0.499182]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.9265 secs, and comparison 18.1107 sec, and warnIfPerfScore > 1.7, and perfScore=1.21333]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.72611 secs, and comparison 3.75786 sec, and warnIfPerfScore > 0.47, and perfScore=0.430645]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.99858 sec, and warnIfPerfScore > 0.4, and perfScore=0.133239]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.90413 sec, and warnIfPerfScore > 1.1, and perfScore=0.326942]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.6372 secs, and comparison 21.4949 sec, and warnIfPerfScore > 2.4, and perfScore=1.3746]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.4903 secs, and comparison 26.5543 sec, and warnIfPerfScore > 2.8, and perfScore=1.83255]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 51 seconds]]]

