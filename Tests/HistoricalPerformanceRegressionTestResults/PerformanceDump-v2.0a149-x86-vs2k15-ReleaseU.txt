Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/12/16 21:39:12]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.8321 secs, and comparison 5.9558 sec, and warnIfPerfScore > 0.6, and perfScore=0.549829]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.6852 secs, and comparison 4.24762 sec, and warnIfPerfScore > 0.42, and perfScore=0.397522]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 14.0186 secs, and comparison 12.2483 sec, and warnIfPerfScore > 0.97, and perfScore=0.873724]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.4306 secs, and comparison 15.1397 sec, and warnIfPerfScore > 1.15, and perfScore=0.98115]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.56 secs, and comparison 3.3755 sec, and warnIfPerfScore > 0.5, and perfScore=0.319649]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.2523 secs, and comparison 5.08733 sec, and warnIfPerfScore > 0.68, and perfScore=0.383882]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 15.4226 secs, and comparison 37.7396 sec, and warnIfPerfScore > 4.3, and perfScore=2.44703]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 15.6113 secs, and comparison 38.0853 sec, and warnIfPerfScore > 4, and perfScore=2.4396]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 13.5461 secs, and comparison 105.74 sec, and warnIfPerfScore > 9.1, and perfScore=7.80598]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.1172 secs, and comparison 21.4958 sec, and warnIfPerfScore > 3.2, and perfScore=1.33372]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 17.7039 secs, and comparison 17.2288 sec, and warnIfPerfScore > 1.7, and perfScore=0.973163]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.5598 secs, and comparison 26.6695 sec, and warnIfPerfScore > 2.8, and perfScore=1.6105]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 17.1557 secs, and comparison 48.257 sec, and warnIfPerfScore > 3, and perfScore=2.81289]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 16.6852 secs, and comparison 3.14598 sec, and warnIfPerfScore > 0.22, and perfScore=0.188549]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.5593 secs, and comparison 17.5644 sec, and warnIfPerfScore > 1.25, and perfScore=1.12887]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 16.3516 secs, and comparison 45.1588 sec, and warnIfPerfScore > 7.7, and perfScore=2.76174]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.6082 secs, and comparison 5.19414 sec, and warnIfPerfScore > 1.55, and perfScore=0.332783]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 16.1692 secs, and comparison 44.61 sec, and warnIfPerfScore > 7.7, and perfScore=2.75895]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.7867 secs, and comparison 5.24437 sec, and warnIfPerfScore > 1.4, and perfScore=0.332203]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 17.1389 secs, and comparison 68.9059 sec, and warnIfPerfScore > 7.9, and perfScore=4.02044]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 15.9082 secs, and comparison 7.91028 sec, and warnIfPerfScore > 0.8, and perfScore=0.497247]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.0778 secs, and comparison 21.7958 sec, and warnIfPerfScore > 1.7, and perfScore=1.20567]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.4302 secs, and comparison 4.35587 sec, and warnIfPerfScore > 0.47, and perfScore=0.417621]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.38264 sec, and warnIfPerfScore > 0.4, and perfScore=0.158843]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.77359 sec, and warnIfPerfScore > 1.1, and perfScore=0.384906]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.0261 secs, and comparison 25.2569 sec, and warnIfPerfScore > 2.4, and perfScore=1.32748]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.4095 secs, and comparison 28.7684 sec, and warnIfPerfScore > 2.8, and perfScore=1.75316]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 46 seconds]]]

