Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/6/17 14:16:14]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.84893 secs, and comparison 6.95893 sec, and warnIfPerfScore > 0.62, and perfScore=0.786416]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.8819 secs, and comparison 4.11813 sec, and warnIfPerfScore > 0.65, and perfScore=0.463654]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.65671 secs, and comparison 8.76436 sec, and warnIfPerfScore > 1, and perfScore=1.01243]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.95427 secs, and comparison 8.16342 sec, and warnIfPerfScore > 1.15, and perfScore=1.02629]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.65188 secs, and comparison 3.81692 sec, and warnIfPerfScore > 0.5, and perfScore=0.498821]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.87782 secs, and comparison 4.93755 sec, and warnIfPerfScore > 0.68, and perfScore=0.626767]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.43054 secs, and comparison 31.8751 sec, and warnIfPerfScore > 4.3, and perfScore=3.37999]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.66455 secs, and comparison 33.0465 sec, and warnIfPerfScore > 4, and perfScore=3.41935]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 8.72055 secs, and comparison 122.606 sec, and warnIfPerfScore > 10.4, and perfScore=14.0594]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.6578 secs, and comparison 13.2982 sec, and warnIfPerfScore > 3.2, and perfScore=1.24775]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.67107 secs, and comparison 7.64123 sec, and warnIfPerfScore > 1.8, and perfScore=0.99611]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.63037 secs, and comparison 17.222 sec, and warnIfPerfScore > 2.8, and perfScore=3.05876]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 6.55061 secs, and comparison 31.6551 sec, and warnIfPerfScore > 3.3, and perfScore=4.83238]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.08383 secs, and comparison 2.92442 sec, and warnIfPerfScore > 0.25, and perfScore=0.41283]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.15578 secs, and comparison 6.98164 sec, and warnIfPerfScore > 1.25, and perfScore=1.13416]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.35283 secs, and comparison 30.0005 sec, and warnIfPerfScore > 7.7, and perfScore=3.59165]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.9356 secs, and comparison 3.99595 sec, and warnIfPerfScore > 1.55, and perfScore=0.308911]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 7.92402 secs, and comparison 68.3738 sec, and warnIfPerfScore > 7.7, and perfScore=8.62868]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.5715 secs, and comparison 7.45171 sec, and warnIfPerfScore > 1, and perfScore=0.549072]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 8.30714 secs, and comparison 61.2552 sec, and warnIfPerfScore > 7.9, and perfScore=7.37379]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 14.1264 secs, and comparison 6.33725 sec, and warnIfPerfScore > 0.8, and perfScore=0.448611]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.7203 secs, and comparison 14.9156 sec, and warnIfPerfScore > 1.7, and perfScore=1.17258]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 34.5087 secs, and comparison 10.8373 sec, and warnIfPerfScore > 0.55, and perfScore=0.314046]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.46192 sec, and warnIfPerfScore > 0.4, and perfScore=0.364128]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15 secs, and comparison 6.63398 sec, and warnIfPerfScore > 1.1, and perfScore=0.442265]
	                 	Test_Optional_ is FASTER

[[[Tests took: 12 minutes, 37 seconds]]]

Succeeded
