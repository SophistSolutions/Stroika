Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/6/17 15:55:23]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.7196 secs, and comparison 7.57592 sec, and warnIfPerfScore > 0.62, and perfScore=0.552199]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.964 secs, and comparison 5.83343 sec, and warnIfPerfScore > 0.65, and perfScore=0.417747]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 14.3956 secs, and comparison 12.4006 sec, and warnIfPerfScore > 1, and perfScore=0.861418]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.5943 secs, and comparison 14.2907 sec, and warnIfPerfScore > 1.15, and perfScore=0.979203]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.4773 secs, and comparison 4.21419 sec, and warnIfPerfScore > 0.5, and perfScore=0.312688]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.4143 secs, and comparison 5.13172 sec, and warnIfPerfScore > 0.68, and perfScore=0.382555]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.404 secs, and comparison 36.1355 sec, and warnIfPerfScore > 4.3, and perfScore=2.50871]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.2433 secs, and comparison 38.2691 sec, and warnIfPerfScore > 4, and perfScore=2.68682]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 14.4845 secs, and comparison 126.32 sec, and warnIfPerfScore > 10.4, and perfScore=8.72103]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.0884 secs, and comparison 19.7809 sec, and warnIfPerfScore > 3.2, and perfScore=1.40406]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.4075 secs, and comparison 15.8081 sec, and warnIfPerfScore > 1.8, and perfScore=1.38577]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.102 secs, and comparison 19.6424 sec, and warnIfPerfScore > 2.8, and perfScore=1.62306]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.4999 secs, and comparison 41.1322 sec, and warnIfPerfScore > 3.3, and perfScore=3.04686]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 13.9869 secs, and comparison 2.25228 sec, and warnIfPerfScore > 0.25, and perfScore=0.161028]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.4774 secs, and comparison 15.9349 sec, and warnIfPerfScore > 1.25, and perfScore=1.02955]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 14.1301 secs, and comparison 42.619 sec, and warnIfPerfScore > 7.7, and perfScore=3.01618]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 14.33 secs, and comparison 6.16034 sec, and warnIfPerfScore > 1.55, and perfScore=0.429892]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 13.4948 secs, and comparison 79.4136 sec, and warnIfPerfScore > 7.7, and perfScore=5.88473]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.4671 secs, and comparison 6.85306 sec, and warnIfPerfScore > 1, and perfScore=0.4737]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 17.5704 secs, and comparison 72.184 sec, and warnIfPerfScore > 7.9, and perfScore=4.10828]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 14.1899 secs, and comparison 8.49104 sec, and warnIfPerfScore > 0.8, and perfScore=0.598385]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.2263 secs, and comparison 17.6136 sec, and warnIfPerfScore > 1.7, and perfScore=1.2381]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.8999 secs, and comparison 5.41432 sec, and warnIfPerfScore > 0.55, and perfScore=0.419717]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.04214 sec, and warnIfPerfScore > 0.4, and perfScore=0.202809]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.50335 sec, and warnIfPerfScore > 1.1, and perfScore=0.36689]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.9893 secs, and comparison 18.9047 sec, and warnIfPerfScore > 2.4, and perfScore=1.35137]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.1772 secs, and comparison 25.849 sec, and warnIfPerfScore > 2.8, and perfScore=1.82328]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 56 seconds]]]

Succeeded
