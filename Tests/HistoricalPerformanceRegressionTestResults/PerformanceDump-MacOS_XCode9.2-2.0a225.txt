Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/3/18 23:10:22]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.1097 secs, and comparison 6.77672 sec, and warnIfPerfScore > 0.62, and perfScore=0.743902]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.13264 secs, and comparison 4.15997 sec, and warnIfPerfScore > 0.65, and perfScore=0.455506]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.4173 secs, and comparison 11.5444 sec, and warnIfPerfScore > 1.05, and perfScore=0.748798]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.0851 secs, and comparison 4.45488 sec, and warnIfPerfScore > 0.5, and perfScore=0.164477]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 25.5312 secs, and comparison 5.43954 sec, and warnIfPerfScore > 0.68, and perfScore=0.213054]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 17.9441 secs, and comparison 57.3986 sec, and warnIfPerfScore > 4.3, and perfScore=3.19874]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.6694 secs, and comparison 60.8742 sec, and warnIfPerfScore > 4, and perfScore=3.09486]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.9
	DETAILS:         	[baseline test 15.5131 secs, and comparison 153.897 sec, and warnIfPerfScore > 10.4, and perfScore=9.92051]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.0409 secs, and comparison 29.5484 sec, and warnIfPerfScore > 3.2, and perfScore=1.55184]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.24701 secs, and comparison 5.92462 sec, and warnIfPerfScore > 1.8, and perfScore=0.718396]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.4564 secs, and comparison 31.0277 sec, and warnIfPerfScore > 2.8, and perfScore=2.3058]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.9535 secs, and comparison 25.1678 sec, and warnIfPerfScore > 3.3, and perfScore=2.10546]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.28 secs, and comparison 2.91128 sec, and warnIfPerfScore > 0.25, and perfScore=0.237075]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.9564 secs, and comparison 18.5067 sec, and warnIfPerfScore > 1.4, and perfScore=1.03065]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.5673 secs, and comparison 32.1288 sec, and warnIfPerfScore > 7.7, and perfScore=2.77755]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.8061 secs, and comparison 3.83019 sec, and warnIfPerfScore > 1.55, and perfScore=0.354446]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 11.1429 secs, and comparison 75.2622 sec, and warnIfPerfScore > 7.7, and perfScore=6.7543]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.8246 secs, and comparison 6.51373 sec, and warnIfPerfScore > 1, and perfScore=0.601752]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 12.6173 secs, and comparison 68.9752 sec, and warnIfPerfScore > 7.9, and perfScore=5.46671]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.9275 secs, and comparison 6.75002 sec, and warnIfPerfScore > 0.8, and perfScore=0.617708]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 31.9708 secs, and comparison 40.0901 sec, and warnIfPerfScore > 1.7, and perfScore=1.25396]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.42603 secs, and comparison 6.25208 sec, and warnIfPerfScore > 0.55, and perfScore=0.972931]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.89254 sec, and warnIfPerfScore > 0.4, and perfScore=0.392836]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23009 sec, and warnIfPerfScore > 1.1, and perfScore=0.215339]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 36 seconds]]]

Succeeded
