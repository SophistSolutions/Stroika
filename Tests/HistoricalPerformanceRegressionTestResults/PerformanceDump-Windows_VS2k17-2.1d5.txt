Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/1/18 10:35:38]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 11.7498 secs, and comparison 5.82799 sec, and warnIfPerfScore > 0.62, and perfScore=0.496006]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.125 secs, and comparison 4.06448 sec, and warnIfPerfScore > 0.65, and perfScore=0.309674]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.0256 secs, and comparison 9.33306 sec, and warnIfPerfScore > 1.05, and perfScore=0.846493]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.99618 secs, and comparison 3.43792 sec, and warnIfPerfScore > 0.5, and perfScore=0.343923]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.2761 secs, and comparison 4.31669 sec, and warnIfPerfScore > 0.68, and perfScore=0.420071]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.6 secs, and comparison 29.5043 sec, and warnIfPerfScore > 4.3, and perfScore=2.54347]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.059 secs, and comparison 31.6771 sec, and warnIfPerfScore > 4, and perfScore=2.62684]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 11.0516 secs, and comparison 96.5105 sec, and warnIfPerfScore > 10.4, and perfScore=8.7327]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.4873 secs, and comparison 15.5096 sec, and warnIfPerfScore > 3.2, and perfScore=1.35015]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.76522 secs, and comparison 12.9806 sec, and warnIfPerfScore > 1.8, and perfScore=1.32927]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.35259 secs, and comparison 15.0526 sec, and warnIfPerfScore > 2.8, and perfScore=1.80214]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.601 secs, and comparison 32.1592 sec, and warnIfPerfScore > 3.3, and perfScore=2.77211]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.1125 secs, and comparison 1.34462 sec, and warnIfPerfScore > 0.25, and perfScore=0.111011]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.3451 secs, and comparison 12.0789 sec, and warnIfPerfScore > 1.4, and perfScore=1.06468]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.74092 secs, and comparison 36.3625 sec, and warnIfPerfScore > 7.7, and perfScore=3.73297]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.111 secs, and comparison 4.70448 sec, and warnIfPerfScore > 1.55, and perfScore=0.465283]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.7
	DETAILS:         	[baseline test 9.26929 secs, and comparison 71.5422 sec, and warnIfPerfScore > 9, and perfScore=7.7182]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.0797 secs, and comparison 6.38664 sec, and warnIfPerfScore > 1, and perfScore=0.633616]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 10.4366 secs, and comparison 64.2663 sec, and warnIfPerfScore > 7.9, and perfScore=6.15781]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.2267 secs, and comparison 7.15403 sec, and warnIfPerfScore > 0.8, and perfScore=0.699541]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.0381 secs, and comparison 15.5518 sec, and warnIfPerfScore > 1.7, and perfScore=1.29189]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.0002 secs, and comparison 4.46279 sec, and warnIfPerfScore > 0.55, and perfScore=0.343287]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.60732 sec, and warnIfPerfScore > 0.4, and perfScore=0.173821]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.60137 sec, and warnIfPerfScore > 1.1, and perfScore=0.306758]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.1721 secs, and comparison 15.7201 sec, and warnIfPerfScore > 2.4, and perfScore=1.29149]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.1367 secs, and comparison 32.1047 sec, and warnIfPerfScore > 2.9, and perfScore=2.64525]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 26 seconds]]]

Succeeded
