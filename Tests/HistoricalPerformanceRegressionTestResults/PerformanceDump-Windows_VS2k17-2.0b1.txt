Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/29/18 8:36:37]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.4415 secs, and comparison 5.5036 sec, and warnIfPerfScore > 0.62, and perfScore=0.481022]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.5469 secs, and comparison 3.80694 sec, and warnIfPerfScore > 0.65, and perfScore=0.329693]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.2938 secs, and comparison 9.58449 sec, and warnIfPerfScore > 1.05, and perfScore=0.848651]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.77779 secs, and comparison 3.59111 sec, and warnIfPerfScore > 0.5, and perfScore=0.367272]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.79212 secs, and comparison 4.70129 sec, and warnIfPerfScore > 0.68, and perfScore=0.480109]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.1141 secs, and comparison 27.5562 sec, and warnIfPerfScore > 4.3, and perfScore=2.47938]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.5691 secs, and comparison 30.0399 sec, and warnIfPerfScore > 4, and perfScore=2.59657]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 10.9285 secs, and comparison 94.2292 sec, and warnIfPerfScore > 10.4, and perfScore=8.62235]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.052 secs, and comparison 14.7016 sec, and warnIfPerfScore > 3.2, and perfScore=1.33022]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.8061 secs, and comparison 13.7644 sec, and warnIfPerfScore > 1.8, and perfScore=1.27377]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.17059 secs, and comparison 13.814 sec, and warnIfPerfScore > 2.8, and perfScore=1.69069]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.769 secs, and comparison 36.1321 sec, and warnIfPerfScore > 3.3, and perfScore=3.07012]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.1412 secs, and comparison 1.33203 sec, and warnIfPerfScore > 0.25, and perfScore=0.109711]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.1553 secs, and comparison 11.9432 sec, and warnIfPerfScore > 1.4, and perfScore=1.07063]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.2789 secs, and comparison 36.0369 sec, and warnIfPerfScore > 7.7, and perfScore=3.19508]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.4404 secs, and comparison 5.08437 sec, and warnIfPerfScore > 1.55, and perfScore=0.444421]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 10.881 secs, and comparison 70.1753 sec, and warnIfPerfScore > 9, and perfScore=6.44935]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.5092 secs, and comparison 6.285 sec, and warnIfPerfScore > 1, and perfScore=0.546085]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.1983 secs, and comparison 61.218 sec, and warnIfPerfScore > 7.9, and perfScore=4.02794]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.3584 secs, and comparison 6.88492 sec, and warnIfPerfScore > 0.8, and perfScore=0.606155]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.2519 secs, and comparison 15.2731 sec, and warnIfPerfScore > 1.7, and perfScore=1.35738]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.4872 secs, and comparison 4.12054 sec, and warnIfPerfScore > 0.55, and perfScore=0.305516]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.55981 sec, and warnIfPerfScore > 0.4, and perfScore=0.170654]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.7097 sec, and warnIfPerfScore > 1.1, and perfScore=0.31398]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.5836 secs, and comparison 15.4211 sec, and warnIfPerfScore > 2.4, and perfScore=1.2255]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8281 secs, and comparison 32.3483 sec, and warnIfPerfScore > 2.9, and perfScore=2.73488]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 26 seconds]]]

Succeeded
