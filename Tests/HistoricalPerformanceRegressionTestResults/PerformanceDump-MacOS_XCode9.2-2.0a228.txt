Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/29/18 4:56:55]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.09576 secs, and comparison 6.77683 sec, and warnIfPerfScore > 0.62, and perfScore=0.745054]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.09019 secs, and comparison 4.16089 sec, and warnIfPerfScore > 0.65, and perfScore=0.457734]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 15.2412 secs, and comparison 11.5288 sec, and warnIfPerfScore > 1.05, and perfScore=0.756424]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.7124 secs, and comparison 4.54418 sec, and warnIfPerfScore > 0.5, and perfScore=0.170115]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 26.6659 secs, and comparison 5.45119 sec, and warnIfPerfScore > 0.68, and perfScore=0.204425]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.3193 secs, and comparison 58.7554 sec, and warnIfPerfScore > 4.3, and perfScore=3.20729]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 19.9768 secs, and comparison 60.8908 sec, and warnIfPerfScore > 4, and perfScore=3.04808]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.8
	DETAILS:         	[baseline test 15.6087 secs, and comparison 153.368 sec, and warnIfPerfScore > 10.4, and perfScore=9.82581]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 18.9721 secs, and comparison 30.3947 sec, and warnIfPerfScore > 3.2, and perfScore=1.60208]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.23661 secs, and comparison 5.94014 sec, and warnIfPerfScore > 1.8, and perfScore=0.721188]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.045 secs, and comparison 31.8117 sec, and warnIfPerfScore > 2.8, and perfScore=2.43862]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.6257 secs, and comparison 25.277 sec, and warnIfPerfScore > 3.3, and perfScore=2.17423]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.1122 secs, and comparison 2.98431 sec, and warnIfPerfScore > 0.25, and perfScore=0.246389]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.6563 secs, and comparison 18.4943 sec, and warnIfPerfScore > 1.4, and perfScore=1.04746]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.7693 secs, and comparison 32.1343 sec, and warnIfPerfScore > 7.7, and perfScore=2.73035]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.7675 secs, and comparison 3.83631 sec, and warnIfPerfScore > 1.55, and perfScore=0.356284]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 11.3432 secs, and comparison 74.7983 sec, and warnIfPerfScore > 7.7, and perfScore=6.59412]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.7708 secs, and comparison 6.44701 sec, and warnIfPerfScore > 1, and perfScore=0.598562]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7729 secs, and comparison 69.0463 sec, and warnIfPerfScore > 7.9, and perfScore=5.40568]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8373 secs, and comparison 6.75508 sec, and warnIfPerfScore > 0.8, and perfScore=0.623317]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 34.2172 secs, and comparison 39.7129 sec, and warnIfPerfScore > 1.7, and perfScore=1.16061]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.33333 secs, and comparison 6.4298 sec, and warnIfPerfScore > 0.55, and perfScore=1.01523]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.84844 sec, and warnIfPerfScore > 0.4, and perfScore=0.389896]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23131 sec, and warnIfPerfScore > 1.1, and perfScore=0.215421]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 40 seconds]]]

Succeeded
