Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/21/18 3:57:52]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.95681 secs, and comparison 4.4766 sec, and warnIfPerfScore > 0.62, and perfScore=0.751509]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.97182 secs, and comparison 2.76419 sec, and warnIfPerfScore > 0.65, and perfScore=0.462872]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.62882 secs, and comparison 6.98108 sec, and warnIfPerfScore > 1.05, and perfScore=1.05314]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.69908 secs, and comparison 2.80923 sec, and warnIfPerfScore > 0.5, and perfScore=0.492926]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 5.73179 secs, and comparison 3.76352 sec, and warnIfPerfScore > 0.68, and perfScore=0.656604]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 7.24135 secs, and comparison 24.8766 sec, and warnIfPerfScore > 4.3, and perfScore=3.43535]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 7.62403 secs, and comparison 25.6393 sec, and warnIfPerfScore > 4, and perfScore=3.36295]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.08124 secs, and comparison 102.542 sec, and warnIfPerfScore > 10.4, and perfScore=14.4808]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.57937 secs, and comparison 10.697 sec, and warnIfPerfScore > 3.2, and perfScore=1.24683]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.39166 secs, and comparison 4.94143 sec, and warnIfPerfScore > 1.8, and perfScore=0.916494]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 3.44201 secs, and comparison 14.2209 sec, and warnIfPerfScore > 2.8, and perfScore=4.13158]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 6.0226 secs, and comparison 32.2904 sec, and warnIfPerfScore > 3.3, and perfScore=5.36153]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.53121 secs, and comparison 2.50286 sec, and warnIfPerfScore > 0.25, and perfScore=0.383215]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.71663 secs, and comparison 5.45821 sec, and warnIfPerfScore > 1.4, and perfScore=1.15723]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 5.56513 secs, and comparison 19.502 sec, and warnIfPerfScore > 7.7, and perfScore=3.50432]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.0487 secs, and comparison 3.00198 sec, and warnIfPerfScore > 1.55, and perfScore=0.249154]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.8058 secs, and comparison 55.3098 sec, and warnIfPerfScore > 7.7, and perfScore=11.509]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.0708 secs, and comparison 5.31963 sec, and warnIfPerfScore > 1, and perfScore=0.48051]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 7.01238 secs, and comparison 50.4764 sec, and warnIfPerfScore > 7.9, and perfScore=7.19818]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.57239 secs, and comparison 5.00179 sec, and warnIfPerfScore > 0.8, and perfScore=0.522523]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.2586 secs, and comparison 11.2181 sec, and warnIfPerfScore > 1.7, and perfScore=1.09353]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.96547 secs, and comparison 3.06212 sec, and warnIfPerfScore > 0.55, and perfScore=0.439614]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.59157 sec, and warnIfPerfScore > 0.4, and perfScore=0.106105]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79337 sec, and warnIfPerfScore > 1.1, and perfScore=0.186224]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 19 seconds]]]

Succeeded
