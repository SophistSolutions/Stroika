Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/4/17 11:58:05]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.14923 secs, and comparison 6.78511 sec, and warnIfPerfScore > 0.62, and perfScore=0.741605]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.13272 secs, and comparison 4.19157 sec, and warnIfPerfScore > 0.65, and perfScore=0.458962]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 15.5031 secs, and comparison 11.4867 sec, and warnIfPerfScore > 1, and perfScore=0.740929]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.67567 secs, and comparison 9.12389 sec, and warnIfPerfScore > 1.15, and perfScore=0.942972]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.3128 secs, and comparison 4.46781 sec, and warnIfPerfScore > 0.5, and perfScore=0.163579]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.1945 secs, and comparison 5.44949 sec, and warnIfPerfScore > 0.68, and perfScore=0.208039]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.9488 secs, and comparison 61.0425 sec, and warnIfPerfScore > 4.3, and perfScore=3.22145]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 20.3269 secs, and comparison 63.767 sec, and warnIfPerfScore > 4, and perfScore=3.13708]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 15.7888 secs, and comparison 159.969 sec, and warnIfPerfScore > 10.4, and perfScore=10.1318]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.8068 secs, and comparison 31.925 sec, and warnIfPerfScore > 3.2, and perfScore=1.61182]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.4522 secs, and comparison 5.89745 sec, and warnIfPerfScore > 1.8, and perfScore=0.697742]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.7348 secs, and comparison 31.2144 sec, and warnIfPerfScore > 2.8, and perfScore=2.45111]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.7338 secs, and comparison 24.8651 sec, and warnIfPerfScore > 3.3, and perfScore=2.11911]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.2394 secs, and comparison 2.99314 sec, and warnIfPerfScore > 0.25, and perfScore=0.244551]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.8888 secs, and comparison 18.3709 sec, and warnIfPerfScore > 1.25, and perfScore=1.02695]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8924 secs, and comparison 32.4721 sec, and warnIfPerfScore > 7.7, and perfScore=2.7305]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.2521 secs, and comparison 4.32296 sec, and warnIfPerfScore > 1.55, and perfScore=0.32621]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 11.3229 secs, and comparison 74.9511 sec, and warnIfPerfScore > 7.7, and perfScore=6.61941]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.2966 secs, and comparison 6.64864 sec, and warnIfPerfScore > 1, and perfScore=0.500027]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7695 secs, and comparison 68.8872 sec, and warnIfPerfScore > 7.9, and perfScore=5.39466]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.1478 secs, and comparison 7.26154 sec, and warnIfPerfScore > 0.8, and perfScore=0.552301]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.7554 secs, and comparison 38.8805 sec, and warnIfPerfScore > 1.7, and perfScore=1.18699]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.02716 secs, and comparison 7.1481 sec, and warnIfPerfScore > 0.55, and perfScore=1.01721]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.81044 sec, and warnIfPerfScore > 0.4, and perfScore=0.387362]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.94365 sec, and warnIfPerfScore > 1.1, and perfScore=0.26291]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 23 seconds]]]

Succeeded
