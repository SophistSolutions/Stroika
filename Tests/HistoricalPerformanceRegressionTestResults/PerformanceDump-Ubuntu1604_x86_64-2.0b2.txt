Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/30/18 14:44:42]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.00904 secs, and comparison 4.62052 sec, and warnIfPerfScore > 0.62, and perfScore=0.768929]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.04811 secs, and comparison 2.89638 sec, and warnIfPerfScore > 0.65, and perfScore=0.47889]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.78314 secs, and comparison 7.17068 sec, and warnIfPerfScore > 1.05, and perfScore=1.05713]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.86599 secs, and comparison 2.86241 sec, and warnIfPerfScore > 0.5, and perfScore=0.487967]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 5.82594 secs, and comparison 3.91303 sec, and warnIfPerfScore > 0.68, and perfScore=0.671655]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 7.73751 secs, and comparison 25.4304 sec, and warnIfPerfScore > 4.3, and perfScore=3.28664]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.11663 secs, and comparison 27.4568 sec, and warnIfPerfScore > 4, and perfScore=3.38279]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 8.61089 secs, and comparison 90.817 sec, and warnIfPerfScore > 10.4, and perfScore=10.5468]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.19979 secs, and comparison 12.4155 sec, and warnIfPerfScore > 3.2, and perfScore=1.34954]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.72982 secs, and comparison 6.89064 sec, and warnIfPerfScore > 1.8, and perfScore=1.0239]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 3.84259 secs, and comparison 11.7332 sec, and warnIfPerfScore > 2.8, and perfScore=3.05345]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 4.53436 secs, and comparison 21.1343 sec, and warnIfPerfScore > 3.3, and perfScore=4.66093]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.58925 secs, and comparison 1.73627 sec, and warnIfPerfScore > 0.25, and perfScore=0.378335]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.80464 secs, and comparison 4.28811 sec, and warnIfPerfScore > 1.4, and perfScore=1.12707]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.70491 secs, and comparison 20.4185 sec, and warnIfPerfScore > 7.7, and perfScore=5.5112]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15.7954 secs, and comparison 2.65726 sec, and warnIfPerfScore > 1.55, and perfScore=0.168231]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 3.54538 secs, and comparison 56.9807 sec, and warnIfPerfScore > 9, and perfScore=16.0718]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.5315 secs, and comparison 4.74227 sec, and warnIfPerfScore > 1, and perfScore=0.450296]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.21501 secs, and comparison 52.8466 sec, and warnIfPerfScore > 7.9, and perfScore=10.1336]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.5153 secs, and comparison 5.29142 sec, and warnIfPerfScore > 0.8, and perfScore=0.422795]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.05501 secs, and comparison 11.8022 sec, and warnIfPerfScore > 1.7, and perfScore=1.30339]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.14237 secs, and comparison 3.38399 sec, and warnIfPerfScore > 0.55, and perfScore=0.473791]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.5892 sec, and warnIfPerfScore > 0.4, and perfScore=0.105947]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.90961 sec, and warnIfPerfScore > 1.1, and perfScore=0.193974]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 5 seconds]]]

Succeeded
