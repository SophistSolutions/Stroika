Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/14/18 2:08:31]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.82459 secs, and comparison 6.17065 sec, and warnIfPerfScore > 0.62, and perfScore=0.699256]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.82276 secs, and comparison 4.15464 sec, and warnIfPerfScore > 0.65, and perfScore=0.4709]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 15.0443 secs, and comparison 11.9835 sec, and warnIfPerfScore > 1.05, and perfScore=0.79655]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.3779 secs, and comparison 4.25337 sec, and warnIfPerfScore > 0.5, and perfScore=0.149883]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 28.4857 secs, and comparison 4.89306 sec, and warnIfPerfScore > 0.68, and perfScore=0.171773]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 19.1412 secs, and comparison 58.0166 sec, and warnIfPerfScore > 4.3, and perfScore=3.03098]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 20.1435 secs, and comparison 59.6709 sec, and warnIfPerfScore > 4, and perfScore=2.96229]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 16.0845 secs, and comparison 150.998 sec, and warnIfPerfScore > 10.4, and perfScore=9.38783]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 21.0325 secs, and comparison 30.779 sec, and warnIfPerfScore > 3.2, and perfScore=1.4634]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.29878 secs, and comparison 5.95059 sec, and warnIfPerfScore > 1.8, and perfScore=0.717045]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.3228 secs, and comparison 32.1905 sec, and warnIfPerfScore > 2.8, and perfScore=2.2475]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 11.2503 secs, and comparison 22.5282 sec, and warnIfPerfScore > 3.3, and perfScore=2.00246]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.5215 secs, and comparison 1.90159 sec, and warnIfPerfScore > 0.25, and perfScore=0.165047]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.3714 secs, and comparison 18.0979 sec, and warnIfPerfScore > 1.4, and perfScore=1.04182]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.249 secs, and comparison 34.473 sec, and warnIfPerfScore > 7.7, and perfScore=2.81435]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.8826 secs, and comparison 4.27128 sec, and warnIfPerfScore > 1.55, and perfScore=0.331553]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 11.7837 secs, and comparison 75.1906 sec, and warnIfPerfScore > 9, and perfScore=6.38088]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 12.9408 secs, and comparison 6.63393 sec, and warnIfPerfScore > 1, and perfScore=0.512636]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.2657 secs, and comparison 69.8925 sec, and warnIfPerfScore > 7.9, and perfScore=5.26865]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.9485 secs, and comparison 7.20309 sec, and warnIfPerfScore > 0.8, and perfScore=0.556287]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.999 secs, and comparison 42.134 sec, and warnIfPerfScore > 1.7, and perfScore=1.40451]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.53315 secs, and comparison 6.17558 sec, and warnIfPerfScore > 0.55, and perfScore=0.945268]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15 secs, and comparison 7.05423 sec, and warnIfPerfScore > 0.4, and perfScore=0.470282]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78529 sec, and warnIfPerfScore > 1.1, and perfScore=0.185686]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 49 seconds]]]

Succeeded
