Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/1/18 3:01:15]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.79729 secs, and comparison 6.17476 sec, and warnIfPerfScore > 0.62, and perfScore=0.701894]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.80071 secs, and comparison 5.26587 sec, and warnIfPerfScore > 0.65, and perfScore=0.598346]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.5958 secs, and comparison 11.6286 sec, and warnIfPerfScore > 1.05, and perfScore=0.745623]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 27.739 secs, and comparison 4.198 sec, and warnIfPerfScore > 0.5, and perfScore=0.151339]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.1906 secs, and comparison 4.96106 sec, and warnIfPerfScore > 0.68, and perfScore=0.182455]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 19.3613 secs, and comparison 57.2007 sec, and warnIfPerfScore > 4.3, and perfScore=2.95438]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 20.6126 secs, and comparison 58.7654 sec, and warnIfPerfScore > 4, and perfScore=2.85094]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 15.8945 secs, and comparison 150.117 sec, and warnIfPerfScore > 10.4, and perfScore=9.44459]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.3321 secs, and comparison 30.432 sec, and warnIfPerfScore > 3.2, and perfScore=1.49674]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.13684 secs, and comparison 5.932 sec, and warnIfPerfScore > 1.8, and perfScore=0.72903]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.885 secs, and comparison 31.2188 sec, and warnIfPerfScore > 2.8, and perfScore=2.24838]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.0031 secs, and comparison 19.6141 sec, and warnIfPerfScore > 3.3, and perfScore=1.7826]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.3925 secs, and comparison 1.86163 sec, and warnIfPerfScore > 0.25, and perfScore=0.163409]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.3076 secs, and comparison 16.8538 sec, and warnIfPerfScore > 1.4, and perfScore=1.03349]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.0181 secs, and comparison 33.7096 sec, and warnIfPerfScore > 7.7, and perfScore=2.80491]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.9433 secs, and comparison 4.35619 sec, and warnIfPerfScore > 1.55, and perfScore=0.336558]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 11.5885 secs, and comparison 75.2954 sec, and warnIfPerfScore > 9, and perfScore=6.49742]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 12.9759 secs, and comparison 6.62899 sec, and warnIfPerfScore > 1, and perfScore=0.510869]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.0808 secs, and comparison 69.5143 sec, and warnIfPerfScore > 7.9, and perfScore=5.31424]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 12.9208 secs, and comparison 7.15551 sec, and warnIfPerfScore > 0.8, and perfScore=0.553798]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.7016 secs, and comparison 41.6832 sec, and warnIfPerfScore > 1.7, and perfScore=1.4034]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 6.69928 secs, and comparison 5.61665 sec, and warnIfPerfScore > 0.55, and perfScore=0.838396]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15 secs, and comparison 7.02672 sec, and warnIfPerfScore > 0.4, and perfScore=0.468448]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79649 sec, and warnIfPerfScore > 1.1, and perfScore=0.186433]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 35 seconds]]]

Succeeded
