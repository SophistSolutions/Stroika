Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/17/18 4:15:39]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.93029 secs, and comparison 4.62323 sec, and warnIfPerfScore > 0.62, and perfScore=0.779596]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.91552 secs, and comparison 2.86522 sec, and warnIfPerfScore > 0.65, and perfScore=0.484358]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.25426 secs, and comparison 6.87589 sec, and warnIfPerfScore > 1.05, and perfScore=1.09939]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.39848 secs, and comparison 2.78341 sec, and warnIfPerfScore > 0.5, and perfScore=0.819017]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.13008 secs, and comparison 3.90722 sec, and warnIfPerfScore > 0.68, and perfScore=0.94604]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 6.7121 secs, and comparison 31.9147 sec, and warnIfPerfScore > 4.3, and perfScore=4.75479]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 7.70361 secs, and comparison 33.275 sec, and warnIfPerfScore > 4, and perfScore=4.3194]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	33
	DETAILS:         	[baseline test 10.6102 secs, and comparison 346.808 sec, and warnIfPerfScore > 10.4, and perfScore=32.6864]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.38193 secs, and comparison 10.2569 sec, and warnIfPerfScore > 3.2, and perfScore=2.34073]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.33524 secs, and comparison 8.41482 sec, and warnIfPerfScore > 1.8, and perfScore=1.00955]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 2.26953 secs, and comparison 10.8288 sec, and warnIfPerfScore > 2.8, and perfScore=4.77139]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.77685 secs, and comparison 5.09258 sec, and warnIfPerfScore > 1.1, and perfScore=0.751467]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.5374 secs, and comparison 2.6872 sec, and warnIfPerfScore > 0.25, and perfScore=0.356516]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.50582 secs, and comparison 3.15317 sec, and warnIfPerfScore > 1.4, and perfScore=1.25834]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 23.9545 secs, and comparison 24.3025 sec, and warnIfPerfScore > 7.7, and perfScore=1.01453]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 14.9373 secs, and comparison 2.49911 sec, and warnIfPerfScore > 1.55, and perfScore=0.167307]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 23.3013 secs, and comparison 55.0104 sec, and warnIfPerfScore > 9, and perfScore=2.36083]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.4834 secs, and comparison 4.95969 sec, and warnIfPerfScore > 1, and perfScore=0.473101]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 24.1795 secs, and comparison 52.8839 sec, and warnIfPerfScore > 7.9, and perfScore=2.18714]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.524 secs, and comparison 4.74004 sec, and warnIfPerfScore > 0.8, and perfScore=0.411321]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.77628 secs, and comparison 10.869 sec, and warnIfPerfScore > 1.7, and perfScore=1.39771]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.97948 secs, and comparison 2.31246 sec, and warnIfPerfScore > 0.55, and perfScore=0.331323]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 15 secs, and comparison 1.3209 sec, and warnIfPerfScore > 0.4, and perfScore=0.0880598]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.83058 sec, and warnIfPerfScore > 1.1, and perfScore=0.188705]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 3 seconds]]]

Succeeded
