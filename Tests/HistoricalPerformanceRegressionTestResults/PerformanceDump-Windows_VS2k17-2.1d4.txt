Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/13/18 10:46:59]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 11.5148 secs, and comparison 5.94225 sec, and warnIfPerfScore > 0.62, and perfScore=0.516053]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.0203 secs, and comparison 4.03713 sec, and warnIfPerfScore > 0.65, and perfScore=0.310065]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.0062 secs, and comparison 9.2567 sec, and warnIfPerfScore > 1.05, and perfScore=0.84104]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.62859 secs, and comparison 3.38357 sec, and warnIfPerfScore > 0.5, and perfScore=0.351408]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.74379 secs, and comparison 4.31281 sec, and warnIfPerfScore > 0.68, and perfScore=0.442621]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.3385 secs, and comparison 28.8471 sec, and warnIfPerfScore > 4.3, and perfScore=2.54417]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.7716 secs, and comparison 30.9192 sec, and warnIfPerfScore > 4, and perfScore=2.62659]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 11.0535 secs, and comparison 94.9875 sec, and warnIfPerfScore > 10.4, and perfScore=8.59343]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.1974 secs, and comparison 15.4711 sec, and warnIfPerfScore > 3.2, and perfScore=1.38167]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.7989 secs, and comparison 12.773 sec, and warnIfPerfScore > 1.8, and perfScore=1.30351]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.09043 secs, and comparison 14.9808 sec, and warnIfPerfScore > 2.8, and perfScore=1.85167]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.4217 secs, and comparison 31.5207 sec, and warnIfPerfScore > 3.3, and perfScore=2.75972]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.1277 secs, and comparison 1.33645 sec, and warnIfPerfScore > 0.25, and perfScore=0.110198]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2847 secs, and comparison 11.8424 sec, and warnIfPerfScore > 1.4, and perfScore=1.04942]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.59466 secs, and comparison 35.8306 sec, and warnIfPerfScore > 7.7, and perfScore=3.73443]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.0835 secs, and comparison 4.64478 sec, and warnIfPerfScore > 1.55, and perfScore=0.460632]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 9.20813 secs, and comparison 69.9882 sec, and warnIfPerfScore > 9, and perfScore=7.6007]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.94189 secs, and comparison 6.23575 sec, and warnIfPerfScore > 1, and perfScore=0.62722]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 10.4432 secs, and comparison 60.9676 sec, and warnIfPerfScore > 7.9, and perfScore=5.838]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 9.92091 secs, and comparison 6.87831 sec, and warnIfPerfScore > 0.8, and perfScore=0.693315]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.7708 secs, and comparison 15.8424 sec, and warnIfPerfScore > 1.7, and perfScore=1.34591]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.2295 secs, and comparison 4.58763 sec, and warnIfPerfScore > 0.55, and perfScore=0.346773]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.71675 sec, and warnIfPerfScore > 0.4, and perfScore=0.181117]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.79515 sec, and warnIfPerfScore > 1.1, and perfScore=0.319677]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.3986 secs, and comparison 15.2933 sec, and warnIfPerfScore > 2.4, and perfScore=1.23347]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8832 secs, and comparison 31.7756 sec, and warnIfPerfScore > 2.9, and perfScore=2.67399]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 12 seconds]]]

Succeeded
