Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/6/18 4:14:44]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.71828 secs, and comparison 4.44657 sec, and warnIfPerfScore > 0.62, and perfScore=0.777607]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.71083 secs, and comparison 2.75934 sec, and warnIfPerfScore > 0.65, and perfScore=0.483176]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.12804 secs, and comparison 6.67396 sec, and warnIfPerfScore > 1.05, and perfScore=1.08909]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 3.54948 secs, and comparison 2.65432 sec, and warnIfPerfScore > 0.5, and perfScore=0.747808]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.15442 secs, and comparison 3.75555 sec, and warnIfPerfScore > 0.68, and perfScore=0.903987]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.6299 secs, and comparison 51.7906 sec, and warnIfPerfScore > 4.3, and perfScore=3.79977]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 14.6399 secs, and comparison 56.9928 sec, and warnIfPerfScore > 4, and perfScore=3.89298]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	28
	DETAILS:         	[baseline test 13.6511 secs, and comparison 387.4 sec, and warnIfPerfScore > 10.4, and perfScore=28.3787]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.54291 secs, and comparison 9.59831 sec, and warnIfPerfScore > 3.2, and perfScore=2.11281]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.08329 secs, and comparison 8.97628 sec, and warnIfPerfScore > 1.8, and perfScore=0.988219]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 2.22332 secs, and comparison 10.0792 sec, and warnIfPerfScore > 2.8, and perfScore=4.53338]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.94613 secs, and comparison 19.6637 sec, and warnIfPerfScore > 3.3, and perfScore=2.83089]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.52015 secs, and comparison 2.45768 sec, and warnIfPerfScore > 0.25, and perfScore=0.376936]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.54521 secs, and comparison 4.01139 sec, and warnIfPerfScore > 1.4, and perfScore=1.1315]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 27.208 secs, and comparison 23.9266 sec, and warnIfPerfScore > 7.7, and perfScore=0.879396]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 19.6985 secs, and comparison 2.38276 sec, and warnIfPerfScore > 1.55, and perfScore=0.120961]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 25.4473 secs, and comparison 53.3804 sec, and warnIfPerfScore > 7.7, and perfScore=2.09768]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.1873 secs, and comparison 4.54788 sec, and warnIfPerfScore > 1, and perfScore=0.373166]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 29.607 secs, and comparison 48.8473 sec, and warnIfPerfScore > 7.9, and perfScore=1.64986]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.9586 secs, and comparison 4.86609 sec, and warnIfPerfScore > 0.8, and perfScore=0.325303]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.59312 secs, and comparison 10.4585 sec, and warnIfPerfScore > 1.7, and perfScore=1.37737]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.76692 secs, and comparison 2.27248 sec, and warnIfPerfScore > 0.55, and perfScore=0.335822]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.51777 sec, and warnIfPerfScore > 0.4, and perfScore=0.101185]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.67546 sec, and warnIfPerfScore > 1.1, and perfScore=0.178364]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 50 seconds]]]

Succeeded
