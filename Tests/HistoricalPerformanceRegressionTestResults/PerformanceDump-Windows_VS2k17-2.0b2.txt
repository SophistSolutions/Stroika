Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/31/18 12:34:35]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.1638 secs, and comparison 5.51788 sec, and warnIfPerfScore > 0.62, and perfScore=0.494267]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.9189 secs, and comparison 3.60155 sec, and warnIfPerfScore > 0.65, and perfScore=0.329846]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.7956 secs, and comparison 9.24461 sec, and warnIfPerfScore > 1.05, and perfScore=0.856333]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.38998 secs, and comparison 3.41661 sec, and warnIfPerfScore > 0.5, and perfScore=0.363857]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.45458 secs, and comparison 4.31772 sec, and warnIfPerfScore > 0.68, and perfScore=0.45668]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.0649 secs, and comparison 27.8802 sec, and warnIfPerfScore > 4.3, and perfScore=2.5197]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.4809 secs, and comparison 30.0794 sec, and warnIfPerfScore > 4, and perfScore=2.61996]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 11.0482 secs, and comparison 94.0872 sec, and warnIfPerfScore > 10.4, and perfScore=8.51609]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.042 secs, and comparison 14.6569 sec, and warnIfPerfScore > 3.2, and perfScore=1.32737]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.0522 secs, and comparison 13.7711 sec, and warnIfPerfScore > 1.8, and perfScore=1.246]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.24178 secs, and comparison 13.9333 sec, and warnIfPerfScore > 2.8, and perfScore=1.69057]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 11.7136 secs, and comparison 35.5973 sec, and warnIfPerfScore > 3.3, and perfScore=3.03897]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.2112 secs, and comparison 1.32087 sec, and warnIfPerfScore > 0.25, and perfScore=0.108168]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2033 secs, and comparison 11.7424 sec, and warnIfPerfScore > 1.4, and perfScore=1.04811]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.2864 secs, and comparison 36.0356 sec, and warnIfPerfScore > 7.7, and perfScore=3.19282]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.6383 secs, and comparison 5.1033 sec, and warnIfPerfScore > 1.55, and perfScore=0.438493]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 11.0582 secs, and comparison 70.2234 sec, and warnIfPerfScore > 9, and perfScore=6.35034]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 11.598 secs, and comparison 6.27148 sec, and warnIfPerfScore > 1, and perfScore=0.540739]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.2277 secs, and comparison 61.499 sec, and warnIfPerfScore > 7.9, and perfScore=4.03862]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.3214 secs, and comparison 6.89 sec, and warnIfPerfScore > 0.8, and perfScore=0.608583]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.3042 secs, and comparison 15.3238 sec, and warnIfPerfScore > 1.7, and perfScore=1.35558]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4866 secs, and comparison 4.32878 sec, and warnIfPerfScore > 0.55, and perfScore=0.32097]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.56328 sec, and warnIfPerfScore > 0.4, and perfScore=0.170886]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.70402 sec, and warnIfPerfScore > 1.1, and perfScore=0.313601]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.658 secs, and comparison 15.3211 sec, and warnIfPerfScore > 2.4, and perfScore=1.21039]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9585 secs, and comparison 32.5917 sec, and warnIfPerfScore > 2.9, and perfScore=2.72541]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 24 seconds]]]

Succeeded
