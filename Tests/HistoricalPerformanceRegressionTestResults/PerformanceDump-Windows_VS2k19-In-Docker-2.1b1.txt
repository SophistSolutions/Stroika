Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jun  6 20:18:24 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 14.048 secs, and comparison 5.86995 sec, and warnIfPerfScore > 0.62, and perfScore=0.417848]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.8185 secs, and comparison 3.74003 sec, and warnIfPerfScore > 0.5, and perfScore=0.291769]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.6492 secs, and comparison 10.0379 sec, and warnIfPerfScore > 1.05, and perfScore=0.861677]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.8302 secs, and comparison 4.50915 sec, and warnIfPerfScore > 0.48, and perfScore=0.416348]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.4155 secs, and comparison 4.77973 sec, and warnIfPerfScore > 0.57, and perfScore=0.418706]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.3857 secs, and comparison 26.7321 sec, and warnIfPerfScore > 2.9, and perfScore=2.15831]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.8061 secs, and comparison 28.898 sec, and warnIfPerfScore > 2.9, and perfScore=2.25658]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.7
	DETAILS:         	[baseline test 12.5084 secs, and comparison 96.3713 sec, and warnIfPerfScore > 9.7, and perfScore=7.70455]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.2837 secs, and comparison 12.665 sec, and warnIfPerfScore > 1.6, and perfScore=1.23156]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.2414 secs, and comparison 14.2343 sec, and warnIfPerfScore > 1.5, and perfScore=0.999501]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.32765 secs, and comparison 13.6782 sec, and warnIfPerfScore > 2.1, and perfScore=1.46641]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 14.0471 secs, and comparison 10.2009 sec, and warnIfPerfScore > 1.3, and perfScore=0.726196]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.6943 secs, and comparison 3.17368 sec, and warnIfPerfScore > 0.23, and perfScore=0.21598]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 16.3344 secs, and comparison 14.7305 sec, and warnIfPerfScore > 1.3, and perfScore=0.901811]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 10.6863 secs, and comparison 8.70601 sec, and warnIfPerfScore > 1.2, and perfScore=0.81469]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.6018 secs, and comparison 2.26555 sec, and warnIfPerfScore > 0.33, and perfScore=0.213695]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 10.1757 secs, and comparison 49.6573 sec, and warnIfPerfScore > 6, and perfScore=4.87998]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.5484 secs, and comparison 4.75267 sec, and warnIfPerfScore > 0.5, and perfScore=0.450559]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.5756 secs, and comparison 44.5577 sec, and warnIfPerfScore > 4.4, and perfScore=3.84929]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.8291 secs, and comparison 5.19916 sec, and warnIfPerfScore > 0.6, and perfScore=0.480112]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.2381 secs, and comparison 23.5501 sec, and warnIfPerfScore > 1.5, and perfScore=1.22414]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.76 secs, and comparison 4.62984 sec, and warnIfPerfScore > 0.55, and perfScore=0.430281]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.95442 sec, and warnIfPerfScore > 0.25, and perfScore=0.130295]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.36226 sec, and warnIfPerfScore > 0.5, and perfScore=0.290817]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.0842 secs, and comparison 22.2901 sec, and warnIfPerfScore > 2, and perfScore=1.84456]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 12.2086 secs, and comparison 36.2459 sec, and warnIfPerfScore > 3.1, and perfScore=2.96888]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 41 seconds]]]

Succeeded
