Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 10 8:51:2 2018]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.3227 secs, and comparison 5.4417 sec, and warnIfPerfScore > 0.62, and perfScore=0.480601]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.1264 secs, and comparison 3.83968 sec, and warnIfPerfScore > 0.5, and perfScore=0.345097]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.9987 secs, and comparison 9.23393 sec, and warnIfPerfScore > 1.05, and perfScore=0.839549]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.71568 secs, and comparison 3.91991 sec, and warnIfPerfScore > 0.45, and perfScore=0.403463]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.47204 secs, and comparison 4.2829 sec, and warnIfPerfScore > 0.55, and perfScore=0.452163]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.8223 secs, and comparison 27.3541 sec, and warnIfPerfScore > 2.8, and perfScore=2.52757]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.3938 secs, and comparison 28.9491 sec, and warnIfPerfScore > 2.9, and perfScore=2.54077]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 11.1457 secs, and comparison 90.8495 sec, and warnIfPerfScore > 9.7, and perfScore=8.15107]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.9633 secs, and comparison 14.6305 sec, and warnIfPerfScore > 1.6, and perfScore=1.33449]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.4339 secs, and comparison 13.9956 sec, and warnIfPerfScore > 1.5, and perfScore=1.22405]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.19672 secs, and comparison 15.2308 sec, and warnIfPerfScore > 2.1, and perfScore=1.85816]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4921 secs, and comparison 11.8953 sec, and warnIfPerfScore > 1.3, and perfScore=1.03509]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.9425 secs, and comparison 1.57679 sec, and warnIfPerfScore > 0.18, and perfScore=0.121831]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.3994 secs, and comparison 12.0276 sec, and warnIfPerfScore > 1.3, and perfScore=1.05511]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.70319 secs, and comparison 8.70188 sec, and warnIfPerfScore > 1.2, and perfScore=0.896806]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.0614 secs, and comparison 2.17793 sec, and warnIfPerfScore > 0.33, and perfScore=0.216464]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.3309 secs, and comparison 45.5155 sec, and warnIfPerfScore > 6, and perfScore=4.87793]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.97524 secs, and comparison 4.19961 sec, and warnIfPerfScore > 0.5, and perfScore=0.421004]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.5323 secs, and comparison 40.5463 sec, and warnIfPerfScore > 4.4, and perfScore=3.84969]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.0451 secs, and comparison 4.63978 sec, and warnIfPerfScore > 0.6, and perfScore=0.461895]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.4058 secs, and comparison 17.9016 sec, and warnIfPerfScore > 1.5, and perfScore=1.24267]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9198 secs, and comparison 4.31832 sec, and warnIfPerfScore > 0.55, and perfScore=0.33424]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.63926 sec, and warnIfPerfScore > 0.25, and perfScore=0.109284]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.62146 sec, and warnIfPerfScore > 0.5, and perfScore=0.374764]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.6918 secs, and comparison 17.5791 sec, and warnIfPerfScore > 1.9, and perfScore=1.38507]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.1641 secs, and comparison 32.0061 sec, and warnIfPerfScore > 3, and perfScore=2.63119]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 35 seconds]]]

Succeeded
