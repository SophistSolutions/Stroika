Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/7/17 7:57:31]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.9172 secs, and comparison 5.81448 sec, and warnIfPerfScore > 0.62, and perfScore=0.532599]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3347 secs, and comparison 4.48383 sec, and warnIfPerfScore > 0.65, and perfScore=0.433861]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 14.4758 secs, and comparison 11.9987 sec, and warnIfPerfScore > 1, and perfScore=0.828877]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.9543 secs, and comparison 15.2152 sec, and warnIfPerfScore > 1.15, and perfScore=1.01745]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.0916 secs, and comparison 3.44867 sec, and warnIfPerfScore > 0.5, and perfScore=0.341736]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.4033 secs, and comparison 5.31016 sec, and warnIfPerfScore > 0.68, and perfScore=0.428125]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.1082 secs, and comparison 41.198 sec, and warnIfPerfScore > 4.3, and perfScore=2.72687]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 14.3739 secs, and comparison 42.0519 sec, and warnIfPerfScore > 4, and perfScore=2.92558]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 12.0126 secs, and comparison 114.818 sec, and warnIfPerfScore > 10.4, and perfScore=9.55819]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.1483 secs, and comparison 23.4029 sec, and warnIfPerfScore > 3.2, and perfScore=1.54492]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.703 secs, and comparison 20.3964 sec, and warnIfPerfScore > 1.8, and perfScore=1.38723]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 16.7993 secs, and comparison 29.3018 sec, and warnIfPerfScore > 2.8, and perfScore=1.74422]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 16.3294 secs, and comparison 50.1373 sec, and warnIfPerfScore > 3.3, and perfScore=3.07037]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.4985 secs, and comparison 3.54771 sec, and warnIfPerfScore > 0.25, and perfScore=0.215032]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.0727 secs, and comparison 19.0285 sec, and warnIfPerfScore > 1.25, and perfScore=1.05289]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.6141 secs, and comparison 60.5483 sec, and warnIfPerfScore > 7.7, and perfScore=3.08697]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15.9252 secs, and comparison 7.02369 sec, and warnIfPerfScore > 1.55, and perfScore=0.441044]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.2871 secs, and comparison 59.8833 sec, and warnIfPerfScore > 7.7, and perfScore=3.10484]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 16.1874 secs, and comparison 7.2388 sec, and warnIfPerfScore > 1.4, and perfScore=0.447187]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 18.2956 secs, and comparison 77.273 sec, and warnIfPerfScore > 7.9, and perfScore=4.22359]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 14.7741 secs, and comparison 8.96954 sec, and warnIfPerfScore > 0.8, and perfScore=0.607114]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.3693 secs, and comparison 18.6187 sec, and warnIfPerfScore > 1.7, and perfScore=1.29572]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3669 secs, and comparison 4.46223 sec, and warnIfPerfScore > 0.55, and perfScore=0.430429]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.49028 sec, and warnIfPerfScore > 0.4, and perfScore=0.166019]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.77774 sec, and warnIfPerfScore > 1.1, and perfScore=0.385183]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 17.7606 secs, and comparison 24.2444 sec, and warnIfPerfScore > 2.4, and perfScore=1.36507]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.5189 secs, and comparison 29.843 sec, and warnIfPerfScore > 2.8, and perfScore=1.8066]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 55 seconds]]]

Succeeded
