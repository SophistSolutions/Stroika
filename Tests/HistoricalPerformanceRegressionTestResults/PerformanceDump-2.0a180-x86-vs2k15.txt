Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 11/5/16 9:19:35]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.4327 secs, and comparison 5.65099 sec, and warnIfPerfScore > 0.62, and perfScore=0.541661]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.573 secs, and comparison 4.73536 sec, and warnIfPerfScore > 0.65, and perfScore=0.447871]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 13.8901 secs, and comparison 12.0743 sec, and warnIfPerfScore > 1, and perfScore=0.869273]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.0231 secs, and comparison 14.7564 sec, and warnIfPerfScore > 1.15, and perfScore=0.982248]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.476 secs, and comparison 3.26283 sec, and warnIfPerfScore > 0.5, and perfScore=0.311458]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.7899 secs, and comparison 5.00958 sec, and warnIfPerfScore > 0.68, and perfScore=0.391684]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.4242 secs, and comparison 40.0524 sec, and warnIfPerfScore > 4.3, and perfScore=2.77676]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 13.8894 secs, and comparison 40.2485 sec, and warnIfPerfScore > 4, and perfScore=2.89778]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 11.8749 secs, and comparison 104.469 sec, and warnIfPerfScore > 10.4, and perfScore=8.79749]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.7151 secs, and comparison 22.0525 sec, and warnIfPerfScore > 3.2, and perfScore=1.49862]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.0376 secs, and comparison 20.1123 sec, and warnIfPerfScore > 1.7, and perfScore=1.25407]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 15.4057 secs, and comparison 28.7649 sec, and warnIfPerfScore > 2.8, and perfScore=1.86716]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 16.4452 secs, and comparison 48.565 sec, and warnIfPerfScore > 3.3, and perfScore=2.95314]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 16.6292 secs, and comparison 3.44148 sec, and warnIfPerfScore > 0.22, and perfScore=0.206954]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.3182 secs, and comparison 17.8448 sec, and warnIfPerfScore > 1.25, and perfScore=1.16494]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 16.6151 secs, and comparison 58.4625 sec, and warnIfPerfScore > 7.7, and perfScore=3.51863]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15.7932 secs, and comparison 6.39178 sec, and warnIfPerfScore > 1.55, and perfScore=0.404717]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 16.3864 secs, and comparison 57.7818 sec, and warnIfPerfScore > 7.7, and perfScore=3.52621]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15.7967 secs, and comparison 6.49192 sec, and warnIfPerfScore > 1.4, and perfScore=0.410968]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 15.8862 secs, and comparison 74.7949 sec, and warnIfPerfScore > 7.9, and perfScore=4.70817]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 14.6077 secs, and comparison 8.50293 sec, and warnIfPerfScore > 0.8, and perfScore=0.582084]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.2087 secs, and comparison 20.7185 sec, and warnIfPerfScore > 1.7, and perfScore=1.27823]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.93381 secs, and comparison 4.23869 sec, and warnIfPerfScore > 0.55, and perfScore=0.426694]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.16977 sec, and warnIfPerfScore > 0.4, and perfScore=0.144651]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.24915 sec, and warnIfPerfScore > 1.1, and perfScore=0.349943]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.6726 secs, and comparison 23.8457 sec, and warnIfPerfScore > 2.4, and perfScore=1.3493]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.4708 secs, and comparison 29.7 sec, and warnIfPerfScore > 2.8, and perfScore=1.80319]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 15 seconds]]]

Succeeded
