Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jun  7 2:52:59 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.33449 secs, and comparison 6.69179 sec, and warnIfPerfScore > 0.62, and perfScore=0.71689]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.82981 secs, and comparison 4.45209 sec, and warnIfPerfScore > 0.5, and perfScore=0.452917]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 18.3552 secs, and comparison 14.7414 sec, and warnIfPerfScore > 1.05, and perfScore=0.803117]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 39.9118 secs, and comparison 6.74167 sec, and warnIfPerfScore > 0.48, and perfScore=0.168914]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 34.4109 secs, and comparison 6.14703 sec, and warnIfPerfScore > 0.55, and perfScore=0.178636]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 24.7492 secs, and comparison 60.5072 sec, and warnIfPerfScore > 2.9, and perfScore=2.44481]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 28.5662 secs, and comparison 66.5238 sec, and warnIfPerfScore > 2.9, and perfScore=2.32875]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 22.2242 secs, and comparison 187.766 sec, and warnIfPerfScore > 9.7, and perfScore=8.44871]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.1331 secs, and comparison 26.5282 sec, and warnIfPerfScore > 1.6, and perfScore=1.38651]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.74442 secs, and comparison 6.39843 sec, and warnIfPerfScore > 1.5, and perfScore=0.731715]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.6638 secs, and comparison 32.8912 sec, and warnIfPerfScore > 2.1, and perfScore=2.40718]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 11.3836 secs, and comparison 6.08533 sec, and warnIfPerfScore > 1.3, and perfScore=0.534572]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.8764 secs, and comparison 1.90357 sec, and warnIfPerfScore > 0.18, and perfScore=0.160282]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.6869 secs, and comparison 16.7476 sec, and warnIfPerfScore > 1.3, and perfScore=1.06762]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.1598 secs, and comparison 12.252 sec, and warnIfPerfScore > 1.2, and perfScore=1.09787]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 12.8063 secs, and comparison 2.36662 sec, and warnIfPerfScore > 0.33, and perfScore=0.184801]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 10.7059 secs, and comparison 56.2771 sec, and warnIfPerfScore > 6, and perfScore=5.25664]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.8796 secs, and comparison 4.9221 sec, and warnIfPerfScore > 0.5, and perfScore=0.382162]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 14.2493 secs, and comparison 50.5426 sec, and warnIfPerfScore > 4.4, and perfScore=3.54702]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.8499 secs, and comparison 4.91062 sec, and warnIfPerfScore > 0.6, and perfScore=0.382154]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.019 secs, and comparison 40.205 sec, and warnIfPerfScore > 1.5, and perfScore=1.38547]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.04017 secs, and comparison 5.78774 sec, and warnIfPerfScore > 0.55, and perfScore=0.822102]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15 secs, and comparison 6.44101 sec, and warnIfPerfScore > 0.25, and perfScore=0.429401]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.49087 sec, and warnIfPerfScore > 0.5, and perfScore=0.232725]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 46 seconds]]]

Succeeded
