Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/19/18 10:45:09]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.0051 secs, and comparison 5.14241 sec, and warnIfPerfScore > 0.62, and perfScore=0.467274]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.5278 secs, and comparison 3.35191 sec, and warnIfPerfScore > 0.65, and perfScore=0.318388]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.528 secs, and comparison 8.94816 sec, and warnIfPerfScore > 1.05, and perfScore=0.849939]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.34408 secs, and comparison 3.39163 sec, and warnIfPerfScore > 0.5, and perfScore=0.362971]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.22911 secs, and comparison 4.20645 sec, and warnIfPerfScore > 0.68, and perfScore=0.455781]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.9026 secs, and comparison 27.2029 sec, and warnIfPerfScore > 4.3, and perfScore=2.49508]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.398 secs, and comparison 29.2164 sec, and warnIfPerfScore > 4, and perfScore=2.5633]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 11.0808 secs, and comparison 90.4407 sec, and warnIfPerfScore > 10.4, and perfScore=8.16195]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.7069 secs, and comparison 14.016 sec, and warnIfPerfScore > 3.2, and perfScore=1.30906]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.1089 secs, and comparison 17.9837 sec, and warnIfPerfScore > 1.8, and perfScore=1.19027]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.98455 secs, and comparison 13.4261 sec, and warnIfPerfScore > 2.8, and perfScore=1.68151]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 11.2994 secs, and comparison 34.4513 sec, and warnIfPerfScore > 3.3, and perfScore=3.04896]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.8035 secs, and comparison 1.28258 sec, and warnIfPerfScore > 0.25, and perfScore=0.108661]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.8861 secs, and comparison 11.3902 sec, and warnIfPerfScore > 1.4, and perfScore=1.04631]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.3049 secs, and comparison 34.8196 sec, and warnIfPerfScore > 7.7, and perfScore=3.08004]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.046 secs, and comparison 4.74667 sec, and warnIfPerfScore > 1.55, and perfScore=0.429718]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 10.6813 secs, and comparison 67.6885 sec, and warnIfPerfScore > 7.7, and perfScore=6.33713]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.0859 secs, and comparison 6.07982 sec, and warnIfPerfScore > 1, and perfScore=0.548426]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 14.3934 secs, and comparison 58.8299 sec, and warnIfPerfScore > 7.9, and perfScore=4.08728]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8245 secs, and comparison 6.73449 sec, and warnIfPerfScore > 0.8, and perfScore=0.62215]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.0581 secs, and comparison 14.364 sec, and warnIfPerfScore > 1.7, and perfScore=1.29895]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.2248 secs, and comparison 4.10546 sec, and warnIfPerfScore > 0.55, and perfScore=0.310437]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.41891 sec, and warnIfPerfScore > 0.4, and perfScore=0.161261]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.38771 sec, and warnIfPerfScore > 1.1, and perfScore=0.292514]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.7082 secs, and comparison 14.6655 sec, and warnIfPerfScore > 2.4, and perfScore=1.25259]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.2543 secs, and comparison 30.086 sec, and warnIfPerfScore > 2.9, and perfScore=2.67329]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 36 seconds]]]

Succeeded
