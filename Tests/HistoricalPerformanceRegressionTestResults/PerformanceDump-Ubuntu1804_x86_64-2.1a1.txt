Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  3 23:45:10 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.95453 secs, and comparison 5.12543 sec, and warnIfPerfScore > 0.62, and perfScore=0.736992]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.9878 secs, and comparison 3.17635 sec, and warnIfPerfScore > 0.5, and perfScore=0.454557]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.28772 secs, and comparison 7.61362 sec, and warnIfPerfScore > 1.05, and perfScore=1.04472]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.61663 secs, and comparison 4.17592 sec, and warnIfPerfScore > 0.48, and perfScore=1.15464]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.14652 secs, and comparison 5.00263 sec, and warnIfPerfScore > 0.55, and perfScore=0.70001]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 5.42921 secs, and comparison 22.2044 sec, and warnIfPerfScore > 2.9, and perfScore=4.08979]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.58431 secs, and comparison 18.0494 sec, and warnIfPerfScore > 2.9, and perfScore=5.03567]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 7.37776 secs, and comparison 78.4022 sec, and warnIfPerfScore > 9.7, and perfScore=10.6268]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.74678 secs, and comparison 10.3919 sec, and warnIfPerfScore > 1.6, and perfScore=2.18926]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.41826 secs, and comparison 7.81778 sec, and warnIfPerfScore > 1.5, and perfScore=0.928669]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 4.07541 secs, and comparison 13.2301 sec, and warnIfPerfScore > 2.1, and perfScore=3.24632]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 6.37002 secs, and comparison 4.2891 sec, and warnIfPerfScore > 1.3, and perfScore=0.673326]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.61965 secs, and comparison 2.45762 sec, and warnIfPerfScore > 0.18, and perfScore=0.371262]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 4.59664 secs, and comparison 6.6142 sec, and warnIfPerfScore > 1.3, and perfScore=1.43892]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.37866 secs, and comparison 10.2792 sec, and warnIfPerfScore > 1.2, and perfScore=2.34757]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 16.02 secs, and comparison 2.33323 sec, and warnIfPerfScore > 0.33, and perfScore=0.145644]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 5.01677 secs, and comparison 44.2877 sec, and warnIfPerfScore > 6, and perfScore=8.82793]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.71 secs, and comparison 3.98658 sec, and warnIfPerfScore > 0.5, and perfScore=0.372228]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 5.98338 secs, and comparison 40.6169 sec, and warnIfPerfScore > 4.4, and perfScore=6.78828]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.9648 secs, and comparison 4.12695 sec, and warnIfPerfScore > 0.6, and perfScore=0.31832]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.4247 secs, and comparison 18.2434 sec, and warnIfPerfScore > 1.5, and perfScore=1.46833]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 11.5064 secs, and comparison 3.14596 sec, and warnIfPerfScore > 0.55, and perfScore=0.27341]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 15 secs, and comparison 1.24882 sec, and warnIfPerfScore > 0.25, and perfScore=0.083255]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.3399 sec, and warnIfPerfScore > 0.5, and perfScore=0.289327]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 3 seconds]]]

Succeeded
