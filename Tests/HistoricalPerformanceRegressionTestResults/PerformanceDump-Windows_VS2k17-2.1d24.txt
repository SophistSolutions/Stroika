Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri May 24 3:16:7 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.9707 secs, and comparison 5.61989 sec, and warnIfPerfScore > 0.62, and perfScore=0.469471]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.7139 secs, and comparison 3.88621 sec, and warnIfPerfScore > 0.5, and perfScore=0.331761]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.4888 secs, and comparison 9.67604 sec, and warnIfPerfScore > 1.05, and perfScore=0.842217]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3024 secs, and comparison 4.37905 sec, and warnIfPerfScore > 0.48, and perfScore=0.425052]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.0113 secs, and comparison 5.07159 sec, and warnIfPerfScore > 0.55, and perfScore=0.506587]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.3786 secs, and comparison 29.4446 sec, and warnIfPerfScore > 2.9, and perfScore=2.58771]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.0287 secs, and comparison 30.962 sec, and warnIfPerfScore > 2.9, and perfScore=2.57401]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 11.3768 secs, and comparison 97.3214 sec, and warnIfPerfScore > 9.7, and perfScore=8.55439]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.662 secs, and comparison 15.5569 sec, and warnIfPerfScore > 1.6, and perfScore=1.33398]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.4361 secs, and comparison 15.0255 sec, and warnIfPerfScore > 1.5, and perfScore=1.20821]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.02139 secs, and comparison 16.366 sec, and warnIfPerfScore > 2.1, and perfScore=1.81414]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 12.6105 secs, and comparison 12.421 sec, and warnIfPerfScore > 1.3, and perfScore=0.984971]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 13.4084 secs, and comparison 1.64817 sec, and warnIfPerfScore > 0.18, and perfScore=0.122921]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0388 secs, and comparison 14.0211 sec, and warnIfPerfScore > 1.3, and perfScore=1.07534]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.13 secs, and comparison 9.7688 sec, and warnIfPerfScore > 1.2, and perfScore=0.96434]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.8353 secs, and comparison 2.31087 sec, and warnIfPerfScore > 0.33, and perfScore=0.213273]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 10.2771 secs, and comparison 49.1905 sec, and warnIfPerfScore > 6, and perfScore=4.78642]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.4719 secs, and comparison 4.5264 sec, and warnIfPerfScore > 0.5, and perfScore=0.432244]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.9023 secs, and comparison 43.5344 sec, and warnIfPerfScore > 4.4, and perfScore=3.99314]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.8037 secs, and comparison 4.92082 sec, and warnIfPerfScore > 0.6, and perfScore=0.455476]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.7173 secs, and comparison 20.8584 sec, and warnIfPerfScore > 1.5, and perfScore=1.3271]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.5765 secs, and comparison 4.62815 sec, and warnIfPerfScore > 0.55, and perfScore=0.340894]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.68396 sec, and warnIfPerfScore > 0.25, and perfScore=0.112264]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15 secs, and comparison 6.09086 sec, and warnIfPerfScore > 0.5, and perfScore=0.406057]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.2464 secs, and comparison 18.5562 sec, and warnIfPerfScore > 1.9, and perfScore=1.40084]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.5909 secs, and comparison 33.5568 sec, and warnIfPerfScore > 3, and perfScore=2.66517]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 24 seconds]]]

Succeeded
