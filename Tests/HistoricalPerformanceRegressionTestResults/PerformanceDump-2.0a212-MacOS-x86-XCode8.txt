Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/5/17 1:02:02]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.13855 secs, and comparison 6.78253 sec, and warnIfPerfScore > 0.62, and perfScore=0.742189]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.13757 secs, and comparison 4.15425 sec, and warnIfPerfScore > 0.65, and perfScore=0.454633]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 15.5611 secs, and comparison 11.4794 sec, and warnIfPerfScore > 1, and perfScore=0.737701]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.63805 secs, and comparison 9.22004 sec, and warnIfPerfScore > 1.15, and perfScore=0.956629]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.3753 secs, and comparison 4.44988 sec, and warnIfPerfScore > 0.5, and perfScore=0.162551]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.0739 secs, and comparison 5.4373 sec, and warnIfPerfScore > 0.68, and perfScore=0.208534]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 18.0694 secs, and comparison 60.508 sec, and warnIfPerfScore > 4.3, and perfScore=3.34865]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 18.9954 secs, and comparison 64.4867 sec, and warnIfPerfScore > 4, and perfScore=3.39485]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 15.3724 secs, and comparison 162.851 sec, and warnIfPerfScore > 10.4, and perfScore=10.5938]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.6714 secs, and comparison 31.9722 sec, and warnIfPerfScore > 3.2, and perfScore=1.62532]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.58077 secs, and comparison 5.92994 sec, and warnIfPerfScore > 1.8, and perfScore=0.691074]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.7147 secs, and comparison 31.2834 sec, and warnIfPerfScore > 2.8, and perfScore=2.28101]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.7624 secs, and comparison 25.1716 sec, and warnIfPerfScore > 3.3, and perfScore=2.14]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.3372 secs, and comparison 2.83673 sec, and warnIfPerfScore > 0.25, and perfScore=0.229933]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.9593 secs, and comparison 18.4747 sec, and warnIfPerfScore > 1.25, and perfScore=1.0287]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.817 secs, and comparison 32.3112 sec, and warnIfPerfScore > 7.7, and perfScore=2.73429]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4431 secs, and comparison 4.24992 sec, and warnIfPerfScore > 1.55, and perfScore=0.316142]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.2517 secs, and comparison 75.1486 sec, and warnIfPerfScore > 7.7, and perfScore=6.67885]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 13.4744 secs, and comparison 6.6631 sec, and warnIfPerfScore > 1, and perfScore=0.494502]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.6531 secs, and comparison 68.777 sec, and warnIfPerfScore > 7.9, and perfScore=5.43559]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.2265 secs, and comparison 7.25783 sec, and warnIfPerfScore > 0.8, and perfScore=0.548734]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.4637 secs, and comparison 39.5584 sec, and warnIfPerfScore > 1.7, and perfScore=1.21854]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.3978 secs, and comparison 6.2405 sec, and warnIfPerfScore > 0.55, and perfScore=0.975413]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.87836 sec, and warnIfPerfScore > 0.4, and perfScore=0.391891]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.975 sec, and warnIfPerfScore > 1.1, and perfScore=0.265]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 24 seconds]]]

Succeeded
