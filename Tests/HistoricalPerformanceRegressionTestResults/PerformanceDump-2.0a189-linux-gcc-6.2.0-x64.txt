Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/15/17 15:20:34]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.76637 secs, and comparison 4.52331 sec, and warnIfPerfScore > 0.62, and perfScore=0.78443]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.6106 secs, and comparison 2.78237 sec, and warnIfPerfScore > 0.65, and perfScore=0.495913]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.63107 secs, and comparison 8.73293 sec, and warnIfPerfScore > 1, and perfScore=1.0118]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.55724 secs, and comparison 8.06261 sec, and warnIfPerfScore > 1.15, and perfScore=0.942197]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.92316 secs, and comparison 2.91006 sec, and warnIfPerfScore > 0.5, and perfScore=0.491303]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 7.19467 secs, and comparison 4.96955 sec, and warnIfPerfScore > 0.68, and perfScore=0.690726]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.2032 secs, and comparison 33.3814 sec, and warnIfPerfScore > 4.3, and perfScore=3.27165]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.0647 secs, and comparison 34.1698 sec, and warnIfPerfScore > 4, and perfScore=3.08819]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 7.70446 secs, and comparison 103.878 sec, and warnIfPerfScore > 10.4, and perfScore=13.4829]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.0786 secs, and comparison 14.5265 sec, and warnIfPerfScore > 3.2, and perfScore=1.31122]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.5692 secs, and comparison 5.21876 sec, and warnIfPerfScore > 1.8, and perfScore=0.937075]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 6.01263 secs, and comparison 19.3485 sec, and warnIfPerfScore > 2.8, and perfScore=3.21797]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 6.60456 secs, and comparison 30.7065 sec, and warnIfPerfScore > 3.3, and perfScore=4.6493]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.59928 secs, and comparison 2.39865 sec, and warnIfPerfScore > 0.25, and perfScore=0.363472]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.69109 secs, and comparison 6.18989 sec, and warnIfPerfScore > 1.25, and perfScore=1.08764]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.24915 secs, and comparison 31.4457 sec, and warnIfPerfScore > 7.7, and perfScore=3.39985]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.98509 secs, and comparison 3.35736 sec, and warnIfPerfScore > 1.55, and perfScore=0.420453]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 9.05156 secs, and comparison 31.2477 sec, and warnIfPerfScore > 7.7, and perfScore=3.45219]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.15264 secs, and comparison 3.37919 sec, and warnIfPerfScore > 1.4, and perfScore=0.41449]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 6.58611 secs, and comparison 59.3292 sec, and warnIfPerfScore > 7.9, and perfScore=9.00823]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.71774 secs, and comparison 6.05905 sec, and warnIfPerfScore > 0.8, and perfScore=0.78508]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.3683 secs, and comparison 13.9265 sec, and warnIfPerfScore > 1.7, and perfScore=1.22503]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 18.6474 secs, and comparison 4.37686 sec, and warnIfPerfScore > 0.55, and perfScore=0.234716]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.41966 sec, and warnIfPerfScore > 0.4, and perfScore=0.094644]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.56775 sec, and warnIfPerfScore > 1.1, and perfScore=0.23785]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 33 seconds]]]

Succeeded
