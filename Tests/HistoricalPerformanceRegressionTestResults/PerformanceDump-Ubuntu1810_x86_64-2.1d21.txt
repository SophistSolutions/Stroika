Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 10 1:42:7 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.93081 secs, and comparison 4.60681 sec, and warnIfPerfScore > 0.62, and perfScore=0.776759]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.98335 secs, and comparison 3.0558 sec, and warnIfPerfScore > 0.5, and perfScore=0.510717]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.37849 secs, and comparison 6.73109 sec, and warnIfPerfScore > 1.05, and perfScore=1.05528]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.53564 secs, and comparison 3.37318 sec, and warnIfPerfScore > 0.48, and perfScore=0.954052]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.2827 secs, and comparison 3.95012 sec, and warnIfPerfScore > 0.55, and perfScore=0.922345]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 3.05758 secs, and comparison 17.1011 sec, and warnIfPerfScore > 2.9, and perfScore=5.59302]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.63923 secs, and comparison 18.043 sec, and warnIfPerfScore > 2.9, and perfScore=4.95791]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 4.63653 secs, and comparison 59.0127 sec, and warnIfPerfScore > 9.7, and perfScore=12.7278]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.46643 secs, and comparison 9.81922 sec, and warnIfPerfScore > 1.6, and perfScore=2.19845]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.29011 secs, and comparison 4.98582 sec, and warnIfPerfScore > 1.5, and perfScore=0.942479]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 2.22987 secs, and comparison 10.4536 sec, and warnIfPerfScore > 2.1, and perfScore=4.68797]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.78404 secs, and comparison 7.23635 sec, and warnIfPerfScore > 1.3, and perfScore=0.929639]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.21143 secs, and comparison 3.43312 sec, and warnIfPerfScore > 0.18, and perfScore=0.41809]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 4.87115 secs, and comparison 7.1712 sec, and warnIfPerfScore > 1.3, and perfScore=1.47218]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.19693 secs, and comparison 12.5857 sec, and warnIfPerfScore > 1.2, and perfScore=2.03096]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 26.7629 secs, and comparison 2.49756 sec, and warnIfPerfScore > 0.33, and perfScore=0.0933214]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 5.76822 secs, and comparison 84.2953 sec, and warnIfPerfScore > 6, and perfScore=14.6137]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 18.5175 secs, and comparison 7.29231 sec, and warnIfPerfScore > 0.5, and perfScore=0.393807]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.8
	DETAILS:         	[baseline test 7.81881 secs, and comparison 76.4511 sec, and warnIfPerfScore > 4.4, and perfScore=9.77784]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 20.8539 secs, and comparison 7.3234 sec, and warnIfPerfScore > 0.6, and perfScore=0.351177]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.139 secs, and comparison 21.6347 sec, and warnIfPerfScore > 1.5, and perfScore=1.42908]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.046 secs, and comparison 4.54821 sec, and warnIfPerfScore > 0.55, and perfScore=0.348628]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.75581 sec, and warnIfPerfScore > 0.25, and perfScore=0.117054]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15 secs, and comparison 7.65874 sec, and warnIfPerfScore > 0.5, and perfScore=0.510583]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 33 seconds]]]

Succeeded
