Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/9/16 3:10:07]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.1695 secs, and comparison 5.70303 sec, and warnIfPerfScore > 0.6, and perfScore=0.560798]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.4653 secs, and comparison 5.82348 sec, and warnIfPerfScore > 0.6, and perfScore=0.556454]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 13.2823 secs, and comparison 12.0713 sec, and warnIfPerfScore > 0.97, and perfScore=0.908821]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.829 secs, and comparison 14.4411 sec, and warnIfPerfScore > 1.15, and perfScore=0.973846]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.4596 secs, and comparison 3.3531 sec, and warnIfPerfScore > 0.5, and perfScore=0.320576]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.6926 secs, and comparison 5.068 sec, and warnIfPerfScore > 0.68, and perfScore=0.399287]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.3995 secs, and comparison 40.1838 sec, and warnIfPerfScore > 4.3, and perfScore=2.79064]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 14.066 secs, and comparison 40.7385 sec, and warnIfPerfScore > 4, and perfScore=2.89624]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 11.8014 secs, and comparison 107.052 sec, and warnIfPerfScore > 9.1, and perfScore=9.07115]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.6677 secs, and comparison 22.85 sec, and warnIfPerfScore > 3.2, and perfScore=1.55784]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 17.4024 secs, and comparison 16.9025 sec, and warnIfPerfScore > 1.7, and perfScore=0.971275]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.1766 secs, and comparison 30.287 sec, and warnIfPerfScore > 2.8, and perfScore=1.99564]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 16.2902 secs, and comparison 48.92 sec, and warnIfPerfScore > 3.1, and perfScore=3.00302]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 16.5859 secs, and comparison 3.50237 sec, and warnIfPerfScore > 0.22, and perfScore=0.211165]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.8065 secs, and comparison 17.9287 sec, and warnIfPerfScore > 1.25, and perfScore=1.13426]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.6264 secs, and comparison 42.6415 sec, and warnIfPerfScore > 7.7, and perfScore=2.56468]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.9985 secs, and comparison 5.33043 sec, and warnIfPerfScore > 1.55, and perfScore=0.333182]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.3003 secs, and comparison 42.4587 sec, and warnIfPerfScore > 7.7, and perfScore=2.60478]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.9151 secs, and comparison 5.3984 sec, and warnIfPerfScore > 1.4, and perfScore=0.3392]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 16.0226 secs, and comparison 70.1338 sec, and warnIfPerfScore > 7.9, and perfScore=4.37718]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 14.2495 secs, and comparison 7.53999 sec, and warnIfPerfScore > 0.8, and perfScore=0.529142]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.1753 secs, and comparison 20.6217 sec, and warnIfPerfScore > 1.7, and perfScore=1.27489]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.59056 secs, and comparison 4.36467 sec, and warnIfPerfScore > 0.47, and perfScore=0.4551]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.15378 sec, and warnIfPerfScore > 0.4, and perfScore=0.143585]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.31251 sec, and warnIfPerfScore > 1.1, and perfScore=0.354167]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.4434 secs, and comparison 23.0139 sec, and warnIfPerfScore > 2.4, and perfScore=1.31935]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 15.11 secs, and comparison 28.257 sec, and warnIfPerfScore > 2.8, and perfScore=1.87008]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 36 seconds]]]

