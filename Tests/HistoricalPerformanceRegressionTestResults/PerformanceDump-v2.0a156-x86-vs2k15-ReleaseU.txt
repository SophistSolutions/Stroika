Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/9/16 11:55:35]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.3746 secs, and comparison 5.83185 sec, and warnIfPerfScore > 0.6, and perfScore=0.562125]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.4425 secs, and comparison 5.96061 sec, and warnIfPerfScore > 0.6, and perfScore=0.570801]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 13.3878 secs, and comparison 12.3183 sec, and warnIfPerfScore > 0.97, and perfScore=0.920114]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.0883 secs, and comparison 14.7414 sec, and warnIfPerfScore > 1.15, and perfScore=0.977013]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.4166 secs, and comparison 3.37525 sec, and warnIfPerfScore > 0.5, and perfScore=0.324027]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 13.0235 secs, and comparison 5.08212 sec, and warnIfPerfScore > 0.68, and perfScore=0.390227]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.4793 secs, and comparison 40.866 sec, and warnIfPerfScore > 4.3, and perfScore=2.82237]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 14.351 secs, and comparison 41.0178 sec, and warnIfPerfScore > 4, and perfScore=2.85818]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 12.017 secs, and comparison 106.446 sec, and warnIfPerfScore > 9.1, and perfScore=8.85795]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.3067 secs, and comparison 22.6859 sec, and warnIfPerfScore > 3.2, and perfScore=1.58568]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 16.9406 secs, and comparison 16.6066 sec, and warnIfPerfScore > 1.7, and perfScore=0.980288]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 14.7454 secs, and comparison 29.4766 sec, and warnIfPerfScore > 2.8, and perfScore=1.99903]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 15.6346 secs, and comparison 47.6428 sec, and warnIfPerfScore > 3.1, and perfScore=3.04726]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15.9253 secs, and comparison 3.46077 sec, and warnIfPerfScore > 0.22, and perfScore=0.217313]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.1124 secs, and comparison 17.6728 sec, and warnIfPerfScore > 1.25, and perfScore=1.16942]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.0973 secs, and comparison 42.0544 sec, and warnIfPerfScore > 7.7, and perfScore=2.61251]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.4779 secs, and comparison 5.27606 sec, and warnIfPerfScore > 1.55, and perfScore=0.340877]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.8832 secs, and comparison 41.5874 sec, and warnIfPerfScore > 7.7, and perfScore=2.61832]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.6275 secs, and comparison 5.33129 sec, and warnIfPerfScore > 1.4, and perfScore=0.341147]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 15.7222 secs, and comparison 70.7393 sec, and warnIfPerfScore > 7.9, and perfScore=4.49933]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 14.4631 secs, and comparison 7.73582 sec, and warnIfPerfScore > 0.8, and perfScore=0.534865]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.2285 secs, and comparison 21.1794 sec, and warnIfPerfScore > 1.7, and perfScore=1.30507]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.22558 secs, and comparison 4.16522 sec, and warnIfPerfScore > 0.47, and perfScore=0.451486]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.20129 sec, and warnIfPerfScore > 0.4, and perfScore=0.146752]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.32746 sec, and warnIfPerfScore > 1.1, and perfScore=0.355164]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.8108 secs, and comparison 23.0633 sec, and warnIfPerfScore > 2.4, and perfScore=1.37193]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.4944 secs, and comparison 28.5619 sec, and warnIfPerfScore > 2.8, and perfScore=1.84337]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 29 seconds]]]

