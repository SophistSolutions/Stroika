Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/9/16 16:30:16]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.4019 secs, and comparison 5.84761 sec, and warnIfPerfScore > 0.6, and perfScore=0.562168]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.468 secs, and comparison 5.38254 sec, and warnIfPerfScore > 0.6, and perfScore=0.51419]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 13.5665 secs, and comparison 11.8108 sec, and warnIfPerfScore > 0.97, and perfScore=0.870587]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.076 secs, and comparison 14.7439 sec, and warnIfPerfScore > 1.15, and perfScore=0.977973]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.374 secs, and comparison 3.37639 sec, and warnIfPerfScore > 0.5, and perfScore=0.325466]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 13.0002 secs, and comparison 5.02892 sec, and warnIfPerfScore > 0.68, and perfScore=0.386833]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.5037 secs, and comparison 39.6561 sec, and warnIfPerfScore > 4.3, and perfScore=2.73421]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.0636 secs, and comparison 39.5867 sec, and warnIfPerfScore > 4, and perfScore=2.62797]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 12.215 secs, and comparison 106.055 sec, and warnIfPerfScore > 9.1, and perfScore=8.68232]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.5043 secs, and comparison 21.9186 sec, and warnIfPerfScore > 3.2, and perfScore=1.51118]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.9136 secs, and comparison 15.5485 sec, and warnIfPerfScore > 1.7, and perfScore=0.977058]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.7994 secs, and comparison 28.3431 sec, and warnIfPerfScore > 2.8, and perfScore=1.91516]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 16.3271 secs, and comparison 47.978 sec, and warnIfPerfScore > 3.1, and perfScore=2.93854]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 16.5357 secs, and comparison 3.16994 sec, and warnIfPerfScore > 0.22, and perfScore=0.191703]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.4675 secs, and comparison 17.7546 sec, and warnIfPerfScore > 1.25, and perfScore=1.14787]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.5203 secs, and comparison 42.3323 sec, and warnIfPerfScore > 7.7, and perfScore=2.56244]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.5545 secs, and comparison 5.33144 sec, and warnIfPerfScore > 1.55, and perfScore=0.34276]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.349 secs, and comparison 41.9554 sec, and warnIfPerfScore > 7.7, and perfScore=2.56623]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.6822 secs, and comparison 5.38111 sec, and warnIfPerfScore > 1.4, and perfScore=0.343136]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 16.0597 secs, and comparison 63.0199 sec, and warnIfPerfScore > 7.9, and perfScore=3.9241]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 14.5485 secs, and comparison 7.57816 sec, and warnIfPerfScore > 0.8, and perfScore=0.520889]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.9488 secs, and comparison 20.8337 sec, and warnIfPerfScore > 1.7, and perfScore=1.30629]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.53937 secs, and comparison 4.17038 sec, and warnIfPerfScore > 0.47, and perfScore=0.437176]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.19394 sec, and warnIfPerfScore > 0.4, and perfScore=0.146263]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.96677 sec, and warnIfPerfScore > 1.1, and perfScore=0.331118]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.9047 secs, and comparison 23.2493 sec, and warnIfPerfScore > 2.4, and perfScore=1.37532]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.6905 secs, and comparison 28.4804 sec, and warnIfPerfScore > 2.8, and perfScore=1.81513]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 18 seconds]]]

