Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/11/16 11:47:35]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.7913 secs, and comparison 5.48049 sec, and warnIfPerfScore > 0.62, and perfScore=0.559731]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.81989 secs, and comparison 4.44952 sec, and warnIfPerfScore > 0.65, and perfScore=0.453113]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.8047 secs, and comparison 11.259 sec, and warnIfPerfScore > 0.97, and perfScore=0.879281]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.1894 secs, and comparison 13.8566 sec, and warnIfPerfScore > 1.15, and perfScore=0.976545]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.70764 secs, and comparison 3.1622 sec, and warnIfPerfScore > 0.5, and perfScore=0.325744]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.2256 secs, and comparison 4.79097 sec, and warnIfPerfScore > 0.68, and perfScore=0.391882]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.5211 secs, and comparison 37.3029 sec, and warnIfPerfScore > 4.3, and perfScore=2.75887]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.6437 secs, and comparison 37.6637 sec, and warnIfPerfScore > 4, and perfScore=2.76051]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 11.5468 secs, and comparison 96.9178 sec, and warnIfPerfScore > 9.9, and perfScore=8.39347]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.4061 secs, and comparison 20.1592 sec, and warnIfPerfScore > 3.2, and perfScore=1.50374]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 16.1861 secs, and comparison 15.7369 sec, and warnIfPerfScore > 1.7, and perfScore=0.972251]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.5382 secs, and comparison 26.3821 sec, and warnIfPerfScore > 2.8, and perfScore=1.94871]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 14.8968 secs, and comparison 44.1677 sec, and warnIfPerfScore > 3.3, and perfScore=2.96492]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15.1353 secs, and comparison 2.95041 sec, and warnIfPerfScore > 0.22, and perfScore=0.194935]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.3288 secs, and comparison 16.2601 sec, and warnIfPerfScore > 1.25, and perfScore=1.13479]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.0615 secs, and comparison 38.8608 sec, and warnIfPerfScore > 7.7, and perfScore=2.58015]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.2619 secs, and comparison 4.88484 sec, and warnIfPerfScore > 1.55, and perfScore=0.342509]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.7991 secs, and comparison 38.3072 sec, and warnIfPerfScore > 7.7, and perfScore=2.58848]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.3928 secs, and comparison 5.07957 sec, and warnIfPerfScore > 1.4, and perfScore=0.352923]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 14.6457 secs, and comparison 58.2615 sec, and warnIfPerfScore > 7.9, and perfScore=3.97807]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 13.3194 secs, and comparison 6.98411 sec, and warnIfPerfScore > 0.8, and perfScore=0.524356]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.8785 secs, and comparison 18.9621 sec, and warnIfPerfScore > 1.7, and perfScore=1.27446]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.61859 secs, and comparison 3.81544 sec, and warnIfPerfScore > 0.55, and perfScore=0.442699]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.03035 sec, and warnIfPerfScore > 0.4, and perfScore=0.135356]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.55558 sec, and warnIfPerfScore > 1.1, and perfScore=0.303705]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.3925 secs, and comparison 21.3132 sec, and warnIfPerfScore > 2.4, and perfScore=1.38464]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.1049 secs, and comparison 25.977 sec, and warnIfPerfScore > 2.8, and perfScore=1.8417]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 5 seconds]]]

