Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/1/17 0:26:07]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.03423 secs, and comparison 6.78895 sec, and warnIfPerfScore > 0.62, and perfScore=0.75147]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.03683 secs, and comparison 4.16114 sec, and warnIfPerfScore > 0.65, and perfScore=0.460465]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.3923 secs, and comparison 11.5001 sec, and warnIfPerfScore > 1, and perfScore=0.747133]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.55577 secs, and comparison 9.26712 sec, and warnIfPerfScore > 1.15, and perfScore=0.969793]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.7987 secs, and comparison 4.51847 sec, and warnIfPerfScore > 0.5, and perfScore=0.162542]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 27.5717 secs, and comparison 5.62606 sec, and warnIfPerfScore > 0.68, and perfScore=0.204052]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.9565 secs, and comparison 61.3072 sec, and warnIfPerfScore > 4.3, and perfScore=3.23409]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 20.3503 secs, and comparison 64.8831 sec, and warnIfPerfScore > 4, and perfScore=3.18831]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 15.7261 secs, and comparison 161.305 sec, and warnIfPerfScore > 10.4, and perfScore=10.2571]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 20.4236 secs, and comparison 32.2447 sec, and warnIfPerfScore > 3.2, and perfScore=1.5788]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.46545 secs, and comparison 5.92245 sec, and warnIfPerfScore > 1.8, and perfScore=0.699603]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.5241 secs, and comparison 31.5594 sec, and warnIfPerfScore > 2.8, and perfScore=2.33357]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.6673 secs, and comparison 25.3098 sec, and warnIfPerfScore > 3.3, and perfScore=2.1693]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.1363 secs, and comparison 3.03508 sec, and warnIfPerfScore > 0.25, and perfScore=0.250083]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.8706 secs, and comparison 18.2529 sec, and warnIfPerfScore > 1.25, and perfScore=1.02139]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9633 secs, and comparison 32.5473 sec, and warnIfPerfScore > 7.7, and perfScore=2.72058]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.2131 secs, and comparison 4.34834 sec, and warnIfPerfScore > 1.55, and perfScore=0.329092]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.5469 secs, and comparison 76.7906 sec, and warnIfPerfScore > 7.7, and perfScore=6.6503]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.2299 secs, and comparison 6.65536 sec, and warnIfPerfScore > 1, and perfScore=0.503053]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 12.9204 secs, and comparison 68.9529 sec, and warnIfPerfScore > 7.9, and perfScore=5.33675]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 13.0748 secs, and comparison 7.28187 sec, and warnIfPerfScore > 0.8, and perfScore=0.556939]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 33.2787 secs, and comparison 40.3831 sec, and warnIfPerfScore > 1.7, and perfScore=1.21348]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.45382 secs, and comparison 6.28938 sec, and warnIfPerfScore > 0.55, and perfScore=0.974521]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.79712 sec, and warnIfPerfScore > 0.4, and perfScore=0.386475]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.00237 sec, and warnIfPerfScore > 1.1, and perfScore=0.266825]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 32 seconds]]]

Succeeded
