Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 16 11:11:45 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.0926 secs, and comparison 5.43069 sec, and warnIfPerfScore > 0.62, and perfScore=0.489577]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.0594 secs, and comparison 4.06714 sec, and warnIfPerfScore > 0.5, and perfScore=0.367755]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.8355 secs, and comparison 9.52059 sec, and warnIfPerfScore > 1.05, and perfScore=0.878644]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.51169 secs, and comparison 3.85555 sec, and warnIfPerfScore > 0.45, and perfScore=0.405348]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.47075 secs, and comparison 4.20136 sec, and warnIfPerfScore > 0.55, and perfScore=0.443614]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.5641 secs, and comparison 28.037 sec, and warnIfPerfScore > 2.8, and perfScore=2.65399]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 10.9147 secs, and comparison 30.2812 sec, and warnIfPerfScore > 2.9, and perfScore=2.77433]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 10.4136 secs, and comparison 93.4739 sec, and warnIfPerfScore > 9.7, and perfScore=8.97616]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.6485 secs, and comparison 15.1093 sec, and warnIfPerfScore > 1.6, and perfScore=1.41892]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1619 secs, and comparison 14.7355 sec, and warnIfPerfScore > 1.5, and perfScore=1.21161]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.35918 secs, and comparison 15.2589 sec, and warnIfPerfScore > 2.1, and perfScore=1.82541]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 11.8206 secs, and comparison 11.6936 sec, and warnIfPerfScore > 1.3, and perfScore=0.989258]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.3767 secs, and comparison 1.32334 sec, and warnIfPerfScore > 0.18, and perfScore=0.106922]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.3917 secs, and comparison 13.6101 sec, and warnIfPerfScore > 1.3, and perfScore=1.19474]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.53404 secs, and comparison 8.69631 sec, and warnIfPerfScore > 1.2, and perfScore=0.912132]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.11 secs, and comparison 2.26372 sec, and warnIfPerfScore > 0.33, and perfScore=0.22391]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.1526 secs, and comparison 45.616 sec, and warnIfPerfScore > 6, and perfScore=4.98394]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.1272 secs, and comparison 4.1996 sec, and warnIfPerfScore > 0.5, and perfScore=0.414684]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.5487 secs, and comparison 41.3722 sec, and warnIfPerfScore > 4.4, and perfScore=3.92204]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.0848 secs, and comparison 4.54914 sec, and warnIfPerfScore > 0.6, and perfScore=0.451091]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.1543 secs, and comparison 17.8046 sec, and warnIfPerfScore > 1.5, and perfScore=1.25789]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.8088 secs, and comparison 4.46853 sec, and warnIfPerfScore > 0.55, and perfScore=0.348864]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.57074 sec, and warnIfPerfScore > 0.25, and perfScore=0.104716]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.47964 sec, and warnIfPerfScore > 0.5, and perfScore=0.36531]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.332 secs, and comparison 15.4202 sec, and warnIfPerfScore > 1.9, and perfScore=1.25041]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8918 secs, and comparison 31.9083 sec, and warnIfPerfScore > 3, and perfScore=2.68322]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 38 seconds]]]

Succeeded
