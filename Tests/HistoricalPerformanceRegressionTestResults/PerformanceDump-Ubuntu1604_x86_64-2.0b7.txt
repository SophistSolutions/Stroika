Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/14/18 1:48:55]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.04326 secs, and comparison 4.62921 sec, and warnIfPerfScore > 0.62, and perfScore=0.766013]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.04359 secs, and comparison 2.86988 sec, and warnIfPerfScore > 0.65, and perfScore=0.474864]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.80745 secs, and comparison 7.12757 sec, and warnIfPerfScore > 1.05, and perfScore=1.04703]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.19914 secs, and comparison 2.98852 sec, and warnIfPerfScore > 0.5, and perfScore=0.482085]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.71293 secs, and comparison 4.07384 sec, and warnIfPerfScore > 0.68, and perfScore=0.606864]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 8.64904 secs, and comparison 26.8975 sec, and warnIfPerfScore > 4.3, and perfScore=3.10988]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.29911 secs, and comparison 26.6091 sec, and warnIfPerfScore > 4, and perfScore=3.20625]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 7.52622 secs, and comparison 91.9596 sec, and warnIfPerfScore > 10.4, and perfScore=12.2186]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.69136 secs, and comparison 11.3165 sec, and warnIfPerfScore > 3.2, and perfScore=1.30204]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.4018 secs, and comparison 6.1162 sec, and warnIfPerfScore > 1.8, and perfScore=0.955387]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.8533 secs, and comparison 12.7099 sec, and warnIfPerfScore > 2.8, and perfScore=3.29844]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 4.85901 secs, and comparison 23.6543 sec, and warnIfPerfScore > 3.3, and perfScore=4.86812]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.9622 secs, and comparison 1.71933 sec, and warnIfPerfScore > 0.25, and perfScore=0.346486]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.03963 secs, and comparison 4.30947 sec, and warnIfPerfScore > 1.4, and perfScore=1.0668]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 3.69653 secs, and comparison 21.2723 sec, and warnIfPerfScore > 7.7, and perfScore=5.75466]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 14.9706 secs, and comparison 2.54991 sec, and warnIfPerfScore > 1.55, and perfScore=0.170328]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 3.47473 secs, and comparison 57.2593 sec, and warnIfPerfScore > 9, and perfScore=16.4788]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.5429 secs, and comparison 4.84002 sec, and warnIfPerfScore > 1, and perfScore=0.459081]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 5.31725 secs, and comparison 51.1894 sec, and warnIfPerfScore > 7.9, and perfScore=9.62703]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.1804 secs, and comparison 5.14436 sec, and warnIfPerfScore > 0.8, and perfScore=0.422348]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.04975 secs, and comparison 11.9274 sec, and warnIfPerfScore > 1.7, and perfScore=1.31798]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.22609 secs, and comparison 3.40408 sec, and warnIfPerfScore > 0.55, and perfScore=0.471082]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.62098 sec, and warnIfPerfScore > 0.4, and perfScore=0.108065]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.91782 sec, and warnIfPerfScore > 1.1, and perfScore=0.194521]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 8 seconds]]]

Succeeded
