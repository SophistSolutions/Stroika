Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/10/17 14:07:43]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.85315 secs, and comparison 5.47226 sec, and warnIfPerfScore > 0.62, and perfScore=0.798502]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.87732 secs, and comparison 3.47046 sec, and warnIfPerfScore > 0.65, and perfScore=0.504623]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.16233 secs, and comparison 8.16544 sec, and warnIfPerfScore > 1, and perfScore=1.00038]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.60615 secs, and comparison 7.45269 sec, and warnIfPerfScore > 1.15, and perfScore=0.979824]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.87459 secs, and comparison 3.49383 sec, and warnIfPerfScore > 0.5, and perfScore=0.508223]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.87289 secs, and comparison 4.69763 sec, and warnIfPerfScore > 0.68, and perfScore=0.683501]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.20894 secs, and comparison 28.6284 sec, and warnIfPerfScore > 4.3, and perfScore=3.48747]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.49988 secs, and comparison 31.1399 sec, and warnIfPerfScore > 4, and perfScore=3.27792]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 8.20848 secs, and comparison 113.339 sec, and warnIfPerfScore > 10.4, and perfScore=13.8075]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.62888 secs, and comparison 12.4491 sec, and warnIfPerfScore > 3.2, and perfScore=1.29289]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.62619 secs, and comparison 5.63238 sec, and warnIfPerfScore > 1.8, and perfScore=1.0011]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.96665 secs, and comparison 13.4442 sec, and warnIfPerfScore > 2.8, and perfScore=3.38931]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 4.85158 secs, and comparison 24.5313 sec, and warnIfPerfScore > 3.3, and perfScore=5.05636]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 5.19604 secs, and comparison 2.14638 sec, and warnIfPerfScore > 0.25, and perfScore=0.41308]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.67757 secs, and comparison 5.16802 sec, and warnIfPerfScore > 1.35, and perfScore=1.10485]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.21066 secs, and comparison 22.0941 sec, and warnIfPerfScore > 7.7, and perfScore=3.55745]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.61576 secs, and comparison 3.10034 sec, and warnIfPerfScore > 1.55, and perfScore=0.322422]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 6.14854 secs, and comparison 61.6685 sec, and warnIfPerfScore > 7.7, and perfScore=10.0298]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.4226 secs, and comparison 5.50279 sec, and warnIfPerfScore > 1, and perfScore=0.527968]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 5.98619 secs, and comparison 55.0222 sec, and warnIfPerfScore > 7.9, and perfScore=9.19153]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 12.1303 secs, and comparison 5.6832 sec, and warnIfPerfScore > 0.8, and perfScore=0.468514]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1043 secs, and comparison 13.4577 sec, and warnIfPerfScore > 1.7, and perfScore=1.21194]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 21.3271 secs, and comparison 4.68431 sec, and warnIfPerfScore > 0.55, and perfScore=0.219641]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.81844 sec, and warnIfPerfScore > 0.4, and perfScore=0.121229]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.32421 sec, and warnIfPerfScore > 1.1, and perfScore=0.221614]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 32 seconds]]]

Succeeded
