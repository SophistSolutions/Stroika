Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/23/17 11:42:39]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 12.6286 secs, and comparison 6.48625 sec, and warnIfPerfScore > 0.62, and perfScore=0.513618]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.6389 secs, and comparison 4.56836 sec, and warnIfPerfScore > 0.65, and perfScore=0.361452]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.8137 secs, and comparison 11.034 sec, and warnIfPerfScore > 1, and perfScore=0.861107]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.3178 secs, and comparison 4.06018 sec, and warnIfPerfScore > 0.5, and perfScore=0.358744]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.3053 secs, and comparison 4.95653 sec, and warnIfPerfScore > 0.68, and perfScore=0.438424]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 13.0437 secs, and comparison 33.5571 sec, and warnIfPerfScore > 4.3, and perfScore=2.57266]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.363 secs, and comparison 35.7706 sec, and warnIfPerfScore > 4, and perfScore=2.67685]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 12.7296 secs, and comparison 116.122 sec, and warnIfPerfScore > 10.4, and perfScore=9.12224]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.7657 secs, and comparison 17.5573 sec, and warnIfPerfScore > 3.2, and perfScore=1.37535]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.6474 secs, and comparison 15.3741 sec, and warnIfPerfScore > 1.8, and perfScore=1.21559]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.45373 secs, and comparison 15.6544 sec, and warnIfPerfScore > 2.8, and perfScore=1.6559]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.336 secs, and comparison 39.5096 sec, and warnIfPerfScore > 3.3, and perfScore=2.75597]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.9614 secs, and comparison 3.28368 sec, and warnIfPerfScore > 0.25, and perfScore=0.219476]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.2525 secs, and comparison 15.3272 sec, and warnIfPerfScore > 1.4, and perfScore=1.00489]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 13.8057 secs, and comparison 40.3607 sec, and warnIfPerfScore > 7.7, and perfScore=2.92349]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.618 secs, and comparison 5.78869 sec, and warnIfPerfScore > 1.55, and perfScore=0.370643]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 13.3037 secs, and comparison 79.6709 sec, and warnIfPerfScore > 7.7, and perfScore=5.98864]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15.6195 secs, and comparison 7.14322 sec, and warnIfPerfScore > 1, and perfScore=0.457327]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 17.1818 secs, and comparison 69.4328 sec, and warnIfPerfScore > 7.9, and perfScore=4.04108]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15.4028 secs, and comparison 7.7981 sec, and warnIfPerfScore > 0.8, and perfScore=0.506276]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.605 secs, and comparison 16.2347 sec, and warnIfPerfScore > 1.7, and perfScore=1.19329]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.4023 secs, and comparison 5.16904 sec, and warnIfPerfScore > 0.55, and perfScore=0.41678]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.00694 sec, and warnIfPerfScore > 0.4, and perfScore=0.200462]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.71795 sec, and warnIfPerfScore > 1.1, and perfScore=0.381197]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.316 secs, and comparison 18.9349 sec, and warnIfPerfScore > 2.4, and perfScore=1.32264]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.5339 secs, and comparison 24.6452 sec, and warnIfPerfScore > 2.8, and perfScore=1.82099]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 31 seconds]]]

Succeeded
