Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 20 16:6:49 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.8475 secs, and comparison 5.81715 sec, and warnIfPerfScore > 0.62, and perfScore=0.536265]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.8475 secs, and comparison 3.74338 sec, and warnIfPerfScore > 0.5, and perfScore=0.345093]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 12.6529 secs, and comparison 10.4103 sec, and warnIfPerfScore > 1.05, and perfScore=0.822762]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.1994 secs, and comparison 4.67774 sec, and warnIfPerfScore > 0.48, and perfScore=0.383441]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.6846 secs, and comparison 4.98031 sec, and warnIfPerfScore > 0.57, and perfScore=0.426229]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.5625 secs, and comparison 29.9816 sec, and warnIfPerfScore > 2.9, and perfScore=2.21063]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.4194 secs, and comparison 32.6377 sec, and warnIfPerfScore > 2.9, and perfScore=2.26346]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 13.7583 secs, and comparison 108.058 sec, and warnIfPerfScore > 9.7, and perfScore=7.85402]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.4857 secs, and comparison 13.8665 sec, and warnIfPerfScore > 1.6, and perfScore=1.20728]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 15.1051 secs, and comparison 14.6943 sec, and warnIfPerfScore > 1.5, and perfScore=0.972805]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.93965 secs, and comparison 13.7032 sec, and warnIfPerfScore > 2.1, and perfScore=1.37864]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 14.7249 secs, and comparison 11.3067 sec, and warnIfPerfScore > 1.3, and perfScore=0.767863]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15.2335 secs, and comparison 3.23846 sec, and warnIfPerfScore > 0.23, and perfScore=0.212588]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.4031 secs, and comparison 15.839 sec, and warnIfPerfScore > 1.3, and perfScore=1.0283]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 20.0759 secs, and comparison 8.73751 sec, and warnIfPerfScore > 1.2, and perfScore=0.435223]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 11.8169 secs, and comparison 2.4011 sec, and warnIfPerfScore > 0.33, and perfScore=0.203192]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 19.6718 secs, and comparison 50.5059 sec, and warnIfPerfScore > 6, and perfScore=2.56743]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.864 secs, and comparison 4.77393 sec, and warnIfPerfScore > 0.5, and perfScore=0.402389]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 20.0374 secs, and comparison 45.6543 sec, and warnIfPerfScore > 4.4, and perfScore=2.27846]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.5863 secs, and comparison 5.01748 sec, and warnIfPerfScore > 0.6, and perfScore=0.433054]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.6183 secs, and comparison 22.3497 sec, and warnIfPerfScore > 1.5, and perfScore=1.20042]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.4018 secs, and comparison 4.89372 sec, and warnIfPerfScore > 0.55, and perfScore=0.429207]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.78327 sec, and warnIfPerfScore > 0.25, and perfScore=0.118884]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.27092 sec, and warnIfPerfScore > 0.5, and perfScore=0.284728]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.7444 secs, and comparison 19.9493 sec, and warnIfPerfScore > 2, and perfScore=1.45144]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.3422 secs, and comparison 36.9232 sec, and warnIfPerfScore > 3.1, and perfScore=2.7674]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 38 seconds]]]

Succeeded
