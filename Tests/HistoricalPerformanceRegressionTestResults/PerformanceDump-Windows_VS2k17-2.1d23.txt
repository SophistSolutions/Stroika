Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr 27 7:1:14 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.0018 secs, and comparison 5.41986 sec, and warnIfPerfScore > 0.62, and perfScore=0.492637]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.2163 secs, and comparison 3.81517 sec, and warnIfPerfScore > 0.5, and perfScore=0.340144]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.8973 secs, and comparison 9.26711 sec, and warnIfPerfScore > 1.05, and perfScore=0.850401]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.53908 secs, and comparison 3.9513 sec, and warnIfPerfScore > 0.48, and perfScore=0.414222]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.53471 secs, and comparison 4.3116 sec, and warnIfPerfScore > 0.55, and perfScore=0.4522]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.9294 secs, and comparison 26.9934 sec, and warnIfPerfScore > 2.9, and perfScore=2.46979]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.3805 secs, and comparison 29.3057 sec, and warnIfPerfScore > 2.9, and perfScore=2.57507]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 10.5984 secs, and comparison 93.2602 sec, and warnIfPerfScore > 9.7, and perfScore=8.79945]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.2342 secs, and comparison 14.9947 sec, and warnIfPerfScore > 1.6, and perfScore=1.33474]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.9773 secs, and comparison 14.0192 sec, and warnIfPerfScore > 1.5, and perfScore=1.17048]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.43253 secs, and comparison 15.1432 sec, and warnIfPerfScore > 2.1, and perfScore=1.79581]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.2084 secs, and comparison 12.0543 sec, and warnIfPerfScore > 1.3, and perfScore=1.07547]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 11.8274 secs, and comparison 1.53249 sec, and warnIfPerfScore > 0.18, and perfScore=0.129572]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.0752 secs, and comparison 12.8857 sec, and warnIfPerfScore > 1.3, and perfScore=1.06713]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.72886 secs, and comparison 9.34983 sec, and warnIfPerfScore > 1.2, and perfScore=0.961041]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.1794 secs, and comparison 2.24335 sec, and warnIfPerfScore > 0.33, and perfScore=0.220381]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.3741 secs, and comparison 46.4011 sec, and warnIfPerfScore > 6, and perfScore=4.94992]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.0886 secs, and comparison 4.17881 sec, and warnIfPerfScore > 0.5, and perfScore=0.414212]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.6224 secs, and comparison 40.9747 sec, and warnIfPerfScore > 4.4, and perfScore=3.85739]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.0504 secs, and comparison 4.60463 sec, and warnIfPerfScore > 0.6, and perfScore=0.458155]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.9684 secs, and comparison 18.2267 sec, and warnIfPerfScore > 1.5, and perfScore=1.21768]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.0358 secs, and comparison 4.36534 sec, and warnIfPerfScore > 0.55, and perfScore=0.334874]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.54443 sec, and warnIfPerfScore > 0.25, and perfScore=0.102962]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.45974 sec, and warnIfPerfScore > 0.5, and perfScore=0.363983]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.3793 secs, and comparison 17.3315 sec, and warnIfPerfScore > 1.9, and perfScore=1.40004]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9731 secs, and comparison 32.7042 sec, and warnIfPerfScore > 3, and perfScore=2.73148]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 44 seconds]]]

Succeeded
