Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/29/18 4:21:36]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.87892 secs, and comparison 4.60305 sec, and warnIfPerfScore > 0.62, and perfScore=0.782974]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.78639 secs, and comparison 2.75618 sec, and warnIfPerfScore > 0.65, and perfScore=0.476322]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.53699 secs, and comparison 6.82725 sec, and warnIfPerfScore > 1.05, and perfScore=1.0444]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.09954 secs, and comparison 2.82579 sec, and warnIfPerfScore > 0.5, and perfScore=0.463279]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 5.95611 secs, and comparison 3.80991 sec, and warnIfPerfScore > 0.68, and perfScore=0.639665]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 7.69975 secs, and comparison 25.5377 sec, and warnIfPerfScore > 4.3, and perfScore=3.31669]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 7.90529 secs, and comparison 30.8216 sec, and warnIfPerfScore > 4, and perfScore=3.89886]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.33786 secs, and comparison 98.4316 sec, and warnIfPerfScore > 10.4, and perfScore=11.8054]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.66045 secs, and comparison 11.7215 sec, and warnIfPerfScore > 3.2, and perfScore=1.35345]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.50105 secs, and comparison 6.92589 sec, and warnIfPerfScore > 1.8, and perfScore=1.06535]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.257 secs, and comparison 13.7215 sec, and warnIfPerfScore > 2.8, and perfScore=2.61014]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 5.49085 secs, and comparison 25.5064 sec, and warnIfPerfScore > 3.3, and perfScore=4.64525]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 4.43109 secs, and comparison 1.86791 sec, and warnIfPerfScore > 0.25, and perfScore=0.421546]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.99711 secs, and comparison 4.39421 sec, and warnIfPerfScore > 1.4, and perfScore=1.09935]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 4.07778 secs, and comparison 19.2278 sec, and warnIfPerfScore > 7.7, and perfScore=4.71525]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.0343 secs, and comparison 2.71296 sec, and warnIfPerfScore > 1.55, and perfScore=0.225436]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 4.07996 secs, and comparison 55.0149 sec, and warnIfPerfScore > 7.7, and perfScore=13.4842]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.01747 secs, and comparison 5.06028 sec, and warnIfPerfScore > 1, and perfScore=0.561165]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 6.20567 secs, and comparison 49.849 sec, and warnIfPerfScore > 7.9, and perfScore=8.03282]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.0457 secs, and comparison 5.01316 sec, and warnIfPerfScore > 0.8, and perfScore=0.499037]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.3098 secs, and comparison 11.2336 sec, and warnIfPerfScore > 1.7, and perfScore=1.0896]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.80441 secs, and comparison 3.059 sec, and warnIfPerfScore > 0.55, and perfScore=0.449561]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.59501 sec, and warnIfPerfScore > 0.4, and perfScore=0.106334]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.77992 sec, and warnIfPerfScore > 1.1, and perfScore=0.185328]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 12 seconds]]]

Succeeded
