Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/9/18 10:29:16]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.93325 secs, and comparison 4.63427 sec, and warnIfPerfScore > 0.62, and perfScore=0.781067]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.92496 secs, and comparison 3.04921 sec, and warnIfPerfScore > 0.65, and perfScore=0.514638]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.33122 secs, and comparison 6.88942 sec, and warnIfPerfScore > 1.05, and perfScore=1.08817]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 3.4627 secs, and comparison 2.75682 sec, and warnIfPerfScore > 0.5, and perfScore=0.796147]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.07884 secs, and comparison 3.89553 sec, and warnIfPerfScore > 0.68, and perfScore=0.955059]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 8.15719 secs, and comparison 31.915 sec, and warnIfPerfScore > 4.3, and perfScore=3.9125]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.33682 secs, and comparison 35.472 sec, and warnIfPerfScore > 4, and perfScore=3.79915]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	32
	DETAILS:         	[baseline test 10.7131 secs, and comparison 346.525 sec, and warnIfPerfScore > 10.4, and perfScore=32.3458]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.6371 secs, and comparison 9.59342 sec, and warnIfPerfScore > 3.2, and perfScore=2.06884]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.35211 secs, and comparison 8.40109 sec, and warnIfPerfScore > 1.8, and perfScore=1.00586]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.35929 secs, and comparison 10.4536 sec, and warnIfPerfScore > 2.8, and perfScore=4.43085]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.08726 secs, and comparison 15.8877 sec, and warnIfPerfScore > 3.3, and perfScore=2.24173]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.9702 secs, and comparison 2.57924 sec, and warnIfPerfScore > 0.25, and perfScore=0.370038]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.32099 secs, and comparison 3.05917 sec, and warnIfPerfScore > 1.4, and perfScore=1.31805]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 24.8375 secs, and comparison 24.4316 sec, and warnIfPerfScore > 7.7, and perfScore=0.983656]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15.0004 secs, and comparison 2.44912 sec, and warnIfPerfScore > 1.55, and perfScore=0.16327]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 22.3337 secs, and comparison 55.034 sec, and warnIfPerfScore > 9, and perfScore=2.46417]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.3927 secs, and comparison 4.963 sec, and warnIfPerfScore > 1, and perfScore=0.477545]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 22.8523 secs, and comparison 52.9498 sec, and warnIfPerfScore > 7.9, and perfScore=2.31705]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.51 secs, and comparison 4.75963 sec, and warnIfPerfScore > 0.8, and perfScore=0.413521]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.84359 secs, and comparison 10.9084 sec, and warnIfPerfScore > 1.7, and perfScore=1.39074]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 7.14854 secs, and comparison 2.1901 sec, and warnIfPerfScore > 0.55, and perfScore=0.306369]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.52179 sec, and warnIfPerfScore > 0.4, and perfScore=0.101453]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.81929 sec, and warnIfPerfScore > 1.1, and perfScore=0.187952]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 15 seconds]]]

Succeeded
