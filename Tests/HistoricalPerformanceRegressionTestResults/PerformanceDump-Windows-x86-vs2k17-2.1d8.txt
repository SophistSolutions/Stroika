Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/21/18 8:41:14]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.9647 secs, and comparison 5.36132 sec, and warnIfPerfScore > 0.62, and perfScore=0.488962]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.9447 secs, and comparison 4.09026 sec, and warnIfPerfScore > 0.5, and perfScore=0.373721]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 10.8314 secs, and comparison 9.41068 sec, and warnIfPerfScore > 1.05, and perfScore=0.868834]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.45898 secs, and comparison 3.43803 sec, and warnIfPerfScore > 0.43, and perfScore=0.363467]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.4817 secs, and comparison 4.30537 sec, and warnIfPerfScore > 0.5, and perfScore=0.454072]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.9912 secs, and comparison 27.1527 sec, and warnIfPerfScore > 2.8, and perfScore=2.4704]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.2956 secs, and comparison 28.96 sec, and warnIfPerfScore > 2.9, and perfScore=2.56384]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 11.1006 secs, and comparison 91.8003 sec, and warnIfPerfScore > 9.7, and perfScore=8.26988]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.9518 secs, and comparison 14.6554 sec, and warnIfPerfScore > 1.6, and perfScore=1.33817]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.3145 secs, and comparison 14.3793 sec, and warnIfPerfScore > 1.5, and perfScore=1.27087]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.42414 secs, and comparison 15.0648 sec, and warnIfPerfScore > 2.1, and perfScore=1.78829]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.584 secs, and comparison 11.8681 sec, and warnIfPerfScore > 1.3, and perfScore=1.02452]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.1338 secs, and comparison 1.48522 sec, and warnIfPerfScore > 0.18, and perfScore=0.122403]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2736 secs, and comparison 11.8091 sec, and warnIfPerfScore > 1.3, and perfScore=1.0475]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.5956 secs, and comparison 8.60288 sec, and warnIfPerfScore > 1.2, and perfScore=0.896544]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.96945 secs, and comparison 2.16344 sec, and warnIfPerfScore > 0.33, and perfScore=0.217007]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.18551 secs, and comparison 45.1905 sec, and warnIfPerfScore > 6, and perfScore=4.91975]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.96601 secs, and comparison 4.13305 sec, and warnIfPerfScore > 0.5, and perfScore=0.414715]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.3698 secs, and comparison 40.2024 sec, and warnIfPerfScore > 4.4, and perfScore=3.87687]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.95064 secs, and comparison 4.59371 sec, and warnIfPerfScore > 0.6, and perfScore=0.46165]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.1221 secs, and comparison 17.8056 sec, and warnIfPerfScore > 1.5, and perfScore=1.26083]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.1222 secs, and comparison 4.36103 sec, and warnIfPerfScore > 0.55, and perfScore=0.332339]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56865 sec, and warnIfPerfScore > 0.25, and perfScore=0.104577]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.60308 sec, and warnIfPerfScore > 0.5, and perfScore=0.306872]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.8053 secs, and comparison 17.4974 sec, and warnIfPerfScore > 1.7, and perfScore=1.36642]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.2604 secs, and comparison 32.6075 sec, and warnIfPerfScore > 3, and perfScore=2.65958]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 31 seconds]]]

Succeeded
