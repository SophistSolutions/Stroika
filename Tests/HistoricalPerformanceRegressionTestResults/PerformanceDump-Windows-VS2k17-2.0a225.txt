Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/4/18 9:21:08]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.5439 secs, and comparison 5.46701 sec, and warnIfPerfScore > 0.62, and perfScore=0.473586]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.9722 secs, and comparison 4.10372 sec, and warnIfPerfScore > 0.65, and perfScore=0.374012]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.2048 secs, and comparison 9.48433 sec, and warnIfPerfScore > 1.05, and perfScore=0.84645]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.4658 secs, and comparison 3.33131 sec, and warnIfPerfScore > 0.5, and perfScore=0.318303]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.2556 secs, and comparison 4.40601 sec, and warnIfPerfScore > 0.68, and perfScore=0.429622]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.8936 secs, and comparison 28.2233 sec, and warnIfPerfScore > 4.3, and perfScore=2.37299]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.479 secs, and comparison 29.9506 sec, and warnIfPerfScore > 4, and perfScore=2.40008]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 11.407 secs, and comparison 94.0856 sec, and warnIfPerfScore > 10.4, and perfScore=8.24805]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.7309 secs, and comparison 14.8028 sec, and warnIfPerfScore > 3.2, and perfScore=1.26187]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.85874 secs, and comparison 13.5367 sec, and warnIfPerfScore > 1.8, and perfScore=1.37306]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.63193 secs, and comparison 13.6542 sec, and warnIfPerfScore > 2.8, and perfScore=1.58182]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.978 secs, and comparison 37.8472 sec, and warnIfPerfScore > 3.3, and perfScore=3.15972]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 12.4067 secs, and comparison 1.3006 sec, and warnIfPerfScore > 0.25, and perfScore=0.104831]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.4051 secs, and comparison 11.9891 sec, and warnIfPerfScore > 1.4, and perfScore=1.05121]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 12.3987 secs, and comparison 37.4598 sec, and warnIfPerfScore > 7.7, and perfScore=3.02128]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 13.1698 secs, and comparison 5.13499 sec, and warnIfPerfScore > 1.55, and perfScore=0.389908]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 10.9239 secs, and comparison 69.257 sec, and warnIfPerfScore > 7.7, and perfScore=6.33996]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.1656 secs, and comparison 6.65806 sec, and warnIfPerfScore > 1, and perfScore=0.470014]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.0339 secs, and comparison 59.9757 sec, and warnIfPerfScore > 7.9, and perfScore=3.98937]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 13.0316 secs, and comparison 7.23461 sec, and warnIfPerfScore > 0.8, and perfScore=0.55516]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.9386 secs, and comparison 14.2125 sec, and warnIfPerfScore > 1.7, and perfScore=1.2993]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.9786 secs, and comparison 4.61931 sec, and warnIfPerfScore > 0.55, and perfScore=0.330455]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.52906 sec, and warnIfPerfScore > 0.4, and perfScore=0.168604]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.63289 sec, and warnIfPerfScore > 1.1, and perfScore=0.30886]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.6504 secs, and comparison 14.8702 sec, and warnIfPerfScore > 2.4, and perfScore=1.17548]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.0251 secs, and comparison 31.2864 sec, and warnIfPerfScore > 2.9, and perfScore=2.83775]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 11 seconds]]]

Succeeded
