Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/7/18 18:13:45]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.2657 secs, and comparison 6.38389 sec, and warnIfPerfScore > 0.62, and perfScore=0.566667]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.2258 secs, and comparison 3.65944 sec, and warnIfPerfScore > 0.65, and perfScore=0.325986]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.762 secs, and comparison 9.52899 sec, and warnIfPerfScore > 1.05, and perfScore=0.885432]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.90877 secs, and comparison 3.54825 sec, and warnIfPerfScore > 0.5, and perfScore=0.358091]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.7087 secs, and comparison 4.27045 sec, and warnIfPerfScore > 0.68, and perfScore=0.439858]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.5506 secs, and comparison 29.2175 sec, and warnIfPerfScore > 4.3, and perfScore=2.52952]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.7866 secs, and comparison 31.3143 sec, and warnIfPerfScore > 4, and perfScore=2.65676]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 12.0327 secs, and comparison 95.8925 sec, and warnIfPerfScore > 10.4, and perfScore=7.96933]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.2945 secs, and comparison 15.6206 sec, and warnIfPerfScore > 3.2, and perfScore=1.38303]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.7311 secs, and comparison 12.7504 sec, and warnIfPerfScore > 1.8, and perfScore=1.18817]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.23061 secs, and comparison 15.1222 sec, and warnIfPerfScore > 2.8, and perfScore=1.83732]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.8858 secs, and comparison 34.0934 sec, and warnIfPerfScore > 3.3, and perfScore=2.86841]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.2633 secs, and comparison 1.33493 sec, and warnIfPerfScore > 0.25, and perfScore=0.108856]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4666 secs, and comparison 11.9114 sec, and warnIfPerfScore > 1.4, and perfScore=1.03879]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.8899 secs, and comparison 36.822 sec, and warnIfPerfScore > 7.7, and perfScore=3.72319]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.2146 secs, and comparison 4.75779 sec, and warnIfPerfScore > 1.55, and perfScore=0.465785]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 9.43756 secs, and comparison 71.117 sec, and warnIfPerfScore > 9, and perfScore=7.53552]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.0717 secs, and comparison 6.47356 sec, and warnIfPerfScore > 1, and perfScore=0.64275]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 10.5044 secs, and comparison 63.1722 sec, and warnIfPerfScore > 7.9, and perfScore=6.0139]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.0251 secs, and comparison 7.2113 sec, and warnIfPerfScore > 0.8, and perfScore=0.719327]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.0994 secs, and comparison 15.8243 sec, and warnIfPerfScore > 1.7, and perfScore=1.30786]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.1446 secs, and comparison 4.2211 sec, and warnIfPerfScore > 0.55, and perfScore=0.321128]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.67295 sec, and warnIfPerfScore > 0.4, and perfScore=0.178196]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.58106 sec, and warnIfPerfScore > 1.1, and perfScore=0.305404]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.3543 secs, and comparison 15.4718 sec, and warnIfPerfScore > 2.4, and perfScore=1.25234]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9454 secs, and comparison 32.1399 sec, and warnIfPerfScore > 2.9, and perfScore=2.69056]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 26 seconds]]]

Succeeded
