Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/17/17 16:09:13]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.55012 secs, and comparison 4.37057 sec, and warnIfPerfScore > 0.62, and perfScore=0.787473]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.52663 secs, and comparison 2.7632 sec, and warnIfPerfScore > 0.65, and perfScore=0.499979]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.4273 secs, and comparison 8.55622 sec, and warnIfPerfScore > 1, and perfScore=1.0153]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.19725 secs, and comparison 8.14033 sec, and warnIfPerfScore > 1.15, and perfScore=0.993057]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.99346 secs, and comparison 2.87565 sec, and warnIfPerfScore > 0.5, and perfScore=0.479798]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.37698 secs, and comparison 4.77649 sec, and warnIfPerfScore > 0.68, and perfScore=0.647486]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.94791 secs, and comparison 32.7085 sec, and warnIfPerfScore > 4.3, and perfScore=3.28798]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 10.8796 secs, and comparison 33.2754 sec, and warnIfPerfScore > 4, and perfScore=3.05852]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 7.52981 secs, and comparison 96.2277 sec, and warnIfPerfScore > 10.4, and perfScore=12.7796]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.9889 secs, and comparison 14.3717 sec, and warnIfPerfScore > 3.2, and perfScore=1.30784]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.70146 secs, and comparison 5.21572 sec, and warnIfPerfScore > 1.8, and perfScore=0.914805]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.80645 secs, and comparison 19.6599 sec, and warnIfPerfScore > 2.8, and perfScore=2.51842]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 6.41504 secs, and comparison 30.5238 sec, and warnIfPerfScore > 3.3, and perfScore=4.75817]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.52295 secs, and comparison 2.61324 sec, and warnIfPerfScore > 0.25, and perfScore=0.400622]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.5665 secs, and comparison 6.24915 sec, and warnIfPerfScore > 1.25, and perfScore=1.12264]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.28388 secs, and comparison 30.8977 sec, and warnIfPerfScore > 7.7, and perfScore=3.3281]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.74485 secs, and comparison 3.36032 sec, and warnIfPerfScore > 1.55, and perfScore=0.433878]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.23016 secs, and comparison 30.5598 sec, and warnIfPerfScore > 7.7, and perfScore=3.31086]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.9594 secs, and comparison 3.42994 sec, and warnIfPerfScore > 1.4, and perfScore=0.430929]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 6.41799 secs, and comparison 59.2838 sec, and warnIfPerfScore > 7.9, and perfScore=9.23713]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.46541 secs, and comparison 6.09057 sec, and warnIfPerfScore > 0.8, and perfScore=0.815839]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.498 secs, and comparison 13.8978 sec, and warnIfPerfScore > 1.7, and perfScore=1.20871]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.3766 secs, and comparison 4.3178 sec, and warnIfPerfScore > 0.55, and perfScore=0.248484]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.67015 sec, and warnIfPerfScore > 0.4, and perfScore=0.111344]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.6239 sec, and warnIfPerfScore > 1.1, and perfScore=0.241593]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 20 seconds]]]

Succeeded
