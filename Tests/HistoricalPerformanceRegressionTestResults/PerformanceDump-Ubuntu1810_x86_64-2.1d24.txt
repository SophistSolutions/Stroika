Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri May 24 7:51:1 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.90932 secs, and comparison 4.61011 sec, and warnIfPerfScore > 0.62, and perfScore=0.780143]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.91319 secs, and comparison 2.95653 sec, and warnIfPerfScore > 0.5, and perfScore=0.499988]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.35743 secs, and comparison 6.73288 sec, and warnIfPerfScore > 1.05, and perfScore=1.05906]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.36886 secs, and comparison 3.80084 sec, and warnIfPerfScore > 0.48, and perfScore=1.12823]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.98336 secs, and comparison 4.37604 sec, and warnIfPerfScore > 0.55, and perfScore=1.09858]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 2.9887 secs, and comparison 16.9009 sec, and warnIfPerfScore > 2.9, and perfScore=5.65493]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.62451 secs, and comparison 17.8591 sec, and warnIfPerfScore > 2.9, and perfScore=4.92731]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 4.53747 secs, and comparison 57.1059 sec, and warnIfPerfScore > 9.7, and perfScore=12.5854]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.45229 secs, and comparison 9.53194 sec, and warnIfPerfScore > 1.6, and perfScore=2.14091]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.33629 secs, and comparison 5.05279 sec, and warnIfPerfScore > 1.5, and perfScore=0.946874]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 2.33053 secs, and comparison 10.5065 sec, and warnIfPerfScore > 2.1, and perfScore=4.50822]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.09598 secs, and comparison 3.75956 sec, and warnIfPerfScore > 1.3, and perfScore=0.917865]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.26894 secs, and comparison 1.62439 sec, and warnIfPerfScore > 0.18, and perfScore=0.380513]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.82692 secs, and comparison 4.36869 sec, and warnIfPerfScore > 1.3, and perfScore=1.14157]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.02173 secs, and comparison 6.41034 sec, and warnIfPerfScore > 1.2, and perfScore=2.12142]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.9935 secs, and comparison 1.45201 sec, and warnIfPerfScore > 0.33, and perfScore=0.103763]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.85072 secs, and comparison 42.4197 sec, and warnIfPerfScore > 6, and perfScore=14.8803]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.8182 secs, and comparison 3.72657 sec, and warnIfPerfScore > 0.5, and perfScore=0.379557]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.82924 secs, and comparison 38.174 sec, and warnIfPerfScore > 4.4, and perfScore=6.54871]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.9704 secs, and comparison 3.79402 sec, and warnIfPerfScore > 0.6, and perfScore=0.345842]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.78488 secs, and comparison 11.612 sec, and warnIfPerfScore > 1.5, and perfScore=1.4916]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.93867 secs, and comparison 2.14771 sec, and warnIfPerfScore > 0.55, and perfScore=0.309527]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.05795 sec, and warnIfPerfScore > 0.25, and perfScore=0.0705298]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.78114 sec, and warnIfPerfScore > 0.5, and perfScore=0.252076]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 26 seconds]]]

Succeeded
