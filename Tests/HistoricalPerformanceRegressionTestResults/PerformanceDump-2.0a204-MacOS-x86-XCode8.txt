Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/21/17 21:53:50]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.01797 secs, and comparison 5.2133 sec, and warnIfPerfScore > 0.62, and perfScore=0.74285]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.05203 secs, and comparison 3.20984 sec, and warnIfPerfScore > 0.65, and perfScore=0.455165]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 15.2119 secs, and comparison 11.6431 sec, and warnIfPerfScore > 1, and perfScore=0.765394]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.0362 secs, and comparison 9.63272 sec, and warnIfPerfScore > 1.15, and perfScore=0.959796]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 21.8455 secs, and comparison 3.60155 sec, and warnIfPerfScore > 0.5, and perfScore=0.164865]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 27.2496 secs, and comparison 5.39805 sec, and warnIfPerfScore > 0.68, and perfScore=0.198096]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 20.805 secs, and comparison 68.1248 sec, and warnIfPerfScore > 4.3, and perfScore=3.27445]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 22.698 secs, and comparison 68.3627 sec, and warnIfPerfScore > 4, and perfScore=3.01184]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.6803 secs, and comparison 138.283 sec, and warnIfPerfScore > 10.4, and perfScore=10.1082]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.893 secs, and comparison 34.4377 sec, and warnIfPerfScore > 3.2, and perfScore=1.573]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4572 secs, and comparison 7.30274 sec, and warnIfPerfScore > 1.8, and perfScore=0.698343]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 18.1282 secs, and comparison 43.7513 sec, and warnIfPerfScore > 2.8, and perfScore=2.41344]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.5093 secs, and comparison 29.4838 sec, and warnIfPerfScore > 3.3, and perfScore=2.18248]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.7219 secs, and comparison 3.3947 sec, and warnIfPerfScore > 0.25, and perfScore=0.247393]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.9611 secs, and comparison 20.4849 sec, and warnIfPerfScore > 1.25, and perfScore=1.02624]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.3005 secs, and comparison 44.1893 sec, and warnIfPerfScore > 7.7, and perfScore=2.71092]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.0314 secs, and comparison 4.62938 sec, and warnIfPerfScore > 1.55, and perfScore=0.307981]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.1654 secs, and comparison 43.6796 sec, and warnIfPerfScore > 7.7, and perfScore=2.70205]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.1683 secs, and comparison 4.67528 sec, and warnIfPerfScore > 1.4, and perfScore=0.308227]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 12.9228 secs, and comparison 65.9135 sec, and warnIfPerfScore > 7.9, and perfScore=5.10057]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.2967 secs, and comparison 7.01556 sec, and warnIfPerfScore > 0.8, and perfScore=0.527615]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.2612 secs, and comparison 38.6181 sec, and warnIfPerfScore > 1.7, and perfScore=1.19705]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.9593 secs, and comparison 4.89094 sec, and warnIfPerfScore > 0.55, and perfScore=0.986214]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.49746 sec, and warnIfPerfScore > 0.4, and perfScore=0.366497]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.02874 sec, and warnIfPerfScore > 1.1, and perfScore=0.268583]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 25 seconds]]]

Succeeded
