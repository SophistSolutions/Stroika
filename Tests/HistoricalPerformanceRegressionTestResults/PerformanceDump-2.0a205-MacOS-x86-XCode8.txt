Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/6/17 21:14:21]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.02308 secs, and comparison 5.21538 sec, and warnIfPerfScore > 0.62, and perfScore=0.742607]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.06899 secs, and comparison 3.20973 sec, and warnIfPerfScore > 0.65, and perfScore=0.454058]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 15.5411 secs, and comparison 11.5439 sec, and warnIfPerfScore > 1, and perfScore=0.742797]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.0244 secs, and comparison 9.75637 sec, and warnIfPerfScore > 1.15, and perfScore=0.973265]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 21.8063 secs, and comparison 3.61616 sec, and warnIfPerfScore > 0.5, and perfScore=0.165831]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.144 secs, and comparison 5.40506 sec, and warnIfPerfScore > 0.68, and perfScore=0.206741]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 20.5845 secs, and comparison 67.221 sec, and warnIfPerfScore > 4.3, and perfScore=3.26562]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 21.5617 secs, and comparison 68.1502 sec, and warnIfPerfScore > 4, and perfScore=3.1607]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.74 secs, and comparison 138.33 sec, and warnIfPerfScore > 10.4, and perfScore=10.0677]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 22.0089 secs, and comparison 34.3568 sec, and warnIfPerfScore > 3.2, and perfScore=1.56104]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4627 secs, and comparison 7.30321 sec, and warnIfPerfScore > 1.8, and perfScore=0.698024]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 18.0905 secs, and comparison 44.5327 sec, and warnIfPerfScore > 2.8, and perfScore=2.46167]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.5311 secs, and comparison 29.5428 sec, and warnIfPerfScore > 3.3, and perfScore=2.18333]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.7009 secs, and comparison 3.32771 sec, and warnIfPerfScore > 0.25, and perfScore=0.242882]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.8752 secs, and comparison 20.4018 sec, and warnIfPerfScore > 1.25, and perfScore=1.02649]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 16.0233 secs, and comparison 44.229 sec, and warnIfPerfScore > 7.7, and perfScore=2.76029]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.5009 secs, and comparison 4.52415 sec, and warnIfPerfScore > 1.55, and perfScore=0.31199]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.8544 secs, and comparison 43.7399 sec, and warnIfPerfScore > 7.7, and perfScore=2.75885]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.6602 secs, and comparison 4.56336 sec, and warnIfPerfScore > 1.4, and perfScore=0.311275]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 12.7361 secs, and comparison 66.0122 sec, and warnIfPerfScore > 7.9, and perfScore=5.18308]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.2044 secs, and comparison 7.01729 sec, and warnIfPerfScore > 0.8, and perfScore=0.531437]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.3327 secs, and comparison 39.3275 sec, and warnIfPerfScore > 1.7, and perfScore=1.21634]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.93075 secs, and comparison 4.92491 sec, and warnIfPerfScore > 0.55, and perfScore=0.998817]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.37745 sec, and warnIfPerfScore > 0.4, and perfScore=0.358496]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.97878 sec, and warnIfPerfScore > 1.1, and perfScore=0.265252]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 22 seconds]]]

Succeeded
