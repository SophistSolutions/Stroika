Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/5/17 11:07:04]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.01952 secs, and comparison 5.20682 sec, and warnIfPerfScore > 0.62, and perfScore=0.741763]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.0454 secs, and comparison 3.23182 sec, and warnIfPerfScore > 0.65, and perfScore=0.458713]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.1582 secs, and comparison 11.4305 sec, and warnIfPerfScore > 1, and perfScore=0.754075]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.0672 secs, and comparison 9.59253 sec, and warnIfPerfScore > 1.15, and perfScore=0.952847]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 21.6937 secs, and comparison 3.59842 sec, and warnIfPerfScore > 0.5, and perfScore=0.165874]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 25.801 secs, and comparison 5.63833 sec, and warnIfPerfScore > 0.68, and perfScore=0.218531]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 21.0479 secs, and comparison 66.9106 sec, and warnIfPerfScore > 4.3, and perfScore=3.17897]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 20.7875 secs, and comparison 68.6121 sec, and warnIfPerfScore > 4, and perfScore=3.30064]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.2971 secs, and comparison 138.921 sec, and warnIfPerfScore > 10.4, and perfScore=10.4474]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.2992 secs, and comparison 33.4008 sec, and warnIfPerfScore > 3.2, and perfScore=1.56817]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4106 secs, and comparison 7.28486 sec, and warnIfPerfScore > 1.7, and perfScore=0.699753]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 18.6441 secs, and comparison 44.1308 sec, and warnIfPerfScore > 2.8, and perfScore=2.36701]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.6173 secs, and comparison 29.8393 sec, and warnIfPerfScore > 3.3, and perfScore=2.19128]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.8952 secs, and comparison 3.21735 sec, and warnIfPerfScore > 0.25, and perfScore=0.231544]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.7967 secs, and comparison 20.3068 sec, and warnIfPerfScore > 1.25, and perfScore=1.02577]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.2831 secs, and comparison 44.1841 sec, and warnIfPerfScore > 7.7, and perfScore=2.7135]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.257 secs, and comparison 4.62408 sec, and warnIfPerfScore > 1.55, and perfScore=0.324337]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.0649 secs, and comparison 43.6698 sec, and warnIfPerfScore > 7.7, and perfScore=2.71834]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.3925 secs, and comparison 4.66213 sec, and warnIfPerfScore > 1.4, and perfScore=0.323927]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 12.9787 secs, and comparison 65.8372 sec, and warnIfPerfScore > 7.9, and perfScore=5.07272]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.1064 secs, and comparison 7.00431 sec, and warnIfPerfScore > 0.8, and perfScore=0.534418]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.8148 secs, and comparison 39.1688 sec, and warnIfPerfScore > 1.7, and perfScore=1.19363]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.05177 secs, and comparison 4.86298 sec, and warnIfPerfScore > 0.55, and perfScore=0.962629]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.28582 sec, and warnIfPerfScore > 0.4, and perfScore=0.352388]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.96098 sec, and warnIfPerfScore > 1.1, and perfScore=0.264065]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 19 seconds]]]

Succeeded
