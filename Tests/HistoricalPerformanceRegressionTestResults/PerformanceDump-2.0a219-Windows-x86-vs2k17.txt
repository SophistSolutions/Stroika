Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/18/17 22:37:26]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.4912 secs, and comparison 6.48026 sec, and warnIfPerfScore > 0.62, and perfScore=0.518788]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.3882 secs, and comparison 4.47811 sec, and warnIfPerfScore > 0.65, and perfScore=0.361483]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 12.6435 secs, and comparison 10.7937 sec, and warnIfPerfScore > 1.05, and perfScore=0.853693]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.1489 secs, and comparison 3.97727 sec, and warnIfPerfScore > 0.5, and perfScore=0.356739]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.2267 secs, and comparison 4.81493 sec, and warnIfPerfScore > 0.68, and perfScore=0.428881]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.0195 secs, and comparison 32.4054 sec, and warnIfPerfScore > 4.3, and perfScore=2.48898]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.9406 secs, and comparison 34.7754 sec, and warnIfPerfScore > 4, and perfScore=2.68731]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 12.6054 secs, and comparison 113.068 sec, and warnIfPerfScore > 10.4, and perfScore=8.96978]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.2705 secs, and comparison 17.3485 sec, and warnIfPerfScore > 3.2, and perfScore=1.00452]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.3637 secs, and comparison 16.0765 sec, and warnIfPerfScore > 1.8, and perfScore=1.203]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.79188 secs, and comparison 15.7896 sec, and warnIfPerfScore > 2.8, and perfScore=1.61252]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.3889 secs, and comparison 39.4785 sec, and warnIfPerfScore > 3.3, and perfScore=2.74367]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15.0226 secs, and comparison 3.30402 sec, and warnIfPerfScore > 0.25, and perfScore=0.219936]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 15.249 secs, and comparison 14.3842 sec, and warnIfPerfScore > 1.4, and perfScore=0.94329]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.794 secs, and comparison 40.8985 sec, and warnIfPerfScore > 7.7, and perfScore=2.96495]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 16.0279 secs, and comparison 5.90685 sec, and warnIfPerfScore > 1.55, and perfScore=0.368536]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 13.1984 secs, and comparison 79.6001 sec, and warnIfPerfScore > 7.7, and perfScore=6.03104]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 16.0447 secs, and comparison 7.21821 sec, and warnIfPerfScore > 1, and perfScore=0.449883]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 15.4243 secs, and comparison 69.067 sec, and warnIfPerfScore > 7.9, and perfScore=4.47781]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 15.5752 secs, and comparison 7.66419 sec, and warnIfPerfScore > 0.8, and perfScore=0.492078]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.285 secs, and comparison 16.0106 sec, and warnIfPerfScore > 1.7, and perfScore=1.20516]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.3861 secs, and comparison 5.15213 sec, and warnIfPerfScore > 0.55, and perfScore=0.415959]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.93752 sec, and warnIfPerfScore > 0.4, and perfScore=0.195834]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.63378 sec, and warnIfPerfScore > 1.1, and perfScore=0.375585]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.779 secs, and comparison 18.7833 sec, and warnIfPerfScore > 2.4, and perfScore=1.36318]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 12.9667 secs, and comparison 24.1803 sec, and warnIfPerfScore > 2.8, and perfScore=1.8648]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 26 seconds]]]

Succeeded
