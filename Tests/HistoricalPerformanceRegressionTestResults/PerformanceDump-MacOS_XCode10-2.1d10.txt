Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/5/18 18:23:46]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.79978 secs, and comparison 6.17567 sec, and warnIfPerfScore > 0.62, and perfScore=0.701798]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.79948 secs, and comparison 5.22019 sec, and warnIfPerfScore > 0.5, and perfScore=0.593239]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 14.9512 secs, and comparison 11.7059 sec, and warnIfPerfScore > 1.05, and perfScore=0.782939]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.9873 secs, and comparison 4.38626 sec, and warnIfPerfScore > 0.43, and perfScore=0.156723]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.5819 secs, and comparison 5.09204 sec, and warnIfPerfScore > 0.55, and perfScore=0.184615]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 19.0471 secs, and comparison 52.96 sec, and warnIfPerfScore > 2.8, and perfScore=2.78047]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 20.3144 secs, and comparison 52.3558 sec, and warnIfPerfScore > 2.9, and perfScore=2.57727]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 16.1559 secs, and comparison 156.188 sec, and warnIfPerfScore > 9.7, and perfScore=9.66752]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.4023 secs, and comparison 26.9834 sec, and warnIfPerfScore > 1.6, and perfScore=1.32257]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.46627 secs, and comparison 5.95045 sec, and warnIfPerfScore > 1.5, and perfScore=0.702842]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.9112 secs, and comparison 31.9884 sec, and warnIfPerfScore > 2.1, and perfScore=2.29947]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 11.3347 secs, and comparison 6.17705 sec, and warnIfPerfScore > 1.3, and perfScore=0.544967]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.8285 secs, and comparison 1.89382 sec, and warnIfPerfScore > 0.18, and perfScore=0.160106]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.2148 secs, and comparison 16.8281 sec, and warnIfPerfScore > 1.3, and perfScore=1.03783]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1022 secs, and comparison 12.7424 sec, and warnIfPerfScore > 1.2, and perfScore=1.0529]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 12.941 secs, and comparison 2.37607 sec, and warnIfPerfScore > 0.33, and perfScore=0.183607]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.6525 secs, and comparison 54.8623 sec, and warnIfPerfScore > 6, and perfScore=4.70818]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.9325 secs, and comparison 5.07055 sec, and warnIfPerfScore > 0.5, and perfScore=0.392078]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.1062 secs, and comparison 50.4619 sec, and warnIfPerfScore > 4.4, and perfScore=3.85024]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.8298 secs, and comparison 4.91859 sec, and warnIfPerfScore > 0.6, and perfScore=0.383374]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.9219 secs, and comparison 41.0955 sec, and warnIfPerfScore > 1.5, and perfScore=1.37342]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.7539 secs, and comparison 5.70415 sec, and warnIfPerfScore > 0.55, and perfScore=0.143486]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.23569 sec, and warnIfPerfScore > 0.25, and perfScore=0.415713]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79851 sec, and warnIfPerfScore > 0.5, and perfScore=0.186567]
	                 	Test_Optional_ is FASTER

[[[Tests took: 15 minutes, 42 seconds]]]

Succeeded
