Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/15/17 22:33:37]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.01891 secs, and comparison 5.21059 sec, and warnIfPerfScore > 0.62, and perfScore=0.742365]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.057 secs, and comparison 3.21033 sec, and warnIfPerfScore > 0.65, and perfScore=0.454914]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.2004 secs, and comparison 11.4489 sec, and warnIfPerfScore > 1, and perfScore=0.753199]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.0593 secs, and comparison 9.69042 sec, and warnIfPerfScore > 1.15, and perfScore=0.963328]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 21.7302 secs, and comparison 3.58074 sec, and warnIfPerfScore > 0.5, and perfScore=0.164782]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 27.3063 secs, and comparison 5.41586 sec, and warnIfPerfScore > 0.68, and perfScore=0.198337]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 20.5201 secs, and comparison 67.3007 sec, and warnIfPerfScore > 4.3, and perfScore=3.27975]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 21.4602 secs, and comparison 68.3473 sec, and warnIfPerfScore > 4, and perfScore=3.18485]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.6827 secs, and comparison 138.993 sec, and warnIfPerfScore > 10.4, and perfScore=10.1583]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.4332 secs, and comparison 34.0309 sec, and warnIfPerfScore > 3.2, and perfScore=1.58776]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4768 secs, and comparison 7.32698 sec, and warnIfPerfScore > 1.8, and perfScore=0.699352]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 18.7377 secs, and comparison 43.8175 sec, and warnIfPerfScore > 2.8, and perfScore=2.33847]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 13.6959 secs, and comparison 29.355 sec, and warnIfPerfScore > 3.3, and perfScore=2.14335]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.8764 secs, and comparison 3.32046 sec, and warnIfPerfScore > 0.25, and perfScore=0.239288]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.8664 secs, and comparison 20.3792 sec, and warnIfPerfScore > 1.25, and perfScore=1.02581]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.1883 secs, and comparison 44.2223 sec, and warnIfPerfScore > 7.7, and perfScore=2.73175]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.5012 secs, and comparison 4.53582 sec, and warnIfPerfScore > 1.55, and perfScore=0.31279]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.9551 secs, and comparison 43.6927 sec, and warnIfPerfScore > 7.7, and perfScore=2.73849]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.6204 secs, and comparison 4.57926 sec, and warnIfPerfScore > 1.4, and perfScore=0.313211]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 12.8766 secs, and comparison 65.8996 sec, and warnIfPerfScore > 7.9, and perfScore=5.11778]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.1902 secs, and comparison 7.00577 sec, and warnIfPerfScore > 0.8, and perfScore=0.531135]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.9131 secs, and comparison 38.0182 sec, and warnIfPerfScore > 1.7, and perfScore=1.15511]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.12376 secs, and comparison 5.12723 sec, and warnIfPerfScore > 0.55, and perfScore=1.00068]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.4237 sec, and warnIfPerfScore > 0.4, and perfScore=0.36158]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.9604 sec, and warnIfPerfScore > 1.1, and perfScore=0.264026]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 22 seconds]]]

Succeeded
