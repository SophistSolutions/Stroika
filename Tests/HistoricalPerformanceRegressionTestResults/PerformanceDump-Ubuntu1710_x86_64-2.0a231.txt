Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/19/18 6:59:30]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.70933 secs, and comparison 4.45165 sec, and warnIfPerfScore > 0.62, and perfScore=0.779715]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.69565 secs, and comparison 2.76133 sec, and warnIfPerfScore > 0.65, and perfScore=0.484814]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.18362 secs, and comparison 6.69922 sec, and warnIfPerfScore > 1.05, and perfScore=1.08338]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 3.56779 secs, and comparison 2.73112 sec, and warnIfPerfScore > 0.5, and perfScore=0.765494]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.121 secs, and comparison 3.85633 sec, and warnIfPerfScore > 0.68, and perfScore=0.935773]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.3169 secs, and comparison 51.9464 sec, and warnIfPerfScore > 4.3, and perfScore=3.90077]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 14.5032 secs, and comparison 56.9482 sec, and warnIfPerfScore > 4, and perfScore=3.9266]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	27
	DETAILS:         	[baseline test 13.8372 secs, and comparison 379.429 sec, and warnIfPerfScore > 10.4, and perfScore=27.4209]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.90667 secs, and comparison 9.85673 sec, and warnIfPerfScore > 3.2, and perfScore=2.00884]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.31078 secs, and comparison 8.99872 sec, and warnIfPerfScore > 1.8, and perfScore=0.966484]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 2.21793 secs, and comparison 10.6922 sec, and warnIfPerfScore > 2.8, and perfScore=4.8208]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.77819 secs, and comparison 20.3006 sec, and warnIfPerfScore > 3.3, and perfScore=2.99499]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.39351 secs, and comparison 2.5975 sec, and warnIfPerfScore > 0.25, and perfScore=0.406272]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.57979 secs, and comparison 4.00696 sec, and warnIfPerfScore > 1.4, and perfScore=1.11933]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 27.4434 secs, and comparison 24.0259 sec, and warnIfPerfScore > 7.7, and perfScore=0.87547]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 20.0884 secs, and comparison 2.39534 sec, and warnIfPerfScore > 1.55, and perfScore=0.11924]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 25.8145 secs, and comparison 53.3504 sec, and warnIfPerfScore > 7.7, and perfScore=2.06668]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.1719 secs, and comparison 4.77267 sec, and warnIfPerfScore > 1, and perfScore=0.392106]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 29.3047 secs, and comparison 48.8746 sec, and warnIfPerfScore > 7.9, and perfScore=1.66781]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.1218 secs, and comparison 4.78024 sec, and warnIfPerfScore > 0.8, and perfScore=0.316116]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.56664 secs, and comparison 10.4992 sec, and warnIfPerfScore > 1.7, and perfScore=1.38756]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.70934 secs, and comparison 2.27808 sec, and warnIfPerfScore > 0.55, and perfScore=0.339538]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.49572 sec, and warnIfPerfScore > 0.4, and perfScore=0.0997146]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.67241 sec, and warnIfPerfScore > 1.1, and perfScore=0.17816]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 46 seconds]]]

Succeeded
