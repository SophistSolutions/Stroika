Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/16/18 0:59:42]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.79977 secs, and comparison 6.17515 sec, and warnIfPerfScore > 0.62, and perfScore=0.70174]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.80015 secs, and comparison 5.27979 sec, and warnIfPerfScore > 0.65, and perfScore=0.599966]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 14.7964 secs, and comparison 11.6382 sec, and warnIfPerfScore > 1.05, and perfScore=0.786556]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.1193 secs, and comparison 4.26358 sec, and warnIfPerfScore > 0.5, and perfScore=0.151624]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.8584 secs, and comparison 4.97141 sec, and warnIfPerfScore > 0.68, and perfScore=0.178453]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.5585 secs, and comparison 57.8897 sec, and warnIfPerfScore > 4.3, and perfScore=3.11931]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 20.0551 secs, and comparison 58.9775 sec, and warnIfPerfScore > 4, and perfScore=2.94077]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 16.151 secs, and comparison 150.086 sec, and warnIfPerfScore > 10.4, and perfScore=9.29264]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 19.3744 secs, and comparison 29.9258 sec, and warnIfPerfScore > 3.2, and perfScore=1.5446]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.14753 secs, and comparison 5.93967 sec, and warnIfPerfScore > 1.8, and perfScore=0.729016]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.9849 secs, and comparison 31.757 sec, and warnIfPerfScore > 2.8, and perfScore=2.2708]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.2908 secs, and comparison 19.8406 sec, and warnIfPerfScore > 3.3, and perfScore=1.75724]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.731 secs, and comparison 1.89569 sec, and warnIfPerfScore > 0.25, and perfScore=0.161596]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.2557 secs, and comparison 16.9786 sec, and warnIfPerfScore > 1.4, and perfScore=1.04447]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.0498 secs, and comparison 33.6656 sec, and warnIfPerfScore > 7.7, and perfScore=2.79387]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.8545 secs, and comparison 4.346 sec, and warnIfPerfScore > 1.55, and perfScore=0.338093]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 11.6026 secs, and comparison 75.248 sec, and warnIfPerfScore > 9, and perfScore=6.48547]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.8602 secs, and comparison 6.62985 sec, and warnIfPerfScore > 1, and perfScore=0.515533]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.0713 secs, and comparison 69.6812 sec, and warnIfPerfScore > 7.9, and perfScore=5.33087]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.8571 secs, and comparison 7.22702 sec, and warnIfPerfScore > 0.8, and perfScore=0.562105]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.2855 secs, and comparison 41.2642 sec, and warnIfPerfScore > 1.7, and perfScore=1.40903]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.75898 secs, and comparison 6.26274 sec, and warnIfPerfScore > 0.55, and perfScore=0.926581]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.13633 sec, and warnIfPerfScore > 0.4, and perfScore=0.475755]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79885 sec, and warnIfPerfScore > 1.1, and perfScore=0.18659]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 35 seconds]]]

Succeeded
