Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/5/18 1:21:11]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.89297 secs, and comparison 4.58446 sec, and warnIfPerfScore > 0.62, and perfScore=0.777954]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.89014 secs, and comparison 2.83498 sec, and warnIfPerfScore > 0.65, and perfScore=0.481309]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.22835 secs, and comparison 6.82445 sec, and warnIfPerfScore > 1.05, and perfScore=1.09571]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 3.20379 secs, and comparison 2.70916 sec, and warnIfPerfScore > 0.5, and perfScore=0.84561]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 3.88186 secs, and comparison 3.8328 sec, and warnIfPerfScore > 0.68, and perfScore=0.987362]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 7.98943 secs, and comparison 27.1437 sec, and warnIfPerfScore > 4.3, and perfScore=3.39745]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.2814 secs, and comparison 29.5887 sec, and warnIfPerfScore > 4, and perfScore=3.18796]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	30
	DETAILS:         	[baseline test 11.3671 secs, and comparison 345.891 sec, and warnIfPerfScore > 10.4, and perfScore=30.4293]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.20198 secs, and comparison 9.6818 sec, and warnIfPerfScore > 3.2, and perfScore=2.3041]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.19557 secs, and comparison 8.14092 sec, and warnIfPerfScore > 1.8, and perfScore=0.993332]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 2.14365 secs, and comparison 10.5877 sec, and warnIfPerfScore > 2.8, and perfScore=4.93911]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 6.50994 secs, and comparison 22.4754 sec, and warnIfPerfScore > 3.3, and perfScore=3.45247]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.51426 secs, and comparison 2.61787 sec, and warnIfPerfScore > 0.25, and perfScore=0.401867]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.39087 secs, and comparison 3.17598 sec, and warnIfPerfScore > 1.4, and perfScore=1.32838]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 23.1012 secs, and comparison 24.519 sec, and warnIfPerfScore > 7.7, and perfScore=1.06137]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 14.4796 secs, and comparison 2.45382 sec, and warnIfPerfScore > 1.55, and perfScore=0.169467]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 20.6603 secs, and comparison 55.6427 sec, and warnIfPerfScore > 7.7, and perfScore=2.69322]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.0994 secs, and comparison 4.92178 sec, and warnIfPerfScore > 1, and perfScore=0.487335]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 24.0042 secs, and comparison 50.7348 sec, and warnIfPerfScore > 7.9, and perfScore=2.11358]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.3108 secs, and comparison 5.05446 sec, and warnIfPerfScore > 0.8, and perfScore=0.446869]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.45655 secs, and comparison 10.8648 sec, and warnIfPerfScore > 1.7, and perfScore=1.45708]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.91775 secs, and comparison 2.2569 sec, and warnIfPerfScore > 0.55, and perfScore=0.326248]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.55108 sec, and warnIfPerfScore > 0.4, and perfScore=0.103405]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.77884 sec, and warnIfPerfScore > 1.1, and perfScore=0.185256]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 3 seconds]]]

Succeeded
