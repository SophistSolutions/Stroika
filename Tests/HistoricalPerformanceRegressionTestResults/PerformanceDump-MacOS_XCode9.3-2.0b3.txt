Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/26/18 23:59:21]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.82674 secs, and comparison 6.17538 sec, and warnIfPerfScore > 0.62, and perfScore=0.699622]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.8261 secs, and comparison 4.16016 sec, and warnIfPerfScore > 0.65, and perfScore=0.471348]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.9109 secs, and comparison 11.9525 sec, and warnIfPerfScore > 1.05, and perfScore=0.801598]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.262 secs, and comparison 4.23983 sec, and warnIfPerfScore > 0.5, and perfScore=0.150019]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 28.3449 secs, and comparison 4.91485 sec, and warnIfPerfScore > 0.68, and perfScore=0.173395]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.9787 secs, and comparison 58.0076 sec, and warnIfPerfScore > 4.3, and perfScore=3.05646]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 20.9037 secs, and comparison 59.6128 sec, and warnIfPerfScore > 4, and perfScore=2.85178]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 16.348 secs, and comparison 151.893 sec, and warnIfPerfScore > 10.4, and perfScore=9.2912]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.2909 secs, and comparison 30.6014 sec, and warnIfPerfScore > 3.2, and perfScore=1.50814]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.29711 secs, and comparison 5.93813 sec, and warnIfPerfScore > 1.8, and perfScore=0.715686]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.3599 secs, and comparison 33.1031 sec, and warnIfPerfScore > 2.8, and perfScore=2.30525]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 11.1907 secs, and comparison 22.6308 sec, and warnIfPerfScore > 3.3, and perfScore=2.0223]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.5504 secs, and comparison 1.89551 sec, and warnIfPerfScore > 0.25, and perfScore=0.164107]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.1848 secs, and comparison 19.1175 sec, and warnIfPerfScore > 1.4, and perfScore=1.11246]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.3397 secs, and comparison 34.4796 sec, and warnIfPerfScore > 7.7, and perfScore=2.79421]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9372 secs, and comparison 4.28909 sec, and warnIfPerfScore > 1.55, and perfScore=0.331533]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 11.825 secs, and comparison 75.8703 sec, and warnIfPerfScore > 9, and perfScore=6.41611]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.878 secs, and comparison 6.63594 sec, and warnIfPerfScore > 1, and perfScore=0.515291]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.2616 secs, and comparison 70.0646 sec, and warnIfPerfScore > 7.9, and perfScore=5.28328]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.912 secs, and comparison 7.22077 sec, and warnIfPerfScore > 0.8, and perfScore=0.559231]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 30.9742 secs, and comparison 40.8906 sec, and warnIfPerfScore > 1.7, and perfScore=1.32015]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 6.49144 secs, and comparison 6.13065 sec, and warnIfPerfScore > 0.55, and perfScore=0.944421]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15 secs, and comparison 7.07867 sec, and warnIfPerfScore > 0.4, and perfScore=0.471911]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78853 sec, and warnIfPerfScore > 1.1, and perfScore=0.185902]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 52 seconds]]]

Succeeded
