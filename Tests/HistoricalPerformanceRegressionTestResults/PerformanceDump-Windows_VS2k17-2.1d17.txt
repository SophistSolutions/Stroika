Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 28 21:28:3 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.5548 secs, and comparison 5.56749 sec, and warnIfPerfScore > 0.62, and perfScore=0.481831]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.4349 secs, and comparison 3.57364 sec, and warnIfPerfScore > 0.5, and perfScore=0.31252]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 11.1283 secs, and comparison 10.4925 sec, and warnIfPerfScore > 1.05, and perfScore=0.942867]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.1626 secs, and comparison 4.51883 sec, and warnIfPerfScore > 0.45, and perfScore=0.404817]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.70803 secs, and comparison 4.26607 sec, and warnIfPerfScore > 0.55, and perfScore=0.439437]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.1022 secs, and comparison 28.1462 sec, and warnIfPerfScore > 2.8, and perfScore=2.53519]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.663 secs, and comparison 30.0898 sec, and warnIfPerfScore > 2.9, and perfScore=2.57993]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 10.5412 secs, and comparison 94.8524 sec, and warnIfPerfScore > 9.7, and perfScore=8.99827]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.3893 secs, and comparison 15.2262 sec, and warnIfPerfScore > 1.6, and perfScore=1.33689]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.3705 secs, and comparison 14.8448 sec, and warnIfPerfScore > 1.5, and perfScore=1.20002]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.8767 secs, and comparison 15.3015 sec, and warnIfPerfScore > 2.1, and perfScore=1.72379]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.7204 secs, and comparison 12.1567 sec, and warnIfPerfScore > 1.3, and perfScore=1.03722]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.5514 secs, and comparison 1.50707 sec, and warnIfPerfScore > 0.18, and perfScore=0.120072]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 13.1327 secs, and comparison 11.823 sec, and warnIfPerfScore > 1.3, and perfScore=0.900278]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 9.86215 secs, and comparison 9.05573 sec, and warnIfPerfScore > 1.2, and perfScore=0.918231]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.411 secs, and comparison 2.19247 sec, and warnIfPerfScore > 0.33, and perfScore=0.210591]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.24753 secs, and comparison 46.3743 sec, and warnIfPerfScore > 6, and perfScore=5.01477]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.2239 secs, and comparison 4.17209 sec, and warnIfPerfScore > 0.5, and perfScore=0.408072]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.8711 secs, and comparison 43.0222 sec, and warnIfPerfScore > 4.4, and perfScore=3.95747]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.2413 secs, and comparison 4.6217 sec, and warnIfPerfScore > 0.6, and perfScore=0.45128]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.2518 secs, and comparison 18.2016 sec, and warnIfPerfScore > 1.5, and perfScore=1.27714]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.2051 secs, and comparison 4.24034 sec, and warnIfPerfScore > 0.55, and perfScore=0.321114]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.54086 sec, and warnIfPerfScore > 0.25, and perfScore=0.102724]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.5842 sec, and warnIfPerfScore > 0.5, and perfScore=0.37228]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.6555 secs, and comparison 17.4496 sec, and warnIfPerfScore > 1.9, and perfScore=1.37881]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.2691 secs, and comparison 33.4688 sec, and warnIfPerfScore > 3, and perfScore=2.72789]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 2 seconds]]]

Succeeded
