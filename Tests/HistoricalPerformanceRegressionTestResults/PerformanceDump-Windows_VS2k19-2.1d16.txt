Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 21 5:42:29 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.3584 secs, and comparison 5.39085 sec, and warnIfPerfScore > 0.62, and perfScore=0.474616]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.0129 secs, and comparison 4.09698 sec, and warnIfPerfScore > 0.5, and perfScore=0.372016]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.8752 secs, and comparison 9.57139 sec, and warnIfPerfScore > 1.05, and perfScore=0.880115]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.5011 secs, and comparison 3.89965 sec, and warnIfPerfScore > 0.45, and perfScore=0.410442]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.43444 secs, and comparison 4.13532 sec, and warnIfPerfScore > 0.55, and perfScore=0.438321]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.4709 secs, and comparison 28.1594 sec, and warnIfPerfScore > 2.8, and perfScore=2.6893]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 10.8163 secs, and comparison 30.546 sec, and warnIfPerfScore > 2.9, and perfScore=2.82408]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 10.3564 secs, and comparison 94.1998 sec, and warnIfPerfScore > 9.7, and perfScore=9.09578]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.5978 secs, and comparison 15.0124 sec, and warnIfPerfScore > 1.6, and perfScore=1.41655]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.2003 secs, and comparison 15.1132 sec, and warnIfPerfScore > 1.5, and perfScore=1.23875]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.24295 secs, and comparison 15.2118 sec, and warnIfPerfScore > 2.1, and perfScore=1.84543]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.7882 secs, and comparison 11.9123 sec, and warnIfPerfScore > 1.3, and perfScore=1.01053]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 12.3421 secs, and comparison 1.27029 sec, and warnIfPerfScore > 0.18, and perfScore=0.102923]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.2004 secs, and comparison 13.7433 sec, and warnIfPerfScore > 1.3, and perfScore=1.22704]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.62634 secs, and comparison 8.65948 sec, and warnIfPerfScore > 1.2, and perfScore=0.899561]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.1084 secs, and comparison 2.24739 sec, and warnIfPerfScore > 0.33, and perfScore=0.22233]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.08541 secs, and comparison 45.6007 sec, and warnIfPerfScore > 6, and perfScore=5.01911]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.0109 secs, and comparison 4.15813 sec, and warnIfPerfScore > 0.5, and perfScore=0.415362]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.4163 secs, and comparison 41.727 sec, and warnIfPerfScore > 4.4, and perfScore=4.00595]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.2167 secs, and comparison 4.50664 sec, and warnIfPerfScore > 0.6, and perfScore=0.441105]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.238 secs, and comparison 17.7923 sec, and warnIfPerfScore > 1.5, and perfScore=1.24963]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.7871 secs, and comparison 4.56565 sec, and warnIfPerfScore > 0.55, and perfScore=0.357052]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.55779 sec, and warnIfPerfScore > 0.25, and perfScore=0.103853]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.49011 sec, and warnIfPerfScore > 0.5, and perfScore=0.366007]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.3045 secs, and comparison 15.3878 sec, and warnIfPerfScore > 1.9, and perfScore=1.25058]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8129 secs, and comparison 32.4661 sec, and warnIfPerfScore > 3, and perfScore=2.74835]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 42 seconds]]]

Succeeded
