Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/9/16 2:55:32]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.38153 secs, and comparison 4.2246 sec, and warnIfPerfScore > 0.6, and perfScore=0.785019]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.39963 secs, and comparison 6.47074 sec, and warnIfPerfScore > 0.6, and perfScore=1.19837]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.2192 secs, and comparison 8.78989 sec, and warnIfPerfScore > 0.97, and perfScore=1.06943]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.98905 secs, and comparison 7.73221 sec, and warnIfPerfScore > 1.15, and perfScore=0.967851]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.71657 secs, and comparison 2.7773 sec, and warnIfPerfScore > 0.5, and perfScore=0.485834]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.24397 secs, and comparison 4.68993 sec, and warnIfPerfScore > 0.68, and perfScore=0.647425]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.954 secs, and comparison 32.3989 sec, and warnIfPerfScore > 4.3, and perfScore=3.61837]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.68374 secs, and comparison 32.5073 sec, and warnIfPerfScore > 4, and perfScore=3.3569]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.44441 secs, and comparison 99.8665 sec, and warnIfPerfScore > 9.1, and perfScore=11.8263]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.434 secs, and comparison 15.7619 sec, and warnIfPerfScore > 3.2, and perfScore=1.26765]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.97977 secs, and comparison 5.70383 sec, and warnIfPerfScore > 1.7, and perfScore=0.953855]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.58996 secs, and comparison 21.6228 sec, and warnIfPerfScore > 2.8, and perfScore=2.84887]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 7.04764 secs, and comparison 30.669 sec, and warnIfPerfScore > 3.1, and perfScore=4.35167]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.01581 secs, and comparison 2.64732 sec, and warnIfPerfScore > 0.22, and perfScore=0.377337]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.27875 secs, and comparison 5.82889 sec, and warnIfPerfScore > 1.25, and perfScore=1.10422]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.6916 secs, and comparison 31.8921 sec, and warnIfPerfScore > 7.7, and perfScore=3.6693]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.27467 secs, and comparison 3.78413 sec, and warnIfPerfScore > 1.55, and perfScore=0.520179]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.45316 secs, and comparison 31.5254 sec, and warnIfPerfScore > 7.7, and perfScore=3.72942]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.37998 secs, and comparison 3.83736 sec, and warnIfPerfScore > 1.4, and perfScore=0.519969]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 6.17876 secs, and comparison 71.1518 sec, and warnIfPerfScore > 7.9, and perfScore=11.5155]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.97687 secs, and comparison 6.74324 sec, and warnIfPerfScore > 0.8, and perfScore=0.966513]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1009 secs, and comparison 14.517 sec, and warnIfPerfScore > 1.7, and perfScore=1.19966]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 16.5119 secs, and comparison 4.01543 sec, and warnIfPerfScore > 0.47, and perfScore=0.243184]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 15 secs, and comparison 1.37281 sec, and warnIfPerfScore > 0.4, and perfScore=0.0915204]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.14985 sec, and warnIfPerfScore > 1.1, and perfScore=0.20999]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 43 seconds]]]

