Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/11/16 11:26:20]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.40635 secs, and comparison 4.25342 sec, and warnIfPerfScore > 0.62, and perfScore=0.786745]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.40936 secs, and comparison 2.69802 sec, and warnIfPerfScore > 0.65, and perfScore=0.498768]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.45101 secs, and comparison 8.44198 sec, and warnIfPerfScore > 0.97, and perfScore=0.998932]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.91167 secs, and comparison 7.82497 sec, and warnIfPerfScore > 1.15, and perfScore=0.989042]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.03454 secs, and comparison 2.83322 sec, and warnIfPerfScore > 0.5, and perfScore=0.469501]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.56738 secs, and comparison 4.7215 sec, and warnIfPerfScore > 0.68, and perfScore=0.623928]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 8.24174 secs, and comparison 31.6758 sec, and warnIfPerfScore > 4.3, and perfScore=3.84334]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.38972 secs, and comparison 34.2958 sec, and warnIfPerfScore > 4, and perfScore=3.65248]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.95475 secs, and comparison 107.836 sec, and warnIfPerfScore > 9.9, and perfScore=12.0423]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.9068 secs, and comparison 14.7604 sec, and warnIfPerfScore > 3.2, and perfScore=1.14361]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.78005 secs, and comparison 5.98076 sec, and warnIfPerfScore > 1.7, and perfScore=1.03472]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.71589 secs, and comparison 19.6476 sec, and warnIfPerfScore > 2.8, and perfScore=2.92553]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 6.98925 secs, and comparison 35.4257 sec, and warnIfPerfScore > 3.3, and perfScore=5.0686]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.96276 secs, and comparison 2.3907 sec, and warnIfPerfScore > 0.22, and perfScore=0.343355]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.28418 secs, and comparison 5.79248 sec, and warnIfPerfScore > 1.25, and perfScore=1.09619]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.6049 secs, and comparison 31.0218 sec, and warnIfPerfScore > 7.7, and perfScore=3.60513]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.18361 secs, and comparison 3.40493 sec, and warnIfPerfScore > 1.55, and perfScore=0.473985]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.52387 secs, and comparison 30.6091 sec, and warnIfPerfScore > 7.7, and perfScore=3.59098]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.25592 secs, and comparison 3.45303 sec, and warnIfPerfScore > 1.4, and perfScore=0.475892]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 6.11812 secs, and comparison 57.7425 sec, and warnIfPerfScore > 7.9, and perfScore=9.43796]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 6.90897 secs, and comparison 5.86202 sec, and warnIfPerfScore > 0.8, and perfScore=0.848466]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.9547 secs, and comparison 15.1484 sec, and warnIfPerfScore > 1.7, and perfScore=1.26715]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 16.3732 secs, and comparison 3.96658 sec, and warnIfPerfScore > 0.55, and perfScore=0.24226]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56669 sec, and warnIfPerfScore > 0.4, and perfScore=0.104446]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.34723 sec, and warnIfPerfScore > 1.1, and perfScore=0.223148]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 31 seconds]]]

