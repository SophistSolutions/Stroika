Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/9/16 11:42]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.2395 secs, and comparison 4.19139 sec, and warnIfPerfScore > 0.6, and perfScore=0.799959]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.50488 secs, and comparison 6.48796 sec, and warnIfPerfScore > 0.6, and perfScore=1.17858]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.2399 secs, and comparison 8.81936 sec, and warnIfPerfScore > 0.97, and perfScore=1.07032]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.01178 secs, and comparison 7.73708 sec, and warnIfPerfScore > 1.15, and perfScore=0.965713]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.62512 secs, and comparison 2.73371 sec, and warnIfPerfScore > 0.5, and perfScore=0.485983]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.32778 secs, and comparison 4.53308 sec, and warnIfPerfScore > 0.68, and perfScore=0.618616]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.94632 secs, and comparison 32.3913 sec, and warnIfPerfScore > 4.3, and perfScore=3.62063]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 9.3359 secs, and comparison 32.3382 sec, and warnIfPerfScore > 4, and perfScore=3.46386]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.35076 secs, and comparison 97.5884 sec, and warnIfPerfScore > 9.1, and perfScore=11.6862]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.3782 secs, and comparison 14.4152 sec, and warnIfPerfScore > 3.2, and perfScore=1.26691]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.57658 secs, and comparison 5.71597 sec, and warnIfPerfScore > 1.7, and perfScore=1.025]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 6.54395 secs, and comparison 20.6355 sec, and warnIfPerfScore > 2.8, and perfScore=3.15337]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 6.73954 secs, and comparison 29.3413 sec, and warnIfPerfScore > 3.1, and perfScore=4.35361]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.86084 secs, and comparison 2.40876 sec, and warnIfPerfScore > 0.22, and perfScore=0.351088]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.46705 secs, and comparison 6.03813 sec, and warnIfPerfScore > 1.25, and perfScore=1.10446]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.82137 secs, and comparison 31.8836 sec, and warnIfPerfScore > 7.7, and perfScore=3.61436]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.59808 secs, and comparison 3.57987 sec, and warnIfPerfScore > 1.55, and perfScore=0.471154]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.85434 secs, and comparison 31.7112 sec, and warnIfPerfScore > 7.7, and perfScore=3.58143]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.64972 secs, and comparison 3.53367 sec, and warnIfPerfScore > 1.4, and perfScore=0.461934]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 6.16298 secs, and comparison 71.3918 sec, and warnIfPerfScore > 7.9, and perfScore=11.584]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.24553 secs, and comparison 6.82331 sec, and warnIfPerfScore > 0.8, and perfScore=0.941727]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.2717 secs, and comparison 14.6816 sec, and warnIfPerfScore > 1.7, and perfScore=1.19638]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 16.9552 secs, and comparison 4.0636 sec, and warnIfPerfScore > 0.47, and perfScore=0.239667]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42672 sec, and warnIfPerfScore > 0.4, and perfScore=0.0951144]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.20359 sec, and warnIfPerfScore > 1.1, and perfScore=0.213573]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 35 seconds]]]

