Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/9/16 16:13:43]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.25635 secs, and comparison 4.15202 sec, and warnIfPerfScore > 0.6, and perfScore=0.789906]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.24783 secs, and comparison 6.33554 sec, and warnIfPerfScore > 0.6, and perfScore=1.20727]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.24974 secs, and comparison 8.12681 sec, and warnIfPerfScore > 0.97, and perfScore=0.985099]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.18823 secs, and comparison 7.70785 sec, and warnIfPerfScore > 1.15, and perfScore=0.941332]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.86916 secs, and comparison 2.75656 sec, and warnIfPerfScore > 0.5, and perfScore=0.469669]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.22582 secs, and comparison 4.63311 sec, and warnIfPerfScore > 0.68, and perfScore=0.641189]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.45482 secs, and comparison 30.3278 sec, and warnIfPerfScore > 4.3, and perfScore=3.58705]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.83865 secs, and comparison 30.2196 sec, and warnIfPerfScore > 4, and perfScore=3.41903]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.2426 secs, and comparison 96.5019 sec, and warnIfPerfScore > 9.1, and perfScore=11.7077]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1056 secs, and comparison 14.5238 sec, and warnIfPerfScore > 3.2, and perfScore=1.19975]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.73571 secs, and comparison 5.55588 sec, and warnIfPerfScore > 1.7, and perfScore=0.968648]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.75747 secs, and comparison 19.5523 sec, and warnIfPerfScore > 2.8, and perfScore=2.89344]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 6.83702 secs, and comparison 30.4254 sec, and warnIfPerfScore > 3.1, and perfScore=4.4501]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.88332 secs, and comparison 2.49542 sec, and warnIfPerfScore > 0.22, and perfScore=0.362532]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.53096 secs, and comparison 6.5361 sec, and warnIfPerfScore > 1.25, and perfScore=1.18173]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.09982 secs, and comparison 32.9946 sec, and warnIfPerfScore > 7.7, and perfScore=3.62585]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.85449 secs, and comparison 3.64404 sec, and warnIfPerfScore > 1.55, and perfScore=0.463943]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.10214 secs, and comparison 32.3205 sec, and warnIfPerfScore > 7.7, and perfScore=3.55086]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.93607 secs, and comparison 3.5496 sec, and warnIfPerfScore > 1.4, and perfScore=0.447274]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 6.34904 secs, and comparison 61.3181 sec, and warnIfPerfScore > 7.9, and perfScore=9.65784]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.63901 secs, and comparison 6.24458 sec, and warnIfPerfScore > 0.8, and perfScore=0.81746]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6076 secs, and comparison 14.337 sec, and warnIfPerfScore > 1.7, and perfScore=1.13718]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.7248 secs, and comparison 4.15278 sec, and warnIfPerfScore > 0.47, and perfScore=0.26409]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42513 sec, and warnIfPerfScore > 0.4, and perfScore=0.0950083]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.20891 sec, and warnIfPerfScore > 1.1, and perfScore=0.213927]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 20 seconds]]]

