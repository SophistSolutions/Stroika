Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jun 15 15:32:27 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.6502 secs, and comparison 5.46614 sec, and warnIfPerfScore > 0.62, and perfScore=0.469187]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7592 secs, and comparison 3.62315 sec, and warnIfPerfScore > 0.5, and perfScore=0.308112]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 11.1523 secs, and comparison 10.1991 sec, and warnIfPerfScore > 1.05, and perfScore=0.914532]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.4156 secs, and comparison 4.2043 sec, and warnIfPerfScore > 0.48, and perfScore=0.403655]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.88822 secs, and comparison 4.76428 sec, and warnIfPerfScore > 0.55, and perfScore=0.481813]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.262 secs, and comparison 27.8014 sec, and warnIfPerfScore > 2.9, and perfScore=2.4686]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.3831 secs, and comparison 29.7232 sec, and warnIfPerfScore > 2.9, and perfScore=2.61116]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 10.9251 secs, and comparison 95.0606 sec, and warnIfPerfScore > 9.7, and perfScore=8.70116]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.1238 secs, and comparison 14.1564 sec, and warnIfPerfScore > 1.6, and perfScore=1.27263]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.357 secs, and comparison 14.4167 sec, and warnIfPerfScore > 1.5, and perfScore=1.16669]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.80527 secs, and comparison 15.6924 sec, and warnIfPerfScore > 2.1, and perfScore=1.78216]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 12.0801 secs, and comparison 9.8534 sec, and warnIfPerfScore > 1.3, and perfScore=0.815669]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.7699 secs, and comparison 1.73527 sec, and warnIfPerfScore > 0.18, and perfScore=0.135888]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8408 secs, and comparison 14.1153 sec, and warnIfPerfScore > 1.3, and perfScore=1.09925]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.1002 secs, and comparison 9.53064 sec, and warnIfPerfScore > 1.2, and perfScore=0.943613]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.453 secs, and comparison 2.19856 sec, and warnIfPerfScore > 0.33, and perfScore=0.210328]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 9.47528 secs, and comparison 49.1304 sec, and warnIfPerfScore > 6, and perfScore=5.18512]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3905 secs, and comparison 4.51286 sec, and warnIfPerfScore > 0.5, and perfScore=0.434324]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.7721 secs, and comparison 43.9542 sec, and warnIfPerfScore > 4.4, and perfScore=4.08037]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.0116 secs, and comparison 4.71548 sec, and warnIfPerfScore > 0.6, and perfScore=0.428228]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.4696 secs, and comparison 20.2542 sec, and warnIfPerfScore > 1.5, and perfScore=1.3093]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.03 secs, and comparison 4.90332 sec, and warnIfPerfScore > 0.55, and perfScore=0.349488]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.72899 sec, and warnIfPerfScore > 0.25, and perfScore=0.115266]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.42137 sec, and warnIfPerfScore > 0.5, and perfScore=0.361425]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.0405 secs, and comparison 19.7275 sec, and warnIfPerfScore > 1.9, and perfScore=1.78682]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.2256 secs, and comparison 33.3629 sec, and warnIfPerfScore > 3.1, and perfScore=2.72894]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 6 seconds]]]

Succeeded
