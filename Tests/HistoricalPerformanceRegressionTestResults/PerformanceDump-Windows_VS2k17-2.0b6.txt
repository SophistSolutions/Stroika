Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/12/18 7:14:52]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.9673 secs, and comparison 5.45077 sec, and warnIfPerfScore > 0.62, and perfScore=0.497]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.2883 secs, and comparison 4.05758 sec, and warnIfPerfScore > 0.65, and perfScore=0.359449]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.9101 secs, and comparison 9.22669 sec, and warnIfPerfScore > 1.05, and perfScore=0.845704]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.46707 secs, and comparison 3.39642 sec, and warnIfPerfScore > 0.5, and perfScore=0.358762]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.6201 secs, and comparison 4.26706 sec, and warnIfPerfScore > 0.68, and perfScore=0.443557]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.146 secs, and comparison 29.2352 sec, and warnIfPerfScore > 4.3, and perfScore=2.62293]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.6671 secs, and comparison 31.2111 sec, and warnIfPerfScore > 4, and perfScore=2.67514]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 11.0843 secs, and comparison 95.3054 sec, and warnIfPerfScore > 10.4, and perfScore=8.59824]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.169 secs, and comparison 15.7299 sec, and warnIfPerfScore > 3.2, and perfScore=1.40835]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.2445 secs, and comparison 14.6725 sec, and warnIfPerfScore > 1.8, and perfScore=1.1983]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.25186 secs, and comparison 15.2963 sec, and warnIfPerfScore > 2.8, and perfScore=1.85367]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 11.3171 secs, and comparison 38.252 sec, and warnIfPerfScore > 3.3, and perfScore=3.38002]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.3 and got 3.38002}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.0849 secs, and comparison 1.38007 sec, and warnIfPerfScore > 0.25, and perfScore=0.114198]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.377 secs, and comparison 11.8176 sec, and warnIfPerfScore > 1.4, and perfScore=1.03873]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.7599 secs, and comparison 35.4839 sec, and warnIfPerfScore > 7.7, and perfScore=3.63568]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.0134 secs, and comparison 4.65428 sec, and warnIfPerfScore > 1.55, and perfScore=0.464804]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 9.37447 secs, and comparison 70.2933 sec, and warnIfPerfScore > 9, and perfScore=7.49838]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.98874 secs, and comparison 6.27956 sec, and warnIfPerfScore > 1, and perfScore=0.628664]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 10.5373 secs, and comparison 61.7591 sec, and warnIfPerfScore > 7.9, and perfScore=5.86097]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.9659 secs, and comparison 7.06517 sec, and warnIfPerfScore > 0.8, and perfScore=0.708934]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.6547 secs, and comparison 15.1945 sec, and warnIfPerfScore > 1.7, and perfScore=1.30372]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.5366 secs, and comparison 4.47191 sec, and warnIfPerfScore > 0.55, and perfScore=0.330357]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.62419 sec, and warnIfPerfScore > 0.4, and perfScore=0.174946]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.50072 sec, and warnIfPerfScore > 1.1, and perfScore=0.300048]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.8241 secs, and comparison 14.9468 sec, and warnIfPerfScore > 2.4, and perfScore=1.16552]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.5789 secs, and comparison 31.8404 sec, and warnIfPerfScore > 2.9, and perfScore=2.74985]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 22 seconds]]]

Failed
