Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Mar  6 1:41:3 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.7924 secs, and comparison 5.53298 sec, and warnIfPerfScore > 0.62, and perfScore=0.4692]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.4946 secs, and comparison 3.58282 sec, and warnIfPerfScore > 0.5, and perfScore=0.311696]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.5048 secs, and comparison 9.64143 sec, and warnIfPerfScore > 1.05, and perfScore=0.838032]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.0483 secs, and comparison 3.95123 sec, and warnIfPerfScore > 0.45, and perfScore=0.393224]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.339 secs, and comparison 4.26236 sec, and warnIfPerfScore > 0.55, and perfScore=0.412259]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.2626 secs, and comparison 29.0903 sec, and warnIfPerfScore > 2.8, and perfScore=2.37228]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.4554 secs, and comparison 30.9067 sec, and warnIfPerfScore > 2.9, and perfScore=2.48139]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 11.5764 secs, and comparison 97.3693 sec, and warnIfPerfScore > 9.7, and perfScore=8.41099]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.1563 secs, and comparison 15.9141 sec, and warnIfPerfScore > 1.6, and perfScore=1.30912]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.6606 secs, and comparison 15.2809 sec, and warnIfPerfScore > 1.5, and perfScore=1.20696]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.77856 secs, and comparison 15.7801 sec, and warnIfPerfScore > 2.1, and perfScore=1.79757]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 12.4727 secs, and comparison 12.2753 sec, and warnIfPerfScore > 1.3, and perfScore=0.984179]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.8608 secs, and comparison 1.5249 sec, and warnIfPerfScore > 0.18, and perfScore=0.11857]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.7555 secs, and comparison 12.3754 sec, and warnIfPerfScore > 1.3, and perfScore=1.05274]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.3983 secs, and comparison 9.19022 sec, and warnIfPerfScore > 1.2, and perfScore=0.883822]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.8483 secs, and comparison 2.2566 sec, and warnIfPerfScore > 0.33, and perfScore=0.208014]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 9.68189 secs, and comparison 49.0404 sec, and warnIfPerfScore > 6, and perfScore=5.06516]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.5471 secs, and comparison 4.39745 sec, and warnIfPerfScore > 0.5, and perfScore=0.416935]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.4344 secs, and comparison 43.2349 sec, and warnIfPerfScore > 4.4, and perfScore=3.78113]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.7573 secs, and comparison 5.02267 sec, and warnIfPerfScore > 0.6, and perfScore=0.466908]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.6305 secs, and comparison 18.8149 sec, and warnIfPerfScore > 1.5, and perfScore=1.286]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.5363 secs, and comparison 4.47112 sec, and warnIfPerfScore > 0.55, and perfScore=0.330306]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.79393 sec, and warnIfPerfScore > 0.25, and perfScore=0.119596]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.73536 sec, and warnIfPerfScore > 0.5, and perfScore=0.382357]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.9215 secs, and comparison 18.3948 sec, and warnIfPerfScore > 1.9, and perfScore=1.32132]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 13.0853 secs, and comparison 33.634 sec, and warnIfPerfScore > 3, and perfScore=2.57036]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 20 seconds]]]

Succeeded
