Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/20/17 23:56:16]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.13114 secs, and comparison 6.77758 sec, and warnIfPerfScore > 0.62, and perfScore=0.742248]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.13297 secs, and comparison 4.16187 sec, and warnIfPerfScore > 0.65, and perfScore=0.455698]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 15.5505 secs, and comparison 11.5521 sec, and warnIfPerfScore > 1.05, and perfScore=0.742879]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.5722 secs, and comparison 4.47284 sec, and warnIfPerfScore > 0.5, and perfScore=0.168328]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 25.6451 secs, and comparison 5.64209 sec, and warnIfPerfScore > 0.68, and perfScore=0.220007]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.2061 secs, and comparison 58.1333 sec, and warnIfPerfScore > 4.3, and perfScore=3.19307]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 22.7926 secs, and comparison 63.705 sec, and warnIfPerfScore > 4, and perfScore=2.79499]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 15.377 secs, and comparison 156.143 sec, and warnIfPerfScore > 10.4, and perfScore=10.1543]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 18.7193 secs, and comparison 30.2105 sec, and warnIfPerfScore > 3.2, and perfScore=1.61387]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.25813 secs, and comparison 5.94106 sec, and warnIfPerfScore > 1.8, and perfScore=0.71942]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.726 secs, and comparison 31.0246 sec, and warnIfPerfScore > 2.8, and perfScore=2.26029]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.8373 secs, and comparison 25.0513 sec, and warnIfPerfScore > 3.3, and perfScore=2.1163]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.2996 secs, and comparison 2.87707 sec, and warnIfPerfScore > 0.25, and perfScore=0.233916]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.9828 secs, and comparison 18.6138 sec, and warnIfPerfScore > 1.4, and perfScore=1.03509]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.836 secs, and comparison 32.1013 sec, and warnIfPerfScore > 7.7, and perfScore=2.71219]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.8647 secs, and comparison 3.88702 sec, and warnIfPerfScore > 1.55, and perfScore=0.357765]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.2915 secs, and comparison 75.2684 sec, and warnIfPerfScore > 7.7, and perfScore=6.66592]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.8276 secs, and comparison 6.507 sec, and warnIfPerfScore > 1, and perfScore=0.600966]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7597 secs, and comparison 68.8241 sec, and warnIfPerfScore > 7.9, and perfScore=5.39388]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.7997 secs, and comparison 6.74325 sec, and warnIfPerfScore > 0.8, and perfScore=0.624393]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 34.0836 secs, and comparison 39.5982 sec, and warnIfPerfScore > 1.7, and perfScore=1.1618]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.48459 secs, and comparison 6.29109 sec, and warnIfPerfScore > 0.55, and perfScore=0.970159]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.69213 sec, and warnIfPerfScore > 0.4, and perfScore=0.379476]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23192 sec, and warnIfPerfScore > 1.1, and perfScore=0.215461]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 47 seconds]]]

Succeeded
