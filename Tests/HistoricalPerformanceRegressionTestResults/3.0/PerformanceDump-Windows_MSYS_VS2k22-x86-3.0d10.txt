[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Sep 23 12:5:59 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.47069 secs, and comparison 4.84367 sec, and warnIfPerfScore > 0.9, and perfScore=0.648356]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.95799 secs, and comparison 3.18121 sec, and warnIfPerfScore > 0.51, and perfScore=0.457203]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 37.8243 secs, and comparison 2.49296 sec, and warnIfPerfScore > 0.49, and perfScore=0.0659089]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 35.3827 secs, and comparison 3.05836 sec, and warnIfPerfScore > 0.45, and perfScore=0.0864367]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 9.46512 secs, and comparison 26.8746 sec, and warnIfPerfScore > 4.9, and perfScore=2.83933]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.4005 secs, and comparison 27.5976 sec, and warnIfPerfScore > 4.1, and perfScore=2.93576]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	40
	DETAILS:         	[baseline test 9.77204 secs, and comparison 387.296 sec, and warnIfPerfScore > 78, and perfScore=39.6331]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.15417 secs, and comparison 7.24777 sec, and warnIfPerfScore > 2.1, and perfScore=0.888843]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.3236 secs, and comparison 14.8737 sec, and warnIfPerfScore > 1.4, and perfScore=1.20692]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.95324 secs, and comparison 7.03834 sec, and warnIfPerfScore > 1.7, and perfScore=1.01224]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.33463 secs, and comparison 11.0857 sec, and warnIfPerfScore > 1.2, and perfScore=1.18759]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.73075 secs, and comparison 4.66222 sec, and warnIfPerfScore > 0.48, and perfScore=0.479123]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.5482 secs, and comparison 15.0388 sec, and warnIfPerfScore > 1.3, and perfScore=1.11002]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.3497 secs, and comparison 6.2505 sec, and warnIfPerfScore > 0.75, and perfScore=0.603929]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 6.20309 secs, and comparison 1.5893 sec, and warnIfPerfScore > 0.33, and perfScore=0.25621]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.0601 secs, and comparison 41.0539 sec, and warnIfPerfScore > 5.1, and perfScore=4.08087]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.90166 secs, and comparison 6.04228 sec, and warnIfPerfScore > 0.7, and perfScore=0.610229]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.2823 secs, and comparison 9.6551 sec, and warnIfPerfScore > 1.1, and perfScore=0.939004]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.27384 secs, and comparison 3.71725 sec, and warnIfPerfScore > 0.55, and perfScore=0.5925]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.4236 secs, and comparison 40.6529 sec, and warnIfPerfScore > 4.9, and perfScore=3.90008]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 7.23191 secs, and comparison 5.57129 sec, and warnIfPerfScore > 0.85, and perfScore=0.770376]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.2989 secs, and comparison 4.24 sec, and warnIfPerfScore > 0.6, and perfScore=0.580909]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.31175 secs, and comparison 4.23263 sec, and warnIfPerfScore > 0.6, and perfScore=0.57888]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 7.08021 secs, and comparison 5.33395 sec, and warnIfPerfScore > 1, and perfScore=0.75336]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.39663 secs, and comparison 9.0166 sec, and warnIfPerfScore > 1.3, and perfScore=1.21901]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 49.8704 secs, and comparison 6.34616 sec, and warnIfPerfScore > 0.21, and perfScore=0.127253]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.32539 secs, and comparison 21.2832 sec, and warnIfPerfScore > 1.8, and perfScore=2.55642]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 7.78854 secs, and comparison 6.69881 sec, and warnIfPerfScore > 1, and perfScore=0.860085]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 11.3056 secs, and comparison 7.46019 sec, and warnIfPerfScore > 0.85, and perfScore=0.659868]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.21105 sec, and warnIfPerfScore > 0.5, and perfScore=0.347404]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.1036 sec, and warnIfPerfScore > 0.5, and perfScore=0.206907]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.304387 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.91666 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.3412 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.137206 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.48095 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.28913 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0433229 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.479083 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.64749 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.148496 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.69204 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.67218 seconds

[[[Tests took: 18 minutes, 23 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1102660 ms)
[----------] 1 test from Stroika_Performance_Tests (1102660 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1102660 ms total)
[  PASSED  ] 1 test.
