Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 22 5:55:45 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.29433 secs, and comparison 4.95104 sec, and warnIfPerfScore > 0.86, and perfScore=0.678751]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.61473 secs, and comparison 3.28066 sec, and warnIfPerfScore > 0.51, and perfScore=0.341212]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 16.4994 secs, and comparison 2.86944 sec, and warnIfPerfScore > 0.39, and perfScore=0.173911]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15.8916 secs, and comparison 3.19984 sec, and warnIfPerfScore > 0.39, and perfScore=0.201355]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.5428 secs, and comparison 33.9557 sec, and warnIfPerfScore > 4.8, and perfScore=2.50729]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.847 secs, and comparison 34.5469 sec, and warnIfPerfScore > 4, and perfScore=2.49491]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	30
	DETAILS:         	[baseline test 13.108 secs, and comparison 393.367 sec, and warnIfPerfScore > 78, and perfScore=30.0097]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 7.80241 secs, and comparison 6.6354 sec, and warnIfPerfScore > 2.1, and perfScore=0.85043]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.4241 secs, and comparison 11.2763 sec, and warnIfPerfScore > 1.4, and perfScore=1.33858]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 6.6292 secs, and comparison 6.12483 sec, and warnIfPerfScore > 1.6, and perfScore=0.923917]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.04702 secs, and comparison 9.93433 sec, and warnIfPerfScore > 1.2, and perfScore=1.09808]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.52291 secs, and comparison 3.98752 sec, and warnIfPerfScore > 0.48, and perfScore=0.41873]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.3099 secs, and comparison 13.9903 sec, and warnIfPerfScore > 1.3, and perfScore=1.13651]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.48457 secs, and comparison 5.42348 sec, and warnIfPerfScore > 0.75, and perfScore=0.571821]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.94459 secs, and comparison 1.50021 sec, and warnIfPerfScore > 0.33, and perfScore=0.252366]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.0769 secs, and comparison 36.569 sec, and warnIfPerfScore > 5.1, and perfScore=4.0288]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 9.06826 secs, and comparison 5.86858 sec, and warnIfPerfScore > 0.7, and perfScore=0.647156]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.11339 secs, and comparison 9.42181 sec, and warnIfPerfScore > 1.1, and perfScore=1.03384]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.98216 secs, and comparison 3.23672 sec, and warnIfPerfScore > 0.55, and perfScore=0.541062]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.59124 secs, and comparison 35.6766 sec, and warnIfPerfScore > 4.7, and perfScore=3.7197]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.03411 secs, and comparison 4.84355 sec, and warnIfPerfScore > 0.79, and perfScore=0.802696]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.03493 secs, and comparison 3.29512 sec, and warnIfPerfScore > 0.6, and perfScore=0.546008]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.00517 secs, and comparison 3.56891 sec, and warnIfPerfScore > 0.6, and perfScore=0.594306]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.03062 secs, and comparison 4.82114 sec, and warnIfPerfScore > 1, and perfScore=0.799445]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.61894 secs, and comparison 8.38971 sec, and warnIfPerfScore > 1.3, and perfScore=1.26753]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.1011 secs, and comparison 5.60901 sec, and warnIfPerfScore > 0.21, and perfScore=0.124365]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.05343 secs, and comparison 11.5471 sec, and warnIfPerfScore > 1.8, and perfScore=1.43382]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 6.98083 secs, and comparison 5.93718 sec, and warnIfPerfScore > 0.99, and perfScore=0.850498]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.3377 secs, and comparison 6.56559 sec, and warnIfPerfScore > 0.85, and perfScore=0.635114]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15 secs, and comparison 5.92732 sec, and warnIfPerfScore > 0.5, and perfScore=0.395155]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.53426 sec, and warnIfPerfScore > 0.5, and perfScore=0.16895]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.282477 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.78588 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.7552 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.122194 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.3918 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.37333 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0350827 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.440317 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.46466 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.122901 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.33536 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.33 seconds

[[[Tests took: 17 minutes, 40 seconds]]]

Succeeded
