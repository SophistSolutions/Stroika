[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jul 10 10:35:30 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.42228 secs, and comparison 2.43766 sec, and warnIfPerfScore > 0.9, and perfScore=0.449564]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.16378 secs, and comparison 4.04307 sec, and warnIfPerfScore > 0.51, and perfScore=0.65594]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 3.87344 secs, and comparison 1.05452 sec, and warnIfPerfScore > 0.49, and perfScore=0.272245]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 4.99978 secs, and comparison 1.11954 sec, and warnIfPerfScore > 0.45, and perfScore=0.223918]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 3.70818 secs, and comparison 22.2565 sec, and warnIfPerfScore > 4.9, and perfScore=6.00199]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 4.11188 secs, and comparison 22.7137 sec, and warnIfPerfScore > 4.1, and perfScore=5.52394]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	64
	DETAILS:         	[baseline test 5.11691 secs, and comparison 327.764 sec, and warnIfPerfScore > 78, and perfScore=64.0552]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 6.73834 secs, and comparison 5.81537 sec, and warnIfPerfScore > 2.1, and perfScore=0.863028]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.8691 secs, and comparison 14.1074 sec, and warnIfPerfScore > 1.4, and perfScore=1.18858]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.2092 secs, and comparison 7.89151 sec, and warnIfPerfScore > 1.7, and perfScore=1.51492]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.14987 secs, and comparison 4.40549 sec, and warnIfPerfScore > 1.2, and perfScore=0.855458]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.95367 secs, and comparison 4.2813 sec, and warnIfPerfScore > 0.48, and perfScore=1.08287]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.7656 secs, and comparison 6.5777 sec, and warnIfPerfScore > 1.3, and perfScore=2.3784]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.39956 secs, and comparison 7.67637 sec, and warnIfPerfScore > 0.75, and perfScore=2.25805]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 18.9829 secs, and comparison 2.93941 sec, and warnIfPerfScore > 0.33, and perfScore=0.154846]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 5.26412 secs, and comparison 45.1415 sec, and warnIfPerfScore > 5.1, and perfScore=8.57533]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.49227 secs, and comparison 14.269 sec, and warnIfPerfScore > 0.7, and perfScore=2.59802]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.33361 secs, and comparison 11.8141 sec, and warnIfPerfScore > 1.1, and perfScore=2.21503]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 21.2106 secs, and comparison 3.68876 sec, and warnIfPerfScore > 0.55, and perfScore=0.173911]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 4.88216 secs, and comparison 42.9368 sec, and warnIfPerfScore > 4.9, and perfScore=8.79463]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 12.8991 secs, and comparison 6.89839 sec, and warnIfPerfScore > 0.85, and perfScore=0.534795]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 18.6419 secs, and comparison 4.01594 sec, and warnIfPerfScore > 0.6, and perfScore=0.215426]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 18.8325 secs, and comparison 4.09778 sec, and warnIfPerfScore > 0.6, and perfScore=0.217591]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 14.6894 secs, and comparison 7.40704 sec, and warnIfPerfScore > 1, and perfScore=0.504244]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 29.6612 secs, and comparison 13.365 sec, and warnIfPerfScore > 1.3, and perfScore=0.450587]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 31.5165 secs, and comparison 6.72411 sec, and warnIfPerfScore > 0.21, and perfScore=0.213352]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.1389 secs, and comparison 16.7875 sec, and warnIfPerfScore > 1.8, and perfScore=2.73461]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.8298 secs, and comparison 4.95153 sec, and warnIfPerfScore > 1, and perfScore=0.724989]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.11337 secs, and comparison 4.79279 sec, and warnIfPerfScore > 0.85, and perfScore=0.937304]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.60324 sec, and warnIfPerfScore > 0.5, and perfScore=0.373549]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.14782 sec, and warnIfPerfScore > 0.5, and perfScore=0.0765213]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.277701 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			4.02042 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			13.5998 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.118524 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.86148 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.15639 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0507648 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.564521 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.96937 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.20309 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.41957 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			8.25111 seconds

[[[Tests took: 16 minutes, 2 seconds]]]

[       OK ] Stroika_Performance_Tests.all (961601 ms)
[----------] 1 test from Stroika_Performance_Tests (961601 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (961601 ms total)
[  PASSED  ] 1 test.
