[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Feb 28 6:7:49 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 3.2785 secs, and comparison 2.30067 sec, and warnIfPerfScore > 0.9, and perfScore=0.701745]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.12617 secs, and comparison 3.23502 sec, and warnIfPerfScore > 0.51, and perfScore=1.03482]
	                 	SpinLock is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 3.64523 secs, and comparison 1.0465 sec, and warnIfPerfScore > 0.49, and perfScore=0.287088]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.68677 secs, and comparison 1.21678 sec, and warnIfPerfScore > 0.45, and perfScore=0.25962]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 3.4633 secs, and comparison 19.6002 sec, and warnIfPerfScore > 4.9, and perfScore=5.65939]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 3.84141 secs, and comparison 19.8824 sec, and warnIfPerfScore > 4.1, and perfScore=5.1758]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	48
	DETAILS:         	[baseline test 4.91546 secs, and comparison 236.615 sec, and warnIfPerfScore > 78, and perfScore=48.1369]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 3.33678 secs, and comparison 5.54188 sec, and warnIfPerfScore > 2.1, and perfScore=1.66085]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.63315 secs, and comparison 8.10064 sec, and warnIfPerfScore > 1.4, and perfScore=1.22124]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.96683 secs, and comparison 7.09296 sec, and warnIfPerfScore > 1.7, and perfScore=2.39075]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.64962 secs, and comparison 4.55518 sec, and warnIfPerfScore > 1.2, and perfScore=1.24812]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.90236 secs, and comparison 4.48583 sec, and warnIfPerfScore > 0.48, and perfScore=1.14952]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.76043 secs, and comparison 4.78548 sec, and warnIfPerfScore > 1.3, and perfScore=1.7336]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.16545 secs, and comparison 6.95687 sec, and warnIfPerfScore > 0.75, and perfScore=2.19775]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 17.344 secs, and comparison 1.68595 sec, and warnIfPerfScore > 0.33, and perfScore=0.0972061]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.06829 secs, and comparison 41.3384 sec, and warnIfPerfScore > 5.1, and perfScore=13.4728]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.06207 secs, and comparison 7.72152 sec, and warnIfPerfScore > 0.7, and perfScore=2.52167]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.02164 secs, and comparison 6.95128 sec, and warnIfPerfScore > 1.1, and perfScore=2.3005]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 17.2768 secs, and comparison 3.67332 sec, and warnIfPerfScore > 0.55, and perfScore=0.212615]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 4.87083 secs, and comparison 42.8491 sec, and warnIfPerfScore > 4.9, and perfScore=8.79708]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.4047 secs, and comparison 4.32391 sec, and warnIfPerfScore > 0.85, and perfScore=0.379133]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 12.9404 secs, and comparison 3.51268 sec, and warnIfPerfScore > 0.6, and perfScore=0.271451]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.0159 secs, and comparison 3.58854 sec, and warnIfPerfScore > 0.6, and perfScore=0.275704]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.9655 secs, and comparison 4.35202 sec, and warnIfPerfScore > 1, and perfScore=0.335662]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 17.1994 secs, and comparison 10.0791 sec, and warnIfPerfScore > 1.3, and perfScore=0.586017]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 19.2595 secs, and comparison 6.92551 sec, and warnIfPerfScore > 0.21, and perfScore=0.359589]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.04751 secs, and comparison 12.6623 sec, and warnIfPerfScore > 1.8, and perfScore=2.50863]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.78159 secs, and comparison 4.95195 sec, and warnIfPerfScore > 1, and perfScore=0.636368]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.81399 secs, and comparison 4.33604 sec, and warnIfPerfScore > 0.85, and perfScore=0.900718]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.4991 sec, and warnIfPerfScore > 0.5, and perfScore=0.366607]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.081
	DETAILS:         	[baseline test 15 secs, and comparison 1.22199 sec, and warnIfPerfScore > 0.5, and perfScore=0.0814663]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.261936 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.51765 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			12.6728 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0933288 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.77405 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.70898 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0319646 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.50375 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.75685 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.136775 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.24115 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.72904 seconds

[[[Tests took: 12 minutes, 16 seconds]]]

[       OK ] Stroika_Performance_Tests.all (736908 ms)
[----------] 1 test from Stroika_Performance_Tests (736908 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (736908 ms total)
[  PASSED  ] 1 test.
