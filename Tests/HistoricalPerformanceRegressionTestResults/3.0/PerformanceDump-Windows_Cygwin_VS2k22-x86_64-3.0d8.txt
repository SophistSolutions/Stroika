[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jul 20 8:45:28 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.95946 secs, and comparison 4.71629 sec, and warnIfPerfScore > 0.9, and perfScore=0.791395]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.9311 secs, and comparison 3.10737 sec, and warnIfPerfScore > 0.51, and perfScore=0.523911]
	                 	SpinLock is FASTER
	                 	{{{WARNING - expected performance score less than 0.51 and got 0.523911}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.3258 secs, and comparison 2.53731 sec, and warnIfPerfScore > 0.49, and perfScore=0.304752]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.60906 secs, and comparison 3.38291 sec, and warnIfPerfScore > 0.45, and perfScore=0.392947]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 7.58978 secs, and comparison 31.5495 sec, and warnIfPerfScore > 4.9, and perfScore=4.15684]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 7.91477 secs, and comparison 28.7744 sec, and warnIfPerfScore > 4.1, and perfScore=3.63553]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	65
	DETAILS:         	[baseline test 6.56517 secs, and comparison 426.748 sec, and warnIfPerfScore > 78, and perfScore=65.0018]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.34389 secs, and comparison 9.38741 sec, and warnIfPerfScore > 2.1, and perfScore=1.47976]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.65874 secs, and comparison 7.73959 sec, and warnIfPerfScore > 1.4, and perfScore=1.16232]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.96595 secs, and comparison 8.57001 sec, and warnIfPerfScore > 1.7, and perfScore=1.43649]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.7857 secs, and comparison 9.95748 sec, and warnIfPerfScore > 1.2, and perfScore=1.27894]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.27894}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.66704 secs, and comparison 3.52324 sec, and warnIfPerfScore > 0.48, and perfScore=0.459531]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.137 secs, and comparison 15.3616 sec, and warnIfPerfScore > 1.3, and perfScore=1.16934]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.17965 secs, and comparison 5.22459 sec, and warnIfPerfScore > 0.75, and perfScore=0.56915]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.96246 secs, and comparison 1.87439 sec, and warnIfPerfScore > 0.33, and perfScore=0.235404]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 8.84306 secs, and comparison 46.2967 sec, and warnIfPerfScore > 5.1, and perfScore=5.23537]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 5.1 and got 5.23537}}}

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.05547 secs, and comparison 5.66482 sec, and warnIfPerfScore > 0.7, and perfScore=0.625569]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 9.86889 secs, and comparison 8.3914 sec, and warnIfPerfScore > 1.1, and perfScore=0.850289]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.53819 secs, and comparison 3.83783 sec, and warnIfPerfScore > 0.55, and perfScore=0.44949]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.19903 secs, and comparison 42.9793 sec, and warnIfPerfScore > 4.9, and perfScore=4.67216]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.58977 secs, and comparison 6.55155 sec, and warnIfPerfScore > 0.85, and perfScore=0.762716]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.49249 secs, and comparison 3.79439 sec, and warnIfPerfScore > 0.6, and perfScore=0.446793]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.39683 secs, and comparison 3.75207 sec, and warnIfPerfScore > 0.6, and perfScore=0.446844]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.41862 secs, and comparison 6.19937 sec, and warnIfPerfScore > 1, and perfScore=0.736388]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.6978 secs, and comparison 9.79668 sec, and warnIfPerfScore > 1.3, and perfScore=1.12634]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.38 secs, and comparison 5.86106 sec, and warnIfPerfScore > 0.21, and perfScore=0.132065]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.53543 secs, and comparison 20.0546 sec, and warnIfPerfScore > 1.8, and perfScore=3.0686]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.0686}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 6.79489 secs, and comparison 6.40862 sec, and warnIfPerfScore > 1, and perfScore=0.943153]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.68908 secs, and comparison 7.02807 sec, and warnIfPerfScore > 0.85, and perfScore=0.72536]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.79482 sec, and warnIfPerfScore > 0.5, and perfScore=0.319655]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.01476 sec, and warnIfPerfScore > 0.5, and perfScore=0.200984]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.294115 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.17464 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.2168 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.17256 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.69078 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.5135 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.041228 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.520676 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.79113 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.244107 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.24465 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.2948 seconds

[[[Tests took: 17 minutes, 52 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1071938 ms)
[----------] 1 test from Stroika_Performance_Tests (1071938 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1071939 ms total)
[  PASSED  ] 1 test.
