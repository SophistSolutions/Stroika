[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Sep 23 12:24:22 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.03956 secs, and comparison 4.79963 sec, and warnIfPerfScore > 0.9, and perfScore=0.794699]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.76881 secs, and comparison 2.87429 sec, and warnIfPerfScore > 0.51, and perfScore=0.498246]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.59119 secs, and comparison 2.5206 sec, and warnIfPerfScore > 0.49, and perfScore=0.382419]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.64596 secs, and comparison 3.22168 sec, and warnIfPerfScore > 0.45, and perfScore=0.484757]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.484757}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 6.55952 secs, and comparison 30.573 sec, and warnIfPerfScore > 4.9, and perfScore=4.66086]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 6.94229 secs, and comparison 28.8129 sec, and warnIfPerfScore > 4.1, and perfScore=4.15034]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.1 and got 4.15034}}}

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	69
	DETAILS:         	[baseline test 6.01599 secs, and comparison 414.039 sec, and warnIfPerfScore > 78, and perfScore=68.8231]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.87333 secs, and comparison 7.55198 sec, and warnIfPerfScore > 2.1, and perfScore=1.28581]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.6798 secs, and comparison 7.34859 sec, and warnIfPerfScore > 1.4, and perfScore=1.29381]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.46264 secs, and comparison 8.09111 sec, and warnIfPerfScore > 1.7, and perfScore=1.48117]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 6.68676 secs, and comparison 9.09165 sec, and warnIfPerfScore > 1.2, and perfScore=1.35965]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.35965}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.72647 secs, and comparison 3.17029 sec, and warnIfPerfScore > 0.48, and perfScore=0.363296]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.9507 secs, and comparison 14.4246 sec, and warnIfPerfScore > 1.3, and perfScore=1.11381]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.78071 secs, and comparison 5.75021 sec, and warnIfPerfScore > 0.75, and perfScore=0.654869]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.5179 secs, and comparison 1.7891 sec, and warnIfPerfScore > 0.33, and perfScore=0.237978]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.43642 secs, and comparison 41.1469 sec, and warnIfPerfScore > 5.1, and perfScore=4.8773]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.36279 secs, and comparison 5.40477 sec, and warnIfPerfScore > 0.7, and perfScore=0.646288]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.34978 secs, and comparison 7.58068 sec, and warnIfPerfScore > 1.1, and perfScore=0.90789]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.55878 secs, and comparison 3.63519 sec, and warnIfPerfScore > 0.55, and perfScore=0.480924]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.87948 secs, and comparison 42.0806 sec, and warnIfPerfScore > 4.9, and perfScore=4.73908]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.51644 secs, and comparison 5.57375 sec, and warnIfPerfScore > 0.85, and perfScore=0.741542]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.3347 secs, and comparison 3.44292 sec, and warnIfPerfScore > 0.6, and perfScore=0.469402]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.37176 secs, and comparison 3.5763 sec, and warnIfPerfScore > 0.6, and perfScore=0.485135]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 7.65576 secs, and comparison 5.74058 sec, and warnIfPerfScore > 1, and perfScore=0.749837]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.94284 secs, and comparison 8.73406 sec, and warnIfPerfScore > 1.3, and perfScore=1.09961]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 39.9746 secs, and comparison 5.34272 sec, and warnIfPerfScore > 0.21, and perfScore=0.133653]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 5.77163 secs, and comparison 18.5175 sec, and warnIfPerfScore > 1.8, and perfScore=3.20836]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.20836}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.32929 secs, and comparison 5.87194 sec, and warnIfPerfScore > 1, and perfScore=0.92774]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 8.45436 secs, and comparison 6.56447 sec, and warnIfPerfScore > 0.85, and perfScore=0.77646]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.86352 sec, and warnIfPerfScore > 0.5, and perfScore=0.257568]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.89777 sec, and warnIfPerfScore > 0.5, and perfScore=0.193185]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.296832 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.01724 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.8669 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.130282 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.55799 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.91599 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0341194 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.481676 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.63678 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.218581 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.85185 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.2223 seconds

[[[Tests took: 16 minutes, 47 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1007194 ms)
[----------] 1 test from Stroika_Performance_Tests (1007194 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1007194 ms total)
[  PASSED  ] 1 test.
