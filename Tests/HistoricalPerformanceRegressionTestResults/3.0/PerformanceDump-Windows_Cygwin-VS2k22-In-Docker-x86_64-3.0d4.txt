Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 13 16:15:16 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.32272 secs, and comparison 4.31431 sec, and warnIfPerfScore > 0.86, and perfScore=0.810546]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.09956 secs, and comparison 2.51164 sec, and warnIfPerfScore > 0.51, and perfScore=0.411775]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.13939 secs, and comparison 2.43734 sec, and warnIfPerfScore > 0.39, and perfScore=0.29945]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.88918 secs, and comparison 2.85625 sec, and warnIfPerfScore > 0.39, and perfScore=0.362047]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 6.97846 secs, and comparison 27.7761 sec, and warnIfPerfScore > 4.8, and perfScore=3.98027]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 7.79699 secs, and comparison 26.2368 sec, and warnIfPerfScore > 4.1, and perfScore=3.36499]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	49
	DETAILS:         	[baseline test 8.04295 secs, and comparison 391.354 sec, and warnIfPerfScore > 78, and perfScore=48.6581]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.055 secs, and comparison 6.84611 sec, and warnIfPerfScore > 2.1, and perfScore=1.13065]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.72599 secs, and comparison 8.91701 sec, and warnIfPerfScore > 1.4, and perfScore=1.15416]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.87108 secs, and comparison 8.28877 sec, and warnIfPerfScore > 1.7, and perfScore=1.4118]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.19982 secs, and comparison 8.54396 sec, and warnIfPerfScore > 1.2, and perfScore=1.18669]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.19327 secs, and comparison 3.19194 sec, and warnIfPerfScore > 0.48, and perfScore=0.389581]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.1451 secs, and comparison 15.3087 sec, and warnIfPerfScore > 1.3, and perfScore=1.08226]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.79958 secs, and comparison 5.50537 sec, and warnIfPerfScore > 0.75, and perfScore=0.561796]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.91274 secs, and comparison 1.93911 sec, and warnIfPerfScore > 0.33, and perfScore=0.245061]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.46189 secs, and comparison 41.4815 sec, and warnIfPerfScore > 5.1, and perfScore=4.90215]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.69447 secs, and comparison 5.36965 sec, and warnIfPerfScore > 0.7, and perfScore=0.617594]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.3632 secs, and comparison 8.25058 sec, and warnIfPerfScore > 1.1, and perfScore=0.881171]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.323 secs, and comparison 3.94647 sec, and warnIfPerfScore > 0.55, and perfScore=0.474164]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.79343 secs, and comparison 41.9525 sec, and warnIfPerfScore > 4.7, and perfScore=4.28374]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.87473 secs, and comparison 6.20194 sec, and warnIfPerfScore > 0.79, and perfScore=0.787575]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.11614 secs, and comparison 3.7206 sec, and warnIfPerfScore > 0.6, and perfScore=0.408133]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.10297 secs, and comparison 3.62015 sec, and warnIfPerfScore > 0.6, and perfScore=0.446768]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.98359 secs, and comparison 5.41375 sec, and warnIfPerfScore > 1, and perfScore=0.678109]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.8891 secs, and comparison 9.78184 sec, and warnIfPerfScore > 1.3, and perfScore=0.989154]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 43.1089 secs, and comparison 6.74381 sec, and warnIfPerfScore > 0.21, and perfScore=0.156437]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.34598 secs, and comparison 11.0493 sec, and warnIfPerfScore > 1.8, and perfScore=1.74115]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.57027 secs, and comparison 6.89037 sec, and warnIfPerfScore > 1, and perfScore=0.910188]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 10.0757 secs, and comparison 6.86255 sec, and warnIfPerfScore > 0.85, and perfScore=0.681097]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.60499 sec, and warnIfPerfScore > 0.5, and perfScore=0.373666]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.94786 sec, and warnIfPerfScore > 0.5, and perfScore=0.196524]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.387802 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			5.54469 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			24.9382 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.281741 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.87262 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			15.5985 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0475587 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.62384 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.93511 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.339716 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.85426 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.218 seconds

[[[Tests took: 17 minutes, 19 seconds]]]

Succeeded
