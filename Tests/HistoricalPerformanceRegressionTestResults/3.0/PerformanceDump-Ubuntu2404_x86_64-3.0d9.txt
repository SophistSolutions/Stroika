[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jul 29 21:44:48 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 3.59013 secs, and comparison 2.25756 sec, and warnIfPerfScore > 0.9, and perfScore=0.628824]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 3.41284 secs, and comparison 3.04831 sec, and warnIfPerfScore > 0.51, and perfScore=0.893188]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 3.70055 secs, and comparison 1.03157 sec, and warnIfPerfScore > 0.49, and perfScore=0.278761]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.7299 secs, and comparison 1.24619 sec, and warnIfPerfScore > 0.45, and perfScore=0.26347]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.43234 secs, and comparison 18.8553 sec, and warnIfPerfScore > 4.9, and perfScore=5.49343]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.9577 secs, and comparison 19.5895 sec, and warnIfPerfScore > 4.1, and perfScore=4.94971]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	47
	DETAILS:         	[baseline test 4.98549 secs, and comparison 231.833 sec, and warnIfPerfScore > 78, and perfScore=46.5016]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.43751 secs, and comparison 5.46944 sec, and warnIfPerfScore > 2.1, and perfScore=1.59111]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.32402 secs, and comparison 8.73995 sec, and warnIfPerfScore > 1.4, and perfScore=1.19333]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.00145 secs, and comparison 6.97199 sec, and warnIfPerfScore > 1.7, and perfScore=2.32288]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.61759 secs, and comparison 4.38012 sec, and warnIfPerfScore > 1.2, and perfScore=1.21078]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.79656 secs, and comparison 3.90689 sec, and warnIfPerfScore > 0.48, and perfScore=1.02906]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.7561 secs, and comparison 4.32287 sec, and warnIfPerfScore > 1.3, and perfScore=1.56847]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.15109 secs, and comparison 6.19969 sec, and warnIfPerfScore > 0.75, and perfScore=1.96747]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 18.4308 secs, and comparison 1.56514 sec, and warnIfPerfScore > 0.33, and perfScore=0.08492]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.02557 secs, and comparison 40.6839 sec, and warnIfPerfScore > 5.1, and perfScore=13.4467]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.07368 secs, and comparison 7.05073 sec, and warnIfPerfScore > 0.7, and perfScore=2.2939]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.06979 secs, and comparison 6.56377 sec, and warnIfPerfScore > 1.1, and perfScore=2.13818]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 18.6259 secs, and comparison 4.61335 sec, and warnIfPerfScore > 0.55, and perfScore=0.247685]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 8.52179 secs, and comparison 50.5478 sec, and warnIfPerfScore > 4.9, and perfScore=5.93159]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.7722 secs, and comparison 5.58656 sec, and warnIfPerfScore > 0.85, and perfScore=0.333085]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 19.6589 secs, and comparison 4.11402 sec, and warnIfPerfScore > 0.6, and perfScore=0.20927]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.4191 secs, and comparison 3.62065 sec, and warnIfPerfScore > 0.6, and perfScore=0.186448]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.3936 secs, and comparison 4.16144 sec, and warnIfPerfScore > 1, and perfScore=0.310704]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 28.4612 secs, and comparison 13.316 sec, and warnIfPerfScore > 1.3, and perfScore=0.467867]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 34.2878 secs, and comparison 6.79792 sec, and warnIfPerfScore > 0.21, and perfScore=0.19826]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 5.11627 secs, and comparison 14.2509 sec, and warnIfPerfScore > 1.8, and perfScore=2.78541]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.39875 secs, and comparison 8.83797 sec, and warnIfPerfScore > 1, and perfScore=1.19452]
	                 	BLOB is ***SLOWER***

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.57401 secs, and comparison 5.88275 sec, and warnIfPerfScore > 0.85, and perfScore=0.686114]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 15 secs, and comparison 9.9663 sec, and warnIfPerfScore > 0.5, and perfScore=0.66442]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 15 secs, and comparison 1.39129 sec, and warnIfPerfScore > 0.5, and perfScore=0.0927526]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.451899 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			5.69399 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			21.7112 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.288589 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.96372 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			10.6594 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0830775 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.867273 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			2.58859 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.27017 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.79223 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			10.7144 seconds

[[[Tests took: 13 minutes, 52 seconds]]]

[       OK ] Stroika_Performance_Tests.all (831822 ms)
[----------] 1 test from Stroika_Performance_Tests (831828 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (831828 ms total)
[  PASSED  ] 1 test.
