Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jul 10 19:52:18 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.72216 secs, and comparison 4.11 sec, and warnIfPerfScore > 0.65, and perfScore=0.61141]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.719 secs, and comparison 2.59029 sec, and warnIfPerfScore > 0.5, and perfScore=0.385517]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 7.61362 secs, and comparison 2.08376 sec, and warnIfPerfScore > 0.48, and perfScore=0.273688]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.59974 secs, and comparison 2.55031 sec, and warnIfPerfScore > 0.57, and perfScore=0.335578]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.11704 secs, and comparison 23.1494 sec, and warnIfPerfScore > 2.9, and perfScore=2.85195]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.24021 secs, and comparison 24.2117 sec, and warnIfPerfScore > 2.9, and perfScore=2.93824]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2.9 and got 2.93824}}}

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	47
	DETAILS:         	[baseline test 7.55199 secs, and comparison 355.085 sec, and warnIfPerfScore > 24, and perfScore=47.0187]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 24 and got 47.0187}}}

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.19516 secs, and comparison 10.3138 sec, and warnIfPerfScore > 1.7, and perfScore=1.43343]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.70348 secs, and comparison 10.3431 sec, and warnIfPerfScore > 1.5, and perfScore=1.34265]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.01205 secs, and comparison 9.92146 sec, and warnIfPerfScore > 2.1, and perfScore=1.65026]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.25798 secs, and comparison 7.87793 sec, and warnIfPerfScore > 1.6, and perfScore=0.953978]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.64086 secs, and comparison 5.03594 sec, and warnIfPerfScore > 0.23, and perfScore=0.582806]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.23 and got 0.582806}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2764 secs, and comparison 13.93 sec, and warnIfPerfScore > 1.3, and perfScore=1.1347]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.26499 secs, and comparison 5.04356 sec, and warnIfPerfScore > 1.2, and perfScore=0.544367]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.67165 secs, and comparison 1.48361 sec, and warnIfPerfScore > 0.33, and perfScore=0.261583]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.85696 secs, and comparison 37.6052 sec, and warnIfPerfScore > 6, and perfScore=4.24583]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.86575 secs, and comparison 5.05556 sec, and warnIfPerfScore > 0.8, and perfScore=0.570235]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.86445 secs, and comparison 8.76088 sec, and warnIfPerfScore > 1.4, and perfScore=0.988315]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.66046 secs, and comparison 3.26522 sec, and warnIfPerfScore > 0.65, and perfScore=0.576847]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.25238 secs, and comparison 34.3478 sec, and warnIfPerfScore > 4.4, and perfScore=3.71232]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.85715 secs, and comparison 4.41579 sec, and warnIfPerfScore > 0.6, and perfScore=0.753915]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.753915}}}

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.84451 secs, and comparison 3.20373 sec, and warnIfPerfScore > 0.6, and perfScore=0.548162]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.85594 secs, and comparison 3.26907 sec, and warnIfPerfScore > 0.6, and perfScore=0.558249]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.8372 secs, and comparison 4.39798 sec, and warnIfPerfScore > 1.3, and perfScore=0.753439]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.3462 secs, and comparison 7.92853 sec, and warnIfPerfScore > 1.3, and perfScore=1.24934]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 44.9054 secs, and comparison 5.3854 sec, and warnIfPerfScore > 0.3, and perfScore=0.119928]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.59174 secs, and comparison 10.261 sec, and warnIfPerfScore > 1.5, and perfScore=1.35161]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 6.80628 secs, and comparison 5.83942 sec, and warnIfPerfScore > 0.55, and perfScore=0.857946]
	                 	BLOB is FASTER
	                 	{{{WARNING - expected performance score less than 0.55 and got 0.857946}}}

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.036
	DETAILS:         	[baseline test 15 secs, and comparison 0.535094 sec, and warnIfPerfScore > 0.1, and perfScore=0.035673]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.53157 sec, and warnIfPerfScore > 0.5, and perfScore=0.168771]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.1132 secs, and comparison 11.9172 sec, and warnIfPerfScore > 2, and perfScore=1.46886]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 7.98664 secs, and comparison 28.5244 sec, and warnIfPerfScore > 3.6, and perfScore=3.57152]
	                 	codecvt_utf8 is ***SLOWER***

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.285604 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.64667 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.4692 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.12871 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.39222 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.30477 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.126989 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			1.62553 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			6.83127 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0338785 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.446033 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.4457 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.12948 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.37688 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.19444 seconds

[[[Tests took: 16 minutes, 9 seconds]]]

Succeeded
