[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 19 13:57:29 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.59025 secs, and comparison 4.37692 sec, and warnIfPerfScore > 0.9, and perfScore=0.664151]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.67233 secs, and comparison 3.05922 sec, and warnIfPerfScore > 0.51, and perfScore=0.458494]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.1459 secs, and comparison 2.42428 sec, and warnIfPerfScore > 0.49, and perfScore=0.238942]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.71596 secs, and comparison 2.84138 sec, and warnIfPerfScore > 0.45, and perfScore=0.292444]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.9459 secs, and comparison 25.5549 sec, and warnIfPerfScore > 4.9, and perfScore=2.8566]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.7755 secs, and comparison 24.4843 sec, and warnIfPerfScore > 4.1, and perfScore=2.79008]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	45
	DETAILS:         	[baseline test 8.28142 secs, and comparison 373.197 sec, and warnIfPerfScore > 78, and perfScore=45.0644]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.82908 secs, and comparison 6.40807 sec, and warnIfPerfScore > 2.1, and perfScore=0.818496]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.33385 secs, and comparison 11.1993 sec, and warnIfPerfScore > 1.4, and perfScore=1.34383]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.75553 secs, and comparison 6.69772 sec, and warnIfPerfScore > 1.7, and perfScore=0.991444]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.07661 secs, and comparison 10.1874 sec, and warnIfPerfScore > 1.2, and perfScore=1.12238]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.43993 secs, and comparison 4.33964 sec, and warnIfPerfScore > 0.48, and perfScore=0.459711]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.9028 secs, and comparison 14.4205 sec, and warnIfPerfScore > 1.3, and perfScore=1.11763]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.0602 secs, and comparison 5.43743 sec, and warnIfPerfScore > 0.75, and perfScore=0.54049]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.02544 secs, and comparison 1.46303 sec, and warnIfPerfScore > 0.33, and perfScore=0.242808]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.56186 secs, and comparison 39.3993 sec, and warnIfPerfScore > 5.1, and perfScore=4.12047]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.93763 secs, and comparison 5.21407 sec, and warnIfPerfScore > 0.7, and perfScore=0.52468]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.7006 secs, and comparison 9.63832 sec, and warnIfPerfScore > 1.1, and perfScore=0.99358]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.01166 secs, and comparison 3.57312 sec, and warnIfPerfScore > 0.55, and perfScore=0.594364]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.8212 secs, and comparison 35.7877 sec, and warnIfPerfScore > 4.9, and perfScore=3.64392]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 6.28227 secs, and comparison 5.23766 sec, and warnIfPerfScore > 0.85, and perfScore=0.833721]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.05935 secs, and comparison 3.39305 sec, and warnIfPerfScore > 0.6, and perfScore=0.559969]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.9943 secs, and comparison 3.40201 sec, and warnIfPerfScore > 0.6, and perfScore=0.567541]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.2492 secs, and comparison 4.92036 sec, and warnIfPerfScore > 1, and perfScore=0.787358]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.52246 secs, and comparison 8.51177 sec, and warnIfPerfScore > 1.3, and perfScore=1.30499]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 47.4406 secs, and comparison 5.6844 sec, and warnIfPerfScore > 0.21, and perfScore=0.119821]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.04243 secs, and comparison 20.2495 sec, and warnIfPerfScore > 1.8, and perfScore=2.51783]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 7.96913 secs, and comparison 6.43861 sec, and warnIfPerfScore > 1, and perfScore=0.807944]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.2095 secs, and comparison 7.17174 sec, and warnIfPerfScore > 0.85, and perfScore=0.639792]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.48298 sec, and warnIfPerfScore > 0.5, and perfScore=0.365532]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.88192 sec, and warnIfPerfScore > 0.5, and perfScore=0.192128]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.31028 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.00471 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.8758 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.12652 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.57411 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.0528 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0472956 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.517301 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.74998 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.16771 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.05013 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.3622 seconds

[[[Tests took: 16 minutes, 36 seconds]]]

[       OK ] Stroika_Performance_Tests.all (995802 ms)
[----------] 1 test from Stroika_Performance_Tests (995802 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (995802 ms total)
[  PASSED  ] 1 test.
