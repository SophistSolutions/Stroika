[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep 24 3:5:9 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 5.67648 secs, and comparison 4.80403 sec, and warnIfPerfScore > 0.9, and perfScore=0.846306]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.40715 secs, and comparison 3.01567 sec, and warnIfPerfScore > 0.51, and perfScore=0.470672]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.69538 secs, and comparison 2.82401 sec, and warnIfPerfScore > 0.49, and perfScore=0.366974]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.92739 secs, and comparison 3.45361 sec, and warnIfPerfScore > 0.45, and perfScore=0.386855]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.07753 secs, and comparison 36.185 sec, and warnIfPerfScore > 4.9, and perfScore=3.98621]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.1334 secs, and comparison 33.9286 sec, and warnIfPerfScore > 4.1, and perfScore=3.34819]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	55
	DETAILS:         	[baseline test 8.26772 secs, and comparison 453.991 sec, and warnIfPerfScore > 78, and perfScore=54.9113]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.29876 secs, and comparison 7.99846 sec, and warnIfPerfScore > 2.1, and perfScore=0.963813]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.87353 secs, and comparison 9.77418 sec, and warnIfPerfScore > 1.4, and perfScore=1.2414]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.09785 secs, and comparison 9.40577 sec, and warnIfPerfScore > 1.7, and perfScore=1.03385]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.4376 secs, and comparison 11.0525 sec, and warnIfPerfScore > 1.2, and perfScore=1.05892]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.3963 secs, and comparison 3.82931 sec, and warnIfPerfScore > 0.48, and perfScore=0.368334]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.2674 secs, and comparison 16.5968 sec, and warnIfPerfScore > 1.3, and perfScore=1.16327]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 10.4058 secs, and comparison 8.44249 sec, and warnIfPerfScore > 0.75, and perfScore=0.811324]
	                 	Sequence<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.75 and got 0.811324}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.97 secs, and comparison 2.25257 sec, and warnIfPerfScore > 0.33, and perfScore=0.225935]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.7208 secs, and comparison 42.9006 sec, and warnIfPerfScore > 5.1, and perfScore=4.00163]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.0323 secs, and comparison 7.26248 sec, and warnIfPerfScore > 0.7, and perfScore=0.72391]
	                 	Sequence_Array<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.7 and got 0.72391}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.2597 secs, and comparison 10.3274 sec, and warnIfPerfScore > 1.1, and perfScore=1.0066]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.46343 secs, and comparison 3.97137 sec, and warnIfPerfScore > 0.55, and perfScore=0.419654]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 10.5033 secs, and comparison 49.3486 sec, and warnIfPerfScore > 4.9, and perfScore=4.69839]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 9.65816 secs, and comparison 7.90269 sec, and warnIfPerfScore > 0.85, and perfScore=0.81824]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.39813 secs, and comparison 3.8202 sec, and warnIfPerfScore > 0.6, and perfScore=0.406485]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.1199 secs, and comparison 3.90852 sec, and warnIfPerfScore > 0.6, and perfScore=0.386219]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.9922 secs, and comparison 7.39099 sec, and warnIfPerfScore > 1, and perfScore=0.739676]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.1098 secs, and comparison 10.6283 sec, and warnIfPerfScore > 1.3, and perfScore=1.05129]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 50.5763 secs, and comparison 6.14791 sec, and warnIfPerfScore > 0.21, and perfScore=0.121557]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.76088 secs, and comparison 25.5691 sec, and warnIfPerfScore > 1.8, and perfScore=2.91855]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 2.91855}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 8.38019 secs, and comparison 6.92258 sec, and warnIfPerfScore > 1, and perfScore=0.826064]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.6857 secs, and comparison 7.47388 sec, and warnIfPerfScore > 0.85, and perfScore=0.639576]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.79351 sec, and warnIfPerfScore > 0.5, and perfScore=0.319567]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.07424 sec, and warnIfPerfScore > 0.5, and perfScore=0.204949]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.300141 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.40687 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.7668 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.123245 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.83635 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.6773 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0525685 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.642855 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			2.1226 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.170972 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.42702 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.3883 seconds

[[[Tests took: 19 minutes, 40 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1179459 ms)
[----------] 1 test from Stroika_Performance_Tests (1179459 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1179459 ms total)
[  PASSED  ] 1 test.
