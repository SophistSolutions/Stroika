Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 21 18:29:6 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.10766 secs, and comparison 4.08439 sec, and warnIfPerfScore > 0.86, and perfScore=0.799658]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.066 secs, and comparison 2.33704 sec, and warnIfPerfScore > 0.51, and perfScore=0.461318]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.82465 secs, and comparison 2.1929 sec, and warnIfPerfScore > 0.39, and perfScore=0.280255]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.7713 secs, and comparison 2.64636 sec, and warnIfPerfScore > 0.39, and perfScore=0.34053]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 6.28949 secs, and comparison 26.2946 sec, and warnIfPerfScore > 4.8, and perfScore=4.18072]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.69961 secs, and comparison 24.1034 sec, and warnIfPerfScore > 4, and perfScore=3.59774]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	69
	DETAILS:         	[baseline test 5.75896 secs, and comparison 399.159 sec, and warnIfPerfScore > 78, and perfScore=69.3109]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.84333 secs, and comparison 6.14836 sec, and warnIfPerfScore > 2.1, and perfScore=1.0522]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.48523 secs, and comparison 6.95253 sec, and warnIfPerfScore > 1.4, and perfScore=1.2675]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.19187 secs, and comparison 7.29969 sec, and warnIfPerfScore > 1.6, and perfScore=1.40598]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.79721 secs, and comparison 7.48801 sec, and warnIfPerfScore > 1.2, and perfScore=1.10163]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.12648 secs, and comparison 2.91257 sec, and warnIfPerfScore > 0.48, and perfScore=0.408696]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1582 secs, and comparison 13.2824 sec, and warnIfPerfScore > 1.3, and perfScore=1.19037]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.96192 secs, and comparison 5.18496 sec, and warnIfPerfScore > 0.75, and perfScore=0.65122]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.52454 secs, and comparison 1.7655 sec, and warnIfPerfScore > 0.33, and perfScore=0.234632]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 7.55678 secs, and comparison 36.589 sec, and warnIfPerfScore > 5.1, and perfScore=4.84187]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.56748 secs, and comparison 4.93675 sec, and warnIfPerfScore > 0.7, and perfScore=0.652364]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.55033 secs, and comparison 7.24306 sec, and warnIfPerfScore > 1.1, and perfScore=0.959305]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.51639 secs, and comparison 3.25381 sec, and warnIfPerfScore > 0.55, and perfScore=0.432895]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.16174 secs, and comparison 37.4873 sec, and warnIfPerfScore > 4.7, and perfScore=4.59305]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.53109 secs, and comparison 5.07799 sec, and warnIfPerfScore > 0.79, and perfScore=0.674271]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.52819 secs, and comparison 3.14517 sec, and warnIfPerfScore > 0.6, and perfScore=0.417785]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.48125 secs, and comparison 3.17033 sec, and warnIfPerfScore > 0.6, and perfScore=0.42377]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.53516 secs, and comparison 5.0269 sec, and warnIfPerfScore > 1, and perfScore=0.667126]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.96159 secs, and comparison 8.29209 sec, and warnIfPerfScore > 1.3, and perfScore=1.04151]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 38.107 secs, and comparison 5.89552 sec, and warnIfPerfScore > 0.21, and perfScore=0.15471]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.65439 secs, and comparison 9.09816 sec, and warnIfPerfScore > 1.8, and perfScore=1.60904]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.71732 secs, and comparison 5.26425 sec, and warnIfPerfScore > 0.99, and perfScore=0.920754]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 7.91771 secs, and comparison 5.69781 sec, and warnIfPerfScore > 0.85, and perfScore=0.719629]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.97983 sec, and warnIfPerfScore > 0.5, and perfScore=0.331988]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.22529 sec, and warnIfPerfScore > 0.5, and perfScore=0.148353]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.253412 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.59711 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.2615 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.13126 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.45201 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.74511 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0372266 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.419203 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.43862 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.136905 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.4191 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.63021 seconds

[[[Tests took: 15 minutes, 40 seconds]]]

Succeeded
