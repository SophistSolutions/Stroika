[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jun 13 17:45:4 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 3.49605 secs, and comparison 2.20749 sec, and warnIfPerfScore > 0.9, and perfScore=0.631424]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 3.75433 secs, and comparison 3.01662 sec, and warnIfPerfScore > 0.51, and perfScore=0.803504]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.56349 secs, and comparison 0.922462 sec, and warnIfPerfScore > 0.49, and perfScore=0.258865]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.31244 secs, and comparison 1.05648 sec, and warnIfPerfScore > 0.45, and perfScore=0.244984]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 2.98104 secs, and comparison 19.5154 sec, and warnIfPerfScore > 4.9, and perfScore=6.54652]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.48559 secs, and comparison 18.7522 sec, and warnIfPerfScore > 4.1, and perfScore=5.37993]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	53
	DETAILS:         	[baseline test 4.34211 secs, and comparison 228.35 sec, and warnIfPerfScore > 78, and perfScore=52.5897]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.27307 secs, and comparison 5.25486 sec, and warnIfPerfScore > 2.1, and perfScore=1.60548]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.04034 secs, and comparison 8.45447 sec, and warnIfPerfScore > 1.4, and perfScore=1.20086]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.73345 secs, and comparison 6.82615 sec, and warnIfPerfScore > 1.7, and perfScore=2.49727]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.45495 secs, and comparison 4.8192 sec, and warnIfPerfScore > 1.2, and perfScore=1.39487]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.59618 secs, and comparison 3.78403 sec, and warnIfPerfScore > 0.48, and perfScore=1.05224]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 2.37392 secs, and comparison 4.23143 sec, and warnIfPerfScore > 1.3, and perfScore=1.78247]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.19059 secs, and comparison 6.48462 sec, and warnIfPerfScore > 0.75, and perfScore=2.03242]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 19.2701 secs, and comparison 1.49182 sec, and warnIfPerfScore > 0.33, and perfScore=0.0774162]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.07059 secs, and comparison 40.0159 sec, and warnIfPerfScore > 5.1, and perfScore=13.032]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.0589 secs, and comparison 6.85462 sec, and warnIfPerfScore > 0.7, and perfScore=2.24088]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.05819 secs, and comparison 8.34921 sec, and warnIfPerfScore > 1.1, and perfScore=2.73011]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.2993 secs, and comparison 3.59822 sec, and warnIfPerfScore > 0.55, and perfScore=0.186443]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 6.58519 secs, and comparison 43.2459 sec, and warnIfPerfScore > 4.9, and perfScore=6.56715]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.0735 secs, and comparison 4.32974 sec, and warnIfPerfScore > 0.85, and perfScore=0.358617]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.9604 secs, and comparison 3.44021 sec, and warnIfPerfScore > 0.6, and perfScore=0.246427]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.0291 secs, and comparison 3.42785 sec, and warnIfPerfScore > 0.6, and perfScore=0.244338]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.9885 secs, and comparison 4.28801 sec, and warnIfPerfScore > 1, and perfScore=0.306539]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 19.3354 secs, and comparison 9.43251 sec, and warnIfPerfScore > 1.3, and perfScore=0.487837]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 18.8563 secs, and comparison 6.18955 sec, and warnIfPerfScore > 0.21, and perfScore=0.328249]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.24137 secs, and comparison 13.1377 sec, and warnIfPerfScore > 1.8, and perfScore=1.81426]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.66951 secs, and comparison 4.85623 sec, and warnIfPerfScore > 1, and perfScore=0.728124]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.53731 secs, and comparison 4.36533 sec, and warnIfPerfScore > 0.85, and perfScore=0.962096]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.11449 sec, and warnIfPerfScore > 0.5, and perfScore=0.340966]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 15 secs, and comparison 1.03706 sec, and warnIfPerfScore > 0.5, and perfScore=0.0691372]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.221742 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.25154 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			11.8849 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.090082 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.74256 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.52353 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0304488 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.455645 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.67781 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.122111 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.19675 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.63916 seconds

[[[Tests took: 12 minutes, 11 seconds]]]

[       OK ] Stroika_Performance_Tests.all (730766 ms)
[----------] 1 test from Stroika_Performance_Tests (730766 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (730766 ms total)
[  PASSED  ] 1 test.
