[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep 22 12:14:43 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 2.44002 secs, and comparison 1.31783 sec, and warnIfPerfScore > 0.9, and perfScore=0.540089]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.2357 secs, and comparison 2.63976 sec, and warnIfPerfScore > 0.51, and perfScore=1.18073]
	                 	SpinLock is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 2.76401 secs, and comparison 0.748868 sec, and warnIfPerfScore > 0.49, and perfScore=0.270936]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 3.47772 secs, and comparison 0.804432 sec, and warnIfPerfScore > 0.45, and perfScore=0.23131]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 2.3185 secs, and comparison 16.7183 sec, and warnIfPerfScore > 4.9, and perfScore=7.21082]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 2.74834 secs, and comparison 15.7647 sec, and warnIfPerfScore > 4.1, and perfScore=5.7361]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	56
	DETAILS:         	[baseline test 3.43337 secs, and comparison 191.291 sec, and warnIfPerfScore > 78, and perfScore=55.7152]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.56175 secs, and comparison 4.28374 sec, and warnIfPerfScore > 2.1, and perfScore=1.20271]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.59747 secs, and comparison 5.77662 sec, and warnIfPerfScore > 1.4, and perfScore=1.25648]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.11642 secs, and comparison 5.49604 sec, and warnIfPerfScore > 1.7, and perfScore=2.59686]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.11316 secs, and comparison 3.77327 sec, and warnIfPerfScore > 1.2, and perfScore=1.21204]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.14541 secs, and comparison 3.35689 sec, and warnIfPerfScore > 0.48, and perfScore=1.06724]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.00235 secs, and comparison 3.90587 sec, and warnIfPerfScore > 1.3, and perfScore=1.95064]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.75747 secs, and comparison 5.43581 sec, and warnIfPerfScore > 0.75, and perfScore=1.9713]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 9.64431 secs, and comparison 1.16731 sec, and warnIfPerfScore > 0.33, and perfScore=0.121037]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.603 secs, and comparison 40.1119 sec, and warnIfPerfScore > 5.1, and perfScore=15.4099]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 2.3758 secs, and comparison 4.59489 sec, and warnIfPerfScore > 0.7, and perfScore=1.93404]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.466 secs, and comparison 5.89872 sec, and warnIfPerfScore > 1.1, and perfScore=2.39202]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.64063 secs, and comparison 3.29682 sec, and warnIfPerfScore > 0.55, and perfScore=0.381549]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.30852 secs, and comparison 36.8908 sec, and warnIfPerfScore > 4.9, and perfScore=11.1503]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.3453 secs, and comparison 3.32665 sec, and warnIfPerfScore > 0.85, and perfScore=0.52427]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.86998 secs, and comparison 3.36293 sec, and warnIfPerfScore > 0.6, and perfScore=0.48951]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.77687 secs, and comparison 3.33154 sec, and warnIfPerfScore > 0.6, and perfScore=0.491604]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.80519 secs, and comparison 3.27813 sec, and warnIfPerfScore > 1, and perfScore=0.481711]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 10.4576 secs, and comparison 8.03864 sec, and warnIfPerfScore > 1.3, and perfScore=0.768692]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.9947 secs, and comparison 4.68618 sec, and warnIfPerfScore > 0.21, and perfScore=0.360622]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.72733 secs, and comparison 8.22563 sec, and warnIfPerfScore > 1.8, and perfScore=1.43621]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 4.91701 secs, and comparison 3.53315 sec, and warnIfPerfScore > 1, and perfScore=0.718558]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 3.56984 secs, and comparison 3.09739 sec, and warnIfPerfScore > 0.85, and perfScore=0.867655]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.28416 sec, and warnIfPerfScore > 0.5, and perfScore=0.285611]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.727884 sec, and warnIfPerfScore > 0.5, and perfScore=0.0485256]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.114581 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.17646 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			9.10694 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0829796 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.94013 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.44328 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0272991 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.441211 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.62053 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.15511 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.3552 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			8.28693 seconds

[[[Tests took: 9 minutes, 29 seconds]]]

[       OK ] Stroika_Performance_Tests.all (569551 ms)
[----------] 1 test from Stroika_Performance_Tests (569551 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (569551 ms total)
[  PASSED  ] 1 test.
