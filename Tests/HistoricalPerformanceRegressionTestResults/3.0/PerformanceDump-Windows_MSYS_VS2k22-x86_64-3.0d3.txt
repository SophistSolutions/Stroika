Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 30 12:19:58 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.04651 secs, and comparison 4.50075 sec, and warnIfPerfScore > 0.86, and perfScore=0.744355]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.94957 secs, and comparison 2.75372 sec, and warnIfPerfScore > 0.51, and perfScore=0.462844]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.11053 secs, and comparison 2.5416 sec, and warnIfPerfScore > 0.39, and perfScore=0.31337]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.89473 secs, and comparison 2.95655 sec, and warnIfPerfScore > 0.39, and perfScore=0.374497]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 6.59159 secs, and comparison 28.0372 sec, and warnIfPerfScore > 4.8, and perfScore=4.25349]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 6.87498 secs, and comparison 27.4412 sec, and warnIfPerfScore > 4, and perfScore=3.99146]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	71
	DETAILS:         	[baseline test 5.93211 secs, and comparison 419.069 sec, and warnIfPerfScore > 78, and perfScore=70.6442]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.98866 secs, and comparison 6.6712 sec, and warnIfPerfScore > 2.1, and perfScore=1.11397]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.09192 secs, and comparison 7.4226 sec, and warnIfPerfScore > 1.4, and perfScore=1.21843]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.38007 secs, and comparison 7.58528 sec, and warnIfPerfScore > 1.6, and perfScore=1.40989]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.95664 secs, and comparison 7.6597 sec, and warnIfPerfScore > 1.2, and perfScore=1.10106]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.16542 secs, and comparison 2.96858 sec, and warnIfPerfScore > 0.48, and perfScore=0.414292]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5665 secs, and comparison 13.2051 sec, and warnIfPerfScore > 1.3, and perfScore=1.14167]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.10262 secs, and comparison 5.33037 sec, and warnIfPerfScore > 0.75, and perfScore=0.657857]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.41727 secs, and comparison 1.8027 sec, and warnIfPerfScore > 0.33, and perfScore=0.243041]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.75027 secs, and comparison 38.1278 sec, and warnIfPerfScore > 5.1, and perfScore=4.91954]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.79724 secs, and comparison 5.18797 sec, and warnIfPerfScore > 0.7, and perfScore=0.66536]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.86609 secs, and comparison 7.39473 sec, and warnIfPerfScore > 1.1, and perfScore=0.940077]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.43325 secs, and comparison 3.4011 sec, and warnIfPerfScore > 0.55, and perfScore=0.457553]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.39142 secs, and comparison 38.5253 sec, and warnIfPerfScore > 4.7, and perfScore=4.59104]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 7.38893 secs, and comparison 5.31414 sec, and warnIfPerfScore > 0.79, and perfScore=0.719202]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.46276 secs, and comparison 3.29363 sec, and warnIfPerfScore > 0.6, and perfScore=0.441343]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.48554 secs, and comparison 3.55661 sec, and warnIfPerfScore > 0.6, and perfScore=0.475131]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.57547 secs, and comparison 5.33121 sec, and warnIfPerfScore > 1, and perfScore=0.703746]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.79378 secs, and comparison 8.45018 sec, and warnIfPerfScore > 1.3, and perfScore=1.08422]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 37.1968 secs, and comparison 6.20785 sec, and warnIfPerfScore > 0.21, and perfScore=0.166892]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.69308 secs, and comparison 9.13378 sec, and warnIfPerfScore > 1.8, and perfScore=1.60437]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.05682 secs, and comparison 5.64788 sec, and warnIfPerfScore > 0.99, and perfScore=0.932484]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.24296 secs, and comparison 6.24158 sec, and warnIfPerfScore > 0.85, and perfScore=0.757202]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.73099 sec, and warnIfPerfScore > 0.5, and perfScore=0.315399]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.57448 sec, and warnIfPerfScore > 0.5, and perfScore=0.171632]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.276157 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.83085 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.147 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.122161 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.30007 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.93386 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0333845 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.445671 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.5541 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.170156 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.59895 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.20272 seconds

[[[Tests took: 16 minutes, 18 seconds]]]

Succeeded
