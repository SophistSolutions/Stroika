Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 12 23:24:39 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.27002 secs, and comparison 4.1339 sec, and warnIfPerfScore > 0.86, and perfScore=0.784418]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.14785 secs, and comparison 2.37044 sec, and warnIfPerfScore > 0.51, and perfScore=0.460472]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.3236 secs, and comparison 2.16584 sec, and warnIfPerfScore > 0.39, and perfScore=0.342501]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.14942 secs, and comparison 2.65602 sec, and warnIfPerfScore > 0.39, and perfScore=0.431914]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.39 and got 0.431914}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 6.61614 secs, and comparison 26.525 sec, and warnIfPerfScore > 4.8, and perfScore=4.00913]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 7.30296 secs, and comparison 25.1107 sec, and warnIfPerfScore > 4.1, and perfScore=3.43844]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	60
	DETAILS:         	[baseline test 5.79788 secs, and comparison 347.193 sec, and warnIfPerfScore > 78, and perfScore=59.8827]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.30132 secs, and comparison 6.10963 sec, and warnIfPerfScore > 2.1, and perfScore=1.15247]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.99227 secs, and comparison 7.45451 sec, and warnIfPerfScore > 1.4, and perfScore=1.24402]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.13099 secs, and comparison 7.32646 sec, and warnIfPerfScore > 1.7, and perfScore=1.42789]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.46754 secs, and comparison 7.28926 sec, and warnIfPerfScore > 1.2, and perfScore=1.12705]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.81653 secs, and comparison 2.82498 sec, and warnIfPerfScore > 0.48, and perfScore=0.414431]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.2904 secs, and comparison 13.1559 sec, and warnIfPerfScore > 1.3, and perfScore=1.16523]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.72251 secs, and comparison 4.81937 sec, and warnIfPerfScore > 0.75, and perfScore=0.624068]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.95877 secs, and comparison 1.75186 sec, and warnIfPerfScore > 0.33, and perfScore=0.251749]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.43244 secs, and comparison 36.8341 sec, and warnIfPerfScore > 5.1, and perfScore=4.95585]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.41276 secs, and comparison 4.5242 sec, and warnIfPerfScore > 0.7, and perfScore=0.610326]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.61182 secs, and comparison 6.98882 sec, and warnIfPerfScore > 1.1, and perfScore=0.918154]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.10512 secs, and comparison 3.2664 sec, and warnIfPerfScore > 0.55, and perfScore=0.459725]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 8.11722 secs, and comparison 44.8424 sec, and warnIfPerfScore > 4.7, and perfScore=5.52435]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.7 and got 5.52435}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.04643 secs, and comparison 4.92151 sec, and warnIfPerfScore > 0.79, and perfScore=0.69844]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.90899 secs, and comparison 3.18142 sec, and warnIfPerfScore > 0.6, and perfScore=0.460475]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.05266 secs, and comparison 3.16828 sec, and warnIfPerfScore > 0.6, and perfScore=0.449232]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.02616 secs, and comparison 4.91131 sec, and warnIfPerfScore > 1, and perfScore=0.699004]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.47048 secs, and comparison 7.98808 sec, and warnIfPerfScore > 1.3, and perfScore=1.06929]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 35.1171 secs, and comparison 6.04036 sec, and warnIfPerfScore > 0.21, and perfScore=0.172007]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.50281 secs, and comparison 8.96833 sec, and warnIfPerfScore > 1.8, and perfScore=1.62977]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.48727 secs, and comparison 5.1726 sec, and warnIfPerfScore > 1, and perfScore=0.942655]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 7.52754 secs, and comparison 5.80302 sec, and warnIfPerfScore > 0.85, and perfScore=0.770905]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.39677 sec, and warnIfPerfScore > 0.5, and perfScore=0.293118]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.3473 sec, and warnIfPerfScore > 0.5, and perfScore=0.156487]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.253717 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.79672 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.8554 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.102262 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.24456 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.55691 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0314097 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.432475 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.46113 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.121803 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.4868 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.84578 seconds

[[[Tests took: 14 minutes, 44 seconds]]]

Succeeded
