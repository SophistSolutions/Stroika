[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep 22 19:50:15 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.20003 secs, and comparison 4.82252 sec, and warnIfPerfScore > 0.9, and perfScore=1.50702]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 3.25898 secs, and comparison 2.2892 sec, and warnIfPerfScore > 0.51, and perfScore=0.702428]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 2.49669 secs, and comparison 0.736118 sec, and warnIfPerfScore > 0.49, and perfScore=0.294837]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 2.27858 secs, and comparison 0.968582 sec, and warnIfPerfScore > 0.45, and perfScore=0.425082]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.11687 secs, and comparison 12.656 sec, and warnIfPerfScore > 4.9, and perfScore=2.47339]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 6.52572 secs, and comparison 14.468 sec, and warnIfPerfScore > 4.1, and perfScore=2.21707]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 7.64828 secs, and comparison 170.024 sec, and warnIfPerfScore > 78, and perfScore=22.2304]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.15134 secs, and comparison 2.85396 sec, and warnIfPerfScore > 2.1, and perfScore=1.3266]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.74419 secs, and comparison 5.61248 sec, and warnIfPerfScore > 1.4, and perfScore=1.18302]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.47162 secs, and comparison 3.11108 sec, and warnIfPerfScore > 1.7, and perfScore=1.25872]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 4.96726 secs, and comparison 3.417 sec, and warnIfPerfScore > 1.2, and perfScore=0.687905]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.21174 secs, and comparison 2.77829 sec, and warnIfPerfScore > 0.48, and perfScore=0.533083]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.6244 secs, and comparison 19.7844 sec, and warnIfPerfScore > 1.3, and perfScore=1.56716]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.77604 secs, and comparison 4.8521 sec, and warnIfPerfScore > 0.75, and perfScore=1.28497]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 2.03144 secs, and comparison 0.660333 sec, and warnIfPerfScore > 0.33, and perfScore=0.325056]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 3.49462 secs, and comparison 31.5694 sec, and warnIfPerfScore > 5.1, and perfScore=9.03372]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.49682 secs, and comparison 4.64559 sec, and warnIfPerfScore > 0.7, and perfScore=1.32852]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.63743 secs, and comparison 7.57193 sec, and warnIfPerfScore > 1.1, and perfScore=2.08167]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.06474 secs, and comparison 2.5902 sec, and warnIfPerfScore > 0.55, and perfScore=1.25449]
	                 	Sequence_DoublyLinkedList<string> is ***SLOWER***

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 4.95898 secs, and comparison 23.8935 sec, and warnIfPerfScore > 4.9, and perfScore=4.81824]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.01092 secs, and comparison 4.59631 sec, and warnIfPerfScore > 0.85, and perfScore=2.28567]
	                 	Collection<string> is ***SLOWER***

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.00717 secs, and comparison 2.51157 sec, and warnIfPerfScore > 0.6, and perfScore=1.2513]
	                 	Collection_LinkedList<string> is ***SLOWER***

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.0073 secs, and comparison 2.51238 sec, and warnIfPerfScore > 0.6, and perfScore=1.25162]
	                 	Collection_stdforward_list<string> is ***SLOWER***

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.00866 secs, and comparison 4.58408 sec, and warnIfPerfScore > 1, and perfScore=2.28215]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.36148 secs, and comparison 6.87637 sec, and warnIfPerfScore > 1.3, and perfScore=2.9119]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 26.9385 secs, and comparison 3.62751 sec, and warnIfPerfScore > 0.21, and perfScore=0.134659]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.68691 secs, and comparison 7.55759 sec, and warnIfPerfScore > 1.8, and perfScore=0.869997]
	                 	String Characters::Format is FASTER

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 2.67376 secs, and comparison 5.11314 sec, and warnIfPerfScore > 1, and perfScore=1.91234]
	                 	BLOB is ***SLOWER***

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 1.56699 secs, and comparison 3.93927 sec, and warnIfPerfScore > 0.85, and perfScore=2.51391]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.55746 sec, and warnIfPerfScore > 0.5, and perfScore=0.170498]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.88178 sec, and warnIfPerfScore > 0.5, and perfScore=0.125452]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0877637 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.20995 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			4.31993 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0472555 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.872691 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			3.17406 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0255105 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.307751 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			0.999023 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0615579 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.13637 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			3.91259 seconds

[[[Tests took: 8 minutes, 38 seconds]]]

[       OK ] Stroika_Performance_Tests.all (517932 ms)
[----------] 1 test from Stroika_Performance_Tests (517932 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (517932 ms total)
[  PASSED  ] 1 test.
