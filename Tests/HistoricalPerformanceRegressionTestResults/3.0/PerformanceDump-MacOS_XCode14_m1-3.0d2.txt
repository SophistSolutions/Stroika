Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Sep 20 15:44:53 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.27742 secs, and comparison 4.93998 sec, and warnIfPerfScore > 0.86, and perfScore=1.50728]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.36003 secs, and comparison 2.38662 sec, and warnIfPerfScore > 0.51, and perfScore=0.710297]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 4.36669 secs, and comparison 1.1888 sec, and warnIfPerfScore > 0.39, and perfScore=0.272242]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.21601 secs, and comparison 1.67531 sec, and warnIfPerfScore > 0.39, and perfScore=0.397369]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.59529 secs, and comparison 13.3384 sec, and warnIfPerfScore > 4.8, and perfScore=2.38387]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.02834 secs, and comparison 15.2602 sec, and warnIfPerfScore > 4, and perfScore=2.17124]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 8.02472 secs, and comparison 174.181 sec, and warnIfPerfScore > 78, and perfScore=21.7055]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.24441 secs, and comparison 3.66825 sec, and warnIfPerfScore > 2.1, and perfScore=1.63439]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.8058 secs, and comparison 5.6927 sec, and warnIfPerfScore > 1.4, and perfScore=0.980519]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.70319 secs, and comparison 4.35427 sec, and warnIfPerfScore > 1.6, and perfScore=1.61079]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 5.83182 secs, and comparison 3.53189 sec, and warnIfPerfScore > 1.2, and perfScore=0.605624]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.15031 secs, and comparison 2.91172 sec, and warnIfPerfScore > 0.48, and perfScore=0.473427]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.1571 secs, and comparison 15.0698 sec, and warnIfPerfScore > 1.3, and perfScore=1.14537]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.82406 secs, and comparison 5.24309 sec, and warnIfPerfScore > 0.75, and perfScore=1.37108]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 2.10234 secs, and comparison 0.727669 sec, and warnIfPerfScore > 0.33, and perfScore=0.346123]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.66191 secs, and comparison 38.992 sec, and warnIfPerfScore > 5.1, and perfScore=10.648]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.68835 secs, and comparison 4.98849 sec, and warnIfPerfScore > 0.7, and perfScore=1.3525]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 3.66144 secs, and comparison 6.69419 sec, and warnIfPerfScore > 1.1, and perfScore=1.82829]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.0448 secs, and comparison 3.1975 sec, and warnIfPerfScore > 0.55, and perfScore=1.56372]
	                 	Sequence_DoublyLinkedList<string> is ***SLOWER***

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 4.86155 secs, and comparison 27.3854 sec, and warnIfPerfScore > 4.7, and perfScore=5.63307]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 1.98908 secs, and comparison 2.56089 sec, and warnIfPerfScore > 0.79, and perfScore=1.28747]
	                 	Collection<string> is ***SLOWER***

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.00787 secs, and comparison 3.12435 sec, and warnIfPerfScore > 0.6, and perfScore=1.55605]
	                 	Collection_LinkedList<string> is ***SLOWER***

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 2.01808 secs, and comparison 3.11272 sec, and warnIfPerfScore > 0.6, and perfScore=1.54242]
	                 	Collection_stdforward_list<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.00554 secs, and comparison 2.54995 sec, and warnIfPerfScore > 1, and perfScore=1.27145]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.37737 secs, and comparison 8.34913 sec, and warnIfPerfScore > 1.3, and perfScore=3.51192]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.0405 secs, and comparison 4.17462 sec, and warnIfPerfScore > 0.21, and perfScore=0.148879]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.16305 secs, and comparison 10.6336 sec, and warnIfPerfScore > 1.8, and perfScore=1.16048]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.55098 secs, and comparison 5.19529 sec, and warnIfPerfScore > 0.99, and perfScore=2.03659]
	                 	BLOB is ***SLOWER***

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 1.86757 secs, and comparison 4.85717 sec, and warnIfPerfScore > 0.85, and perfScore=2.6008]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.36359 sec, and warnIfPerfScore > 0.5, and perfScore=0.224239]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.64471 sec, and warnIfPerfScore > 0.5, and perfScore=0.109647]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.131862 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.72861 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			5.93584 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.063623 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.18732 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			4.02278 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0257266 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.310789 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.00988 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0658815 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.16651 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			3.99886 seconds

[[[Tests took: 9 minutes, 13 seconds]]]

Succeeded
