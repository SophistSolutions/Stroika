[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jun 11 22:50:33 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.20911 secs, and comparison 4.25477 sec, and warnIfPerfScore > 0.9, and perfScore=0.685246]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.31723 secs, and comparison 2.88458 sec, and warnIfPerfScore > 0.51, and perfScore=0.456621]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 35.2536 secs, and comparison 2.39064 sec, and warnIfPerfScore > 0.49, and perfScore=0.0678127]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 33.1751 secs, and comparison 2.75239 sec, and warnIfPerfScore > 0.45, and perfScore=0.0829655]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.93276 secs, and comparison 25.8803 sec, and warnIfPerfScore > 4.9, and perfScore=2.89724]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.07789 secs, and comparison 23.8508 sec, and warnIfPerfScore > 4.1, and perfScore=2.62735]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	50
	DETAILS:         	[baseline test 8.19832 secs, and comparison 412.058 sec, and warnIfPerfScore > 78, and perfScore=50.2613]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.53339 secs, and comparison 6.71917 sec, and warnIfPerfScore > 2.1, and perfScore=0.891919]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.09 secs, and comparison 11.1673 sec, and warnIfPerfScore > 1.4, and perfScore=1.38039]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.73364 secs, and comparison 6.49777 sec, and warnIfPerfScore > 1.7, and perfScore=0.964971]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.9391 secs, and comparison 10.427 sec, and warnIfPerfScore > 1.2, and perfScore=1.16645]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.4645 secs, and comparison 4.30192 sec, and warnIfPerfScore > 0.48, and perfScore=0.454532]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8097 secs, and comparison 14.3256 sec, and warnIfPerfScore > 1.3, and perfScore=1.11834]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.8646 secs, and comparison 5.80709 sec, and warnIfPerfScore > 0.75, and perfScore=0.58868]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.08998 secs, and comparison 1.5012 sec, and warnIfPerfScore > 0.33, and perfScore=0.246503]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.49707 secs, and comparison 38.4714 sec, and warnIfPerfScore > 5.1, and perfScore=4.05087]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.61458 secs, and comparison 5.13668 sec, and warnIfPerfScore > 0.7, and perfScore=0.53426]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.50303 secs, and comparison 9.29369 sec, and warnIfPerfScore > 1.1, and perfScore=0.977971]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.95202 secs, and comparison 3.38024 sec, and warnIfPerfScore > 0.55, and perfScore=0.567916]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.7848 secs, and comparison 35.6067 sec, and warnIfPerfScore > 4.9, and perfScore=3.63898]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.21266 secs, and comparison 4.81247 sec, and warnIfPerfScore > 0.85, and perfScore=0.774622]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.1865 secs, and comparison 3.33329 sec, and warnIfPerfScore > 0.6, and perfScore=0.538801]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.16059 secs, and comparison 3.41693 sec, and warnIfPerfScore > 0.6, and perfScore=0.554643]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.2023 secs, and comparison 4.69561 sec, and warnIfPerfScore > 1, and perfScore=0.757076]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.69167 secs, and comparison 8.45008 sec, and warnIfPerfScore > 1.3, and perfScore=1.26278]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 49.0332 secs, and comparison 5.8204 sec, and warnIfPerfScore > 0.21, and perfScore=0.118703]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.81257 secs, and comparison 20.6272 sec, and warnIfPerfScore > 1.8, and perfScore=2.64026]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 7.35316 secs, and comparison 6.23782 sec, and warnIfPerfScore > 1, and perfScore=0.848319]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.7625 secs, and comparison 6.88436 sec, and warnIfPerfScore > 0.85, and perfScore=0.639664]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.57054 sec, and warnIfPerfScore > 0.5, and perfScore=0.371369]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.69885 sec, and warnIfPerfScore > 0.5, and perfScore=0.179923]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.266038 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.62786 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.9959 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.131483 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.34687 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.7633 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0382034 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.479308 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.56323 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.136173 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.59109 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.19629 seconds

[[[Tests took: 17 minutes, 53 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1073078 ms)
[----------] 1 test from Stroika_Performance_Tests (1073078 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1073078 ms total)
[  PASSED  ] 1 test.
