Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Oct  1 8:45:55 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 3.29101 secs, and comparison 1.43503 sec, and warnIfPerfScore > 0.86, and perfScore=0.436045]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 3.36331 secs, and comparison 2.97561 sec, and warnIfPerfScore > 0.51, and perfScore=0.884727]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 3.92385 secs, and comparison 0.919792 sec, and warnIfPerfScore > 0.39, and perfScore=0.23441]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.80133 secs, and comparison 1.09457 sec, and warnIfPerfScore > 0.39, and perfScore=0.227972]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 3.00044 secs, and comparison 20.0128 sec, and warnIfPerfScore > 4.8, and perfScore=6.66996]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 3.61201 secs, and comparison 20.3927 sec, and warnIfPerfScore > 4, and perfScore=5.6458]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	54
	DETAILS:         	[baseline test 4.50893 secs, and comparison 244.032 sec, and warnIfPerfScore > 78, and perfScore=54.1219]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.14123 secs, and comparison 5.33568 sec, and warnIfPerfScore > 2.1, and perfScore=1.03782]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.02407 secs, and comparison 8.44821 sec, and warnIfPerfScore > 1.4, and perfScore=1.20275]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.91192 secs, and comparison 6.14537 sec, and warnIfPerfScore > 1.6, and perfScore=2.11042]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.12114 secs, and comparison 4.53402 sec, and warnIfPerfScore > 1.2, and perfScore=1.10019]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.38425 secs, and comparison 4.37162 sec, and warnIfPerfScore > 0.48, and perfScore=0.997118]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 3.616 secs, and comparison 5.96993 sec, and warnIfPerfScore > 1.3, and perfScore=1.65097]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.96457 secs, and comparison 7.20887 sec, and warnIfPerfScore > 0.75, and perfScore=2.43168]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 19.9509 secs, and comparison 1.8493 sec, and warnIfPerfScore > 0.33, and perfScore=0.0926925]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 2.9677 secs, and comparison 39.3851 sec, and warnIfPerfScore > 5.1, and perfScore=13.2713]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.90003 secs, and comparison 6.42545 sec, and warnIfPerfScore > 0.7, and perfScore=2.21565]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.87841 secs, and comparison 7.41818 sec, and warnIfPerfScore > 1.1, and perfScore=2.57718]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 19.8959 secs, and comparison 3.66024 sec, and warnIfPerfScore > 0.55, and perfScore=0.18397]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.30496 secs, and comparison 44.2619 sec, and warnIfPerfScore > 4.7, and perfScore=10.2816]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 14.0905 secs, and comparison 3.9998 sec, and warnIfPerfScore > 0.79, and perfScore=0.283864]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.4357 secs, and comparison 3.61236 sec, and warnIfPerfScore > 0.6, and perfScore=0.234026]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.3796 secs, and comparison 3.5876 sec, and warnIfPerfScore > 0.6, and perfScore=0.23327]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.3597 secs, and comparison 3.92032 sec, and warnIfPerfScore > 1, and perfScore=0.255233]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 20.0028 secs, and comparison 9.79725 sec, and warnIfPerfScore > 1.3, and perfScore=0.489795]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.4591 secs, and comparison 5.65725 sec, and warnIfPerfScore > 0.21, and perfScore=0.290725]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.37923 secs, and comparison 12.8836 sec, and warnIfPerfScore > 1.8, and perfScore=1.74593]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.92797 secs, and comparison 4.7272 sec, and warnIfPerfScore > 0.99, and perfScore=0.682334]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 4.59887 secs, and comparison 4.01755 sec, and warnIfPerfScore > 0.85, and perfScore=0.873595]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.51825 sec, and warnIfPerfScore > 0.5, and perfScore=0.367883]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 15 secs, and comparison 1.49223 sec, and warnIfPerfScore > 0.5, and perfScore=0.0994821]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.266263 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.42627 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			12.3285 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0919069 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.77931 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.58565 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0309395 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.460402 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.71704 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.12621 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.20796 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.73069 seconds

[[[Tests took: 12 minutes, 42 seconds]]]

Succeeded
