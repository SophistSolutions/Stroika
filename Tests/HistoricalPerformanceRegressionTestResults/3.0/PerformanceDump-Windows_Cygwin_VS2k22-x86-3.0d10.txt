[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep 24 2:44:35 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.85182 secs, and comparison 4.98657 sec, and warnIfPerfScore > 0.9, and perfScore=0.727773]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.55904 secs, and comparison 3.22691 sec, and warnIfPerfScore > 0.51, and perfScore=0.426894]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 13.733 secs, and comparison 3.08926 sec, and warnIfPerfScore > 0.49, and perfScore=0.224953]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.7886 secs, and comparison 3.56684 sec, and warnIfPerfScore > 0.45, and perfScore=0.278909]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.2257 secs, and comparison 32.6745 sec, and warnIfPerfScore > 4.9, and perfScore=2.47053]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.8256 secs, and comparison 32.3387 sec, and warnIfPerfScore > 4.1, and perfScore=2.52142]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	33
	DETAILS:         	[baseline test 13.701 secs, and comparison 451.728 sec, and warnIfPerfScore > 78, and perfScore=32.9705]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.6825 secs, and comparison 8.32328 sec, and warnIfPerfScore > 2.1, and perfScore=0.779149]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.019 secs, and comparison 15.9734 sec, and warnIfPerfScore > 1.4, and perfScore=1.44962]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 10.0827 secs, and comparison 8.22811 sec, and warnIfPerfScore > 1.7, and perfScore=0.816065]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 13.9905 secs, and comparison 13.2939 sec, and warnIfPerfScore > 1.2, and perfScore=0.950211]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.6681 secs, and comparison 5.05892 sec, and warnIfPerfScore > 0.48, and perfScore=0.399343]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.4276 secs, and comparison 17.356 sec, and warnIfPerfScore > 1.3, and perfScore=1.12499]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 12.2245 secs, and comparison 7.82101 sec, and warnIfPerfScore > 0.75, and perfScore=0.63978]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.9941 secs, and comparison 2.41369 sec, and warnIfPerfScore > 0.33, and perfScore=0.301934]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 12.1029 secs, and comparison 42.9085 sec, and warnIfPerfScore > 5.1, and perfScore=3.5453]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 11.853 secs, and comparison 7.37392 sec, and warnIfPerfScore > 0.7, and perfScore=0.622116]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.4939 secs, and comparison 13.3654 sec, and warnIfPerfScore > 1.1, and perfScore=1.16283]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.40868 secs, and comparison 3.81637 sec, and warnIfPerfScore > 0.55, and perfScore=0.515122]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 12.2345 secs, and comparison 42.4177 sec, and warnIfPerfScore > 4.9, and perfScore=3.46706]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.88403 secs, and comparison 6.19704 sec, and warnIfPerfScore > 0.85, and perfScore=0.786024]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 7.71129 secs, and comparison 4.17779 sec, and warnIfPerfScore > 0.6, and perfScore=0.541776]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.80061 secs, and comparison 4.0002 sec, and warnIfPerfScore > 0.6, and perfScore=0.512806]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.41019 secs, and comparison 6.1117 sec, and warnIfPerfScore > 1, and perfScore=0.726702]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.68844 secs, and comparison 10.8457 sec, and warnIfPerfScore > 1.3, and perfScore=1.24829]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 61.5168 secs, and comparison 7.31677 sec, and warnIfPerfScore > 0.21, and perfScore=0.118939]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.1114 secs, and comparison 27.2888 sec, and warnIfPerfScore > 1.8, and perfScore=2.45594]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.78407 secs, and comparison 7.97261 sec, and warnIfPerfScore > 1, and perfScore=0.814856]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 14.7918 secs, and comparison 9.1746 sec, and warnIfPerfScore > 0.85, and perfScore=0.620251]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.15136 sec, and warnIfPerfScore > 0.5, and perfScore=0.476757]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.10861 sec, and warnIfPerfScore > 0.5, and perfScore=0.207241]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.339118 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.99124 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.9149 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.217381 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.01399 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.1646 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0482535 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.747727 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			2.14541 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.202087 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.20628 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.1601 seconds

[[[Tests took: 20 minutes, 34 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1233770 ms)
[----------] 1 test from Stroika_Performance_Tests (1233770 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1233771 ms total)
[  PASSED  ] 1 test.
