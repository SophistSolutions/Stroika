Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 14 5:41:3 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.58669 secs, and comparison 4.89252 sec, and warnIfPerfScore > 0.86, and perfScore=0.56978]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.70549 secs, and comparison 3.30986 sec, and warnIfPerfScore > 0.51, and perfScore=0.341029]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.0089 secs, and comparison 2.92738 sec, and warnIfPerfScore > 0.39, and perfScore=0.243768]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.4316 secs, and comparison 3.23111 sec, and warnIfPerfScore > 0.39, and perfScore=0.282647]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.379 secs, and comparison 33.8692 sec, and warnIfPerfScore > 4.8, and perfScore=2.53152]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.8488 secs, and comparison 31.4318 sec, and warnIfPerfScore > 4.1, and perfScore=2.26964]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	50
	DETAILS:         	[baseline test 10.0287 secs, and comparison 504.242 sec, and warnIfPerfScore > 78, and perfScore=50.28]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 11.0969 secs, and comparison 8.03548 sec, and warnIfPerfScore > 2.1, and perfScore=0.724121]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.693 secs, and comparison 16.9211 sec, and warnIfPerfScore > 1.4, and perfScore=1.44712]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.85332 secs, and comparison 7.5828 sec, and warnIfPerfScore > 1.7, and perfScore=0.769568]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6211 secs, and comparison 13.793 sec, and warnIfPerfScore > 1.2, and perfScore=1.09285]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.5057 secs, and comparison 5.73649 sec, and warnIfPerfScore > 0.48, and perfScore=0.424745]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.2796 secs, and comparison 17.0479 sec, and warnIfPerfScore > 1.3, and perfScore=1.11573]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 12.0066 secs, and comparison 7.84006 sec, and warnIfPerfScore > 0.75, and perfScore=0.652977]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.96008 secs, and comparison 2.40177 sec, and warnIfPerfScore > 0.33, and perfScore=0.24114]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.6233 secs, and comparison 42.0318 sec, and warnIfPerfScore > 5.1, and perfScore=3.61616]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.6656 secs, and comparison 7.59925 sec, and warnIfPerfScore > 0.7, and perfScore=0.651423]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5847 secs, and comparison 12.7875 sec, and warnIfPerfScore > 1.1, and perfScore=1.10383]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.2791 secs, and comparison 3.80372 sec, and warnIfPerfScore > 0.55, and perfScore=0.370042]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 12.3363 secs, and comparison 42.939 sec, and warnIfPerfScore > 4.7, and perfScore=3.48071]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.0923 secs, and comparison 6.3278 sec, and warnIfPerfScore > 0.79, and perfScore=0.626991]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.61208 secs, and comparison 3.77931 sec, and warnIfPerfScore > 0.6, and perfScore=0.393184]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.60438 secs, and comparison 3.94692 sec, and warnIfPerfScore > 0.6, and perfScore=0.41095]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.95411 secs, and comparison 6.18782 sec, and warnIfPerfScore > 1, and perfScore=0.621634]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.612 secs, and comparison 10.3451 sec, and warnIfPerfScore > 1.3, and perfScore=0.974843]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 60.9671 secs, and comparison 7.17184 sec, and warnIfPerfScore > 0.21, and perfScore=0.117635]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.7805 secs, and comparison 16.7158 sec, and warnIfPerfScore > 1.8, and perfScore=1.30791]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.66221 secs, and comparison 7.87102 sec, and warnIfPerfScore > 1, and perfScore=0.81462]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 14.6478 secs, and comparison 8.5406 sec, and warnIfPerfScore > 0.85, and perfScore=0.583063]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 15 secs, and comparison 7.44769 sec, and warnIfPerfScore > 0.5, and perfScore=0.496513]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.16439 sec, and warnIfPerfScore > 0.5, and perfScore=0.21096]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.398567 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.84432 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			17.6199 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.190567 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.80592 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.3105 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0622536 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.677024 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			2.02065 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.172836 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.99483 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.0526 seconds

[[[Tests took: 21 minutes, 26 seconds]]]

Succeeded
