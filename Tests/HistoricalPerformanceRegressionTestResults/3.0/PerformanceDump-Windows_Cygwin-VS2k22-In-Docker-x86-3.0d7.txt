[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jul 10 5:5:8 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.64253 secs, and comparison 4.40303 sec, and warnIfPerfScore > 0.9, and perfScore=0.662855]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.60752 secs, and comparison 2.95749 sec, and warnIfPerfScore > 0.51, and perfScore=0.447594]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 33.3694 secs, and comparison 2.30006 sec, and warnIfPerfScore > 0.49, and perfScore=0.0689272]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 31.0374 secs, and comparison 2.79809 sec, and warnIfPerfScore > 0.45, and perfScore=0.0901522]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.69555 secs, and comparison 25.3761 sec, and warnIfPerfScore > 4.9, and perfScore=2.61729]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.68212 secs, and comparison 24.8849 sec, and warnIfPerfScore > 4.1, and perfScore=2.86622]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	52
	DETAILS:         	[baseline test 7.9488 secs, and comparison 414.479 sec, and warnIfPerfScore > 78, and perfScore=52.1437]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.9359 secs, and comparison 6.38658 sec, and warnIfPerfScore > 2.1, and perfScore=0.80477]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.85614 secs, and comparison 10.8388 sec, and warnIfPerfScore > 1.4, and perfScore=1.37966]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.62039 secs, and comparison 6.57096 sec, and warnIfPerfScore > 1.7, and perfScore=0.992533]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.2347 secs, and comparison 10.4054 sec, and warnIfPerfScore > 1.2, and perfScore=1.12677]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.37607 secs, and comparison 4.1502 sec, and warnIfPerfScore > 0.48, and perfScore=0.442638]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.5709 secs, and comparison 14.0808 sec, and warnIfPerfScore > 1.3, and perfScore=1.12011]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.3868 secs, and comparison 5.34547 sec, and warnIfPerfScore > 0.75, and perfScore=0.514642]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 6.20038 secs, and comparison 1.41035 sec, and warnIfPerfScore > 0.33, and perfScore=0.227462]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.55499 secs, and comparison 39.1129 sec, and warnIfPerfScore > 5.1, and perfScore=4.09346]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.55057 secs, and comparison 5.1511 sec, and warnIfPerfScore > 0.7, and perfScore=0.53935]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.54902 secs, and comparison 9.0207 sec, and warnIfPerfScore > 1.1, and perfScore=0.944672]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.28636 secs, and comparison 3.75263 sec, and warnIfPerfScore > 0.55, and perfScore=0.596949]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.3941 secs, and comparison 35.828 sec, and warnIfPerfScore > 4.9, and perfScore=3.44697]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.99549 secs, and comparison 4.76706 sec, and warnIfPerfScore > 0.85, and perfScore=0.795108]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.00399 secs, and comparison 4.64162 sec, and warnIfPerfScore > 0.6, and perfScore=0.773089]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.02325 secs, and comparison 3.37426 sec, and warnIfPerfScore > 0.6, and perfScore=0.560206]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.03333 secs, and comparison 4.71121 sec, and warnIfPerfScore > 1, and perfScore=0.780864]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.55162 secs, and comparison 8.67718 sec, and warnIfPerfScore > 1.3, and perfScore=1.32443]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 46.5339 secs, and comparison 5.74341 sec, and warnIfPerfScore > 0.21, and perfScore=0.123424]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.47301 secs, and comparison 19.8878 sec, and warnIfPerfScore > 1.8, and perfScore=2.3472]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.76655 secs, and comparison 6.20824 sec, and warnIfPerfScore > 1, and perfScore=0.799357]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.664 secs, and comparison 6.8721 sec, and warnIfPerfScore > 0.85, and perfScore=0.644422]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.16784 sec, and warnIfPerfScore > 0.5, and perfScore=0.344523]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.76784 sec, and warnIfPerfScore > 0.5, and perfScore=0.184523]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.239291 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.50526 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.0406 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.171314 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.36059 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.5618 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.038909 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.461655 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.59742 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.140282 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.68225 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.46646 seconds

[[[Tests took: 18 minutes, 2 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1081702 ms)
[----------] 1 test from Stroika_Performance_Tests (1081702 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1081702 ms total)
[  PASSED  ] 1 test.
