[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 19 14:14:5 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.36597 secs, and comparison 4.51859 sec, and warnIfPerfScore > 0.9, and perfScore=0.842082]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.5055 secs, and comparison 2.81671 sec, and warnIfPerfScore > 0.51, and perfScore=0.511618]
	                 	SpinLock is FASTER
	                 	{{{WARNING - expected performance score less than 0.51 and got 0.511618}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.16482 secs, and comparison 2.4762 sec, and warnIfPerfScore > 0.49, and perfScore=0.401666]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.10344 secs, and comparison 2.9012 sec, and warnIfPerfScore > 0.45, and perfScore=0.475338]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.475338}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 6.43143 secs, and comparison 29.2124 sec, and warnIfPerfScore > 4.9, and perfScore=4.54213]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 7.30256 secs, and comparison 27.1353 sec, and warnIfPerfScore > 4.1, and perfScore=3.71586]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	67
	DETAILS:         	[baseline test 6.11812 secs, and comparison 411.053 sec, and warnIfPerfScore > 78, and perfScore=67.1862]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.30716 secs, and comparison 7.29916 sec, and warnIfPerfScore > 2.1, and perfScore=1.15728]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.35645 secs, and comparison 6.79487 sec, and warnIfPerfScore > 1.4, and perfScore=1.26854]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.35805 secs, and comparison 7.73554 sec, and warnIfPerfScore > 1.7, and perfScore=1.44372]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.41809 secs, and comparison 8.25824 sec, and warnIfPerfScore > 1.2, and perfScore=1.28671]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.28671}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.90607 secs, and comparison 3.17216 sec, and warnIfPerfScore > 0.48, and perfScore=0.459329]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2485 secs, and comparison 13.5956 sec, and warnIfPerfScore > 1.3, and perfScore=1.10998]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.28038 secs, and comparison 5.38748 sec, and warnIfPerfScore > 0.75, and perfScore=0.650632]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.59404 secs, and comparison 1.79057 sec, and warnIfPerfScore > 0.33, and perfScore=0.235786]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.98934 secs, and comparison 39.1421 sec, and warnIfPerfScore > 5.1, and perfScore=4.89929]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.00199 secs, and comparison 4.98911 sec, and warnIfPerfScore > 0.7, and perfScore=0.623483]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.01415 secs, and comparison 7.75513 sec, and warnIfPerfScore > 1.1, and perfScore=0.96768]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.62337 secs, and comparison 3.33851 sec, and warnIfPerfScore > 0.55, and perfScore=0.437931]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.46929 secs, and comparison 40.8984 sec, and warnIfPerfScore > 4.9, and perfScore=4.82903]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.52987 secs, and comparison 5.54908 sec, and warnIfPerfScore > 0.85, and perfScore=0.736942]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.49256 secs, and comparison 3.45482 sec, and warnIfPerfScore > 0.6, and perfScore=0.4611]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.71573 secs, and comparison 3.53856 sec, and warnIfPerfScore > 0.6, and perfScore=0.458616]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.69521 secs, and comparison 5.82578 sec, and warnIfPerfScore > 1, and perfScore=0.757065]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.04149 secs, and comparison 8.77948 sec, and warnIfPerfScore > 1.3, and perfScore=1.09177]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 38.4304 secs, and comparison 5.59916 sec, and warnIfPerfScore > 0.21, and perfScore=0.145696]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 5.82546 secs, and comparison 17.1587 sec, and warnIfPerfScore > 1.8, and perfScore=2.94547]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 2.94547}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.95841 secs, and comparison 5.45401 sec, and warnIfPerfScore > 1, and perfScore=0.915346]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.72625 secs, and comparison 6.05164 sec, and warnIfPerfScore > 0.85, and perfScore=0.783257]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.12507 sec, and warnIfPerfScore > 0.5, and perfScore=0.275005]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.70975 sec, and warnIfPerfScore > 0.5, and perfScore=0.18065]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.287695 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.61155 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			15.6781 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.261447 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.71313 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.2932 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0424644 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.509759 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.53818 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.159971 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.27883 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.4748 seconds

[[[Tests took: 16 minutes, 33 seconds]]]

[       OK ] Stroika_Performance_Tests.all (992983 ms)
[----------] 1 test from Stroika_Performance_Tests (992983 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (992983 ms total)
[  PASSED  ] 1 test.
