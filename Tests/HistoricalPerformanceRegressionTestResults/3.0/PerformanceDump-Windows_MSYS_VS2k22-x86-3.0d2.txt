Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 21 18:12:55 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.05677 secs, and comparison 4.10964 sec, and warnIfPerfScore > 0.86, and perfScore=0.582368]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.01937 secs, and comparison 2.61575 sec, and warnIfPerfScore > 0.51, and perfScore=0.372648]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 11.507 secs, and comparison 2.11161 sec, and warnIfPerfScore > 0.39, and perfScore=0.183507]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.9956 secs, and comparison 2.55425 sec, and warnIfPerfScore > 0.39, and perfScore=0.232298]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.75534 secs, and comparison 25.0249 sec, and warnIfPerfScore > 4.8, and perfScore=2.85824]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.34484 secs, and comparison 24.9162 sec, and warnIfPerfScore > 4, and perfScore=2.66631]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	44
	DETAILS:         	[baseline test 8.62025 secs, and comparison 375.915 sec, and warnIfPerfScore > 78, and perfScore=43.6083]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.69851 secs, and comparison 5.9828 sec, and warnIfPerfScore > 2.1, and perfScore=0.777138]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.67009 secs, and comparison 11.229 sec, and warnIfPerfScore > 1.4, and perfScore=1.29514]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.53353 secs, and comparison 6.08277 sec, and warnIfPerfScore > 1.6, and perfScore=0.931009]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.97079 secs, and comparison 9.76282 sec, and warnIfPerfScore > 1.2, and perfScore=1.08829]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.35955 secs, and comparison 3.90834 sec, and warnIfPerfScore > 0.48, and perfScore=0.417578]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2444 secs, and comparison 13.7878 sec, and warnIfPerfScore > 1.3, and perfScore=1.12606]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.37192 secs, and comparison 5.26842 sec, and warnIfPerfScore > 0.75, and perfScore=0.56215]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.89734 secs, and comparison 1.50056 sec, and warnIfPerfScore > 0.33, and perfScore=0.254447]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.99511 secs, and comparison 36.596 sec, and warnIfPerfScore > 5.1, and perfScore=4.06843]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.08243 secs, and comparison 5.50725 sec, and warnIfPerfScore > 0.7, and perfScore=0.606363]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.3966 secs, and comparison 9.44595 sec, and warnIfPerfScore > 1.1, and perfScore=0.82884]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.96634 secs, and comparison 3.21613 sec, and warnIfPerfScore > 0.55, and perfScore=0.539046]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.49809 secs, and comparison 34.9345 sec, and warnIfPerfScore > 4.7, and perfScore=3.67805]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.04156 secs, and comparison 4.78536 sec, and warnIfPerfScore > 0.79, and perfScore=0.792073]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.95054 secs, and comparison 3.21091 sec, and warnIfPerfScore > 0.6, and perfScore=0.539599]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.97709 secs, and comparison 3.26187 sec, and warnIfPerfScore > 0.6, and perfScore=0.545729]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.96071 secs, and comparison 4.77983 sec, and warnIfPerfScore > 1, and perfScore=0.801889]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.55588 secs, and comparison 8.35817 sec, and warnIfPerfScore > 1.3, and perfScore=1.27491]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.578 secs, and comparison 5.50149 sec, and warnIfPerfScore > 0.21, and perfScore=0.120705]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.03337 secs, and comparison 11.5038 sec, and warnIfPerfScore > 1.8, and perfScore=1.432]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 7.04529 secs, and comparison 5.94329 sec, and warnIfPerfScore > 0.99, and perfScore=0.843583]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.3352 secs, and comparison 6.54171 sec, and warnIfPerfScore > 0.85, and perfScore=0.632952]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.87261 sec, and warnIfPerfScore > 0.5, and perfScore=0.391507]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.59056 sec, and warnIfPerfScore > 0.5, and perfScore=0.172704]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.275108 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.61215 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.515 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.12591 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.44375 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.46357 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0340862 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.444438 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.45551 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.123506 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.35554 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.35287 seconds

[[[Tests took: 16 minutes, 11 seconds]]]

Succeeded
