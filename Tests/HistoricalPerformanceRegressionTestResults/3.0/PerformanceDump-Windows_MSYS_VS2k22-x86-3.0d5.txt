[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb 27 10:57:18 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.8625 secs, and comparison 4.64964 sec, and warnIfPerfScore > 0.9, and perfScore=0.677542]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.00175 secs, and comparison 3.04569 sec, and warnIfPerfScore > 0.51, and perfScore=0.434989]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.5613 secs, and comparison 2.29476 sec, and warnIfPerfScore > 0.49, and perfScore=0.217279]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 10.5557 secs, and comparison 2.84875 sec, and warnIfPerfScore > 0.45, and perfScore=0.269877]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 9.95766 secs, and comparison 28.0383 sec, and warnIfPerfScore > 4.9, and perfScore=2.81575]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.52233 secs, and comparison 27.1707 sec, and warnIfPerfScore > 4.1, and perfScore=2.85337]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	49
	DETAILS:         	[baseline test 8.95485 secs, and comparison 440.064 sec, and warnIfPerfScore > 78, and perfScore=49.1425]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.26088 secs, and comparison 6.82922 sec, and warnIfPerfScore > 2.1, and perfScore=0.737427]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.44255 secs, and comparison 12.2456 sec, and warnIfPerfScore > 1.4, and perfScore=1.45046]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.55855 secs, and comparison 7.32457 sec, and warnIfPerfScore > 1.7, and perfScore=0.855819]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.0416 secs, and comparison 11.6847 sec, and warnIfPerfScore > 1.2, and perfScore=1.05825]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.3823 secs, and comparison 4.4904 sec, and warnIfPerfScore > 0.48, and perfScore=0.362647]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.2541 secs, and comparison 14.7975 sec, and warnIfPerfScore > 1.3, and perfScore=1.11645]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.2593 secs, and comparison 6.25465 sec, and warnIfPerfScore > 0.75, and perfScore=0.555512]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 6.57032 secs, and comparison 1.53785 sec, and warnIfPerfScore > 0.33, and perfScore=0.234061]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.99386 secs, and comparison 39.7419 sec, and warnIfPerfScore > 5.1, and perfScore=3.97663]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.9331 secs, and comparison 5.40304 sec, and warnIfPerfScore > 0.7, and perfScore=0.494189]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.8754 secs, and comparison 10.8643 sec, and warnIfPerfScore > 1.1, and perfScore=0.99898]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.08086 secs, and comparison 3.50163 sec, and warnIfPerfScore > 0.55, and perfScore=0.49452]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.5718 secs, and comparison 40.2544 sec, and warnIfPerfScore > 4.9, and perfScore=3.8077]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 6.85484 secs, and comparison 6.46548 sec, and warnIfPerfScore > 0.85, and perfScore=0.943199]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.75408 secs, and comparison 3.75097 sec, and warnIfPerfScore > 0.6, and perfScore=0.555363]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.58604 secs, and comparison 3.82047 sec, and warnIfPerfScore > 0.6, and perfScore=0.503619]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.75397 secs, and comparison 5.40324 sec, and warnIfPerfScore > 1, and perfScore=0.800009]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.63445 secs, and comparison 9.32723 sec, and warnIfPerfScore > 1.3, and perfScore=1.22173]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 54.9715 secs, and comparison 6.1749 sec, and warnIfPerfScore > 0.21, and perfScore=0.112329]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.36208 secs, and comparison 13.2799 sec, and warnIfPerfScore > 1.8, and perfScore=1.58811]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.0295 secs, and comparison 7.97763 sec, and warnIfPerfScore > 1, and perfScore=0.99354]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 11.3521 secs, and comparison 7.08033 sec, and warnIfPerfScore > 0.85, and perfScore=0.623701]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.56414 sec, and warnIfPerfScore > 0.5, and perfScore=0.370942]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80815 sec, and warnIfPerfScore > 0.5, and perfScore=0.18721]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.249166 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.6329 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.4636 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.121096 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.49625 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.629 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0445459 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.588382 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.65966 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.142571 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.65847 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.2572 seconds

[[[Tests took: 18 minutes, 24 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1104045 ms)
[----------] 1 test from Stroika_Performance_Tests (1104045 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1104045 ms total)
[  PASSED  ] 1 test.
