[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 19 5:44:25 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.82278 secs, and comparison 4.61719 sec, and warnIfPerfScore > 0.9, and perfScore=0.676731]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.94138 secs, and comparison 3.07347 sec, and warnIfPerfScore > 0.51, and perfScore=0.442775]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 34.0833 secs, and comparison 2.4681 sec, and warnIfPerfScore > 0.49, and perfScore=0.0724137]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 31.671 secs, and comparison 2.94286 sec, and warnIfPerfScore > 0.45, and perfScore=0.0929196]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.84799 secs, and comparison 25.8677 sec, and warnIfPerfScore > 4.9, and perfScore=2.92357]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.84107 secs, and comparison 24.8873 sec, and warnIfPerfScore > 4.1, and perfScore=2.81496]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	49
	DETAILS:         	[baseline test 8.43319 secs, and comparison 417.299 sec, and warnIfPerfScore > 78, and perfScore=49.4829]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.82998 secs, and comparison 6.38761 sec, and warnIfPerfScore > 2.1, and perfScore=0.815789]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.09244 secs, and comparison 10.943 sec, and warnIfPerfScore > 1.4, and perfScore=1.35225]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.00523 secs, and comparison 6.99458 sec, and warnIfPerfScore > 1.7, and perfScore=0.99848]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.14876 secs, and comparison 10.2609 sec, and warnIfPerfScore > 1.2, and perfScore=1.12156]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.64304 secs, and comparison 4.30414 sec, and warnIfPerfScore > 0.48, and perfScore=0.446347]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8589 secs, and comparison 14.4725 sec, and warnIfPerfScore > 1.3, and perfScore=1.12549]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.4715 secs, and comparison 5.54261 sec, and warnIfPerfScore > 0.75, and perfScore=0.529306]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.17032 secs, and comparison 1.47567 sec, and warnIfPerfScore > 0.33, and perfScore=0.239156]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.1255 secs, and comparison 40.0699 sec, and warnIfPerfScore > 5.1, and perfScore=3.95735]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.1283 secs, and comparison 5.21313 sec, and warnIfPerfScore > 0.7, and perfScore=0.514709]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.1009 secs, and comparison 9.60538 sec, and warnIfPerfScore > 1.1, and perfScore=0.950941]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.01613 secs, and comparison 3.6349 sec, and warnIfPerfScore > 0.55, and perfScore=0.604193]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.2893 secs, and comparison 38.1975 sec, and warnIfPerfScore > 4.9, and perfScore=3.71237]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.24094 secs, and comparison 4.99709 sec, and warnIfPerfScore > 0.85, and perfScore=0.800695]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.17166 secs, and comparison 3.54423 sec, and warnIfPerfScore > 0.6, and perfScore=0.574275]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.18318 secs, and comparison 3.54728 sec, and warnIfPerfScore > 0.6, and perfScore=0.573698]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.17061 secs, and comparison 4.93085 sec, and warnIfPerfScore > 1, and perfScore=0.799087]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.78575 secs, and comparison 8.65628 sec, and warnIfPerfScore > 1.3, and perfScore=1.27566]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.4922 secs, and comparison 5.9028 sec, and warnIfPerfScore > 0.21, and perfScore=0.121727]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.21781 secs, and comparison 20.0785 sec, and warnIfPerfScore > 1.8, and perfScore=2.44329]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 7.78648 secs, and comparison 6.52583 sec, and warnIfPerfScore > 1, and perfScore=0.838097]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.0282 secs, and comparison 7.2069 sec, and warnIfPerfScore > 0.85, and perfScore=0.6535]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.43638 sec, and warnIfPerfScore > 0.5, and perfScore=0.362425]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.91007 sec, and warnIfPerfScore > 0.5, and perfScore=0.194005]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.267118 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.66059 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.5662 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.125275 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.48999 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.43082 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0350387 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.501719 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.63028 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.197546 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.87738 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.92923 seconds

[[[Tests took: 18 minutes, 12 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1091630 ms)
[----------] 1 test from Stroika_Performance_Tests (1091630 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1091630 ms total)
[  PASSED  ] 1 test.
