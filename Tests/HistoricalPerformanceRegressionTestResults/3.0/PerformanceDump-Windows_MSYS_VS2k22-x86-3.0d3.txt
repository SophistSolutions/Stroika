Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 30 12::24 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.4886 secs, and comparison 4.37213 sec, and warnIfPerfScore > 0.86, and perfScore=0.583838]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.60802 secs, and comparison 2.95167 sec, and warnIfPerfScore > 0.51, and perfScore=0.387969]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.62409 secs, and comparison 2.35135 sec, and warnIfPerfScore > 0.39, and perfScore=0.244319]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.46615 secs, and comparison 2.79695 sec, and warnIfPerfScore > 0.39, and perfScore=0.295469]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 40.9287 secs, and comparison 25.367 sec, and warnIfPerfScore > 4.8, and perfScore=0.619786]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 44.8971 secs, and comparison 24.8653 sec, and warnIfPerfScore > 4, and perfScore=0.553829]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 19.2553 secs, and comparison 370.569 sec, and warnIfPerfScore > 78, and perfScore=19.245]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 55.2644 secs, and comparison 6.27527 sec, and warnIfPerfScore > 2.1, and perfScore=0.11355]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.82513 secs, and comparison 11.5254 sec, and warnIfPerfScore > 1.4, and perfScore=1.30598]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 63.5453 secs, and comparison 6.4444 sec, and warnIfPerfScore > 1.6, and perfScore=0.101414]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.16492 secs, and comparison 14.8019 sec, and warnIfPerfScore > 1.2, and perfScore=1.61506]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.73741 secs, and comparison 4.09139 sec, and warnIfPerfScore > 0.48, and perfScore=0.420172]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6215 secs, and comparison 14.3738 sec, and warnIfPerfScore > 1.3, and perfScore=1.13884]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.6197 secs, and comparison 5.6547 sec, and warnIfPerfScore > 0.75, and perfScore=0.587825]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.36202 secs, and comparison 1.55215 sec, and warnIfPerfScore > 0.33, and perfScore=0.243971]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.31236 secs, and comparison 39.4925 sec, and warnIfPerfScore > 5.1, and perfScore=4.24087]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.40752 secs, and comparison 5.62239 sec, and warnIfPerfScore > 0.7, and perfScore=0.597648]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.59351 secs, and comparison 10.0437 sec, and warnIfPerfScore > 1.1, and perfScore=1.04693]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.83067 secs, and comparison 3.47868 sec, and warnIfPerfScore > 0.55, and perfScore=0.509274]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.98785 secs, and comparison 38.5044 sec, and warnIfPerfScore > 4.7, and perfScore=3.85512]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.66935 secs, and comparison 5.15735 sec, and warnIfPerfScore > 0.79, and perfScore=0.773291]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.53798 secs, and comparison 3.44373 sec, and warnIfPerfScore > 0.6, and perfScore=0.526727]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.68804 secs, and comparison 3.50598 sec, and warnIfPerfScore > 0.6, and perfScore=0.524216]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.68527 secs, and comparison 5.31926 sec, and warnIfPerfScore > 1, and perfScore=0.795669]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.17365 secs, and comparison 8.8272 sec, and warnIfPerfScore > 1.3, and perfScore=1.2305]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.6504 secs, and comparison 6.08405 sec, and warnIfPerfScore > 0.21, and perfScore=0.127681]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.31493 secs, and comparison 12.0275 sec, and warnIfPerfScore > 1.8, and perfScore=1.4465]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.5969 secs, and comparison 6.2676 sec, and warnIfPerfScore > 0.99, and perfScore=0.825021]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.6122 secs, and comparison 7.03894 sec, and warnIfPerfScore > 0.85, and perfScore=0.663288]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.84201 sec, and warnIfPerfScore > 0.5, and perfScore=0.389467]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74618 sec, and warnIfPerfScore > 0.5, and perfScore=0.183079]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.300207 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.02906 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.5053 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.158113 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.39741 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.97191 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0381637 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.5142 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.69793 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.1759 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.66066 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.25335 seconds

[[[Tests took: 19 minutes, 34 seconds]]]

Succeeded
