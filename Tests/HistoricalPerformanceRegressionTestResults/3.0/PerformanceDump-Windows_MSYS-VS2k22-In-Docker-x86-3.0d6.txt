[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jun 13 12:18:44 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 5.9695 secs, and comparison 4.11835 sec, and warnIfPerfScore > 0.9, and perfScore=0.689898]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.96373 secs, and comparison 2.77264 sec, and warnIfPerfScore > 0.51, and perfScore=0.464917]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.34671 secs, and comparison 2.09814 sec, and warnIfPerfScore > 0.49, and perfScore=0.224479]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.11711 secs, and comparison 2.5833 sec, and warnIfPerfScore > 0.45, and perfScore=0.283346]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.18336 secs, and comparison 24.0501 sec, and warnIfPerfScore > 4.9, and perfScore=2.93891]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.38833 secs, and comparison 22.0967 sec, and warnIfPerfScore > 4.1, and perfScore=2.63422]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	50
	DETAILS:         	[baseline test 7.66404 secs, and comparison 384.079 sec, and warnIfPerfScore > 78, and perfScore=50.1144]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.21888 secs, and comparison 5.92286 sec, and warnIfPerfScore > 2.1, and perfScore=0.820469]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.57199 secs, and comparison 10.5137 sec, and warnIfPerfScore > 1.4, and perfScore=1.3885]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.1653 secs, and comparison 6.02099 sec, and warnIfPerfScore > 1.7, and perfScore=0.976592]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.49593 secs, and comparison 9.76979 sec, and warnIfPerfScore > 1.2, and perfScore=1.14994]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.85261 secs, and comparison 4.02902 sec, and warnIfPerfScore > 0.48, and perfScore=0.455122]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1404 secs, and comparison 13.6703 sec, and warnIfPerfScore > 1.3, and perfScore=1.12602]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.53031 secs, and comparison 5.09728 sec, and warnIfPerfScore > 0.75, and perfScore=0.534849]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.58861 secs, and comparison 1.38304 sec, and warnIfPerfScore > 0.33, and perfScore=0.247475]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.1126 secs, and comparison 36.5751 sec, and warnIfPerfScore > 5.1, and perfScore=4.01368]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.16026 secs, and comparison 4.9134 sec, and warnIfPerfScore > 0.7, and perfScore=0.536382]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.14198 secs, and comparison 8.57767 sec, and warnIfPerfScore > 1.1, and perfScore=0.938273]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.64514 secs, and comparison 3.26532 sec, and warnIfPerfScore > 0.55, and perfScore=0.578432]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.41745 secs, and comparison 33.6827 sec, and warnIfPerfScore > 4.9, and perfScore=3.57663]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.78551 secs, and comparison 4.4548 sec, and warnIfPerfScore > 0.85, and perfScore=0.769992]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.78236 secs, and comparison 3.18123 sec, and warnIfPerfScore > 0.6, and perfScore=0.550161]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.76893 secs, and comparison 3.2347 sec, and warnIfPerfScore > 0.6, and perfScore=0.56071]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.76846 secs, and comparison 4.41327 sec, and warnIfPerfScore > 1, and perfScore=0.76507]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.27206 secs, and comparison 8.09688 sec, and warnIfPerfScore > 1.3, and perfScore=1.29094]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 44.7244 secs, and comparison 5.47434 sec, and warnIfPerfScore > 0.21, and perfScore=0.122402]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 7.5498 secs, and comparison 18.2458 sec, and warnIfPerfScore > 1.8, and perfScore=2.41673]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.15017 secs, and comparison 5.93835 sec, and warnIfPerfScore > 1, and perfScore=0.830519]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.1222 secs, and comparison 6.56257 sec, and warnIfPerfScore > 0.85, and perfScore=0.648333]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.15412 sec, and warnIfPerfScore > 0.5, and perfScore=0.343608]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.6964 sec, and warnIfPerfScore > 0.5, and perfScore=0.17976]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.232756 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.35155 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.273 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.110183 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.26578 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.52445 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.036709 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.510341 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.76451 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.126964 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.54798 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.03743 seconds

[[[Tests took: 15 minutes, 56 seconds]]]

[       OK ] Stroika_Performance_Tests.all (956566 ms)
[----------] 1 test from Stroika_Performance_Tests (956566 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (956566 ms total)
[  PASSED  ] 1 test.
