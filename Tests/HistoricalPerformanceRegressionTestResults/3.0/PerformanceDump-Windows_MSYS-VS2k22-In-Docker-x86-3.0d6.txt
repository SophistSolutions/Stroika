[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jun 11 7:41:3 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.88509 secs, and comparison 4.55839 sec, and warnIfPerfScore > 0.9, and perfScore=0.662066]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.764 secs, and comparison 3.10999 sec, and warnIfPerfScore > 0.51, and perfScore=0.459786]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.3616 secs, and comparison 2.48932 sec, and warnIfPerfScore > 0.49, and perfScore=0.2191]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.9242 secs, and comparison 3.01259 sec, and warnIfPerfScore > 0.45, and perfScore=0.275773]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.64582 secs, and comparison 28.1676 sec, and warnIfPerfScore > 4.9, and perfScore=2.92018]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.61783 secs, and comparison 25.8394 sec, and warnIfPerfScore > 4.1, and perfScore=2.68661]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	44
	DETAILS:         	[baseline test 8.89909 secs, and comparison 390.293 sec, and warnIfPerfScore > 78, and perfScore=43.8576]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 7.79298 secs, and comparison 6.28241 sec, and warnIfPerfScore > 2.1, and perfScore=0.806163]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.11955 secs, and comparison 12.1229 sec, and warnIfPerfScore > 1.4, and perfScore=1.32933]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.66452 secs, and comparison 6.4542 sec, and warnIfPerfScore > 1.7, and perfScore=0.968443]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.04291 secs, and comparison 10.4728 sec, and warnIfPerfScore > 1.2, and perfScore=1.15813]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.49524 secs, and comparison 4.3065 sec, and warnIfPerfScore > 0.48, and perfScore=0.453543]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.7407 secs, and comparison 14.3796 sec, and warnIfPerfScore > 1.3, and perfScore=1.12864]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.0551 secs, and comparison 5.39275 sec, and warnIfPerfScore > 0.75, and perfScore=0.536321]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.00755 secs, and comparison 1.50432 sec, and warnIfPerfScore > 0.33, and perfScore=0.250405]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.69198 secs, and comparison 38.6142 sec, and warnIfPerfScore > 5.1, and perfScore=3.98414]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.67939 secs, and comparison 5.12081 sec, and warnIfPerfScore > 0.7, and perfScore=0.529043]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.69219 secs, and comparison 9.15389 sec, and warnIfPerfScore > 1.1, and perfScore=0.94446]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.07885 secs, and comparison 3.40678 sec, and warnIfPerfScore > 0.55, and perfScore=0.560432]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.91526 secs, and comparison 35.7717 sec, and warnIfPerfScore > 4.9, and perfScore=3.60774]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.15587 secs, and comparison 4.82272 sec, and warnIfPerfScore > 0.85, and perfScore=0.783433]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.16482 secs, and comparison 3.331 sec, and warnIfPerfScore > 0.6, and perfScore=0.540324]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.13778 secs, and comparison 3.41903 sec, and warnIfPerfScore > 0.6, and perfScore=0.557047]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.17054 secs, and comparison 4.74438 sec, and warnIfPerfScore > 1, and perfScore=0.768875]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.6935 secs, and comparison 8.5188 sec, and warnIfPerfScore > 1.3, and perfScore=1.2727]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.7364 secs, and comparison 5.98454 sec, and warnIfPerfScore > 0.21, and perfScore=0.128049]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.13321 secs, and comparison 19.7238 sec, and warnIfPerfScore > 1.8, and perfScore=2.42509]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 7.59138 secs, and comparison 6.39596 sec, and warnIfPerfScore > 1, and perfScore=0.84253]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.8187 secs, and comparison 6.99313 sec, and warnIfPerfScore > 0.85, and perfScore=0.646393]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.6672 sec, and warnIfPerfScore > 0.5, and perfScore=0.377813]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.76625 sec, and warnIfPerfScore > 0.5, and perfScore=0.184417]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.273229 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.61024 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.4625 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.177994 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.56545 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.61983 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0399033 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.500508 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.62531 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.16414 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.7892 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.80437 seconds

[[[Tests took: 16 minutes, 53 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1013513 ms)
[----------] 1 test from Stroika_Performance_Tests (1013513 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1013513 ms total)
[  PASSED  ] 1 test.
