Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jul 11 17:32:19 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 8.68037 secs, and comparison 4.64608 sec, and warnIfPerfScore > 0.65, and perfScore=0.535239]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.3305 secs, and comparison 3.11358 sec, and warnIfPerfScore > 0.5, and perfScore=0.373757]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 13.4692 secs, and comparison 2.47287 sec, and warnIfPerfScore > 0.48, and perfScore=0.183594]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 13.5639 secs, and comparison 2.94704 sec, and warnIfPerfScore > 0.57, and perfScore=0.21727]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 45.4661 secs, and comparison 28.075 sec, and warnIfPerfScore > 2.9, and perfScore=0.617493]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 50.3218 secs, and comparison 30.7072 sec, and warnIfPerfScore > 2.9, and perfScore=0.610216]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 21.7665 secs, and comparison 457.312 sec, and warnIfPerfScore > 24, and perfScore=21.0099]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 60.9099 secs, and comparison 12.0091 sec, and warnIfPerfScore > 1.7, and perfScore=0.197161]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.50317 secs, and comparison 11.3928 sec, and warnIfPerfScore > 1.5, and perfScore=1.33983]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.88075 secs, and comparison 12.0533 sec, and warnIfPerfScore > 2.1, and perfScore=1.52946]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 10.7164 secs, and comparison 8.71934 sec, and warnIfPerfScore > 1.6, and perfScore=0.813642]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.6767 secs, and comparison 6.45448 sec, and warnIfPerfScore > 0.23, and perfScore=0.552767]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.23 and got 0.552767}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.1392 secs, and comparison 15.9848 sec, and warnIfPerfScore > 1.3, and perfScore=1.13053]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 11.5703 secs, and comparison 6.29746 sec, and warnIfPerfScore > 1.2, and perfScore=0.54428]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 7.19851 secs, and comparison 1.93822 sec, and warnIfPerfScore > 0.33, and perfScore=0.269253]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.1284 secs, and comparison 42.0459 sec, and warnIfPerfScore > 6, and perfScore=3.77826]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.1823 secs, and comparison 5.46184 sec, and warnIfPerfScore > 0.8, and perfScore=0.536404]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 10.0389 secs, and comparison 9.92188 sec, and warnIfPerfScore > 1.4, and perfScore=0.98834]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.53752 secs, and comparison 3.49718 sec, and warnIfPerfScore > 0.65, and perfScore=0.534939]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.5287 secs, and comparison 37.9764 sec, and warnIfPerfScore > 4.4, and perfScore=3.60695]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.49983 secs, and comparison 5.03857 sec, and warnIfPerfScore > 0.6, and perfScore=0.775186]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.775186}}}

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.49024 secs, and comparison 3.45008 sec, and warnIfPerfScore > 0.6, and perfScore=0.53158]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.58582 secs, and comparison 3.55139 sec, and warnIfPerfScore > 0.6, and perfScore=0.539248]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.62302 secs, and comparison 5.21669 sec, and warnIfPerfScore > 1.3, and perfScore=0.78766]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.05001 secs, and comparison 8.80584 sec, and warnIfPerfScore > 1.3, and perfScore=1.24905]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 50.4202 secs, and comparison 5.87218 sec, and warnIfPerfScore > 0.3, and perfScore=0.116465]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.99037 secs, and comparison 11.0165 sec, and warnIfPerfScore > 1.5, and perfScore=1.37872]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 7.69056 secs, and comparison 6.70267 sec, and warnIfPerfScore > 0.55, and perfScore=0.871545]
	                 	BLOB is FASTER
	                 	{{{WARNING - expected performance score less than 0.55 and got 0.871545}}}

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.583094 sec, and warnIfPerfScore > 0.1, and perfScore=0.038873]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.70618 sec, and warnIfPerfScore > 0.5, and perfScore=0.180412]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.09638 secs, and comparison 13.0433 sec, and warnIfPerfScore > 2, and perfScore=1.4339]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.6236 secs, and comparison 31.8456 sec, and warnIfPerfScore > 3.6, and perfScore=2.99764]
	                 	codecvt_utf8 is ***SLOWER***

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.360911 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.70529 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			17.6877 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.205466 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.14729 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.0563 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0504806 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.567201 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.74381 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.23385 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.05317 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.6187 seconds

[[[Tests took: 22 minutes, 1 second]]]

Succeeded
