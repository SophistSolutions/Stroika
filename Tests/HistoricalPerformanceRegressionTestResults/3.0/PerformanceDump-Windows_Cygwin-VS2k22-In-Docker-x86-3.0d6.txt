[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jun 11 :10:48 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.29802 secs, and comparison 4.27907 sec, and warnIfPerfScore > 0.9, and perfScore=0.679431]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.2567 secs, and comparison 2.89093 sec, and warnIfPerfScore > 0.51, and perfScore=0.462053]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 35.8116 secs, and comparison 2.51431 sec, and warnIfPerfScore > 0.49, and perfScore=0.0702094]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 33.8448 secs, and comparison 2.98374 sec, and warnIfPerfScore > 0.45, and perfScore=0.0881594]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.87308 secs, and comparison 28.3232 sec, and warnIfPerfScore > 4.9, and perfScore=2.86873]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.2967 secs, and comparison 26.4585 sec, and warnIfPerfScore > 4.1, and perfScore=2.56961]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	42
	DETAILS:         	[baseline test 9.52509 secs, and comparison 404.09 sec, and warnIfPerfScore > 78, and perfScore=42.4237]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.69133 secs, and comparison 6.27271 sec, and warnIfPerfScore > 2.1, and perfScore=0.815556]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.43528 secs, and comparison 11.2362 sec, and warnIfPerfScore > 1.4, and perfScore=1.33204]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.635 secs, and comparison 6.62517 sec, and warnIfPerfScore > 1.7, and perfScore=0.998517]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.21255 secs, and comparison 10.3389 sec, and warnIfPerfScore > 1.2, and perfScore=1.12226]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.51349 secs, and comparison 4.31066 sec, and warnIfPerfScore > 0.48, and perfScore=0.453111]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.7914 secs, and comparison 14.5445 sec, and warnIfPerfScore > 1.3, and perfScore=1.13706]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.1309 secs, and comparison 5.37827 sec, and warnIfPerfScore > 0.75, and perfScore=0.530878]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.05602 secs, and comparison 1.49823 sec, and warnIfPerfScore > 0.33, and perfScore=0.247395]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.67559 secs, and comparison 40.8896 sec, and warnIfPerfScore > 5.1, and perfScore=4.22605]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.62826 secs, and comparison 5.19038 sec, and warnIfPerfScore > 0.7, and perfScore=0.539078]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.71139 secs, and comparison 9.10943 sec, and warnIfPerfScore > 1.1, and perfScore=0.938016]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.01824 secs, and comparison 3.46946 sec, and warnIfPerfScore > 0.55, and perfScore=0.576491]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.96303 secs, and comparison 35.7404 sec, and warnIfPerfScore > 4.9, and perfScore=3.5873]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.16638 secs, and comparison 4.73371 sec, and warnIfPerfScore > 0.85, and perfScore=0.767664]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.16873 secs, and comparison 3.35831 sec, and warnIfPerfScore > 0.6, and perfScore=0.544408]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.17664 secs, and comparison 3.38423 sec, and warnIfPerfScore > 0.6, and perfScore=0.547907]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.18303 secs, and comparison 4.75668 sec, and warnIfPerfScore > 1, and perfScore=0.769312]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.70213 secs, and comparison 8.47011 sec, and warnIfPerfScore > 1.3, and perfScore=1.26379]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.5073 secs, and comparison 5.89452 sec, and warnIfPerfScore > 0.21, and perfScore=0.126744]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 7.99305 secs, and comparison 19.5517 sec, and warnIfPerfScore > 1.8, and perfScore=2.44609]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.51096 secs, and comparison 6.20914 sec, and warnIfPerfScore > 1, and perfScore=0.826677]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.7767 secs, and comparison 6.83475 sec, and warnIfPerfScore > 0.85, and perfScore=0.634218]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.47927 sec, and warnIfPerfScore > 0.5, and perfScore=0.365284]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.7507 sec, and warnIfPerfScore > 0.5, and perfScore=0.18338]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.261858 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.69222 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.4593 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.123319 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.53607 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.83104 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0351102 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.471784 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.60205 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.167348 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.82214 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.94459 seconds

[[[Tests took: 17 minutes, 49 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1068634 ms)
[----------] 1 test from Stroika_Performance_Tests (1068634 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1068634 ms total)
[  PASSED  ] 1 test.
