[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jun 13 4:24:32 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 6.72044 secs, and comparison 4.53109 sec, and warnIfPerfScore > 0.9, and perfScore=0.674226]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.80976 secs, and comparison 3.06063 sec, and warnIfPerfScore > 0.51, and perfScore=0.449448]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 35.5027 secs, and comparison 2.3465 sec, and warnIfPerfScore > 0.49, and perfScore=0.0660938]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 33.0174 secs, and comparison 2.8406 sec, and warnIfPerfScore > 0.45, and perfScore=0.0860336]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.12836 secs, and comparison 26.838 sec, and warnIfPerfScore > 4.9, and perfScore=2.94006]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.40996 secs, and comparison 24.2119 sec, and warnIfPerfScore > 4.1, and perfScore=2.57301]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	47
	DETAILS:         	[baseline test 8.51471 secs, and comparison 403.443 sec, and warnIfPerfScore > 78, and perfScore=47.3819]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 7.96135 secs, and comparison 6.48641 sec, and warnIfPerfScore > 2.1, and perfScore=0.814737]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.95586 secs, and comparison 11.9497 sec, and warnIfPerfScore > 1.4, and perfScore=1.33429]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.97582 secs, and comparison 6.78147 sec, and warnIfPerfScore > 1.7, and perfScore=0.97214]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.39084 secs, and comparison 10.8282 sec, and warnIfPerfScore > 1.2, and perfScore=1.15306]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.79437 secs, and comparison 4.46328 sec, and warnIfPerfScore > 0.48, and perfScore=0.455699]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.4093 secs, and comparison 15.0524 sec, and warnIfPerfScore > 1.3, and perfScore=1.12253]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.6675 secs, and comparison 5.58344 sec, and warnIfPerfScore > 0.75, and perfScore=0.523408]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 6.35037 secs, and comparison 1.48338 sec, and warnIfPerfScore > 0.33, and perfScore=0.23359]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.2079 secs, and comparison 40.8132 sec, and warnIfPerfScore > 5.1, and perfScore=3.9982]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.315 secs, and comparison 5.39511 sec, and warnIfPerfScore > 0.7, and perfScore=0.523034]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 10.2906 secs, and comparison 9.4966 sec, and warnIfPerfScore > 1.1, and perfScore=0.922846]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.39663 secs, and comparison 3.60724 sec, and warnIfPerfScore > 0.55, and perfScore=0.563928]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.5493 secs, and comparison 37.974 sec, and warnIfPerfScore > 4.9, and perfScore=3.59968]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.5011 secs, and comparison 4.96651 sec, and warnIfPerfScore > 0.85, and perfScore=0.76395]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.50601 secs, and comparison 3.55473 sec, and warnIfPerfScore > 0.6, and perfScore=0.546377]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.52403 secs, and comparison 3.60579 sec, and warnIfPerfScore > 0.6, and perfScore=0.552693]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.51879 secs, and comparison 4.93 sec, and warnIfPerfScore > 1, and perfScore=0.756275]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.08337 secs, and comparison 9.11198 sec, and warnIfPerfScore > 1.3, and perfScore=1.28639]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 50.3981 secs, and comparison 6.45172 sec, and warnIfPerfScore > 0.21, and perfScore=0.128015]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.40567 secs, and comparison 20.6523 sec, and warnIfPerfScore > 1.8, and perfScore=2.45694]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.91966 secs, and comparison 6.6065 sec, and warnIfPerfScore > 1, and perfScore=0.834189]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 11.2983 secs, and comparison 7.08894 sec, and warnIfPerfScore > 0.85, and perfScore=0.627435]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.88317 sec, and warnIfPerfScore > 0.5, and perfScore=0.392212]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.95324 sec, and warnIfPerfScore > 0.5, and perfScore=0.196883]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.313106 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.14037 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			17.4348 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.199182 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.04328 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.4638 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0419834 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.548314 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.85291 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.290261 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.31609 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.904 seconds

[[[Tests took: 18 minutes, 19 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1099747 ms)
[----------] 1 test from Stroika_Performance_Tests (1099747 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1099747 ms total)
[  PASSED  ] 1 test.
