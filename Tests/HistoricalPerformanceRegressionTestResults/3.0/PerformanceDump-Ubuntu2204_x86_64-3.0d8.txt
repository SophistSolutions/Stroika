[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 19 21:30:42 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 3.63699 secs, and comparison 2.21645 sec, and warnIfPerfScore > 0.9, and perfScore=0.609419]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 3.50705 secs, and comparison 3.08232 sec, and warnIfPerfScore > 0.51, and perfScore=0.878891]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.56456 secs, and comparison 0.937677 sec, and warnIfPerfScore > 0.49, and perfScore=0.263055]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.36879 secs, and comparison 1.03955 sec, and warnIfPerfScore > 0.45, and perfScore=0.237948]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 3.01423 secs, and comparison 19.81 sec, and warnIfPerfScore > 4.9, and perfScore=6.57216]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 3.53456 secs, and comparison 18.6337 sec, and warnIfPerfScore > 4.1, and perfScore=5.27185]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	51
	DETAILS:         	[baseline test 4.51416 secs, and comparison 231.976 sec, and warnIfPerfScore > 78, and perfScore=51.3884]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.27691 secs, and comparison 5.2787 sec, and warnIfPerfScore > 2.1, and perfScore=1.61088]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.03698 secs, and comparison 8.411 sec, and warnIfPerfScore > 1.4, and perfScore=1.19526]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.75055 secs, and comparison 6.86531 sec, and warnIfPerfScore > 1.7, and perfScore=2.49598]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.48254 secs, and comparison 4.37073 sec, and warnIfPerfScore > 1.2, and perfScore=1.25504]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.63394 secs, and comparison 3.84134 sec, and warnIfPerfScore > 0.48, and perfScore=1.05708]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 2.33653 secs, and comparison 4.09142 sec, and warnIfPerfScore > 1.3, and perfScore=1.75107]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.22798 secs, and comparison 6.31544 sec, and warnIfPerfScore > 0.75, and perfScore=1.95647]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.081
	DETAILS:         	[baseline test 18.7194 secs, and comparison 1.50869 sec, and warnIfPerfScore > 0.33, and perfScore=0.080595]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.09798 secs, and comparison 40.5781 sec, and warnIfPerfScore > 5.1, and perfScore=13.0983]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.12641 secs, and comparison 6.49267 sec, and warnIfPerfScore > 0.7, and perfScore=2.07672]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.13144 secs, and comparison 8.58996 sec, and warnIfPerfScore > 1.1, and perfScore=2.74313]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 18.8047 secs, and comparison 3.60723 sec, and warnIfPerfScore > 0.55, and perfScore=0.191826]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 4.79839 secs, and comparison 41.1248 sec, and warnIfPerfScore > 4.9, and perfScore=8.57054]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.2874 secs, and comparison 4.1187 sec, and warnIfPerfScore > 0.85, and perfScore=0.364894]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 13.3056 secs, and comparison 3.46251 sec, and warnIfPerfScore > 0.6, and perfScore=0.260229]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 13.2342 secs, and comparison 3.4694 sec, and warnIfPerfScore > 0.6, and perfScore=0.262155]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.3788 secs, and comparison 4.46538 sec, and warnIfPerfScore > 1, and perfScore=0.333766]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 19.6752 secs, and comparison 9.34089 sec, and warnIfPerfScore > 1.3, and perfScore=0.474756]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 19.5879 secs, and comparison 6.36007 sec, and warnIfPerfScore > 0.21, and perfScore=0.324694]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.23312 secs, and comparison 13.0238 sec, and warnIfPerfScore > 1.8, and perfScore=1.80058]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 6.68684 secs, and comparison 5.46302 sec, and warnIfPerfScore > 1, and perfScore=0.816981]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.44888 secs, and comparison 4.2451 sec, and warnIfPerfScore > 0.85, and perfScore=0.954194]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.646 sec, and warnIfPerfScore > 0.5, and perfScore=0.3764]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.04524 sec, and warnIfPerfScore > 0.5, and perfScore=0.0696829]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.246289 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.52793 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			12.6466 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0945802 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.77565 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.70218 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0309067 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.532787 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.75818 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.136233 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.24733 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.81084 seconds

[[[Tests took: 12 minutes, 12 seconds]]]

[       OK ] Stroika_Performance_Tests.all (731681 ms)
[----------] 1 test from Stroika_Performance_Tests (731681 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (731681 ms total)
[  PASSED  ] 1 test.
