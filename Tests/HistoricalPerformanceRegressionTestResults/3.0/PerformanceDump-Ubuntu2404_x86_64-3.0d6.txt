[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jun 13 11:8:46 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.80493 secs, and comparison 2.83801 sec, and warnIfPerfScore > 0.9, and perfScore=0.488895]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.45066 secs, and comparison 3.93791 sec, and warnIfPerfScore > 0.51, and perfScore=0.884793]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 6.74574 secs, and comparison 1.04929 sec, and warnIfPerfScore > 0.49, and perfScore=0.155549]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.84798 secs, and comparison 1.21059 sec, and warnIfPerfScore > 0.45, and perfScore=0.249711]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 3.62746 secs, and comparison 22.6192 sec, and warnIfPerfScore > 4.9, and perfScore=6.23556]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 5.13922 secs, and comparison 21.0681 sec, and warnIfPerfScore > 4.1, and perfScore=4.09947]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	61
	DETAILS:         	[baseline test 4.87126 secs, and comparison 296.986 sec, and warnIfPerfScore > 78, and perfScore=60.9671]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 4.62371 secs, and comparison 6.67803 sec, and warnIfPerfScore > 2.1, and perfScore=1.4443]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.61607 secs, and comparison 9.86318 sec, and warnIfPerfScore > 1.4, and perfScore=1.14474]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.11349 secs, and comparison 7.45212 sec, and warnIfPerfScore > 1.7, and perfScore=2.3935]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.31882 secs, and comparison 8.26189 sec, and warnIfPerfScore > 1.2, and perfScore=1.913]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.27677 secs, and comparison 8.06098 sec, and warnIfPerfScore > 0.48, and perfScore=1.10777]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.80619 secs, and comparison 8.08569 sec, and warnIfPerfScore > 1.3, and perfScore=1.68235]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.50584 secs, and comparison 11.2152 sec, and warnIfPerfScore > 0.75, and perfScore=2.03696]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 28.5507 secs, and comparison 3.11669 sec, and warnIfPerfScore > 0.33, and perfScore=0.109163]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 5.60823 secs, and comparison 46.3519 sec, and warnIfPerfScore > 5.1, and perfScore=8.26498]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.53851 secs, and comparison 12.1779 sec, and warnIfPerfScore > 0.7, and perfScore=2.19877]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.55358 secs, and comparison 13.4894 sec, and warnIfPerfScore > 1.1, and perfScore=2.42895]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 28.4803 secs, and comparison 4.5936 sec, and warnIfPerfScore > 0.55, and perfScore=0.161291]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 8.42086 secs, and comparison 51.0323 sec, and warnIfPerfScore > 4.9, and perfScore=6.06023]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 18.4893 secs, and comparison 5.57243 sec, and warnIfPerfScore > 0.85, and perfScore=0.301387]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 21.2682 secs, and comparison 4.21068 sec, and warnIfPerfScore > 0.6, and perfScore=0.19798]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.5124 secs, and comparison 4.17341 sec, and warnIfPerfScore > 0.6, and perfScore=0.194]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 21.1858 secs, and comparison 5.55924 sec, and warnIfPerfScore > 1, and perfScore=0.262404]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 29.6711 secs, and comparison 13.5963 sec, and warnIfPerfScore > 1.3, and perfScore=0.458234]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 33.1341 secs, and comparison 7.56069 sec, and warnIfPerfScore > 0.21, and perfScore=0.228185]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 10.0099 secs, and comparison 21.4507 sec, and warnIfPerfScore > 1.8, and perfScore=2.14295]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.7365 secs, and comparison 6.94944 sec, and warnIfPerfScore > 1, and perfScore=0.713751]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.44776 secs, and comparison 4.52442 sec, and warnIfPerfScore > 0.85, and perfScore=0.83051]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.41132 sec, and warnIfPerfScore > 0.5, and perfScore=0.360755]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.15835 sec, and warnIfPerfScore > 0.5, and perfScore=0.0772234]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.270022 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.69652 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			13.807 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.119516 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.85948 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.00479 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0327762 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.531517 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.92343 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.17676 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.3325 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			8.21788 seconds

[[[Tests took: 16 minutes, 37 seconds]]]

[       OK ] Stroika_Performance_Tests.all (996913 ms)
[----------] 1 test from Stroika_Performance_Tests (996913 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (996913 ms total)
[  PASSED  ] 1 test.
