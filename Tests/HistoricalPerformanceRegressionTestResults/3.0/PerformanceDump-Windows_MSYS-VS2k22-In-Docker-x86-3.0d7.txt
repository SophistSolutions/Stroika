[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jul 10 13:14:39 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.57444 secs, and comparison 4.36179 sec, and warnIfPerfScore > 0.9, and perfScore=0.663446]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.64565 secs, and comparison 2.97102 sec, and warnIfPerfScore > 0.51, and perfScore=0.447062]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.99541 secs, and comparison 2.28125 sec, and warnIfPerfScore > 0.49, and perfScore=0.22823]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.59977 secs, and comparison 2.83603 sec, and warnIfPerfScore > 0.45, and perfScore=0.295427]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.94819 secs, and comparison 25.2415 sec, and warnIfPerfScore > 4.9, and perfScore=2.82085]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.04441 secs, and comparison 24.7448 sec, and warnIfPerfScore > 4.1, and perfScore=2.73592]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	50
	DETAILS:         	[baseline test 8.09423 secs, and comparison 402.688 sec, and warnIfPerfScore > 78, and perfScore=49.75]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 8.02761 secs, and comparison 6.14906 sec, and warnIfPerfScore > 2.1, and perfScore=0.765989]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.96008 secs, and comparison 10.8745 sec, and warnIfPerfScore > 1.4, and perfScore=1.36613]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.0383 secs, and comparison 6.56496 sec, and warnIfPerfScore > 1.7, and perfScore=0.932748]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.92685 secs, and comparison 10.3787 sec, and warnIfPerfScore > 1.2, and perfScore=1.16264]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.34715 secs, and comparison 4.11495 sec, and warnIfPerfScore > 0.48, and perfScore=0.440235]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.5303 secs, and comparison 13.9879 sec, and warnIfPerfScore > 1.3, and perfScore=1.11633]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.99992 secs, and comparison 5.31679 sec, and warnIfPerfScore > 0.75, and perfScore=0.531684]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.84216 secs, and comparison 1.40414 sec, and warnIfPerfScore > 0.33, and perfScore=0.240346]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.56267 secs, and comparison 38.4134 sec, and warnIfPerfScore > 5.1, and perfScore=4.01701]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.57157 secs, and comparison 5.12936 sec, and warnIfPerfScore > 0.7, and perfScore=0.535896]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.54295 secs, and comparison 9.15005 sec, and warnIfPerfScore > 1.1, and perfScore=0.958828]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.00485 secs, and comparison 3.55586 sec, and warnIfPerfScore > 0.55, and perfScore=0.592165]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.76495 secs, and comparison 35.0679 sec, and warnIfPerfScore > 4.9, and perfScore=3.59121]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.00012 secs, and comparison 4.79361 sec, and warnIfPerfScore > 0.85, and perfScore=0.798919]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.06581 secs, and comparison 3.44234 sec, and warnIfPerfScore > 0.6, and perfScore=0.567499]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.02225 secs, and comparison 3.40691 sec, and warnIfPerfScore > 0.6, and perfScore=0.56572]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.96824 secs, and comparison 4.68934 sec, and warnIfPerfScore > 1, and perfScore=0.785715]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.56386 secs, and comparison 8.52313 sec, and warnIfPerfScore > 1.3, and perfScore=1.29849]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.9298 secs, and comparison 5.64707 sec, and warnIfPerfScore > 0.21, and perfScore=0.12295]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.04642 secs, and comparison 19.4132 sec, and warnIfPerfScore > 1.8, and perfScore=2.41265]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.72517 secs, and comparison 6.1227 sec, and warnIfPerfScore > 1, and perfScore=0.792565]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.9014 secs, and comparison 6.82393 sec, and warnIfPerfScore > 0.85, and perfScore=0.625969]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.15779 sec, and warnIfPerfScore > 0.5, and perfScore=0.343853]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79366 sec, and warnIfPerfScore > 0.5, and perfScore=0.186244]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.253287 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.44818 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.9006 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.12341 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.35899 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.85371 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0392917 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.453077 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.58645 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.130926 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.63072 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.31182 seconds

[[[Tests took: 16 minutes, 44 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1003992 ms)
[----------] 1 test from Stroika_Performance_Tests (1003992 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1003992 ms total)
[  PASSED  ] 1 test.
