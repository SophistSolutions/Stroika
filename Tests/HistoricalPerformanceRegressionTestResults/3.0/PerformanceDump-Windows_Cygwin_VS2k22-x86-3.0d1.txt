Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jul 11 21:41:47 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.63427 secs, and comparison 5.50804 sec, and warnIfPerfScore > 0.65, and perfScore=0.571714]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.34932 secs, and comparison 3.04797 sec, and warnIfPerfScore > 0.5, and perfScore=0.32601]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 14.7741 secs, and comparison 3.07599 sec, and warnIfPerfScore > 0.48, and perfScore=0.208201]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.2827 secs, and comparison 3.56901 sec, and warnIfPerfScore > 0.57, and perfScore=0.249884]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 50.3452 secs, and comparison 36.0761 sec, and warnIfPerfScore > 2.9, and perfScore=0.716575]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 53.3623 secs, and comparison 37.0079 sec, and warnIfPerfScore > 2.9, and perfScore=0.69352]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 23.4036 secs, and comparison 477.217 sec, and warnIfPerfScore > 24, and perfScore=20.3907]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 64.9176 secs, and comparison 15.6151 sec, and warnIfPerfScore > 1.7, and perfScore=0.240537]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.7929 secs, and comparison 18.0388 sec, and warnIfPerfScore > 1.5, and perfScore=1.30783]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.74963 secs, and comparison 15.6199 sec, and warnIfPerfScore > 2.1, and perfScore=1.6021]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 13.0841 secs, and comparison 11.8576 sec, and warnIfPerfScore > 1.6, and perfScore=0.906262]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 14.8087 secs, and comparison 7.64415 sec, and warnIfPerfScore > 0.23, and perfScore=0.516194]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.23 and got 0.516194}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.5411 secs, and comparison 18.9839 sec, and warnIfPerfScore > 1.3, and perfScore=1.14768]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.627 secs, and comparison 7.97739 sec, and warnIfPerfScore > 1.2, and perfScore=0.631771]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 8.97182 secs, and comparison 1.59007 sec, and warnIfPerfScore > 0.33, and perfScore=0.17723]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.2973 secs, and comparison 46.3536 sec, and warnIfPerfScore > 6, and perfScore=3.76941]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.4455 secs, and comparison 7.71289 sec, and warnIfPerfScore > 0.8, and perfScore=0.619734]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5896 secs, and comparison 12.6532 sec, and warnIfPerfScore > 1.4, and perfScore=1.00506]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 8.6943 secs, and comparison 4.24099 sec, and warnIfPerfScore > 0.65, and perfScore=0.487789]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 12.981 secs, and comparison 45.1969 sec, and warnIfPerfScore > 4.4, and perfScore=3.48178]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.943 secs, and comparison 6.65507 sec, and warnIfPerfScore > 0.6, and perfScore=0.744166]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.744166}}}

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.71295 secs, and comparison 4.1559 sec, and warnIfPerfScore > 0.6, and perfScore=0.47698]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 8.62441 secs, and comparison 4.30718 sec, and warnIfPerfScore > 0.6, and perfScore=0.499418]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.43183 secs, and comparison 6.23545 sec, and warnIfPerfScore > 1.3, and perfScore=0.739514]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.72496 secs, and comparison 11.5672 sec, and warnIfPerfScore > 1.3, and perfScore=1.18943]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 64.9897 secs, and comparison 8.35169 sec, and warnIfPerfScore > 0.3, and perfScore=0.128508]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.6448 secs, and comparison 16.8749 sec, and warnIfPerfScore > 1.5, and perfScore=1.44913]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.407 secs, and comparison 8.73916 sec, and warnIfPerfScore > 0.55, and perfScore=0.839739]
	                 	BLOB is FASTER
	                 	{{{WARNING - expected performance score less than 0.55 and got 0.839739}}}

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.868755 sec, and warnIfPerfScore > 0.1, and perfScore=0.057917]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.49789 sec, and warnIfPerfScore > 0.5, and perfScore=0.233192]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.7888 secs, and comparison 17.2004 sec, and warnIfPerfScore > 2, and perfScore=1.34496]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 11.6633 secs, and comparison 38.0558 sec, and warnIfPerfScore > 3.6, and perfScore=3.26287]
	                 	codecvt_utf8 is ***SLOWER***

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.313574 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			5.5754 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			18.4818 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.296399 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.26681 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.0538 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.220522 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.67912 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.2005 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0366635 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.742899 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			2.37535 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.167432 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.61033 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.299 seconds

[[[Tests took: 24 minutes, 46 seconds]]]

Succeeded
