Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jul 11 17:54:20 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.73505 secs, and comparison 4.48997 sec, and warnIfPerfScore > 0.65, and perfScore=0.7829]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.43093 secs, and comparison 2.57413 sec, and warnIfPerfScore > 0.5, and perfScore=0.473976]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.1187 secs, and comparison 2.54388 sec, and warnIfPerfScore > 0.48, and perfScore=0.251404]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.1777 secs, and comparison 2.86908 sec, and warnIfPerfScore > 0.57, and perfScore=0.281897]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 37.9995 secs, and comparison 29.2455 sec, and warnIfPerfScore > 2.9, and perfScore=0.769629]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 42.563 secs, and comparison 27.9506 sec, and warnIfPerfScore > 2.9, and perfScore=0.656688]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	39
	DETAILS:         	[baseline test 16.4526 secs, and comparison 644.095 sec, and warnIfPerfScore > 24, and perfScore=39.1486]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 54.0232 secs, and comparison 10.934 sec, and warnIfPerfScore > 1.7, and perfScore=0.202395]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.21846 secs, and comparison 9.02686 sec, and warnIfPerfScore > 1.5, and perfScore=1.45162]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.44444 secs, and comparison 13.2273 sec, and warnIfPerfScore > 2.1, and perfScore=2.05251]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.66765 secs, and comparison 9.19428 sec, and warnIfPerfScore > 1.6, and perfScore=1.06076]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 9.64068 secs, and comparison 8.94335 sec, and warnIfPerfScore > 0.23, and perfScore=0.927667]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.1191 secs, and comparison 15.5176 sec, and warnIfPerfScore > 1.3, and perfScore=1.09905]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.77043 secs, and comparison 6.80947 sec, and warnIfPerfScore > 1.2, and perfScore=0.696946]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.3562 secs, and comparison 2.34996 sec, and warnIfPerfScore > 0.33, and perfScore=0.226913]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 16.9766 secs, and comparison 57.2248 sec, and warnIfPerfScore > 6, and perfScore=3.3708]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.381 secs, and comparison 5.18331 sec, and warnIfPerfScore > 0.8, and perfScore=0.455435]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.10451 secs, and comparison 7.44415 sec, and warnIfPerfScore > 1.4, and perfScore=0.918519]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.44571 secs, and comparison 3.47384 sec, and warnIfPerfScore > 0.65, and perfScore=0.411314]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.72554 secs, and comparison 40.072 sec, and warnIfPerfScore > 4.4, and perfScore=4.59249]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.51025 secs, and comparison 5.39175 sec, and warnIfPerfScore > 0.6, and perfScore=0.633559]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.3735 secs, and comparison 3.39897 sec, and warnIfPerfScore > 0.6, and perfScore=0.40592]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.46696 secs, and comparison 3.40798 sec, and warnIfPerfScore > 0.6, and perfScore=0.402504]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.34182 secs, and comparison 5.4354 sec, and warnIfPerfScore > 1.3, and perfScore=0.651584]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.95824 secs, and comparison 8.86222 sec, and warnIfPerfScore > 1.3, and perfScore=0.989281]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 39.9349 secs, and comparison 5.9722 sec, and warnIfPerfScore > 0.3, and perfScore=0.149548]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.36435 secs, and comparison 9.6756 sec, and warnIfPerfScore > 1.5, and perfScore=1.52028]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 6.62505 secs, and comparison 6.10604 sec, and warnIfPerfScore > 0.55, and perfScore=0.92166]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.037
	DETAILS:         	[baseline test 15 secs, and comparison 0.556125 sec, and warnIfPerfScore > 0.1, and perfScore=0.037075]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.5176 sec, and warnIfPerfScore > 0.5, and perfScore=0.16784]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.46641 secs, and comparison 12.2782 sec, and warnIfPerfScore > 2, and perfScore=1.64446]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.99441 secs, and comparison 15.1257 sec, and warnIfPerfScore > 3.6, and perfScore=1.89204]
	                 	codecvt_utf8 is ***SLOWER***

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.320287 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.23459 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			17.0646 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.222822 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.34666 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.5982 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.038016 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.481098 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.66201 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.20926 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.9101 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.5477 seconds

[[[Tests took: 23 minutes, 45 seconds]]]

Succeeded
