Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 30 6:59:14 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 7.53182 secs, and comparison 4.31336 sec, and warnIfPerfScore > 0.86, and perfScore=0.572685]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.52764 secs, and comparison 2.91229 sec, and warnIfPerfScore > 0.51, and perfScore=0.386879]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.32816 secs, and comparison 2.26816 sec, and warnIfPerfScore > 0.39, and perfScore=0.272348]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.11543 secs, and comparison 2.71497 sec, and warnIfPerfScore > 0.39, and perfScore=0.334544]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.78518 secs, and comparison 25.0372 sec, and warnIfPerfScore > 4.8, and perfScore=2.84993]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.7243 secs, and comparison 24.305 sec, and warnIfPerfScore > 4, and perfScore=2.78589]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	51
	DETAILS:         	[baseline test 7.8059 secs, and comparison 400.265 sec, and warnIfPerfScore > 78, and perfScore=51.2773]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.60806 secs, and comparison 6.22622 sec, and warnIfPerfScore > 2.1, and perfScore=0.818371]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.26145 secs, and comparison 10.6443 sec, and warnIfPerfScore > 1.4, and perfScore=1.28843]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.83632 secs, and comparison 6.51545 sec, and warnIfPerfScore > 1.6, and perfScore=0.953064]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.19596 secs, and comparison 9.75777 sec, and warnIfPerfScore > 1.2, and perfScore=1.06109]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.45467 secs, and comparison 3.94272 sec, and warnIfPerfScore > 0.48, and perfScore=0.417013]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2419 secs, and comparison 14.049 sec, and warnIfPerfScore > 1.3, and perfScore=1.14762]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.83748 secs, and comparison 5.53651 sec, and warnIfPerfScore > 0.75, and perfScore=0.562798]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.87214 secs, and comparison 1.47265 sec, and warnIfPerfScore > 0.33, and perfScore=0.250786]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.48616 secs, and comparison 37.3853 sec, and warnIfPerfScore > 5.1, and perfScore=3.94103]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.49822 secs, and comparison 5.25576 sec, and warnIfPerfScore > 0.7, and perfScore=0.553342]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.54018 secs, and comparison 9.46232 sec, and warnIfPerfScore > 1.1, and perfScore=0.991839]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.97665 secs, and comparison 3.28828 sec, and warnIfPerfScore > 0.55, and perfScore=0.550188]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.80081 secs, and comparison 37.0524 sec, and warnIfPerfScore > 4.7, and perfScore=3.78054]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 6.04447 secs, and comparison 4.87893 sec, and warnIfPerfScore > 0.79, and perfScore=0.807172]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.08036 secs, and comparison 3.33449 sec, and warnIfPerfScore > 0.6, and perfScore=0.548403]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.04822 secs, and comparison 3.38698 sec, and warnIfPerfScore > 0.6, and perfScore=0.559997]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 6.06235 secs, and comparison 4.90718 sec, and warnIfPerfScore > 1, and perfScore=0.809452]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.60159 secs, and comparison 8.39693 sec, and warnIfPerfScore > 1.3, and perfScore=1.27196]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 46.7412 secs, and comparison 5.74865 sec, and warnIfPerfScore > 0.21, and perfScore=0.122989]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.92374 secs, and comparison 11.4565 sec, and warnIfPerfScore > 1.8, and perfScore=1.44585]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 7.49877 secs, and comparison 6.28229 sec, and warnIfPerfScore > 0.99, and perfScore=0.837776]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.6943 secs, and comparison 6.84295 sec, and warnIfPerfScore > 0.85, and perfScore=0.639871]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.68255 sec, and warnIfPerfScore > 0.5, and perfScore=0.378837]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.64747 sec, and warnIfPerfScore > 0.5, and perfScore=0.176498]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.265016 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.63785 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.6479 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.126559 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.228 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.34521 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0343527 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.459655 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.54785 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.138475 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.51573 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.9308 seconds

[[[Tests took: 16 minutes, 30 seconds]]]

Succeeded
