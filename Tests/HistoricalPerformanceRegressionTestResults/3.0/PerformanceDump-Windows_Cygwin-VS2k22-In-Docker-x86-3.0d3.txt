Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 30 2:15:59 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 7.55077 secs, and comparison 4.30417 sec, and warnIfPerfScore > 0.86, and perfScore=0.57003]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.54426 secs, and comparison 2.91921 sec, and warnIfPerfScore > 0.51, and perfScore=0.386945]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.17608 secs, and comparison 2.27295 sec, and warnIfPerfScore > 0.39, and perfScore=0.278]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.09556 secs, and comparison 2.72856 sec, and warnIfPerfScore > 0.39, and perfScore=0.337044]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.42231 secs, and comparison 24.2998 sec, and warnIfPerfScore > 4.8, and perfScore=2.88517]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.34033 secs, and comparison 23.6644 sec, and warnIfPerfScore > 4, and perfScore=2.83734]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	52
	DETAILS:         	[baseline test 7.69351 secs, and comparison 400.888 sec, and warnIfPerfScore > 78, and perfScore=52.1073]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 7.3205 secs, and comparison 6.1338 sec, and warnIfPerfScore > 2.1, and perfScore=0.837894]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.31394 secs, and comparison 10.6764 sec, and warnIfPerfScore > 1.4, and perfScore=1.28416]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.41598 secs, and comparison 6.29435 sec, and warnIfPerfScore > 1.6, and perfScore=0.981043]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.95289 secs, and comparison 9.62559 sec, and warnIfPerfScore > 1.2, and perfScore=1.07514]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.41576 secs, and comparison 3.94083 sec, and warnIfPerfScore > 0.48, and perfScore=0.418536]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2931 secs, and comparison 14.1105 sec, and warnIfPerfScore > 1.3, and perfScore=1.14784]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.77856 secs, and comparison 5.40727 sec, and warnIfPerfScore > 0.75, and perfScore=0.552972]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.83825 secs, and comparison 1.4984 sec, and warnIfPerfScore > 0.33, and perfScore=0.256652]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.41146 secs, and comparison 38.3263 sec, and warnIfPerfScore > 5.1, and perfScore=4.0723]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.40978 secs, and comparison 5.10117 sec, and warnIfPerfScore > 0.7, and perfScore=0.542113]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.38237 secs, and comparison 9.36006 sec, and warnIfPerfScore > 1.1, and perfScore=0.997622]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 5.81648 secs, and comparison 3.49351 sec, and warnIfPerfScore > 0.55, and perfScore=0.600623]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.62349 secs, and comparison 36.5323 sec, and warnIfPerfScore > 4.7, and perfScore=3.79615]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.94554 secs, and comparison 4.82739 sec, and warnIfPerfScore > 0.79, and perfScore=0.811935]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.94166 secs, and comparison 3.26718 sec, and warnIfPerfScore > 0.6, and perfScore=0.549877]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.03842 secs, and comparison 3.30327 sec, and warnIfPerfScore > 0.6, and perfScore=0.547042]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.0334 secs, and comparison 4.76203 sec, and warnIfPerfScore > 1, and perfScore=0.789277]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.56574 secs, and comparison 8.4416 sec, and warnIfPerfScore > 1.3, and perfScore=1.2857]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.9377 secs, and comparison 5.68024 sec, and warnIfPerfScore > 0.21, and perfScore=0.123651]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.78517 secs, and comparison 11.2679 sec, and warnIfPerfScore > 1.8, and perfScore=1.44735]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.32991 secs, and comparison 6.05943 sec, and warnIfPerfScore > 0.99, and perfScore=0.826672]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.2771 secs, and comparison 6.79159 sec, and warnIfPerfScore > 0.85, and perfScore=0.660848]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.55395 sec, and warnIfPerfScore > 0.5, and perfScore=0.370263]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.70617 sec, and warnIfPerfScore > 0.5, and perfScore=0.180411]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.266755 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.61769 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.7544 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.114712 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.32353 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.38974 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0349964 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.44984 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.56144 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.132494 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.56699 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.99791 seconds

[[[Tests took: 16 minutes, 24 seconds]]]

Succeeded
