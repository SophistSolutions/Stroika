[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 28 19::5 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.78083 secs, and comparison 5.09469 sec, and warnIfPerfScore > 0.9, and perfScore=0.654775]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.70614 secs, and comparison 3.50334 sec, and warnIfPerfScore > 0.51, and perfScore=0.454616]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 38.5449 secs, and comparison 2.79036 sec, and warnIfPerfScore > 0.49, and perfScore=0.0723925]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 36.1848 secs, and comparison 3.41296 sec, and warnIfPerfScore > 0.45, and perfScore=0.0943201]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 10.1071 secs, and comparison 29.0768 sec, and warnIfPerfScore > 4.9, and perfScore=2.87688]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 10.4149 secs, and comparison 29.0762 sec, and warnIfPerfScore > 4.1, and perfScore=2.79178]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	44
	DETAILS:         	[baseline test 9.62914 secs, and comparison 422.667 sec, and warnIfPerfScore > 78, and perfScore=43.8946]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.89242 secs, and comparison 7.51509 sec, and warnIfPerfScore > 2.1, and perfScore=0.845112]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.50565 secs, and comparison 12.5582 sec, and warnIfPerfScore > 1.4, and perfScore=1.32113]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.70986 secs, and comparison 7.67166 sec, and warnIfPerfScore > 1.7, and perfScore=0.995046]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.99308 secs, and comparison 11.8486 sec, and warnIfPerfScore > 1.2, and perfScore=1.18568]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.673 secs, and comparison 4.96289 sec, and warnIfPerfScore > 0.48, and perfScore=0.464996]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.9434 secs, and comparison 16.0341 sec, and warnIfPerfScore > 1.3, and perfScore=1.07299]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 11.7198 secs, and comparison 6.14471 sec, and warnIfPerfScore > 0.75, and perfScore=0.524303]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.78937 secs, and comparison 1.66124 sec, and warnIfPerfScore > 0.33, and perfScore=0.244683]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.5869 secs, and comparison 44.4072 sec, and warnIfPerfScore > 5.1, and perfScore=4.19454]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.7237 secs, and comparison 5.88824 sec, and warnIfPerfScore > 0.7, and perfScore=0.549086]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 10.7133 secs, and comparison 10.5149 sec, and warnIfPerfScore > 1.1, and perfScore=0.98148]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.78484 secs, and comparison 3.99724 sec, and warnIfPerfScore > 0.55, and perfScore=0.589143]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 11.1368 secs, and comparison 40.9208 sec, and warnIfPerfScore > 4.9, and perfScore=3.67437]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 6.94764 secs, and comparison 5.72715 sec, and warnIfPerfScore > 0.85, and perfScore=0.82433]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 7.02719 secs, and comparison 4.03617 sec, and warnIfPerfScore > 0.6, and perfScore=0.574365]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 7.07785 secs, and comparison 3.99817 sec, and warnIfPerfScore > 0.6, and perfScore=0.564886]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.21591 secs, and comparison 5.63908 sec, and warnIfPerfScore > 1, and perfScore=0.78148]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.57073 secs, and comparison 9.62853 sec, and warnIfPerfScore > 1.3, and perfScore=1.27181]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 54.9415 secs, and comparison 7.23688 sec, and warnIfPerfScore > 0.21, and perfScore=0.13172]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.06216 secs, and comparison 22.159 sec, and warnIfPerfScore > 1.8, and perfScore=2.44522]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.45932 secs, and comparison 7.40005 sec, and warnIfPerfScore > 1, and perfScore=0.87478]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 12.3144 secs, and comparison 8.18195 sec, and warnIfPerfScore > 0.85, and perfScore=0.664421]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15 secs, and comparison 5.98292 sec, and warnIfPerfScore > 0.5, and perfScore=0.398861]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.32101 sec, and warnIfPerfScore > 0.5, and perfScore=0.221401]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.311713 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.18841 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			15.8334 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.210185 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.69019 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.2018 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0379204 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.572052 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.91131 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.25083 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.054 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.7013 seconds

[[[Tests took: 19 minutes, 41 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1181120 ms)
[----------] 1 test from Stroika_Performance_Tests (1181120 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1181120 ms total)
[  PASSED  ] 1 test.
