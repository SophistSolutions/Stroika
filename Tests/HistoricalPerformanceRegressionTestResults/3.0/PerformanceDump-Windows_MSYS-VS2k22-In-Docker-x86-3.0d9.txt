[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jul 29 12:38:52 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.97265 secs, and comparison 4.73736 sec, and warnIfPerfScore > 0.9, and perfScore=0.67942]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.05878 secs, and comparison 3.2285 sec, and warnIfPerfScore > 0.51, and perfScore=0.457374]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.5748 secs, and comparison 2.49686 sec, and warnIfPerfScore > 0.49, and perfScore=0.236115]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 10.3226 secs, and comparison 3.0743 sec, and warnIfPerfScore > 0.45, and perfScore=0.297821]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.24507 secs, and comparison 26.5762 sec, and warnIfPerfScore > 4.9, and perfScore=2.87464]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.38698 secs, and comparison 24.7555 sec, and warnIfPerfScore > 4.1, and perfScore=2.63721]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	51
	DETAILS:         	[baseline test 8.55446 secs, and comparison 434.367 sec, and warnIfPerfScore > 78, and perfScore=50.7766]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 8.46882 secs, and comparison 6.8552 sec, and warnIfPerfScore > 2.1, and perfScore=0.809464]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.74868 secs, and comparison 11.2081 sec, and warnIfPerfScore > 1.4, and perfScore=1.28111]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.16491 secs, and comparison 7.02243 sec, and warnIfPerfScore > 1.7, and perfScore=0.980114]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.42063 secs, and comparison 10.6415 sec, and warnIfPerfScore > 1.2, and perfScore=1.1296]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.89028 secs, and comparison 4.49237 sec, and warnIfPerfScore > 0.48, and perfScore=0.454221]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.589 secs, and comparison 14.9246 sec, and warnIfPerfScore > 1.3, and perfScore=1.09828]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.7256 secs, and comparison 5.75703 sec, and warnIfPerfScore > 0.75, and perfScore=0.536758]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.38275 secs, and comparison 1.57139 sec, and warnIfPerfScore > 0.33, and perfScore=0.246193]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.208 secs, and comparison 42.4844 sec, and warnIfPerfScore > 5.1, and perfScore=4.16185]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.2563 secs, and comparison 5.44358 sec, and warnIfPerfScore > 0.7, and perfScore=0.530755]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.2363 secs, and comparison 10.3377 sec, and warnIfPerfScore > 1.1, and perfScore=1.00991]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.34678 secs, and comparison 3.82212 sec, and warnIfPerfScore > 0.55, and perfScore=0.602213]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.5218 secs, and comparison 41.0143 sec, and warnIfPerfScore > 4.9, and perfScore=3.89803]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.61889 secs, and comparison 5.11136 sec, and warnIfPerfScore > 0.85, and perfScore=0.772239]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.61034 secs, and comparison 3.7182 sec, and warnIfPerfScore > 0.6, and perfScore=0.562483]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.39523 secs, and comparison 3.73601 sec, and warnIfPerfScore > 0.6, and perfScore=0.584188]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.55919 secs, and comparison 5.03752 sec, and warnIfPerfScore > 1, and perfScore=0.768009]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.06664 secs, and comparison 9.21243 sec, and warnIfPerfScore > 1.3, and perfScore=1.30365]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 50.2618 secs, and comparison 6.23714 sec, and warnIfPerfScore > 0.21, and perfScore=0.124093]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.24148 secs, and comparison 20.1806 sec, and warnIfPerfScore > 1.8, and perfScore=2.44866]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 7.8875 secs, and comparison 6.79266 sec, and warnIfPerfScore > 1, and perfScore=0.861193]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.4806 secs, and comparison 7.78836 sec, and warnIfPerfScore > 0.85, and perfScore=0.678391]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.74647 sec, and warnIfPerfScore > 0.5, and perfScore=0.383098]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.2072 sec, and warnIfPerfScore > 0.5, and perfScore=0.213814]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.288921 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.04223 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			15.939 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.131386 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.8086 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.541 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0358078 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.488699 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.75652 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.18071 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.04112 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.7794 seconds

[[[Tests took: 18 minutes, 6 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1085861 ms)
[----------] 1 test from Stroika_Performance_Tests (1085861 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1085861 ms total)
[  PASSED  ] 1 test.
