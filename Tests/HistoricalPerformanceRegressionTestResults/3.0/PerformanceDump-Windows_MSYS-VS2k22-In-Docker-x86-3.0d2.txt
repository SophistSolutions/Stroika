Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Sep 20 23:6:8 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.97942 secs, and comparison 4.07083 sec, and warnIfPerfScore > 0.86, and perfScore=0.583262]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.0374 secs, and comparison 3.61323 sec, and warnIfPerfScore > 0.51, and perfScore=0.513432]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.67752 secs, and comparison 2.1454 sec, and warnIfPerfScore > 0.39, and perfScore=0.221689]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.63504 secs, and comparison 2.52191 sec, and warnIfPerfScore > 0.39, and perfScore=0.261744]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.55199 secs, and comparison 24.5223 sec, and warnIfPerfScore > 4.8, and perfScore=2.86743]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.13501 secs, and comparison 23.3968 sec, and warnIfPerfScore > 4, and perfScore=2.56123]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	47
	DETAILS:         	[baseline test 8.29833 secs, and comparison 388.112 sec, and warnIfPerfScore > 78, and perfScore=46.7699]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.21413 secs, and comparison 5.90555 sec, and warnIfPerfScore > 2.1, and perfScore=0.818608]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.70738 secs, and comparison 10.4313 sec, and warnIfPerfScore > 1.4, and perfScore=1.35341]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.50318 secs, and comparison 6.0322 sec, and warnIfPerfScore > 1.6, and perfScore=0.927576]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.80468 secs, and comparison 9.41583 sec, and warnIfPerfScore > 1.2, and perfScore=1.06941]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.16973 secs, and comparison 3.75828 sec, and warnIfPerfScore > 0.48, and perfScore=0.409857]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2748 secs, and comparison 13.7077 sec, and warnIfPerfScore > 1.3, and perfScore=1.11674]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.47377 secs, and comparison 5.16543 sec, and warnIfPerfScore > 0.75, and perfScore=0.545235]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.64914 secs, and comparison 1.44627 sec, and warnIfPerfScore > 0.33, and perfScore=0.256015]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.25223 secs, and comparison 36.1661 sec, and warnIfPerfScore > 5.1, and perfScore=3.9089]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.15653 secs, and comparison 5.02611 sec, and warnIfPerfScore > 0.7, and perfScore=0.54891]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.14037 secs, and comparison 8.86415 sec, and warnIfPerfScore > 1.1, and perfScore=0.96978]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.70551 secs, and comparison 3.17358 sec, and warnIfPerfScore > 0.55, and perfScore=0.55623]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.55067 secs, and comparison 34.5417 sec, and warnIfPerfScore > 4.7, and perfScore=3.61668]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.81087 secs, and comparison 4.5978 sec, and warnIfPerfScore > 0.79, and perfScore=0.791241]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.95336 secs, and comparison 3.12397 sec, and warnIfPerfScore > 0.6, and perfScore=0.524741]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.87979 secs, and comparison 3.1839 sec, and warnIfPerfScore > 0.6, and perfScore=0.541499]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.02336 secs, and comparison 4.67214 sec, and warnIfPerfScore > 1, and perfScore=0.775671]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.57012 secs, and comparison 8.25516 sec, and warnIfPerfScore > 1.3, and perfScore=1.25647]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 44.8829 secs, and comparison 5.39219 sec, and warnIfPerfScore > 0.21, and perfScore=0.120139]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.7761 secs, and comparison 10.9543 sec, and warnIfPerfScore > 1.8, and perfScore=1.40871]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.07909 secs, and comparison 5.81966 sec, and warnIfPerfScore > 0.99, and perfScore=0.822092]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 10.6653 secs, and comparison 6.3387 sec, and warnIfPerfScore > 0.85, and perfScore=0.59433]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.75715 sec, and warnIfPerfScore > 0.5, and perfScore=0.38381]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.51085 sec, and warnIfPerfScore > 0.5, and perfScore=0.16739]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.2565 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.5098 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.139 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.122227 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.37635 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.47767 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0331959 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.425859 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.45547 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.124603 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.37387 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.4256 seconds

[[[Tests took: 16 minutes, 4 seconds]]]

Succeeded
