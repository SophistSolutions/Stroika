[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jul 29 5:2:49 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.51415 secs, and comparison 4.60886 sec, and warnIfPerfScore > 0.9, and perfScore=0.613358]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.53402 secs, and comparison 2.81411 sec, and warnIfPerfScore > 0.51, and perfScore=0.508512]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.54197 secs, and comparison 2.51629 sec, and warnIfPerfScore > 0.49, and perfScore=0.384639]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.52984 secs, and comparison 3.01706 sec, and warnIfPerfScore > 0.45, and perfScore=0.462042]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.462042}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 6.57171 secs, and comparison 30.4573 sec, and warnIfPerfScore > 4.9, and perfScore=4.63461]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 7.70682 secs, and comparison 31.4601 sec, and warnIfPerfScore > 4.1, and perfScore=4.08211]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	71
	DETAILS:         	[baseline test 6.26521 secs, and comparison 443.548 sec, and warnIfPerfScore > 78, and perfScore=70.7954]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.35324 secs, and comparison 7.69097 sec, and warnIfPerfScore > 2.1, and perfScore=1.21056]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.66267 secs, and comparison 7.60084 sec, and warnIfPerfScore > 1.4, and perfScore=1.34227]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.17756 secs, and comparison 8.13409 sec, and warnIfPerfScore > 1.7, and perfScore=1.31671]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.90567 secs, and comparison 8.79746 sec, and warnIfPerfScore > 1.2, and perfScore=1.27395]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.27395}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.19653 secs, and comparison 3.12067 sec, and warnIfPerfScore > 0.48, and perfScore=0.433636]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6395 secs, and comparison 14.1452 sec, and warnIfPerfScore > 1.3, and perfScore=1.11912]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.89373 secs, and comparison 5.47923 sec, and warnIfPerfScore > 0.75, and perfScore=0.616078]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.50263 secs, and comparison 1.94868 sec, and warnIfPerfScore > 0.33, and perfScore=0.229186]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.45377 secs, and comparison 40.6441 sec, and warnIfPerfScore > 5.1, and perfScore=4.80781]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.37923 secs, and comparison 5.01737 sec, and warnIfPerfScore > 0.7, and perfScore=0.598787]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.36563 secs, and comparison 7.71498 sec, and warnIfPerfScore > 1.1, and perfScore=0.922223]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.49589 secs, and comparison 3.59002 sec, and warnIfPerfScore > 0.55, and perfScore=0.422559]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 8.90409 secs, and comparison 45.0935 sec, and warnIfPerfScore > 4.9, and perfScore=5.06435]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.9 and got 5.06435}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 8.54605 secs, and comparison 5.73676 sec, and warnIfPerfScore > 0.85, and perfScore=0.671276]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.44567 secs, and comparison 3.56883 sec, and warnIfPerfScore > 0.6, and perfScore=0.422563]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.546 secs, and comparison 3.52582 sec, and warnIfPerfScore > 0.6, and perfScore=0.412569]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.49202 secs, and comparison 5.61362 sec, and warnIfPerfScore > 1, and perfScore=0.661047]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.06427 secs, and comparison 9.17345 sec, and warnIfPerfScore > 1.3, and perfScore=1.01205]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 40.2384 secs, and comparison 6.001 sec, and warnIfPerfScore > 0.21, and perfScore=0.149136]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.46515 secs, and comparison 17.9892 sec, and warnIfPerfScore > 1.8, and perfScore=2.78248]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 2.78248}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 6.55288 secs, and comparison 5.74851 sec, and warnIfPerfScore > 1, and perfScore=0.877251]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 8.35956 secs, and comparison 6.53906 sec, and warnIfPerfScore > 0.85, and perfScore=0.782226]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.49195 sec, and warnIfPerfScore > 0.5, and perfScore=0.299464]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79905 sec, and warnIfPerfScore > 0.5, and perfScore=0.186603]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.252976 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.9951 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.6339 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.150405 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.93042 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.3546 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0438216 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.46199 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.68794 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.165807 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.24316 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.6159 seconds

[[[Tests took: 17 minutes, 34 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1053991 ms)
[----------] 1 test from Stroika_Performance_Tests (1053991 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1053991 ms total)
[  PASSED  ] 1 test.
