Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jul 11 22:6:33 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.4103 secs, and comparison 4.82148 sec, and warnIfPerfScore > 0.65, and perfScore=0.650646]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.21239 secs, and comparison 3.04507 sec, and warnIfPerfScore > 0.5, and perfScore=0.4222]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 9.84208 secs, and comparison 3.08416 sec, and warnIfPerfScore > 0.48, and perfScore=0.313364]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.90437 secs, and comparison 3.6618 sec, and warnIfPerfScore > 0.57, and perfScore=0.369716]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.79264 secs, and comparison 36.1032 sec, and warnIfPerfScore > 2.9, and perfScore=3.68677]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 10.3729 secs, and comparison 36.0139 sec, and warnIfPerfScore > 2.9, and perfScore=3.47191]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	58
	DETAILS:         	[baseline test 8.78375 secs, and comparison 509.95 sec, and warnIfPerfScore > 24, and perfScore=58.0561]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.9922 secs, and comparison 10.9084 sec, and warnIfPerfScore > 1.7, and perfScore=1.82043]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.17873 secs, and comparison 7.8159 sec, and warnIfPerfScore > 1.5, and perfScore=1.26497]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.68188 secs, and comparison 11.2615 sec, and warnIfPerfScore > 2.1, and perfScore=1.98201]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.02078 secs, and comparison 7.17401 sec, and warnIfPerfScore > 1.6, and perfScore=1.02183]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.2032 secs, and comparison 7.47093 sec, and warnIfPerfScore > 0.23, and perfScore=1.03717]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4417 secs, and comparison 13.6919 sec, and warnIfPerfScore > 1.3, and perfScore=1.10048]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.43089 secs, and comparison 5.3423 sec, and warnIfPerfScore > 1.2, and perfScore=0.633658]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.69961 secs, and comparison 1.78772 sec, and warnIfPerfScore > 0.33, and perfScore=0.232183]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.00329 secs, and comparison 39.114 sec, and warnIfPerfScore > 6, and perfScore=4.88724]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.30453 secs, and comparison 5.29433 sec, and warnIfPerfScore > 0.8, and perfScore=0.637523]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.38381 secs, and comparison 7.53584 sec, and warnIfPerfScore > 1.4, and perfScore=0.898857]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.09977 secs, and comparison 3.39895 sec, and warnIfPerfScore > 0.65, and perfScore=0.419635]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.41038 secs, and comparison 41.1555 sec, and warnIfPerfScore > 4.4, and perfScore=4.89341]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.92264 secs, and comparison 5.84733 sec, and warnIfPerfScore > 0.6, and perfScore=0.738053]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.83197 secs, and comparison 3.37163 sec, and warnIfPerfScore > 0.6, and perfScore=0.430496]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.92447 secs, and comparison 3.34049 sec, and warnIfPerfScore > 0.6, and perfScore=0.42154]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.63379 secs, and comparison 5.7814 sec, and warnIfPerfScore > 1.3, and perfScore=0.757344]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.48481 secs, and comparison 8.84433 sec, and warnIfPerfScore > 1.3, and perfScore=1.04237]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 39.5783 secs, and comparison 6.59239 sec, and warnIfPerfScore > 0.3, and perfScore=0.166566]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.02221 secs, and comparison 9.22561 sec, and warnIfPerfScore > 1.5, and perfScore=1.53193]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 6.41388 secs, and comparison 5.66545 sec, and warnIfPerfScore > 0.55, and perfScore=0.883309]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.035
	DETAILS:         	[baseline test 15 secs, and comparison 0.518578 sec, and warnIfPerfScore > 0.1, and perfScore=0.0345719]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.51263 sec, and warnIfPerfScore > 0.5, and perfScore=0.167509]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 6.75882 secs, and comparison 15.1786 sec, and warnIfPerfScore > 2, and perfScore=2.24575]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.9819 secs, and comparison 20.358 sec, and warnIfPerfScore > 3.6, and perfScore=1.69907]
	                 	codecvt_utf8 is ***SLOWER***

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.416291 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			5.88888 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			20.1598 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.319857 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.69955 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.0366 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.180453 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.2375 seconds

nlohmann_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.5389 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0556655 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.684371 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			2.19504 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.308846 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.60825 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			12.9219 seconds

[[[Tests took: 19 minutes, 32 seconds]]]

Succeeded
