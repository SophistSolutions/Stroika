Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jul 11 23:48:41 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.01512 secs, and comparison 4.11285 sec, and warnIfPerfScore > 0.65, and perfScore=0.820089]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.00365 secs, and comparison 2.35908 sec, and warnIfPerfScore > 0.5, and perfScore=0.471471]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 7.98954 secs, and comparison 2.17769 sec, and warnIfPerfScore > 0.48, and perfScore=0.272568]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.92631 secs, and comparison 2.67617 sec, and warnIfPerfScore > 0.57, and perfScore=0.337631]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 6.41934 secs, and comparison 25.8311 sec, and warnIfPerfScore > 2.9, and perfScore=4.02395]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 6.94158 secs, and comparison 25.3706 sec, and warnIfPerfScore > 2.9, and perfScore=3.65487]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	74
	DETAILS:         	[baseline test 5.64499 secs, and comparison 414.912 sec, and warnIfPerfScore > 24, and perfScore=73.5009]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.67859 secs, and comparison 9.90917 sec, and warnIfPerfScore > 1.7, and perfScore=1.745]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.34401 secs, and comparison 6.80735 sec, and warnIfPerfScore > 1.5, and perfScore=1.27383]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.04811 secs, and comparison 9.91403 sec, and warnIfPerfScore > 2.1, and perfScore=1.96391]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.36485 secs, and comparison 6.79173 sec, and warnIfPerfScore > 1.6, and perfScore=1.06707]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.75843 secs, and comparison 7.10867 sec, and warnIfPerfScore > 0.23, and perfScore=1.05182]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5248 secs, and comparison 12.9153 sec, and warnIfPerfScore > 1.3, and perfScore=1.12065]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.94265 secs, and comparison 5.06688 sec, and warnIfPerfScore > 1.2, and perfScore=0.637933]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.99393 secs, and comparison 1.84412 sec, and warnIfPerfScore > 0.33, and perfScore=0.23069]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 7.6191 secs, and comparison 36.8171 sec, and warnIfPerfScore > 6, and perfScore=4.8322]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.71026 secs, and comparison 4.77114 sec, and warnIfPerfScore > 0.8, and perfScore=0.618804]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.70916 secs, and comparison 6.92143 sec, and warnIfPerfScore > 1.4, and perfScore=0.897819]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.01416 secs, and comparison 3.25656 sec, and warnIfPerfScore > 0.65, and perfScore=0.40635]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.22537 secs, and comparison 37.675 sec, and warnIfPerfScore > 4.4, and perfScore=4.58034]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.007 secs, and comparison 5.09618 sec, and warnIfPerfScore > 0.6, and perfScore=0.636465]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.975 secs, and comparison 3.15549 sec, and warnIfPerfScore > 0.6, and perfScore=0.395673]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.96082 secs, and comparison 3.17822 sec, and warnIfPerfScore > 0.6, and perfScore=0.399233]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.95936 secs, and comparison 5.03765 sec, and warnIfPerfScore > 1.3, and perfScore=0.632922]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.4587 secs, and comparison 8.16996 sec, and warnIfPerfScore > 1.3, and perfScore=0.965866]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 38.0064 secs, and comparison 5.22339 sec, and warnIfPerfScore > 0.3, and perfScore=0.137435]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.31244 secs, and comparison 8.52199 sec, and warnIfPerfScore > 1.5, and perfScore=1.60416]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.86293 secs, and comparison 5.48088 sec, and warnIfPerfScore > 0.55, and perfScore=0.934836]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.031
	DETAILS:         	[baseline test 15 secs, and comparison 0.466394 sec, and warnIfPerfScore > 0.1, and perfScore=0.031093]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.23509 sec, and warnIfPerfScore > 0.5, and perfScore=0.149006]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.18707 secs, and comparison 11.9769 sec, and warnIfPerfScore > 2, and perfScore=1.93579]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.75735 secs, and comparison 14.4808 sec, and warnIfPerfScore > 3.6, and perfScore=1.86672]
	                 	codecvt_utf8 is ***SLOWER***

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.252901 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.6756 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.265 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.155074 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.73322 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.64859 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0318157 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.433315 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.49788 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.153389 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.68106 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.60378 seconds

[[[Tests took: 16 minutes, 27 seconds]]]

Succeeded
