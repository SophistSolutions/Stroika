Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 21 16::35 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.73479 secs, and comparison 4.67503 sec, and warnIfPerfScore > 0.86, and perfScore=0.815205]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.57553 secs, and comparison 3.03591 sec, and warnIfPerfScore > 0.51, and perfScore=0.544507]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 4.10845 secs, and comparison 2.32751 sec, and warnIfPerfScore > 0.39, and perfScore=0.566518]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 4.93946 secs, and comparison 3.26959 sec, and warnIfPerfScore > 0.39, and perfScore=0.661933]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 3.21389 secs, and comparison 22.3047 sec, and warnIfPerfScore > 4.8, and perfScore=6.9401]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 3.88967 secs, and comparison 22.6086 sec, and warnIfPerfScore > 4, and perfScore=5.81246]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	48
	DETAILS:         	[baseline test 5.29169 secs, and comparison 254.049 sec, and warnIfPerfScore > 78, and perfScore=48.0091]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.50613 secs, and comparison 6.85217 sec, and warnIfPerfScore > 2.1, and perfScore=1.24446]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.79412 secs, and comparison 8.40095 sec, and warnIfPerfScore > 1.4, and perfScore=1.2365]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.14694 secs, and comparison 8.39502 sec, and warnIfPerfScore > 1.6, and perfScore=2.66768]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.40126 secs, and comparison 5.39888 sec, and warnIfPerfScore > 1.2, and perfScore=1.22667]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.63483 secs, and comparison 4.24984 sec, and warnIfPerfScore > 0.48, and perfScore=0.916936]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 4.31994 secs, and comparison 6.42617 sec, and warnIfPerfScore > 1.3, and perfScore=1.48756]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.11619 secs, and comparison 10.5125 sec, and warnIfPerfScore > 0.75, and perfScore=3.37352]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 20.945 secs, and comparison 1.86662 sec, and warnIfPerfScore > 0.33, and perfScore=0.08912]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.02943 secs, and comparison 40.7148 sec, and warnIfPerfScore > 5.1, and perfScore=13.4397]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.07283 secs, and comparison 7.56678 sec, and warnIfPerfScore > 0.7, and perfScore=2.46248]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.99753 secs, and comparison 8.64031 sec, and warnIfPerfScore > 1.1, and perfScore=2.88248]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.5857 secs, and comparison 3.67361 sec, and warnIfPerfScore > 0.55, and perfScore=0.178455]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 4.9522 secs, and comparison 46.9649 sec, and warnIfPerfScore > 4.7, and perfScore=9.48364]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.9004 secs, and comparison 6.53768 sec, and warnIfPerfScore > 0.79, and perfScore=0.438758]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 23.5619 secs, and comparison 4.25616 sec, and warnIfPerfScore > 0.6, and perfScore=0.180638]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.1635 secs, and comparison 3.63083 sec, and warnIfPerfScore > 0.6, and perfScore=0.239445]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.1517 secs, and comparison 4.00039 sec, and warnIfPerfScore > 1, and perfScore=0.264024]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 20.8351 secs, and comparison 9.94764 sec, and warnIfPerfScore > 1.3, and perfScore=0.477447]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.0471 secs, and comparison 5.56636 sec, and warnIfPerfScore > 0.21, and perfScore=0.292242]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.67834 secs, and comparison 13.1109 sec, and warnIfPerfScore > 1.8, and perfScore=1.70752]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.46287 secs, and comparison 5.89534 sec, and warnIfPerfScore > 0.99, and perfScore=0.912185]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 4.7012 secs, and comparison 6.51359 sec, and warnIfPerfScore > 0.85, and perfScore=1.38552]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.25208 sec, and warnIfPerfScore > 0.5, and perfScore=0.416806]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.77168 sec, and warnIfPerfScore > 0.5, and perfScore=0.184779]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.261964 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.75386 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			13.1756 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.137748 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.29702 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.98308 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0312959 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.470854 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.66128 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.130889 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.36592 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.91088 seconds

[[[Tests took: 13 minutes, 50 seconds]]]

Succeeded
