Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 21 13:36:36 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 2.10288 secs, and comparison 1.19246 sec, and warnIfPerfScore > 0.86, and perfScore=0.567059]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.07791 secs, and comparison 2.42766 sec, and warnIfPerfScore > 0.51, and perfScore=1.16832]
	                 	SpinLock is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 2.68142 secs, and comparison 0.673468 sec, and warnIfPerfScore > 0.39, and perfScore=0.251161]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.37098 secs, and comparison 0.805406 sec, and warnIfPerfScore > 0.39, and perfScore=0.238923]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 2.21858 secs, and comparison 13.8422 sec, and warnIfPerfScore > 4.8, and perfScore=6.23923]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 2.58403 secs, and comparison 15.863 sec, and warnIfPerfScore > 4, and perfScore=6.13888]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	64
	DETAILS:         	[baseline test 3.04723 secs, and comparison 195.773 sec, and warnIfPerfScore > 78, and perfScore=64.2463]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.66404 secs, and comparison 3.96982 sec, and warnIfPerfScore > 2.1, and perfScore=1.08345]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.02391 secs, and comparison 5.33796 sec, and warnIfPerfScore > 1.4, and perfScore=1.32656]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.09455 secs, and comparison 4.83219 sec, and warnIfPerfScore > 1.6, and perfScore=2.30703]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.94055 secs, and comparison 3.69289 sec, and warnIfPerfScore > 1.2, and perfScore=1.25585]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.08025 secs, and comparison 3.20382 sec, and warnIfPerfScore > 0.48, and perfScore=1.04012]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.46043 secs, and comparison 4.12778 sec, and warnIfPerfScore > 1.3, and perfScore=1.67767]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.27461 secs, and comparison 4.7958 sec, and warnIfPerfScore > 0.75, and perfScore=2.10841]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 9.77282 secs, and comparison 1.09265 sec, and warnIfPerfScore > 0.33, and perfScore=0.111804]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.17914 secs, and comparison 36.8623 sec, and warnIfPerfScore > 5.1, and perfScore=16.916]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.18953 secs, and comparison 4.4066 sec, and warnIfPerfScore > 0.7, and perfScore=2.01258]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.21935 secs, and comparison 5.58299 sec, and warnIfPerfScore > 1.1, and perfScore=2.51559]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.95725 secs, and comparison 3.1441 sec, and warnIfPerfScore > 0.55, and perfScore=0.31576]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.20505 secs, and comparison 33.5934 sec, and warnIfPerfScore > 4.7, and perfScore=10.4814]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.39619 secs, and comparison 3.00952 sec, and warnIfPerfScore > 0.79, and perfScore=0.406902]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.01728 secs, and comparison 3.04344 sec, and warnIfPerfScore > 0.6, and perfScore=0.37961]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.03148 secs, and comparison 3.0326 sec, and warnIfPerfScore > 0.6, and perfScore=0.377589]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.04094 secs, and comparison 3.02238 sec, and warnIfPerfScore > 1, and perfScore=0.375874]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 11.9896 secs, and comparison 7.59474 sec, and warnIfPerfScore > 1.3, and perfScore=0.633444]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.6184 secs, and comparison 4.41574 sec, and warnIfPerfScore > 0.21, and perfScore=0.349945]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.2678 secs, and comparison 7.94038 sec, and warnIfPerfScore > 1.8, and perfScore=1.50734]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.55902 secs, and comparison 3.21727 sec, and warnIfPerfScore > 0.99, and perfScore=0.705694]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 3.21455 secs, and comparison 2.90233 sec, and warnIfPerfScore > 0.85, and perfScore=0.902872]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.74511 sec, and warnIfPerfScore > 0.5, and perfScore=0.249674]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.05549 sec, and warnIfPerfScore > 0.5, and perfScore=0.0703658]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.133097 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.13004 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			9.26882 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0889977 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.93779 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.07049 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0204074 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.345207 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.25763 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0934184 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.93037 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.9391 seconds

[[[Tests took: 9 minutes, 17 seconds]]]

Succeeded
