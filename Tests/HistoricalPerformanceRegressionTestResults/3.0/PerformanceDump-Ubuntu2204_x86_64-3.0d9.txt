[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 28 22::45 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 3.67975 secs, and comparison 2.56128 sec, and warnIfPerfScore > 0.9, and perfScore=0.696049]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.9319 secs, and comparison 3.62965 sec, and warnIfPerfScore > 0.51, and perfScore=0.923128]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.21478 secs, and comparison 1.05667 sec, and warnIfPerfScore > 0.49, and perfScore=0.250707]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.99707 secs, and comparison 1.42223 sec, and warnIfPerfScore > 0.45, and perfScore=0.237153]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.79992 secs, and comparison 20.8051 sec, and warnIfPerfScore > 4.9, and perfScore=5.47514]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 7.23203 secs, and comparison 31.5616 sec, and warnIfPerfScore > 4.1, and perfScore=4.36414]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 8.98389 secs, and comparison 234.651 sec, and warnIfPerfScore > 78, and perfScore=26.1191]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 3.24793 secs, and comparison 5.44297 sec, and warnIfPerfScore > 2.1, and perfScore=1.67583]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.59525 secs, and comparison 10.1278 sec, and warnIfPerfScore > 1.4, and perfScore=1.1783]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.78911 secs, and comparison 6.88717 sec, and warnIfPerfScore > 1.7, and perfScore=2.46931]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.4128 secs, and comparison 4.41924 sec, and warnIfPerfScore > 1.2, and perfScore=1.2949]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.54676 secs, and comparison 4.16401 sec, and warnIfPerfScore > 0.48, and perfScore=1.17403]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 2.33363 secs, and comparison 4.1293 sec, and warnIfPerfScore > 1.3, and perfScore=1.76948]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.26723 secs, and comparison 6.29095 sec, and warnIfPerfScore > 0.75, and perfScore=1.92547]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 19.3117 secs, and comparison 1.38253 sec, and warnIfPerfScore > 0.33, and perfScore=0.0715903]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.09853 secs, and comparison 40.902 sec, and warnIfPerfScore > 5.1, and perfScore=13.2005]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.11631 secs, and comparison 6.79478 sec, and warnIfPerfScore > 0.7, and perfScore=2.18039]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.09502 secs, and comparison 9.14096 sec, and warnIfPerfScore > 1.1, and perfScore=2.95344]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.5005 secs, and comparison 3.62492 sec, and warnIfPerfScore > 0.55, and perfScore=0.185889]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.91057 secs, and comparison 41.3984 sec, and warnIfPerfScore > 4.9, and perfScore=8.43046]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.256 secs, and comparison 4.32819 sec, and warnIfPerfScore > 0.85, and perfScore=0.353147]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.302 secs, and comparison 3.47743 sec, and warnIfPerfScore > 0.6, and perfScore=0.243142]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.2153 secs, and comparison 3.48144 sec, and warnIfPerfScore > 0.6, and perfScore=0.244908]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.2841 secs, and comparison 4.30829 sec, and warnIfPerfScore > 1, and perfScore=0.301614]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 19.8773 secs, and comparison 9.83841 sec, and warnIfPerfScore > 1.3, and perfScore=0.494958]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 19.3568 secs, and comparison 6.69743 sec, and warnIfPerfScore > 0.21, and perfScore=0.345998]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.88662 secs, and comparison 14.0389 sec, and warnIfPerfScore > 1.8, and perfScore=1.57978]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.80646 secs, and comparison 5.4482 sec, and warnIfPerfScore > 1, and perfScore=0.800446]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.71493 secs, and comparison 4.7935 sec, and warnIfPerfScore > 0.85, and perfScore=1.01666]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.86321 sec, and warnIfPerfScore > 0.5, and perfScore=0.390881]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.04497 sec, and warnIfPerfScore > 0.5, and perfScore=0.0696647]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.277371 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.7766 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			13.7489 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.155131 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.93282 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.36591 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0336117 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.57853 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.97642 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.243983 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.44761 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			8.77679 seconds

[[[Tests took: 13 minutes, 3 seconds]]]

[       OK ] Stroika_Performance_Tests.all (783042 ms)
[----------] 1 test from Stroika_Performance_Tests (783042 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (783042 ms total)
[  PASSED  ] 1 test.
