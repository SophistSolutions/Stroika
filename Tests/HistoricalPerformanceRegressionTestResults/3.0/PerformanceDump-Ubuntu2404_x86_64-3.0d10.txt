[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep 22 23:54:50 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 3.26792 secs, and comparison 2.22098 sec, and warnIfPerfScore > 0.9, and perfScore=0.679631]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.08644 secs, and comparison 2.97533 sec, and warnIfPerfScore > 0.51, and perfScore=0.964001]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.85934 secs, and comparison 1.01981 sec, and warnIfPerfScore > 0.49, and perfScore=0.264245]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.72643 secs, and comparison 1.20086 sec, and warnIfPerfScore > 0.45, and perfScore=0.254073]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 3.16551 secs, and comparison 21.4627 sec, and warnIfPerfScore > 4.9, and perfScore=6.78017]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 4.36675 secs, and comparison 24.883 sec, and warnIfPerfScore > 4.1, and perfScore=5.6983]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	55
	DETAILS:         	[baseline test 4.65772 secs, and comparison 256.102 sec, and warnIfPerfScore > 78, and perfScore=54.9843]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.1355 secs, and comparison 7.33585 sec, and warnIfPerfScore > 2.1, and perfScore=1.42846]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.28401 secs, and comparison 8.87839 sec, and warnIfPerfScore > 1.4, and perfScore=1.21889]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.99813 secs, and comparison 6.96463 sec, and warnIfPerfScore > 1.7, and perfScore=2.32299]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.69923 secs, and comparison 4.70051 sec, and warnIfPerfScore > 1.2, and perfScore=1.27067]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.87926 secs, and comparison 4.22433 sec, and warnIfPerfScore > 0.48, and perfScore=1.08895]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.65612 secs, and comparison 4.41327 sec, and warnIfPerfScore > 1.3, and perfScore=1.66155]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.55594 secs, and comparison 7.60519 sec, and warnIfPerfScore > 0.75, and perfScore=2.13873]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 19.8958 secs, and comparison 1.22406 sec, and warnIfPerfScore > 0.33, and perfScore=0.0615236]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.29902 secs, and comparison 40.144 sec, and warnIfPerfScore > 5.1, and perfScore=12.1684]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 3.4212 secs, and comparison 6.26063 sec, and warnIfPerfScore > 0.7, and perfScore=1.82995]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.34419 secs, and comparison 6.3954 sec, and warnIfPerfScore > 1.1, and perfScore=1.91239]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.0032 secs, and comparison 3.52534 sec, and warnIfPerfScore > 0.55, and perfScore=0.176239]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 4.78396 secs, and comparison 45.2258 sec, and warnIfPerfScore > 4.9, and perfScore=9.45365]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.4967 secs, and comparison 4.22548 sec, and warnIfPerfScore > 0.85, and perfScore=0.338128]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.4452 secs, and comparison 3.62413 sec, and warnIfPerfScore > 0.6, and perfScore=0.250889]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.4274 secs, and comparison 3.57131 sec, and warnIfPerfScore > 0.6, and perfScore=0.247537]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.6394 secs, and comparison 4.28354 sec, and warnIfPerfScore > 1, and perfScore=0.292603]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 19.3938 secs, and comparison 10.8324 sec, and warnIfPerfScore > 1.3, and perfScore=0.558553]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.9325 secs, and comparison 5.73485 sec, and warnIfPerfScore > 0.21, and perfScore=0.273969]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.03242 secs, and comparison 11.0345 sec, and warnIfPerfScore > 1.8, and perfScore=2.19269]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.74001 secs, and comparison 5.03438 sec, and warnIfPerfScore > 1, and perfScore=0.74694]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.51861 secs, and comparison 4.24411 sec, and warnIfPerfScore > 0.85, and perfScore=0.939253]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.2296 sec, and warnIfPerfScore > 0.5, and perfScore=0.34864]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.1186 sec, and warnIfPerfScore > 0.5, and perfScore=0.0745732]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.174299 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.69111 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			9.91026 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0932693 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.75011 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.57623 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.032825 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.54936 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			2.1418 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.155765 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.48689 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			8.29895 seconds

[[[Tests took: 13 minutes, 1 second]]]

[       OK ] Stroika_Performance_Tests.all (781090 ms)
[----------] 1 test from Stroika_Performance_Tests (781090 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (781090 ms total)
[  PASSED  ] 1 test.
