[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jun 11 :28:37 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.811 secs, and comparison 4.26802 sec, and warnIfPerfScore > 0.9, and perfScore=0.887139]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 4.84077 secs, and comparison 2.5596 sec, and warnIfPerfScore > 0.51, and perfScore=0.528759]
	                 	SpinLock is FASTER
	                 	{{{WARNING - expected performance score less than 0.51 and got 0.528759}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.2761 secs, and comparison 2.31058 sec, and warnIfPerfScore > 0.49, and perfScore=0.368156]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.33647 secs, and comparison 2.80928 sec, and warnIfPerfScore > 0.45, and perfScore=0.443351]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 6.7466 secs, and comparison 28.3449 sec, and warnIfPerfScore > 4.9, and perfScore=4.20136]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 7.43258 secs, and comparison 26.9573 sec, and warnIfPerfScore > 4.1, and perfScore=3.6269]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	68
	DETAILS:         	[baseline test 6.13203 secs, and comparison 414.16 sec, and warnIfPerfScore > 78, and perfScore=67.5404]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.8528 secs, and comparison 7.11947 sec, and warnIfPerfScore > 2.1, and perfScore=1.21642]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.30966 secs, and comparison 6.98558 sec, and warnIfPerfScore > 1.4, and perfScore=1.31564]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.27333 secs, and comparison 7.62862 sec, and warnIfPerfScore > 1.7, and perfScore=1.44664]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.47698 secs, and comparison 8.43251 sec, and warnIfPerfScore > 1.2, and perfScore=1.30192]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.30192}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.84242 secs, and comparison 3.0812 sec, and warnIfPerfScore > 0.48, and perfScore=0.450309]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1407 secs, and comparison 14.0274 sec, and warnIfPerfScore > 1.3, and perfScore=1.15541]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.42477 secs, and comparison 5.04 sec, and warnIfPerfScore > 0.75, and perfScore=0.598236]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.12358 secs, and comparison 1.6695 sec, and warnIfPerfScore > 0.33, and perfScore=0.234362]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.07851 secs, and comparison 38.5237 sec, and warnIfPerfScore > 5.1, and perfScore=4.76866]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.05822 secs, and comparison 4.73617 sec, and warnIfPerfScore > 0.7, and perfScore=0.587744]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.08753 secs, and comparison 7.0744 sec, and warnIfPerfScore > 1.1, and perfScore=0.87473]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.15398 secs, and comparison 3.58505 sec, and warnIfPerfScore > 0.55, and perfScore=0.501126]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.57382 secs, and comparison 39.9841 sec, and warnIfPerfScore > 4.9, and perfScore=4.66352]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 7.26592 secs, and comparison 5.2552 sec, and warnIfPerfScore > 0.85, and perfScore=0.723267]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.15113 secs, and comparison 3.3451 sec, and warnIfPerfScore > 0.6, and perfScore=0.467771]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.24537 secs, and comparison 3.29091 sec, and warnIfPerfScore > 0.6, and perfScore=0.454209]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 7.19793 secs, and comparison 5.28836 sec, and warnIfPerfScore > 1, and perfScore=0.734706]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.63109 secs, and comparison 8.69109 sec, and warnIfPerfScore > 1.3, and perfScore=1.13891]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 37.7726 secs, and comparison 5.59252 sec, and warnIfPerfScore > 0.21, and perfScore=0.148057]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 5.63114 secs, and comparison 17.0163 sec, and warnIfPerfScore > 1.8, and perfScore=3.02182]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.02182}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 6.18277 secs, and comparison 5.44654 sec, and warnIfPerfScore > 1, and perfScore=0.880922]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.02758 secs, and comparison 6.08067 sec, and warnIfPerfScore > 0.85, and perfScore=0.757473]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.42149 sec, and warnIfPerfScore > 0.5, and perfScore=0.294766]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.41038 sec, and warnIfPerfScore > 0.5, and perfScore=0.160692]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.244508 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.65638 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			15.3464 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.150496 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.68253 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.6968 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0400455 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.461369 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.57067 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.201406 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.05609 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.0689 seconds

[[[Tests took: 16 minutes, 16 seconds]]]

[       OK ] Stroika_Performance_Tests.all (976153 ms)
[----------] 1 test from Stroika_Performance_Tests (976153 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (976153 ms total)
[  PASSED  ] 1 test.
