[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jun 13 4:42:51 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 5.05936 secs, and comparison 4.50349 sec, and warnIfPerfScore > 0.9, and perfScore=0.890131]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.55343 secs, and comparison 2.69921 sec, and warnIfPerfScore > 0.51, and perfScore=0.486044]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.67139 secs, and comparison 2.43627 sec, and warnIfPerfScore > 0.49, and perfScore=0.365183]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.79755 secs, and comparison 2.986 sec, and warnIfPerfScore > 0.45, and perfScore=0.439276]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 7.22378 secs, and comparison 30.8229 sec, and warnIfPerfScore > 4.9, and perfScore=4.26687]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 7.93456 secs, and comparison 29.2851 sec, and warnIfPerfScore > 4.1, and perfScore=3.69083]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	67
	DETAILS:         	[baseline test 6.44158 secs, and comparison 431.393 sec, and warnIfPerfScore > 78, and perfScore=66.97]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.15699 secs, and comparison 7.47818 sec, and warnIfPerfScore > 2.1, and perfScore=1.21458]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.6553 secs, and comparison 7.23562 sec, and warnIfPerfScore > 1.4, and perfScore=1.27944]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.55679 secs, and comparison 8.03094 sec, and warnIfPerfScore > 1.7, and perfScore=1.44525]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.83953 secs, and comparison 8.92447 sec, and warnIfPerfScore > 1.2, and perfScore=1.30484]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.30484}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.29245 secs, and comparison 3.17419 sec, and warnIfPerfScore > 0.48, and perfScore=0.435271]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.7343 secs, and comparison 14.8416 sec, and warnIfPerfScore > 1.3, and perfScore=1.16548]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.8968 secs, and comparison 5.79473 sec, and warnIfPerfScore > 0.75, and perfScore=0.651327]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.7487 secs, and comparison 1.74553 sec, and warnIfPerfScore > 0.33, and perfScore=0.225268]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.74098 secs, and comparison 40.7012 sec, and warnIfPerfScore > 5.1, and perfScore=4.65637]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.85895 secs, and comparison 5.0091 sec, and warnIfPerfScore > 0.7, and perfScore=0.565428]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.69836 secs, and comparison 7.35902 sec, and warnIfPerfScore > 1.1, and perfScore=0.846024]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.40682 secs, and comparison 3.58886 sec, and warnIfPerfScore > 0.55, and perfScore=0.484535]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.21997 secs, and comparison 43.0182 sec, and warnIfPerfScore > 4.9, and perfScore=4.66576]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.39744 secs, and comparison 5.61447 sec, and warnIfPerfScore > 0.85, and perfScore=0.758975]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.45469 secs, and comparison 3.50996 sec, and warnIfPerfScore > 0.6, and perfScore=0.470839]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.46853 secs, and comparison 3.50332 sec, and warnIfPerfScore > 0.6, and perfScore=0.469077]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.40655 secs, and comparison 5.60448 sec, and warnIfPerfScore > 1, and perfScore=0.756692]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.89081 secs, and comparison 9.09415 sec, and warnIfPerfScore > 1.3, and perfScore=1.1525]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 40.5924 secs, and comparison 5.82602 sec, and warnIfPerfScore > 0.21, and perfScore=0.143525]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.76229 secs, and comparison 18.0374 sec, and warnIfPerfScore > 1.8, and perfScore=3.13025]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.13025}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 6.55248 secs, and comparison 5.80295 sec, and warnIfPerfScore > 1, and perfScore=0.88561]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.65841 secs, and comparison 6.39546 sec, and warnIfPerfScore > 0.85, and perfScore=0.738642]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.68101 sec, and warnIfPerfScore > 0.5, and perfScore=0.312068]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.56666 sec, and warnIfPerfScore > 0.5, and perfScore=0.171111]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.315441 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.39478 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			18.0226 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.236332 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.36985 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			12.9231 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0382364 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.530383 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.81244 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.290007 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.69534 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.2109 seconds

[[[Tests took: 17 minutes, 22 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1041516 ms)
[----------] 1 test from Stroika_Performance_Tests (1041516 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1041516 ms total)
[  PASSED  ] 1 test.
