[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 12 19:14:43 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.66735 secs, and comparison 4.61316 sec, and warnIfPerfScore > 0.9, and perfScore=0.691903]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.63701 secs, and comparison 3.04334 sec, and warnIfPerfScore > 0.51, and perfScore=0.45854]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 36.2747 secs, and comparison 2.35879 sec, and warnIfPerfScore > 0.49, and perfScore=0.0650258]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 34.1169 secs, and comparison 2.88635 sec, and warnIfPerfScore > 0.45, and perfScore=0.0846016]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.06379 secs, and comparison 27.175 sec, and warnIfPerfScore > 4.9, and perfScore=2.99819]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.21446 secs, and comparison 24.3934 sec, and warnIfPerfScore > 4.1, and perfScore=2.64729]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	50
	DETAILS:         	[baseline test 8.51476 secs, and comparison 425.074 sec, and warnIfPerfScore > 78, and perfScore=49.922]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 7.66562 secs, and comparison 6.63204 sec, and warnIfPerfScore > 2.1, and perfScore=0.865168]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.20159 secs, and comparison 11.6429 sec, and warnIfPerfScore > 1.4, and perfScore=1.4196]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.71879 secs, and comparison 7.02341 sec, and warnIfPerfScore > 1.7, and perfScore=1.04534]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.52748 secs, and comparison 11.0555 sec, and warnIfPerfScore > 1.2, and perfScore=1.16039]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.68205 secs, and comparison 4.52117 sec, and warnIfPerfScore > 0.48, and perfScore=0.466964]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.701 secs, and comparison 15.0675 sec, and warnIfPerfScore > 1.3, and perfScore=1.09973]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.2268 secs, and comparison 5.73438 sec, and warnIfPerfScore > 0.75, and perfScore=0.560721]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.29923 secs, and comparison 1.49852 sec, and warnIfPerfScore > 0.33, and perfScore=0.237889]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.80877 secs, and comparison 40.8605 sec, and warnIfPerfScore > 5.1, and perfScore=4.16571]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.81474 secs, and comparison 5.37637 sec, and warnIfPerfScore > 0.7, and perfScore=0.547786]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.86179 secs, and comparison 9.63815 sec, and warnIfPerfScore > 1.1, and perfScore=0.977323]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.20447 secs, and comparison 3.64076 sec, and warnIfPerfScore > 0.55, and perfScore=0.586797]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.1456 secs, and comparison 37.4899 sec, and warnIfPerfScore > 4.9, and perfScore=3.69519]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.3707 secs, and comparison 4.91119 sec, and warnIfPerfScore > 0.85, and perfScore=0.770903]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.3842 secs, and comparison 3.51005 sec, and warnIfPerfScore > 0.6, and perfScore=0.549803]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.38607 secs, and comparison 3.62915 sec, and warnIfPerfScore > 0.6, and perfScore=0.568292]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.33065 secs, and comparison 4.8299 sec, and warnIfPerfScore > 1, and perfScore=0.762939]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.86282 secs, and comparison 8.82514 sec, and warnIfPerfScore > 1.3, and perfScore=1.28594]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 49.8163 secs, and comparison 6.06253 sec, and warnIfPerfScore > 0.21, and perfScore=0.121698]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.93877 secs, and comparison 20.1319 sec, and warnIfPerfScore > 1.8, and perfScore=2.53589]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.57409 secs, and comparison 6.83846 sec, and warnIfPerfScore > 1, and perfScore=0.902876]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.0256 secs, and comparison 7.2153 sec, and warnIfPerfScore > 0.85, and perfScore=0.654416]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.83641 sec, and warnIfPerfScore > 0.5, and perfScore=0.389094]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.98351 sec, and warnIfPerfScore > 0.5, and perfScore=0.198901]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.280799 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.87541 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			15.0612 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.168454 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.6696 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.57424 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0382929 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.502205 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.7131 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.194628 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.814 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.96523 seconds

[[[Tests took: 18 minutes, 37 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1116728 ms)
[----------] 1 test from Stroika_Performance_Tests (1116728 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1116728 ms total)
[  PASSED  ] 1 test.
