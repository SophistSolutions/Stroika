[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 28 19:19:46 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 6.14841 secs, and comparison 5.03043 sec, and warnIfPerfScore > 0.9, and perfScore=0.818167]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.20748 secs, and comparison 3.07177 sec, and warnIfPerfScore > 0.51, and perfScore=0.494849]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.11055 secs, and comparison 2.73408 sec, and warnIfPerfScore > 0.49, and perfScore=0.300101]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.54998 secs, and comparison 3.29627 sec, and warnIfPerfScore > 0.45, and perfScore=0.38553]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 7.59281 secs, and comparison 32.9477 sec, and warnIfPerfScore > 4.9, and perfScore=4.33933]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 7.85465 secs, and comparison 32.1297 sec, and warnIfPerfScore > 4.1, and perfScore=4.09054]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	66
	DETAILS:         	[baseline test 6.69489 secs, and comparison 439.123 sec, and warnIfPerfScore > 78, and perfScore=65.5908]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.61772 secs, and comparison 8.87362 sec, and warnIfPerfScore > 2.1, and perfScore=1.34089]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.21672 secs, and comparison 7.98656 sec, and warnIfPerfScore > 1.4, and perfScore=1.28469]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 6.4371 secs, and comparison 8.9068 sec, and warnIfPerfScore > 1.7, and perfScore=1.38367]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.33866 secs, and comparison 9.93535 sec, and warnIfPerfScore > 1.2, and perfScore=1.35384]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.35384}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.84818 secs, and comparison 3.82405 sec, and warnIfPerfScore > 0.48, and perfScore=0.487253]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.48 and got 0.487253}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.9686 secs, and comparison 15.4865 sec, and warnIfPerfScore > 1.3, and perfScore=1.10867]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.51068 secs, and comparison 5.88797 sec, and warnIfPerfScore > 0.75, and perfScore=0.619091]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.74643 secs, and comparison 1.97371 sec, and warnIfPerfScore > 0.33, and perfScore=0.225659]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.16208 secs, and comparison 44.5417 sec, and warnIfPerfScore > 5.1, and perfScore=4.86152]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.08697 secs, and comparison 5.69146 sec, and warnIfPerfScore > 0.7, and perfScore=0.626332]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 9.11193 secs, and comparison 8.50632 sec, and warnIfPerfScore > 1.1, and perfScore=0.933536]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.85827 secs, and comparison 3.94512 sec, and warnIfPerfScore > 0.55, and perfScore=0.44536]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 9.55701 secs, and comparison 46.0892 sec, and warnIfPerfScore > 4.9, and perfScore=4.82256]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 8.71541 secs, and comparison 6.19366 sec, and warnIfPerfScore > 0.85, and perfScore=0.710657]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.70277 secs, and comparison 3.81315 sec, and warnIfPerfScore > 0.6, and perfScore=0.438153]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.60524 secs, and comparison 3.76234 sec, and warnIfPerfScore > 0.6, and perfScore=0.437215]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.57214 secs, and comparison 6.4078 sec, and warnIfPerfScore > 1, and perfScore=0.747514]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.39304 secs, and comparison 9.46073 sec, and warnIfPerfScore > 1.3, and perfScore=1.00721]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.097 secs, and comparison 5.73376 sec, and warnIfPerfScore > 0.21, and perfScore=0.130026]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.42456 secs, and comparison 19.8837 sec, and warnIfPerfScore > 1.8, and perfScore=3.09496]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.09496}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.86745 secs, and comparison 6.49751 sec, and warnIfPerfScore > 1, and perfScore=0.946132]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.08434 secs, and comparison 7.25845 sec, and warnIfPerfScore > 0.85, and perfScore=0.799007]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.84621 sec, and warnIfPerfScore > 0.5, and perfScore=0.323081]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.16034 sec, and warnIfPerfScore > 0.5, and perfScore=0.210689]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.323035 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.2591 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.1866 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.211567 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.75315 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.7383 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0618393 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.585639 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.85498 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.221496 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.1657 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.1883 seconds

[[[Tests took: 18 minutes, 18 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1098067 ms)
[----------] 1 test from Stroika_Performance_Tests (1098067 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1098067 ms total)
[  PASSED  ] 1 test.
