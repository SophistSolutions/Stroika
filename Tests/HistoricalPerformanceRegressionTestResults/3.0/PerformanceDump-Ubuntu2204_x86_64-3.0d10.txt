[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Sep 23 21:4: 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 3.6537 secs, and comparison 2.17615 sec, and warnIfPerfScore > 0.9, and perfScore=0.595602]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 3.63095 secs, and comparison 3.03903 sec, and warnIfPerfScore > 0.51, and perfScore=0.836981]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.8735 secs, and comparison 0.937132 sec, and warnIfPerfScore > 0.49, and perfScore=0.241934]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 4.74552 secs, and comparison 1.35539 sec, and warnIfPerfScore > 0.45, and perfScore=0.285615]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 3.28085 secs, and comparison 20.7994 sec, and warnIfPerfScore > 4.9, and perfScore=6.33962]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 3.59382 secs, and comparison 22.3203 sec, and warnIfPerfScore > 4.1, and perfScore=6.21074]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	49
	DETAILS:         	[baseline test 5.35455 secs, and comparison 262.077 sec, and warnIfPerfScore > 78, and perfScore=48.9448]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.13099 secs, and comparison 5.3919 sec, and warnIfPerfScore > 2.1, and perfScore=1.05085]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.45154 secs, and comparison 8.76743 sec, and warnIfPerfScore > 1.4, and perfScore=1.17659]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.93533 secs, and comparison 6.9054 sec, and warnIfPerfScore > 1.7, and perfScore=2.35251]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.00172 secs, and comparison 5.39163 sec, and warnIfPerfScore > 1.2, and perfScore=1.34733]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.19839 secs, and comparison 3.75991 sec, and warnIfPerfScore > 0.48, and perfScore=0.89556]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.63226 secs, and comparison 4.59737 sec, and warnIfPerfScore > 1.3, and perfScore=1.74655]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.19078 secs, and comparison 7.18662 sec, and warnIfPerfScore > 0.75, and perfScore=2.25231]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 19.5719 secs, and comparison 1.34069 sec, and warnIfPerfScore > 0.33, and perfScore=0.0685007]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.06115 secs, and comparison 39.8131 sec, and warnIfPerfScore > 5.1, and perfScore=13.006]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.05586 secs, and comparison 6.43048 sec, and warnIfPerfScore > 0.7, and perfScore=2.10431]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.04958 secs, and comparison 8.51019 sec, and warnIfPerfScore > 1.1, and perfScore=2.79061]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 19.5835 secs, and comparison 3.52741 sec, and warnIfPerfScore > 0.55, and perfScore=0.180121]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 4.8127 secs, and comparison 44.0928 sec, and warnIfPerfScore > 4.9, and perfScore=9.16175]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.3646 secs, and comparison 4.58669 sec, and warnIfPerfScore > 0.85, and perfScore=0.370953]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.2674 secs, and comparison 3.55409 sec, and warnIfPerfScore > 0.6, and perfScore=0.249105]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.2236 secs, and comparison 3.5253 sec, and warnIfPerfScore > 0.6, and perfScore=0.247849]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.264 secs, and comparison 4.4791 sec, and warnIfPerfScore > 1, and perfScore=0.314013]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 18.5797 secs, and comparison 9.92266 sec, and warnIfPerfScore > 1.3, and perfScore=0.534058]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.4602 secs, and comparison 5.70084 sec, and warnIfPerfScore > 0.21, and perfScore=0.292949]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.60303 secs, and comparison 10.5363 sec, and warnIfPerfScore > 1.8, and perfScore=1.3858]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.90929 secs, and comparison 5.17729 sec, and warnIfPerfScore > 1, and perfScore=0.749323]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.46736 secs, and comparison 4.30846 sec, and warnIfPerfScore > 0.85, and perfScore=0.96443]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.21502 sec, and warnIfPerfScore > 0.5, and perfScore=0.347668]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.11932 sec, and warnIfPerfScore > 0.5, and perfScore=0.0746213]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.166825 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.71861 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			10.0517 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0924229 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.75382 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.57947 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0323053 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.482835 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.75332 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.127032 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.23719 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.76681 seconds

[[[Tests took: 12 minutes, 58 seconds]]]

[       OK ] Stroika_Performance_Tests.all (777202 ms)
[----------] 1 test from Stroika_Performance_Tests (777202 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (777203 ms total)
[  PASSED  ] 1 test.
