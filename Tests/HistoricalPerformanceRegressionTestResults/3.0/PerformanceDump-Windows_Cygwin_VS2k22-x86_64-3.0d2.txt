Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 22 6:13:25 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.07084 secs, and comparison 4.04966 sec, and warnIfPerfScore > 0.86, and perfScore=0.798616]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.14445 secs, and comparison 2.38335 sec, and warnIfPerfScore > 0.51, and perfScore=0.463286]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.44663 secs, and comparison 2.18597 sec, and warnIfPerfScore > 0.39, and perfScore=0.231402]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.14312 secs, and comparison 2.66522 sec, and warnIfPerfScore > 0.39, and perfScore=0.2915]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 6.40869 secs, and comparison 26.6835 sec, and warnIfPerfScore > 4.8, and perfScore=4.16364]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.82478 secs, and comparison 24.8769 sec, and warnIfPerfScore > 4, and perfScore=3.64508]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	68
	DETAILS:         	[baseline test 5.817 secs, and comparison 395.758 sec, and warnIfPerfScore > 78, and perfScore=68.0348]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.87156 secs, and comparison 6.37418 sec, and warnIfPerfScore > 2.1, and perfScore=1.0856]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.67641 secs, and comparison 7.17107 sec, and warnIfPerfScore > 1.4, and perfScore=1.26331]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.27439 secs, and comparison 7.18753 sec, and warnIfPerfScore > 1.6, and perfScore=1.36272]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.6149 secs, and comparison 7.58991 sec, and warnIfPerfScore > 1.2, and perfScore=0.653463]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.1924 secs, and comparison 2.93652 sec, and warnIfPerfScore > 0.48, and perfScore=0.240849]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1867 secs, and comparison 13.3765 sec, and warnIfPerfScore > 1.3, and perfScore=1.19575]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.2396 secs, and comparison 5.29734 sec, and warnIfPerfScore > 0.75, and perfScore=0.47131]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.54232 secs, and comparison 1.82203 sec, and warnIfPerfScore > 0.33, and perfScore=0.241574]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.6335 secs, and comparison 36.5943 sec, and warnIfPerfScore > 5.1, and perfScore=3.44141]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.6054 secs, and comparison 4.98557 sec, and warnIfPerfScore > 0.7, and perfScore=0.470096]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.5673 secs, and comparison 7.37197 sec, and warnIfPerfScore > 1.1, and perfScore=0.697623]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.50421 secs, and comparison 3.25545 sec, and warnIfPerfScore > 0.55, and perfScore=0.433816]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.966 secs, and comparison 37.3136 sec, and warnIfPerfScore > 4.7, and perfScore=3.40268]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.54517 secs, and comparison 5.10785 sec, and warnIfPerfScore > 0.79, and perfScore=0.676969]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.51888 secs, and comparison 3.43893 sec, and warnIfPerfScore > 0.6, and perfScore=0.457372]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.50827 secs, and comparison 3.15243 sec, and warnIfPerfScore > 0.6, and perfScore=0.419861]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.57954 secs, and comparison 5.14269 sec, and warnIfPerfScore > 1, and perfScore=0.678496]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.77814 secs, and comparison 10.6575 sec, and warnIfPerfScore > 1.3, and perfScore=1.21409]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 38.3925 secs, and comparison 5.93385 sec, and warnIfPerfScore > 0.21, and perfScore=0.154557]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.63216 secs, and comparison 9.20607 sec, and warnIfPerfScore > 1.8, and perfScore=1.63455]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.83986 secs, and comparison 5.23149 sec, and warnIfPerfScore > 0.99, and perfScore=0.895824]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 7.8604 secs, and comparison 5.7531 sec, and warnIfPerfScore > 0.85, and perfScore=0.73191]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.95632 sec, and warnIfPerfScore > 0.5, and perfScore=0.330421]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.21854 sec, and warnIfPerfScore > 0.5, and perfScore=0.147903]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.255152 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.58427 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.2281 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.122323 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.45402 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.67239 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0324037 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.432078 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.45991 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.122186 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.40724 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.63101 seconds

[[[Tests took: 16 minutes, 11 seconds]]]

Succeeded
