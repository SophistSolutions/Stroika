[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jul 11 :25:27 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.70812 secs, and comparison 4.72365 sec, and warnIfPerfScore > 0.9, and perfScore=0.827531]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.70615 secs, and comparison 2.9476 sec, and warnIfPerfScore > 0.51, and perfScore=0.439537]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.09367 secs, and comparison 2.71951 sec, and warnIfPerfScore > 0.49, and perfScore=0.336005]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.0539 secs, and comparison 3.46679 sec, and warnIfPerfScore > 0.45, and perfScore=0.344819]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 11.0663 secs, and comparison 37.9834 sec, and warnIfPerfScore > 4.9, and perfScore=3.43235]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 10.3314 secs, and comparison 35.8768 sec, and warnIfPerfScore > 4.1, and perfScore=3.4726]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	62
	DETAILS:         	[baseline test 8.27728 secs, and comparison 510.865 sec, and warnIfPerfScore > 78, and perfScore=61.7189]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.1974 secs, and comparison 8.49073 sec, and warnIfPerfScore > 2.1, and perfScore=0.832633]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.01603 secs, and comparison 10.2944 sec, and warnIfPerfScore > 1.4, and perfScore=1.14179]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.51277 secs, and comparison 8.75512 sec, and warnIfPerfScore > 1.7, and perfScore=1.02847]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.42772 secs, and comparison 10.0049 sec, and warnIfPerfScore > 1.2, and perfScore=1.06123]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.67903 secs, and comparison 4.91625 sec, and warnIfPerfScore > 0.48, and perfScore=0.507928]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.48 and got 0.507928}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.4389 secs, and comparison 17.4006 sec, and warnIfPerfScore > 1.3, and perfScore=1.12707]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.2142 secs, and comparison 7.84538 sec, and warnIfPerfScore > 0.75, and perfScore=0.699596]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.92151 secs, and comparison 2.78358 sec, and warnIfPerfScore > 0.33, and perfScore=0.28056]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.7997 secs, and comparison 43.4356 sec, and warnIfPerfScore > 5.1, and perfScore=4.02194]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.8116 secs, and comparison 6.85386 sec, and warnIfPerfScore > 0.7, and perfScore=0.633936]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.47626 secs, and comparison 9.14001 sec, and warnIfPerfScore > 1.1, and perfScore=0.964517]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.56562 secs, and comparison 3.69277 sec, and warnIfPerfScore > 0.55, and perfScore=0.386046]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.8749 secs, and comparison 48.0592 sec, and warnIfPerfScore > 4.9, and perfScore=4.41926]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.575 secs, and comparison 7.58401 sec, and warnIfPerfScore > 0.85, and perfScore=0.717162]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.44351 secs, and comparison 3.69027 sec, and warnIfPerfScore > 0.6, and perfScore=0.390773]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.1786 secs, and comparison 3.76119 sec, and warnIfPerfScore > 0.6, and perfScore=0.36952]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.1331 secs, and comparison 6.9538 sec, and warnIfPerfScore > 1, and perfScore=0.686249]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.5637 secs, and comparison 10.589 sec, and warnIfPerfScore > 1.3, and perfScore=1.0024]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 56.4528 secs, and comparison 7.39414 sec, and warnIfPerfScore > 0.21, and perfScore=0.130979]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.34528 secs, and comparison 27.9834 sec, and warnIfPerfScore > 1.8, and perfScore=3.3532]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.3532}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.36323 secs, and comparison 7.76571 sec, and warnIfPerfScore > 1, and perfScore=0.829383]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.2476 secs, and comparison 7.58565 sec, and warnIfPerfScore > 0.85, and perfScore=0.619357]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.74896 sec, and warnIfPerfScore > 0.5, and perfScore=0.383264]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.07267 sec, and warnIfPerfScore > 0.5, and perfScore=0.204845]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.307047 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.21014 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.4486 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.144973 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.92502 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.989 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0450365 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.59869 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.66658 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.14878 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.23288 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.8325 seconds

[[[Tests took: 20 minutes, 58 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1257859 ms)
[----------] 1 test from Stroika_Performance_Tests (1257859 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1257859 ms total)
[  PASSED  ] 1 test.
