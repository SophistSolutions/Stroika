[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jul 29 20:47:47 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.86362 secs, and comparison 4.75862 sec, and warnIfPerfScore > 0.9, and perfScore=0.81155]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.7515 secs, and comparison 3.14252 sec, and warnIfPerfScore > 0.51, and perfScore=0.546383]
	                 	SpinLock is FASTER
	                 	{{{WARNING - expected performance score less than 0.51 and got 0.546383}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.45838 secs, and comparison 2.56305 sec, and warnIfPerfScore > 0.49, and perfScore=0.396857]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.46419 secs, and comparison 3.1428 sec, and warnIfPerfScore > 0.45, and perfScore=0.486186]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.486186}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 6.86663 secs, and comparison 30.3412 sec, and warnIfPerfScore > 4.9, and perfScore=4.41864]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 7.29138 secs, and comparison 29.6462 sec, and warnIfPerfScore > 4.1, and perfScore=4.06593]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	70
	DETAILS:         	[baseline test 6.05246 secs, and comparison 422.302 sec, and warnIfPerfScore > 78, and perfScore=69.7737]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.95982 secs, and comparison 7.84399 sec, and warnIfPerfScore > 2.1, and perfScore=1.31615]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.78307 secs, and comparison 7.35418 sec, and warnIfPerfScore > 1.4, and perfScore=1.27167]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.7281 secs, and comparison 8.25314 sec, and warnIfPerfScore > 1.7, and perfScore=1.44082]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 6.90979 secs, and comparison 9.54221 sec, and warnIfPerfScore > 1.2, and perfScore=1.38097]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.38097}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.11682 secs, and comparison 3.57067 sec, and warnIfPerfScore > 0.48, and perfScore=0.501723]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.48 and got 0.501723}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0586 secs, and comparison 14.4106 sec, and warnIfPerfScore > 1.3, and perfScore=1.10353]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.75147 secs, and comparison 5.3192 sec, and warnIfPerfScore > 0.75, and perfScore=0.607807]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.99781 secs, and comparison 1.82917 sec, and warnIfPerfScore > 0.33, and perfScore=0.228709]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 8.46939 secs, and comparison 41.9613 sec, and warnIfPerfScore > 5.1, and perfScore=4.95446]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.42331 secs, and comparison 5.13803 sec, and warnIfPerfScore > 0.7, and perfScore=0.609977]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.4396 secs, and comparison 7.71169 sec, and warnIfPerfScore > 1.1, and perfScore=0.913751]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.01382 secs, and comparison 3.64272 sec, and warnIfPerfScore > 0.55, and perfScore=0.454555]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.95458 secs, and comparison 42.8189 sec, and warnIfPerfScore > 4.9, and perfScore=4.78179]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 7.89447 secs, and comparison 5.79602 sec, and warnIfPerfScore > 0.85, and perfScore=0.734187]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.86963 secs, and comparison 3.5647 sec, and warnIfPerfScore > 0.6, and perfScore=0.452969]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.99008 secs, and comparison 3.71614 sec, and warnIfPerfScore > 0.6, and perfScore=0.465094]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 7.96086 secs, and comparison 5.75485 sec, and warnIfPerfScore > 1, and perfScore=0.722894]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.50135 secs, and comparison 8.80725 sec, and warnIfPerfScore > 1.3, and perfScore=1.03598]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 40.3251 secs, and comparison 5.70226 sec, and warnIfPerfScore > 0.21, and perfScore=0.141407]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.0545 secs, and comparison 17.9947 sec, and warnIfPerfScore > 1.8, and perfScore=2.97212]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 2.97212}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 6.36602 secs, and comparison 5.83725 sec, and warnIfPerfScore > 1, and perfScore=0.916939]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 8.44082 secs, and comparison 6.80223 sec, and warnIfPerfScore > 0.85, and perfScore=0.805873]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.54328 sec, and warnIfPerfScore > 0.5, and perfScore=0.302886]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.24623 sec, and warnIfPerfScore > 0.5, and perfScore=0.216415]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.28553 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.87907 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.9311 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.155453 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.60824 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.84881 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0346716 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.490638 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.6252 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.17245 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.91181 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.308 seconds

[[[Tests took: 17 minutes, 3 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1022149 ms)
[----------] 1 test from Stroika_Performance_Tests (1022149 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1022149 ms total)
[  PASSED  ] 1 test.
