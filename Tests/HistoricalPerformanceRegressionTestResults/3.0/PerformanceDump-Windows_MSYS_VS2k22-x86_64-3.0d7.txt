[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jul  9 20:26:19 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.92346 secs, and comparison 5.52672 sec, and warnIfPerfScore > 0.9, and perfScore=0.798259]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.97959 secs, and comparison 3.26281 sec, and warnIfPerfScore > 0.51, and perfScore=0.545658]
	                 	SpinLock is FASTER
	                 	{{{WARNING - expected performance score less than 0.51 and got 0.545658}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.18778 secs, and comparison 2.7271 sec, and warnIfPerfScore > 0.49, and perfScore=0.296818]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.44086 secs, and comparison 3.10502 sec, and warnIfPerfScore > 0.45, and perfScore=0.367856]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 40.2876 secs, and comparison 34.0728 sec, and warnIfPerfScore > 4.9, and perfScore=0.845739]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 7.9657 secs, and comparison 37.0676 sec, and warnIfPerfScore > 4.1, and perfScore=4.65341]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.1 and got 4.65341}}}

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	64
	DETAILS:         	[baseline test 7.72097 secs, and comparison 494.375 sec, and warnIfPerfScore > 78, and perfScore=64.0301]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.90582 secs, and comparison 8.49921 sec, and warnIfPerfScore > 2.1, and perfScore=1.23073]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.19229 secs, and comparison 10.1882 sec, and warnIfPerfScore > 1.4, and perfScore=1.41654]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.41654}}}

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.3964 secs, and comparison 10.4356 sec, and warnIfPerfScore > 1.7, and perfScore=1.4109]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.38404 secs, and comparison 9.42225 sec, and warnIfPerfScore > 1.2, and perfScore=1.12383]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.24786 secs, and comparison 3.35645 sec, and warnIfPerfScore > 0.48, and perfScore=0.463096]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.9046 secs, and comparison 16.967 sec, and warnIfPerfScore > 1.3, and perfScore=1.0668]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 14.3192 secs, and comparison 6.99395 sec, and warnIfPerfScore > 0.75, and perfScore=0.488431]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.31628 secs, and comparison 1.81946 sec, and warnIfPerfScore > 0.33, and perfScore=0.195299]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.8044 secs, and comparison 42.8522 sec, and warnIfPerfScore > 5.1, and perfScore=3.63017]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.9004 secs, and comparison 5.60768 sec, and warnIfPerfScore > 0.7, and perfScore=0.434689]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.5698 secs, and comparison 9.50042 sec, and warnIfPerfScore > 1.1, and perfScore=0.821138]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.02764 secs, and comparison 3.67682 sec, and warnIfPerfScore > 0.55, and perfScore=0.458021]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 12.8838 secs, and comparison 50.2914 sec, and warnIfPerfScore > 4.9, and perfScore=3.90345]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 11.1202 secs, and comparison 9.7238 sec, and warnIfPerfScore > 0.85, and perfScore=0.874426]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.85 and got 0.874426}}}

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.5203 secs, and comparison 4.8075 sec, and warnIfPerfScore > 0.6, and perfScore=0.383977]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.1023 secs, and comparison 4.27867 sec, and warnIfPerfScore > 0.6, and perfScore=0.385388]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.4939 secs, and comparison 8.01522 sec, and warnIfPerfScore > 1, and perfScore=0.697343]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2302 secs, and comparison 13.2606 sec, and warnIfPerfScore > 1.3, and perfScore=1.08426]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 56.2551 secs, and comparison 6.3799 sec, and warnIfPerfScore > 0.21, and perfScore=0.11341]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 49.3157 secs, and comparison 64.8033 sec, and warnIfPerfScore > 1.8, and perfScore=1.31405]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.10631 secs, and comparison 6.24547 sec, and warnIfPerfScore > 1, and perfScore=0.878862]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.8548 secs, and comparison 7.68901 sec, and warnIfPerfScore > 0.85, and perfScore=0.648601]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.4374 sec, and warnIfPerfScore > 0.5, and perfScore=0.362493]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.2719 sec, and warnIfPerfScore > 0.5, and perfScore=0.218127]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.345065 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.95199 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			17.5638 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.135189 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.71065 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.67987 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0383103 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.500721 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.68334 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.15452 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.86929 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.3672 seconds

[[[Tests took: 22 minutes, 34 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1354551 ms)
[----------] 1 test from Stroika_Performance_Tests (1354551 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1354551 ms total)
[  PASSED  ] 1 test.
