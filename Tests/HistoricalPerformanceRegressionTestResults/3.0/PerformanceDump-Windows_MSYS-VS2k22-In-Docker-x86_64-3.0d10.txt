[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Sep 23 2:58:35 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.28972 secs, and comparison 4.2809 sec, and warnIfPerfScore > 0.9, and perfScore=0.809286]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.25179 secs, and comparison 2.65798 sec, and warnIfPerfScore > 0.51, and perfScore=0.506109]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 7.36509 secs, and comparison 2.30876 sec, and warnIfPerfScore > 0.49, and perfScore=0.313474]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.26943 secs, and comparison 2.82992 sec, and warnIfPerfScore > 0.45, and perfScore=0.389291]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 35.4306 secs, and comparison 27.7402 sec, and warnIfPerfScore > 4.9, and perfScore=0.782945]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 39.4819 secs, and comparison 26.2819 sec, and warnIfPerfScore > 4.1, and perfScore=0.66567]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 15.3553 secs, and comparison 399.099 sec, and warnIfPerfScore > 78, and perfScore=25.9909]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.2604 secs, and comparison 6.91191 sec, and warnIfPerfScore > 2.1, and perfScore=0.613827]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.42607 secs, and comparison 6.94438 sec, and warnIfPerfScore > 1.4, and perfScore=1.27982]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.39445 secs, and comparison 7.52657 sec, and warnIfPerfScore > 1.7, and perfScore=1.39524]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.52076 secs, and comparison 8.31485 sec, and warnIfPerfScore > 1.2, and perfScore=1.27514]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.27514}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.85179 secs, and comparison 3.01575 sec, and warnIfPerfScore > 0.48, and perfScore=0.440141]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.5504 secs, and comparison 13.3569 sec, and warnIfPerfScore > 1.3, and perfScore=1.1564]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.06687 secs, and comparison 5.27345 sec, and warnIfPerfScore > 0.75, and perfScore=0.653717]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.13786 secs, and comparison 1.6931 sec, and warnIfPerfScore > 0.33, and perfScore=0.2372]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.75629 secs, and comparison 38.2152 sec, and warnIfPerfScore > 5.1, and perfScore=4.92699]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.79415 secs, and comparison 5.05917 sec, and warnIfPerfScore > 0.7, and perfScore=0.649098]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.76008 secs, and comparison 7.0734 sec, and warnIfPerfScore > 1.1, and perfScore=0.911511]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.07153 secs, and comparison 3.34412 sec, and warnIfPerfScore > 0.55, and perfScore=0.472899]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.31544 secs, and comparison 39.033 sec, and warnIfPerfScore > 4.9, and perfScore=4.69404]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.20312 secs, and comparison 5.60283 sec, and warnIfPerfScore > 0.85, and perfScore=0.777834]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.23697 secs, and comparison 3.26703 sec, and warnIfPerfScore > 0.6, and perfScore=0.451436]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.21402 secs, and comparison 3.34515 sec, and warnIfPerfScore > 0.6, and perfScore=0.463701]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 7.21968 secs, and comparison 5.58334 sec, and warnIfPerfScore > 1, and perfScore=0.773351]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.72095 secs, and comparison 8.62958 sec, and warnIfPerfScore > 1.3, and perfScore=1.11768]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 40.6935 secs, and comparison 5.4504 sec, and warnIfPerfScore > 0.21, and perfScore=0.133938]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 5.78703 secs, and comparison 17.1394 sec, and warnIfPerfScore > 1.8, and perfScore=2.96169]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 2.96169}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.95372 secs, and comparison 5.41792 sec, and warnIfPerfScore > 1, and perfScore=0.910006]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 7.99504 secs, and comparison 6.01573 sec, and warnIfPerfScore > 0.85, and perfScore=0.752433]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.61759 sec, and warnIfPerfScore > 0.5, and perfScore=0.241172]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74807 sec, and warnIfPerfScore > 0.5, and perfScore=0.183205]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.257055 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.63979 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.4519 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.114397 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.50977 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.66674 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0348911 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.445855 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.51545 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.142497 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.85418 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.4006 seconds

[[[Tests took: 17 minutes, 30 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1049355 ms)
[----------] 1 test from Stroika_Performance_Tests (1049355 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1049355 ms total)
[  PASSED  ] 1 test.
