Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 13 21:53:58 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.54118 secs, and comparison 4.43549 sec, and warnIfPerfScore > 0.86, and perfScore=0.800459]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.08497 secs, and comparison 2.51517 sec, and warnIfPerfScore > 0.51, and perfScore=0.413341]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.1125 secs, and comparison 2.41577 sec, and warnIfPerfScore > 0.39, and perfScore=0.339651]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.61315 secs, and comparison 2.96229 sec, and warnIfPerfScore > 0.39, and perfScore=0.447939]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.39 and got 0.447939}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 7.59416 secs, and comparison 28.7511 sec, and warnIfPerfScore > 4.8, and perfScore=3.78594]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.28655 secs, and comparison 26.8261 sec, and warnIfPerfScore > 4.1, and perfScore=3.23731]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	61
	DETAILS:         	[baseline test 6.41946 secs, and comparison 390.345 sec, and warnIfPerfScore > 78, and perfScore=60.8065]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.15321 secs, and comparison 6.64838 sec, and warnIfPerfScore > 2.1, and perfScore=1.08047]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.54257 secs, and comparison 7.51573 sec, and warnIfPerfScore > 1.4, and perfScore=1.356]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.63762 secs, and comparison 7.54643 sec, and warnIfPerfScore > 1.7, and perfScore=1.33859]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.76199 secs, and comparison 7.8297 sec, and warnIfPerfScore > 1.2, and perfScore=1.1579]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.22842 secs, and comparison 2.96637 sec, and warnIfPerfScore > 0.48, and perfScore=0.410376]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.2041 secs, and comparison 14.2232 sec, and warnIfPerfScore > 1.3, and perfScore=1.16544]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.78509 secs, and comparison 5.1818 sec, and warnIfPerfScore > 0.75, and perfScore=0.589841]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.62887 secs, and comparison 1.92441 sec, and warnIfPerfScore > 0.33, and perfScore=0.252254]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.09065 secs, and comparison 39.2618 sec, and warnIfPerfScore > 5.1, and perfScore=4.85274]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.36832 secs, and comparison 4.8485 sec, and warnIfPerfScore > 0.7, and perfScore=0.579388]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.1243 secs, and comparison 7.54953 sec, and warnIfPerfScore > 1.1, and perfScore=0.929253]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.47022 secs, and comparison 3.47708 sec, and warnIfPerfScore > 0.55, and perfScore=0.465459]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.55661 secs, and comparison 39.9486 sec, and warnIfPerfScore > 4.7, and perfScore=4.66874]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 7.46929 secs, and comparison 5.13067 sec, and warnIfPerfScore > 0.79, and perfScore=0.686902]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.58682 secs, and comparison 3.72004 sec, and warnIfPerfScore > 0.6, and perfScore=0.49033]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.6651 secs, and comparison 3.4796 sec, and warnIfPerfScore > 0.6, and perfScore=0.453954]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.39834 secs, and comparison 5.16994 sec, and warnIfPerfScore > 1, and perfScore=0.698797]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.01041 secs, and comparison 8.50762 sec, and warnIfPerfScore > 1.3, and perfScore=1.06207]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 38.77 secs, and comparison 6.54388 sec, and warnIfPerfScore > 0.21, and perfScore=0.168787]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.93049 secs, and comparison 9.58958 sec, and warnIfPerfScore > 1.8, and perfScore=1.617]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.15714 secs, and comparison 5.96467 sec, and warnIfPerfScore > 1, and perfScore=0.96874]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 8.17098 secs, and comparison 6.52812 sec, and warnIfPerfScore > 0.85, and perfScore=0.798939]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.79271 sec, and warnIfPerfScore > 0.5, and perfScore=0.319514]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.41123 sec, and warnIfPerfScore > 0.5, and perfScore=0.160749]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.273939 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.13352 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.6658 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.162752 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.98358 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.1196 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.032196 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.491861 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.6765 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.212915 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.3272 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.2809 seconds

[[[Tests took: 16 minutes, 8 seconds]]]

Succeeded
