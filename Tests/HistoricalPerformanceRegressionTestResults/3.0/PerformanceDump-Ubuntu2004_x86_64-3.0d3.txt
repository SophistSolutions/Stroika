Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 30 11:39:14 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 7.04566 secs, and comparison 5.28987 sec, and warnIfPerfScore > 0.86, and perfScore=0.750798]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.39623 secs, and comparison 3.49734 sec, and warnIfPerfScore > 0.51, and perfScore=0.472855]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.25 secs, and comparison 2.86237 sec, and warnIfPerfScore > 0.39, and perfScore=0.394809]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.64031 secs, and comparison 3.73528 sec, and warnIfPerfScore > 0.39, and perfScore=0.432308]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 5.86858 secs, and comparison 36.1695 sec, and warnIfPerfScore > 4.8, and perfScore=6.16325]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 6.90607 secs, and comparison 36.7523 sec, and warnIfPerfScore > 4, and perfScore=5.32174]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	27
	DETAILS:         	[baseline test 9.73127 secs, and comparison 264.754 sec, and warnIfPerfScore > 78, and perfScore=27.2065]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.99675 secs, and comparison 6.51912 sec, and warnIfPerfScore > 2.1, and perfScore=1.30467]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.59454 secs, and comparison 8.3976 sec, and warnIfPerfScore > 1.4, and perfScore=1.27342]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.84442 secs, and comparison 7.87661 sec, and warnIfPerfScore > 1.6, and perfScore=2.76915]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.27781 secs, and comparison 5.17918 sec, and warnIfPerfScore > 1.2, and perfScore=1.21071]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.50219 secs, and comparison 4.48659 sec, and warnIfPerfScore > 0.48, and perfScore=0.996534]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 4.49277 secs, and comparison 6.12586 sec, and warnIfPerfScore > 1.3, and perfScore=1.36349]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.95955 secs, and comparison 8.09656 sec, and warnIfPerfScore > 0.75, and perfScore=2.73574]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 19.8346 secs, and comparison 1.65196 sec, and warnIfPerfScore > 0.33, and perfScore=0.0832867]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.85585 secs, and comparison 39.89 sec, and warnIfPerfScore > 5.1, and perfScore=13.9678]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.86549 secs, and comparison 8.0549 sec, and warnIfPerfScore > 0.7, and perfScore=2.811]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.92474 secs, and comparison 9.34238 sec, and warnIfPerfScore > 1.1, and perfScore=3.19426]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.9649 secs, and comparison 3.71044 sec, and warnIfPerfScore > 0.55, and perfScore=0.185848]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.47609 secs, and comparison 45.3044 sec, and warnIfPerfScore > 4.7, and perfScore=10.1214]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 13.4519 secs, and comparison 3.9647 sec, and warnIfPerfScore > 0.79, and perfScore=0.294732]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.6771 secs, and comparison 3.58487 sec, and warnIfPerfScore > 0.6, and perfScore=0.244249]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.7086 secs, and comparison 3.60149 sec, and warnIfPerfScore > 0.6, and perfScore=0.244855]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.6453 secs, and comparison 3.91794 sec, and warnIfPerfScore > 1, and perfScore=0.267522]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 20.8064 secs, and comparison 9.95539 sec, and warnIfPerfScore > 1.3, and perfScore=0.478477]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.2641 secs, and comparison 5.53699 sec, and warnIfPerfScore > 0.21, and perfScore=0.287425]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.56148 secs, and comparison 13.1849 sec, and warnIfPerfScore > 1.8, and perfScore=1.7437]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 6.60422 secs, and comparison 5.74318 sec, and warnIfPerfScore > 0.99, and perfScore=0.869623]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 4.41268 secs, and comparison 6.35322 sec, and warnIfPerfScore > 0.85, and perfScore=1.43976]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15 secs, and comparison 6.02942 sec, and warnIfPerfScore > 0.5, and perfScore=0.401962]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.72482 sec, and warnIfPerfScore > 0.5, and perfScore=0.181655]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.25135 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.67584 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			13.3084 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.108767 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.9261 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.1075 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0309869 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.459135 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.67752 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.141645 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.33553 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.82703 seconds

[[[Tests took: 14 minutes, 45 seconds]]]

Succeeded
