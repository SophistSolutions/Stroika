[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jun 11 7:57:56 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.85171 secs, and comparison 4.29074 sec, and warnIfPerfScore > 0.9, and perfScore=0.884375]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.25154 secs, and comparison 2.51008 sec, and warnIfPerfScore > 0.51, and perfScore=0.47797]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.33266 secs, and comparison 2.39648 sec, and warnIfPerfScore > 0.49, and perfScore=0.378432]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.30736 secs, and comparison 2.85271 sec, and warnIfPerfScore > 0.45, and perfScore=0.452283]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.452283}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 6.83496 secs, and comparison 28.5607 sec, and warnIfPerfScore > 4.9, and perfScore=4.17862]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 7.44421 secs, and comparison 27.1902 sec, and warnIfPerfScore > 4.1, and perfScore=3.65253]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	69
	DETAILS:         	[baseline test 6.16029 secs, and comparison 424.397 sec, and warnIfPerfScore > 78, and perfScore=68.8924]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.91879 secs, and comparison 7.10065 sec, and warnIfPerfScore > 2.1, and perfScore=1.19968]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.3092 secs, and comparison 7.08612 sec, and warnIfPerfScore > 1.4, and perfScore=1.33469]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.35387 secs, and comparison 7.47333 sec, and warnIfPerfScore > 1.7, and perfScore=1.39587]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.4816 secs, and comparison 8.47744 sec, and warnIfPerfScore > 1.2, and perfScore=1.30792]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.30792}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.8041 secs, and comparison 3.0595 sec, and warnIfPerfScore > 0.48, and perfScore=0.449656]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1785 secs, and comparison 14.0247 sec, and warnIfPerfScore > 1.3, and perfScore=1.1516]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.41935 secs, and comparison 5.12852 sec, and warnIfPerfScore > 0.75, and perfScore=0.609135]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.27649 secs, and comparison 1.71858 sec, and warnIfPerfScore > 0.33, and perfScore=0.236183]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.09836 secs, and comparison 38.6945 sec, and warnIfPerfScore > 5.1, and perfScore=4.77806]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.04306 secs, and comparison 4.72193 sec, and warnIfPerfScore > 0.7, and perfScore=0.587082]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.20944 secs, and comparison 7.07732 sec, and warnIfPerfScore > 1.1, and perfScore=0.862096]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.18414 secs, and comparison 3.40012 sec, and warnIfPerfScore > 0.55, and perfScore=0.473281]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.57308 secs, and comparison 40.4289 sec, and warnIfPerfScore > 4.9, and perfScore=4.71579]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.20358 secs, and comparison 5.44524 sec, and warnIfPerfScore > 0.85, and perfScore=0.755907]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.22393 secs, and comparison 3.33058 sec, and warnIfPerfScore > 0.6, and perfScore=0.461049]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.21205 secs, and comparison 3.31249 sec, and warnIfPerfScore > 0.6, and perfScore=0.459299]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 7.2019 secs, and comparison 5.38021 sec, and warnIfPerfScore > 1, and perfScore=0.747054]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.58275 secs, and comparison 8.6504 sec, and warnIfPerfScore > 1.3, and perfScore=1.1408]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 38.0398 secs, and comparison 5.61406 sec, and warnIfPerfScore > 0.21, and perfScore=0.147584]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 5.63251 secs, and comparison 17.0354 sec, and warnIfPerfScore > 1.8, and perfScore=3.02448]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.02448}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 6.28452 secs, and comparison 5.4384 sec, and warnIfPerfScore > 1, and perfScore=0.865364]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.31366 secs, and comparison 6.04805 sec, and warnIfPerfScore > 0.85, and perfScore=0.727483]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.41598 sec, and warnIfPerfScore > 0.5, and perfScore=0.294399]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.97832 sec, and warnIfPerfScore > 0.5, and perfScore=0.198555]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.248951 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.7083 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.9628 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.13503 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.72718 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.4495 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0374491 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.486471 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.63633 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.211317 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.0687 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.7383 seconds

[[[Tests took: 16 minutes, 39 seconds]]]

[       OK ] Stroika_Performance_Tests.all (998138 ms)
[----------] 1 test from Stroika_Performance_Tests (998138 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (998138 ms total)
[  PASSED  ] 1 test.
