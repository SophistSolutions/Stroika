[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jun 13 12:34:40 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.55683 secs, and comparison 4.11868 sec, and warnIfPerfScore > 0.9, and perfScore=0.903847]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.9 and got 0.903847}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.03051 secs, and comparison 2.43932 sec, and warnIfPerfScore > 0.51, and perfScore=0.484905]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 5.88878 secs, and comparison 2.18753 sec, and warnIfPerfScore > 0.49, and perfScore=0.371473]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.96118 secs, and comparison 2.67115 sec, and warnIfPerfScore > 0.45, and perfScore=0.44809]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 6.35934 secs, and comparison 27.8346 sec, and warnIfPerfScore > 4.9, and perfScore=4.37696]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 7.33297 secs, and comparison 26.7497 sec, and warnIfPerfScore > 4.1, and perfScore=3.64787]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	69
	DETAILS:         	[baseline test 5.96523 secs, and comparison 412.746 sec, and warnIfPerfScore > 78, and perfScore=69.1919]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.89079 secs, and comparison 7.17719 sec, and warnIfPerfScore > 2.1, and perfScore=1.21837]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.36853 secs, and comparison 7.21018 sec, and warnIfPerfScore > 1.4, and perfScore=1.34305]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.30589 secs, and comparison 7.82697 sec, and warnIfPerfScore > 1.7, and perfScore=1.47515]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.50605 secs, and comparison 8.34352 sec, and warnIfPerfScore > 1.2, and perfScore=1.28242]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.28242}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.90619 secs, and comparison 3.06854 sec, and warnIfPerfScore > 0.48, and perfScore=0.444318]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4775 secs, and comparison 14.2934 sec, and warnIfPerfScore > 1.3, and perfScore=1.14553]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.52102 secs, and comparison 5.19985 sec, and warnIfPerfScore > 0.75, and perfScore=0.610238]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.07768 secs, and comparison 1.65421 sec, and warnIfPerfScore > 0.33, and perfScore=0.233722]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.16187 secs, and comparison 40.1362 sec, and warnIfPerfScore > 5.1, and perfScore=4.91752]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.34939 secs, and comparison 4.8085 sec, and warnIfPerfScore > 0.7, and perfScore=0.57591]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.31429 secs, and comparison 7.26536 sec, and warnIfPerfScore > 1.1, and perfScore=0.87384]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.42466 secs, and comparison 3.57001 sec, and warnIfPerfScore > 0.55, and perfScore=0.480831]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.79091 secs, and comparison 40.8126 sec, and warnIfPerfScore > 4.9, and perfScore=4.6426]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.21978 secs, and comparison 5.37377 sec, and warnIfPerfScore > 0.85, and perfScore=0.744312]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.00446 secs, and comparison 3.33131 sec, and warnIfPerfScore > 0.6, and perfScore=0.475598]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.14374 secs, and comparison 3.44573 sec, and warnIfPerfScore > 0.6, and perfScore=0.482343]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.19391 secs, and comparison 5.29265 sec, and warnIfPerfScore > 1, and perfScore=0.735713]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.6628 secs, and comparison 8.60689 sec, and warnIfPerfScore > 1.3, and perfScore=1.1232]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 38.124 secs, and comparison 5.73695 sec, and warnIfPerfScore > 0.21, and perfScore=0.150481]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 5.48074 secs, and comparison 17.3579 sec, and warnIfPerfScore > 1.8, and perfScore=3.16708]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.16708}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.17663 secs, and comparison 5.9843 sec, and warnIfPerfScore > 1, and perfScore=0.968862]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.15298 secs, and comparison 6.18572 sec, and warnIfPerfScore > 0.85, and perfScore=0.758706]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.50737 sec, and warnIfPerfScore > 0.5, and perfScore=0.300491]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.55733 sec, and warnIfPerfScore > 0.5, and perfScore=0.170489]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.284557 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.05623 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			15.838 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.146246 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.98488 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.2175 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0328698 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.518153 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.66684 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.179295 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.57475 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.3906 seconds

[[[Tests took: 16 minutes, 23 seconds]]]

[       OK ] Stroika_Performance_Tests.all (983188 ms)
[----------] 1 test from Stroika_Performance_Tests (983188 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (983188 ms total)
[  PASSED  ] 1 test.
