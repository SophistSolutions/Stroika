[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jul 10 13:31:23 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.32661 secs, and comparison 4.36808 sec, and warnIfPerfScore > 0.9, and perfScore=0.820049]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.37987 secs, and comparison 2.70513 sec, and warnIfPerfScore > 0.51, and perfScore=0.502823]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.95151 secs, and comparison 2.32652 sec, and warnIfPerfScore > 0.49, and perfScore=0.390912]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.01467 secs, and comparison 2.90704 sec, and warnIfPerfScore > 0.45, and perfScore=0.483324]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.483324}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 6.2671 secs, and comparison 28.39 sec, and warnIfPerfScore > 4.9, and perfScore=4.53001]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 6.84948 secs, and comparison 26.5499 sec, and warnIfPerfScore > 4.1, and perfScore=3.8762]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	70
	DETAILS:         	[baseline test 5.75075 secs, and comparison 403.61 sec, and warnIfPerfScore > 78, and perfScore=70.1839]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.44284 secs, and comparison 7.13799 sec, and warnIfPerfScore > 2.1, and perfScore=1.31144]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.26924 secs, and comparison 6.82047 sec, and warnIfPerfScore > 1.4, and perfScore=1.29439]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.3069 secs, and comparison 7.76171 sec, and warnIfPerfScore > 1.7, and perfScore=1.46257]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.39418 secs, and comparison 8.43801 sec, and warnIfPerfScore > 1.2, and perfScore=1.31964]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.31964}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.6526 secs, and comparison 2.96923 sec, and warnIfPerfScore > 0.48, and perfScore=0.446327]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.0588 secs, and comparison 13.308 sec, and warnIfPerfScore > 1.3, and perfScore=1.10358]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.27523 secs, and comparison 5.08052 sec, and warnIfPerfScore > 0.75, and perfScore=0.613943]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.37789 secs, and comparison 1.75607 sec, and warnIfPerfScore > 0.33, and perfScore=0.238018]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.05139 secs, and comparison 38.7906 sec, and warnIfPerfScore > 5.1, and perfScore=4.81788]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.03772 secs, and comparison 4.84474 sec, and warnIfPerfScore > 0.7, and perfScore=0.60275]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.0526 secs, and comparison 7.43055 sec, and warnIfPerfScore > 1.1, and perfScore=0.922751]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.40737 secs, and comparison 3.37709 sec, and warnIfPerfScore > 0.55, and perfScore=0.45591]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 8.38725 secs, and comparison 42.6155 sec, and warnIfPerfScore > 4.9, and perfScore=5.08099]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.9 and got 5.08099}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.39676 secs, and comparison 5.82748 sec, and warnIfPerfScore > 0.85, and perfScore=0.787842]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.38831 secs, and comparison 3.31871 sec, and warnIfPerfScore > 0.6, and perfScore=0.449184]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.34193 secs, and comparison 3.34382 sec, and warnIfPerfScore > 0.6, and perfScore=0.455442]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.40603 secs, and comparison 5.76309 sec, and warnIfPerfScore > 1, and perfScore=0.778162]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.79697 secs, and comparison 8.30574 sec, and warnIfPerfScore > 1.3, and perfScore=1.06525]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 37.4103 secs, and comparison 4.8584 sec, and warnIfPerfScore > 0.21, and perfScore=0.129868]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 5.58437 secs, and comparison 16.9432 sec, and warnIfPerfScore > 1.8, and perfScore=3.03403]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.03403}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.92424 secs, and comparison 5.34848 sec, and warnIfPerfScore > 1, and perfScore=0.902812]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.94365 secs, and comparison 6.07097 sec, and warnIfPerfScore > 0.85, and perfScore=0.764255]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.34116 sec, and warnIfPerfScore > 0.5, and perfScore=0.289411]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79649 sec, and warnIfPerfScore > 0.5, and perfScore=0.186433]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.230932 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.59336 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.7674 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.118861 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.64272 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.75328 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0385434 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.448899 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.53393 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.146116 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.90632 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.0818 seconds

[[[Tests took: 16 minutes, 3 seconds]]]

[       OK ] Stroika_Performance_Tests.all (963088 ms)
[----------] 1 test from Stroika_Performance_Tests (963088 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (963088 ms total)
[  PASSED  ] 1 test.
