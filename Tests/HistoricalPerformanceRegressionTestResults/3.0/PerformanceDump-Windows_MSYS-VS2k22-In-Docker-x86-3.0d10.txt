[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Sep 23 2:42:7 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.61588 secs, and comparison 4.39543 sec, and warnIfPerfScore > 0.9, and perfScore=0.664376]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.53751 secs, and comparison 2.94327 sec, and warnIfPerfScore > 0.51, and perfScore=0.450212]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.71428 secs, and comparison 2.23261 sec, and warnIfPerfScore > 0.49, and perfScore=0.229828]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.34029 secs, and comparison 2.7429 sec, and warnIfPerfScore > 0.45, and perfScore=0.293663]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.53149 secs, and comparison 24.9205 sec, and warnIfPerfScore > 4.9, and perfScore=2.921]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.61581 secs, and comparison 23.695 sec, and warnIfPerfScore > 4.1, and perfScore=2.75017]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	44
	DETAILS:         	[baseline test 8.9108 secs, and comparison 395.443 sec, and warnIfPerfScore > 78, and perfScore=44.3779]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 7.59275 secs, and comparison 6.14738 sec, and warnIfPerfScore > 2.1, and perfScore=0.809638]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.95254 secs, and comparison 11.1484 sec, and warnIfPerfScore > 1.4, and perfScore=1.40187]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.32067 secs, and comparison 6.43792 sec, and warnIfPerfScore > 1.7, and perfScore=1.01855]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.90077 secs, and comparison 9.96273 sec, and warnIfPerfScore > 1.2, and perfScore=1.11931]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.36614 secs, and comparison 4.17474 sec, and warnIfPerfScore > 0.48, and perfScore=0.445726]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.3326 secs, and comparison 13.7408 sec, and warnIfPerfScore > 1.3, and perfScore=1.11418]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.55571 secs, and comparison 5.72293 sec, and warnIfPerfScore > 0.75, and perfScore=0.598902]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.81492 secs, and comparison 1.46915 sec, and warnIfPerfScore > 0.33, and perfScore=0.252652]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.16428 secs, and comparison 38.659 sec, and warnIfPerfScore > 5.1, and perfScore=4.21844]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.15509 secs, and comparison 5.60467 sec, and warnIfPerfScore > 0.7, and perfScore=0.612192]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.20209 secs, and comparison 9.27228 sec, and warnIfPerfScore > 1.1, and perfScore=1.00763]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.87045 secs, and comparison 3.39235 sec, and warnIfPerfScore > 0.55, and perfScore=0.577868]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.55798 secs, and comparison 34.6148 sec, and warnIfPerfScore > 4.9, and perfScore=3.62156]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.00648 secs, and comparison 4.83332 sec, and warnIfPerfScore > 0.85, and perfScore=0.804683]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.02081 secs, and comparison 3.38545 sec, and warnIfPerfScore > 0.6, and perfScore=0.562291]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.96361 secs, and comparison 3.35822 sec, and warnIfPerfScore > 0.6, and perfScore=0.563119]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.99531 secs, and comparison 4.80421 sec, and warnIfPerfScore > 1, and perfScore=0.801329]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.51061 secs, and comparison 8.19632 sec, and warnIfPerfScore > 1.3, and perfScore=1.25892]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 46.2942 secs, and comparison 5.65345 sec, and warnIfPerfScore > 0.21, and perfScore=0.12212]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.69171 secs, and comparison 18.9777 sec, and warnIfPerfScore > 1.8, and perfScore=2.4673]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.0969 secs, and comparison 6.24785 sec, and warnIfPerfScore > 1, and perfScore=0.880363]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.3388 secs, and comparison 6.8081 sec, and warnIfPerfScore > 0.85, and perfScore=0.6585]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.64123 sec, and warnIfPerfScore > 0.5, and perfScore=0.309415]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74409 sec, and warnIfPerfScore > 0.5, and perfScore=0.182939]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.240872 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.46818 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.6733 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.113206 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.34522 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.85024 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.034467 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.473158 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.51564 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.161971 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.62868 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.30765 seconds

[[[Tests took: 16 minutes, 28 seconds]]]

[       OK ] Stroika_Performance_Tests.all (987837 ms)
[----------] 1 test from Stroika_Performance_Tests (987837 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (987837 ms total)
[  PASSED  ] 1 test.
