Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 12 23:7:18 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.06977 secs, and comparison 4.19741 sec, and warnIfPerfScore > 0.86, and perfScore=0.593712]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.08281 secs, and comparison 2.6351 sec, and warnIfPerfScore > 0.51, and perfScore=0.372042]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 33.6402 secs, and comparison 2.10396 sec, and warnIfPerfScore > 0.39, and perfScore=0.0625431]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 30.613 secs, and comparison 2.73742 sec, and warnIfPerfScore > 0.39, and perfScore=0.08942]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.57388 secs, and comparison 24.5183 sec, and warnIfPerfScore > 4.8, and perfScore=2.85965]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.8202 secs, and comparison 22.5209 sec, and warnIfPerfScore > 4.1, and perfScore=2.55334]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	46
	DETAILS:         	[baseline test 7.83294 secs, and comparison 360.428 sec, and warnIfPerfScore > 78, and perfScore=46.0144]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 52.1982 secs, and comparison 5.93375 sec, and warnIfPerfScore > 2.1, and perfScore=0.113677]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.04884 secs, and comparison 11.268 sec, and warnIfPerfScore > 1.4, and perfScore=1.39996]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.58142 secs, and comparison 6.30471 sec, and warnIfPerfScore > 1.7, and perfScore=0.957956]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.71976 secs, and comparison 9.59535 sec, and warnIfPerfScore > 1.2, and perfScore=1.10041]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.15748 secs, and comparison 3.98761 sec, and warnIfPerfScore > 0.48, and perfScore=0.435448]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.349 secs, and comparison 13.837 sec, and warnIfPerfScore > 1.3, and perfScore=1.1205]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 9.21366 secs, and comparison 5.31437 sec, and warnIfPerfScore > 0.75, and perfScore=0.576793]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 7.75813 secs, and comparison 1.71772 sec, and warnIfPerfScore > 0.33, and perfScore=0.221409]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.82364 secs, and comparison 36.806 sec, and warnIfPerfScore > 5.1, and perfScore=4.1713]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.80037 secs, and comparison 4.96011 sec, and warnIfPerfScore > 0.7, and perfScore=0.563626]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.82961 secs, and comparison 8.98998 sec, and warnIfPerfScore > 1.1, and perfScore=1.01816]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.55694 secs, and comparison 3.25768 sec, and warnIfPerfScore > 0.55, and perfScore=0.431084]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.21875 secs, and comparison 34.9977 sec, and warnIfPerfScore > 4.7, and perfScore=3.79636]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.63431 secs, and comparison 4.71036 sec, and warnIfPerfScore > 0.79, and perfScore=0.616998]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.57109 secs, and comparison 3.18006 sec, and warnIfPerfScore > 0.6, and perfScore=0.420026]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.60767 secs, and comparison 3.36246 sec, and warnIfPerfScore > 0.6, and perfScore=0.441983]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.60389 secs, and comparison 4.58888 sec, and warnIfPerfScore > 1, and perfScore=0.603492]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.19752 secs, and comparison 8.16447 sec, and warnIfPerfScore > 1.3, and perfScore=0.995968]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.0961 secs, and comparison 5.52169 sec, and warnIfPerfScore > 0.21, and perfScore=0.125219]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.92349 secs, and comparison 11.3298 sec, and warnIfPerfScore > 1.8, and perfScore=1.42991]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 6.92034 secs, and comparison 5.98571 sec, and warnIfPerfScore > 1, and perfScore=0.864945]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.2784 secs, and comparison 6.511 sec, and warnIfPerfScore > 0.85, and perfScore=0.633462]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.22345 sec, and warnIfPerfScore > 0.5, and perfScore=0.34823]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.56618 sec, and warnIfPerfScore > 0.5, and perfScore=0.171078]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.264249 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.59741 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			13.5349 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.10128 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.12843 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.06047 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0343539 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.446424 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.53562 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.123365 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.36549 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			8.67152 seconds

[[[Tests took: 17 minutes, 21 seconds]]]

Succeeded
