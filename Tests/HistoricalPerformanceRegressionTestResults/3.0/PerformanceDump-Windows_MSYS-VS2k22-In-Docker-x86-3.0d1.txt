Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jul 11 23:30:55 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.99406 secs, and comparison 4.1379 sec, and warnIfPerfScore > 0.65, and perfScore=0.591631]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.9366 secs, and comparison 2.62562 sec, and warnIfPerfScore > 0.5, and perfScore=0.378517]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 34.6185 secs, and comparison 2.1397 sec, and warnIfPerfScore > 0.48, and perfScore=0.0618079]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 32.6158 secs, and comparison 2.58861 sec, and warnIfPerfScore > 0.57, and perfScore=0.0793668]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.28717 secs, and comparison 23.5556 sec, and warnIfPerfScore > 2.9, and perfScore=2.84242]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.45381 secs, and comparison 23.2967 sec, and warnIfPerfScore > 2.9, and perfScore=2.75576]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	51
	DETAILS:         	[baseline test 7.72905 secs, and comparison 394.723 sec, and warnIfPerfScore > 24, and perfScore=51.07]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 24 and got 51.07}}}

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.35714 secs, and comparison 10.3039 sec, and warnIfPerfScore > 1.7, and perfScore=1.40053]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.58058 secs, and comparison 10.0813 sec, and warnIfPerfScore > 1.5, and perfScore=1.32989]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.55437 secs, and comparison 10.1159 sec, and warnIfPerfScore > 2.1, and perfScore=1.54338]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.9465 secs, and comparison 7.88093 sec, and warnIfPerfScore > 1.6, and perfScore=0.880894]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.32023 secs, and comparison 5.09562 sec, and warnIfPerfScore > 0.23, and perfScore=0.546727]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.23 and got 0.546727}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2752 secs, and comparison 13.8676 sec, and warnIfPerfScore > 1.3, and perfScore=1.12972]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.64543 secs, and comparison 5.22037 sec, and warnIfPerfScore > 1.2, and perfScore=0.541227]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.78623 secs, and comparison 1.40663 sec, and warnIfPerfScore > 0.33, and perfScore=0.243099]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.2615 secs, and comparison 36.7705 sec, and warnIfPerfScore > 6, and perfScore=3.97025]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.25866 secs, and comparison 4.9716 sec, and warnIfPerfScore > 0.8, and perfScore=0.536967]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.25716 secs, and comparison 8.99954 sec, and warnIfPerfScore > 1.4, and perfScore=0.972171]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.78333 secs, and comparison 3.26162 sec, and warnIfPerfScore > 0.65, and perfScore=0.563969]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.66232 secs, and comparison 34.8756 sec, and warnIfPerfScore > 4.4, and perfScore=3.60944]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.97819 secs, and comparison 4.7407 sec, and warnIfPerfScore > 0.6, and perfScore=0.793]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.793}}}

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.73008 secs, and comparison 3.65908 sec, and warnIfPerfScore > 0.6, and perfScore=0.54369]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.44537 secs, and comparison 3.63424 sec, and warnIfPerfScore > 0.6, and perfScore=0.563852]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.99953 secs, and comparison 4.68086 sec, and warnIfPerfScore > 1.3, and perfScore=0.780204]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.47991 secs, and comparison 8.19661 sec, and warnIfPerfScore > 1.3, and perfScore=1.26493]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 46.08 secs, and comparison 5.59995 sec, and warnIfPerfScore > 0.3, and perfScore=0.121527]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.85386 secs, and comparison 10.6518 sec, and warnIfPerfScore > 1.5, and perfScore=1.35625]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 7.28532 secs, and comparison 6.13412 sec, and warnIfPerfScore > 0.55, and perfScore=0.841985]
	                 	BLOB is FASTER
	                 	{{{WARNING - expected performance score less than 0.55 and got 0.841985}}}

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.037
	DETAILS:         	[baseline test 15 secs, and comparison 0.559306 sec, and warnIfPerfScore > 0.1, and perfScore=0.037287]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.57951 sec, and warnIfPerfScore > 0.5, and perfScore=0.171967]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.55628 secs, and comparison 12.3919 sec, and warnIfPerfScore > 2, and perfScore=1.44828]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.39842 secs, and comparison 28.5935 sec, and warnIfPerfScore > 3.6, and perfScore=3.04237]
	                 	codecvt_utf8 is ***SLOWER***

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.2764 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.7959 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.2568 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.142703 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.57221 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.11734 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0350137 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.451517 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.52623 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.139016 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.53961 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.11201 seconds

[[[Tests took: 17 minutes, 46 seconds]]]

Succeeded
