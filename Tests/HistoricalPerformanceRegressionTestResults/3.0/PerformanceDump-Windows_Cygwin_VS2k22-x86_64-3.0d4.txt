Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 14 6:2:29 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.1021 secs, and comparison 4.73452 sec, and warnIfPerfScore > 0.86, and perfScore=0.666636]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.1015 secs, and comparison 2.73964 sec, and warnIfPerfScore > 0.51, and perfScore=0.338164]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.80416 secs, and comparison 2.72746 sec, and warnIfPerfScore > 0.39, and perfScore=0.278194]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.83139 secs, and comparison 3.3852 sec, and warnIfPerfScore > 0.39, and perfScore=0.383315]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.3743 secs, and comparison 35.0895 sec, and warnIfPerfScore > 4.8, and perfScore=3.38236]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.9874 secs, and comparison 36.4584 sec, and warnIfPerfScore > 4.1, and perfScore=3.3182]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	57
	DETAILS:         	[baseline test 8.16027 secs, and comparison 466.391 sec, and warnIfPerfScore > 78, and perfScore=57.1539]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.66912 secs, and comparison 7.6103 sec, and warnIfPerfScore > 2.1, and perfScore=0.877862]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.6756 secs, and comparison 10.3038 sec, and warnIfPerfScore > 1.4, and perfScore=1.34241]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.14122 secs, and comparison 8.85593 sec, and warnIfPerfScore > 1.7, and perfScore=1.08779]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.37138 secs, and comparison 9.48709 sec, and warnIfPerfScore > 1.2, and perfScore=1.13328]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.6052 secs, and comparison 4.10313 sec, and warnIfPerfScore > 0.48, and perfScore=0.386899]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.94 secs, and comparison 16.4653 sec, and warnIfPerfScore > 1.3, and perfScore=1.18115]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.3076 secs, and comparison 6.75162 sec, and warnIfPerfScore > 0.75, and perfScore=0.655016]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.52401 secs, and comparison 2.42711 sec, and warnIfPerfScore > 0.33, and perfScore=0.254841]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.78888 secs, and comparison 45.4008 sec, and warnIfPerfScore > 5.1, and perfScore=4.638]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.9406 secs, and comparison 6.61763 sec, and warnIfPerfScore > 0.7, and perfScore=0.665717]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 10.1606 secs, and comparison 10.0436 sec, and warnIfPerfScore > 1.1, and perfScore=0.988486]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.71861 secs, and comparison 3.88256 sec, and warnIfPerfScore > 0.55, and perfScore=0.399498]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.2273 secs, and comparison 44.8178 sec, and warnIfPerfScore > 4.7, and perfScore=4.38216]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.41215 secs, and comparison 6.62426 sec, and warnIfPerfScore > 0.79, and perfScore=0.703799]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.19162 secs, and comparison 3.82889 sec, and warnIfPerfScore > 0.6, and perfScore=0.416563]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.57325 secs, and comparison 3.87427 sec, and warnIfPerfScore > 0.6, and perfScore=0.404698]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.8766 secs, and comparison 6.62596 sec, and warnIfPerfScore > 1, and perfScore=0.746453]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.4842 secs, and comparison 9.73188 sec, and warnIfPerfScore > 1.3, and perfScore=0.928245]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 47.9828 secs, and comparison 8.04545 sec, and warnIfPerfScore > 0.21, and perfScore=0.167674]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.38766 secs, and comparison 12.4205 sec, and warnIfPerfScore > 1.8, and perfScore=1.4808]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.25849 secs, and comparison 6.98545 sec, and warnIfPerfScore > 1, and perfScore=0.845851]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 10.8445 secs, and comparison 7.21205 sec, and warnIfPerfScore > 0.85, and perfScore=0.665041]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15 secs, and comparison 6.0342 sec, and warnIfPerfScore > 0.5, and perfScore=0.40228]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74123 sec, and warnIfPerfScore > 0.5, and perfScore=0.182749]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.378005 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.69807 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.93 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.127395 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.94469 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.3228 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0414254 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.644713 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			2.17649 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.204959 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.13935 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.0398 seconds

[[[Tests took: 19 minutes, 28 seconds]]]

Succeeded
