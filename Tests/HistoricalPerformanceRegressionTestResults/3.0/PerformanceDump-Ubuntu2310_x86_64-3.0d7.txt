[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jul 10 21:16:46 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 3.22641 secs, and comparison 2.42248 sec, and warnIfPerfScore > 0.9, and perfScore=0.75083]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.44056 secs, and comparison 3.27627 sec, and warnIfPerfScore > 0.51, and perfScore=0.952251]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 3.6824 secs, and comparison 1.05033 sec, and warnIfPerfScore > 0.49, and perfScore=0.285231]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 4.33277 secs, and comparison 1.17942 sec, and warnIfPerfScore > 0.45, and perfScore=0.272209]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 3.31458 secs, and comparison 19.8053 sec, and warnIfPerfScore > 4.9, and perfScore=5.97522]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 3.81859 secs, and comparison 20.3686 sec, and warnIfPerfScore > 4.1, and perfScore=5.33407]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	56
	DETAILS:         	[baseline test 4.60805 secs, and comparison 256.965 sec, and warnIfPerfScore > 78, and perfScore=55.7644]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 3.24062 secs, and comparison 5.36771 sec, and warnIfPerfScore > 2.1, and perfScore=1.65638]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.36916 secs, and comparison 8.6912 sec, and warnIfPerfScore > 1.4, and perfScore=1.1794]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.81287 secs, and comparison 6.98017 sec, and warnIfPerfScore > 1.7, and perfScore=2.48151]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.72295 secs, and comparison 4.40012 sec, and warnIfPerfScore > 1.2, and perfScore=1.18189]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 3.92925 secs, and comparison 3.81117 sec, and warnIfPerfScore > 0.48, and perfScore=0.969949]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 2.5253 secs, and comparison 4.60688 sec, and warnIfPerfScore > 1.3, and perfScore=1.82429]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.08986 secs, and comparison 7.12588 sec, and warnIfPerfScore > 0.75, and perfScore=2.30621]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 18.7787 secs, and comparison 1.45877 sec, and warnIfPerfScore > 0.33, and perfScore=0.077682]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.96642 secs, and comparison 40.6722 sec, and warnIfPerfScore > 5.1, and perfScore=13.7109]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.95832 secs, and comparison 7.45774 sec, and warnIfPerfScore > 0.7, and perfScore=2.52094]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.95971 secs, and comparison 6.5665 sec, and warnIfPerfScore > 1.1, and perfScore=2.21863]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 18.7185 secs, and comparison 3.70352 sec, and warnIfPerfScore > 0.55, and perfScore=0.197853]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.64359 secs, and comparison 41.4341 sec, and warnIfPerfScore > 4.9, and perfScore=8.92287]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.5955 secs, and comparison 5.10769 sec, and warnIfPerfScore > 0.85, and perfScore=0.44049]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 13.1538 secs, and comparison 3.47863 sec, and warnIfPerfScore > 0.6, and perfScore=0.264459]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.1391 secs, and comparison 3.48283 sec, and warnIfPerfScore > 0.6, and perfScore=0.265074]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.1784 secs, and comparison 4.62409 sec, and warnIfPerfScore > 1, and perfScore=0.350884]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 18.4856 secs, and comparison 9.5295 sec, and warnIfPerfScore > 1.3, and perfScore=0.515509]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 19.098 secs, and comparison 6.65708 sec, and warnIfPerfScore > 0.21, and perfScore=0.348576]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 4.91702 secs, and comparison 14.1912 sec, and warnIfPerfScore > 1.8, and perfScore=2.88614]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.32868 secs, and comparison 5.54714 sec, and warnIfPerfScore > 1, and perfScore=0.756908]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.5253 secs, and comparison 5.11324 sec, and warnIfPerfScore > 0.85, and perfScore=0.925423]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 5.0176 sec, and warnIfPerfScore > 0.5, and perfScore=0.334507]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 15 secs, and comparison 1.07938 sec, and warnIfPerfScore > 0.5, and perfScore=0.0719586]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.24658 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			3.34695 seconds

stroika-json-native-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			12.1852 seconds

stroika-json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0906068 seconds

stroika-json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			1.73255 seconds

stroika-json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			6.75434 seconds

boost_json-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.0452757 seconds

boost_json-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			0.522158 seconds

boost_json-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			1.93135 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/small-dict.json"
	DETAILS			0.13945 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/medium-dict.json"
	DETAILS			2.31729 seconds

boost_json-vv-parser: "./Tests/52/JSONTestData/large-dict.json"
	DETAILS			7.59475 seconds

[[[Tests took: 12 minutes, 43 seconds]]]

[       OK ] Stroika_Performance_Tests.all (762801 ms)
[----------] 1 test from Stroika_Performance_Tests (762801 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (762801 ms total)
[  PASSED  ] 1 test.
