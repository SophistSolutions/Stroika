[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep 22 19:51:40 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.36778 secs, and comparison 4.33088 sec, and warnIfPerfScore > 0.9, and perfScore=0.80683]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.30531 secs, and comparison 2.68937 sec, and warnIfPerfScore > 0.51, and perfScore=0.506921]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.94308 secs, and comparison 2.32058 sec, and warnIfPerfScore > 0.49, and perfScore=0.390467]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.01226 secs, and comparison 2.87292 sec, and warnIfPerfScore > 0.45, and perfScore=0.477844]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.477844}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 6.13852 secs, and comparison 28.1096 sec, and warnIfPerfScore > 4.9, and perfScore=4.57922]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 6.98691 secs, and comparison 27.3719 sec, and warnIfPerfScore > 4.1, and perfScore=3.9176]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	71
	DETAILS:         	[baseline test 5.82646 secs, and comparison 416.393 sec, and warnIfPerfScore > 78, and perfScore=71.4659]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.72866 secs, and comparison 7.21078 sec, and warnIfPerfScore > 2.1, and perfScore=1.25872]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.51339 secs, and comparison 7.13322 sec, and warnIfPerfScore > 1.4, and perfScore=1.2938]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.57129 secs, and comparison 7.56295 sec, and warnIfPerfScore > 1.7, and perfScore=1.35749]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.6323 secs, and comparison 8.42479 sec, and warnIfPerfScore > 1.2, and perfScore=1.27027]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.27027}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.90174 secs, and comparison 3.15065 sec, and warnIfPerfScore > 0.48, and perfScore=0.456501]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.7334 secs, and comparison 13.658 sec, and warnIfPerfScore > 1.3, and perfScore=1.16403]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.30959 secs, and comparison 5.3967 sec, and warnIfPerfScore > 0.75, and perfScore=0.649454]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.27284 secs, and comparison 1.83514 sec, and warnIfPerfScore > 0.33, and perfScore=0.252328]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 7.97226 secs, and comparison 38.3762 sec, and warnIfPerfScore > 5.1, and perfScore=4.81371]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.92648 secs, and comparison 4.9641 sec, and warnIfPerfScore > 0.7, and perfScore=0.626268]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.90944 secs, and comparison 7.07586 sec, and warnIfPerfScore > 1.1, and perfScore=0.894609]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.17508 secs, and comparison 3.48931 sec, and warnIfPerfScore > 0.55, and perfScore=0.486309]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 8.42409 secs, and comparison 42.3618 sec, and warnIfPerfScore > 4.9, and perfScore=5.02865]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.9 and got 5.02865}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.28981 secs, and comparison 5.68828 sec, and warnIfPerfScore > 0.85, and perfScore=0.780305]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.15844 secs, and comparison 3.29792 sec, and warnIfPerfScore > 0.6, and perfScore=0.460705]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.15816 secs, and comparison 3.32493 sec, and warnIfPerfScore > 0.6, and perfScore=0.464495]
	                 	Collection_stdforward_list<string> is FASTER

Test SortedCollection_stdmultiset<string> basics (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 7.20523 secs, and comparison 5.84543 sec, and warnIfPerfScore > 1, and perfScore=0.811275]
	                 	SortedCollection_stdmultiset<string> is FASTER

Test SortedCollection_stdmultiset<string> basics with rnd strings (vector<string> vs SortedCollection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.63843 secs, and comparison 8.48597 sec, and warnIfPerfScore > 1.3, and perfScore=1.11096]
	                 	SortedCollection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 37.6955 secs, and comparison 5.64886 sec, and warnIfPerfScore > 0.21, and perfScore=0.149855]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 5.71088 secs, and comparison 17.2315 sec, and warnIfPerfScore > 1.8, and perfScore=3.01731]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 3.01731}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.04566 secs, and comparison 5.61976 sec, and warnIfPerfScore > 1, and perfScore=0.929552]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.83091 secs, and comparison 6.11511 sec, and warnIfPerfScore > 0.85, and perfScore=0.780894]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.69064 sec, and warnIfPerfScore > 0.5, and perfScore=0.246042]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74054 sec, and warnIfPerfScore > 0.5, and perfScore=0.182703]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.227743 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.6219 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			14.5396 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.118526 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.60692 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			9.85282 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0327386 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.461791 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.55742 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.147694 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.90845 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			10.4008 seconds

[[[Tests took: 16 minutes, 22 seconds]]]

[       OK ] Stroika_Performance_Tests.all (981782 ms)
[----------] 1 test from Stroika_Performance_Tests (981782 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (981782 ms total)
[  PASSED  ] 1 test.
