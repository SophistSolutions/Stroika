[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from Stroika_Performance_Tests
[ RUN      ] Stroika_Performance_Tests.all
Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 19 6:2:37 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.44082 secs, and comparison 4.53456 sec, and warnIfPerfScore > 0.9, and perfScore=0.833434]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.47553 secs, and comparison 2.75949 sec, and warnIfPerfScore > 0.51, and perfScore=0.503968]
	                 	SpinLock is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.32022 secs, and comparison 2.53144 sec, and warnIfPerfScore > 0.49, and perfScore=0.40053]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.2419 secs, and comparison 2.96432 sec, and warnIfPerfScore > 0.45, and perfScore=0.474907]
	                 	Charactes::String is FASTER
	                 	{{{WARNING - expected performance score less than 0.45 and got 0.474907}}}

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 6.538 secs, and comparison 29.3334 sec, and warnIfPerfScore > 4.9, and perfScore=4.4866]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 7.28738 secs, and comparison 27.8109 sec, and warnIfPerfScore > 4.1, and perfScore=3.81632]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	68
	DETAILS:         	[baseline test 6.20932 secs, and comparison 420.86 sec, and warnIfPerfScore > 78, and perfScore=67.7787]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.35943 secs, and comparison 7.59908 sec, and warnIfPerfScore > 2.1, and perfScore=1.19493]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.42014 secs, and comparison 6.8931 sec, and warnIfPerfScore > 1.4, and perfScore=1.27176]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.38943 secs, and comparison 7.99374 sec, and warnIfPerfScore > 1.7, and perfScore=1.48323]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.48767 secs, and comparison 8.64169 sec, and warnIfPerfScore > 1.2, and perfScore=1.33202]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.33202}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.97343 secs, and comparison 3.10993 sec, and warnIfPerfScore > 0.48, and perfScore=0.445969]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6862 secs, and comparison 14.2907 sec, and warnIfPerfScore > 1.3, and perfScore=1.12648]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.65868 secs, and comparison 5.43369 sec, and warnIfPerfScore > 0.75, and perfScore=0.627542]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 7.69052 secs, and comparison 1.72046 sec, and warnIfPerfScore > 0.33, and perfScore=0.223712]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.34479 secs, and comparison 40.6891 sec, and warnIfPerfScore > 5.1, and perfScore=4.87599]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.36435 secs, and comparison 5.18494 sec, and warnIfPerfScore > 0.7, and perfScore=0.619885]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.79124 secs, and comparison 8.10216 sec, and warnIfPerfScore > 1.1, and perfScore=0.921617]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.13886 secs, and comparison 3.81222 sec, and warnIfPerfScore > 0.55, and perfScore=0.468398]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.17909 secs, and comparison 43.1603 sec, and warnIfPerfScore > 4.9, and perfScore=4.70203]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.17693 secs, and comparison 6.06865 sec, and warnIfPerfScore > 0.85, and perfScore=0.742167]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.13575 secs, and comparison 3.67216 sec, and warnIfPerfScore > 0.6, and perfScore=0.451361]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.18295 secs, and comparison 3.68648 sec, and warnIfPerfScore > 0.6, and perfScore=0.450507]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.21677 secs, and comparison 6.06528 sec, and warnIfPerfScore > 1, and perfScore=0.738159]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.55435 secs, and comparison 9.18238 sec, and warnIfPerfScore > 1.3, and perfScore=1.07342]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 42.3026 secs, and comparison 5.99499 sec, and warnIfPerfScore > 0.21, and perfScore=0.141717]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.32461 secs, and comparison 18.8886 sec, and warnIfPerfScore > 1.8, and perfScore=2.98652]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.8 and got 2.98652}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.58466 secs, and comparison 6.02083 sec, and warnIfPerfScore > 1, and perfScore=0.914371]
	                 	BLOB is FASTER

Test BLOB versus vector<byte> ver#2 (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 8.6137 secs, and comparison 6.89029 sec, and warnIfPerfScore > 0.85, and perfScore=0.799922]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.73015 sec, and warnIfPerfScore > 0.5, and perfScore=0.315343]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.93733 sec, and warnIfPerfScore > 0.5, and perfScore=0.195822]
	                 	Test_Optional_ is FASTER

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.276453 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			4.14404 seconds

stroika-json-native-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			16.7247 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.222012 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			2.96726 seconds

stroika-json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.3545 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.0385173 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			0.521085 seconds

boost_json-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			1.78723 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\small-dict.json"
	DETAILS			0.268793 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\medium-dict.json"
	DETAILS			3.31643 seconds

boost_json-vv-parser: ".\\Tests\\52\\JSONTestData\\large-dict.json"
	DETAILS			11.7764 seconds

[[[Tests took: 17 minutes, 11 seconds]]]

[       OK ] Stroika_Performance_Tests.all (1031426 ms)
[----------] 1 test from Stroika_Performance_Tests (1031426 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (1031426 ms total)
[  PASSED  ] 1 test.
