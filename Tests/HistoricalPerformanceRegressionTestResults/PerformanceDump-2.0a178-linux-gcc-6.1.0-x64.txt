Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/19/16 12:34:31]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.39593 secs, and comparison 4.23063 sec, and warnIfPerfScore > 0.62, and perfScore=0.784041]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.36181 secs, and comparison 2.67938 sec, and warnIfPerfScore > 0.65, and perfScore=0.499714]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.22967 secs, and comparison 8.44256 sec, and warnIfPerfScore > 1, and perfScore=1.02587]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.20282 secs, and comparison 7.86128 sec, and warnIfPerfScore > 1.15, and perfScore=0.958364]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.03467 secs, and comparison 2.84995 sec, and warnIfPerfScore > 0.5, and perfScore=0.472263]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.49936 secs, and comparison 4.71368 sec, and warnIfPerfScore > 0.68, and perfScore=0.628545]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 11.0082 secs, and comparison 32.545 sec, and warnIfPerfScore > 4.3, and perfScore=2.95645]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.8387 secs, and comparison 32.2006 sec, and warnIfPerfScore > 4, and perfScore=2.9709]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.62643 secs, and comparison 100.307 sec, and warnIfPerfScore > 10.4, and perfScore=11.6278]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 15.7786 secs, and comparison 14.0546 sec, and warnIfPerfScore > 3.2, and perfScore=0.890738]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.97349 secs, and comparison 5.5047 sec, and warnIfPerfScore > 1.7, and perfScore=0.921521]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.61564 secs, and comparison 18.9744 sec, and warnIfPerfScore > 2.8, and perfScore=2.86811]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 6.7619 secs, and comparison 34.1224 sec, and warnIfPerfScore > 3.3, and perfScore=5.04627]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.83717 secs, and comparison 2.40307 sec, and warnIfPerfScore > 0.22, and perfScore=0.351471]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.37871 secs, and comparison 5.9392 sec, and warnIfPerfScore > 1.25, and perfScore=1.10421]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.97694 secs, and comparison 9.4356 sec, and warnIfPerfScore > 7.7, and perfScore=1.05109]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 7.87913 secs, and comparison 2.15514 sec, and warnIfPerfScore > 1.55, and perfScore=0.273525]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.83931 secs, and comparison 9.08661 sec, and warnIfPerfScore > 7.7, and perfScore=1.02798]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.9364 secs, and comparison 2.24578 sec, and warnIfPerfScore > 1.4, and perfScore=0.282972]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 6.35343 secs, and comparison 43.311 sec, and warnIfPerfScore > 7.9, and perfScore=6.81694]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.34079 secs, and comparison 4.63438 sec, and warnIfPerfScore > 0.8, and perfScore=0.631319]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4807 secs, and comparison 14.3276 sec, and warnIfPerfScore > 1.7, and perfScore=1.14798]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 16.9735 secs, and comparison 4.071 sec, and warnIfPerfScore > 0.55, and perfScore=0.239844]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 15 secs, and comparison 1.38816 sec, and warnIfPerfScore > 0.4, and perfScore=0.092544]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.54227 sec, and warnIfPerfScore > 1.1, and perfScore=0.236152]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 30 seconds]]]

Succeeded
