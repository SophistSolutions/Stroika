Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/7/16 10:36:41]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.75648 secs, and comparison 5.47829 sec, and warnIfPerfScore > 0.62, and perfScore=0.561503]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.79089 secs, and comparison 4.14613 sec, and warnIfPerfScore > 0.65, and perfScore=0.423468]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 12.987 secs, and comparison 11.3352 sec, and warnIfPerfScore > 1, and perfScore=0.872808]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.1794 secs, and comparison 13.8554 sec, and warnIfPerfScore > 1.15, and perfScore=0.977152]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.2583 secs, and comparison 3.12963 sec, and warnIfPerfScore > 0.5, and perfScore=0.305083]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.9827 secs, and comparison 4.81032 sec, and warnIfPerfScore > 0.68, and perfScore=0.401438]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.3631 secs, and comparison 37.536 sec, and warnIfPerfScore > 4.3, and perfScore=2.80892]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.9665 secs, and comparison 37.6519 sec, and warnIfPerfScore > 4, and perfScore=2.90379]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 11.0454 secs, and comparison 97.834 sec, and warnIfPerfScore > 10.4, and perfScore=8.85743]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.9841 secs, and comparison 20.5157 sec, and warnIfPerfScore > 3.2, and perfScore=1.58006]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.2327 secs, and comparison 18.7844 sec, and warnIfPerfScore > 1.7, and perfScore=1.23316]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.2073 secs, and comparison 25.9699 sec, and warnIfPerfScore > 2.8, and perfScore=1.82792]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 14.5707 secs, and comparison 44.3106 sec, and warnIfPerfScore > 3.3, and perfScore=3.04109]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 14.8145 secs, and comparison 3.02264 sec, and warnIfPerfScore > 0.22, and perfScore=0.204033]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.2331 secs, and comparison 16.2063 sec, and warnIfPerfScore > 1.25, and perfScore=1.13863]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 17.0999 secs, and comparison 53.0674 sec, and warnIfPerfScore > 7.7, and perfScore=3.10337]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 12.4652 secs, and comparison 5.69238 sec, and warnIfPerfScore > 1.55, and perfScore=0.45666]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 16.9498 secs, and comparison 52.5245 sec, and warnIfPerfScore > 7.7, and perfScore=3.09882]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 12.6109 secs, and comparison 5.75232 sec, and warnIfPerfScore > 1.4, and perfScore=0.456139]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 15.934 secs, and comparison 68.4657 sec, and warnIfPerfScore > 7.9, and perfScore=4.29683]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.9278 secs, and comparison 8.0321 sec, and warnIfPerfScore > 0.8, and perfScore=0.673391]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.1385 secs, and comparison 19.0768 sec, and warnIfPerfScore > 1.7, and perfScore=1.26015]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.52523 secs, and comparison 3.85762 sec, and warnIfPerfScore > 0.55, and perfScore=0.452494]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.92933 sec, and warnIfPerfScore > 0.4, and perfScore=0.128622]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.8215 sec, and warnIfPerfScore > 1.1, and perfScore=0.321433]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.2834 secs, and comparison 21.6175 sec, and warnIfPerfScore > 2.4, and perfScore=1.41445]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 15.3084 secs, and comparison 26.0938 sec, and warnIfPerfScore > 2.8, and perfScore=1.70455]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 52 seconds]]]

Succeeded
