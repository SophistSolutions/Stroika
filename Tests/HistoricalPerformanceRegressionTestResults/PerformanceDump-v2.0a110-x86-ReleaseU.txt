Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/21/15 23:09:29]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.6495 secs, and comparison 6.81352 sec, and warnIfPerfScore > 0.5, and perfScore=0.465103]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.7147 secs, and comparison 4.40305 sec, and warnIfPerfScore > 0.35, and perfScore=0.299228]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 15.1927 secs, and comparison 10.9894 sec, and warnIfPerfScore > 0.89, and perfScore=0.723331]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.9415 secs, and comparison 14.636 sec, and warnIfPerfScore > 1.15, and perfScore=0.979552]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 17.1225 secs, and comparison 3.6814 sec, and warnIfPerfScore > 0.5, and perfScore=0.215004]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 20.9205 secs, and comparison 4.72689 sec, and warnIfPerfScore > 0.68, and perfScore=0.225946]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.3298 secs, and comparison 43.5793 sec, and warnIfPerfScore > 4.3, and perfScore=2.6687]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.6754 secs, and comparison 44.761 sec, and warnIfPerfScore > 4, and perfScore=2.68426]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 15.6643 secs, and comparison 106.167 sec, and warnIfPerfScore > 9.1, and perfScore=6.77761]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.3963 secs, and comparison 23.1427 sec, and warnIfPerfScore > 2.45, and perfScore=1.50313]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.3893 secs, and comparison 14.3901 sec, and warnIfPerfScore > 1.65, and perfScore=1.00005]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.1788 secs, and comparison 30.3217 sec, and warnIfPerfScore > 2.7, and perfScore=1.99764]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.2769 secs, and comparison 42.4027 sec, and warnIfPerfScore > 3, and perfScore=2.7756]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.2672 secs, and comparison 1.73031 sec, and warnIfPerfScore > 0.14, and perfScore=0.113335]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 16.4614 secs, and comparison 16.0815 sec, and warnIfPerfScore > 1.25, and perfScore=0.976923]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.6481 secs, and comparison 36.2123 sec, and warnIfPerfScore > 7.7, and perfScore=2.31417]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.6599 secs, and comparison 4.856 sec, and warnIfPerfScore > 1.55, and perfScore=0.331244]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.7354 secs, and comparison 35.4774 sec, and warnIfPerfScore > 7.7, and perfScore=2.25463]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.044 secs, and comparison 4.90247 sec, and warnIfPerfScore > 1.4, and perfScore=0.325876]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.1111 secs, and comparison 60.3335 sec, and warnIfPerfScore > 7.9, and perfScore=3.99266]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 14.2835 secs, and comparison 6.83754 sec, and warnIfPerfScore > 0.8, and perfScore=0.478703]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.3846 secs, and comparison 19.7732 sec, and warnIfPerfScore > 1.6, and perfScore=1.28526]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.5121 secs, and comparison 4.14928 sec, and warnIfPerfScore > 0.32, and perfScore=0.285918]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.11927 sec, and warnIfPerfScore > 0.4, and perfScore=0.141284]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.14303 sec, and warnIfPerfScore > 1.1, and perfScore=0.342869]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.7963 secs, and comparison 21.9188 sec, and warnIfPerfScore > 2.4, and perfScore=1.48137]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.0961 secs, and comparison 27.8213 sec, and warnIfPerfScore > 2.8, and perfScore=1.84294]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 25 seconds]]]

