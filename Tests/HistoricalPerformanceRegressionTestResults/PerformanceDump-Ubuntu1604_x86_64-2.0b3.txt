Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/26/18 23:39:49]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.01662 secs, and comparison 4.62333 sec, and warnIfPerfScore > 0.62, and perfScore=0.768426]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.11411 secs, and comparison 2.88125 sec, and warnIfPerfScore > 0.65, and perfScore=0.471247]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.85717 secs, and comparison 7.20296 sec, and warnIfPerfScore > 1.05, and perfScore=1.05043]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.91268 secs, and comparison 2.93547 sec, and warnIfPerfScore > 0.5, and perfScore=0.49647]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 6.23778 secs, and comparison 3.93269 sec, and warnIfPerfScore > 0.68, and perfScore=0.630463]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.70197 secs, and comparison 29.6413 sec, and warnIfPerfScore > 4.3, and perfScore=3.40628]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.69692 secs, and comparison 26.4721 sec, and warnIfPerfScore > 4, and perfScore=2.72995]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 7.75868 secs, and comparison 88.5296 sec, and warnIfPerfScore > 10.4, and perfScore=11.4104]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.61792 secs, and comparison 12.1906 sec, and warnIfPerfScore > 3.2, and perfScore=1.41456]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.3577 secs, and comparison 6.1576 sec, and warnIfPerfScore > 1.8, and perfScore=0.968526]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.92073 secs, and comparison 11.6769 sec, and warnIfPerfScore > 2.8, and perfScore=2.97825]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 4.44977 secs, and comparison 21.3114 sec, and warnIfPerfScore > 3.3, and perfScore=4.78934]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.65921 secs, and comparison 1.80206 sec, and warnIfPerfScore > 0.25, and perfScore=0.386774]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.85219 secs, and comparison 4.29516 sec, and warnIfPerfScore > 1.4, and perfScore=1.11499]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 3.73701 secs, and comparison 19.7816 sec, and warnIfPerfScore > 7.7, and perfScore=5.29342]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15.7866 secs, and comparison 2.71816 sec, and warnIfPerfScore > 1.55, and perfScore=0.172182]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 3.63117 secs, and comparison 55.27 sec, and warnIfPerfScore > 9, and perfScore=15.221]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.8093 secs, and comparison 4.7174 sec, and warnIfPerfScore > 1, and perfScore=0.436419]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 5.39458 secs, and comparison 50.5239 sec, and warnIfPerfScore > 7.9, and perfScore=9.36568]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.4806 secs, and comparison 5.09392 sec, and warnIfPerfScore > 0.8, and perfScore=0.408145]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.79865 secs, and comparison 12.1367 sec, and warnIfPerfScore > 1.7, and perfScore=1.37938]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.72815 secs, and comparison 3.19296 sec, and warnIfPerfScore > 0.55, and perfScore=0.41316]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.75692 sec, and warnIfPerfScore > 0.4, and perfScore=0.117128]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.9389 sec, and warnIfPerfScore > 1.1, and perfScore=0.195927]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 2 seconds]]]

Succeeded
