Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/5/18 20:13:38]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.14823 secs, and comparison 6.78096 sec, and warnIfPerfScore > 0.62, and perfScore=0.741231]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.14328 secs, and comparison 4.16072 sec, and warnIfPerfScore > 0.65, and perfScore=0.455057]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 15.4955 secs, and comparison 11.5393 sec, and warnIfPerfScore > 1.05, and perfScore=0.744685]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.891 secs, and comparison 4.47701 sec, and warnIfPerfScore > 0.5, and perfScore=0.166487]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 25.8549 secs, and comparison 5.4668 sec, and warnIfPerfScore > 0.68, and perfScore=0.211441]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.1992 secs, and comparison 58.0823 sec, and warnIfPerfScore > 4.3, and perfScore=3.19148]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.5279 secs, and comparison 60.5879 sec, and warnIfPerfScore > 4, and perfScore=3.10263]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 16.2494 secs, and comparison 154.243 sec, and warnIfPerfScore > 10.4, and perfScore=9.49221]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.9055 secs, and comparison 30.5505 sec, and warnIfPerfScore > 3.2, and perfScore=1.46136]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.25626 secs, and comparison 5.95022 sec, and warnIfPerfScore > 1.8, and perfScore=0.720691]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.6366 secs, and comparison 30.9145 sec, and warnIfPerfScore > 2.8, and perfScore=2.26703]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.9054 secs, and comparison 25.882 sec, and warnIfPerfScore > 3.3, and perfScore=2.17398]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.5439 secs, and comparison 3.49532 sec, and warnIfPerfScore > 0.25, and perfScore=0.278648]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.2049 secs, and comparison 18.3529 sec, and warnIfPerfScore > 1.4, and perfScore=1.00813]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.7342 secs, and comparison 32.0482 sec, and warnIfPerfScore > 7.7, and perfScore=2.73119]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.8741 secs, and comparison 3.83353 sec, and warnIfPerfScore > 1.55, and perfScore=0.352539]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.2163 secs, and comparison 75.257 sec, and warnIfPerfScore > 7.7, and perfScore=6.70959]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.7917 secs, and comparison 6.44297 sec, and warnIfPerfScore > 1, and perfScore=0.597031]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.6543 secs, and comparison 68.43 sec, and warnIfPerfScore > 7.9, and perfScore=5.40766]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8545 secs, and comparison 6.74988 sec, and warnIfPerfScore > 0.8, and perfScore=0.62185]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 28.7416 secs, and comparison 40.9037 sec, and warnIfPerfScore > 1.7, and perfScore=1.42315]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.38306 secs, and comparison 6.3042 sec, and warnIfPerfScore > 0.55, and perfScore=0.987645]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.80008 sec, and warnIfPerfScore > 0.4, and perfScore=0.386672]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.2308 sec, and warnIfPerfScore > 1.1, and perfScore=0.215387]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 39 seconds]]]

Succeeded
