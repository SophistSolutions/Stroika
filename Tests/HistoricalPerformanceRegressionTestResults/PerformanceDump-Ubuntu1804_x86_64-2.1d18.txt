Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Mar  6 23:14:13 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.86644 secs, and comparison 4.59057 sec, and warnIfPerfScore > 0.62, and perfScore=0.782513]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.85465 secs, and comparison 2.83908 sec, and warnIfPerfScore > 0.5, and perfScore=0.484928]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.29102 secs, and comparison 6.82441 sec, and warnIfPerfScore > 1.05, and perfScore=1.08479]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.47073 secs, and comparison 3.23774 sec, and warnIfPerfScore > 0.45, and perfScore=0.932869]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.13231 secs, and comparison 3.92116 sec, and warnIfPerfScore > 0.55, and perfScore=0.948903]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.07841 secs, and comparison 17.0118 sec, and warnIfPerfScore > 2.8, and perfScore=5.52617]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.61253 secs, and comparison 17.9883 sec, and warnIfPerfScore > 2.9, and perfScore=4.97942]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.66577 secs, and comparison 53.6876 sec, and warnIfPerfScore > 9.7, and perfScore=11.5067]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.62291 secs, and comparison 9.94428 sec, and warnIfPerfScore > 1.6, and perfScore=2.15109]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.35163 secs, and comparison 5.2824 sec, and warnIfPerfScore > 1.5, and perfScore=0.987064]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 2.26036 secs, and comparison 10.3956 sec, and warnIfPerfScore > 2.1, and perfScore=4.59908]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 4.2142 secs, and comparison 4.1245 sec, and warnIfPerfScore > 1.3, and perfScore=0.978715]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.4354 secs, and comparison 1.56801 sec, and warnIfPerfScore > 0.18, and perfScore=0.353522]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 2.35428 secs, and comparison 3.46046 sec, and warnIfPerfScore > 1.3, and perfScore=1.46986]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.20018 secs, and comparison 7.72003 sec, and warnIfPerfScore > 1.2, and perfScore=2.41237]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.3364 secs, and comparison 1.39551 sec, and warnIfPerfScore > 0.33, and perfScore=0.104639]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.13155 secs, and comparison 42.321 sec, and warnIfPerfScore > 6, and perfScore=13.5144]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.37501 secs, and comparison 3.92325 sec, and warnIfPerfScore > 0.5, and perfScore=0.418479]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 5.88708 secs, and comparison 40.3624 sec, and warnIfPerfScore > 4.4, and perfScore=6.85609]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.7382 secs, and comparison 3.78389 sec, and warnIfPerfScore > 0.6, and perfScore=0.352375]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.8445 secs, and comparison 11.0362 sec, and warnIfPerfScore > 1.5, and perfScore=1.40688]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.02655 secs, and comparison 2.02881 sec, and warnIfPerfScore > 0.55, and perfScore=0.288735]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 15 secs, and comparison 0.912265 sec, and warnIfPerfScore > 0.25, and perfScore=0.0608176]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.58332 sec, and warnIfPerfScore > 0.5, and perfScore=0.238888]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 23 seconds]]]

Succeeded
