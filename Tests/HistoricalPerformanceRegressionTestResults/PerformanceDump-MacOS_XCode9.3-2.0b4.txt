Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/7/18 1:09:32]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.82606 secs, and comparison 6.17472 sec, and warnIfPerfScore > 0.62, and perfScore=0.6996]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.82496 secs, and comparison 4.15976 sec, and warnIfPerfScore > 0.65, and perfScore=0.471363]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.9538 secs, and comparison 11.9624 sec, and warnIfPerfScore > 1.05, and perfScore=0.799959]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.2714 secs, and comparison 4.2027 sec, and warnIfPerfScore > 0.5, and perfScore=0.148656]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 28.2055 secs, and comparison 4.87639 sec, and warnIfPerfScore > 0.68, and perfScore=0.172888]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.6753 secs, and comparison 57.9518 sec, and warnIfPerfScore > 4.3, and perfScore=3.10313]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 20.111 secs, and comparison 59.4131 sec, and warnIfPerfScore > 4, and perfScore=2.95426]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 16.319 secs, and comparison 151.768 sec, and warnIfPerfScore > 10.4, and perfScore=9.3001]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.2959 secs, and comparison 30.1793 sec, and warnIfPerfScore > 3.2, and perfScore=1.48696]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.30294 secs, and comparison 5.94305 sec, and warnIfPerfScore > 1.8, and perfScore=0.715776]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.9792 secs, and comparison 31.9747 sec, and warnIfPerfScore > 2.8, and perfScore=2.28731]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.0308 secs, and comparison 22.7776 sec, and warnIfPerfScore > 3.3, and perfScore=2.06492]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.2734 secs, and comparison 1.90581 sec, and warnIfPerfScore > 0.25, and perfScore=0.169053]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.1213 secs, and comparison 19.0044 sec, and warnIfPerfScore > 1.4, and perfScore=1.04873]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.2448 secs, and comparison 34.5022 sec, and warnIfPerfScore > 7.7, and perfScore=2.81771]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9487 secs, and comparison 4.29216 sec, and warnIfPerfScore > 1.55, and perfScore=0.331473]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 11.7678 secs, and comparison 75.9398 sec, and warnIfPerfScore > 9, and perfScore=6.4532]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 12.9179 secs, and comparison 6.62755 sec, and warnIfPerfScore > 1, and perfScore=0.513051]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.2721 secs, and comparison 70.1321 sec, and warnIfPerfScore > 7.9, and perfScore=5.28417]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.8906 secs, and comparison 7.2381 sec, and warnIfPerfScore > 0.8, and perfScore=0.561502]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 30.6308 secs, and comparison 42.3989 sec, and warnIfPerfScore > 1.7, and perfScore=1.38419]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.4943 secs, and comparison 6.14704 sec, and warnIfPerfScore > 0.55, and perfScore=0.946529]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15 secs, and comparison 6.97367 sec, and warnIfPerfScore > 0.4, and perfScore=0.464911]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78962 sec, and warnIfPerfScore > 1.1, and perfScore=0.185974]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 50 seconds]]]

Succeeded
