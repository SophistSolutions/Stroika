Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/14/18 12:14:24]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.03498 secs, and comparison 4.6232 sec, and warnIfPerfScore > 0.62, and perfScore=0.766067]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.92004 secs, and comparison 2.95754 sec, and warnIfPerfScore > 0.65, and perfScore=0.499581]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.26203 secs, and comparison 6.70754 sec, and warnIfPerfScore > 1.05, and perfScore=1.07114]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.46915 secs, and comparison 2.83823 sec, and warnIfPerfScore > 0.5, and perfScore=0.818133]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.14006 secs, and comparison 4.21968 sec, and warnIfPerfScore > 0.68, and perfScore=1.01923]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.22126 secs, and comparison 29.6147 sec, and warnIfPerfScore > 4.3, and perfScore=3.60221]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.57446 secs, and comparison 31.8463 sec, and warnIfPerfScore > 4, and perfScore=3.32618]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	30
	DETAILS:         	[baseline test 11.3118 secs, and comparison 336.562 sec, and warnIfPerfScore > 10.4, and perfScore=29.7532]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.34432 secs, and comparison 9.21331 sec, and warnIfPerfScore > 3.2, and perfScore=2.12077]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.26991 secs, and comparison 8.26658 sec, and warnIfPerfScore > 1.8, and perfScore=0.999597]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 2.18812 secs, and comparison 10.3417 sec, and warnIfPerfScore > 2.8, and perfScore=4.72631]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 6.21791 secs, and comparison 20.1949 sec, and warnIfPerfScore > 3.3, and perfScore=3.24787]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.32202 secs, and comparison 2.71353 sec, and warnIfPerfScore > 0.25, and perfScore=0.370599]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.34392 secs, and comparison 3.13688 sec, and warnIfPerfScore > 1.4, and perfScore=1.3383]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 21.349 secs, and comparison 23.1344 sec, and warnIfPerfScore > 7.7, and perfScore=1.08363]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 14.3436 secs, and comparison 2.38498 sec, and warnIfPerfScore > 1.55, and perfScore=0.166274]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 23.8753 secs, and comparison 54.0913 sec, and warnIfPerfScore > 9, and perfScore=2.26557]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.80931 secs, and comparison 4.80594 sec, and warnIfPerfScore > 1, and perfScore=0.489937]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 21.6043 secs, and comparison 49.9596 sec, and warnIfPerfScore > 7.9, and perfScore=2.31249]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.9176 secs, and comparison 5.04994 sec, and warnIfPerfScore > 0.8, and perfScore=0.462549]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.81301 secs, and comparison 11.0346 sec, and warnIfPerfScore > 1.7, and perfScore=1.41234]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15.6283 secs, and comparison 2.59754 sec, and warnIfPerfScore > 0.55, and perfScore=0.166207]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.59878 sec, and warnIfPerfScore > 0.4, and perfScore=0.106585]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.9241 sec, and warnIfPerfScore > 1.1, and perfScore=0.19494]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 3 seconds]]]

Succeeded
