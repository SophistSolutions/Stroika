Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/16/17 7:46:02]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.62 secs, and comparison 6.52744 sec, and warnIfPerfScore > 0.62, and perfScore=0.517231]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.4351 secs, and comparison 4.53338 sec, and warnIfPerfScore > 0.65, and perfScore=0.364562]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.7368 secs, and comparison 10.9949 sec, and warnIfPerfScore > 1.05, and perfScore=0.863233]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.3752 secs, and comparison 4.0714 sec, and warnIfPerfScore > 0.5, and perfScore=0.357919]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.3799 secs, and comparison 4.91538 sec, and warnIfPerfScore > 0.68, and perfScore=0.431936]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.8432 secs, and comparison 33.0801 sec, and warnIfPerfScore > 4.3, and perfScore=2.5757]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.1137 secs, and comparison 35.3319 sec, and warnIfPerfScore > 4, and perfScore=2.69427]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 12.9808 secs, and comparison 115.233 sec, and warnIfPerfScore > 10.4, and perfScore=8.87719]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.7836 secs, and comparison 17.4218 sec, and warnIfPerfScore > 3.2, and perfScore=1.36283]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.5385 secs, and comparison 16.5373 sec, and warnIfPerfScore > 1.8, and perfScore=1.2215]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.68905 secs, and comparison 15.7773 sec, and warnIfPerfScore > 2.8, and perfScore=1.62836]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.5181 secs, and comparison 39.525 sec, and warnIfPerfScore > 3.3, and perfScore=2.72247]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15.2417 secs, and comparison 3.27484 sec, and warnIfPerfScore > 0.25, and perfScore=0.21486]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 15.1794 secs, and comparison 14.5033 sec, and warnIfPerfScore > 1.4, and perfScore=0.955462]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.6641 secs, and comparison 40.6937 sec, and warnIfPerfScore > 7.7, and perfScore=2.97814]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15.9219 secs, and comparison 5.79554 sec, and warnIfPerfScore > 1.55, and perfScore=0.363998]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 13.2592 secs, and comparison 79.1125 sec, and warnIfPerfScore > 7.7, and perfScore=5.96659]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 15.9353 secs, and comparison 7.13965 sec, and warnIfPerfScore > 1, and perfScore=0.44804]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 15.3824 secs, and comparison 68.7726 sec, and warnIfPerfScore > 7.9, and perfScore=4.47085]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 15.678 secs, and comparison 7.68418 sec, and warnIfPerfScore > 0.8, and perfScore=0.490125]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.3788 secs, and comparison 16.1774 sec, and warnIfPerfScore > 1.7, and perfScore=1.20918]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.6559 secs, and comparison 5.28602 sec, and warnIfPerfScore > 0.55, and perfScore=0.417673]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.97773 sec, and warnIfPerfScore > 0.4, and perfScore=0.198515]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.67874 sec, and warnIfPerfScore > 1.1, and perfScore=0.378583]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.8193 secs, and comparison 19.0035 sec, and warnIfPerfScore > 2.4, and perfScore=1.37515]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.2098 secs, and comparison 24.6113 sec, and warnIfPerfScore > 2.8, and perfScore=1.86311]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 29 seconds]]]

Succeeded
