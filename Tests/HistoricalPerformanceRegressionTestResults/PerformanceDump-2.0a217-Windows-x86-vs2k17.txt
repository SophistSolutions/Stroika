Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/13/17 14:59:30]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.3655 secs, and comparison 6.45215 sec, and warnIfPerfScore > 0.62, and perfScore=0.521787]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.3562 secs, and comparison 4.49316 sec, and warnIfPerfScore > 0.65, and perfScore=0.363636]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.58 secs, and comparison 10.8049 sec, and warnIfPerfScore > 1, and perfScore=0.858897]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.2851 secs, and comparison 3.96732 sec, and warnIfPerfScore > 0.5, and perfScore=0.351553]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.2583 secs, and comparison 4.86695 sec, and warnIfPerfScore > 0.68, and perfScore=0.432298]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.7227 secs, and comparison 32.5527 sec, and warnIfPerfScore > 4.3, and perfScore=2.55864]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.0393 secs, and comparison 35.0087 sec, and warnIfPerfScore > 4, and perfScore=2.68486]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 12.5784 secs, and comparison 113.329 sec, and warnIfPerfScore > 10.4, and perfScore=9.00984]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.8396 secs, and comparison 16.8314 sec, and warnIfPerfScore > 3.2, and perfScore=1.3109]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.2429 secs, and comparison 15.9866 sec, and warnIfPerfScore > 1.8, and perfScore=1.20718]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.49582 secs, and comparison 15.4503 sec, and warnIfPerfScore > 2.8, and perfScore=1.62707]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.4054 secs, and comparison 38.2627 sec, and warnIfPerfScore > 3.3, and perfScore=2.65614]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.9842 secs, and comparison 3.2232 sec, and warnIfPerfScore > 0.25, and perfScore=0.215107]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 14.6646 secs, and comparison 14.0257 sec, and warnIfPerfScore > 1.4, and perfScore=0.956433]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 13.6281 secs, and comparison 39.8882 sec, and warnIfPerfScore > 7.7, and perfScore=2.92692]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.6923 secs, and comparison 5.7366 sec, and warnIfPerfScore > 1.55, and perfScore=0.365567]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 12.9963 secs, and comparison 78.1604 sec, and warnIfPerfScore > 7.7, and perfScore=6.01405]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 15.6952 secs, and comparison 7.04158 sec, and warnIfPerfScore > 1, and perfScore=0.448644]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 15.1897 secs, and comparison 67.6972 sec, and warnIfPerfScore > 7.9, and perfScore=4.4568]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 15.5029 secs, and comparison 7.61273 sec, and warnIfPerfScore > 0.8, and perfScore=0.491051]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.309 secs, and comparison 16.0367 sec, and warnIfPerfScore > 1.7, and perfScore=1.20495]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.2973 secs, and comparison 5.16533 sec, and warnIfPerfScore > 0.55, and perfScore=0.420037]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.92156 sec, and warnIfPerfScore > 0.4, and perfScore=0.194771]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.62668 sec, and warnIfPerfScore > 1.1, and perfScore=0.375112]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.8301 secs, and comparison 18.7634 sec, and warnIfPerfScore > 2.4, and perfScore=1.35671]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.1458 secs, and comparison 24.3301 sec, and warnIfPerfScore > 2.8, and perfScore=1.85079]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 14 seconds]]]

Succeeded
