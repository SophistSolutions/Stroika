Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/5/17 2:26:41]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 17.5937 secs, and comparison 9.29014 sec, and warnIfPerfScore > 0.62, and perfScore=0.528037]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 18.4882 secs, and comparison 7.12401 sec, and warnIfPerfScore > 0.65, and perfScore=0.385327]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 18.6578 secs, and comparison 15.4786 sec, and warnIfPerfScore > 1, and perfScore=0.829607]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 18.5272 secs, and comparison 14.7927 sec, and warnIfPerfScore > 1.15, and perfScore=0.798434]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14 secs, and comparison 4.41915 sec, and warnIfPerfScore > 0.5, and perfScore=0.315654]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 13.99 secs, and comparison 5.42633 sec, and warnIfPerfScore > 0.68, and perfScore=0.387871]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 15.0223 secs, and comparison 37.8023 sec, and warnIfPerfScore > 4.3, and perfScore=2.5164]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.8625 secs, and comparison 40.277 sec, and warnIfPerfScore > 4, and perfScore=2.70997]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 15.1167 secs, and comparison 128.085 sec, and warnIfPerfScore > 10.4, and perfScore=8.47311]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.7346 secs, and comparison 25.2946 sec, and warnIfPerfScore > 3.2, and perfScore=1.35016]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.2525 secs, and comparison 22.1681 sec, and warnIfPerfScore > 1.8, and perfScore=1.36398]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 16.2291 secs, and comparison 24.103 sec, and warnIfPerfScore > 2.8, and perfScore=1.48518]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 17.7231 secs, and comparison 52.2579 sec, and warnIfPerfScore > 3.3, and perfScore=2.94857]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 14.5246 secs, and comparison 2.31569 sec, and warnIfPerfScore > 0.25, and perfScore=0.159432]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.9839 secs, and comparison 16.3852 sec, and warnIfPerfScore > 1.25, and perfScore=1.02511]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 14.372 secs, and comparison 44.0993 sec, and warnIfPerfScore > 7.7, and perfScore=3.06843]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.7311 secs, and comparison 6.42371 sec, and warnIfPerfScore > 1.55, and perfScore=0.436064]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 13.8894 secs, and comparison 81.918 sec, and warnIfPerfScore > 7.7, and perfScore=5.89788]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 14.8319 secs, and comparison 7.22819 sec, and warnIfPerfScore > 1, and perfScore=0.48734]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 18.1201 secs, and comparison 89.8015 sec, and warnIfPerfScore > 7.9, and perfScore=4.95591]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 18.4998 secs, and comparison 11.0372 sec, and warnIfPerfScore > 0.8, and perfScore=0.596612]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.0285 secs, and comparison 23.1472 sec, and warnIfPerfScore > 1.7, and perfScore=1.21645]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 17.2517 secs, and comparison 6.78454 sec, and warnIfPerfScore > 0.55, and perfScore=0.393268]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.99397 sec, and warnIfPerfScore > 0.4, and perfScore=0.266264]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 15 secs, and comparison 6.73906 sec, and warnIfPerfScore > 1.1, and perfScore=0.44927]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.6779 secs, and comparison 19.6894 sec, and warnIfPerfScore > 2.4, and perfScore=1.34143]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.7611 secs, and comparison 27.1495 sec, and warnIfPerfScore > 2.8, and perfScore=1.83926]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 56 seconds]]]

Succeeded
