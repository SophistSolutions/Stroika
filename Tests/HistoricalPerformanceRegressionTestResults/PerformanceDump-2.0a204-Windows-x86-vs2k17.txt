Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/22/17 16:19:15]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.8822 secs, and comparison 5.86342 sec, and warnIfPerfScore > 0.62, and perfScore=0.538808]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.5427 secs, and comparison 4.43845 sec, and warnIfPerfScore > 0.65, and perfScore=0.420999]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 14.1594 secs, and comparison 12.4413 sec, and warnIfPerfScore > 1, and perfScore=0.878663]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 15.2318 secs, and comparison 15.024 sec, and warnIfPerfScore > 1.15, and perfScore=0.986354]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.3706 secs, and comparison 3.39918 sec, and warnIfPerfScore > 0.5, and perfScore=0.327771]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.9178 secs, and comparison 5.21511 sec, and warnIfPerfScore > 0.68, and perfScore=0.403716]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.4922 secs, and comparison 41.3202 sec, and warnIfPerfScore > 4.3, and perfScore=2.66717]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 14.6484 secs, and comparison 43.3796 sec, and warnIfPerfScore > 4, and perfScore=2.96139]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 12.1431 secs, and comparison 110.221 sec, and warnIfPerfScore > 10.4, and perfScore=9.0769]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 14.5376 secs, and comparison 24.5129 sec, and warnIfPerfScore > 3.2, and perfScore=1.68618]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.5234 secs, and comparison 21.175 sec, and warnIfPerfScore > 1.8, and perfScore=1.20839]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.0821 secs, and comparison 28.9007 sec, and warnIfPerfScore > 2.8, and perfScore=1.79707]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 15.7133 secs, and comparison 47.3947 sec, and warnIfPerfScore > 3.3, and perfScore=3.01622]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 17.531 secs, and comparison 3.79182 sec, and warnIfPerfScore > 0.25, and perfScore=0.216293]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.8405 secs, and comparison 19.2086 sec, and warnIfPerfScore > 1.25, and perfScore=1.07668]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 20.3148 secs, and comparison 62.2256 sec, and warnIfPerfScore > 7.7, and perfScore=3.06307]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 17.5941 secs, and comparison 7.68133 sec, and warnIfPerfScore > 1.55, and perfScore=0.436586]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 20.3108 secs, and comparison 61.4109 sec, and warnIfPerfScore > 7.7, and perfScore=3.02356]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 18.0496 secs, and comparison 7.2615 sec, and warnIfPerfScore > 1.4, and perfScore=0.402309]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 18.7286 secs, and comparison 76.2295 sec, and warnIfPerfScore > 7.9, and perfScore=4.07023]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 15.7903 secs, and comparison 8.41584 sec, and warnIfPerfScore > 0.8, and perfScore=0.532974]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.1405 secs, and comparison 17.1666 sec, and warnIfPerfScore > 1.7, and perfScore=1.30639]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.90987 secs, and comparison 4.34811 sec, and warnIfPerfScore > 0.55, and perfScore=0.438766]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.37549 sec, and warnIfPerfScore > 0.4, and perfScore=0.158366]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.57899 sec, and warnIfPerfScore > 1.1, and perfScore=0.371933]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.8434 secs, and comparison 23.4974 sec, and warnIfPerfScore > 2.4, and perfScore=1.39505]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.5075 secs, and comparison 28.6285 sec, and warnIfPerfScore > 2.8, and perfScore=1.84611]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 56 seconds]]]

Succeeded
