Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Mar  6 9:37:9 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.8813 secs, and comparison 5.66759 sec, and warnIfPerfScore > 0.62, and perfScore=0.477018]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7038 secs, and comparison 3.6005 sec, and warnIfPerfScore > 0.5, and perfScore=0.307635]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 11.0096 secs, and comparison 9.86755 sec, and warnIfPerfScore > 1.05, and perfScore=0.896268]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.4679 secs, and comparison 4.33419 sec, and warnIfPerfScore > 0.45, and perfScore=0.377942]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.1448 secs, and comparison 4.54744 sec, and warnIfPerfScore > 0.55, and perfScore=0.345949]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.7898 secs, and comparison 29.5891 sec, and warnIfPerfScore > 2.8, and perfScore=2.31349]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.1586 secs, and comparison 29.57 sec, and warnIfPerfScore > 2.9, and perfScore=2.24721]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 11.4956 secs, and comparison 96.9082 sec, and warnIfPerfScore > 9.7, and perfScore=8.43005]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.3178 secs, and comparison 13.2985 sec, and warnIfPerfScore > 1.6, and perfScore=1.175]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1161 secs, and comparison 13.5625 sec, and warnIfPerfScore > 1.5, and perfScore=1.03404]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.59586 secs, and comparison 13.8379 sec, and warnIfPerfScore > 2.1, and perfScore=1.60984]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 12.4397 secs, and comparison 9.86108 sec, and warnIfPerfScore > 1.3, and perfScore=0.79271]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.6233 secs, and comparison 1.76841 sec, and warnIfPerfScore > 0.18, and perfScore=0.140091]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.6386 secs, and comparison 14.8769 sec, and warnIfPerfScore > 1.3, and perfScore=1.27824]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 10.1197 secs, and comparison 8.76866 sec, and warnIfPerfScore > 1.2, and perfScore=0.866496]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.1861 secs, and comparison 2.23522 sec, and warnIfPerfScore > 0.33, and perfScore=0.219439]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.31667 secs, and comparison 46.3335 sec, and warnIfPerfScore > 6, and perfScore=4.97319]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.6702 secs, and comparison 4.14926 sec, and warnIfPerfScore > 0.5, and perfScore=0.388864]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.7233 secs, and comparison 43.4343 sec, and warnIfPerfScore > 4.4, and perfScore=4.05047]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.249 secs, and comparison 4.65349 sec, and warnIfPerfScore > 0.6, and perfScore=0.413679]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.589 secs, and comparison 19.0721 sec, and warnIfPerfScore > 1.5, and perfScore=1.22343]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.3921 secs, and comparison 4.62497 sec, and warnIfPerfScore > 0.55, and perfScore=0.321354]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 15 secs, and comparison 1.45736 sec, and warnIfPerfScore > 0.25, and perfScore=0.0971572]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.13584 sec, and warnIfPerfScore > 0.5, and perfScore=0.34239]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.2223 secs, and comparison 17.2469 sec, and warnIfPerfScore > 1.9, and perfScore=1.53684]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8626 secs, and comparison 32.094 sec, and warnIfPerfScore > 3, and perfScore=2.70548]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 7 seconds]]]

Succeeded
