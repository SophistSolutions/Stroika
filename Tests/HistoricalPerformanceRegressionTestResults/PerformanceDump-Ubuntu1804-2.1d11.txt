Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov  9 1:26:20 2018]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.87966 secs, and comparison 4.60761 sec, and warnIfPerfScore > 0.62, and perfScore=0.783653]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.8845 secs, and comparison 2.84773 sec, and warnIfPerfScore > 0.5, and perfScore=0.483937]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.28279 secs, and comparison 6.82668 sec, and warnIfPerfScore > 1.05, and perfScore=1.08657]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 3.55693 secs, and comparison 3.24646 sec, and warnIfPerfScore > 0.45, and perfScore=0.912715]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.1391 secs, and comparison 3.79914 sec, and warnIfPerfScore > 0.55, and perfScore=0.917867]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.1149 secs, and comparison 17.1468 sec, and warnIfPerfScore > 2.8, and perfScore=5.50478]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.0962 secs, and comparison 18.0544 sec, and warnIfPerfScore > 2.9, and perfScore=4.40761]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.61891 secs, and comparison 54.2842 sec, and warnIfPerfScore > 9.7, and perfScore=11.7526]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.66574 secs, and comparison 9.94773 sec, and warnIfPerfScore > 1.6, and perfScore=2.13208]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.32509 secs, and comparison 5.1787 sec, and warnIfPerfScore > 1.5, and perfScore=0.97251]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 2.30141 secs, and comparison 10.5767 sec, and warnIfPerfScore > 2.1, and perfScore=4.59575]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.084 secs, and comparison 4.2731 sec, and warnIfPerfScore > 1.3, and perfScore=1.0463]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.24992 secs, and comparison 1.5187 sec, and warnIfPerfScore > 0.18, and perfScore=0.357347]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 2.23151 secs, and comparison 3.15564 sec, and warnIfPerfScore > 1.3, and perfScore=1.41413]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.08556 secs, and comparison 7.70583 sec, and warnIfPerfScore > 1.2, and perfScore=2.49738]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.5296 secs, and comparison 1.40556 sec, and warnIfPerfScore > 0.33, and perfScore=0.103888]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.87093 secs, and comparison 42.4105 sec, and warnIfPerfScore > 6, and perfScore=14.7724]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.40839 secs, and comparison 3.9292 sec, and warnIfPerfScore > 0.5, and perfScore=0.417627]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 5.49291 secs, and comparison 40.8142 sec, and warnIfPerfScore > 4.4, and perfScore=7.43035]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.6893 secs, and comparison 3.78907 sec, and warnIfPerfScore > 0.6, and perfScore=0.354475]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.82707 secs, and comparison 10.9487 sec, and warnIfPerfScore > 1.5, and perfScore=1.39883]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 6.91474 secs, and comparison 2.03406 sec, and warnIfPerfScore > 0.55, and perfScore=0.294163]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.846039 sec, and warnIfPerfScore > 0.25, and perfScore=0.0564026]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.59933 sec, and warnIfPerfScore > 0.5, and perfScore=0.239956]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 25 seconds]]]

Succeeded
