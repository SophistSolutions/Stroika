Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 23 :22:32 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.1129 secs, and comparison 5.42839 sec, and warnIfPerfScore > 0.62, and perfScore=0.488477]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.0972 secs, and comparison 4.02387 sec, and warnIfPerfScore > 0.5, and perfScore=0.362601]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.8985 secs, and comparison 9.15299 sec, and warnIfPerfScore > 1.05, and perfScore=0.83984]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.43579 secs, and comparison 3.87376 sec, and warnIfPerfScore > 0.48, and perfScore=0.410539]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.48587 secs, and comparison 4.2251 sec, and warnIfPerfScore > 0.55, and perfScore=0.445409]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.9939 secs, and comparison 27.3878 sec, and warnIfPerfScore > 2.9, and perfScore=2.49119]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.5196 secs, and comparison 29.103 sec, and warnIfPerfScore > 2.9, and perfScore=2.52638]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 10.6105 secs, and comparison 91.7946 sec, and warnIfPerfScore > 9.7, and perfScore=8.65129]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.1054 secs, and comparison 14.7859 sec, and warnIfPerfScore > 1.6, and perfScore=1.33141]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.0383 secs, and comparison 14.7949 sec, and warnIfPerfScore > 1.5, and perfScore=1.22898]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.36053 secs, and comparison 15.2585 sec, and warnIfPerfScore > 2.1, and perfScore=1.82506]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 11.8032 secs, and comparison 11.6178 sec, and warnIfPerfScore > 1.3, and perfScore=0.984285]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.357 secs, and comparison 1.50338 sec, and warnIfPerfScore > 0.18, and perfScore=0.121662]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3247 secs, and comparison 12.6344 sec, and warnIfPerfScore > 1.3, and perfScore=1.02513]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.66737 secs, and comparison 8.80519 sec, and warnIfPerfScore > 1.2, and perfScore=0.910815]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.1254 secs, and comparison 2.23641 sec, and warnIfPerfScore > 0.33, and perfScore=0.220871]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.33181 secs, and comparison 45.9921 sec, and warnIfPerfScore > 6, and perfScore=4.92852]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.1579 secs, and comparison 4.12285 sec, and warnIfPerfScore > 0.5, and perfScore=0.405878]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.5136 secs, and comparison 40.9068 sec, and warnIfPerfScore > 4.4, and perfScore=3.89086]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.3016 secs, and comparison 4.62843 sec, and warnIfPerfScore > 0.6, and perfScore=0.449294]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.4931 secs, and comparison 18.1795 sec, and warnIfPerfScore > 1.5, and perfScore=1.25435]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.0392 secs, and comparison 4.23998 sec, and warnIfPerfScore > 0.55, and perfScore=0.325172]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.5538 sec, and warnIfPerfScore > 0.25, and perfScore=0.103587]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.51383 sec, and warnIfPerfScore > 0.5, and perfScore=0.367589]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.3816 secs, and comparison 17.1566 sec, and warnIfPerfScore > 1.9, and perfScore=1.38565]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9527 secs, and comparison 32.3065 sec, and warnIfPerfScore > 3, and perfScore=2.70287]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 46 seconds]]]

Succeeded
