Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jun 17 1:53:37 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.68154 secs, and comparison 5.2646 sec, and warnIfPerfScore > 0.62, and perfScore=0.787933]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.81292 secs, and comparison 3.74217 sec, and warnIfPerfScore > 0.5, and perfScore=0.549275]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.56517 secs, and comparison 8.03314 sec, and warnIfPerfScore > 1.05, and perfScore=0.937884]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.07016 secs, and comparison 4.67 sec, and warnIfPerfScore > 0.48, and perfScore=1.52109]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.9405 secs, and comparison 5.11872 sec, and warnIfPerfScore > 0.55, and perfScore=1.74077]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.3569 secs, and comparison 32.4686 sec, and warnIfPerfScore > 2.9, and perfScore=2.43085]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.0304 secs, and comparison 35.4731 sec, and warnIfPerfScore > 2.9, and perfScore=2.72234]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 14.5345 secs, and comparison 138.33 sec, and warnIfPerfScore > 9.7, and perfScore=9.51736]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.91633 secs, and comparison 10.7625 sec, and warnIfPerfScore > 1.6, and perfScore=1.55609]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 8.54135 secs, and comparison 6.82856 sec, and warnIfPerfScore > 1.5, and perfScore=0.79947]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.86318 secs, and comparison 13.8931 sec, and warnIfPerfScore > 2.1, and perfScore=2.36955]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 7.86659 secs, and comparison 6.39577 sec, and warnIfPerfScore > 1.3, and perfScore=0.81303]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.20387 secs, and comparison 3.33685 sec, and warnIfPerfScore > 0.18, and perfScore=0.406741]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.95668 secs, and comparison 8.73665 sec, and warnIfPerfScore > 1.3, and perfScore=1.25586]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.36503 secs, and comparison 10.9202 sec, and warnIfPerfScore > 1.2, and perfScore=1.71566]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 5.39539 secs, and comparison 1.55486 sec, and warnIfPerfScore > 0.33, and perfScore=0.288183]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 6.28985 secs, and comparison 47.5541 sec, and warnIfPerfScore > 6, and perfScore=7.56045]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 5.522 secs, and comparison 3.99741 sec, and warnIfPerfScore > 0.5, and perfScore=0.723907]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 7.56699 secs, and comparison 42.1734 sec, and warnIfPerfScore > 4.4, and perfScore=5.57333]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 5.46456 secs, and comparison 3.79637 sec, and warnIfPerfScore > 0.6, and perfScore=0.694726]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.9767 secs, and comparison 19.4228 sec, and warnIfPerfScore > 1.5, and perfScore=1.21569]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.0502 secs, and comparison 4.84173 sec, and warnIfPerfScore > 0.55, and perfScore=0.401797]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.6719 sec, and warnIfPerfScore > 0.25, and perfScore=0.11146]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.17608 sec, and warnIfPerfScore > 0.5, and perfScore=0.278405]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 48 seconds]]]

Succeeded
