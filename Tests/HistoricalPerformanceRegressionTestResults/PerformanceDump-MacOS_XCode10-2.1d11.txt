Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov  8 2:42:19 2018]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.79607 secs, and comparison 6.17195 sec, and warnIfPerfScore > 0.62, and perfScore=0.701671]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.79527 secs, and comparison 5.19744 sec, and warnIfPerfScore > 0.5, and perfScore=0.590936]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 14.9734 secs, and comparison 11.7193 sec, and warnIfPerfScore > 1.05, and perfScore=0.782675]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.5815 secs, and comparison 5.06675 sec, and warnIfPerfScore > 0.45, and perfScore=0.183701]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.8414 secs, and comparison 5.1372 sec, and warnIfPerfScore > 0.55, and perfScore=0.184517]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 18.941 secs, and comparison 53.1025 sec, and warnIfPerfScore > 2.8, and perfScore=2.80358]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 20.1786 secs, and comparison 52.7151 sec, and warnIfPerfScore > 2.9, and perfScore=2.61243]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 16.0985 secs, and comparison 149.8 sec, and warnIfPerfScore > 9.7, and perfScore=9.30523]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.5477 secs, and comparison 27.1377 sec, and warnIfPerfScore > 1.6, and perfScore=1.38828]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.21083 secs, and comparison 5.90299 sec, and warnIfPerfScore > 1.5, and perfScore=0.718927]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.6041 secs, and comparison 32.2044 sec, and warnIfPerfScore > 2.1, and perfScore=2.36726]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.3673 secs, and comparison 6.238 sec, and warnIfPerfScore > 1.3, and perfScore=0.548767]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.9274 secs, and comparison 1.89788 sec, and warnIfPerfScore > 0.18, and perfScore=0.15912]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.2075 secs, and comparison 17.0124 sec, and warnIfPerfScore > 1.3, and perfScore=1.04966]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2591 secs, and comparison 13.2106 sec, and warnIfPerfScore > 1.2, and perfScore=1.07762]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.915 secs, and comparison 2.4072 sec, and warnIfPerfScore > 0.33, and perfScore=0.186388]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.7344 secs, and comparison 54.8103 sec, and warnIfPerfScore > 6, and perfScore=4.67089]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.9295 secs, and comparison 5.06729 sec, and warnIfPerfScore > 0.5, and perfScore=0.391917]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.1063 secs, and comparison 50.4442 sec, and warnIfPerfScore > 4.4, and perfScore=3.84884]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.888 secs, and comparison 4.93476 sec, and warnIfPerfScore > 0.6, and perfScore=0.382896]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 30.2779 secs, and comparison 42.2705 sec, and warnIfPerfScore > 1.5, and perfScore=1.39609]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.7142 secs, and comparison 5.67515 sec, and warnIfPerfScore > 0.55, and perfScore=0.1429]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15 secs, and comparison 6.39311 sec, and warnIfPerfScore > 0.25, and perfScore=0.426207]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85545 sec, and warnIfPerfScore > 0.5, and perfScore=0.25703]
	                 	Test_Optional_ is FASTER

[[[Tests took: 15 minutes, 38 seconds]]]

Succeeded
