Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/23/18 9:17:39]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.4743 secs, and comparison 6.51959 sec, and warnIfPerfScore > 0.62, and perfScore=0.568191]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.9301 secs, and comparison 3.60518 sec, and warnIfPerfScore > 0.65, and perfScore=0.32984]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.8888 secs, and comparison 9.25437 sec, and warnIfPerfScore > 1.05, and perfScore=0.849901]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.79566 secs, and comparison 3.45343 sec, and warnIfPerfScore > 0.5, and perfScore=0.352547]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.68877 secs, and comparison 4.35872 sec, and warnIfPerfScore > 0.68, and perfScore=0.449873]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.4242 secs, and comparison 29.2182 sec, and warnIfPerfScore > 4.3, and perfScore=2.55756]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.5968 secs, and comparison 31.0676 sec, and warnIfPerfScore > 4, and perfScore=2.67897]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 11.7076 secs, and comparison 95.5828 sec, and warnIfPerfScore > 10.4, and perfScore=8.16415]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.1108 secs, and comparison 15.6298 sec, and warnIfPerfScore > 3.2, and perfScore=1.40672]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.1106 secs, and comparison 12.8682 sec, and warnIfPerfScore > 1.8, and perfScore=1.27274]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.14162 secs, and comparison 15.1417 sec, and warnIfPerfScore > 2.8, and perfScore=1.85979]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.7713 secs, and comparison 31.7544 sec, and warnIfPerfScore > 3.3, and perfScore=2.69762]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.3718 secs, and comparison 1.34938 sec, and warnIfPerfScore > 0.25, and perfScore=0.109069]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.252 secs, and comparison 11.8004 sec, and warnIfPerfScore > 1.4, and perfScore=1.04873]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.58189 secs, and comparison 36.0169 sec, and warnIfPerfScore > 7.7, and perfScore=3.75885]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.073 secs, and comparison 4.71754 sec, and warnIfPerfScore > 1.55, and perfScore=0.468336]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 9.28089 secs, and comparison 70.3898 sec, and warnIfPerfScore > 9, and perfScore=7.58438]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 10.2329 secs, and comparison 6.24941 sec, and warnIfPerfScore > 1, and perfScore=0.610716]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 10.4491 secs, and comparison 62.0393 sec, and warnIfPerfScore > 7.9, and perfScore=5.93727]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.88345 secs, and comparison 6.95709 sec, and warnIfPerfScore > 0.8, and perfScore=0.703913]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.8301 secs, and comparison 15.6519 sec, and warnIfPerfScore > 1.7, and perfScore=1.32305]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.9815 secs, and comparison 4.4294 sec, and warnIfPerfScore > 0.55, and perfScore=0.341208]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.60645 sec, and warnIfPerfScore > 0.4, and perfScore=0.173763]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.61916 sec, and warnIfPerfScore > 1.1, and perfScore=0.307944]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.1785 secs, and comparison 15.7273 sec, and warnIfPerfScore > 2.4, and perfScore=1.2914]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.016 secs, and comparison 31.9352 sec, and warnIfPerfScore > 2.9, and perfScore=2.65773]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 15 seconds]]]

Succeeded
