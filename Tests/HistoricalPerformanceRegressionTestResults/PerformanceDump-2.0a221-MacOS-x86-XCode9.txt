Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/24/17 21:42:03]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.09668 secs, and comparison 8.78721 sec, and warnIfPerfScore > 0.62, and perfScore=0.96598]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.09344 secs, and comparison 4.16142 sec, and warnIfPerfScore > 0.65, and perfScore=0.457629]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 15.5481 secs, and comparison 11.5268 sec, and warnIfPerfScore > 1.05, and perfScore=0.741362]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.7345 secs, and comparison 4.45702 sec, and warnIfPerfScore > 0.5, and perfScore=0.166714]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 25.7452 secs, and comparison 5.41782 sec, and warnIfPerfScore > 0.68, and perfScore=0.21044]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.0705 secs, and comparison 57.5779 sec, and warnIfPerfScore > 4.3, and perfScore=3.18629]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.6526 secs, and comparison 60.6934 sec, and warnIfPerfScore > 4, and perfScore=3.08832]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 15.7832 secs, and comparison 153.87 sec, and warnIfPerfScore > 10.4, and perfScore=9.74901]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 19.4014 secs, and comparison 29.9663 sec, and warnIfPerfScore > 3.2, and perfScore=1.54454]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.23152 secs, and comparison 5.92108 sec, and warnIfPerfScore > 1.8, and perfScore=0.719317]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.3855 secs, and comparison 31.412 sec, and warnIfPerfScore > 2.8, and perfScore=2.34671]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.8801 secs, and comparison 25.8086 sec, and warnIfPerfScore > 3.3, and perfScore=2.17243]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.3242 secs, and comparison 3.48856 sec, and warnIfPerfScore > 0.25, and perfScore=0.283065]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.88 secs, and comparison 18.4942 sec, and warnIfPerfScore > 1.4, and perfScore=1.03435]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8582 secs, and comparison 32.1537 sec, and warnIfPerfScore > 7.7, and perfScore=2.71151]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.8161 secs, and comparison 3.83112 sec, and warnIfPerfScore > 1.55, and perfScore=0.354206]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 11.3409 secs, and comparison 75.2538 sec, and warnIfPerfScore > 7.7, and perfScore=6.6356]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.7928 secs, and comparison 6.456 sec, and warnIfPerfScore > 1, and perfScore=0.598176]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7575 secs, and comparison 68.84 sec, and warnIfPerfScore > 7.9, and perfScore=5.39602]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8258 secs, and comparison 6.74461 sec, and warnIfPerfScore > 0.8, and perfScore=0.623012]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.7707 secs, and comparison 40.8741 sec, and warnIfPerfScore > 1.7, and perfScore=1.24727]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.80404 secs, and comparison 6.73533 sec, and warnIfPerfScore > 0.55, and perfScore=0.989901]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.90721 sec, and warnIfPerfScore > 0.4, and perfScore=0.393814]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23016 sec, and warnIfPerfScore > 1.1, and perfScore=0.215344]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 43 seconds]]]

Succeeded
