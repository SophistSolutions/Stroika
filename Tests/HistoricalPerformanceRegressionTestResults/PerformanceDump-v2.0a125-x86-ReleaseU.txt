Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/13/16 12:48:04]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.3736 secs, and comparison 6.60074 sec, and warnIfPerfScore > 0.5, and perfScore=0.459226]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.2731 secs, and comparison 4.29834 sec, and warnIfPerfScore > 0.35, and perfScore=0.301149]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 14.8297 secs, and comparison 12.1413 sec, and warnIfPerfScore > 0.89, and perfScore=0.818716]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.3768 secs, and comparison 14.0901 sec, and warnIfPerfScore > 1.15, and perfScore=0.980056]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.4849 secs, and comparison 3.54181 sec, and warnIfPerfScore > 0.5, and perfScore=0.228727]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.2213 secs, and comparison 4.59636 sec, and warnIfPerfScore > 0.68, and perfScore=0.301968]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 16.4442 secs, and comparison 41.8707 sec, and warnIfPerfScore > 4.3, and perfScore=2.54622]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.1622 secs, and comparison 42.1869 sec, and warnIfPerfScore > 4, and perfScore=2.61022]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 15.326 secs, and comparison 103.83 sec, and warnIfPerfScore > 9.1, and perfScore=6.77478]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.0649 secs, and comparison 22.7855 sec, and warnIfPerfScore > 2.45, and perfScore=1.51249]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.8108 secs, and comparison 13.7939 sec, and warnIfPerfScore > 1.65, and perfScore=0.998779]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.9301 secs, and comparison 30.8914 sec, and warnIfPerfScore > 2.7, and perfScore=2.06907]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.1525 secs, and comparison 41.3109 sec, and warnIfPerfScore > 3, and perfScore=2.72634]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.2226 secs, and comparison 1.74381 sec, and warnIfPerfScore > 0.14, and perfScore=0.114554]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.5915 secs, and comparison 16.8897 sec, and warnIfPerfScore > 1.25, and perfScore=1.1575]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.1479 secs, and comparison 36.2064 sec, and warnIfPerfScore > 7.7, and perfScore=2.24217]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.7897 secs, and comparison 4.81633 sec, and warnIfPerfScore > 1.55, and perfScore=0.325653]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.5687 secs, and comparison 35.6933 sec, and warnIfPerfScore > 7.7, and perfScore=2.29263]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.8952 secs, and comparison 4.86133 sec, and warnIfPerfScore > 1.4, and perfScore=0.326368]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 14.5991 secs, and comparison 60.2851 sec, and warnIfPerfScore > 7.9, and perfScore=4.12936]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 14.4718 secs, and comparison 6.9072 sec, and warnIfPerfScore > 0.8, and perfScore=0.477287]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.8735 secs, and comparison 19.3143 sec, and warnIfPerfScore > 1.6, and perfScore=1.29858]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.9938 secs, and comparison 4.11966 sec, and warnIfPerfScore > 0.32, and perfScore=0.274759]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.17543 sec, and warnIfPerfScore > 0.4, and perfScore=0.145028]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.86408 sec, and warnIfPerfScore > 1.1, and perfScore=0.324272]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.7041 secs, and comparison 21.7795 sec, and warnIfPerfScore > 2.4, and perfScore=1.48118]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.9978 secs, and comparison 27.4209 sec, and warnIfPerfScore > 2.8, and perfScore=1.82832]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 7 seconds]]]

