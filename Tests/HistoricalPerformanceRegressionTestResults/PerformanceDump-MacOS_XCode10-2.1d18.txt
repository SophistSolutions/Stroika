Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  5 23:41:2 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.4909 secs, and comparison 6.78823 sec, and warnIfPerfScore > 0.62, and perfScore=0.647059]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.5928 secs, and comparison 5.13753 sec, and warnIfPerfScore > 0.5, and perfScore=0.485002]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 17.7395 secs, and comparison 14.4321 sec, and warnIfPerfScore > 1.05, and perfScore=0.813557]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 37.1195 secs, and comparison 5.15607 sec, and warnIfPerfScore > 0.45, and perfScore=0.138905]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 40.4794 secs, and comparison 5.22926 sec, and warnIfPerfScore > 0.55, and perfScore=0.129183]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 24.4484 secs, and comparison 60.7862 sec, and warnIfPerfScore > 2.8, and perfScore=2.48631]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 28.9167 secs, and comparison 62.9756 sec, and warnIfPerfScore > 2.9, and perfScore=2.17783]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 21.6512 secs, and comparison 189.359 sec, and warnIfPerfScore > 9.7, and perfScore=8.74586]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.1606 secs, and comparison 27.1522 sec, and warnIfPerfScore > 1.6, and perfScore=1.34679]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.35582 secs, and comparison 6.13056 sec, and warnIfPerfScore > 1.5, and perfScore=0.733687]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.2501 secs, and comparison 31.8342 sec, and warnIfPerfScore > 2.1, and perfScore=2.23397]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.087 secs, and comparison 6.22721 sec, and warnIfPerfScore > 1.3, and perfScore=0.561667]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.7043 secs, and comparison 1.88353 sec, and warnIfPerfScore > 0.18, and perfScore=0.160926]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.0504 secs, and comparison 17.0201 sec, and warnIfPerfScore > 1.3, and perfScore=1.06042]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1685 secs, and comparison 13.3116 sec, and warnIfPerfScore > 1.2, and perfScore=1.09394]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 12.8958 secs, and comparison 2.36525 sec, and warnIfPerfScore > 0.33, and perfScore=0.183412]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.6784 secs, and comparison 54.8376 sec, and warnIfPerfScore > 6, and perfScore=4.69565]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.9024 secs, and comparison 5.0674 sec, and warnIfPerfScore > 0.5, and perfScore=0.39275]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.0779 secs, and comparison 50.4982 sec, and warnIfPerfScore > 4.4, and perfScore=3.86135]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.8817 secs, and comparison 4.93217 sec, and warnIfPerfScore > 0.6, and perfScore=0.382883]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 30.1162 secs, and comparison 41.0664 sec, and warnIfPerfScore > 1.5, and perfScore=1.3636]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 39.8501 secs, and comparison 6.06381 sec, and warnIfPerfScore > 0.55, and perfScore=0.152165]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15 secs, and comparison 6.49554 sec, and warnIfPerfScore > 0.25, and perfScore=0.433036]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85619 sec, and warnIfPerfScore > 0.5, and perfScore=0.257079]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 18 seconds]]]

Succeeded
