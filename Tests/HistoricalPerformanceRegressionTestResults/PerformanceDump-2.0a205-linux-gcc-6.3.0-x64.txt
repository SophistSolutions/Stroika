Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/7/17 8:29:27]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.53908 secs, and comparison 4.43944 sec, and warnIfPerfScore > 0.62, and perfScore=0.801476]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.60453 secs, and comparison 2.75131 sec, and warnIfPerfScore > 0.65, and perfScore=0.490908]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.50368 secs, and comparison 8.70421 sec, and warnIfPerfScore > 1, and perfScore=1.02358]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.15853 secs, and comparison 8.23623 sec, and warnIfPerfScore > 1.15, and perfScore=1.00952]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.66659 secs, and comparison 2.83726 sec, and warnIfPerfScore > 0.5, and perfScore=0.5007]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 6.93464 secs, and comparison 4.85672 sec, and warnIfPerfScore > 0.68, and perfScore=0.700356]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 9.84342 secs, and comparison 34.4297 sec, and warnIfPerfScore > 4.3, and perfScore=3.49774]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.2789 secs, and comparison 35.1483 sec, and warnIfPerfScore > 4, and perfScore=3.41947]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 7.64581 secs, and comparison 102.487 sec, and warnIfPerfScore > 10.4, and perfScore=13.4044]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.473 secs, and comparison 13.9967 sec, and warnIfPerfScore > 3.2, and perfScore=1.21997]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.2732 secs, and comparison 5.40421 sec, and warnIfPerfScore > 1.8, and perfScore=1.02484]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 5.72235 secs, and comparison 19.5631 sec, and warnIfPerfScore > 2.8, and perfScore=3.41871]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 6.00916 secs, and comparison 30.1262 sec, and warnIfPerfScore > 3.3, and perfScore=5.01339]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.10887 secs, and comparison 2.34049 sec, and warnIfPerfScore > 0.25, and perfScore=0.383129]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.5129 secs, and comparison 6.03931 sec, and warnIfPerfScore > 1.25, and perfScore=1.09549]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.15068 secs, and comparison 30.6144 sec, and warnIfPerfScore > 7.7, and perfScore=3.34559]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.91929 secs, and comparison 3.36887 sec, and warnIfPerfScore > 1.55, and perfScore=0.425401]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.01822 secs, and comparison 30.3916 sec, and warnIfPerfScore > 7.7, and perfScore=3.37003]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.09918 secs, and comparison 3.38878 sec, and warnIfPerfScore > 1.4, and perfScore=0.418411]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 6.32982 secs, and comparison 58.9277 sec, and warnIfPerfScore > 7.9, and perfScore=9.30953]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.57963 secs, and comparison 6.06945 sec, and warnIfPerfScore > 0.8, and perfScore=0.800758]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.3388 secs, and comparison 13.7573 sec, and warnIfPerfScore > 1.7, and perfScore=1.2133]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.6296 secs, and comparison 4.32635 sec, and warnIfPerfScore > 0.55, and perfScore=0.26016]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56755 sec, and warnIfPerfScore > 0.4, and perfScore=0.104503]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.6077 sec, and warnIfPerfScore > 1.1, and perfScore=0.240513]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 25 seconds]]]

Succeeded
