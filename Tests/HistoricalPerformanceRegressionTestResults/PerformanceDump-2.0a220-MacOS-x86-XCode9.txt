Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/19/17 11:28:38]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.09633 secs, and comparison 8.7846 sec, and warnIfPerfScore > 0.62, and perfScore=0.96573]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.09131 secs, and comparison 4.16082 sec, and warnIfPerfScore > 0.65, and perfScore=0.45767]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.4736 secs, and comparison 11.5385 sec, and warnIfPerfScore > 1.05, and perfScore=0.745686]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.663 secs, and comparison 4.57262 sec, and warnIfPerfScore > 0.5, and perfScore=0.171497]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.9384 secs, and comparison 5.61912 sec, and warnIfPerfScore > 0.68, and perfScore=0.208591]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.7492 secs, and comparison 58.497 sec, and warnIfPerfScore > 4.3, and perfScore=3.11997]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 20.1585 secs, and comparison 61.0589 sec, and warnIfPerfScore > 4, and perfScore=3.02894]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.8
	DETAILS:         	[baseline test 15.7985 secs, and comparison 154.041 sec, and warnIfPerfScore > 10.4, and perfScore=9.75034]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.1178 secs, and comparison 31.0817 sec, and warnIfPerfScore > 3.2, and perfScore=1.54499]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.2467 secs, and comparison 5.92814 sec, and warnIfPerfScore > 1.8, and perfScore=0.718849]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.6101 secs, and comparison 31.6164 sec, and warnIfPerfScore > 2.8, and perfScore=2.323]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.8688 secs, and comparison 25.985 sec, and warnIfPerfScore > 3.3, and perfScore=2.18935]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.4982 secs, and comparison 3.49936 sec, and warnIfPerfScore > 0.25, and perfScore=0.279989]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.0366 secs, and comparison 18.4947 sec, and warnIfPerfScore > 1.4, and perfScore=1.0254]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.7048 secs, and comparison 32.1116 sec, and warnIfPerfScore > 7.7, and perfScore=2.74347]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.7795 secs, and comparison 3.83508 sec, and warnIfPerfScore > 1.55, and perfScore=0.355777]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 11.1414 secs, and comparison 75.2786 sec, and warnIfPerfScore > 7.7, and perfScore=6.75666]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.743 secs, and comparison 6.44933 sec, and warnIfPerfScore > 1, and perfScore=0.600328]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.6582 secs, and comparison 68.9089 sec, and warnIfPerfScore > 7.9, and perfScore=5.44381]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8424 secs, and comparison 6.7446 sec, and warnIfPerfScore > 0.8, and perfScore=0.622059]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 33.5278 secs, and comparison 40.0626 sec, and warnIfPerfScore > 1.7, and perfScore=1.19491]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.749 secs, and comparison 6.7 sec, and warnIfPerfScore > 0.55, and perfScore=0.99274]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.82528 sec, and warnIfPerfScore > 0.4, and perfScore=0.388352]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23012 sec, and warnIfPerfScore > 1.1, and perfScore=0.215342]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 49 seconds]]]

Succeeded
