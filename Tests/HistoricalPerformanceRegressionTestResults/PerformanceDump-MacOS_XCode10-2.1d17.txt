Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 28 4:36:21 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.98374 secs, and comparison 7.11859 sec, and warnIfPerfScore > 0.62, and perfScore=0.792386]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.6251 secs, and comparison 5.31221 sec, and warnIfPerfScore > 0.5, and perfScore=0.499968]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 17.9638 secs, and comparison 12.5549 sec, and warnIfPerfScore > 1.05, and perfScore=0.698901]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 34.904 secs, and comparison 6.00512 sec, and warnIfPerfScore > 0.45, and perfScore=0.172047]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 30.247 secs, and comparison 5.35079 sec, and warnIfPerfScore > 0.55, and perfScore=0.176903]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 27.9973 secs, and comparison 65.6557 sec, and warnIfPerfScore > 2.8, and perfScore=2.34507]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 28.933 secs, and comparison 64.1401 sec, and warnIfPerfScore > 2.9, and perfScore=2.21685]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 21.2663 secs, and comparison 160.133 sec, and warnIfPerfScore > 9.7, and perfScore=7.52987]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 20.5082 secs, and comparison 28.8057 sec, and warnIfPerfScore > 1.6, and perfScore=1.40459]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 8.33546 secs, and comparison 5.93798 sec, and warnIfPerfScore > 1.5, and perfScore=0.712376]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 15.1934 secs, and comparison 32.2882 sec, and warnIfPerfScore > 2.1, and perfScore=2.12514]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.2867 secs, and comparison 6.22075 sec, and warnIfPerfScore > 1.3, and perfScore=0.551157]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.8754 secs, and comparison 1.88127 sec, and warnIfPerfScore > 0.18, and perfScore=0.158417]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.1354 secs, and comparison 16.9538 sec, and warnIfPerfScore > 1.3, and perfScore=1.05072]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4637 secs, and comparison 13.1636 sec, and warnIfPerfScore > 1.2, and perfScore=1.05616]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 12.906 secs, and comparison 2.36725 sec, and warnIfPerfScore > 0.33, and perfScore=0.183423]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 12.0008 secs, and comparison 54.924 sec, and warnIfPerfScore > 6, and perfScore=4.57671]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.9098 secs, and comparison 5.15858 sec, and warnIfPerfScore > 0.5, and perfScore=0.399586]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.4347 secs, and comparison 50.4449 sec, and warnIfPerfScore > 4.4, and perfScore=3.75482]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.9369 secs, and comparison 4.93665 sec, and warnIfPerfScore > 0.6, and perfScore=0.381593]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.444 secs, and comparison 41.2641 sec, and warnIfPerfScore > 1.5, and perfScore=1.40144]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 40.1127 secs, and comparison 6.03568 sec, and warnIfPerfScore > 0.55, and perfScore=0.150468]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15 secs, and comparison 6.18665 sec, and warnIfPerfScore > 0.25, and perfScore=0.412443]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.86106 sec, and warnIfPerfScore > 0.5, and perfScore=0.257404]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 8 seconds]]]

Succeeded
