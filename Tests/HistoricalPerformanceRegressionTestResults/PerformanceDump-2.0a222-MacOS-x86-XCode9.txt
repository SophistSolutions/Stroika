Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 11/20/17 16:57:17]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.11557 secs, and comparison 7.36736 sec, and warnIfPerfScore > 0.62, and perfScore=0.808217]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.1298 secs, and comparison 4.16052 sec, and warnIfPerfScore > 0.65, and perfScore=0.455707]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 15.6986 secs, and comparison 11.5187 sec, and warnIfPerfScore > 1.05, and perfScore=0.733742]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.8967 secs, and comparison 4.4643 sec, and warnIfPerfScore > 0.5, and perfScore=0.16598]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 25.7434 secs, and comparison 5.49711 sec, and warnIfPerfScore > 0.68, and perfScore=0.213535]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.6422 secs, and comparison 57.2393 sec, and warnIfPerfScore > 4.3, and perfScore=3.07042]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.9962 secs, and comparison 60.2544 sec, and warnIfPerfScore > 4, and perfScore=3.17191]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.9
	DETAILS:         	[baseline test 15.444 secs, and comparison 153.636 sec, and warnIfPerfScore > 10.4, and perfScore=9.94792]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.8889 secs, and comparison 31.061 sec, and warnIfPerfScore > 3.2, and perfScore=1.56173]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.24594 secs, and comparison 5.92945 sec, and warnIfPerfScore > 1.8, and perfScore=0.719076]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.3218 secs, and comparison 31.7068 sec, and warnIfPerfScore > 2.8, and perfScore=2.38006]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.8078 secs, and comparison 25.7046 sec, and warnIfPerfScore > 3.3, and perfScore=2.17692]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.3515 secs, and comparison 3.44651 sec, and warnIfPerfScore > 0.25, and perfScore=0.279035]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.9716 secs, and comparison 18.5105 sec, and warnIfPerfScore > 1.4, and perfScore=1.02998]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8119 secs, and comparison 32.1069 sec, and warnIfPerfScore > 7.7, and perfScore=2.71819]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.8051 secs, and comparison 3.83155 sec, and warnIfPerfScore > 1.55, and perfScore=0.354607]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 11.3461 secs, and comparison 75.2678 sec, and warnIfPerfScore > 7.7, and perfScore=6.63379]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 10.7563 secs, and comparison 6.51496 sec, and warnIfPerfScore > 1, and perfScore=0.605687]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7922 secs, and comparison 68.6271 sec, and warnIfPerfScore > 7.9, and perfScore=5.36475]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8292 secs, and comparison 6.74903 sec, and warnIfPerfScore > 0.8, and perfScore=0.623226]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.3775 secs, and comparison 39.5083 sec, and warnIfPerfScore > 1.7, and perfScore=1.22024]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.83118 secs, and comparison 6.8346 sec, and warnIfPerfScore > 0.55, and perfScore=1.0005]
	                 	BLOB is ***SLOWER***

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.79596 sec, and warnIfPerfScore > 0.4, and perfScore=0.386398]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23076 sec, and warnIfPerfScore > 1.1, and perfScore=0.215384]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 41 seconds]]]

Succeeded
