Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 21 14:53:55 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.2276 secs, and comparison 5.40996 sec, and warnIfPerfScore > 0.62, and perfScore=0.481846]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.1426 secs, and comparison 3.58626 sec, and warnIfPerfScore > 0.5, and perfScore=0.321852]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.1156 secs, and comparison 9.28117 sec, and warnIfPerfScore > 1.05, and perfScore=0.834968]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.64018 secs, and comparison 3.89818 sec, and warnIfPerfScore > 0.45, and perfScore=0.404368]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.52353 secs, and comparison 4.19933 sec, and warnIfPerfScore > 0.55, and perfScore=0.440942]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.3652 secs, and comparison 28.0854 sec, and warnIfPerfScore > 2.8, and perfScore=2.47118]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.79 secs, and comparison 30.2533 sec, and warnIfPerfScore > 2.9, and perfScore=2.56602]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 10.7266 secs, and comparison 94.2458 sec, and warnIfPerfScore > 9.7, and perfScore=8.78618]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.548 secs, and comparison 14.8451 sec, and warnIfPerfScore > 1.6, and perfScore=1.28552]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.105 secs, and comparison 14.8605 sec, and warnIfPerfScore > 1.5, and perfScore=1.22763]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.68155 secs, and comparison 15.7204 sec, and warnIfPerfScore > 2.1, and perfScore=1.81078]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.8898 secs, and comparison 12.1662 sec, and warnIfPerfScore > 1.3, and perfScore=1.02325]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.5469 secs, and comparison 1.49227 sec, and warnIfPerfScore > 0.18, and perfScore=0.118936]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4404 secs, and comparison 11.8909 sec, and warnIfPerfScore > 1.3, and perfScore=1.03938]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.78349 secs, and comparison 8.59941 sec, and warnIfPerfScore > 1.2, and perfScore=0.878972]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.2304 secs, and comparison 2.21069 sec, and warnIfPerfScore > 0.33, and perfScore=0.216091]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.5167 secs, and comparison 46.8511 sec, and warnIfPerfScore > 6, and perfScore=4.92303]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.4836 secs, and comparison 4.17716 sec, and warnIfPerfScore > 0.5, and perfScore=0.398449]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.8604 secs, and comparison 42.4426 sec, and warnIfPerfScore > 4.4, and perfScore=3.90802]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.2842 secs, and comparison 4.61858 sec, and warnIfPerfScore > 0.6, and perfScore=0.449093]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.5759 secs, and comparison 17.8743 sec, and warnIfPerfScore > 1.5, and perfScore=1.22629]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.1995 secs, and comparison 4.34216 sec, and warnIfPerfScore > 0.55, and perfScore=0.328964]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.55866 sec, and warnIfPerfScore > 0.25, and perfScore=0.10391]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.45324 sec, and warnIfPerfScore > 0.5, and perfScore=0.363549]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.8513 secs, and comparison 18.1098 sec, and warnIfPerfScore > 1.9, and perfScore=1.40919]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.5653 secs, and comparison 33.2464 sec, and warnIfPerfScore > 3, and perfScore=2.64589]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 54 seconds]]]

Succeeded
