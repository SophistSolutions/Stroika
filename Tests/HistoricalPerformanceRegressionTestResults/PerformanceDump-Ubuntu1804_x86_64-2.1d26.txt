Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jun 15 12:14:41 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 11.8334 secs, and comparison 9.4117 sec, and warnIfPerfScore > 0.62, and perfScore=0.795349]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 12.0035 secs, and comparison 5.72875 sec, and warnIfPerfScore > 0.5, and perfScore=0.477255]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4614 secs, and comparison 13.721 sec, and warnIfPerfScore > 1.05, and perfScore=1.10108]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.75727 secs, and comparison 7.36329 sec, and warnIfPerfScore > 0.48, and perfScore=1.08968]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.15657 secs, and comparison 8.78234 sec, and warnIfPerfScore > 0.55, and perfScore=1.07672]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 6.43151 secs, and comparison 35.1252 sec, and warnIfPerfScore > 2.9, and perfScore=5.46143]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 7.23409 secs, and comparison 36.9467 sec, and warnIfPerfScore > 2.9, and perfScore=5.1073]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.48108 secs, and comparison 53.4737 sec, and warnIfPerfScore > 9.7, and perfScore=11.9332]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.49697 secs, and comparison 10.2487 sec, and warnIfPerfScore > 1.6, and perfScore=2.27903]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.61342 secs, and comparison 5.42685 sec, and warnIfPerfScore > 1.5, and perfScore=0.966764]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.45971 secs, and comparison 10.5646 sec, and warnIfPerfScore > 2.1, and perfScore=4.29506]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.37067 secs, and comparison 4.11052 sec, and warnIfPerfScore > 1.3, and perfScore=0.940478]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.34061 secs, and comparison 1.49532 sec, and warnIfPerfScore > 0.18, and perfScore=0.344494]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.46541 secs, and comparison 4.11175 sec, and warnIfPerfScore > 1.3, and perfScore=1.18651]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.31269 secs, and comparison 7.75049 sec, and warnIfPerfScore > 1.2, and perfScore=2.33964]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 14.5789 secs, and comparison 1.39471 sec, and warnIfPerfScore > 0.33, and perfScore=0.0956664]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.24501 secs, and comparison 42.6771 sec, and warnIfPerfScore > 6, and perfScore=13.1516]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.0395 secs, and comparison 3.94008 sec, and warnIfPerfScore > 0.5, and perfScore=0.392457]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 5.8601 secs, and comparison 41.2053 sec, and warnIfPerfScore > 4.4, and perfScore=7.0315]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.5366 secs, and comparison 3.80821 sec, and warnIfPerfScore > 0.6, and perfScore=0.330099]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.89469 secs, and comparison 11.8545 sec, and warnIfPerfScore > 1.5, and perfScore=1.50157]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.92583 secs, and comparison 2.06892 sec, and warnIfPerfScore > 0.55, and perfScore=0.298725]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 15 secs, and comparison 1.03198 sec, and warnIfPerfScore > 0.25, and perfScore=0.0687984]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.77652 sec, and warnIfPerfScore > 0.5, and perfScore=0.251768]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 1 second]]]

Succeeded
