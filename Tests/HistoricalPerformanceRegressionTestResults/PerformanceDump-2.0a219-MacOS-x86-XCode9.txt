Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/18/17 14:47:57]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.09301 secs, and comparison 8.79361 sec, and warnIfPerfScore > 0.62, and perfScore=0.967073]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.09442 secs, and comparison 4.15964 sec, and warnIfPerfScore > 0.65, and perfScore=0.457383]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 15.7027 secs, and comparison 11.524 sec, and warnIfPerfScore > 1.05, and perfScore=0.733891]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.8433 secs, and comparison 4.45701 sec, and warnIfPerfScore > 0.5, and perfScore=0.166038]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 25.8738 secs, and comparison 5.52643 sec, and warnIfPerfScore > 0.68, and perfScore=0.213592]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.0817 secs, and comparison 57.9945 sec, and warnIfPerfScore > 4.3, and perfScore=3.20736]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 20.4587 secs, and comparison 61.2033 sec, and warnIfPerfScore > 4, and perfScore=2.99156]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.9
	DETAILS:         	[baseline test 15.5838 secs, and comparison 153.502 sec, and warnIfPerfScore > 10.4, and perfScore=9.85009]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.6156 secs, and comparison 30.6431 sec, and warnIfPerfScore > 3.2, and perfScore=1.56218]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 8.30318 secs, and comparison 5.92712 sec, and warnIfPerfScore > 1.8, and perfScore=0.713838]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.2468 secs, and comparison 31.3235 sec, and warnIfPerfScore > 2.8, and perfScore=2.36462]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.8936 secs, and comparison 25.967 sec, and warnIfPerfScore > 3.3, and perfScore=2.18328]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.3946 secs, and comparison 3.48179 sec, and warnIfPerfScore > 0.25, and perfScore=0.280913]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.8828 secs, and comparison 18.5026 sec, and warnIfPerfScore > 1.4, and perfScore=1.03466]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.6536 secs, and comparison 32.0971 sec, and warnIfPerfScore > 7.7, and perfScore=2.75426]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.8153 secs, and comparison 3.8287 sec, and warnIfPerfScore > 1.55, and perfScore=0.354008]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 11.1077 secs, and comparison 75.2715 sec, and warnIfPerfScore > 7.7, and perfScore=6.77653]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.753 secs, and comparison 6.46737 sec, and warnIfPerfScore > 1, and perfScore=0.601449]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 12.9103 secs, and comparison 68.9505 sec, and warnIfPerfScore > 7.9, and perfScore=5.34074]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.7838 secs, and comparison 6.74403 sec, and warnIfPerfScore > 0.8, and perfScore=0.625383]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.9731 secs, and comparison 38.9461 sec, and warnIfPerfScore > 1.7, and perfScore=1.18115]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.79887 secs, and comparison 6.73782 sec, and warnIfPerfScore > 0.55, and perfScore=0.991019]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.81904 sec, and warnIfPerfScore > 0.4, and perfScore=0.387936]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23079 sec, and warnIfPerfScore > 1.1, and perfScore=0.215386]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 43 seconds]]]

Succeeded
