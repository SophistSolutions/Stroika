Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/14/16 15:10:17]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.65365 secs, and comparison 4.41682 sec, and warnIfPerfScore > 0.62, and perfScore=0.781232]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.77409 secs, and comparison 2.82066 sec, and warnIfPerfScore > 0.65, and perfScore=0.488503]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.67211 secs, and comparison 8.64896 sec, and warnIfPerfScore > 0.97, and perfScore=0.997332]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.33761 secs, and comparison 8.10113 sec, and warnIfPerfScore > 1.15, and perfScore=0.971637]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.20353 secs, and comparison 2.8721 sec, and warnIfPerfScore > 0.5, and perfScore=0.462977]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.59879 secs, and comparison 4.99473 sec, and warnIfPerfScore > 0.68, and perfScore=0.657306]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.27485 secs, and comparison 30.3495 sec, and warnIfPerfScore > 4.3, and perfScore=3.66768]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.96239 secs, and comparison 31.96 sec, and warnIfPerfScore > 4, and perfScore=3.56601]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.65565 secs, and comparison 101.717 sec, and warnIfPerfScore > 9.9, and perfScore=11.7515]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.9394 secs, and comparison 14.2648 sec, and warnIfPerfScore > 3.2, and perfScore=1.19476]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.55868 secs, and comparison 5.57638 sec, and warnIfPerfScore > 1.7, and perfScore=1.00318]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.19437 secs, and comparison 19.5366 sec, and warnIfPerfScore > 2.8, and perfScore=2.71553]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 6.84406 secs, and comparison 32.8639 sec, and warnIfPerfScore > 3.3, and perfScore=4.80182]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.03011 secs, and comparison 2.53563 sec, and warnIfPerfScore > 0.22, and perfScore=0.360682]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.7205 secs, and comparison 6.06576 sec, and warnIfPerfScore > 1.25, and perfScore=1.06036]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.95594 secs, and comparison 32.3542 sec, and warnIfPerfScore > 7.7, and perfScore=3.61259]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.58064 secs, and comparison 3.66975 sec, and warnIfPerfScore > 1.55, and perfScore=0.484095]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.9017 secs, and comparison 32.4601 sec, and warnIfPerfScore > 7.7, and perfScore=3.6465]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.64492 secs, and comparison 3.70744 sec, and warnIfPerfScore > 1.4, and perfScore=0.484954]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 6.34842 secs, and comparison 60.9065 sec, and warnIfPerfScore > 7.9, and perfScore=9.59396]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 7.301 secs, and comparison 6.26145 sec, and warnIfPerfScore > 0.8, and perfScore=0.857614]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8857 secs, and comparison 14.5931 sec, and warnIfPerfScore > 1.7, and perfScore=1.1325]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.3454 secs, and comparison 3.70313 sec, and warnIfPerfScore > 0.55, and perfScore=0.241319]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42984 sec, and warnIfPerfScore > 0.4, and perfScore=0.0953224]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.25388 sec, and warnIfPerfScore > 1.1, and perfScore=0.216925]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 28 seconds]]]

