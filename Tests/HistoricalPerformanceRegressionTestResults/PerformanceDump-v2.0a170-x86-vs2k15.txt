Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/18/16 20:36:42]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.0441 secs, and comparison 6.09736 sec, and warnIfPerfScore > 0.62, and perfScore=0.552093]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.1889 secs, and comparison 4.95095 sec, and warnIfPerfScore > 0.65, and perfScore=0.442488]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 14.3849 secs, and comparison 12.6397 sec, and warnIfPerfScore > 1, and perfScore=0.878682]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.829 secs, and comparison 15.4943 sec, and warnIfPerfScore > 1.15, and perfScore=0.978861]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.3412 secs, and comparison 3.50104 sec, and warnIfPerfScore > 0.5, and perfScore=0.308702]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 14.0391 secs, and comparison 5.24464 sec, and warnIfPerfScore > 0.68, and perfScore=0.373573]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.2092 secs, and comparison 41.9588 sec, and warnIfPerfScore > 4.3, and perfScore=2.75877]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.1015 secs, and comparison 42.2368 sec, and warnIfPerfScore > 4, and perfScore=2.79686]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 12.775 secs, and comparison 111.774 sec, and warnIfPerfScore > 10.2, and perfScore=8.74942]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.1998 secs, and comparison 23.075 sec, and warnIfPerfScore > 3.2, and perfScore=1.51811]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 16.6257 secs, and comparison 16.1548 sec, and warnIfPerfScore > 1.7, and perfScore=0.971672]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 15.8934 secs, and comparison 29.4033 sec, and warnIfPerfScore > 2.8, and perfScore=1.85004]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 17.0588 secs, and comparison 50.1928 sec, and warnIfPerfScore > 3.3, and perfScore=2.94234]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 17.3089 secs, and comparison 3.50428 sec, and warnIfPerfScore > 0.22, and perfScore=0.202455]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.1084 secs, and comparison 18.3354 sec, and warnIfPerfScore > 1.25, and perfScore=1.13825]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 17.3852 secs, and comparison 44.0096 sec, and warnIfPerfScore > 7.7, and perfScore=2.53144]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 16.2322 secs, and comparison 5.49536 sec, and warnIfPerfScore > 1.55, and perfScore=0.338546]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.9794 secs, and comparison 43.578 sec, and warnIfPerfScore > 7.7, and perfScore=2.56652]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 16.4269 secs, and comparison 5.58707 sec, and warnIfPerfScore > 1.4, and perfScore=0.340117]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 16.6362 secs, and comparison 65.0964 sec, and warnIfPerfScore > 7.9, and perfScore=3.91293]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 15.1594 secs, and comparison 7.8647 sec, and warnIfPerfScore > 0.8, and perfScore=0.518799]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.0518 secs, and comparison 21.6849 sec, and warnIfPerfScore > 1.7, and perfScore=1.27171]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.96019 secs, and comparison 4.36959 sec, and warnIfPerfScore > 0.55, and perfScore=0.438705]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.3213 sec, and warnIfPerfScore > 0.4, and perfScore=0.154753]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.41338 sec, and warnIfPerfScore > 1.1, and perfScore=0.360892]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 17.5995 secs, and comparison 24.0919 sec, and warnIfPerfScore > 2.4, and perfScore=1.3689]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.8301 secs, and comparison 30.015 sec, and warnIfPerfScore > 2.8, and perfScore=1.78341]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 6 seconds]]]

Succeeded
