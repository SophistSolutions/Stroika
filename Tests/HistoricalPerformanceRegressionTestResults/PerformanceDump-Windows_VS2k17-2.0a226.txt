Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/21/18 7:37:40]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.29 secs, and comparison 5.27972 sec, and warnIfPerfScore > 0.62, and perfScore=0.467648]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.5338 secs, and comparison 3.4848 sec, and warnIfPerfScore > 0.65, and perfScore=0.33082]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.497 secs, and comparison 8.97009 sec, and warnIfPerfScore > 1.05, and perfScore=0.854537]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.87343 secs, and comparison 3.32367 sec, and warnIfPerfScore > 0.5, and perfScore=0.336628]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.67034 secs, and comparison 4.06546 sec, and warnIfPerfScore > 0.68, and perfScore=0.420406]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.4898 secs, and comparison 28.7629 sec, and warnIfPerfScore > 4.3, and perfScore=2.50335]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.8969 secs, and comparison 29.7223 sec, and warnIfPerfScore > 4, and perfScore=2.49833]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 10.6691 secs, and comparison 93.3813 sec, and warnIfPerfScore > 10.4, and perfScore=8.75251]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.526 secs, and comparison 14.3985 sec, and warnIfPerfScore > 3.2, and perfScore=1.36789]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.50667 secs, and comparison 12.5792 sec, and warnIfPerfScore > 1.8, and perfScore=1.32319]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.71492 secs, and comparison 13.419 sec, and warnIfPerfScore > 2.8, and perfScore=1.53978]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.299 secs, and comparison 35.5298 sec, and warnIfPerfScore > 3.3, and perfScore=3.1445]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.0406 secs, and comparison 1.2952 sec, and warnIfPerfScore > 0.25, and perfScore=0.107569]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.9729 secs, and comparison 14.3973 sec, and warnIfPerfScore > 1.4, and perfScore=1.31208]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.3086 secs, and comparison 36.2351 sec, and warnIfPerfScore > 7.7, and perfScore=2.94389]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.6212 secs, and comparison 5.04799 sec, and warnIfPerfScore > 1.55, and perfScore=0.399962]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 10.7108 secs, and comparison 68.946 sec, and warnIfPerfScore > 7.7, and perfScore=6.43704]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 13.1273 secs, and comparison 6.8067 sec, and warnIfPerfScore > 1, and perfScore=0.518516]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 14.3707 secs, and comparison 60.681 sec, and warnIfPerfScore > 7.9, and perfScore=4.22256]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 12.0594 secs, and comparison 6.98628 sec, and warnIfPerfScore > 0.8, and perfScore=0.579322]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.5296 secs, and comparison 14.0447 sec, and warnIfPerfScore > 1.7, and perfScore=1.33383]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.5936 secs, and comparison 4.14062 sec, and warnIfPerfScore > 0.55, and perfScore=0.304601]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.84777 sec, and warnIfPerfScore > 0.4, and perfScore=0.189852]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.76146 sec, and warnIfPerfScore > 1.1, and perfScore=0.317431]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.377 secs, and comparison 14.9721 sec, and warnIfPerfScore > 2.4, and perfScore=1.11924]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.0003 secs, and comparison 31.5492 sec, and warnIfPerfScore > 2.9, and perfScore=2.86803]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 6 seconds]]]

Succeeded
