Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/14/18 9:35:01]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 12.3173 secs, and comparison 5.80708 sec, and warnIfPerfScore > 0.62, and perfScore=0.471457]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.663 secs, and comparison 4.04616 sec, and warnIfPerfScore > 0.65, and perfScore=0.346923]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.8552 secs, and comparison 9.23783 sec, and warnIfPerfScore > 1.05, and perfScore=0.851007]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.71688 secs, and comparison 3.42314 sec, and warnIfPerfScore > 0.5, and perfScore=0.352288]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.60458 secs, and comparison 4.23392 sec, and warnIfPerfScore > 0.68, and perfScore=0.440823]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 14.9206 secs, and comparison 29.3561 sec, and warnIfPerfScore > 4.3, and perfScore=1.96748]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 16.4071 secs, and comparison 31.417 sec, and warnIfPerfScore > 4, and perfScore=1.91485]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 14.3095 secs, and comparison 95.7621 sec, and warnIfPerfScore > 10.4, and perfScore=6.69222]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.1366 secs, and comparison 16.3756 sec, and warnIfPerfScore > 3.2, and perfScore=1.47043]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.1494 secs, and comparison 15.0974 sec, and warnIfPerfScore > 1.8, and perfScore=1.14814]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.28421 secs, and comparison 15.1021 sec, and warnIfPerfScore > 2.8, and perfScore=1.823]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 11.6163 secs, and comparison 38.6728 sec, and warnIfPerfScore > 3.3, and perfScore=3.32917]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.3 and got 3.32917}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.0568 secs, and comparison 1.34486 sec, and warnIfPerfScore > 0.25, and perfScore=0.111543]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4052 secs, and comparison 11.9493 sec, and warnIfPerfScore > 1.4, and perfScore=1.0477]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.74064 secs, and comparison 36.0431 sec, and warnIfPerfScore > 7.7, and perfScore=3.70028]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.3363 secs, and comparison 4.66449 sec, and warnIfPerfScore > 1.55, and perfScore=0.451273]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 9.42898 secs, and comparison 70.8986 sec, and warnIfPerfScore > 9, and perfScore=7.51923]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.1 secs, and comparison 6.37994 sec, and warnIfPerfScore > 1, and perfScore=0.631674]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 10.6668 secs, and comparison 62.2147 sec, and warnIfPerfScore > 7.9, and perfScore=5.83258]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 10.0368 secs, and comparison 7.09844 sec, and warnIfPerfScore > 0.8, and perfScore=0.70724]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.7443 secs, and comparison 15.3956 sec, and warnIfPerfScore > 1.7, and perfScore=1.3109]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.1666 secs, and comparison 4.40884 sec, and warnIfPerfScore > 0.55, and perfScore=0.334851]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.62973 sec, and warnIfPerfScore > 0.4, and perfScore=0.175315]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.49631 sec, and warnIfPerfScore > 1.1, and perfScore=0.299754]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.5111 secs, and comparison 15.0181 sec, and warnIfPerfScore > 2.4, and perfScore=1.20038]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9493 secs, and comparison 32.2536 sec, and warnIfPerfScore > 2.9, and perfScore=2.69921]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 44 seconds]]]

Failed
