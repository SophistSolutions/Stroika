Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Dec 17 12:27:54 2018]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.04594 secs, and comparison 4.59652 sec, and warnIfPerfScore > 0.62, and perfScore=0.760265]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.08902 secs, and comparison 2.8473 sec, and warnIfPerfScore > 0.5, and perfScore=0.467612]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.24083 secs, and comparison 6.8151 sec, and warnIfPerfScore > 1.05, and perfScore=1.09202]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 3.51355 secs, and comparison 3.41283 sec, and warnIfPerfScore > 0.45, and perfScore=0.971335]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.2409 secs, and comparison 3.8377 sec, and warnIfPerfScore > 0.55, and perfScore=0.904926]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.12692 secs, and comparison 17.2263 sec, and warnIfPerfScore > 2.8, and perfScore=5.50904]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.11307 secs, and comparison 18.0865 sec, and warnIfPerfScore > 2.9, and perfScore=4.39731]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.55897 secs, and comparison 53.5706 sec, and warnIfPerfScore > 9.7, and perfScore=11.7506]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.54797 secs, and comparison 10.0842 sec, and warnIfPerfScore > 1.6, and perfScore=2.21729]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.21377 secs, and comparison 5.11408 sec, and warnIfPerfScore > 1.5, and perfScore=0.980879]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 2.35314 secs, and comparison 10.6442 sec, and warnIfPerfScore > 2.1, and perfScore=4.52339]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.0682 secs, and comparison 4.17666 sec, and warnIfPerfScore > 1.3, and perfScore=1.02666]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.26619 secs, and comparison 1.65431 sec, and warnIfPerfScore > 0.18, and perfScore=0.387772]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.30162 secs, and comparison 3.05422 sec, and warnIfPerfScore > 1.3, and perfScore=1.32699]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.1096 secs, and comparison 7.74573 sec, and warnIfPerfScore > 1.2, and perfScore=2.49091]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.5319 secs, and comparison 1.39545 sec, and warnIfPerfScore > 0.33, and perfScore=0.103123]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.94514 secs, and comparison 42.5095 sec, and warnIfPerfScore > 6, and perfScore=14.4338]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.41142 secs, and comparison 3.93936 sec, and warnIfPerfScore > 0.5, and perfScore=0.418572]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 5.83849 secs, and comparison 40.5813 sec, and warnIfPerfScore > 4.4, and perfScore=6.95066]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.722 secs, and comparison 3.7935 sec, and warnIfPerfScore > 0.6, and perfScore=0.353806]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.1055 secs, and comparison 10.8019 sec, and warnIfPerfScore > 1.5, and perfScore=1.33266]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.90718 secs, and comparison 2.1985 sec, and warnIfPerfScore > 0.55, and perfScore=0.318292]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.853381 sec, and warnIfPerfScore > 0.25, and perfScore=0.0568921]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.61422 sec, and warnIfPerfScore > 0.5, and perfScore=0.240948]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 25 seconds]]]

Succeeded
