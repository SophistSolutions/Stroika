Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/15/16 23:11:40]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.73498 secs, and comparison 5.46616 sec, and warnIfPerfScore > 0.62, and perfScore=0.561497]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.0127 secs, and comparison 4.13724 sec, and warnIfPerfScore > 0.65, and perfScore=0.4132]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.7674 secs, and comparison 11.1891 sec, and warnIfPerfScore > 1, and perfScore=0.876377]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.1249 secs, and comparison 13.848 sec, and warnIfPerfScore > 1.15, and perfScore=0.980395]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.49965 secs, and comparison 3.12902 sec, and warnIfPerfScore > 0.5, and perfScore=0.329383]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.7013 secs, and comparison 4.71754 sec, and warnIfPerfScore > 0.68, and perfScore=0.403165]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.3719 secs, and comparison 37.0191 sec, and warnIfPerfScore > 4.3, and perfScore=2.76842]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.8237 secs, and comparison 37.1771 sec, and warnIfPerfScore > 4, and perfScore=2.89909]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 10.5691 secs, and comparison 96.156 sec, and warnIfPerfScore > 10.4, and perfScore=9.09788]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.0564 secs, and comparison 19.9022 sec, and warnIfPerfScore > 3.2, and perfScore=1.52433]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.6636 secs, and comparison 20.4507 sec, and warnIfPerfScore > 1.7, and perfScore=1.09575]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.8388 secs, and comparison 26.9629 sec, and warnIfPerfScore > 2.8, and perfScore=1.81706]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 13.8318 secs, and comparison 43.8629 sec, and warnIfPerfScore > 3.3, and perfScore=3.17116]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.0998 secs, and comparison 3.07065 sec, and warnIfPerfScore > 0.22, and perfScore=0.21778]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.8063 secs, and comparison 18.4566 sec, and warnIfPerfScore > 1.25, and perfScore=1.16768]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 17.0763 secs, and comparison 53.556 sec, and warnIfPerfScore > 7.7, and perfScore=3.13627]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.3757 secs, and comparison 6.05229 sec, and warnIfPerfScore > 1.55, and perfScore=0.452484]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 17.4823 secs, and comparison 54.6726 sec, and warnIfPerfScore > 7.7, and perfScore=3.12731]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.054 secs, and comparison 5.88567 sec, and warnIfPerfScore > 1.4, and perfScore=0.450872]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 16.3319 secs, and comparison 69.9253 sec, and warnIfPerfScore > 7.9, and perfScore=4.28152]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 12.2094 secs, and comparison 8.25622 sec, and warnIfPerfScore > 0.8, and perfScore=0.676218]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.6012 secs, and comparison 18.9588 sec, and warnIfPerfScore > 1.7, and perfScore=1.21522]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.77237 secs, and comparison 3.71964 sec, and warnIfPerfScore > 0.55, and perfScore=0.424018]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.95022 sec, and warnIfPerfScore > 0.4, and perfScore=0.130014]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.62374 sec, and warnIfPerfScore > 1.1, and perfScore=0.308249]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.0713 secs, and comparison 21.2933 sec, and warnIfPerfScore > 2.4, and perfScore=1.41284]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.4426 secs, and comparison 26.2649 sec, and warnIfPerfScore > 2.8, and perfScore=1.81857]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 5 seconds]]]

Succeeded
