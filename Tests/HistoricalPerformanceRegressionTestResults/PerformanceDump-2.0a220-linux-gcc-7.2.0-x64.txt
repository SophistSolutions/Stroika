Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/19/17 19:26:24]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.81335 secs, and comparison 5.43466 sec, and warnIfPerfScore > 0.62, and perfScore=0.797649]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.79846 secs, and comparison 3.46089 sec, and warnIfPerfScore > 0.65, and perfScore=0.50907]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.14832 secs, and comparison 8.15342 sec, and warnIfPerfScore > 1.05, and perfScore=1.00063]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.60138 secs, and comparison 3.49056 sec, and warnIfPerfScore > 0.5, and perfScore=0.528762]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 6.90566 secs, and comparison 4.52174 sec, and warnIfPerfScore > 0.68, and perfScore=0.654788]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.55817 secs, and comparison 28.6708 sec, and warnIfPerfScore > 4.3, and perfScore=3.35011]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.13069 secs, and comparison 30.915 sec, and warnIfPerfScore > 4, and perfScore=3.38583]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 7.42626 secs, and comparison 109.486 sec, and warnIfPerfScore > 10.4, and perfScore=14.743]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.74811 secs, and comparison 12.9229 sec, and warnIfPerfScore > 3.2, and perfScore=1.32569]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.67683 secs, and comparison 5.5415 sec, and warnIfPerfScore > 1.8, and perfScore=0.976161]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 4.09075 secs, and comparison 13.1475 sec, and warnIfPerfScore > 2.8, and perfScore=3.21395]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 5.04453 secs, and comparison 25.4833 sec, and warnIfPerfScore > 3.3, and perfScore=5.05167]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 5.29295 secs, and comparison 2.30909 sec, and warnIfPerfScore > 0.25, and perfScore=0.436258]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.71985 secs, and comparison 5.46724 sec, and warnIfPerfScore > 1.4, and perfScore=1.15835]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 5.21256 secs, and comparison 25.6931 sec, and warnIfPerfScore > 7.7, and perfScore=4.92907]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.06925 secs, and comparison 2.88128 sec, and warnIfPerfScore > 1.55, and perfScore=0.317698]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 5.03681 secs, and comparison 61.7999 sec, and warnIfPerfScore > 7.7, and perfScore=12.2696]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 9.60217 secs, and comparison 5.55189 sec, and warnIfPerfScore > 1, and perfScore=0.578191]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.3
	DETAILS:         	[baseline test 7.55469 secs, and comparison 55.1011 sec, and warnIfPerfScore > 7.9, and perfScore=7.29362]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.5899 secs, and comparison 5.54967 sec, and warnIfPerfScore > 0.8, and perfScore=0.478838]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.2459 secs, and comparison 13.1265 sec, and warnIfPerfScore > 1.7, and perfScore=1.16722]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 20.8234 secs, and comparison 5.21214 sec, and warnIfPerfScore > 0.55, and perfScore=0.250301]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.7977 sec, and warnIfPerfScore > 0.4, and perfScore=0.119847]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.08769 sec, and warnIfPerfScore > 1.1, and perfScore=0.205846]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 13 seconds]]]

Succeeded
