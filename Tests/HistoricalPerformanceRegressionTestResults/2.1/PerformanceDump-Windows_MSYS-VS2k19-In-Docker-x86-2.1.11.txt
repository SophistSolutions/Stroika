Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 24 8:29:34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.73621 secs, and comparison 4.88424 sec, and warnIfPerfScore > 0.65, and perfScore=0.55908]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.45977 secs, and comparison 3.11575 sec, and warnIfPerfScore > 0.5, and perfScore=0.368302]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.7362 secs, and comparison 9.04384 sec, and warnIfPerfScore > 1.05, and perfScore=0.84237]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.33972 secs, and comparison 9.01458 sec, and warnIfPerfScore > 1.15, and perfScore=1.08092]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.6983 secs, and comparison 2.63795 sec, and warnIfPerfScore > 0.48, and perfScore=0.246576]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.5127 secs, and comparison 3.26944 sec, and warnIfPerfScore > 0.57, and perfScore=0.310998]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.7548 secs, and comparison 25.2061 sec, and warnIfPerfScore > 2.9, and perfScore=2.14433]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.8909 secs, and comparison 26.3792 sec, and warnIfPerfScore > 2.9, and perfScore=2.21843]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 11.121 secs, and comparison 179.635 sec, and warnIfPerfScore > 24, and perfScore=16.1528]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.1436 secs, and comparison 12.384 sec, and warnIfPerfScore > 1.7, and perfScore=1.22086]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 10.919 secs, and comparison 10.7704 sec, and warnIfPerfScore > 1.5, and perfScore=0.98639]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.86151 secs, and comparison 14.2938 sec, and warnIfPerfScore > 2.1, and perfScore=1.44945]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 12.3041 secs, and comparison 9.42535 sec, and warnIfPerfScore > 1.6, and perfScore=0.766034]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.7863 secs, and comparison 1.765 sec, and warnIfPerfScore > 0.23, and perfScore=0.138039]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.2206 secs, and comparison 15.2452 sec, and warnIfPerfScore > 1.3, and perfScore=1.07205]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.0684 secs, and comparison 6.79613 sec, and warnIfPerfScore > 1.2, and perfScore=0.563134]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 8.18793 secs, and comparison 2.03664 sec, and warnIfPerfScore > 0.33, and perfScore=0.248737]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 11.5854 secs, and comparison 43.4004 sec, and warnIfPerfScore > 6, and perfScore=3.74614]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.5523 secs, and comparison 6.55678 sec, and warnIfPerfScore > 0.8, and perfScore=0.567571]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5073 secs, and comparison 12.8405 sec, and warnIfPerfScore > 1.4, and perfScore=1.11586]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.19384 secs, and comparison 3.95558 sec, and warnIfPerfScore > 0.65, and perfScore=0.48275]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 12.1729 secs, and comparison 40.6 sec, and warnIfPerfScore > 4.4, and perfScore=3.33528]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.48549 secs, and comparison 3.85881 sec, and warnIfPerfScore > 0.6, and perfScore=0.454754]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.32158 secs, and comparison 3.80141 sec, and warnIfPerfScore > 0.6, and perfScore=0.456814]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.45744 secs, and comparison 3.88199 sec, and warnIfPerfScore > 0.6, and perfScore=0.459003]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.5238 secs, and comparison 6.32988 sec, and warnIfPerfScore > 1.3, and perfScore=0.742612]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.21309 secs, and comparison 10.6388 sec, and warnIfPerfScore > 1.3, and perfScore=1.15474]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 60.6429 secs, and comparison 7.32671 sec, and warnIfPerfScore > 0.3, and perfScore=0.120817]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.0668 secs, and comparison 15.9703 sec, and warnIfPerfScore > 1.5, and perfScore=1.32349]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.76286 secs, and comparison 3.45901 sec, and warnIfPerfScore > 0.55, and perfScore=0.394736]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 15 secs, and comparison 1.03159 sec, and warnIfPerfScore > 0.1, and perfScore=0.0687727]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.29228 sec, and warnIfPerfScore > 0.5, and perfScore=0.219485]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.0992 secs, and comparison 15.43 sec, and warnIfPerfScore > 2, and perfScore=1.39019]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.7214 secs, and comparison 33.7798 sec, and warnIfPerfScore > 3.6, and perfScore=2.65535]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 37 seconds]]]

Succeeded
