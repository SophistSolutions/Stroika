Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 4:29:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.94283 secs, and comparison 4.91261 sec, and warnIfPerfScore > 0.65, and perfScore=0.494085]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.42851 secs, and comparison 3.18019 sec, and warnIfPerfScore > 0.5, and perfScore=0.377313]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.5881 secs, and comparison 8.8151 sec, and warnIfPerfScore > 1.05, and perfScore=0.832551]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.15589 secs, and comparison 8.81282 sec, and warnIfPerfScore > 1.15, and perfScore=1.08055]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.4512 secs, and comparison 2.65434 sec, and warnIfPerfScore > 0.48, and perfScore=0.253976]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 10.3188 secs, and comparison 3.11632 sec, and warnIfPerfScore > 0.57, and perfScore=0.302004]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.1924 secs, and comparison 25.0949 sec, and warnIfPerfScore > 2.9, and perfScore=2.24213]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.504 secs, and comparison 26.2469 sec, and warnIfPerfScore > 2.9, and perfScore=2.28155]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 10.772 secs, and comparison 176.045 sec, and warnIfPerfScore > 24, and perfScore=16.3428]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.98867 secs, and comparison 12.8993 sec, and warnIfPerfScore > 1.7, and perfScore=1.29139]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 10.8961 secs, and comparison 10.7236 sec, and warnIfPerfScore > 1.5, and perfScore=0.984167]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.69539 secs, and comparison 15.1079 sec, and warnIfPerfScore > 2.1, and perfScore=1.55826]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 13.0285 secs, and comparison 9.48281 sec, and warnIfPerfScore > 1.6, and perfScore=0.727851]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 13.5885 secs, and comparison 1.69491 sec, and warnIfPerfScore > 0.23, and perfScore=0.124732]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.7563 secs, and comparison 14.6187 sec, and warnIfPerfScore > 1.3, and perfScore=0.990679]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.7505 secs, and comparison 7.51253 sec, and warnIfPerfScore > 1.2, and perfScore=0.639336]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.95807 secs, and comparison 2.05991 sec, and warnIfPerfScore > 0.33, and perfScore=0.258845]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.2858 secs, and comparison 43.0391 sec, and warnIfPerfScore > 6, and perfScore=3.81357]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.2836 secs, and comparison 6.89567 sec, and warnIfPerfScore > 0.8, and perfScore=0.611125]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.284 secs, and comparison 12.5481 sec, and warnIfPerfScore > 1.4, and perfScore=1.11202]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.88864 secs, and comparison 3.88117 sec, and warnIfPerfScore > 0.65, and perfScore=0.491995]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.7712 secs, and comparison 40.8008 sec, and warnIfPerfScore > 4.4, and perfScore=3.46616]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.18917 secs, and comparison 3.87805 sec, and warnIfPerfScore > 0.6, and perfScore=0.473558]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.18858 secs, and comparison 3.87265 sec, and warnIfPerfScore > 0.6, and perfScore=0.472933]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.14512 secs, and comparison 3.86082 sec, and warnIfPerfScore > 0.6, and perfScore=0.474004]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 8.08863 secs, and comparison 6.34693 sec, and warnIfPerfScore > 1.3, and perfScore=0.784673]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.94873 secs, and comparison 10.5853 sec, and warnIfPerfScore > 1.3, and perfScore=1.18288]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 58.4904 secs, and comparison 7.23718 sec, and warnIfPerfScore > 0.3, and perfScore=0.123733]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.7541 secs, and comparison 15.8203 sec, and warnIfPerfScore > 1.5, and perfScore=1.34593]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.39225 secs, and comparison 3.44523 sec, and warnIfPerfScore > 0.55, and perfScore=0.410525]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.01652 sec, and warnIfPerfScore > 0.1, and perfScore=0.0677679]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.39965 sec, and warnIfPerfScore > 0.5, and perfScore=0.226643]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.5493 secs, and comparison 19.1054 sec, and warnIfPerfScore > 2, and perfScore=1.81106]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.4392 secs, and comparison 32.8378 sec, and warnIfPerfScore > 3.6, and perfScore=2.63987]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 30 seconds]]]

Succeeded
