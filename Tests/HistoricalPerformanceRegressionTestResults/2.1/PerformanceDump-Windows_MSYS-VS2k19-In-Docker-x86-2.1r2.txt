Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 22:52:38 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 6.44655 secs, and comparison 4.05219 sec, and warnIfPerfScore > 0.65, and perfScore=0.628582]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.40812 secs, and comparison 2.53923 sec, and warnIfPerfScore > 0.5, and perfScore=0.396251]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.86321 secs, and comparison 6.88853 sec, and warnIfPerfScore > 1.05, and perfScore=0.876046]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.216 secs, and comparison 6.89739 sec, and warnIfPerfScore > 1.15, and perfScore=1.10962]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.0009 secs, and comparison 2.3025 sec, and warnIfPerfScore > 0.48, and perfScore=0.19186]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.3011 secs, and comparison 2.79071 sec, and warnIfPerfScore > 0.57, and perfScore=0.246941]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.22453 secs, and comparison 18.9249 sec, and warnIfPerfScore > 2.9, and perfScore=2.61954]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.51126 secs, and comparison 19.417 sec, and warnIfPerfScore > 2.9, and perfScore=2.58505]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.34117 secs, and comparison 137.11 sec, and warnIfPerfScore > 24, and perfScore=18.6768]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.16644 secs, and comparison 9.93621 sec, and warnIfPerfScore > 1.7, and perfScore=1.61134]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.90563 secs, and comparison 6.86929 sec, and warnIfPerfScore > 1.5, and perfScore=0.994738]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.82971 secs, and comparison 11.6117 sec, and warnIfPerfScore > 2.1, and perfScore=1.99181]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.87977 secs, and comparison 7.21411 sec, and warnIfPerfScore > 1.6, and perfScore=0.915523]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 8.26248 secs, and comparison 1.22623 sec, and warnIfPerfScore > 0.23, and perfScore=0.148409]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.8957 secs, and comparison 12.6806 sec, and warnIfPerfScore > 1.3, and perfScore=1.06598]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.10226 secs, and comparison 5.12083 sec, and warnIfPerfScore > 1.2, and perfScore=0.562589]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.73276 secs, and comparison 1.43316 sec, and warnIfPerfScore > 0.33, and perfScore=0.249994]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.72618 secs, and comparison 37.3384 sec, and warnIfPerfScore > 6, and perfScore=4.2789]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.7311 secs, and comparison 4.91407 sec, and warnIfPerfScore > 0.8, and perfScore=0.562824]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.73933 secs, and comparison 8.75359 sec, and warnIfPerfScore > 1.4, and perfScore=1.00163]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.73542 secs, and comparison 3.25028 sec, and warnIfPerfScore > 0.65, and perfScore=0.566703]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 8.91296 secs, and comparison 34.6412 sec, and warnIfPerfScore > 4.4, and perfScore=3.88661]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.95594 secs, and comparison 3.22055 sec, and warnIfPerfScore > 0.6, and perfScore=0.540729]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.9323 secs, and comparison 3.23687 sec, and warnIfPerfScore > 0.6, and perfScore=0.545635]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.93354 secs, and comparison 3.26367 sec, and warnIfPerfScore > 0.6, and perfScore=0.550038]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.92467 secs, and comparison 4.41918 sec, and warnIfPerfScore > 1.3, and perfScore=0.745896]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.25136 secs, and comparison 8.01316 sec, and warnIfPerfScore > 1.3, and perfScore=1.28183]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 40.7049 secs, and comparison 5.60286 sec, and warnIfPerfScore > 0.3, and perfScore=0.137646]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.52738 secs, and comparison 11.1349 sec, and warnIfPerfScore > 1.5, and perfScore=1.47926]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.41042 secs, and comparison 2.62083 sec, and warnIfPerfScore > 0.55, and perfScore=0.408839]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.845304 sec, and warnIfPerfScore > 0.1, and perfScore=0.0563536]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78919 sec, and warnIfPerfScore > 0.5, and perfScore=0.185946]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.90317 secs, and comparison 8.2717 sec, and warnIfPerfScore > 2, and perfScore=1.19825]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.25834 secs, and comparison 28.0606 sec, and warnIfPerfScore > 3.6, and perfScore=3.39785]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 43 seconds]]]

Succeeded
