Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 28 12:47:15 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.10828 secs, and comparison 6.11668 sec, and warnIfPerfScore > 0.65, and perfScore=0.754374]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.71329 secs, and comparison 3.69567 sec, and warnIfPerfScore > 0.5, and perfScore=0.424142]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 13.001 secs, and comparison 10.9321 sec, and warnIfPerfScore > 1.05, and perfScore=0.840864]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.0691 secs, and comparison 10.9884 sec, and warnIfPerfScore > 1.15, and perfScore=1.09129]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.3881 secs, and comparison 3.47966 sec, and warnIfPerfScore > 0.48, and perfScore=0.280886]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.5622 secs, and comparison 4.26983 sec, and warnIfPerfScore > 0.57, and perfScore=0.339895]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.5146 secs, and comparison 30.3685 sec, and warnIfPerfScore > 2.9, and perfScore=2.42665]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.5373 secs, and comparison 30.4242 sec, and warnIfPerfScore > 2.9, and perfScore=2.24744]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 11.0927 secs, and comparison 224.643 sec, and warnIfPerfScore > 24, and perfScore=20.2515]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.657 secs, and comparison 15.0564 sec, and warnIfPerfScore > 1.7, and perfScore=1.41282]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 11.0637 secs, and comparison 10.715 sec, and warnIfPerfScore > 1.5, and perfScore=0.968481]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.1761 secs, and comparison 17.9663 sec, and warnIfPerfScore > 2.1, and perfScore=1.76554]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 20.056 secs, and comparison 6.96907 sec, and warnIfPerfScore > 1.6, and perfScore=0.347481]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 21.0991 secs, and comparison 1.3498 sec, and warnIfPerfScore > 0.23, and perfScore=0.0639741]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.6153 secs, and comparison 19.4232 sec, and warnIfPerfScore > 1.3, and perfScore=1.0434]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 18.5779 secs, and comparison 9.63819 sec, and warnIfPerfScore > 1.2, and perfScore=0.518798]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 14.2766 secs, and comparison 3.216 sec, and warnIfPerfScore > 0.33, and perfScore=0.225264]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 17.3104 secs, and comparison 57.0432 sec, and warnIfPerfScore > 6, and perfScore=3.29531]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 17.2408 secs, and comparison 9.37117 sec, and warnIfPerfScore > 0.8, and perfScore=0.543545]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 17.2349 secs, and comparison 14.3375 sec, and warnIfPerfScore > 1.4, and perfScore=0.831885]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 14.236 secs, and comparison 5.18224 sec, and warnIfPerfScore > 0.65, and perfScore=0.364024]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 17.7335 secs, and comparison 53.0717 sec, and warnIfPerfScore > 4.4, and perfScore=2.99274]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.1739 secs, and comparison 4.97248 sec, and warnIfPerfScore > 0.6, and perfScore=0.35082]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.6068 secs, and comparison 4.92872 sec, and warnIfPerfScore > 0.6, and perfScore=0.362225]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.7145 secs, and comparison 4.92254 sec, and warnIfPerfScore > 0.6, and perfScore=0.35893]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 13.6285 secs, and comparison 8.37692 sec, and warnIfPerfScore > 1.3, and perfScore=0.614661]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 15.1044 secs, and comparison 13.651 sec, and warnIfPerfScore > 1.3, and perfScore=0.903773]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 70.624 secs, and comparison 8.55776 sec, and warnIfPerfScore > 0.3, and perfScore=0.121173]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.5303 secs, and comparison 17.3375 sec, and warnIfPerfScore > 1.5, and perfScore=1.50365]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.9937 secs, and comparison 4.77769 sec, and warnIfPerfScore > 0.55, and perfScore=0.398351]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 15 secs, and comparison 1.19894 sec, and warnIfPerfScore > 0.1, and perfScore=0.0799296]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.30601 sec, and warnIfPerfScore > 0.5, and perfScore=0.287067]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.4706 secs, and comparison 13.483 sec, and warnIfPerfScore > 2, and perfScore=1.17544]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.775 secs, and comparison 24.2778 sec, and warnIfPerfScore > 3.6, and perfScore=1.64317]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 21 seconds]]]

Succeeded
