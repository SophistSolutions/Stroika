Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr 10 7:32:36 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.35398 secs, and comparison 4.37589 sec, and warnIfPerfScore > 0.65, and perfScore=0.595037]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.94033 secs, and comparison 2.79365 sec, and warnIfPerfScore > 0.5, and perfScore=0.402524]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 9.1245 secs, and comparison 7.79433 sec, and warnIfPerfScore > 1.05, and perfScore=0.85422]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.96967 secs, and comparison 7.38501 sec, and warnIfPerfScore > 1.15, and perfScore=1.05959]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.63846 secs, and comparison 2.34497 sec, and warnIfPerfScore > 0.48, and perfScore=0.271457]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.40874 secs, and comparison 2.79266 sec, and warnIfPerfScore > 0.57, and perfScore=0.332115]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.70951 secs, and comparison 22.0586 sec, and warnIfPerfScore > 2.9, and perfScore=2.5327]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.56161 secs, and comparison 22.4973 sec, and warnIfPerfScore > 2.9, and perfScore=2.62769]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.17645 secs, and comparison 152.055 sec, and warnIfPerfScore > 24, and perfScore=18.5967]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.43331 secs, and comparison 11.4239 sec, and warnIfPerfScore > 1.7, and perfScore=1.35462]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.64972 secs, and comparison 8.52128 sec, and warnIfPerfScore > 1.5, and perfScore=1.11393]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.6826 secs, and comparison 12.3974 sec, and warnIfPerfScore > 2.1, and perfScore=1.6137]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 10.0572 secs, and comparison 7.94215 sec, and warnIfPerfScore > 1.6, and perfScore=0.789695]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.77971 secs, and comparison 1.28933 sec, and warnIfPerfScore > 0.23, and perfScore=0.131837]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 13.4238 secs, and comparison 13.0536 sec, and warnIfPerfScore > 1.3, and perfScore=0.97242]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.3723 secs, and comparison 6.58789 sec, and warnIfPerfScore > 1.2, and perfScore=0.635142]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 6.41394 secs, and comparison 1.67862 sec, and warnIfPerfScore > 0.33, and perfScore=0.261714]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.32316 secs, and comparison 40.7907 sec, and warnIfPerfScore > 6, and perfScore=4.3752]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.374 secs, and comparison 5.44072 sec, and warnIfPerfScore > 0.8, and perfScore=0.524459]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 10.5017 secs, and comparison 10.3982 sec, and warnIfPerfScore > 1.4, and perfScore=0.990145]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.48784 secs, and comparison 3.53989 sec, and warnIfPerfScore > 0.65, and perfScore=0.545619]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.8903 secs, and comparison 38.9027 sec, and warnIfPerfScore > 4.4, and perfScore=3.57224]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.63225 secs, and comparison 3.59232 sec, and warnIfPerfScore > 0.6, and perfScore=0.541644]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 7.09317 secs, and comparison 3.75487 sec, and warnIfPerfScore > 0.6, and perfScore=0.529365]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.82108 secs, and comparison 3.72697 sec, and warnIfPerfScore > 0.6, and perfScore=0.54639]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.43671 secs, and comparison 5.09713 sec, and warnIfPerfScore > 1.3, and perfScore=0.791884]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.52357 secs, and comparison 8.96918 sec, and warnIfPerfScore > 1.3, and perfScore=1.19214]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 50.0396 secs, and comparison 6.38354 sec, and warnIfPerfScore > 0.3, and perfScore=0.12757]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.11383 secs, and comparison 12.6611 sec, and warnIfPerfScore > 1.5, and perfScore=1.38922]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.21532 secs, and comparison 3.11458 sec, and warnIfPerfScore > 0.55, and perfScore=0.379119]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.852144 sec, and warnIfPerfScore > 0.1, and perfScore=0.0568096]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.07054 sec, and warnIfPerfScore > 0.5, and perfScore=0.204703]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.43399 secs, and comparison 14.6875 sec, and warnIfPerfScore > 2, and perfScore=1.74147]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.1621 secs, and comparison 30.3592 sec, and warnIfPerfScore > 3.6, and perfScore=2.98749]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 21 seconds]]]

Succeeded
