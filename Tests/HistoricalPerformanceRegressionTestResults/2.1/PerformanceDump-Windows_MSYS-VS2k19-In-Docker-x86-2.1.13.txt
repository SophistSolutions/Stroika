Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 19 21:38:17 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.99605 secs, and comparison 4.21599 sec, and warnIfPerfScore > 0.65, and perfScore=0.602625]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.05953 secs, and comparison 2.80484 sec, and warnIfPerfScore > 0.5, and perfScore=0.397313]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 8.91761 secs, and comparison 7.29704 sec, and warnIfPerfScore > 1.05, and perfScore=0.818274]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.88625 secs, and comparison 7.28505 sec, and warnIfPerfScore > 1.15, and perfScore=1.05791]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.06854 secs, and comparison 2.22765 sec, and warnIfPerfScore > 0.48, and perfScore=0.27609]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.05005 secs, and comparison 2.69421 sec, and warnIfPerfScore > 0.57, and perfScore=0.334683]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.66776 secs, and comparison 20.2227 sec, and warnIfPerfScore > 2.9, and perfScore=2.3331]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.88006 secs, and comparison 20.7314 sec, and warnIfPerfScore > 2.9, and perfScore=2.3346]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.27489 secs, and comparison 142.646 sec, and warnIfPerfScore > 24, and perfScore=17.2384]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.43978 secs, and comparison 10.4787 sec, and warnIfPerfScore > 1.7, and perfScore=1.40847]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.64356 secs, and comparison 7.61354 sec, and warnIfPerfScore > 1.5, and perfScore=0.996073]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.18639 secs, and comparison 12.4135 sec, and warnIfPerfScore > 2.1, and perfScore=1.72736]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 9.075 secs, and comparison 7.41487 sec, and warnIfPerfScore > 1.6, and perfScore=0.817066]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.6272 secs, and comparison 1.29927 sec, and warnIfPerfScore > 0.23, and perfScore=0.134958]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4433 secs, and comparison 12.4956 sec, and warnIfPerfScore > 1.3, and perfScore=1.0042]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.74915 secs, and comparison 5.27741 sec, and warnIfPerfScore > 1.2, and perfScore=0.54132]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.93861 secs, and comparison 1.48101 sec, and warnIfPerfScore > 0.33, and perfScore=0.249387]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.38822 secs, and comparison 38.4476 sec, and warnIfPerfScore > 6, and perfScore=4.0953]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.36154 secs, and comparison 5.15724 sec, and warnIfPerfScore > 0.8, and perfScore=0.550896]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.35821 secs, and comparison 9.34239 sec, and warnIfPerfScore > 1.4, and perfScore=0.99831]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.9384 secs, and comparison 3.34962 sec, and warnIfPerfScore > 0.65, and perfScore=0.564062]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.71697 secs, and comparison 36.1327 sec, and warnIfPerfScore > 4.4, and perfScore=3.71851]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.18902 secs, and comparison 3.34699 sec, and warnIfPerfScore > 0.6, and perfScore=0.540795]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.15797 secs, and comparison 3.32163 sec, and warnIfPerfScore > 0.6, and perfScore=0.539403]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.17855 secs, and comparison 3.35797 sec, and warnIfPerfScore > 0.6, and perfScore=0.543488]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.21316 secs, and comparison 4.87688 sec, and warnIfPerfScore > 1.3, and perfScore=0.784927]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.68943 secs, and comparison 8.53456 sec, and warnIfPerfScore > 1.3, and perfScore=1.27583]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.5335 secs, and comparison 5.62997 sec, and warnIfPerfScore > 0.3, and perfScore=0.123645]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.18661 secs, and comparison 11.7673 sec, and warnIfPerfScore > 1.5, and perfScore=1.43739]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.55161 secs, and comparison 2.91835 sec, and warnIfPerfScore > 0.55, and perfScore=0.386454]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.76882 sec, and warnIfPerfScore > 0.1, and perfScore=0.0512547]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.95387 sec, and warnIfPerfScore > 0.5, and perfScore=0.196925]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.09345 secs, and comparison 13.4709 sec, and warnIfPerfScore > 2, and perfScore=1.66442]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.50798 secs, and comparison 27.9047 sec, and warnIfPerfScore > 3.6, and perfScore=2.93487]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 25 seconds]]]

Succeeded
