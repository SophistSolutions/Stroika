Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb 27 12:54:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.74981 secs, and comparison 4.61048 sec, and warnIfPerfScore > 0.65, and perfScore=0.801849]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.70551 secs, and comparison 2.93459 sec, and warnIfPerfScore > 0.5, and perfScore=0.514344]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31309 secs, and comparison 6.96992 sec, and warnIfPerfScore > 1.05, and perfScore=1.10404]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.91707 secs, and comparison 6.97597 sec, and warnIfPerfScore > 1.15, and perfScore=1.17896]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 3.67996 secs, and comparison 2.79525 sec, and warnIfPerfScore > 0.48, and perfScore=0.759586]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 4.46126 secs, and comparison 3.40886 sec, and warnIfPerfScore > 0.57, and perfScore=0.764103]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.32058 secs, and comparison 16.8112 sec, and warnIfPerfScore > 2.9, and perfScore=5.06274]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 3.85867 secs, and comparison 17.5183 sec, and warnIfPerfScore > 2.9, and perfScore=4.53999]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.8
	DETAILS:         	[baseline test 5.45118 secs, and comparison 53.2184 sec, and warnIfPerfScore > 24, and perfScore=9.76274]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.89552 secs, and comparison 9.92585 sec, and warnIfPerfScore > 1.7, and perfScore=2.02754]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.73275 secs, and comparison 5.57052 sec, and warnIfPerfScore > 1.5, and perfScore=0.9717]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.75598 secs, and comparison 12.1211 sec, and warnIfPerfScore > 2.1, and perfScore=4.3981]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 4.0142 secs, and comparison 3.40892 sec, and warnIfPerfScore > 1.6, and perfScore=0.849215]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.211 secs, and comparison 1.47032 sec, and warnIfPerfScore > 0.23, and perfScore=0.349162]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.82271 secs, and comparison 4.60911 sec, and warnIfPerfScore > 1.3, and perfScore=1.20572]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.81334 secs, and comparison 6.68253 sec, and warnIfPerfScore > 1.2, and perfScore=2.3753]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 16.2303 secs, and comparison 1.91711 sec, and warnIfPerfScore > 0.33, and perfScore=0.118119]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.76543 secs, and comparison 40.3176 sec, and warnIfPerfScore > 6, and perfScore=14.5792]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.79174 secs, and comparison 6.43917 sec, and warnIfPerfScore > 0.8, and perfScore=2.30651]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.76284 secs, and comparison 7.97081 sec, and warnIfPerfScore > 1.4, and perfScore=2.88501]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 16.0083 secs, and comparison 3.69966 sec, and warnIfPerfScore > 0.65, and perfScore=0.231109]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 4.17604 secs, and comparison 38.9405 sec, and warnIfPerfScore > 4.4, and perfScore=9.32475]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.5776 secs, and comparison 3.73126 sec, and warnIfPerfScore > 0.6, and perfScore=0.322281]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.738 secs, and comparison 3.70361 sec, and warnIfPerfScore > 0.6, and perfScore=0.315523]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.6775 secs, and comparison 3.66364 sec, and warnIfPerfScore > 0.6, and perfScore=0.313736]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.7273 secs, and comparison 4.46 sec, and warnIfPerfScore > 1.3, and perfScore=0.38031]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 18.074 secs, and comparison 9.87911 sec, and warnIfPerfScore > 1.3, and perfScore=0.546591]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 18.3086 secs, and comparison 7.36443 sec, and warnIfPerfScore > 0.3, and perfScore=0.402238]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.19373 secs, and comparison 13.7701 sec, and warnIfPerfScore > 1.5, and perfScore=1.91419]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.17126 secs, and comparison 2.75456 sec, and warnIfPerfScore > 0.55, and perfScore=0.446353]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 15 secs, and comparison 1.0421 sec, and warnIfPerfScore > 0.1, and perfScore=0.0694733]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.16913 sec, and warnIfPerfScore > 0.5, and perfScore=0.211275]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 46 seconds]]]

Succeeded
