Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 25 2:17:23 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.6145 secs, and comparison 4.98702 sec, and warnIfPerfScore > 0.62, and perfScore=0.518697]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.60888 secs, and comparison 3.37341 sec, and warnIfPerfScore > 0.5, and perfScore=0.351072]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.7845 secs, and comparison 9.1943 sec, and warnIfPerfScore > 1.05, and perfScore=0.85255]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.25485 secs, and comparison 9.18643 sec, and warnIfPerfScore > 1.15, and perfScore=1.11285]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.1897 secs, and comparison 3.15558 sec, and warnIfPerfScore > 0.48, and perfScore=0.309685]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.3758 secs, and comparison 3.67657 sec, and warnIfPerfScore > 0.57, and perfScore=0.354342]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.5927 secs, and comparison 27.581 sec, and warnIfPerfScore > 2.9, and perfScore=2.37918]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.0287 secs, and comparison 28.9885 sec, and warnIfPerfScore > 2.9, and perfScore=2.40993]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 11.4485 secs, and comparison 94.4622 sec, and warnIfPerfScore > 9.7, and perfScore=8.25103]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.76358 secs, and comparison 14.0398 sec, and warnIfPerfScore > 1.6, and perfScore=1.43798]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.0052 secs, and comparison 12.7794 sec, and warnIfPerfScore > 1.5, and perfScore=0.982637]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.29423 secs, and comparison 16.1149 sec, and warnIfPerfScore > 2.1, and perfScore=1.73386]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.9422 secs, and comparison 8.7812 sec, and warnIfPerfScore > 1.3, and perfScore=0.735307]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 12.5206 secs, and comparison 1.87015 sec, and warnIfPerfScore > 0.23, and perfScore=0.149366]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 14.0525 secs, and comparison 12.949 sec, and warnIfPerfScore > 1.3, and perfScore=0.921473]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.87771 secs, and comparison 7.99667 sec, and warnIfPerfScore > 1.2, and perfScore=0.809568]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.52821 secs, and comparison 2.38569 sec, and warnIfPerfScore > 0.33, and perfScore=0.250382]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.50993 secs, and comparison 41.7107 sec, and warnIfPerfScore > 6, and perfScore=4.38602]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.51449 secs, and comparison 6.76605 sec, and warnIfPerfScore > 0.8, and perfScore=0.711131]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.52347 secs, and comparison 13.7527 sec, and warnIfPerfScore > 0.9, and perfScore=1.44409]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.9 and got 1.44409}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.52571 secs, and comparison 3.93897 sec, and warnIfPerfScore > 0.5, and perfScore=0.413509]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 10.464 secs, and comparison 50.2648 sec, and warnIfPerfScore > 4.4, and perfScore=4.8036]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.4 and got 4.8036}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.60234 secs, and comparison 7.33491 sec, and warnIfPerfScore > 0.6, and perfScore=0.763867]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.763867}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 59.6759 secs, and comparison 10.0972 sec, and warnIfPerfScore > 0.2, and perfScore=0.169201]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.4672 secs, and comparison 17.4299 sec, and warnIfPerfScore > 1.5, and perfScore=1.39806]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.7302 secs, and comparison 4.39274 sec, and warnIfPerfScore > 0.55, and perfScore=0.319932]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 15 secs, and comparison 1.23919 sec, and warnIfPerfScore > 0.25, and perfScore=0.0826126]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.58254 sec, and warnIfPerfScore > 0.5, and perfScore=0.238836]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.5846 secs, and comparison 19.9588 sec, and warnIfPerfScore > 2, and perfScore=1.72288]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8459 secs, and comparison 31.9219 sec, and warnIfPerfScore > 3.1, and perfScore=2.69476]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 46 seconds]]]

Succeeded
