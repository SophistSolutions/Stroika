Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 23:10:3 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.01449 secs, and comparison 4.21376 sec, and warnIfPerfScore > 0.65, and perfScore=0.600722]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.94911 secs, and comparison 2.76822 sec, and warnIfPerfScore > 0.5, and perfScore=0.398357]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.23673 secs, and comparison 7.2082 sec, and warnIfPerfScore > 1.05, and perfScore=0.875129]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.54533 secs, and comparison 7.22323 sec, and warnIfPerfScore > 1.15, and perfScore=1.10357]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.7563 secs, and comparison 2.21664 sec, and warnIfPerfScore > 0.48, and perfScore=0.285785]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.90995 secs, and comparison 2.71859 sec, and warnIfPerfScore > 0.57, and perfScore=0.343693]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.89292 secs, and comparison 19.9799 sec, and warnIfPerfScore > 2.9, and perfScore=2.53137]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.99813 secs, and comparison 20.6297 sec, and warnIfPerfScore > 2.9, and perfScore=2.57932]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.38055 secs, and comparison 140.114 sec, and warnIfPerfScore > 24, and perfScore=18.9842]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.7622 secs, and comparison 10.5203 sec, and warnIfPerfScore > 1.7, and perfScore=1.55575]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.3764 secs, and comparison 7.15585 sec, and warnIfPerfScore > 1.5, and perfScore=0.970101]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.9313 secs, and comparison 12.225 sec, and warnIfPerfScore > 2.1, and perfScore=2.0611]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.4491 secs, and comparison 6.32704 sec, and warnIfPerfScore > 1.6, and perfScore=0.748842]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.84761 secs, and comparison 1.26206 sec, and warnIfPerfScore > 0.23, and perfScore=0.142644]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2091 secs, and comparison 12.413 sec, and warnIfPerfScore > 1.3, and perfScore=1.0167]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.39893 secs, and comparison 5.2526 sec, and warnIfPerfScore > 1.2, and perfScore=0.558851]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.64931 secs, and comparison 2.0299 sec, and warnIfPerfScore > 0.33, and perfScore=0.234689]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.03338 secs, and comparison 38.1226 sec, and warnIfPerfScore > 6, and perfScore=4.2202]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.10767 secs, and comparison 5.08974 sec, and warnIfPerfScore > 0.8, and perfScore=0.558841]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.03993 secs, and comparison 8.83928 sec, and warnIfPerfScore > 1.4, and perfScore=0.977804]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.7105 secs, and comparison 3.42166 sec, and warnIfPerfScore > 0.65, and perfScore=0.39282]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.48881 secs, and comparison 35.5877 sec, and warnIfPerfScore > 4.4, and perfScore=3.75049]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.59037 secs, and comparison 3.4095 sec, and warnIfPerfScore > 0.6, and perfScore=0.396898]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.5846 secs, and comparison 3.41711 sec, and warnIfPerfScore > 0.6, and perfScore=0.398051]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.58836 secs, and comparison 3.41971 sec, and warnIfPerfScore > 0.6, and perfScore=0.39818]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 8.72966 secs, and comparison 4.74139 sec, and warnIfPerfScore > 1.3, and perfScore=0.543135]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.30684 secs, and comparison 8.34102 sec, and warnIfPerfScore > 1.3, and perfScore=0.896225]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 43.7974 secs, and comparison 5.46353 sec, and warnIfPerfScore > 0.3, and perfScore=0.124745]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.84678 secs, and comparison 11.7314 sec, and warnIfPerfScore > 1.5, and perfScore=1.49506]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.92122 secs, and comparison 2.85937 sec, and warnIfPerfScore > 0.55, and perfScore=0.413131]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.75328 sec, and warnIfPerfScore > 0.1, and perfScore=0.0502186]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.15901 sec, and warnIfPerfScore > 0.5, and perfScore=0.210601]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.49874 secs, and comparison 12.5791 sec, and warnIfPerfScore > 2, and perfScore=1.67749]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.45169 secs, and comparison 28.2281 sec, and warnIfPerfScore > 3.6, and perfScore=3.33993]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 22 seconds]]]

Succeeded
