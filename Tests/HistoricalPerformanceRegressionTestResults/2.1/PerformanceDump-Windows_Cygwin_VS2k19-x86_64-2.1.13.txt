Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Apr 13 18:41:58 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 40.6784 secs, and comparison 13.5074 sec, and warnIfPerfScore > 0.65, and perfScore=0.332054]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 40.7364 secs, and comparison 12.9479 sec, and warnIfPerfScore > 0.5, and perfScore=0.317847]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 24.3211 secs, and comparison 19.4767 sec, and warnIfPerfScore > 1.05, and perfScore=0.800817]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 21.0275 secs, and comparison 19.7309 sec, and warnIfPerfScore > 1.15, and perfScore=0.938338]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 29.7263 secs, and comparison 3.20941 sec, and warnIfPerfScore > 0.48, and perfScore=0.107965]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 28.6895 secs, and comparison 3.57809 sec, and warnIfPerfScore > 0.57, and perfScore=0.124718]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.2436 secs, and comparison 33.1595 sec, and warnIfPerfScore > 2.9, and perfScore=1.8176]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 19.2102 secs, and comparison 33.1506 sec, and warnIfPerfScore > 2.9, and perfScore=1.72568]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 13.6124 secs, and comparison 230.156 sec, and warnIfPerfScore > 24, and perfScore=16.9079]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 16.6516 secs, and comparison 13.3021 sec, and warnIfPerfScore > 1.7, and perfScore=0.79885]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 43.9759 secs, and comparison 42.9812 sec, and warnIfPerfScore > 1.5, and perfScore=0.977381]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.5198 secs, and comparison 15.6225 sec, and warnIfPerfScore > 2.1, and perfScore=1.00662]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 36.9753 secs, and comparison 8.26385 sec, and warnIfPerfScore > 1.6, and perfScore=0.223496]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 37.7807 secs, and comparison 1.70898 sec, and warnIfPerfScore > 0.23, and perfScore=0.0452341]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.8211 secs, and comparison 20.5112 sec, and warnIfPerfScore > 1.3, and perfScore=1.73514]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.51 secs, and comparison 20.0999 sec, and warnIfPerfScore > 1.2, and perfScore=1.60671]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 18.6876 secs, and comparison 4.854 sec, and warnIfPerfScore > 0.33, and perfScore=0.259744]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 11.9364 secs, and comparison 49.9597 sec, and warnIfPerfScore > 6, and perfScore=4.1855]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.3025 secs, and comparison 20.1856 sec, and warnIfPerfScore > 0.8, and perfScore=1.64078]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.862 secs, and comparison 37.708 sec, and warnIfPerfScore > 1.4, and perfScore=3.17888]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 18.9879 secs, and comparison 4.71863 sec, and warnIfPerfScore > 0.65, and perfScore=0.248508]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 22.86 secs, and comparison 54.5524 sec, and warnIfPerfScore > 4.4, and perfScore=2.38637]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 19.3183 secs, and comparison 5.49236 sec, and warnIfPerfScore > 0.6, and perfScore=0.284309]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.0462 secs, and comparison 5.54864 sec, and warnIfPerfScore > 0.6, and perfScore=0.291326]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 19.3283 secs, and comparison 5.33079 sec, and warnIfPerfScore > 0.6, and perfScore=0.275803]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 18.9198 secs, and comparison 12.123 sec, and warnIfPerfScore > 1.3, and perfScore=0.640755]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 26.2662 secs, and comparison 18.8914 sec, and warnIfPerfScore > 1.3, and perfScore=0.71923]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 92.9041 secs, and comparison 11.4791 sec, and warnIfPerfScore > 0.3, and perfScore=0.123559]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.7291 secs, and comparison 20.8391 sec, and warnIfPerfScore > 1.5, and perfScore=1.24568]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.7585 secs, and comparison 4.53973 sec, and warnIfPerfScore > 0.55, and perfScore=0.329958]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 15 secs, and comparison 1.34702 sec, and warnIfPerfScore > 0.1, and perfScore=0.0898014]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.72621 sec, and warnIfPerfScore > 0.5, and perfScore=0.248414]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.0612 secs, and comparison 18.2449 sec, and warnIfPerfScore > 2, and perfScore=1.06938]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.9231 secs, and comparison 25.7065 sec, and warnIfPerfScore > 3.6, and perfScore=1.29029]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 13 seconds]]]

Succeeded
