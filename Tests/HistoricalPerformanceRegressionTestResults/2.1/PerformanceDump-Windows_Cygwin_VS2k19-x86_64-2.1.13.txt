Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr  1 16:49:4 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 45.3235 secs, and comparison 13.9583 sec, and warnIfPerfScore > 0.65, and perfScore=0.30797]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 43.8574 secs, and comparison 14.0014 sec, and warnIfPerfScore > 0.5, and perfScore=0.319248]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 25.6759 secs, and comparison 20.2625 sec, and warnIfPerfScore > 1.05, and perfScore=0.789162]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 22.4629 secs, and comparison 20.8777 sec, and warnIfPerfScore > 1.15, and perfScore=0.92943]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 30.6958 secs, and comparison 3.29992 sec, and warnIfPerfScore > 0.48, and perfScore=0.107504]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 30.2089 secs, and comparison 4.26044 sec, and warnIfPerfScore > 0.57, and perfScore=0.141033]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 19.1299 secs, and comparison 34.0381 sec, and warnIfPerfScore > 2.9, and perfScore=1.77931]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 20.8009 secs, and comparison 33.4962 sec, and warnIfPerfScore > 2.9, and perfScore=1.61032]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 15.3703 secs, and comparison 179.055 sec, and warnIfPerfScore > 24, and perfScore=11.6494]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 17.7568 secs, and comparison 14.6656 sec, and warnIfPerfScore > 1.7, and perfScore=0.825912]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 47.6331 secs, and comparison 45.843 sec, and warnIfPerfScore > 1.5, and perfScore=0.962419]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 17.4053 secs, and comparison 17.1889 sec, and warnIfPerfScore > 2.1, and perfScore=0.987566]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 38.5687 secs, and comparison 9.39182 sec, and warnIfPerfScore > 1.6, and perfScore=0.243509]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 41.1507 secs, and comparison 1.99609 sec, and warnIfPerfScore > 0.23, and perfScore=0.0485069]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 12.6212 secs, and comparison 24.7091 sec, and warnIfPerfScore > 1.3, and perfScore=1.95774]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.893 secs, and comparison 20.1252 sec, and warnIfPerfScore > 1.2, and perfScore=1.56093]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 20.2021 secs, and comparison 5.14212 sec, and warnIfPerfScore > 0.33, and perfScore=0.254535]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 12.7876 secs, and comparison 53.3878 sec, and warnIfPerfScore > 6, and perfScore=4.17496]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.6601 secs, and comparison 19.263 sec, and warnIfPerfScore > 0.8, and perfScore=1.52155]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.4981 secs, and comparison 42.2516 sec, and warnIfPerfScore > 1.4, and perfScore=3.38063]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 19.911 secs, and comparison 4.55264 sec, and warnIfPerfScore > 0.65, and perfScore=0.22865]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 22.9924 secs, and comparison 57.6153 sec, and warnIfPerfScore > 4.4, and perfScore=2.50584]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.0727 secs, and comparison 5.19938 sec, and warnIfPerfScore > 0.6, and perfScore=0.272608]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.3036 secs, and comparison 5.5551 sec, and warnIfPerfScore > 0.6, and perfScore=0.273602]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.3833 secs, and comparison 5.59159 sec, and warnIfPerfScore > 0.6, and perfScore=0.288474]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 20.0441 secs, and comparison 13.0376 sec, and warnIfPerfScore > 1.3, and perfScore=0.650446]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 27.4803 secs, and comparison 19.9568 sec, and warnIfPerfScore > 1.3, and perfScore=0.72622]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 95.9786 secs, and comparison 12.2352 sec, and warnIfPerfScore > 0.3, and perfScore=0.127479]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.3116 secs, and comparison 21.1637 sec, and warnIfPerfScore > 1.5, and perfScore=1.15575]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.3601 secs, and comparison 5.33292 sec, and warnIfPerfScore > 0.55, and perfScore=0.347192]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 15 secs, and comparison 1.37191 sec, and warnIfPerfScore > 0.1, and perfScore=0.0914605]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.60307 sec, and warnIfPerfScore > 0.5, and perfScore=0.240205]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.7861 secs, and comparison 26.4339 sec, and warnIfPerfScore > 2, and perfScore=1.33599]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 22.0147 secs, and comparison 27.6965 sec, and warnIfPerfScore > 3.6, and perfScore=1.25809]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes, 3 seconds]]]

Succeeded
