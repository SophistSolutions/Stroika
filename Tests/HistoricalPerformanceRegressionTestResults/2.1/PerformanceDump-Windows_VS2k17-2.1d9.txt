Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/25/18 11:33:20]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.6037 secs, and comparison 5.58094 sec, and warnIfPerfScore > 0.62, and perfScore=0.480962]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.4349 secs, and comparison 4.25097 sec, and warnIfPerfScore > 0.5, and perfScore=0.371754]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.3556 secs, and comparison 9.72344 sec, and warnIfPerfScore > 1.05, and perfScore=0.856268]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.92316 secs, and comparison 3.69663 sec, and warnIfPerfScore > 0.43, and perfScore=0.372526]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.1781 secs, and comparison 4.45742 sec, and warnIfPerfScore > 0.5, and perfScore=0.437944]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.4316 secs, and comparison 27.3981 sec, and warnIfPerfScore > 2.8, and perfScore=2.3967]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.4888 secs, and comparison 29.4278 sec, and warnIfPerfScore > 2.9, and perfScore=2.56144]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 11.4507 secs, and comparison 94.9428 sec, and warnIfPerfScore > 9.7, and perfScore=8.29141]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.1764 secs, and comparison 14.7538 sec, and warnIfPerfScore > 1.6, and perfScore=1.32008]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.6152 secs, and comparison 14.4715 sec, and warnIfPerfScore > 1.5, and perfScore=1.2459]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.51792 secs, and comparison 15.2258 sec, and warnIfPerfScore > 2.1, and perfScore=1.7875]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.6693 secs, and comparison 12.0961 sec, and warnIfPerfScore > 1.3, and perfScore=1.03658]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.3262 secs, and comparison 1.49069 sec, and warnIfPerfScore > 0.18, and perfScore=0.120937]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.5404 secs, and comparison 11.9583 sec, and warnIfPerfScore > 1.3, and perfScore=1.03622]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.8548 secs, and comparison 8.94514 sec, and warnIfPerfScore > 1.2, and perfScore=0.907694]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.3405 secs, and comparison 2.25353 sec, and warnIfPerfScore > 0.33, and perfScore=0.217932]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.43024 secs, and comparison 45.8572 sec, and warnIfPerfScore > 6, and perfScore=4.86278]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.1044 secs, and comparison 4.14935 sec, and warnIfPerfScore > 0.5, and perfScore=0.410648]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.7888 secs, and comparison 41.3098 sec, and warnIfPerfScore > 4.4, and perfScore=3.82896]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.1252 secs, and comparison 4.6138 sec, and warnIfPerfScore > 0.6, and perfScore=0.455673]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.4818 secs, and comparison 18.3356 sec, and warnIfPerfScore > 1.5, and perfScore=1.26612]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4278 secs, and comparison 4.32046 sec, and warnIfPerfScore > 0.55, and perfScore=0.321756]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.55906 sec, and warnIfPerfScore > 0.25, and perfScore=0.103937]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.57743 sec, and warnIfPerfScore > 0.5, and perfScore=0.305162]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.7873 secs, and comparison 17.4836 sec, and warnIfPerfScore > 1.7, and perfScore=1.36726]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.0699 secs, and comparison 32.3635 sec, and warnIfPerfScore > 3, and perfScore=2.68135]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 47 seconds]]]

Succeeded
