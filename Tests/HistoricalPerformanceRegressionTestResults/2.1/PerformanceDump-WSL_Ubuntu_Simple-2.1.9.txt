Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 10 21:50:12 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 2.11947 secs, and comparison 1.18465 sec, and warnIfPerfScore > 0.65, and perfScore=0.558939]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.13966 secs, and comparison 2.61727 sec, and warnIfPerfScore > 0.5, and perfScore=1.22322]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 1.973 secs, and comparison 6.35138 sec, and warnIfPerfScore > 1.05, and perfScore=3.21915]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 1.64717 secs, and comparison 6.34653 sec, and warnIfPerfScore > 1.15, and perfScore=3.85299]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 2.62928 secs, and comparison 0.734961 sec, and warnIfPerfScore > 0.48, and perfScore=0.279529]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 3.21587 secs, and comparison 0.80195 sec, and warnIfPerfScore > 0.57, and perfScore=0.249372]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 2.50564 secs, and comparison 9.7738 sec, and warnIfPerfScore > 2.9, and perfScore=3.90072]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 2.93148 secs, and comparison 10.0334 sec, and warnIfPerfScore > 2.9, and perfScore=3.42263]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 3.78748 secs, and comparison 31.4227 sec, and warnIfPerfScore > 24, and perfScore=8.29647]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 3.77426 secs, and comparison 6.42032 sec, and warnIfPerfScore > 1.7, and perfScore=1.70108]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.21564 secs, and comparison 4.05782 sec, and warnIfPerfScore > 1.5, and perfScore=0.962563]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 1.97461 secs, and comparison 8.17965 sec, and warnIfPerfScore > 2.1, and perfScore=4.1424]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 2.96098 secs, and comparison 2.99582 sec, and warnIfPerfScore > 1.6, and perfScore=1.01177]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 3.07352 secs, and comparison 0.970432 sec, and warnIfPerfScore > 0.23, and perfScore=0.315739]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.5834 secs, and comparison 3.32097 sec, and warnIfPerfScore > 1.3, and perfScore=1.2855]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 2.50943 secs, and comparison 4.88543 sec, and warnIfPerfScore > 1.2, and perfScore=1.94683]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 10.4184 secs, and comparison 1.17708 sec, and warnIfPerfScore > 0.33, and perfScore=0.112981]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.36184 secs, and comparison 40.7574 sec, and warnIfPerfScore > 6, and perfScore=17.2566]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 2.32781 secs, and comparison 4.32819 sec, and warnIfPerfScore > 0.8, and perfScore=1.85934]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.33138 secs, and comparison 5.46711 sec, and warnIfPerfScore > 1.4, and perfScore=2.34501]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.2902 secs, and comparison 3.45541 sec, and warnIfPerfScore > 0.65, and perfScore=0.335794]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.23299 secs, and comparison 37.4224 sec, and warnIfPerfScore > 4.4, and perfScore=11.5752]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.83133 secs, and comparison 3.37857 sec, and warnIfPerfScore > 0.6, and perfScore=0.431417]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.52021 secs, and comparison 3.38534 sec, and warnIfPerfScore > 0.6, and perfScore=0.450165]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.52512 secs, and comparison 3.35369 sec, and warnIfPerfScore > 0.6, and perfScore=0.445666]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.53248 secs, and comparison 3.54709 sec, and warnIfPerfScore > 1.3, and perfScore=0.470906]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.3531 secs, and comparison 7.73497 sec, and warnIfPerfScore > 1.3, and perfScore=0.626155]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.4255 secs, and comparison 4.75946 sec, and warnIfPerfScore > 0.3, and perfScore=0.383041]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.96447 secs, and comparison 9.14163 sec, and warnIfPerfScore > 1.5, and perfScore=1.84141]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.75671 secs, and comparison 1.4873 sec, and warnIfPerfScore > 0.55, and perfScore=0.25836]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.036
	DETAILS:         	[baseline test 15 secs, and comparison 0.54192 sec, and warnIfPerfScore > 0.1, and perfScore=0.036128]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.16205 sec, and warnIfPerfScore > 0.5, and perfScore=0.0774699]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 13 seconds]]]

Succeeded
