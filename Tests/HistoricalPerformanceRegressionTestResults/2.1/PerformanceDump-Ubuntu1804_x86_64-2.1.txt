Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 15 19:43:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.13956 secs, and comparison 4.83827 sec, and warnIfPerfScore > 0.65, and perfScore=0.788048]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.01116 secs, and comparison 2.93985 sec, and warnIfPerfScore > 0.5, and perfScore=0.489066]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.92699 secs, and comparison 7.07151 sec, and warnIfPerfScore > 1.05, and perfScore=0.892079]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.10149 secs, and comparison 7.1838 sec, and warnIfPerfScore > 1.15, and perfScore=1.17738]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.21724 secs, and comparison 2.62788 sec, and warnIfPerfScore > 0.48, and perfScore=0.623129]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 4.70522 secs, and comparison 3.65956 sec, and warnIfPerfScore > 0.57, and perfScore=0.777766]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 3.60277 secs, and comparison 17.3286 sec, and warnIfPerfScore > 2.9, and perfScore=4.80978]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 3.94114 secs, and comparison 18.0628 sec, and warnIfPerfScore > 2.9, and perfScore=4.58314]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.74192 secs, and comparison 58.8476 sec, and warnIfPerfScore > 24, and perfScore=12.4101]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.10191 secs, and comparison 10.6633 sec, and warnIfPerfScore > 1.7, and perfScore=2.09005]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.04887 secs, and comparison 5.79896 sec, and warnIfPerfScore > 1.5, and perfScore=0.958684]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.841 secs, and comparison 12.4725 sec, and warnIfPerfScore > 2.1, and perfScore=4.3902]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.68342 secs, and comparison 4.24388 sec, and warnIfPerfScore > 1.6, and perfScore=0.906148]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 4.47722 secs, and comparison 1.88465 sec, and warnIfPerfScore > 0.23, and perfScore=0.420943]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.99203 secs, and comparison 4.90803 sec, and warnIfPerfScore > 1.3, and perfScore=1.22946]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.47347 secs, and comparison 7.25728 sec, and warnIfPerfScore > 1.2, and perfScore=2.08935]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 16.5513 secs, and comparison 1.65564 sec, and warnIfPerfScore > 0.33, and perfScore=0.100031]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.11319 secs, and comparison 44.2083 sec, and warnIfPerfScore > 6, and perfScore=14.2003]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.48255 secs, and comparison 6.91633 sec, and warnIfPerfScore > 0.8, and perfScore=1.986]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.43381 secs, and comparison 7.60392 sec, and warnIfPerfScore > 1.4, and perfScore=2.21443]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.6996 secs, and comparison 3.68426 sec, and warnIfPerfScore > 0.65, and perfScore=0.314904]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 5.79243 secs, and comparison 40.1735 sec, and warnIfPerfScore > 4.4, and perfScore=6.93552]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.1045 secs, and comparison 3.97691 sec, and warnIfPerfScore > 0.6, and perfScore=0.328548]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.3957 secs, and comparison 4.18593 sec, and warnIfPerfScore > 0.6, and perfScore=0.290776]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.9192 secs, and comparison 3.70145 sec, and warnIfPerfScore > 0.6, and perfScore=0.286507]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.9918 secs, and comparison 4.53188 sec, and warnIfPerfScore > 1.3, and perfScore=0.348827]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 20.1543 secs, and comparison 10.0331 sec, and warnIfPerfScore > 1.3, and perfScore=0.497816]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 19.1029 secs, and comparison 7.49754 sec, and warnIfPerfScore > 0.3, and perfScore=0.392481]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.43012 secs, and comparison 12.9728 sec, and warnIfPerfScore > 1.5, and perfScore=1.53886]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.37678 secs, and comparison 2.46622 sec, and warnIfPerfScore > 0.55, and perfScore=0.334322]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.832629 sec, and warnIfPerfScore > 0.1, and perfScore=0.0555086]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.25236 sec, and warnIfPerfScore > 0.5, and perfScore=0.216824]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 20 seconds]]]

Succeeded
