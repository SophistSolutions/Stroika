Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb 15 14:24:54 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.11341 secs, and comparison 4.75111 sec, and warnIfPerfScore > 0.65, and perfScore=0.667909]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.56198 secs, and comparison 2.98723 sec, and warnIfPerfScore > 0.5, and perfScore=0.395033]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.6726 secs, and comparison 8.50941 sec, and warnIfPerfScore > 1.05, and perfScore=0.879744]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.72488 secs, and comparison 8.50544 sec, and warnIfPerfScore > 1.15, and perfScore=1.10105]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.80839 secs, and comparison 2.94605 sec, and warnIfPerfScore > 0.48, and perfScore=0.334459]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.77479 secs, and comparison 3.75134 sec, and warnIfPerfScore > 0.57, and perfScore=0.427514]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.05554 secs, and comparison 24.4693 sec, and warnIfPerfScore > 2.9, and perfScore=2.70214]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.62735 secs, and comparison 24.5408 sec, and warnIfPerfScore > 2.9, and perfScore=2.54907]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 7.88296 secs, and comparison 126.347 sec, and warnIfPerfScore > 24, and perfScore=16.0279]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.63878 secs, and comparison 12.2414 sec, and warnIfPerfScore > 1.7, and perfScore=1.60254]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.6597 secs, and comparison 8.48247 sec, and warnIfPerfScore > 1.5, and perfScore=0.979534]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.06128 secs, and comparison 14.2517 sec, and warnIfPerfScore > 2.1, and perfScore=2.01828]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.48638 secs, and comparison 5.96805 sec, and warnIfPerfScore > 1.6, and perfScore=0.629118]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 9.94767 secs, and comparison 0.974216 sec, and warnIfPerfScore > 0.23, and perfScore=0.0979341]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.939 secs, and comparison 11.3992 sec, and warnIfPerfScore > 1.3, and perfScore=1.04206]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.08866 secs, and comparison 7.5789 sec, and warnIfPerfScore > 1.2, and perfScore=0.936979]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.5308 secs, and comparison 2.59856 sec, and warnIfPerfScore > 0.33, and perfScore=0.225358]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 7.79985 secs, and comparison 41.7647 sec, and warnIfPerfScore > 6, and perfScore=5.35455]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.84092 secs, and comparison 7.45997 sec, and warnIfPerfScore > 0.8, and perfScore=0.951416]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.74206 secs, and comparison 10.6929 sec, and warnIfPerfScore > 1.4, and perfScore=1.38115]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.3573 secs, and comparison 3.82801 sec, and warnIfPerfScore > 0.65, and perfScore=0.337053]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.75817 secs, and comparison 38.3008 sec, and warnIfPerfScore > 4.4, and perfScore=4.37315]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2122 secs, and comparison 3.60664 sec, and warnIfPerfScore > 0.6, and perfScore=0.321672]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2258 secs, and comparison 3.63877 sec, and warnIfPerfScore > 0.6, and perfScore=0.324143]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2509 secs, and comparison 3.60647 sec, and warnIfPerfScore > 0.6, and perfScore=0.320548]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.2109 secs, and comparison 7.28216 sec, and warnIfPerfScore > 1.3, and perfScore=0.649559]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 12.6289 secs, and comparison 10.6418 sec, and warnIfPerfScore > 1.3, and perfScore=0.842653]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 51.6176 secs, and comparison 9.99592 sec, and warnIfPerfScore > 0.3, and perfScore=0.193653]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.0277 secs, and comparison 12.7827 sec, and warnIfPerfScore > 1.5, and perfScore=1.59233]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.0721 secs, and comparison 3.70307 sec, and warnIfPerfScore > 0.55, and perfScore=0.367655]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 15 secs, and comparison 0.932413 sec, and warnIfPerfScore > 0.1, and perfScore=0.0621609]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.3327 sec, and warnIfPerfScore > 0.5, and perfScore=0.22218]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.60282 secs, and comparison 14.7237 sec, and warnIfPerfScore > 2, and perfScore=1.53326]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.56758 secs, and comparison 17.94 sec, and warnIfPerfScore > 3.6, and perfScore=1.87508]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 38 seconds]]]

Succeeded
