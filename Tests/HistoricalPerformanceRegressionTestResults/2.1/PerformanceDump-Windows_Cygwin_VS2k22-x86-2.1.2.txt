Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 12::8 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.13292 secs, and comparison 4.68371 sec, and warnIfPerfScore > 0.65, and perfScore=0.575896]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.323 secs, and comparison 3.57125 sec, and warnIfPerfScore > 0.5, and perfScore=0.34595]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 11.448 secs, and comparison 9.09405 sec, and warnIfPerfScore > 1.05, and perfScore=0.794375]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.89942 secs, and comparison 9.25614 sec, and warnIfPerfScore > 1.15, and perfScore=1.04008]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.77892 secs, and comparison 2.81531 sec, and warnIfPerfScore > 0.48, and perfScore=0.287896]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.0159 secs, and comparison 3.26572 sec, and warnIfPerfScore > 0.57, and perfScore=0.296456]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.8316 secs, and comparison 28.1056 sec, and warnIfPerfScore > 2.9, and perfScore=2.37546]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.9526 secs, and comparison 26.2904 sec, and warnIfPerfScore > 2.9, and perfScore=2.40038]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 8.79409 secs, and comparison 172.91 sec, and warnIfPerfScore > 24, and perfScore=19.6621]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.5125 secs, and comparison 13.6711 sec, and warnIfPerfScore > 1.7, and perfScore=1.1875]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.66421 secs, and comparison 10.6036 sec, and warnIfPerfScore > 1.5, and perfScore=1.0972]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.6594 secs, and comparison 16.3826 sec, and warnIfPerfScore > 2.1, and perfScore=1.4051]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.99171 secs, and comparison 8.40669 sec, and warnIfPerfScore > 1.6, and perfScore=0.841367]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 12.9226 secs, and comparison 1.97809 sec, and warnIfPerfScore > 0.23, and perfScore=0.153072]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 15.4883 secs, and comparison 15.395 sec, and warnIfPerfScore > 1.3, and perfScore=0.993974]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.507 secs, and comparison 7.67262 sec, and warnIfPerfScore > 1.2, and perfScore=0.66678]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.43667 secs, and comparison 2.2266 sec, and warnIfPerfScore > 0.33, and perfScore=0.263919]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 12.0409 secs, and comparison 43.9499 sec, and warnIfPerfScore > 6, and perfScore=3.65004]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.157 secs, and comparison 5.81974 sec, and warnIfPerfScore > 0.8, and perfScore=0.572979]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.4457 secs, and comparison 13.4697 sec, and warnIfPerfScore > 1.4, and perfScore=1.17684]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 7.66563 secs, and comparison 4.14617 sec, and warnIfPerfScore > 0.65, and perfScore=0.540879]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 12.1917 secs, and comparison 43.8593 sec, and warnIfPerfScore > 4.4, and perfScore=3.59746]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.84616 secs, and comparison 4.071 sec, and warnIfPerfScore > 0.6, and perfScore=0.460199]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.71683 secs, and comparison 4.08952 sec, and warnIfPerfScore > 0.6, and perfScore=0.469152]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.59154 secs, and comparison 3.85858 sec, and warnIfPerfScore > 0.6, and perfScore=0.508273]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.51737 secs, and comparison 5.96355 sec, and warnIfPerfScore > 1.3, and perfScore=0.793303]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.95614 secs, and comparison 9.00382 sec, and warnIfPerfScore > 1.3, and perfScore=1.13168]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 49.0006 secs, and comparison 6.5505 sec, and warnIfPerfScore > 0.3, and perfScore=0.133682]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.99771 secs, and comparison 13.4014 sec, and warnIfPerfScore > 1.5, and perfScore=1.48942]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.54844 secs, and comparison 3.75169 sec, and warnIfPerfScore > 0.55, and perfScore=0.497015]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.833996 sec, and warnIfPerfScore > 0.1, and perfScore=0.0555998]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23661 sec, and warnIfPerfScore > 0.5, and perfScore=0.215774]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.54561 secs, and comparison 14.2225 sec, and warnIfPerfScore > 2, and perfScore=1.6643]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.79842 secs, and comparison 30.7253 sec, and warnIfPerfScore > 3.6, and perfScore=3.13574]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 11 seconds]]]

Succeeded
