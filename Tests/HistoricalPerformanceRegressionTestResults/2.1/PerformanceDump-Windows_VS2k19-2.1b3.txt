Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug 10 4:58:53 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.1628 secs, and comparison 5.0121 sec, and warnIfPerfScore > 0.62, and perfScore=0.449002]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.1172 secs, and comparison 3.34915 sec, and warnIfPerfScore > 0.5, and perfScore=0.301258]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.982 secs, and comparison 9.09621 sec, and warnIfPerfScore > 1.05, and perfScore=0.828282]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.2508 secs, and comparison 4.07603 sec, and warnIfPerfScore > 0.48, and perfScore=0.39763]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3407 secs, and comparison 4.41849 sec, and warnIfPerfScore > 0.57, and perfScore=0.427291]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.209 secs, and comparison 26.2064 sec, and warnIfPerfScore > 2.9, and perfScore=2.33797]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.7565 secs, and comparison 27.9903 sec, and warnIfPerfScore > 2.9, and perfScore=2.38083]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 11.4921 secs, and comparison 91.3265 sec, and warnIfPerfScore > 9.7, and perfScore=7.94692]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.67849 secs, and comparison 12.1534 sec, and warnIfPerfScore > 1.6, and perfScore=1.25571]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.8246 secs, and comparison 13.8033 sec, and warnIfPerfScore > 1.5, and perfScore=0.99846]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.85297 secs, and comparison 12.1854 sec, and warnIfPerfScore > 2.1, and perfScore=1.37642]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 12.7205 secs, and comparison 8.73371 sec, and warnIfPerfScore > 1.3, and perfScore=0.686586]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.1135 secs, and comparison 2.59694 sec, and warnIfPerfScore > 0.23, and perfScore=0.198035]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 14.3151 secs, and comparison 13.0186 sec, and warnIfPerfScore > 1.3, and perfScore=0.909428]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.96187 secs, and comparison 7.50748 sec, and warnIfPerfScore > 1.2, and perfScore=0.753622]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.10815 secs, and comparison 1.90769 sec, and warnIfPerfScore > 0.33, and perfScore=0.209448]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 9.51866 secs, and comparison 45.2892 sec, and warnIfPerfScore > 6, and perfScore=4.75794]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.11477 secs, and comparison 4.15556 sec, and warnIfPerfScore > 0.5, and perfScore=0.455915]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.441 secs, and comparison 39.9243 sec, and warnIfPerfScore > 4.4, and perfScore=3.82379]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.18158 secs, and comparison 4.37934 sec, and warnIfPerfScore > 0.6, and perfScore=0.47697]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.7387 secs, and comparison 17.9328 sec, and warnIfPerfScore > 1.5, and perfScore=1.21671]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.5884 secs, and comparison 4.33065 sec, and warnIfPerfScore > 0.55, and perfScore=0.318701]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43958 sec, and warnIfPerfScore > 0.25, and perfScore=0.0959717]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.56581 sec, and warnIfPerfScore > 0.5, and perfScore=0.23772]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.024 secs, and comparison 18.5958 sec, and warnIfPerfScore > 2, and perfScore=1.68685]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.0217 secs, and comparison 32.2954 sec, and warnIfPerfScore > 3.1, and perfScore=2.68642]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 28 seconds]]]

Succeeded
