Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb 13 16:26:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.44356 secs, and comparison 4.66272 sec, and warnIfPerfScore > 0.65, and perfScore=0.62641]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.36097 secs, and comparison 2.69873 sec, and warnIfPerfScore > 0.5, and perfScore=0.366627]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.62982 secs, and comparison 8.70415 sec, and warnIfPerfScore > 1.05, and perfScore=0.903875]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.58467 secs, and comparison 8.50159 sec, and warnIfPerfScore > 1.15, and perfScore=1.12089]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.70855 secs, and comparison 3.22789 sec, and warnIfPerfScore > 0.48, and perfScore=0.370657]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.73006 secs, and comparison 3.83576 sec, and warnIfPerfScore > 0.57, and perfScore=0.439373]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.93426 secs, and comparison 23.1953 sec, and warnIfPerfScore > 2.9, and perfScore=2.59622]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.37568 secs, and comparison 24.4829 sec, and warnIfPerfScore > 2.9, and perfScore=2.61133]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.61735 secs, and comparison 138.634 sec, and warnIfPerfScore > 24, and perfScore=18.1997]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.55623 secs, and comparison 11.8595 sec, and warnIfPerfScore > 1.7, and perfScore=1.38606]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.68354 secs, and comparison 8.27211 sec, and warnIfPerfScore > 1.5, and perfScore=0.95262]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.45499 secs, and comparison 14.4501 sec, and warnIfPerfScore > 2.1, and perfScore=1.93831]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 9.47011 secs, and comparison 6.20138 sec, and warnIfPerfScore > 1.6, and perfScore=0.654838]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.0179 secs, and comparison 1.24676 sec, and warnIfPerfScore > 0.23, and perfScore=0.124453]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.8824 secs, and comparison 11.3652 sec, and warnIfPerfScore > 1.3, and perfScore=1.04436]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.9489 secs, and comparison 7.54623 sec, and warnIfPerfScore > 1.2, and perfScore=0.843259]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.3106 secs, and comparison 2.51567 sec, and warnIfPerfScore > 0.33, and perfScore=0.222416]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.594 secs, and comparison 41.8217 sec, and warnIfPerfScore > 6, and perfScore=4.86639]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 8.57945 secs, and comparison 7.1358 sec, and warnIfPerfScore > 0.8, and perfScore=0.831732]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.57317 secs, and comparison 12.9933 sec, and warnIfPerfScore > 1.4, and perfScore=1.51557]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.1323 secs, and comparison 3.84978 sec, and warnIfPerfScore > 0.65, and perfScore=0.34582]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.11931 secs, and comparison 37.2637 sec, and warnIfPerfScore > 4.4, and perfScore=4.08624]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.922 secs, and comparison 3.79775 sec, and warnIfPerfScore > 0.6, and perfScore=0.347716]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.9561 secs, and comparison 3.79384 sec, and warnIfPerfScore > 0.6, and perfScore=0.346278]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.9251 secs, and comparison 3.74896 sec, and warnIfPerfScore > 0.6, and perfScore=0.343151]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.9502 secs, and comparison 7.67561 sec, and warnIfPerfScore > 1.3, and perfScore=0.700953]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 12.2598 secs, and comparison 10.7134 sec, and warnIfPerfScore > 1.3, and perfScore=0.873866]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 52.5381 secs, and comparison 6.72062 sec, and warnIfPerfScore > 0.3, and perfScore=0.127919]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.79488 secs, and comparison 12.6649 sec, and warnIfPerfScore > 1.5, and perfScore=1.62477]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.8742 secs, and comparison 4.46539 sec, and warnIfPerfScore > 0.55, and perfScore=0.32185]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.13113 sec, and warnIfPerfScore > 0.1, and perfScore=0.0754089]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.57078 sec, and warnIfPerfScore > 0.5, and perfScore=0.238052]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.54299 secs, and comparison 17.0849 sec, and warnIfPerfScore > 2, and perfScore=1.79031]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.59284 secs, and comparison 16.9585 sec, and warnIfPerfScore > 3.6, and perfScore=1.76783]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 45 seconds]]]

Succeeded
