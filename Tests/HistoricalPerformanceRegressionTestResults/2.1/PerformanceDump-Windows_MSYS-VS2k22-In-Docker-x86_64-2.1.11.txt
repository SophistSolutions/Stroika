Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 12:9:13 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 5.99253 secs, and comparison 4.5642 sec, and warnIfPerfScore > 0.65, and perfScore=0.761647]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.99466 secs, and comparison 2.74537 sec, and warnIfPerfScore > 0.5, and perfScore=0.457969]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.34982 secs, and comparison 7.5529 sec, and warnIfPerfScore > 1.05, and perfScore=0.904558]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.87614 secs, and comparison 7.77703 sec, and warnIfPerfScore > 1.15, and perfScore=1.13102]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.88382 secs, and comparison 2.36813 sec, and warnIfPerfScore > 0.48, and perfScore=0.266566]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.81742 secs, and comparison 2.89206 sec, and warnIfPerfScore > 0.57, and perfScore=0.327994]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.31874 secs, and comparison 20.098 sec, and warnIfPerfScore > 2.9, and perfScore=2.7461]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.53079 secs, and comparison 20.4446 sec, and warnIfPerfScore > 2.9, and perfScore=2.7148]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.12093 secs, and comparison 141.512 sec, and warnIfPerfScore > 24, and perfScore=23.1193]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.16645 secs, and comparison 10.6936 sec, and warnIfPerfScore > 1.7, and perfScore=1.73417]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.05567 secs, and comparison 5.74277 sec, and warnIfPerfScore > 1.5, and perfScore=0.948328]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.13047 secs, and comparison 12.7311 sec, and warnIfPerfScore > 2.1, and perfScore=2.07669]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.33323 secs, and comparison 4.31689 sec, and warnIfPerfScore > 1.6, and perfScore=0.588676]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 7.60111 secs, and comparison 0.786458 sec, and warnIfPerfScore > 0.23, and perfScore=0.103466]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1778 secs, and comparison 12.6231 sec, and warnIfPerfScore > 1.3, and perfScore=1.03657]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.67935 secs, and comparison 5.75722 sec, and warnIfPerfScore > 1.2, and perfScore=0.663325]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.08949 secs, and comparison 2.17301 sec, and warnIfPerfScore > 0.33, and perfScore=0.239068]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.29309 secs, and comparison 40.9294 sec, and warnIfPerfScore > 6, and perfScore=4.93536]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 8.24201 secs, and comparison 5.57919 sec, and warnIfPerfScore > 0.8, and perfScore=0.676921]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.27063 secs, and comparison 7.87491 sec, and warnIfPerfScore > 1.4, and perfScore=0.952153]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.20192 secs, and comparison 3.62494 sec, and warnIfPerfScore > 0.65, and perfScore=0.393934]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.84757 secs, and comparison 39.0031 sec, and warnIfPerfScore > 4.4, and perfScore=4.40834]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.33077 secs, and comparison 3.55143 sec, and warnIfPerfScore > 0.6, and perfScore=0.380615]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.84807 secs, and comparison 3.51096 sec, and warnIfPerfScore > 0.6, and perfScore=0.396805]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.07464 secs, and comparison 3.55415 sec, and warnIfPerfScore > 0.6, and perfScore=0.391657]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.77377 secs, and comparison 5.55943 sec, and warnIfPerfScore > 1.3, and perfScore=0.633642]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.3512 secs, and comparison 8.7787 sec, and warnIfPerfScore > 1.3, and perfScore=0.938779]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 40.0803 secs, and comparison 6.34002 sec, and warnIfPerfScore > 0.3, and perfScore=0.158183]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.27177 secs, and comparison 10.2876 sec, and warnIfPerfScore > 1.5, and perfScore=1.6403]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.18209 secs, and comparison 3.10193 sec, and warnIfPerfScore > 0.55, and perfScore=0.431898]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 15 secs, and comparison 0.67965 sec, and warnIfPerfScore > 0.1, and perfScore=0.04531]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.11001 sec, and warnIfPerfScore > 0.5, and perfScore=0.207334]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.23964 secs, and comparison 13.4309 sec, and warnIfPerfScore > 2, and perfScore=1.85519]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.51685 secs, and comparison 15.9963 sec, and warnIfPerfScore > 3.6, and perfScore=1.87819]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 9 seconds]]]

Succeeded
