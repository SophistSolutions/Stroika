Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan  7 2:8:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.14061 secs, and comparison 4.21101 sec, and warnIfPerfScore > 0.65, and perfScore=0.819166]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.23538 secs, and comparison 2.42532 sec, and warnIfPerfScore > 0.5, and perfScore=0.463256]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.64069 secs, and comparison 6.89408 sec, and warnIfPerfScore > 1.05, and perfScore=0.902285]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.33561 secs, and comparison 6.95721 sec, and warnIfPerfScore > 1.15, and perfScore=1.09811]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.20807 secs, and comparison 2.41802 sec, and warnIfPerfScore > 0.48, and perfScore=0.29459]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.23647 secs, and comparison 2.96431 sec, and warnIfPerfScore > 0.57, and perfScore=0.3599]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.22886 secs, and comparison 18.6149 sec, and warnIfPerfScore > 2.9, and perfScore=2.9885]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.73546 secs, and comparison 18.2657 sec, and warnIfPerfScore > 2.9, and perfScore=2.71186]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.9571 secs, and comparison 134.703 sec, and warnIfPerfScore > 24, and perfScore=22.6122]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.50012 secs, and comparison 9.82668 sec, and warnIfPerfScore > 1.6, and perfScore=1.78663]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.01589 secs, and comparison 5.77449 sec, and warnIfPerfScore > 1.5, and perfScore=0.959873]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 116.358 secs, and comparison 11.5935 sec, and warnIfPerfScore > 2.1, and perfScore=0.099636]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.4397 secs, and comparison 4.51803 sec, and warnIfPerfScore > 1.6, and perfScore=0.363193]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 12.957 secs, and comparison 0.647823 sec, and warnIfPerfScore > 0.23, and perfScore=0.0499978]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.6433 secs, and comparison 11.9988 sec, and warnIfPerfScore > 1.3, and perfScore=1.03053]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.8772 secs, and comparison 5.26339 sec, and warnIfPerfScore > 1.2, and perfScore=0.443151]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 7.82096 secs, and comparison 1.7468 sec, and warnIfPerfScore > 0.33, and perfScore=0.223349]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.2814 secs, and comparison 39.4027 sec, and warnIfPerfScore > 6, and perfScore=3.49273]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.5474 secs, and comparison 5.06973 sec, and warnIfPerfScore > 0.8, and perfScore=0.439036]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.2808 secs, and comparison 7.66479 sec, and warnIfPerfScore > 1.3, and perfScore=0.679455]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.98404 secs, and comparison 3.49596 sec, and warnIfPerfScore > 0.65, and perfScore=0.437869]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.6854 secs, and comparison 36.3919 sec, and warnIfPerfScore > 4.4, and perfScore=3.1143]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.88636 secs, and comparison 3.33548 sec, and warnIfPerfScore > 0.6, and perfScore=0.422943]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.94061 secs, and comparison 3.37132 sec, and warnIfPerfScore > 0.6, and perfScore=0.424567]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.95504 secs, and comparison 3.35316 sec, and warnIfPerfScore > 0.6, and perfScore=0.421514]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.00675 secs, and comparison 5.31464 sec, and warnIfPerfScore > 1.3, and perfScore=0.66377]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.53616 secs, and comparison 9.02016 sec, and warnIfPerfScore > 1.3, and perfScore=1.0567]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 39.4398 secs, and comparison 5.12558 sec, and warnIfPerfScore > 0.3, and perfScore=0.12996]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.29027 secs, and comparison 9.99509 sec, and warnIfPerfScore > 1.5, and perfScore=1.58898]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.3306 secs, and comparison 2.8106 sec, and warnIfPerfScore > 0.55, and perfScore=0.443971]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.779748 sec, and warnIfPerfScore > 0.1, and perfScore=0.0519832]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.81228 sec, and warnIfPerfScore > 0.5, and perfScore=0.187485]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.35967 secs, and comparison 8.24516 sec, and warnIfPerfScore > 2, and perfScore=1.29648]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.58643 secs, and comparison 12.8763 sec, and warnIfPerfScore > 3.1, and perfScore=1.69728]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 35 seconds]]]

Succeeded
