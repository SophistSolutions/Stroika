Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 13:41:29 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.6393 secs, and comparison 5.13273 sec, and warnIfPerfScore > 0.65, and perfScore=0.406091]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.384 secs, and comparison 3.71894 sec, and warnIfPerfScore > 0.5, and perfScore=0.277865]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 13.1386 secs, and comparison 11.0794 sec, and warnIfPerfScore > 1.05, and perfScore=0.843272]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.51365 secs, and comparison 10.6742 sec, and warnIfPerfScore > 1.15, and perfScore=1.12199]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15.4466 secs, and comparison 3.4305 sec, and warnIfPerfScore > 0.48, and perfScore=0.222087]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.0337 secs, and comparison 4.57744 sec, and warnIfPerfScore > 0.57, and perfScore=0.351199]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.8304 secs, and comparison 30.6432 sec, and warnIfPerfScore > 2.9, and perfScore=2.21564]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 17.3788 secs, and comparison 33.1676 sec, and warnIfPerfScore > 2.9, and perfScore=1.90851]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.1546 secs, and comparison 187.204 sec, and warnIfPerfScore > 24, and perfScore=13.2256]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.2454 secs, and comparison 15.7362 sec, and warnIfPerfScore > 1.7, and perfScore=1.03219]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.262 secs, and comparison 19.391 sec, and warnIfPerfScore > 1.5, and perfScore=1.00669]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.6913 secs, and comparison 18.7213 sec, and warnIfPerfScore > 2.1, and perfScore=1.6013]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 20.0196 secs, and comparison 13.1427 sec, and warnIfPerfScore > 1.6, and perfScore=0.656492]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 16.0132 secs, and comparison 1.53121 sec, and warnIfPerfScore > 0.23, and perfScore=0.0956214]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.9079 secs, and comparison 17.9397 sec, and warnIfPerfScore > 1.3, and perfScore=1.00178]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 14.3006 secs, and comparison 10.9592 sec, and warnIfPerfScore > 1.2, and perfScore=0.766347]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.4005 secs, and comparison 3.75655 sec, and warnIfPerfScore > 0.33, and perfScore=0.280329]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 13.4874 secs, and comparison 49.7881 sec, and warnIfPerfScore > 6, and perfScore=3.69146]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.5434 secs, and comparison 8.34362 sec, and warnIfPerfScore > 0.8, and perfScore=0.616064]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.4569 secs, and comparison 17.6321 sec, and warnIfPerfScore > 1.4, and perfScore=1.53899]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.53899}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.9929 secs, and comparison 4.36443 sec, and warnIfPerfScore > 0.65, and perfScore=0.397023]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 14.4164 secs, and comparison 48.4363 sec, and warnIfPerfScore > 4.4, and perfScore=3.35981]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.2985 secs, and comparison 4.4307 sec, and warnIfPerfScore > 0.6, and perfScore=0.43023]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.9561 secs, and comparison 4.57329 sec, and warnIfPerfScore > 0.6, and perfScore=0.41742]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.6388 secs, and comparison 4.85544 sec, and warnIfPerfScore > 0.6, and perfScore=0.456389]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 10.3419 secs, and comparison 9.42791 sec, and warnIfPerfScore > 1.3, and perfScore=0.911623]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.6138 secs, and comparison 14.944 sec, and warnIfPerfScore > 1.3, and perfScore=1.09771]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 85.5357 secs, and comparison 8.59768 sec, and warnIfPerfScore > 0.3, and perfScore=0.100516]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 17.1406 secs, and comparison 23.3869 sec, and warnIfPerfScore > 1.5, and perfScore=1.36441]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 19.0625 secs, and comparison 5.83745 sec, and warnIfPerfScore > 0.55, and perfScore=0.306227]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56772 sec, and warnIfPerfScore > 0.1, and perfScore=0.104515]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.104515}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.33414 sec, and warnIfPerfScore > 0.5, and perfScore=0.355609]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.4705 secs, and comparison 25.345 sec, and warnIfPerfScore > 2, and perfScore=1.88152]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.6217 secs, and comparison 38.7468 sec, and warnIfPerfScore > 3.6, and perfScore=2.64996]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 59 seconds]]]

Succeeded
