Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar  6 16:56:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.90309 secs, and comparison 4.27918 sec, and warnIfPerfScore > 0.65, and perfScore=0.619893]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.02792 secs, and comparison 2.68668 sec, and warnIfPerfScore > 0.5, and perfScore=0.382287]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.68521 secs, and comparison 7.42501 sec, and warnIfPerfScore > 1.05, and perfScore=0.854903]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.81113 secs, and comparison 7.33317 sec, and warnIfPerfScore > 1.15, and perfScore=1.07665]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 7.88997 secs, and comparison 2.46021 sec, and warnIfPerfScore > 0.48, and perfScore=0.311814]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.71946 secs, and comparison 2.9492 sec, and warnIfPerfScore > 0.57, and perfScore=0.382047]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.90715 secs, and comparison 20.3817 sec, and warnIfPerfScore > 2.9, and perfScore=2.57762]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.28001 secs, and comparison 21.2706 sec, and warnIfPerfScore > 2.9, and perfScore=2.56892]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.84571 secs, and comparison 147.721 sec, and warnIfPerfScore > 24, and perfScore=18.8282]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.14577 secs, and comparison 10.8551 sec, and warnIfPerfScore > 1.7, and perfScore=1.51909]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.00847 secs, and comparison 7.9522 sec, and warnIfPerfScore > 1.5, and perfScore=0.992973]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.04726 secs, and comparison 12.8164 sec, and warnIfPerfScore > 2.1, and perfScore=1.81864]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.47814 secs, and comparison 6.63494 sec, and warnIfPerfScore > 1.6, and perfScore=0.700026]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.83928 secs, and comparison 1.28734 sec, and warnIfPerfScore > 0.23, and perfScore=0.130836]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.7006 secs, and comparison 13.1412 sec, and warnIfPerfScore > 1.3, and perfScore=1.03469]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.6905 secs, and comparison 5.7326 sec, and warnIfPerfScore > 1.2, and perfScore=0.536232]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 6.40722 secs, and comparison 1.6567 sec, and warnIfPerfScore > 0.33, and perfScore=0.258567]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.277 secs, and comparison 39.1131 sec, and warnIfPerfScore > 6, and perfScore=3.80587]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.1486 secs, and comparison 5.40253 sec, and warnIfPerfScore > 0.8, and perfScore=0.532342]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 10.3257 secs, and comparison 9.41699 sec, and warnIfPerfScore > 1.4, and perfScore=0.911995]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.56751 secs, and comparison 3.41759 sec, and warnIfPerfScore > 0.65, and perfScore=0.520378]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.2091 secs, and comparison 36.267 sec, and warnIfPerfScore > 4.4, and perfScore=3.55243]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.59342 secs, and comparison 3.41559 sec, and warnIfPerfScore > 0.6, and perfScore=0.51803]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.8879 secs, and comparison 3.36544 sec, and warnIfPerfScore > 0.6, and perfScore=0.488602]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.77409 secs, and comparison 3.37516 sec, and warnIfPerfScore > 0.6, and perfScore=0.498245]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.54518 secs, and comparison 4.65229 sec, and warnIfPerfScore > 1.3, and perfScore=0.710796]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.58928 secs, and comparison 7.95603 sec, and warnIfPerfScore > 1.3, and perfScore=1.20742]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.3908 secs, and comparison 5.70317 sec, and warnIfPerfScore > 0.3, and perfScore=0.128476]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.11277 secs, and comparison 11.72 sec, and warnIfPerfScore > 1.5, and perfScore=1.44464]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.9056 secs, and comparison 2.69503 sec, and warnIfPerfScore > 0.55, and perfScore=0.390267]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.855592 sec, and warnIfPerfScore > 0.1, and perfScore=0.0570395]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.84651 sec, and warnIfPerfScore > 0.5, and perfScore=0.189767]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.79033 secs, and comparison 8.35518 sec, and warnIfPerfScore > 2, and perfScore=1.07251]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.57801 secs, and comparison 29.2573 sec, and warnIfPerfScore > 3.6, and perfScore=3.41074]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 33 seconds]]]

Succeeded
