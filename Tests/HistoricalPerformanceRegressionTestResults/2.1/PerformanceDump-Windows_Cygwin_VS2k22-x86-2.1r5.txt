Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 23:45: 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.26965 secs, and comparison 4.41872 sec, and warnIfPerfScore > 0.65, and perfScore=0.607831]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.12573 secs, and comparison 2.84555 sec, and warnIfPerfScore > 0.5, and perfScore=0.399334]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.82461 secs, and comparison 7.58198 sec, and warnIfPerfScore > 1.05, and perfScore=0.859186]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.90903 secs, and comparison 7.50669 sec, and warnIfPerfScore > 1.15, and perfScore=1.0865]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.90921 secs, and comparison 2.5732 sec, and warnIfPerfScore > 0.48, and perfScore=0.325342]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.72401 secs, and comparison 3.07749 sec, and warnIfPerfScore > 0.57, and perfScore=0.398432]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.05892 secs, and comparison 21.179 sec, and warnIfPerfScore > 2.9, and perfScore=2.62802]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.26831 secs, and comparison 22.537 sec, and warnIfPerfScore > 2.9, and perfScore=2.7257]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.56813 secs, and comparison 150.987 sec, and warnIfPerfScore > 24, and perfScore=19.9503]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.51506 secs, and comparison 11.2754 sec, and warnIfPerfScore > 1.7, and perfScore=1.50037]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.29031 secs, and comparison 7.97185 sec, and warnIfPerfScore > 1.5, and perfScore=0.961587]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.48718 secs, and comparison 13.3285 sec, and warnIfPerfScore > 2.1, and perfScore=1.78018]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.86406 secs, and comparison 6.95528 sec, and warnIfPerfScore > 1.6, and perfScore=0.705113]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.2825 secs, and comparison 1.3803 sec, and warnIfPerfScore > 0.23, and perfScore=0.134238]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9429 secs, and comparison 13.4565 sec, and warnIfPerfScore > 1.3, and perfScore=1.03968]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.5439 secs, and comparison 6.00083 sec, and warnIfPerfScore > 1.2, and perfScore=0.569127]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.50858 secs, and comparison 1.54264 sec, and warnIfPerfScore > 0.33, and perfScore=0.237016]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.1812 secs, and comparison 42.3477 sec, and warnIfPerfScore > 6, and perfScore=4.15942]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.1493 secs, and comparison 5.532 sec, and warnIfPerfScore > 0.8, and perfScore=0.54506]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.1586 secs, and comparison 9.62102 sec, and warnIfPerfScore > 1.4, and perfScore=0.947078]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.49425 secs, and comparison 3.50639 sec, and warnIfPerfScore > 0.65, and perfScore=0.539923]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.1497 secs, and comparison 37.3573 sec, and warnIfPerfScore > 4.4, and perfScore=3.68063]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.59177 secs, and comparison 3.48677 sec, and warnIfPerfScore > 0.6, and perfScore=0.528958]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.68755 secs, and comparison 3.44153 sec, and warnIfPerfScore > 0.6, and perfScore=0.514618]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.62618 secs, and comparison 3.45199 sec, and warnIfPerfScore > 0.6, and perfScore=0.520962]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.54675 secs, and comparison 5.05031 sec, and warnIfPerfScore > 1.3, and perfScore=0.771422]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.22957 secs, and comparison 8.54066 sec, and warnIfPerfScore > 1.3, and perfScore=1.18135]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 48.5895 secs, and comparison 6.15421 sec, and warnIfPerfScore > 0.3, and perfScore=0.126657]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.085 secs, and comparison 12.7535 sec, and warnIfPerfScore > 1.5, and perfScore=1.4038]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.47146 secs, and comparison 2.99125 sec, and warnIfPerfScore > 0.55, and perfScore=0.400357]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 15 secs, and comparison 0.923671 sec, and warnIfPerfScore > 0.1, and perfScore=0.0615781]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.95101 sec, and warnIfPerfScore > 0.5, and perfScore=0.196734]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.42262 secs, and comparison 8.93289 sec, and warnIfPerfScore > 2, and perfScore=1.06058]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.75626 secs, and comparison 31.1646 sec, and warnIfPerfScore > 3.6, and perfScore=3.19431]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 4 seconds]]]

Succeeded
