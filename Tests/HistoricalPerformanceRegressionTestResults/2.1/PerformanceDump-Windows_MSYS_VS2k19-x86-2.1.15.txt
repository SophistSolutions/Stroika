Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 8:3:48 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 49.7314 secs, and comparison 16.195 sec, and warnIfPerfScore > 0.65, and perfScore=0.325649]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 48.9574 secs, and comparison 14.5785 sec, and warnIfPerfScore > 0.5, and perfScore=0.297779]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 28.8672 secs, and comparison 22.4125 sec, and warnIfPerfScore > 1.05, and perfScore=0.776403]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 22.9848 secs, and comparison 22.5973 sec, and warnIfPerfScore > 1.15, and perfScore=0.983139]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 34.9024 secs, and comparison 3.61495 sec, and warnIfPerfScore > 0.48, and perfScore=0.103573]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 34.727 secs, and comparison 3.85752 sec, and warnIfPerfScore > 0.57, and perfScore=0.111081]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 24.259 secs, and comparison 38.4786 sec, and warnIfPerfScore > 2.9, and perfScore=1.58616]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.2752 secs, and comparison 41.498 sec, and warnIfPerfScore > 2.9, and perfScore=1.70948]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 20.2403 secs, and comparison 223.998 sec, and warnIfPerfScore > 24, and perfScore=11.0669]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 20.1543 secs, and comparison 16.7955 sec, and warnIfPerfScore > 1.7, and perfScore=0.833344]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 50.2091 secs, and comparison 50.4384 sec, and warnIfPerfScore > 1.5, and perfScore=1.00457]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 20.6996 secs, and comparison 19.4641 sec, and warnIfPerfScore > 2.1, and perfScore=0.940311]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 42.9674 secs, and comparison 12.7333 sec, and warnIfPerfScore > 1.6, and perfScore=0.296349]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 45.7585 secs, and comparison 3.59979 sec, and warnIfPerfScore > 0.23, and perfScore=0.0786693]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.2783 secs, and comparison 24.945 sec, and warnIfPerfScore > 1.3, and perfScore=1.36473]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.36473}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.4484 secs, and comparison 20.3597 sec, and warnIfPerfScore > 1.2, and perfScore=1.23779]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.23779}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.3594 secs, and comparison 3.97399 sec, and warnIfPerfScore > 0.33, and perfScore=0.297468]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 15.1981 secs, and comparison 51.8379 sec, and warnIfPerfScore > 6, and perfScore=3.41082]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.403 secs, and comparison 19.8584 sec, and warnIfPerfScore > 0.8, and perfScore=1.28926]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.28926}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 15.7662 secs, and comparison 34.1391 sec, and warnIfPerfScore > 1.4, and perfScore=2.16534]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.16534}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.0201 secs, and comparison 4.94412 sec, and warnIfPerfScore > 0.65, and perfScore=0.37973]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 25.397 secs, and comparison 57.4859 sec, and warnIfPerfScore > 4.4, and perfScore=2.26349]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.7359 secs, and comparison 5.90384 sec, and warnIfPerfScore > 0.6, and perfScore=0.42981]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 14.1718 secs, and comparison 5.71543 sec, and warnIfPerfScore > 0.6, and perfScore=0.403295]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.9875 secs, and comparison 5.7755 sec, and warnIfPerfScore > 0.6, and perfScore=0.412903]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 13.8971 secs, and comparison 13.0193 sec, and warnIfPerfScore > 1.3, and perfScore=0.936833]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.508 secs, and comparison 21.4558 sec, and warnIfPerfScore > 1.3, and perfScore=1.04622]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 110.231 secs, and comparison 13.8784 sec, and warnIfPerfScore > 0.3, and perfScore=0.125903]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 27.0443 secs, and comparison 31.2428 sec, and warnIfPerfScore > 1.5, and perfScore=1.15525]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.1691 secs, and comparison 5.76185 sec, and warnIfPerfScore > 0.55, and perfScore=0.272182]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.76791 sec, and warnIfPerfScore > 0.1, and perfScore=0.117861]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.117861}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.53481 sec, and warnIfPerfScore > 0.5, and perfScore=0.302321]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.5707 secs, and comparison 23.5005 sec, and warnIfPerfScore > 2, and perfScore=1.14243]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 24.6134 secs, and comparison 44.0164 sec, and warnIfPerfScore > 3.6, and perfScore=1.78831]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 34 seconds]]]

Succeeded
