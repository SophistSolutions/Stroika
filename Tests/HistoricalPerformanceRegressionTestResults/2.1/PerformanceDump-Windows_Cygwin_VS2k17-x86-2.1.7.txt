Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Oct 24 22:38:21 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 48.4189 secs, and comparison 6.315 sec, and warnIfPerfScore > 0.65, and perfScore=0.130424]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 49.5359 secs, and comparison 5.80162 sec, and warnIfPerfScore > 0.5, and perfScore=0.11712]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 16.5892 secs, and comparison 12.5234 sec, and warnIfPerfScore > 1.05, and perfScore=0.754912]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 12.5161 secs, and comparison 12.0874 sec, and warnIfPerfScore > 1.15, and perfScore=0.965744]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 19.6269 secs, and comparison 3.43158 sec, and warnIfPerfScore > 0.48, and perfScore=0.17484]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 19.7221 secs, and comparison 4.32297 sec, and warnIfPerfScore > 0.57, and perfScore=0.219194]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.61 secs, and comparison 35.065 sec, and warnIfPerfScore > 2.9, and perfScore=1.62263]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 22.7517 secs, and comparison 37.3772 sec, and warnIfPerfScore > 2.9, and perfScore=1.64283]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 18.5912 secs, and comparison 203.239 sec, and warnIfPerfScore > 24, and perfScore=10.932]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 21.6575 secs, and comparison 15.4863 sec, and warnIfPerfScore > 1.7, and perfScore=0.715055]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 40.6075 secs, and comparison 39.6138 sec, and warnIfPerfScore > 1.5, and perfScore=0.975529]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 18.8439 secs, and comparison 17.4737 sec, and warnIfPerfScore > 2.1, and perfScore=0.927287]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 35.4184 secs, and comparison 12.8174 sec, and warnIfPerfScore > 1.6, and perfScore=0.361885]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 36.6521 secs, and comparison 2.34092 sec, and warnIfPerfScore > 0.23, and perfScore=0.0638686]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 18.1107 secs, and comparison 27.0351 sec, and warnIfPerfScore > 1.3, and perfScore=1.49277]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.49277}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.9452 secs, and comparison 19.8819 sec, and warnIfPerfScore > 1.2, and perfScore=1.33032]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.33032}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.6509 secs, and comparison 4.1473 sec, and warnIfPerfScore > 0.33, and perfScore=0.327828]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 14.5049 secs, and comparison 52.2021 sec, and warnIfPerfScore > 6, and perfScore=3.59894]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.072 secs, and comparison 19.8657 sec, and warnIfPerfScore > 0.8, and perfScore=1.31805]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.31805}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.2389 secs, and comparison 37.0321 sec, and warnIfPerfScore > 1.4, and perfScore=2.60077]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.60077}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.7935 secs, and comparison 4.74025 sec, and warnIfPerfScore > 0.65, and perfScore=0.370521]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 24.0546 secs, and comparison 58.6105 sec, and warnIfPerfScore > 4.4, and perfScore=2.43656]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.5736 secs, and comparison 5.81244 sec, and warnIfPerfScore > 0.6, and perfScore=0.428217]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.1014 secs, and comparison 5.66199 sec, and warnIfPerfScore > 0.6, and perfScore=0.432167]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 13.0222 secs, and comparison 6.09895 sec, and warnIfPerfScore > 0.6, and perfScore=0.46835]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.126 secs, and comparison 13.873 sec, and warnIfPerfScore > 1.3, and perfScore=1.05692]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.697 secs, and comparison 21.2939 sec, and warnIfPerfScore > 1.3, and perfScore=1.08107]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 108.153 secs, and comparison 8.88143 sec, and warnIfPerfScore > 0.3, and perfScore=0.0821189]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 26.5753 secs, and comparison 30.4594 sec, and warnIfPerfScore > 1.5, and perfScore=1.14616]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 18.8698 secs, and comparison 6.03198 sec, and warnIfPerfScore > 0.55, and perfScore=0.319662]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.86305 sec, and warnIfPerfScore > 0.1, and perfScore=0.124203]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.124203}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.15599 sec, and warnIfPerfScore > 0.5, and perfScore=0.343732]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.4713 secs, and comparison 22.5038 sec, and warnIfPerfScore > 2, and perfScore=1.15574]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.3481 secs, and comparison 40.8453 sec, and warnIfPerfScore > 3.6, and perfScore=1.82768]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 28 seconds]]]

Succeeded
