Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 15:45:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.63983 secs, and comparison 6.49009 sec, and warnIfPerfScore > 0.65, and perfScore=0.673258]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.80431 secs, and comparison 4.66487 sec, and warnIfPerfScore > 0.5, and perfScore=0.475798]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 16.7091 secs, and comparison 12.522 sec, and warnIfPerfScore > 1.05, and perfScore=0.74941]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.6349 secs, and comparison 11.7929 sec, and warnIfPerfScore > 1.15, and perfScore=1.10888]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.7474 secs, and comparison 4.05682 sec, and warnIfPerfScore > 0.48, and perfScore=0.136376]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 37.5927 secs, and comparison 5.11075 sec, and warnIfPerfScore > 0.57, and perfScore=0.13595]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.9061 secs, and comparison 35.1947 sec, and warnIfPerfScore > 2.9, and perfScore=1.68347]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 21.3868 secs, and comparison 44.0009 sec, and warnIfPerfScore > 2.9, and perfScore=2.05739]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 16.417 secs, and comparison 134.616 sec, and warnIfPerfScore > 24, and perfScore=8.1998]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 24.1911 secs, and comparison 16.1035 sec, and warnIfPerfScore > 1.7, and perfScore=0.665676]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.0319 secs, and comparison 7.49223 sec, and warnIfPerfScore > 1.5, and perfScore=0.74684]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.0579 secs, and comparison 20.41 sec, and warnIfPerfScore > 2.1, and perfScore=1.19651]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15.4118 secs, and comparison 7.86364 sec, and warnIfPerfScore > 1.6, and perfScore=0.510236]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 16.2493 secs, and comparison 1.37713 sec, and warnIfPerfScore > 0.23, and perfScore=0.0847498]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 19.7374 secs, and comparison 18.4103 sec, and warnIfPerfScore > 1.3, and perfScore=0.932762]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.3503 secs, and comparison 17.1959 sec, and warnIfPerfScore > 1.2, and perfScore=1.28805]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.37923 secs, and comparison 2.46188 sec, and warnIfPerfScore > 0.33, and perfScore=0.262482]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 13.7381 secs, and comparison 57.605 sec, and warnIfPerfScore > 6, and perfScore=4.19309]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.9151 secs, and comparison 14.843 sec, and warnIfPerfScore > 0.8, and perfScore=1.14928]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.2787 secs, and comparison 18.3652 sec, and warnIfPerfScore > 1.4, and perfScore=1.38306]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.59338 secs, and comparison 4.86737 sec, and warnIfPerfScore > 0.65, and perfScore=0.507368]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 17.8981 secs, and comparison 52.2448 sec, and warnIfPerfScore > 4.4, and perfScore=2.91902]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.25721 secs, and comparison 4.69021 sec, and warnIfPerfScore > 0.6, and perfScore=0.506655]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.45272 secs, and comparison 4.62782 sec, and warnIfPerfScore > 0.6, and perfScore=0.489576]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.0798 secs, and comparison 4.76322 sec, and warnIfPerfScore > 0.6, and perfScore=0.524595]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.65293 secs, and comparison 5.66388 sec, and warnIfPerfScore > 1.3, and perfScore=0.586753]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.63352 secs, and comparison 14.3961 sec, and warnIfPerfScore > 1.3, and perfScore=1.49437]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 140.184 secs, and comparison 8.74941 sec, and warnIfPerfScore > 0.3, and perfScore=0.0624137]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 34.3072 secs, and comparison 36.0889 sec, and warnIfPerfScore > 1.5, and perfScore=1.05193]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.3065 secs, and comparison 5.17002 sec, and warnIfPerfScore > 0.55, and perfScore=0.622407]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15 secs, and comparison 6.10559 sec, and warnIfPerfScore > 0.1, and perfScore=0.407039]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.53229 sec, and warnIfPerfScore > 0.5, and perfScore=0.16882]
	                 	Test_Optional_ is FASTER

[[[Tests took: 19 minutes, 53 seconds]]]

Succeeded
