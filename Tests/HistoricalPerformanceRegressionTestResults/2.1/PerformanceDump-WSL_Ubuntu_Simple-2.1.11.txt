Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 28 18:57:38 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 2.19209 secs, and comparison 1.24478 sec, and warnIfPerfScore > 0.65, and perfScore=0.567852]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.23358 secs, and comparison 2.65296 sec, and warnIfPerfScore > 0.5, and perfScore=1.18776]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.04913 secs, and comparison 6.3612 sec, and warnIfPerfScore > 1.05, and perfScore=3.10435]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 1.72721 secs, and comparison 6.38478 sec, and warnIfPerfScore > 1.15, and perfScore=3.69659]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 2.80036 secs, and comparison 0.742431 sec, and warnIfPerfScore > 0.48, and perfScore=0.26512]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.43352 secs, and comparison 0.826647 sec, and warnIfPerfScore > 0.57, and perfScore=0.240758]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.72462 secs, and comparison 10.0334 sec, and warnIfPerfScore > 2.9, and perfScore=3.6825]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.10227 secs, and comparison 10.2022 sec, and warnIfPerfScore > 2.9, and perfScore=3.28861]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 3.7016 secs, and comparison 32.4326 sec, and warnIfPerfScore > 24, and perfScore=8.76177]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.26219 secs, and comparison 6.85006 sec, and warnIfPerfScore > 1.7, and perfScore=1.60717]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.48238 secs, and comparison 4.63694 sec, and warnIfPerfScore > 1.5, and perfScore=1.03448]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.6856 secs, and comparison 8.43886 sec, and warnIfPerfScore > 2.1, and perfScore=3.14227]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.02021 secs, and comparison 3.12311 sec, and warnIfPerfScore > 1.6, and perfScore=1.03407]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 3.52991 secs, and comparison 1.19443 sec, and warnIfPerfScore > 0.23, and perfScore=0.338375]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 2.88121 secs, and comparison 3.90488 sec, and warnIfPerfScore > 1.3, and perfScore=1.35529]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.73121 secs, and comparison 5.87625 sec, and warnIfPerfScore > 1.2, and perfScore=2.15152]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 11.4969 secs, and comparison 1.50113 sec, and warnIfPerfScore > 0.33, and perfScore=0.130569]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 2.58727 secs, and comparison 42.1092 sec, and warnIfPerfScore > 6, and perfScore=16.2755]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.95988 secs, and comparison 5.83843 sec, and warnIfPerfScore > 0.8, and perfScore=1.97252]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.98277 secs, and comparison 7.17127 sec, and warnIfPerfScore > 1.4, and perfScore=2.40423]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.4874 secs, and comparison 3.68385 sec, and warnIfPerfScore > 0.65, and perfScore=0.320687]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 4.15651 secs, and comparison 38.3513 sec, and warnIfPerfScore > 4.4, and perfScore=9.22679]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.40576 secs, and comparison 3.63117 sec, and warnIfPerfScore > 0.6, and perfScore=0.386058]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.0482 secs, and comparison 3.51721 sec, and warnIfPerfScore > 0.6, and perfScore=0.437018]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.77538 secs, and comparison 3.46483 sec, and warnIfPerfScore > 0.6, and perfScore=0.394835]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.241 secs, and comparison 3.4025 sec, and warnIfPerfScore > 1.3, and perfScore=0.412875]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.3876 secs, and comparison 8.31972 sec, and warnIfPerfScore > 1.3, and perfScore=0.621451]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.8083 secs, and comparison 5.16292 sec, and warnIfPerfScore > 0.3, and perfScore=0.34865]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.2615 secs, and comparison 10.5904 sec, and warnIfPerfScore > 1.5, and perfScore=1.69135]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.61088 secs, and comparison 1.59605 sec, and warnIfPerfScore > 0.55, and perfScore=0.241427]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.570401 sec, and warnIfPerfScore > 0.1, and perfScore=0.0380267]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.16039 sec, and warnIfPerfScore > 0.5, and perfScore=0.0773592]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 45 seconds]]]

Succeeded
