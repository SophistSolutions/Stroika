Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov 23 16:48:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 2.75547 secs, and comparison 1.47712 sec, and warnIfPerfScore > 0.65, and perfScore=0.536067]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 2.93104 secs, and comparison 4.02648 sec, and warnIfPerfScore > 0.5, and perfScore=1.37374]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.62358 secs, and comparison 7.70158 sec, and warnIfPerfScore > 1.05, and perfScore=2.93552]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.39513 secs, and comparison 7.32879 sec, and warnIfPerfScore > 1.15, and perfScore=3.05987]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 3.34769 secs, and comparison 0.918567 sec, and warnIfPerfScore > 0.48, and perfScore=0.274388]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 4.47042 secs, and comparison 0.940894 sec, and warnIfPerfScore > 0.57, and perfScore=0.210471]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.87856 secs, and comparison 10.9981 sec, and warnIfPerfScore > 2.9, and perfScore=3.82069]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 3.71451 secs, and comparison 11.4478 sec, and warnIfPerfScore > 2.9, and perfScore=3.08191]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 4.39875 secs, and comparison 39.7753 sec, and warnIfPerfScore > 24, and perfScore=9.0424]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.09569 secs, and comparison 7.552 sec, and warnIfPerfScore > 1.7, and perfScore=1.48204]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.5382 secs, and comparison 4.97434 sec, and warnIfPerfScore > 1.5, and perfScore=0.898188]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.49291 secs, and comparison 9.1279 sec, and warnIfPerfScore > 2.1, and perfScore=3.66154]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.94396 secs, and comparison 3.65803 sec, and warnIfPerfScore > 1.6, and perfScore=0.927501]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 4.60718 secs, and comparison 1.2959 sec, and warnIfPerfScore > 0.23, and perfScore=0.281278]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.19754 secs, and comparison 4.00984 sec, and warnIfPerfScore > 1.3, and perfScore=1.25404]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.00806 secs, and comparison 5.87811 sec, and warnIfPerfScore > 1.2, and perfScore=1.95412]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.9855 secs, and comparison 1.33392 sec, and warnIfPerfScore > 0.33, and perfScore=0.111295]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.57097 secs, and comparison 42.9857 sec, and warnIfPerfScore > 6, and perfScore=16.7197]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.34968 secs, and comparison 4.89094 sec, and warnIfPerfScore > 0.8, and perfScore=2.08154]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.454 secs, and comparison 6.04795 sec, and warnIfPerfScore > 1.4, and perfScore=2.46453]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.5115 secs, and comparison 3.76373 sec, and warnIfPerfScore > 0.65, and perfScore=0.326955]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.8529 secs, and comparison 38.4717 sec, and warnIfPerfScore > 4.4, and perfScore=9.98512]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.46299 secs, and comparison 3.68724 sec, and warnIfPerfScore > 0.6, and perfScore=0.389649]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.47588 secs, and comparison 3.47471 sec, and warnIfPerfScore > 0.6, and perfScore=0.409953]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.05808 secs, and comparison 3.83303 sec, and warnIfPerfScore > 0.6, and perfScore=0.423161]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.87636 secs, and comparison 4.00155 sec, and warnIfPerfScore > 1.3, and perfScore=0.405165]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 15.9189 secs, and comparison 8.9279 sec, and warnIfPerfScore > 1.3, and perfScore=0.560836]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.2261 secs, and comparison 5.2969 sec, and warnIfPerfScore > 0.3, and perfScore=0.347882]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.77698 secs, and comparison 11.0606 sec, and warnIfPerfScore > 1.5, and perfScore=1.63208]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.18604 secs, and comparison 2.04971 sec, and warnIfPerfScore > 0.55, and perfScore=0.285236]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.75873 sec, and warnIfPerfScore > 0.1, and perfScore=0.050582]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 15 secs, and comparison 1.25135 sec, and warnIfPerfScore > 0.5, and perfScore=0.0834231]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 19 seconds]]]

Succeeded
