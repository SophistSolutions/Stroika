Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 10 20:19:29 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.75494 secs, and comparison 4.60069 sec, and warnIfPerfScore > 0.65, and perfScore=0.799432]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.7598 secs, and comparison 2.78888 sec, and warnIfPerfScore > 0.5, and perfScore=0.484198]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.16739 secs, and comparison 7.50294 sec, and warnIfPerfScore > 1.05, and perfScore=0.918647]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.83927 secs, and comparison 7.55152 sec, and warnIfPerfScore > 1.15, and perfScore=1.10414]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.10928 secs, and comparison 2.32494 sec, and warnIfPerfScore > 0.48, and perfScore=0.286702]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.07681 secs, and comparison 2.94406 sec, and warnIfPerfScore > 0.57, and perfScore=0.364507]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.32546 secs, and comparison 19.2449 sec, and warnIfPerfScore > 2.9, and perfScore=3.04245]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.91665 secs, and comparison 19.8172 sec, and warnIfPerfScore > 2.9, and perfScore=2.86515]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 5.7524 secs, and comparison 149.09 sec, and warnIfPerfScore > 24, and perfScore=25.9178]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.29147 secs, and comparison 10.4655 sec, and warnIfPerfScore > 1.7, and perfScore=1.9778]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.79495 secs, and comparison 5.37651 sec, and warnIfPerfScore > 1.5, and perfScore=0.927792]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.01485 secs, and comparison 12.5683 sec, and warnIfPerfScore > 2.1, and perfScore=2.50621]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.70784 secs, and comparison 4.07184 sec, and warnIfPerfScore > 1.6, and perfScore=0.607026]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 7.05663 secs, and comparison 0.677711 sec, and warnIfPerfScore > 0.23, and perfScore=0.0960388]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.488 secs, and comparison 12.5809 sec, and warnIfPerfScore > 1.3, and perfScore=1.00744]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.48142 secs, and comparison 5.32009 sec, and warnIfPerfScore > 1.2, and perfScore=0.627264]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.52083 secs, and comparison 1.96319 sec, and warnIfPerfScore > 0.33, and perfScore=0.230399]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 8.15751 secs, and comparison 41.2908 sec, and warnIfPerfScore > 6, and perfScore=5.06169]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.16607 secs, and comparison 5.17034 sec, and warnIfPerfScore > 0.8, and perfScore=0.633148]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.17067 secs, and comparison 7.20063 sec, and warnIfPerfScore > 1.4, and perfScore=0.881278]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.50813 secs, and comparison 3.64772 sec, and warnIfPerfScore > 0.65, and perfScore=0.428734]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 8.58152 secs, and comparison 38.3334 sec, and warnIfPerfScore > 4.4, and perfScore=4.46697]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.3827 secs, and comparison 3.5714 sec, and warnIfPerfScore > 0.6, and perfScore=0.426045]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.34139 secs, and comparison 3.57055 sec, and warnIfPerfScore > 0.6, and perfScore=0.428052]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.36056 secs, and comparison 3.58479 sec, and warnIfPerfScore > 0.6, and perfScore=0.428774]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.39196 secs, and comparison 5.42661 sec, and warnIfPerfScore > 1.3, and perfScore=0.646644]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.84286 secs, and comparison 8.83955 sec, and warnIfPerfScore > 1.3, and perfScore=0.999625]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 38.7262 secs, and comparison 6.92972 sec, and warnIfPerfScore > 0.3, and perfScore=0.178942]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.53491 secs, and comparison 9.33743 sec, and warnIfPerfScore > 1.5, and perfScore=1.68701]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.41545 secs, and comparison 3.01779 sec, and warnIfPerfScore > 0.55, and perfScore=0.470394]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.042
	DETAILS:         	[baseline test 15 secs, and comparison 0.62273 sec, and warnIfPerfScore > 0.1, and perfScore=0.0415153]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.05598 sec, and warnIfPerfScore > 0.5, and perfScore=0.203732]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.2806 secs, and comparison 13.287 sec, and warnIfPerfScore > 2, and perfScore=2.11556]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.71146 secs, and comparison 14.247 sec, and warnIfPerfScore > 3.6, and perfScore=1.84751]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 51 seconds]]]

Succeeded
