Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Aug 27 13:39:42 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.86195 secs, and comparison 5.13517 sec, and warnIfPerfScore > 0.62, and perfScore=0.748354]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.89098 secs, and comparison 3.16277 sec, and warnIfPerfScore > 0.5, and perfScore=0.458972]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.90185 secs, and comparison 7.57521 sec, and warnIfPerfScore > 1.05, and perfScore=1.09756]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.87395 secs, and comparison 4.10591 sec, and warnIfPerfScore > 0.48, and perfScore=1.05988]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.47487 secs, and comparison 5.00604 sec, and warnIfPerfScore > 0.55, and perfScore=1.1187]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.58212 secs, and comparison 19.3832 sec, and warnIfPerfScore > 2.9, and perfScore=5.4111]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 4.42985 secs, and comparison 20.4597 sec, and warnIfPerfScore > 2.9, and perfScore=4.61859]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.32931 secs, and comparison 55.9316 sec, and warnIfPerfScore > 9.7, and perfScore=10.4951]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.68104 secs, and comparison 10.2164 sec, and warnIfPerfScore > 1.6, and perfScore=2.18251]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.71575 secs, and comparison 5.57132 sec, and warnIfPerfScore > 1.5, and perfScore=0.974731]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 2.4488 secs, and comparison 10.9535 sec, and warnIfPerfScore > 2.1, and perfScore=4.47303]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.33786 secs, and comparison 4.31229 sec, and warnIfPerfScore > 1.3, and perfScore=0.994104]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.57074 secs, and comparison 1.64261 sec, and warnIfPerfScore > 0.18, and perfScore=0.359376]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.89117 secs, and comparison 4.55757 sec, and warnIfPerfScore > 1.3, and perfScore=1.17126]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.52204 secs, and comparison 8.08649 sec, and warnIfPerfScore > 1.2, and perfScore=2.29597]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15.2824 secs, and comparison 1.46614 sec, and warnIfPerfScore > 0.33, and perfScore=0.0959364]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.43527 secs, and comparison 43.2051 sec, and warnIfPerfScore > 6, and perfScore=12.5769]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.4582 secs, and comparison 4.01945 sec, and warnIfPerfScore > 0.5, and perfScore=0.384334]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 6.15283 secs, and comparison 41.2358 sec, and warnIfPerfScore > 4.4, and perfScore=6.70193]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.1294 secs, and comparison 3.85949 sec, and warnIfPerfScore > 0.6, and perfScore=0.318193]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.26342 secs, and comparison 12.3538 sec, and warnIfPerfScore > 1.5, and perfScore=1.495]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.28404 secs, and comparison 2.13132 sec, and warnIfPerfScore > 0.55, and perfScore=0.292601]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 15 secs, and comparison 1.08906 sec, and warnIfPerfScore > 0.25, and perfScore=0.0726038]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.86809 sec, and warnIfPerfScore > 0.5, and perfScore=0.257873]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 56 seconds]]]

Succeeded
