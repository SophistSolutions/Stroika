Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 :23:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.00118 secs, and comparison 5.20451 sec, and warnIfPerfScore > 0.65, and perfScore=0.743376]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.43256 secs, and comparison 3.56467 sec, and warnIfPerfScore > 0.5, and perfScore=0.479602]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.90913 secs, and comparison 7.83249 sec, and warnIfPerfScore > 1.05, and perfScore=0.990309]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.08328 secs, and comparison 7.70098 sec, and warnIfPerfScore > 1.15, and perfScore=1.08721]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.35299 secs, and comparison 3.47272 sec, and warnIfPerfScore > 0.48, and perfScore=0.546628]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.21364 secs, and comparison 4.41074 sec, and warnIfPerfScore > 0.57, and perfScore=0.611444]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 5.13578 secs, and comparison 19.7468 sec, and warnIfPerfScore > 2.9, and perfScore=3.84495]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 3.90256 secs, and comparison 18.4294 sec, and warnIfPerfScore > 2.9, and perfScore=4.72238]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 5.10491 secs, and comparison 75.5837 sec, and warnIfPerfScore > 24, and perfScore=14.8061]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.55371 secs, and comparison 11.4242 sec, and warnIfPerfScore > 1.6, and perfScore=1.33558]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.24291 secs, and comparison 9.20099 sec, and warnIfPerfScore > 1.5, and perfScore=0.995465]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.84372 secs, and comparison 14.4084 sec, and warnIfPerfScore > 2.1, and perfScore=2.97465]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.14753 secs, and comparison 6.38524 sec, and warnIfPerfScore > 1.6, and perfScore=0.89335]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.74927 secs, and comparison 2.91126 sec, and warnIfPerfScore > 0.23, and perfScore=0.375682]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.91671 secs, and comparison 7.74629 sec, and warnIfPerfScore > 1.3, and perfScore=1.11994]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.25812 secs, and comparison 12.9975 sec, and warnIfPerfScore > 1.2, and perfScore=2.47189]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 25.8896 secs, and comparison 2.95158 sec, and warnIfPerfScore > 0.33, and perfScore=0.114006]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 5.01683 secs, and comparison 46.2463 sec, and warnIfPerfScore > 6, and perfScore=9.21822]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.08898 secs, and comparison 12.9898 sec, and warnIfPerfScore > 0.8, and perfScore=2.55254]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.79638 secs, and comparison 10.6019 sec, and warnIfPerfScore > 1.4, and perfScore=2.2104]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15.4745 secs, and comparison 4.45199 sec, and warnIfPerfScore > 0.65, and perfScore=0.287698]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 7.77855 secs, and comparison 39.3602 sec, and warnIfPerfScore > 4.4, and perfScore=5.06009]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 18.9026 secs, and comparison 4.05665 sec, and warnIfPerfScore > 0.6, and perfScore=0.214608]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.2323 secs, and comparison 4.05707 sec, and warnIfPerfScore > 0.6, and perfScore=0.200524]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 20.6247 secs, and comparison 3.89115 sec, and warnIfPerfScore > 0.6, and perfScore=0.188664]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 20.5453 secs, and comparison 6.49626 sec, and warnIfPerfScore > 1.3, and perfScore=0.316193]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 30.5632 secs, and comparison 13.5756 sec, and warnIfPerfScore > 1.3, and perfScore=0.444179]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 28.398 secs, and comparison 7.58356 sec, and warnIfPerfScore > 0.3, and perfScore=0.267046]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.19441 secs, and comparison 14.2957 sec, and warnIfPerfScore > 1.5, and perfScore=1.98706]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.8223 secs, and comparison 3.78161 sec, and warnIfPerfScore > 0.55, and perfScore=0.294926]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.53131 sec, and warnIfPerfScore > 0.1, and perfScore=0.102087]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.64855 sec, and warnIfPerfScore > 0.5, and perfScore=0.243237]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 59 seconds]]]

Succeeded
