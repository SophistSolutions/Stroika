Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 3:11:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.14652 secs, and comparison 4.2903 sec, and warnIfPerfScore > 0.65, and perfScore=0.600334]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.18757 secs, and comparison 2.80444 sec, and warnIfPerfScore > 0.5, and perfScore=0.390179]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.78939 secs, and comparison 7.47235 sec, and warnIfPerfScore > 1.05, and perfScore=0.850155]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.75182 secs, and comparison 7.62005 sec, and warnIfPerfScore > 1.15, and perfScore=1.12859]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 7.55145 secs, and comparison 2.36578 sec, and warnIfPerfScore > 0.48, and perfScore=0.313288]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.50996 secs, and comparison 2.77283 sec, and warnIfPerfScore > 0.57, and perfScore=0.36922]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.93521 secs, and comparison 20.5147 sec, and warnIfPerfScore > 2.9, and perfScore=2.58528]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.86872 secs, and comparison 21.3723 sec, and warnIfPerfScore > 2.9, and perfScore=2.71611]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.4026 secs, and comparison 144.123 sec, and warnIfPerfScore > 24, and perfScore=19.4693]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.0018 secs, and comparison 10.6974 sec, and warnIfPerfScore > 1.7, and perfScore=1.52781]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.81897 secs, and comparison 7.61179 sec, and warnIfPerfScore > 1.5, and perfScore=0.973502]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.83835 secs, and comparison 12.5848 sec, and warnIfPerfScore > 2.1, and perfScore=1.84032]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.9253 secs, and comparison 6.56674 sec, and warnIfPerfScore > 1.6, and perfScore=0.735745]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.34375 secs, and comparison 1.27171 sec, and warnIfPerfScore > 0.23, and perfScore=0.136103]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5491 secs, and comparison 12.9401 sec, and warnIfPerfScore > 1.3, and perfScore=1.03116]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.82655 secs, and comparison 5.41847 sec, and warnIfPerfScore > 1.2, and perfScore=0.551411]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.99501 secs, and comparison 1.42445 sec, and warnIfPerfScore > 0.33, and perfScore=0.237606]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.37081 secs, and comparison 39.0113 sec, and warnIfPerfScore > 6, and perfScore=4.16306]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.37896 secs, and comparison 5.19813 sec, and warnIfPerfScore > 0.8, and perfScore=0.554233]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.32455 secs, and comparison 8.80411 sec, and warnIfPerfScore > 1.4, and perfScore=0.944186]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.94525 secs, and comparison 3.40242 sec, and warnIfPerfScore > 0.65, and perfScore=0.572293]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.45387 secs, and comparison 36.6283 sec, and warnIfPerfScore > 4.4, and perfScore=3.87442]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.1378 secs, and comparison 3.37842 sec, and warnIfPerfScore > 0.6, and perfScore=0.550429]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.1702 secs, and comparison 3.37922 sec, and warnIfPerfScore > 0.6, and perfScore=0.547668]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.16998 secs, and comparison 3.39684 sec, and warnIfPerfScore > 0.6, and perfScore=0.550543]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.14152 secs, and comparison 4.60518 sec, and warnIfPerfScore > 1.3, and perfScore=0.749844]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.60958 secs, and comparison 8.25741 sec, and warnIfPerfScore > 1.3, and perfScore=1.24931]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.07 secs, and comparison 5.88999 sec, and warnIfPerfScore > 0.3, and perfScore=0.133651]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.13527 secs, and comparison 11.7729 sec, and warnIfPerfScore > 1.5, and perfScore=1.44714]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.10253 secs, and comparison 3.48867 sec, and warnIfPerfScore > 0.55, and perfScore=0.491188]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.741923 sec, and warnIfPerfScore > 0.1, and perfScore=0.0494616]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.94278 sec, and warnIfPerfScore > 0.5, and perfScore=0.196185]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.02921 secs, and comparison 8.62272 sec, and warnIfPerfScore > 2, and perfScore=1.07392]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.96245 secs, and comparison 28.756 sec, and warnIfPerfScore > 3.6, and perfScore=3.2085]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 18 seconds]]]

Succeeded
