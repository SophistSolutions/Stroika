Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr  1 14:50:34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.49039 secs, and comparison 5.51928 sec, and warnIfPerfScore > 0.65, and perfScore=0.650061]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.13516 secs, and comparison 3.55462 sec, and warnIfPerfScore > 0.5, and perfScore=0.389114]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.7663 secs, and comparison 10.3499 sec, and warnIfPerfScore > 1.05, and perfScore=0.879618]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.27029 secs, and comparison 10.3287 sec, and warnIfPerfScore > 1.15, and perfScore=1.11418]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 10.9028 secs, and comparison 2.9776 sec, and warnIfPerfScore > 0.48, and perfScore=0.273103]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.5464 secs, and comparison 3.84342 sec, and warnIfPerfScore > 0.57, and perfScore=0.364428]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.1508 secs, and comparison 29.4803 sec, and warnIfPerfScore > 2.9, and perfScore=2.64378]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.6249 secs, and comparison 28.8347 sec, and warnIfPerfScore > 2.9, and perfScore=2.48042]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 9.37967 secs, and comparison 154.028 sec, and warnIfPerfScore > 24, and perfScore=16.4215]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.1768 secs, and comparison 14.1623 sec, and warnIfPerfScore > 1.7, and perfScore=1.54328]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.8615 secs, and comparison 10.5047 sec, and warnIfPerfScore > 1.5, and perfScore=0.967155]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 8.40296 secs, and comparison 17.7853 sec, and warnIfPerfScore > 2.1, and perfScore=2.11655]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.7225 secs, and comparison 6.61087 sec, and warnIfPerfScore > 1.6, and perfScore=0.563948]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.5201 secs, and comparison 1.26005 sec, and warnIfPerfScore > 0.23, and perfScore=0.109378]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.9973 secs, and comparison 13.7196 sec, and warnIfPerfScore > 1.3, and perfScore=1.05557]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 9.71683 secs, and comparison 8.9337 sec, and warnIfPerfScore > 1.2, and perfScore=0.919405]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.4617 secs, and comparison 3.03964 sec, and warnIfPerfScore > 0.33, and perfScore=0.225798]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 9.51031 secs, and comparison 49.1467 sec, and warnIfPerfScore > 6, and perfScore=5.16774]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.27901 secs, and comparison 8.46491 sec, and warnIfPerfScore > 0.8, and perfScore=0.912264]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.40673 secs, and comparison 11.5808 sec, and warnIfPerfScore > 1.4, and perfScore=1.23111]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.9213 secs, and comparison 4.65926 sec, and warnIfPerfScore > 0.65, and perfScore=0.334686]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.9129 secs, and comparison 44.6274 sec, and warnIfPerfScore > 4.4, and perfScore=4.08941]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.665 secs, and comparison 4.39238 sec, and warnIfPerfScore > 0.6, and perfScore=0.321432]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.5218 secs, and comparison 4.08179 sec, and warnIfPerfScore > 0.6, and perfScore=0.301868]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.2997 secs, and comparison 4.63005 sec, and warnIfPerfScore > 0.6, and perfScore=0.323786]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 13.6582 secs, and comparison 9.58955 sec, and warnIfPerfScore > 1.3, and perfScore=0.702108]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 14.9685 secs, and comparison 13.07 sec, and warnIfPerfScore > 1.3, and perfScore=0.873167]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 63.7571 secs, and comparison 12.0139 sec, and warnIfPerfScore > 0.3, and perfScore=0.188432]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.92414 secs, and comparison 15.8382 sec, and warnIfPerfScore > 1.5, and perfScore=1.59592]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.0499 secs, and comparison 4.57712 sec, and warnIfPerfScore > 0.55, and perfScore=0.379846]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.04428 sec, and warnIfPerfScore > 0.1, and perfScore=0.0696187]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.37622 sec, and warnIfPerfScore > 0.5, and perfScore=0.291748]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.5211 secs, and comparison 18.0811 sec, and warnIfPerfScore > 2, and perfScore=1.56939]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 11.6647 secs, and comparison 22.5905 sec, and warnIfPerfScore > 3.6, and perfScore=1.93665]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 13 seconds]]]

Succeeded
