Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 15:54:43 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.9556 secs, and comparison 4.07876 sec, and warnIfPerfScore > 0.65, and perfScore=0.5864]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.02986 secs, and comparison 2.62901 sec, and warnIfPerfScore > 0.5, and perfScore=0.373978]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.19971 secs, and comparison 7.11618 sec, and warnIfPerfScore > 1.05, and perfScore=0.867857]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.44393 secs, and comparison 7.15111 sec, and warnIfPerfScore > 1.15, and perfScore=1.10974]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 7.78387 secs, and comparison 2.10133 sec, and warnIfPerfScore > 0.48, and perfScore=0.269959]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.67334 secs, and comparison 2.57901 sec, and warnIfPerfScore > 0.57, and perfScore=0.336101]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.18117 secs, and comparison 19.8773 sec, and warnIfPerfScore > 2.9, and perfScore=2.42963]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.46465 secs, and comparison 20.5368 sec, and warnIfPerfScore > 2.9, and perfScore=2.42618]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.7579 secs, and comparison 149.7 sec, and warnIfPerfScore > 24, and perfScore=19.2965]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.31485 secs, and comparison 10.9082 sec, and warnIfPerfScore > 1.7, and perfScore=1.49124]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.35294 secs, and comparison 7.70824 sec, and warnIfPerfScore > 1.5, and perfScore=0.922818]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.32606 secs, and comparison 11.6978 sec, and warnIfPerfScore > 2.1, and perfScore=1.84914]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.68704 secs, and comparison 6.55226 sec, and warnIfPerfScore > 1.6, and perfScore=0.754257]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.15074 secs, and comparison 1.2645 sec, and warnIfPerfScore > 0.23, and perfScore=0.138185]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.6622 secs, and comparison 12.7633 sec, and warnIfPerfScore > 1.3, and perfScore=1.00798]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.8476 secs, and comparison 5.54648 sec, and warnIfPerfScore > 1.2, and perfScore=0.563232]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.76003 secs, and comparison 1.47588 sec, and warnIfPerfScore > 0.33, and perfScore=0.256227]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.39304 secs, and comparison 37.5595 sec, and warnIfPerfScore > 6, and perfScore=3.99865]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.35937 secs, and comparison 5.31441 sec, and warnIfPerfScore > 0.8, and perfScore=0.567817]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.35678 secs, and comparison 9.31808 sec, and warnIfPerfScore > 1.4, and perfScore=0.995863]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.01105 secs, and comparison 3.26127 sec, and warnIfPerfScore > 0.65, and perfScore=0.542546]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.76551 secs, and comparison 34.9519 sec, and warnIfPerfScore > 4.4, and perfScore=3.57911]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.86545 secs, and comparison 3.26228 sec, and warnIfPerfScore > 0.6, and perfScore=0.556186]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.87657 secs, and comparison 3.22228 sec, and warnIfPerfScore > 0.6, and perfScore=0.548327]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.87096 secs, and comparison 3.22113 sec, and warnIfPerfScore > 0.6, and perfScore=0.548654]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.88144 secs, and comparison 4.61107 sec, and warnIfPerfScore > 1.3, and perfScore=0.784005]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.41473 secs, and comparison 8.23685 sec, and warnIfPerfScore > 1.3, and perfScore=1.28405]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.1964 secs, and comparison 5.71359 sec, and warnIfPerfScore > 0.3, and perfScore=0.126417]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.83874 secs, and comparison 11.5048 sec, and warnIfPerfScore > 1.5, and perfScore=1.46769]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.18356 secs, and comparison 2.71927 sec, and warnIfPerfScore > 0.55, and perfScore=0.378541]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.78431 sec, and warnIfPerfScore > 0.1, and perfScore=0.0522873]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.51975 sec, and warnIfPerfScore > 0.5, and perfScore=0.167983]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.98525 secs, and comparison 13.1835 sec, and warnIfPerfScore > 2, and perfScore=1.65098]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.01619 secs, and comparison 28.2646 sec, and warnIfPerfScore > 3.6, and perfScore=3.13488]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 21 seconds]]]

Succeeded
