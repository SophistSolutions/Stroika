Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 21:11:49 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.65399 secs, and comparison 4.79523 sec, and warnIfPerfScore > 0.65, and perfScore=0.720655]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.76624 secs, and comparison 2.80644 sec, and warnIfPerfScore > 0.5, and perfScore=0.414771]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 10.0223 secs, and comparison 8.75977 sec, and warnIfPerfScore > 1.05, and perfScore=0.874025]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.65759 secs, and comparison 8.71224 sec, and warnIfPerfScore > 1.15, and perfScore=1.13773]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.0468 secs, and comparison 2.86802 sec, and warnIfPerfScore > 0.48, and perfScore=0.259624]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.4155 secs, and comparison 3.47256 sec, and warnIfPerfScore > 0.57, and perfScore=0.304197]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.61492 secs, and comparison 24.2575 sec, and warnIfPerfScore > 2.9, and perfScore=2.5229]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.277 secs, and comparison 24.6761 sec, and warnIfPerfScore > 2.9, and perfScore=2.4011]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.43691 secs, and comparison 156.929 sec, and warnIfPerfScore > 24, and perfScore=18.6003]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.93495 secs, and comparison 11.8569 sec, and warnIfPerfScore > 1.7, and perfScore=1.49427]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.75471 secs, and comparison 7.2634 sec, and warnIfPerfScore > 1.5, and perfScore=0.936643]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.59558 secs, and comparison 14.444 sec, and warnIfPerfScore > 2.1, and perfScore=1.90164]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.59517 secs, and comparison 5.09971 sec, and warnIfPerfScore > 1.6, and perfScore=0.531488]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 10.034 secs, and comparison 0.953309 sec, and warnIfPerfScore > 0.23, and perfScore=0.0950077]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.686 secs, and comparison 14.0055 sec, and warnIfPerfScore > 1.3, and perfScore=1.02334]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.2245 secs, and comparison 7.04176 sec, and warnIfPerfScore > 1.2, and perfScore=0.688714]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 12.6237 secs, and comparison 2.82492 sec, and warnIfPerfScore > 0.33, and perfScore=0.22378]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.7831 secs, and comparison 43.8942 sec, and warnIfPerfScore > 6, and perfScore=4.48674]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.80779 secs, and comparison 6.86833 sec, and warnIfPerfScore > 0.8, and perfScore=0.700293]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.71243 secs, and comparison 10.2016 sec, and warnIfPerfScore > 1.4, and perfScore=1.05036]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.6457 secs, and comparison 3.98165 sec, and warnIfPerfScore > 0.65, and perfScore=0.314863]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.3762 secs, and comparison 41.3465 sec, and warnIfPerfScore > 4.4, and perfScore=3.98476]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.3625 secs, and comparison 3.87317 sec, and warnIfPerfScore > 0.6, and perfScore=0.3133]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.3588 secs, and comparison 3.85704 sec, and warnIfPerfScore > 0.6, and perfScore=0.312087]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.3324 secs, and comparison 3.8126 sec, and warnIfPerfScore > 0.6, and perfScore=0.309153]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 12.3549 secs, and comparison 7.41341 sec, and warnIfPerfScore > 1.3, and perfScore=0.600036]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 13.2319 secs, and comparison 10.4758 sec, and warnIfPerfScore > 1.3, and perfScore=0.791703]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 50.982 secs, and comparison 6.15018 sec, and warnIfPerfScore > 0.3, and perfScore=0.120634]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.42606 secs, and comparison 12.8596 sec, and warnIfPerfScore > 1.5, and perfScore=1.52617]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.24316 secs, and comparison 3.91495 sec, and warnIfPerfScore > 0.55, and perfScore=0.474933]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.799331 sec, and warnIfPerfScore > 0.1, and perfScore=0.0532887]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.32699 sec, and warnIfPerfScore > 0.5, and perfScore=0.221799]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.13115 secs, and comparison 14.5466 sec, and warnIfPerfScore > 2, and perfScore=1.59308]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.4149 secs, and comparison 18.2909 sec, and warnIfPerfScore > 3.6, and perfScore=1.60237]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 23 seconds]]]

Succeeded
