Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec 11 2:47:59 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.33371 secs, and comparison 4.37225 sec, and warnIfPerfScore > 0.65, and perfScore=0.596186]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.44713 secs, and comparison 2.82019 sec, and warnIfPerfScore > 0.5, and perfScore=0.378695]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.94857 secs, and comparison 7.50874 sec, and warnIfPerfScore > 1.05, and perfScore=0.839099]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.76723 secs, and comparison 7.47368 sec, and warnIfPerfScore > 1.15, and perfScore=1.10439]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.2203 secs, and comparison 2.2027 sec, and warnIfPerfScore > 0.48, and perfScore=0.215521]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 10.1236 secs, and comparison 2.68996 sec, and warnIfPerfScore > 0.57, and perfScore=0.265713]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.74132 secs, and comparison 20.901 sec, and warnIfPerfScore > 2.9, and perfScore=2.39106]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.29106 secs, and comparison 21.8473 sec, and warnIfPerfScore > 2.9, and perfScore=2.35143]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 8.30908 secs, and comparison 164.701 sec, and warnIfPerfScore > 24, and perfScore=19.8218]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.59999 secs, and comparison 10.8681 sec, and warnIfPerfScore > 1.7, and perfScore=1.43001]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.46734 secs, and comparison 8.30989 sec, and warnIfPerfScore > 1.5, and perfScore=0.981405]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.04269 secs, and comparison 12.6005 sec, and warnIfPerfScore > 2.1, and perfScore=1.78916]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.51867 secs, and comparison 6.87384 sec, and warnIfPerfScore > 1.6, and perfScore=0.722143]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.95138 secs, and comparison 1.41216 sec, and warnIfPerfScore > 0.23, and perfScore=0.141906]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0413 secs, and comparison 13.5391 sec, and warnIfPerfScore > 1.3, and perfScore=1.03817]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.3278 secs, and comparison 5.86605 sec, and warnIfPerfScore > 1.2, and perfScore=0.567985]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.35029 secs, and comparison 2.20212 sec, and warnIfPerfScore > 0.33, and perfScore=0.235514]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.92032 secs, and comparison 39.9123 sec, and warnIfPerfScore > 6, and perfScore=4.02329]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.88423 secs, and comparison 5.61426 sec, and warnIfPerfScore > 0.8, and perfScore=0.568002]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.88844 secs, and comparison 9.64862 sec, and warnIfPerfScore > 1.4, and perfScore=0.975747]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.32196 secs, and comparison 3.55482 sec, and warnIfPerfScore > 0.65, and perfScore=0.381339]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.3355 secs, and comparison 37.2056 sec, and warnIfPerfScore > 4.4, and perfScore=3.5998]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.25975 secs, and comparison 3.53352 sec, and warnIfPerfScore > 0.6, and perfScore=0.381599]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.25925 secs, and comparison 3.49624 sec, and warnIfPerfScore > 0.6, and perfScore=0.377594]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.49816 secs, and comparison 3.57305 sec, and warnIfPerfScore > 0.6, and perfScore=0.376184]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.20477 secs, and comparison 5.28848 sec, and warnIfPerfScore > 1.3, and perfScore=0.574537]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.92323 secs, and comparison 8.82704 sec, and warnIfPerfScore > 1.3, and perfScore=0.889532]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.0714 secs, and comparison 5.93867 sec, and warnIfPerfScore > 0.3, and perfScore=0.123539]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.74801 secs, and comparison 11.925 sec, and warnIfPerfScore > 1.5, and perfScore=1.5391]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.5391}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.38986 secs, and comparison 2.91722 sec, and warnIfPerfScore > 0.55, and perfScore=0.394759]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.827443 sec, and warnIfPerfScore > 0.1, and perfScore=0.0551629]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80233 sec, and warnIfPerfScore > 0.5, and perfScore=0.186822]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.54413 secs, and comparison 13.966 sec, and warnIfPerfScore > 2, and perfScore=1.63457]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.49556 secs, and comparison 28.4449 sec, and warnIfPerfScore > 3.6, and perfScore=2.9956]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 36 seconds]]]

Succeeded
