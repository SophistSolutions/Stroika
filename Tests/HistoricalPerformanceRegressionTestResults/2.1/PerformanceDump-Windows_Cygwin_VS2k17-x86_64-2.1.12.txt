Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Dec 12 16:53:1 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 41.2835 secs, and comparison 6.51643 sec, and warnIfPerfScore > 0.65, and perfScore=0.157846]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 41.6231 secs, and comparison 6.1801 sec, and warnIfPerfScore > 0.5, and perfScore=0.148478]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 17.2819 secs, and comparison 12.733 sec, and warnIfPerfScore > 1.05, and perfScore=0.73678]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.8045 secs, and comparison 12.7375 sec, and warnIfPerfScore > 1.15, and perfScore=0.994765]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 18.3486 secs, and comparison 3.49774 sec, and warnIfPerfScore > 0.48, and perfScore=0.190627]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 19.4897 secs, and comparison 3.97834 sec, and warnIfPerfScore > 0.57, and perfScore=0.204126]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 19.2325 secs, and comparison 32.3473 sec, and warnIfPerfScore > 2.9, and perfScore=1.6819]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 19.7818 secs, and comparison 33.8945 sec, and warnIfPerfScore > 2.9, and perfScore=1.71341]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 13.8724 secs, and comparison 179.541 sec, and warnIfPerfScore > 24, and perfScore=12.9423]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 19.2195 secs, and comparison 14.2587 sec, and warnIfPerfScore > 1.7, and perfScore=0.741885]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 40.6889 secs, and comparison 39.4417 sec, and warnIfPerfScore > 1.5, and perfScore=0.969349]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.4455 secs, and comparison 16.4582 sec, and warnIfPerfScore > 2.1, and perfScore=1.00077]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 33.5234 secs, and comparison 10.4658 sec, and warnIfPerfScore > 1.6, and perfScore=0.312195]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 35.3112 secs, and comparison 1.99367 sec, and warnIfPerfScore > 0.23, and perfScore=0.05646]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.5498 secs, and comparison 21.5251 sec, and warnIfPerfScore > 1.3, and perfScore=1.71517]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.8325 secs, and comparison 20.2031 sec, and warnIfPerfScore > 1.2, and perfScore=1.46056]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 20.935 secs, and comparison 5.27221 sec, and warnIfPerfScore > 0.33, and perfScore=0.251837]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.348 secs, and comparison 51.7738 sec, and warnIfPerfScore > 6, and perfScore=3.87877]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.7717 secs, and comparison 19.1843 sec, and warnIfPerfScore > 0.8, and perfScore=1.5021]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.1692 secs, and comparison 51.6513 sec, and warnIfPerfScore > 1.4, and perfScore=3.92212]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 21.2881 secs, and comparison 4.85744 sec, and warnIfPerfScore > 0.65, and perfScore=0.228177]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 23.9822 secs, and comparison 57.7826 sec, and warnIfPerfScore > 4.4, and perfScore=2.40939]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.1992 secs, and comparison 5.66224 sec, and warnIfPerfScore > 0.6, and perfScore=0.267096]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.9896 secs, and comparison 5.72691 sec, and warnIfPerfScore > 0.6, and perfScore=0.272846]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 20.3894 secs, and comparison 6.41082 sec, and warnIfPerfScore > 0.6, and perfScore=0.31442]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 20.7699 secs, and comparison 13.7399 sec, and warnIfPerfScore > 1.3, and perfScore=0.661529]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 28.1363 secs, and comparison 20.6547 sec, and warnIfPerfScore > 1.3, and perfScore=0.734096]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 101.214 secs, and comparison 8.80824 sec, and warnIfPerfScore > 0.3, and perfScore=0.0870257]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.4587 secs, and comparison 22.7901 sec, and warnIfPerfScore > 1.5, and perfScore=1.30537]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 18.8347 secs, and comparison 6.20019 sec, and warnIfPerfScore > 0.55, and perfScore=0.32919]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.90235 sec, and warnIfPerfScore > 0.1, and perfScore=0.126824]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.44948 sec, and warnIfPerfScore > 0.5, and perfScore=0.296632]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.3499 secs, and comparison 22.2643 sec, and warnIfPerfScore > 2, and perfScore=1.09408]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.1879 secs, and comparison 25.8898 sec, and warnIfPerfScore > 3.6, and perfScore=1.16684]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 25 minutes, 25 seconds]]]

Succeeded
