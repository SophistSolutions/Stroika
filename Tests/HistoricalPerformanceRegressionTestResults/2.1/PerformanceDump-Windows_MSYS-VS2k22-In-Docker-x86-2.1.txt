Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 1:33:12 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.18317 secs, and comparison 4.29696 sec, and warnIfPerfScore > 0.65, and perfScore=0.598198]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.1343 secs, and comparison 2.71106 sec, and warnIfPerfScore > 0.5, and perfScore=0.380004]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.61389 secs, and comparison 7.44053 sec, and warnIfPerfScore > 1.05, and perfScore=0.863783]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.81196 secs, and comparison 7.44629 sec, and warnIfPerfScore > 1.15, and perfScore=1.09312]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.82766 secs, and comparison 2.26427 sec, and warnIfPerfScore > 0.48, and perfScore=0.289266]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.03516 secs, and comparison 2.65093 sec, and warnIfPerfScore > 0.57, and perfScore=0.329917]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.37942 secs, and comparison 20.4291 sec, and warnIfPerfScore > 2.9, and perfScore=2.43801]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.43763 secs, and comparison 21.3079 sec, and warnIfPerfScore > 2.9, and perfScore=2.52535]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.88863 secs, and comparison 148.357 sec, and warnIfPerfScore > 24, and perfScore=18.8064]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.59457 secs, and comparison 11.341 sec, and warnIfPerfScore > 1.7, and perfScore=1.4933]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.92761 secs, and comparison 7.85101 sec, and warnIfPerfScore > 1.5, and perfScore=0.990338]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.13974 secs, and comparison 13.3382 sec, and warnIfPerfScore > 2.1, and perfScore=1.86816]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.00193 secs, and comparison 6.81063 sec, and warnIfPerfScore > 1.6, and perfScore=0.756575]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.38812 secs, and comparison 1.28237 sec, and warnIfPerfScore > 0.23, and perfScore=0.136595]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9266 secs, and comparison 13.4942 sec, and warnIfPerfScore > 1.3, and perfScore=1.04391]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.104 secs, and comparison 6.03755 sec, and warnIfPerfScore > 1.2, and perfScore=0.597541]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 6.33829 secs, and comparison 1.64616 sec, and warnIfPerfScore > 0.33, and perfScore=0.259716]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.66279 secs, and comparison 40.7167 sec, and warnIfPerfScore > 6, and perfScore=4.21377]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.74168 secs, and comparison 5.44481 sec, and warnIfPerfScore > 0.8, and perfScore=0.558919]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.8517 secs, and comparison 9.36065 sec, and warnIfPerfScore > 1.4, and perfScore=0.950156]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.41893 secs, and comparison 3.64742 sec, and warnIfPerfScore > 0.65, and perfScore=0.568228]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.1439 secs, and comparison 38.0442 sec, and warnIfPerfScore > 4.4, and perfScore=3.75044]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.46319 secs, and comparison 3.5271 sec, and warnIfPerfScore > 0.6, and perfScore=0.545721]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.33748 secs, and comparison 3.54809 sec, and warnIfPerfScore > 0.6, and perfScore=0.559858]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.40893 secs, and comparison 3.56385 sec, and warnIfPerfScore > 0.6, and perfScore=0.556076]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.43164 secs, and comparison 4.8483 sec, and warnIfPerfScore > 1.3, and perfScore=0.75382]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.86419 secs, and comparison 8.57615 sec, and warnIfPerfScore > 1.3, and perfScore=1.2494]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.7031 secs, and comparison 6.05808 sec, and warnIfPerfScore > 0.3, and perfScore=0.126995]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.16696 secs, and comparison 12.4831 sec, and warnIfPerfScore > 1.5, and perfScore=1.52849]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.52849}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.80072 secs, and comparison 2.95706 sec, and warnIfPerfScore > 0.55, and perfScore=0.379075]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.79313 sec, and warnIfPerfScore > 0.1, and perfScore=0.0528754]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.19748 sec, and warnIfPerfScore > 0.5, and perfScore=0.213165]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.56226 secs, and comparison 13.3279 sec, and warnIfPerfScore > 2, and perfScore=1.55659]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.38432 secs, and comparison 29.8643 sec, and warnIfPerfScore > 3.6, and perfScore=3.18236]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 50 seconds]]]

Succeeded
