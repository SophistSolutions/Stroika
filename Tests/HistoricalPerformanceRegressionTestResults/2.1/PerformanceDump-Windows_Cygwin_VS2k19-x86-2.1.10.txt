Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 20:46:40 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 51.3556 secs, and comparison 15.9108 sec, and warnIfPerfScore > 0.65, and perfScore=0.309816]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 51.0008 secs, and comparison 15.5586 sec, and warnIfPerfScore > 0.5, and perfScore=0.305066]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 30.5376 secs, and comparison 23.6068 sec, and warnIfPerfScore > 1.05, and perfScore=0.773041]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 24.2251 secs, and comparison 23.269 sec, and warnIfPerfScore > 1.15, and perfScore=0.960533]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 22.471 secs, and comparison 3.86167 sec, and warnIfPerfScore > 0.48, and perfScore=0.171852]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.665 secs, and comparison 4.07493 sec, and warnIfPerfScore > 0.57, and perfScore=0.188088]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.4206 secs, and comparison 39.8479 sec, and warnIfPerfScore > 2.9, and perfScore=1.7014]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 24.9393 secs, and comparison 44.0528 sec, and warnIfPerfScore > 2.9, and perfScore=1.7664]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 21.6074 secs, and comparison 223.562 sec, and warnIfPerfScore > 24, and perfScore=10.3466]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 20.5473 secs, and comparison 17.6908 sec, and warnIfPerfScore > 1.7, and perfScore=0.860979]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 52.962 secs, and comparison 53.2923 sec, and warnIfPerfScore > 1.5, and perfScore=1.00624]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 20.421 secs, and comparison 19.2254 sec, and warnIfPerfScore > 2.1, and perfScore=0.941448]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 44.1839 secs, and comparison 14.0774 sec, and warnIfPerfScore > 1.6, and perfScore=0.31861]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 46.4273 secs, and comparison 3.58203 sec, and warnIfPerfScore > 0.23, and perfScore=0.0771536]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.8461 secs, and comparison 27.2771 sec, and warnIfPerfScore > 1.3, and perfScore=1.61919]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.61919}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.5794 secs, and comparison 20.8691 sec, and warnIfPerfScore > 1.2, and perfScore=1.33953]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.33953}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.6268 secs, and comparison 4.53422 sec, and warnIfPerfScore > 0.33, and perfScore=0.332744]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.332744}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 15.2151 secs, and comparison 53.8232 sec, and warnIfPerfScore > 6, and perfScore=3.53749]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.9977 secs, and comparison 20.4893 sec, and warnIfPerfScore > 0.8, and perfScore=1.36617]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.36617}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 15.3522 secs, and comparison 34.0451 sec, and warnIfPerfScore > 1.4, and perfScore=2.2176]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.2176}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.1183 secs, and comparison 5.00435 sec, and warnIfPerfScore > 0.65, and perfScore=0.381479]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 25.929 secs, and comparison 61.4853 sec, and warnIfPerfScore > 4.4, and perfScore=2.3713]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.6987 secs, and comparison 5.95325 sec, and warnIfPerfScore > 0.6, and perfScore=0.405019]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15.2481 secs, and comparison 6.24734 sec, and warnIfPerfScore > 0.6, and perfScore=0.409713]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.7371 secs, and comparison 6.43984 sec, and warnIfPerfScore > 0.6, and perfScore=0.43698]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 14.3366 secs, and comparison 13.7066 sec, and warnIfPerfScore > 1.3, and perfScore=0.956054]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.421 secs, and comparison 21.4848 sec, and warnIfPerfScore > 1.3, and perfScore=1.05209]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 113.869 secs, and comparison 14.6215 sec, and warnIfPerfScore > 0.3, and perfScore=0.128406]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 27.3601 secs, and comparison 32.2026 sec, and warnIfPerfScore > 1.5, and perfScore=1.17699]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 19.7085 secs, and comparison 6.23996 sec, and warnIfPerfScore > 0.55, and perfScore=0.316613]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.66282 sec, and warnIfPerfScore > 0.1, and perfScore=0.110855]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.110855}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.58438 sec, and warnIfPerfScore > 0.5, and perfScore=0.305626]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 21.1583 secs, and comparison 23.079 sec, and warnIfPerfScore > 2, and perfScore=1.09078]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 25.4366 secs, and comparison 45.2347 sec, and warnIfPerfScore > 3.6, and perfScore=1.77833]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 48 seconds]]]

Succeeded
