Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Dec 24 13:18:2 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 6.25999 secs, and comparison 4.02025 sec, and warnIfPerfScore > 0.62, and perfScore=0.642214]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.62 and got 0.642214}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.23749 secs, and comparison 2.52818 sec, and warnIfPerfScore > 0.5, and perfScore=0.405321]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.78512 secs, and comparison 6.87371 sec, and warnIfPerfScore > 1.05, and perfScore=0.88293]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.17468 secs, and comparison 6.85701 sec, and warnIfPerfScore > 1.15, and perfScore=1.1105]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 56.5194 secs, and comparison 2.33607 sec, and warnIfPerfScore > 0.48, and perfScore=0.0413321]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 53.3588 secs, and comparison 2.76499 sec, and warnIfPerfScore > 0.57, and perfScore=0.0518188]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 38.8012 secs, and comparison 19.2577 sec, and warnIfPerfScore > 2.9, and perfScore=0.496317]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 42.6184 secs, and comparison 19.7902 sec, and warnIfPerfScore > 2.9, and perfScore=0.464358]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 17.772 secs, and comparison 61.4915 sec, and warnIfPerfScore > 9.7, and perfScore=3.46001]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 52.8007 secs, and comparison 10.1012 sec, and warnIfPerfScore > 1.6, and perfScore=0.191308]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.75429 secs, and comparison 7.57495 sec, and warnIfPerfScore > 1.5, and perfScore=0.976873]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 60.8786 secs, and comparison 11.8919 sec, and warnIfPerfScore > 2.1, and perfScore=0.195338]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.78308 secs, and comparison 11.9725 sec, and warnIfPerfScore > 1.3, and perfScore=1.53827]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.53827}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.23075 secs, and comparison 1.16547 sec, and warnIfPerfScore > 0.23, and perfScore=0.1416]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9307 secs, and comparison 12.6189 sec, and warnIfPerfScore > 1.3, and perfScore=1.05768]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.05793 secs, and comparison 5.13654 sec, and warnIfPerfScore > 1.2, and perfScore=0.567077]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 6.30132 secs, and comparison 1.44127 sec, and warnIfPerfScore > 0.33, and perfScore=0.228725]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.73323 secs, and comparison 38.1323 sec, and warnIfPerfScore > 6, and perfScore=4.36635]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.71139 secs, and comparison 4.91225 sec, and warnIfPerfScore > 0.8, and perfScore=0.563889]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.71368 secs, and comparison 9.19357 sec, and warnIfPerfScore > 0.9, and perfScore=1.05507]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.9 and got 1.05507}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.09999 secs, and comparison 3.35874 sec, and warnIfPerfScore > 0.5, and perfScore=0.550614]
	                 	Sequence_DoublyLinkedList<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.5 and got 0.550614}}}

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 8.84949 secs, and comparison 34.8979 sec, and warnIfPerfScore > 4.4, and perfScore=3.94349]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.21461 secs, and comparison 4.60612 sec, and warnIfPerfScore > 0.6, and perfScore=0.741176]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.741176}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 41.8102 secs, and comparison 5.99022 sec, and warnIfPerfScore > 0.2, and perfScore=0.143272]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.53637 secs, and comparison 11.5956 sec, and warnIfPerfScore > 1.5, and perfScore=1.53862]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.53862}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.39324 secs, and comparison 2.90675 sec, and warnIfPerfScore > 0.55, and perfScore=0.45466]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.891201 sec, and warnIfPerfScore > 0.25, and perfScore=0.0594134]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80775 sec, and warnIfPerfScore > 0.5, and perfScore=0.187183]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.92776 secs, and comparison 8.39497 sec, and warnIfPerfScore > 2, and perfScore=1.21179]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 8.20434 secs, and comparison 94.2388 sec, and warnIfPerfScore > 3.1, and perfScore=11.4865]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 11.4865}}}

[[[Tests took: 15 minutes, 29 seconds]]]

Succeeded
