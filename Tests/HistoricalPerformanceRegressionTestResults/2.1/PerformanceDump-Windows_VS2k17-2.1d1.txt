Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/11/18 23:02:22]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.5464 secs, and comparison 5.42108 sec, and warnIfPerfScore > 0.62, and perfScore=0.469503]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.019 secs, and comparison 3.66259 sec, and warnIfPerfScore > 0.65, and perfScore=0.332389]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.7348 secs, and comparison 9.21293 sec, and warnIfPerfScore > 1.05, and perfScore=0.858229]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.52431 secs, and comparison 3.42639 sec, and warnIfPerfScore > 0.5, and perfScore=0.359752]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.55723 secs, and comparison 4.25085 sec, and warnIfPerfScore > 0.68, and perfScore=0.444778]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.9949 secs, and comparison 28.9154 sec, and warnIfPerfScore > 4.3, and perfScore=2.62988]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.5688 secs, and comparison 30.8781 sec, and warnIfPerfScore > 4, and perfScore=2.66909]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 11.785 secs, and comparison 94.8157 sec, and warnIfPerfScore > 10.4, and perfScore=8.04547]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.2122 secs, and comparison 15.6095 sec, and warnIfPerfScore > 3.2, and perfScore=1.39219]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.6086 secs, and comparison 13.38 sec, and warnIfPerfScore > 1.8, and perfScore=1.26124]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.12215 secs, and comparison 14.9081 sec, and warnIfPerfScore > 2.8, and perfScore=1.83549]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.2922 secs, and comparison 31.7379 sec, and warnIfPerfScore > 3.3, and perfScore=2.8106]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.1708 secs, and comparison 1.35488 sec, and warnIfPerfScore > 0.25, and perfScore=0.111322]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3527 secs, and comparison 11.8371 sec, and warnIfPerfScore > 1.4, and perfScore=1.04267]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.67118 secs, and comparison 36.1492 sec, and warnIfPerfScore > 7.7, and perfScore=3.73783]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.1151 secs, and comparison 4.73665 sec, and warnIfPerfScore > 1.55, and perfScore=0.468275]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 9.251 secs, and comparison 69.5382 sec, and warnIfPerfScore > 9, and perfScore=7.51683]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.0859 secs, and comparison 6.26646 sec, and warnIfPerfScore > 1, and perfScore=0.621307]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 10.3453 secs, and comparison 62.237 sec, and warnIfPerfScore > 7.9, and perfScore=6.016]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.95937 secs, and comparison 6.98402 sec, and warnIfPerfScore > 0.8, and perfScore=0.701251]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.4407 secs, and comparison 15.6295 sec, and warnIfPerfScore > 1.7, and perfScore=1.36613]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.8571 secs, and comparison 4.28142 sec, and warnIfPerfScore > 0.55, and perfScore=0.332999]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.59964 sec, and warnIfPerfScore > 0.4, and perfScore=0.173309]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.55484 sec, and warnIfPerfScore > 1.1, and perfScore=0.303656]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.0251 secs, and comparison 15.532 sec, and warnIfPerfScore > 2.4, and perfScore=1.29163]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.6556 secs, and comparison 31.7662 sec, and warnIfPerfScore > 2.9, and perfScore=2.72541]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 10 seconds]]]

Succeeded
