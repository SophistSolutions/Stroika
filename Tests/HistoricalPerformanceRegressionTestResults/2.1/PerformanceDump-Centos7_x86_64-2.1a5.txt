Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 31 4:21:56 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.86583 secs, and comparison 5.16341 sec, and warnIfPerfScore > 0.62, and perfScore=0.752045]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.6538 secs, and comparison 3.75987 sec, and warnIfPerfScore > 0.5, and perfScore=0.565071]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.06973 secs, and comparison 8.15409 sec, and warnIfPerfScore > 1.05, and perfScore=0.899044]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.04175 secs, and comparison 4.79897 sec, and warnIfPerfScore > 0.48, and perfScore=1.5777]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.09991 secs, and comparison 5.0741 sec, and warnIfPerfScore > 0.57, and perfScore=1.63685]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.4959 secs, and comparison 32.6132 sec, and warnIfPerfScore > 2.9, and perfScore=2.41653]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.3362 secs, and comparison 35.4675 sec, and warnIfPerfScore > 2.9, and perfScore=2.31266]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 13.1775 secs, and comparison 276.45 sec, and warnIfPerfScore > 9.7, and perfScore=20.9789]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.042 secs, and comparison 26.4693 sec, and warnIfPerfScore > 1.6, and perfScore=1.39005]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 19.1992 secs, and comparison 16.6957 sec, and warnIfPerfScore > 1.5, and perfScore=0.869602]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.055 secs, and comparison 25.2064 sec, and warnIfPerfScore > 2.1, and perfScore=2.09094]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1294 secs, and comparison 13.2754 sec, and warnIfPerfScore > 1.3, and perfScore=1.01112]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 16.6426 secs, and comparison 6.27914 sec, and warnIfPerfScore > 0.23, and perfScore=0.377293]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.0979 secs, and comparison 16.2288 sec, and warnIfPerfScore > 1.3, and perfScore=1.07491]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.3341 secs, and comparison 22.9102 sec, and warnIfPerfScore > 1.2, and perfScore=1.71817]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 12.9943 secs, and comparison 2.78125 sec, and warnIfPerfScore > 0.33, and perfScore=0.214035]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 11.2987 secs, and comparison 92.8376 sec, and warnIfPerfScore > 6, and perfScore=8.21667]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.3881 secs, and comparison 7.84183 sec, and warnIfPerfScore > 0.5, and perfScore=0.633013]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 17.8947 secs, and comparison 81.3151 sec, and warnIfPerfScore > 4.4, and perfScore=4.5441]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 13.2006 secs, and comparison 7.34588 sec, and warnIfPerfScore > 0.6, and perfScore=0.556479]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 28.8373 secs, and comparison 36.2205 sec, and warnIfPerfScore > 1.5, and perfScore=1.25603]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 22.8996 secs, and comparison 8.74538 sec, and warnIfPerfScore > 0.55, and perfScore=0.381901]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.37812 sec, and warnIfPerfScore > 0.25, and perfScore=0.225208]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.12604 sec, and warnIfPerfScore > 0.5, and perfScore=0.47507]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 24 seconds]]]

Succeeded
