Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 21 10:36:27 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 6.47392 secs, and comparison 4.05386 sec, and warnIfPerfScore > 0.62, and perfScore=0.626184]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.62 and got 0.626184}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.45341 secs, and comparison 2.53911 sec, and warnIfPerfScore > 0.5, and perfScore=0.393453]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.99422 secs, and comparison 7.14002 sec, and warnIfPerfScore > 1.05, and perfScore=0.893147]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.4981 secs, and comparison 7.05253 sec, and warnIfPerfScore > 1.15, and perfScore=1.08532]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.47623 secs, and comparison 2.46219 sec, and warnIfPerfScore > 0.48, and perfScore=0.329336]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.50912 secs, and comparison 2.92725 sec, and warnIfPerfScore > 0.57, and perfScore=0.389826]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.82291 secs, and comparison 19.9499 sec, and warnIfPerfScore > 2.9, and perfScore=2.5502]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.2786 secs, and comparison 20.0149 sec, and warnIfPerfScore > 2.9, and perfScore=2.41766]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 7.38108 secs, and comparison 63.5741 sec, and warnIfPerfScore > 9.7, and perfScore=8.61312]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.86958 secs, and comparison 10.1862 sec, and warnIfPerfScore > 1.6, and perfScore=1.48279]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.02484 secs, and comparison 7.9637 sec, and warnIfPerfScore > 1.5, and perfScore=0.992382]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.5702 secs, and comparison 11.967 sec, and warnIfPerfScore > 2.1, and perfScore=1.82141]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.31578 secs, and comparison 7.34522 sec, and warnIfPerfScore > 1.3, and perfScore=0.883286]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.76841 secs, and comparison 1.1986 sec, and warnIfPerfScore > 0.23, and perfScore=0.136695]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.121 secs, and comparison 12.7884 sec, and warnIfPerfScore > 1.3, and perfScore=1.05506]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.44332 secs, and comparison 5.18214 sec, and warnIfPerfScore > 1.2, and perfScore=0.548762]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.86108 secs, and comparison 1.45084 sec, and warnIfPerfScore > 0.33, and perfScore=0.247538]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.09967 secs, and comparison 38.0578 sec, and warnIfPerfScore > 6, and perfScore=4.18232]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.24458 secs, and comparison 4.97532 sec, and warnIfPerfScore > 0.8, and perfScore=0.538188]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.2995 secs, and comparison 8.86597 sec, and warnIfPerfScore > 0.9, and perfScore=0.953382]
	                 	Sequence_stdvector<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.9 and got 0.953382}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 5.90367 secs, and comparison 3.53129 sec, and warnIfPerfScore > 0.5, and perfScore=0.598151]
	                 	Sequence_DoublyLinkedList<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.5 and got 0.598151}}}

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.34084 secs, and comparison 35.7385 sec, and warnIfPerfScore > 4.4, and perfScore=3.82604]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.08342 secs, and comparison 4.65913 sec, and warnIfPerfScore > 0.6, and perfScore=0.765874]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.765874}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.6867 secs, and comparison 6.08045 sec, and warnIfPerfScore > 0.2, and perfScore=0.130239]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.82748 secs, and comparison 11.4795 sec, and warnIfPerfScore > 1.5, and perfScore=1.46657]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.90285 secs, and comparison 2.721 sec, and warnIfPerfScore > 0.55, and perfScore=0.394185]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 15 secs, and comparison 0.917928 sec, and warnIfPerfScore > 0.25, and perfScore=0.0611952]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.86183 sec, and warnIfPerfScore > 0.5, and perfScore=0.190789]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.5937 secs, and comparison 8.4225 sec, and warnIfPerfScore > 2, and perfScore=1.10914]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.31589 secs, and comparison 28.7116 sec, and warnIfPerfScore > 3.1, and perfScore=3.082]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 5 seconds]]]

Succeeded
