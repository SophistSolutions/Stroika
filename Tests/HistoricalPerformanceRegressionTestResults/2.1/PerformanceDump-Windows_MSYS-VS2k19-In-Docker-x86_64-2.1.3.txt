Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 13:31:41 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.38071 secs, and comparison 4.28446 sec, and warnIfPerfScore > 0.65, and perfScore=0.796263]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.37335 secs, and comparison 2.61494 sec, and warnIfPerfScore > 0.5, and perfScore=0.48665]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.66126 secs, and comparison 7.05857 sec, and warnIfPerfScore > 1.05, and perfScore=0.921332]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.37375 secs, and comparison 7.00144 sec, and warnIfPerfScore > 1.15, and perfScore=1.09848]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.4157 secs, and comparison 2.16432 sec, and warnIfPerfScore > 0.48, and perfScore=0.229863]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.17934 secs, and comparison 2.7722 sec, and warnIfPerfScore > 0.57, and perfScore=0.302004]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.96446 secs, and comparison 18.2108 sec, and warnIfPerfScore > 2.9, and perfScore=3.05322]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.4856 secs, and comparison 18.1139 sec, and warnIfPerfScore > 2.9, and perfScore=2.79295]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.50606 secs, and comparison 126.337 sec, and warnIfPerfScore > 24, and perfScore=22.9451]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.31349 secs, and comparison 9.76345 sec, and warnIfPerfScore > 1.7, and perfScore=1.83748]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.70292 secs, and comparison 5.33333 sec, and warnIfPerfScore > 1.5, and perfScore=0.935193]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 4.80327 secs, and comparison 11.7697 sec, and warnIfPerfScore > 2.1, and perfScore=2.45034]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.46182 secs, and comparison 4.42198 sec, and warnIfPerfScore > 1.6, and perfScore=0.684325]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 12.0061 secs, and comparison 0.66474 sec, and warnIfPerfScore > 0.23, and perfScore=0.0553669]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4662 secs, and comparison 11.7518 sec, and warnIfPerfScore > 1.3, and perfScore=1.0249]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.2002 secs, and comparison 4.94044 sec, and warnIfPerfScore > 1.2, and perfScore=0.441104]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.48082 secs, and comparison 1.7515 sec, and warnIfPerfScore > 0.33, and perfScore=0.234132]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 10.7992 secs, and comparison 38.1748 sec, and warnIfPerfScore > 6, and perfScore=3.53495]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.69472 secs, and comparison 4.7651 sec, and warnIfPerfScore > 0.8, and perfScore=0.619269]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.74527 secs, and comparison 7.28657 sec, and warnIfPerfScore > 1.4, and perfScore=0.940778]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.75027 secs, and comparison 3.32912 sec, and warnIfPerfScore > 0.65, and perfScore=0.429549]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.56122 secs, and comparison 36.039 sec, and warnIfPerfScore > 4.4, and perfScore=4.20956]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.47585 secs, and comparison 3.30187 sec, and warnIfPerfScore > 0.6, and perfScore=0.441672]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.4661 secs, and comparison 3.26634 sec, and warnIfPerfScore > 0.6, and perfScore=0.43749]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.55387 secs, and comparison 3.32356 sec, and warnIfPerfScore > 0.6, and perfScore=0.439981]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.61638 secs, and comparison 4.91876 sec, and warnIfPerfScore > 1.3, and perfScore=0.645813]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.32325 secs, and comparison 8.30478 sec, and warnIfPerfScore > 1.3, and perfScore=0.997782]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 36.6413 secs, and comparison 5.11464 sec, and warnIfPerfScore > 0.3, and perfScore=0.139587]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.77211 secs, and comparison 9.32043 sec, and warnIfPerfScore > 1.5, and perfScore=1.61474]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.99041 secs, and comparison 2.67762 sec, and warnIfPerfScore > 0.55, and perfScore=0.446984]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.593155 sec, and warnIfPerfScore > 0.1, and perfScore=0.0395437]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.83921 sec, and warnIfPerfScore > 0.5, and perfScore=0.189281]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.13729 secs, and comparison 12.7993 sec, and warnIfPerfScore > 2, and perfScore=1.7933]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.01235 secs, and comparison 13.8851 sec, and warnIfPerfScore > 3.6, and perfScore=1.98009]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 10 seconds]]]

Succeeded
