Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov  4 2:58:38 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.6517 secs, and comparison 4.68953 sec, and warnIfPerfScore > 0.65, and perfScore=0.829754]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.6022 secs, and comparison 2.99483 sec, and warnIfPerfScore > 0.5, and perfScore=0.534581]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.51176 secs, and comparison 7.14273 sec, and warnIfPerfScore > 1.05, and perfScore=1.0969]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.10179 secs, and comparison 7.2729 sec, and warnIfPerfScore > 1.15, and perfScore=1.19193]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 3.68525 secs, and comparison 2.35 sec, and warnIfPerfScore > 0.48, and perfScore=0.637677]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 4.48777 secs, and comparison 2.97991 sec, and warnIfPerfScore > 0.57, and perfScore=0.664007]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.40259 secs, and comparison 16.9205 sec, and warnIfPerfScore > 2.9, and perfScore=4.97283]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.0372 secs, and comparison 17.8631 sec, and warnIfPerfScore > 2.9, and perfScore=4.42462]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.54573 secs, and comparison 55.8972 sec, and warnIfPerfScore > 24, and perfScore=10.0793]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.9217 secs, and comparison 10.0994 sec, and warnIfPerfScore > 1.7, and perfScore=2.05201]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.71475 secs, and comparison 6.62218 sec, and warnIfPerfScore > 1.5, and perfScore=0.986214]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.76289 secs, and comparison 12.1871 sec, and warnIfPerfScore > 2.1, and perfScore=4.411]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 4.27848 secs, and comparison 3.58219 sec, and warnIfPerfScore > 1.6, and perfScore=0.837259]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.44921 secs, and comparison 1.53294 sec, and warnIfPerfScore > 0.23, and perfScore=0.344541]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.19387 secs, and comparison 5.05888 sec, and warnIfPerfScore > 1.3, and perfScore=1.20626]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.09579 secs, and comparison 7.65635 sec, and warnIfPerfScore > 1.2, and perfScore=2.47315]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 19.7147 secs, and comparison 1.83218 sec, and warnIfPerfScore > 0.33, and perfScore=0.0929349]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.97814 secs, and comparison 42.0129 sec, and warnIfPerfScore > 6, and perfScore=14.1071]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.11971 secs, and comparison 7.29136 sec, and warnIfPerfScore > 0.8, and perfScore=2.33719]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.08479 secs, and comparison 8.46599 sec, and warnIfPerfScore > 1.4, and perfScore=2.74443]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.4453 secs, and comparison 3.72685 sec, and warnIfPerfScore > 0.65, and perfScore=0.191658]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.50325 secs, and comparison 37.9095 sec, and warnIfPerfScore > 4.4, and perfScore=8.41827]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.4602 secs, and comparison 3.75703 sec, and warnIfPerfScore > 0.6, and perfScore=0.279122]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.6732 secs, and comparison 3.76902 sec, and warnIfPerfScore > 0.6, and perfScore=0.27565]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.8148 secs, and comparison 3.79711 sec, and warnIfPerfScore > 0.6, and perfScore=0.274859]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.6689 secs, and comparison 4.42166 sec, and warnIfPerfScore > 1.3, and perfScore=0.323484]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 21.4339 secs, and comparison 10.1793 sec, and warnIfPerfScore > 1.3, and perfScore=0.474916]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 18.7056 secs, and comparison 7.23931 sec, and warnIfPerfScore > 0.3, and perfScore=0.387012]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.21951 secs, and comparison 13.942 sec, and warnIfPerfScore > 1.5, and perfScore=1.93116]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.31769 secs, and comparison 2.83702 sec, and warnIfPerfScore > 0.55, and perfScore=0.449059]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.865708 sec, and warnIfPerfScore > 0.1, and perfScore=0.0577139]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.42745 sec, and warnIfPerfScore > 0.5, and perfScore=0.228497]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 19 seconds]]]

Succeeded
