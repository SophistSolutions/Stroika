Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 22 17:52:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.72827 secs, and comparison 4.56473 sec, and warnIfPerfScore > 0.65, and perfScore=0.796878]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.71014 secs, and comparison 2.76386 sec, and warnIfPerfScore > 0.5, and perfScore=0.484027]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.1354 secs, and comparison 7.45321 sec, and warnIfPerfScore > 1.05, and perfScore=0.916146]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.75451 secs, and comparison 7.42185 sec, and warnIfPerfScore > 1.15, and perfScore=1.0988]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 32.6574 secs, and comparison 2.28009 sec, and warnIfPerfScore > 0.48, and perfScore=0.0698184]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 30.9281 secs, and comparison 2.94384 sec, and warnIfPerfScore > 0.57, and perfScore=0.0951833]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.55574 secs, and comparison 19.2805 sec, and warnIfPerfScore > 2.9, and perfScore=2.94101]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.94726 secs, and comparison 19.4356 sec, and warnIfPerfScore > 2.9, and perfScore=2.79759]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.93118 secs, and comparison 135.186 sec, and warnIfPerfScore > 24, and perfScore=22.7924]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.9968 secs, and comparison 10.4914 sec, and warnIfPerfScore > 1.7, and perfScore=1.7495]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.92048 secs, and comparison 5.65298 sec, and warnIfPerfScore > 1.5, and perfScore=0.954817]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.26649 secs, and comparison 12.6971 sec, and warnIfPerfScore > 2.1, and perfScore=2.41091]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.05355 secs, and comparison 4.73385 sec, and warnIfPerfScore > 1.6, and perfScore=0.67113]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 7.40914 secs, and comparison 0.705775 sec, and warnIfPerfScore > 0.23, and perfScore=0.0952574]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1981 secs, and comparison 12.5282 sec, and warnIfPerfScore > 1.3, and perfScore=1.02706]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.4788 secs, and comparison 5.2252 sec, and warnIfPerfScore > 1.2, and perfScore=0.616266]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.01019 secs, and comparison 1.88544 sec, and warnIfPerfScore > 0.33, and perfScore=0.23538]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 8.17327 secs, and comparison 40.9425 sec, and warnIfPerfScore > 6, and perfScore=5.00932]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.18868 secs, and comparison 5.05369 sec, and warnIfPerfScore > 0.8, and perfScore=0.617155]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.16828 secs, and comparison 7.66954 sec, and warnIfPerfScore > 1.4, and perfScore=0.938942]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.99223 secs, and comparison 3.63204 sec, and warnIfPerfScore > 0.65, and perfScore=0.454446]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.59511 secs, and comparison 38.1584 sec, and warnIfPerfScore > 4.4, and perfScore=4.43956]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.90585 secs, and comparison 3.49757 sec, and warnIfPerfScore > 0.6, and perfScore=0.442403]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.91028 secs, and comparison 3.51843 sec, and warnIfPerfScore > 0.6, and perfScore=0.444791]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.9093 secs, and comparison 3.49801 sec, and warnIfPerfScore > 0.6, and perfScore=0.442265]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.90288 secs, and comparison 5.08048 sec, and warnIfPerfScore > 1.3, and perfScore=0.642865]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.45178 secs, and comparison 8.23166 sec, and warnIfPerfScore > 1.3, and perfScore=0.973956]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 37.8579 secs, and comparison 5.53628 sec, and warnIfPerfScore > 0.3, and perfScore=0.146239]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.68474 secs, and comparison 9.58468 sec, and warnIfPerfScore > 1.5, and perfScore=1.68604]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.24559 secs, and comparison 2.99931 sec, and warnIfPerfScore > 0.55, and perfScore=0.480228]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.613857 sec, and warnIfPerfScore > 0.1, and perfScore=0.0409238]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.96676 sec, and warnIfPerfScore > 0.5, and perfScore=0.197784]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.58218 secs, and comparison 13.2029 sec, and warnIfPerfScore > 2, and perfScore=2.00585]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.3612 secs, and comparison 14.8048 sec, and warnIfPerfScore > 3.6, and perfScore=2.01119]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 20 seconds]]]

Succeeded
