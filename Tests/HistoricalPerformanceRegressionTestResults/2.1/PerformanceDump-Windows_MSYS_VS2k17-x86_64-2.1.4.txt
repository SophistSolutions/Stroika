Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 6:4:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 9.26095 secs, and comparison 6.06744 sec, and warnIfPerfScore > 0.65, and perfScore=0.655164]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.71353 secs, and comparison 3.15953 sec, and warnIfPerfScore > 0.5, and perfScore=0.325271]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 12.2467 secs, and comparison 11.2894 sec, and warnIfPerfScore > 1.05, and perfScore=0.921828]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.0053 secs, and comparison 10.8384 sec, and warnIfPerfScore > 1.15, and perfScore=1.08327]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.3839 secs, and comparison 3.3718 sec, and warnIfPerfScore > 0.48, and perfScore=0.251931]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.3062 secs, and comparison 3.87399 sec, and warnIfPerfScore > 0.57, and perfScore=0.314799]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.4121 secs, and comparison 30.5252 sec, and warnIfPerfScore > 2.9, and perfScore=2.67481]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.4938 secs, and comparison 30.3534 sec, and warnIfPerfScore > 2.9, and perfScore=2.64085]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 10.2954 secs, and comparison 163.677 sec, and warnIfPerfScore > 24, and perfScore=15.8981]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.8177 secs, and comparison 15.5617 sec, and warnIfPerfScore > 1.7, and perfScore=1.43854]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 11.4006 secs, and comparison 11.113 sec, and warnIfPerfScore > 1.5, and perfScore=0.974773]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 8.89502 secs, and comparison 18.4254 sec, and warnIfPerfScore > 2.1, and perfScore=2.07143]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.6869 secs, and comparison 7.50003 sec, and warnIfPerfScore > 1.6, and perfScore=0.641748]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.8899 secs, and comparison 1.49059 sec, and warnIfPerfScore > 0.23, and perfScore=0.11564]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.4567 secs, and comparison 14.7986 sec, and warnIfPerfScore > 1.3, and perfScore=1.02365]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.3949 secs, and comparison 9.30832 sec, and warnIfPerfScore > 1.2, and perfScore=0.816888]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15.0596 secs, and comparison 3.31551 sec, and warnIfPerfScore > 0.33, and perfScore=0.220159]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 11.3437 secs, and comparison 51.8751 sec, and warnIfPerfScore > 6, and perfScore=4.57302]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.2506 secs, and comparison 8.73686 sec, and warnIfPerfScore > 0.8, and perfScore=0.852328]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.5665 secs, and comparison 15.7587 sec, and warnIfPerfScore > 1.4, and perfScore=1.49139]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.5726 secs, and comparison 4.73663 sec, and warnIfPerfScore > 0.65, and perfScore=0.325036]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 11.3637 secs, and comparison 50.8928 sec, and warnIfPerfScore > 4.4, and perfScore=4.47855]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.4376 secs, and comparison 4.55307 sec, and warnIfPerfScore > 0.6, and perfScore=0.315362]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 14.1448 secs, and comparison 5.43305 sec, and warnIfPerfScore > 0.6, and perfScore=0.384103]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 14.7828 secs, and comparison 5.47003 sec, and warnIfPerfScore > 0.6, and perfScore=0.370028]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 14.5034 secs, and comparison 9.80399 sec, and warnIfPerfScore > 1.3, and perfScore=0.675977]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 15.8363 secs, and comparison 13.6718 sec, and warnIfPerfScore > 1.3, and perfScore=0.863321]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 65.3469 secs, and comparison 8.93635 sec, and warnIfPerfScore > 0.3, and perfScore=0.136752]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.6142 secs, and comparison 16.5912 sec, and warnIfPerfScore > 1.5, and perfScore=1.56311]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.698 secs, and comparison 5.54302 sec, and warnIfPerfScore > 0.55, and perfScore=0.331957]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.976558 sec, and warnIfPerfScore > 0.1, and perfScore=0.0651039]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.51162 sec, and warnIfPerfScore > 0.5, and perfScore=0.300775]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.4367 secs, and comparison 22.0376 sec, and warnIfPerfScore > 2, and perfScore=1.64011]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.2055 secs, and comparison 22.7807 sec, and warnIfPerfScore > 3.6, and perfScore=1.7251]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 29 seconds]]]

Succeeded
