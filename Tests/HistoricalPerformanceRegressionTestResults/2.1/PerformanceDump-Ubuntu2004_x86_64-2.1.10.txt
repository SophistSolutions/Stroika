Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 8:53:26 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.49699 secs, and comparison 4.86651 sec, and warnIfPerfScore > 0.65, and perfScore=0.749041]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.08048 secs, and comparison 3.4308 sec, and warnIfPerfScore > 0.5, and perfScore=0.564232]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.44759 secs, and comparison 7.62347 sec, and warnIfPerfScore > 1.05, and perfScore=1.18238]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.39833 secs, and comparison 7.61099 sec, and warnIfPerfScore > 1.15, and perfScore=1.18953]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 4.03821 secs, and comparison 2.43967 sec, and warnIfPerfScore > 0.48, and perfScore=0.604145]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 4.6301 secs, and comparison 2.97195 sec, and warnIfPerfScore > 0.57, and perfScore=0.641877]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.59693 secs, and comparison 17.5963 sec, and warnIfPerfScore > 2.9, and perfScore=4.89203]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 4.62829 secs, and comparison 18.0651 sec, and warnIfPerfScore > 2.9, and perfScore=3.9032]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.71788 secs, and comparison 58.6117 sec, and warnIfPerfScore > 24, and perfScore=10.2506]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.47842 secs, and comparison 10.3104 sec, and warnIfPerfScore > 1.7, and perfScore=1.882]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.49956 secs, and comparison 7.21101 sec, and warnIfPerfScore > 1.5, and perfScore=0.961524]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 3.02584 secs, and comparison 12.2034 sec, and warnIfPerfScore > 2.1, and perfScore=4.03305]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 4.59357 secs, and comparison 3.53584 sec, and warnIfPerfScore > 1.6, and perfScore=0.769737]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.68605 secs, and comparison 1.61887 sec, and warnIfPerfScore > 0.23, and perfScore=0.345465]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.12373 secs, and comparison 5.02474 sec, and warnIfPerfScore > 1.3, and perfScore=1.21849]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.05735 secs, and comparison 7.34823 sec, and warnIfPerfScore > 1.2, and perfScore=2.40346]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 20.3112 secs, and comparison 1.9065 sec, and warnIfPerfScore > 0.33, and perfScore=0.0938645]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.88401 secs, and comparison 44.1106 sec, and warnIfPerfScore > 6, and perfScore=15.2949]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.05935 secs, and comparison 6.8292 sec, and warnIfPerfScore > 0.8, and perfScore=2.23224]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.86092 secs, and comparison 8.99272 sec, and warnIfPerfScore > 1.4, and perfScore=3.14329]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 20.2432 secs, and comparison 4.1706 sec, and warnIfPerfScore > 0.65, and perfScore=0.206025]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 4.60068 secs, and comparison 39.9925 sec, and warnIfPerfScore > 4.4, and perfScore=8.69274]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.8922 secs, and comparison 3.89667 sec, and warnIfPerfScore > 0.6, and perfScore=0.280494]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.7493 secs, and comparison 3.75326 sec, and warnIfPerfScore > 0.6, and perfScore=0.25447]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.4266 secs, and comparison 3.76891 sec, and warnIfPerfScore > 0.6, and perfScore=0.261248]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.5308 secs, and comparison 4.64856 sec, and warnIfPerfScore > 1.3, and perfScore=0.31991]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 21.785 secs, and comparison 10.9103 sec, and warnIfPerfScore > 1.3, and perfScore=0.500819]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.272 secs, and comparison 7.33496 sec, and warnIfPerfScore > 0.3, and perfScore=0.380602]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.55241 secs, and comparison 14.5358 sec, and warnIfPerfScore > 1.5, and perfScore=1.92466]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.54797 secs, and comparison 3.09389 sec, and warnIfPerfScore > 0.55, and perfScore=0.472496]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.874539 sec, and warnIfPerfScore > 0.1, and perfScore=0.0583026]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.46334 sec, and warnIfPerfScore > 0.5, and perfScore=0.230889]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 46 seconds]]]

Succeeded
