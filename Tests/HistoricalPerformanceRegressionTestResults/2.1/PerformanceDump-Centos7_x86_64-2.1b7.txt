Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Dec  4 16:48:37 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.66347 secs, and comparison 5.17475 sec, and warnIfPerfScore > 0.62, and perfScore=0.776584]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.90165 secs, and comparison 3.62921 sec, and warnIfPerfScore > 0.5, and perfScore=0.525846]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.98907 secs, and comparison 8.22886 sec, and warnIfPerfScore > 1.05, and perfScore=0.91543]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.86812 secs, and comparison 4.55039 sec, and warnIfPerfScore > 0.48, and perfScore=1.58654]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.89621 secs, and comparison 4.96728 sec, and warnIfPerfScore > 0.57, and perfScore=1.71509]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.7113 secs, and comparison 27.9501 sec, and warnIfPerfScore > 2.9, and perfScore=2.3866]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 12.6593 secs, and comparison 64.9974 sec, and warnIfPerfScore > 2.9, and perfScore=5.13434]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 26.0903 secs, and comparison 289.431 sec, and warnIfPerfScore > 9.7, and perfScore=11.0934]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 23.6344 secs, and comparison 30.7039 sec, and warnIfPerfScore > 1.6, and perfScore=1.29912]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.9793 secs, and comparison 17.3804 sec, and warnIfPerfScore > 1.5, and perfScore=1.02362]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.3951 secs, and comparison 29.6981 sec, and warnIfPerfScore > 2.1, and perfScore=1.45614]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9799 secs, and comparison 13.2948 sec, and warnIfPerfScore > 1.3, and perfScore=1.10976]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 16.8311 secs, and comparison 8.83393 sec, and warnIfPerfScore > 0.23, and perfScore=0.524859]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 15.1376 secs, and comparison 14.2319 sec, and warnIfPerfScore > 1.3, and perfScore=0.940167]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.2818 secs, and comparison 22.231 sec, and warnIfPerfScore > 1.2, and perfScore=1.6738]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 12.6943 secs, and comparison 3.47163 sec, and warnIfPerfScore > 0.33, and perfScore=0.273479]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 14.167 secs, and comparison 91.954 sec, and warnIfPerfScore > 6, and perfScore=6.49074]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.6762 secs, and comparison 7.77709 sec, and warnIfPerfScore > 0.5, and perfScore=0.666065]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 14.1111 secs, and comparison 80.1856 sec, and warnIfPerfScore > 4.4, and perfScore=5.68243]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 12.7365 secs, and comparison 6.9953 sec, and warnIfPerfScore > 0.6, and perfScore=0.549234]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 26.6121 secs, and comparison 33.0864 sec, and warnIfPerfScore > 1.5, and perfScore=1.24329]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 18.2462 secs, and comparison 7.64133 sec, and warnIfPerfScore > 0.55, and perfScore=0.418789]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.50284 sec, and warnIfPerfScore > 0.25, and perfScore=0.166856]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15 secs, and comparison 6.6083 sec, and warnIfPerfScore > 0.5, and perfScore=0.440554]
	                 	Test_Optional_ is FASTER

[[[Tests took: 18 minutes]]]

Succeeded
