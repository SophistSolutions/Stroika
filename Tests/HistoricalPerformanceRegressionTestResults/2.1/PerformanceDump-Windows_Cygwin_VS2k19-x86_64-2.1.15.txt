Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 20:53:42 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 44.2503 secs, and comparison 14.4499 sec, and warnIfPerfScore > 0.65, and perfScore=0.326551]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 45.0208 secs, and comparison 13.9625 sec, and warnIfPerfScore > 0.5, and perfScore=0.310135]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 26.5777 secs, and comparison 21.5811 sec, and warnIfPerfScore > 1.05, and perfScore=0.811999]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 23.2321 secs, and comparison 21.703 sec, and warnIfPerfScore > 1.15, and perfScore=0.934183]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 21.425 secs, and comparison 3.32503 sec, and warnIfPerfScore > 0.48, and perfScore=0.155194]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.8309 secs, and comparison 4.11748 sec, and warnIfPerfScore > 0.57, and perfScore=0.188608]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.5931 secs, and comparison 35.6795 sec, and warnIfPerfScore > 2.9, and perfScore=1.73259]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 20.8191 secs, and comparison 36.9774 sec, and warnIfPerfScore > 2.9, and perfScore=1.77613]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 15.404 secs, and comparison 222.871 sec, and warnIfPerfScore > 24, and perfScore=14.4684]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 18.0617 secs, and comparison 15.1018 sec, and warnIfPerfScore > 1.7, and perfScore=0.836123]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 48.1197 secs, and comparison 48.8692 sec, and warnIfPerfScore > 1.5, and perfScore=1.01558]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.3492 secs, and comparison 19.9972 sec, and warnIfPerfScore > 2.1, and perfScore=1.08981]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 41.4585 secs, and comparison 9.14955 sec, and warnIfPerfScore > 1.6, and perfScore=0.220692]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 43.4241 secs, and comparison 2.24886 sec, and warnIfPerfScore > 0.23, and perfScore=0.0517884]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.1395 secs, and comparison 22.4304 sec, and warnIfPerfScore > 1.3, and perfScore=1.7071]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.3742 secs, and comparison 22.3175 sec, and warnIfPerfScore > 1.2, and perfScore=1.6687]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.7597 secs, and comparison 5.69136 sec, and warnIfPerfScore > 0.33, and perfScore=0.274155]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.7043 secs, and comparison 54.6039 sec, and warnIfPerfScore > 6, and perfScore=3.98445]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.7092 secs, and comparison 21.6026 sec, and warnIfPerfScore > 0.8, and perfScore=1.57577]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 13.0557 secs, and comparison 43.8602 sec, and warnIfPerfScore > 1.4, and perfScore=3.35947]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 20.3392 secs, and comparison 4.87046 sec, and warnIfPerfScore > 0.65, and perfScore=0.239462]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 23.8984 secs, and comparison 58.9942 sec, and warnIfPerfScore > 4.4, and perfScore=2.46855]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 20.6374 secs, and comparison 5.89167 sec, and warnIfPerfScore > 0.6, and perfScore=0.285484]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.6709 secs, and comparison 5.4907 sec, and warnIfPerfScore > 0.6, and perfScore=0.265625]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 21.5757 secs, and comparison 5.54195 sec, and warnIfPerfScore > 0.6, and perfScore=0.256861]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 20.4276 secs, and comparison 12.4924 sec, and warnIfPerfScore > 1.3, and perfScore=0.611545]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 28.053 secs, and comparison 20.7719 sec, and warnIfPerfScore > 1.3, and perfScore=0.740451]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 100.243 secs, and comparison 12.387 sec, and warnIfPerfScore > 0.3, and perfScore=0.12357]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.5838 secs, and comparison 23.1912 sec, and warnIfPerfScore > 1.5, and perfScore=1.24792]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.7832 secs, and comparison 5.12278 sec, and warnIfPerfScore > 0.55, and perfScore=0.324571]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.67899 sec, and warnIfPerfScore > 0.1, and perfScore=0.111933]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.71136 sec, and warnIfPerfScore > 0.5, and perfScore=0.314091]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.8871 secs, and comparison 20.0674 sec, and warnIfPerfScore > 2, and perfScore=1.06249]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.9971 secs, and comparison 28.871 sec, and warnIfPerfScore > 3.6, and perfScore=1.31249]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 4 seconds]]]

Succeeded
