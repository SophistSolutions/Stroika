Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb  1 1:54:13 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.35767 secs, and comparison 4.83838 sec, and warnIfPerfScore > 0.65, and perfScore=0.657596]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.68345 secs, and comparison 3.02845 sec, and warnIfPerfScore > 0.5, and perfScore=0.394152]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.88532 secs, and comparison 8.57616 sec, and warnIfPerfScore > 1.05, and perfScore=0.867566]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.74765 secs, and comparison 8.63982 sec, and warnIfPerfScore > 1.15, and perfScore=1.11515]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.9161 secs, and comparison 3.02073 sec, and warnIfPerfScore > 0.48, and perfScore=0.338795]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.83489 secs, and comparison 3.74118 sec, and warnIfPerfScore > 0.57, and perfScore=0.423456]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.12883 secs, and comparison 24.9063 sec, and warnIfPerfScore > 2.9, and perfScore=2.72831]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.97058 secs, and comparison 24.9877 sec, and warnIfPerfScore > 2.9, and perfScore=2.50614]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.84704 secs, and comparison 138.043 sec, and warnIfPerfScore > 24, and perfScore=17.5917]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.69918 secs, and comparison 12.3238 sec, and warnIfPerfScore > 1.7, and perfScore=1.60067]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.68132 secs, and comparison 8.8416 sec, and warnIfPerfScore > 1.5, and perfScore=1.01846]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.32678 secs, and comparison 14.7557 sec, and warnIfPerfScore > 2.1, and perfScore=2.01395]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.59559 secs, and comparison 5.65239 sec, and warnIfPerfScore > 1.6, and perfScore=0.589061]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 10.0257 secs, and comparison 0.9636 sec, and warnIfPerfScore > 0.23, and perfScore=0.0961125]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1601 secs, and comparison 11.658 sec, and warnIfPerfScore > 1.3, and perfScore=1.04461]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.27621 secs, and comparison 7.28272 sec, and warnIfPerfScore > 1.2, and perfScore=0.879958]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.6531 secs, and comparison 2.66883 sec, and warnIfPerfScore > 0.33, and perfScore=0.229024]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 7.92976 secs, and comparison 41.9953 sec, and warnIfPerfScore > 6, and perfScore=5.29591]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.01701 secs, and comparison 6.83559 sec, and warnIfPerfScore > 0.8, and perfScore=0.852635]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.03877 secs, and comparison 10.6853 sec, and warnIfPerfScore > 1.4, and perfScore=1.32923]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.6502 secs, and comparison 3.77606 sec, and warnIfPerfScore > 0.65, and perfScore=0.32412]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.71389 secs, and comparison 37.5764 sec, and warnIfPerfScore > 4.4, and perfScore=4.31224]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.2335 secs, and comparison 3.67984 sec, and warnIfPerfScore > 0.6, and perfScore=0.327578]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.2369 secs, and comparison 3.65481 sec, and warnIfPerfScore > 0.6, and perfScore=0.325251]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.4546 secs, and comparison 3.66417 sec, and warnIfPerfScore > 0.6, and perfScore=0.319886]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.2251 secs, and comparison 7.64249 sec, and warnIfPerfScore > 1.3, and perfScore=0.680837]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.8452 secs, and comparison 11.0867 sec, and warnIfPerfScore > 1.3, and perfScore=0.863099]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 51.883 secs, and comparison 9.13492 sec, and warnIfPerfScore > 0.3, and perfScore=0.176068]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.25498 secs, and comparison 12.8735 sec, and warnIfPerfScore > 1.5, and perfScore=1.55948]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.0258 secs, and comparison 3.7567 sec, and warnIfPerfScore > 0.55, and perfScore=0.374702]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 15 secs, and comparison 0.933439 sec, and warnIfPerfScore > 0.1, and perfScore=0.0622293]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.3674 sec, and warnIfPerfScore > 0.5, and perfScore=0.224493]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.3593 secs, and comparison 14.7503 sec, and warnIfPerfScore > 2, and perfScore=1.576]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.67699 secs, and comparison 17.212 sec, and warnIfPerfScore > 3.6, and perfScore=1.77865]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 43 seconds]]]

Succeeded
