Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 31 17:42:30 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.78931 secs, and comparison 5.06903 sec, and warnIfPerfScore > 0.65, and perfScore=0.517813]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.0037 secs, and comparison 3.36715 sec, and warnIfPerfScore > 0.5, and perfScore=0.336592]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.1574 secs, and comparison 9.38171 sec, and warnIfPerfScore > 1.05, and perfScore=0.840851]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.62494 secs, and comparison 9.39866 sec, and warnIfPerfScore > 1.15, and perfScore=1.08971]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.4992 secs, and comparison 3.2661 sec, and warnIfPerfScore > 0.48, and perfScore=0.311081]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.4516 secs, and comparison 3.7318 sec, and warnIfPerfScore > 0.57, and perfScore=0.357055]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.665 secs, and comparison 27.7123 sec, and warnIfPerfScore > 2.9, and perfScore=2.37567]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.1884 secs, and comparison 29.342 sec, and warnIfPerfScore > 2.9, and perfScore=2.40736]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 12.6442 secs, and comparison 181.196 sec, and warnIfPerfScore > 24, and perfScore=14.3304]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.81164 secs, and comparison 13.9959 sec, and warnIfPerfScore > 1.7, and perfScore=1.42646]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 11.7807 secs, and comparison 11.5683 sec, and warnIfPerfScore > 1.5, and perfScore=0.981968]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.46673 secs, and comparison 16.2882 sec, and warnIfPerfScore > 2.1, and perfScore=1.72057]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 12.4824 secs, and comparison 8.93967 sec, and warnIfPerfScore > 1.6, and perfScore=0.71618]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 12.9703 secs, and comparison 1.88756 sec, and warnIfPerfScore > 0.23, and perfScore=0.145529]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 20.3956 secs, and comparison 18.7498 sec, and warnIfPerfScore > 1.3, and perfScore=0.919308]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.3062 secs, and comparison 7.12172 sec, and warnIfPerfScore > 1.2, and perfScore=0.691012]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.074 secs, and comparison 2.42715 sec, and warnIfPerfScore > 0.33, and perfScore=0.240933]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.66711 secs, and comparison 42.8773 sec, and warnIfPerfScore > 6, and perfScore=4.43538]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.72118 secs, and comparison 6.61545 sec, and warnIfPerfScore > 0.8, and perfScore=0.68052]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.79417 secs, and comparison 13.3071 sec, and warnIfPerfScore > 1.4, and perfScore=1.35868]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.86969 secs, and comparison 4.05591 sec, and warnIfPerfScore > 0.65, and perfScore=0.410946]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.7278 secs, and comparison 39.5094 sec, and warnIfPerfScore > 4.4, and perfScore=3.68291]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.82701 secs, and comparison 4.03066 sec, and warnIfPerfScore > 0.6, and perfScore=0.410161]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.88382 secs, and comparison 4.02577 sec, and warnIfPerfScore > 0.6, and perfScore=0.407309]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.90194 secs, and comparison 4.09008 sec, and warnIfPerfScore > 0.6, and perfScore=0.413059]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.0297 secs, and comparison 7.21562 sec, and warnIfPerfScore > 1.3, and perfScore=0.719425]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3801 secs, and comparison 11.4157 sec, and warnIfPerfScore > 1.3, and perfScore=1.00313]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 61.8147 secs, and comparison 10.247 sec, and warnIfPerfScore > 0.3, and perfScore=0.165769]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.6618 secs, and comparison 18.3457 sec, and warnIfPerfScore > 1.5, and perfScore=1.4489]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.9065 secs, and comparison 4.34524 sec, and warnIfPerfScore > 0.55, and perfScore=0.312461]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 15 secs, and comparison 1.20318 sec, and warnIfPerfScore > 0.1, and perfScore=0.0802117]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.63017 sec, and warnIfPerfScore > 0.5, and perfScore=0.242011]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.0536 secs, and comparison 16.5998 sec, and warnIfPerfScore > 2, and perfScore=1.50175]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.1691 secs, and comparison 32.9191 sec, and warnIfPerfScore > 3.6, and perfScore=2.70513]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 22 seconds]]]

Succeeded
