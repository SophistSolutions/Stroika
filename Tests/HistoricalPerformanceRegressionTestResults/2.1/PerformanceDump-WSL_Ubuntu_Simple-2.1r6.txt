Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar 29 11:7:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.18792 secs, and comparison 5.65142 sec, and warnIfPerfScore > 0.65, and perfScore=0.9133]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.02574 secs, and comparison 3.1518 sec, and warnIfPerfScore > 0.5, and perfScore=0.523057]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.68051 secs, and comparison 8.41317 sec, and warnIfPerfScore > 1.05, and perfScore=1.09539]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.7066 secs, and comparison 8.24525 sec, and warnIfPerfScore > 1.15, and perfScore=1.22942]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 3.61252 secs, and comparison 2.59913 sec, and warnIfPerfScore > 0.48, and perfScore=0.719479]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 4.42245 secs, and comparison 3.45443 sec, and warnIfPerfScore > 0.57, and perfScore=0.781113]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.48935 secs, and comparison 18.9106 sec, and warnIfPerfScore > 2.9, and perfScore=5.41954]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 4.05909 secs, and comparison 18.9085 sec, and warnIfPerfScore > 2.9, and perfScore=4.65832]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.29353 secs, and comparison 55.545 sec, and warnIfPerfScore > 24, and perfScore=10.493]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.81011 secs, and comparison 10.8184 sec, and warnIfPerfScore > 1.7, and perfScore=2.24909]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.72005 secs, and comparison 5.35727 sec, and warnIfPerfScore > 1.5, and perfScore=0.936578]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 2.65189 secs, and comparison 13.029 sec, and warnIfPerfScore > 2.1, and perfScore=4.91311]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.14607 secs, and comparison 3.79596 sec, and warnIfPerfScore > 1.6, and perfScore=0.915558]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.81719 secs, and comparison 1.65891 sec, and warnIfPerfScore > 0.23, and perfScore=0.344374]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.05713 secs, and comparison 4.59287 sec, and warnIfPerfScore > 1.3, and perfScore=1.13205]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.45738 secs, and comparison 6.97361 sec, and warnIfPerfScore > 1.2, and perfScore=2.01702]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 14.0488 secs, and comparison 1.69513 sec, and warnIfPerfScore > 0.33, and perfScore=0.12066]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 3.28367 secs, and comparison 53.0199 sec, and warnIfPerfScore > 6, and perfScore=16.1465]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.36717 secs, and comparison 6.83059 sec, and warnIfPerfScore > 0.8, and perfScore=2.02858]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.08234 secs, and comparison 8.351 sec, and warnIfPerfScore > 1.4, and perfScore=2.70931]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.1067 secs, and comparison 4.65447 sec, and warnIfPerfScore > 0.65, and perfScore=0.308106]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.613 secs, and comparison 49.5059 sec, and warnIfPerfScore > 4.4, and perfScore=10.7318]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.3196 secs, and comparison 4.51748 sec, and warnIfPerfScore > 0.6, and perfScore=0.399084]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.1542 secs, and comparison 4.46563 sec, and warnIfPerfScore > 0.6, and perfScore=0.400354]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.2692 secs, and comparison 4.54509 sec, and warnIfPerfScore > 0.6, and perfScore=0.403318]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.8046 secs, and comparison 4.59258 sec, and warnIfPerfScore > 1.3, and perfScore=0.425059]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 17.6192 secs, and comparison 10.4132 sec, and warnIfPerfScore > 1.3, and perfScore=0.591012]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 17.7076 secs, and comparison 7.18072 sec, and warnIfPerfScore > 0.3, and perfScore=0.405516]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.43187 secs, and comparison 14.5453 sec, and warnIfPerfScore > 1.5, and perfScore=1.95715]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.21364 secs, and comparison 2.78098 sec, and warnIfPerfScore > 0.55, and perfScore=0.385517]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.848325 sec, and warnIfPerfScore > 0.1, and perfScore=0.056555]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.76599 sec, and warnIfPerfScore > 0.5, and perfScore=0.251066]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 28 seconds]]]

Succeeded
