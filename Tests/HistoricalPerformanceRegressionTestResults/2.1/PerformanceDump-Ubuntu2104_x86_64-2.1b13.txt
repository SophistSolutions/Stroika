Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Aug 13 8:15:52 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.10673 secs, and comparison 4.59528 sec, and warnIfPerfScore > 0.62, and perfScore=0.752494]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.16853 secs, and comparison 2.94091 sec, and warnIfPerfScore > 0.5, and perfScore=0.476761]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.36387 secs, and comparison 6.59349 sec, and warnIfPerfScore > 1.05, and perfScore=1.03608]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.21951 secs, and comparison 3.78043 sec, and warnIfPerfScore > 0.48, and perfScore=0.89594]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.86879 secs, and comparison 4.26677 sec, and warnIfPerfScore > 0.57, and perfScore=0.87635]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.56803 secs, and comparison 19.2526 sec, and warnIfPerfScore > 2.9, and perfScore=5.39584]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 4.06854 secs, and comparison 20.724 sec, and warnIfPerfScore > 2.9, and perfScore=5.09373]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 5.25154 secs, and comparison 66.3434 sec, and warnIfPerfScore > 9.7, and perfScore=12.6331]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.45122 secs, and comparison 10.5848 sec, and warnIfPerfScore > 1.6, and perfScore=1.94174]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.78875 secs, and comparison 5.51489 sec, and warnIfPerfScore > 1.5, and perfScore=0.952692]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 3.00827 secs, and comparison 10.7654 sec, and warnIfPerfScore > 2.1, and perfScore=3.5786]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 4.032 secs, and comparison 3.90943 sec, and warnIfPerfScore > 1.3, and perfScore=0.969601]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.15455 secs, and comparison 1.48359 sec, and warnIfPerfScore > 0.23, and perfScore=0.3571]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.07345 secs, and comparison 4.80652 sec, and warnIfPerfScore > 1.3, and perfScore=1.17996]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.20916 secs, and comparison 7.39261 sec, and warnIfPerfScore > 1.2, and perfScore=2.3036]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 16.0488 secs, and comparison 1.70289 sec, and warnIfPerfScore > 0.33, and perfScore=0.106107]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.02855 secs, and comparison 40.9146 sec, and warnIfPerfScore > 6, and perfScore=13.5096]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.6686 secs, and comparison 3.76752 sec, and warnIfPerfScore > 0.5, and perfScore=0.353139]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 4.96182 secs, and comparison 37.0245 sec, and warnIfPerfScore > 4.4, and perfScore=7.46188]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.9041 secs, and comparison 3.85864 sec, and warnIfPerfScore > 0.6, and perfScore=0.277519]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.22203 secs, and comparison 13.4345 sec, and warnIfPerfScore > 1.5, and perfScore=1.86021]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.18411 secs, and comparison 2.17422 sec, and warnIfPerfScore > 0.55, and perfScore=0.302643]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.074
	DETAILS:         	[baseline test 15 secs, and comparison 1.11612 sec, and warnIfPerfScore > 0.25, and perfScore=0.0744083]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.50254 sec, and warnIfPerfScore > 0.5, and perfScore=0.233503]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 54 seconds]]]

Succeeded
