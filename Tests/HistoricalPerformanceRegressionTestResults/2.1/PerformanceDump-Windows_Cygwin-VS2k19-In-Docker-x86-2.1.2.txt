Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 22:41:18 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.41293 secs, and comparison 4.76463 sec, and warnIfPerfScore > 0.65, and perfScore=0.566346]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.62195 secs, and comparison 3.1648 sec, and warnIfPerfScore > 0.5, and perfScore=0.367064]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.2132 secs, and comparison 8.75746 sec, and warnIfPerfScore > 1.05, and perfScore=0.857468]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.04826 secs, and comparison 8.60716 sec, and warnIfPerfScore > 1.15, and perfScore=1.06944]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.79617 secs, and comparison 2.56136 sec, and warnIfPerfScore > 0.48, and perfScore=0.261465]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.86887 secs, and comparison 2.90822 sec, and warnIfPerfScore > 0.57, and perfScore=0.294686]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 10.9334 secs, and comparison 24.2062 sec, and warnIfPerfScore > 2.9, and perfScore=2.21396]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 10.7562 secs, and comparison 24.5005 sec, and warnIfPerfScore > 2.9, and perfScore=2.2778]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 9.78498 secs, and comparison 171.765 sec, and warnIfPerfScore > 24, and perfScore=17.5539]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.94563 secs, and comparison 12.1037 sec, and warnIfPerfScore > 1.7, and perfScore=1.35303]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.85257 secs, and comparison 9.6322 sec, and warnIfPerfScore > 1.5, and perfScore=0.977633]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.12397 secs, and comparison 14.0973 sec, and warnIfPerfScore > 2.1, and perfScore=1.54509]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.5708 secs, and comparison 8.92818 sec, and warnIfPerfScore > 1.6, and perfScore=0.844605]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.9976 secs, and comparison 1.37715 sec, and warnIfPerfScore > 0.23, and perfScore=0.125223]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.4706 secs, and comparison 14.2077 sec, and warnIfPerfScore > 1.3, and perfScore=1.05472]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.2052 secs, and comparison 6.40939 sec, and warnIfPerfScore > 1.2, and perfScore=0.572001]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.15723 secs, and comparison 1.77452 sec, and warnIfPerfScore > 0.33, and perfScore=0.247934]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.8227 secs, and comparison 42.684 sec, and warnIfPerfScore > 6, and perfScore=3.94395]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 10.7569 secs, and comparison 6.53892 sec, and warnIfPerfScore > 0.8, and perfScore=0.607883]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.7841 secs, and comparison 11.8859 sec, and warnIfPerfScore > 1.4, and perfScore=1.10216]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.45972 secs, and comparison 3.87258 sec, and warnIfPerfScore > 0.65, and perfScore=0.519132]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.3922 secs, and comparison 40.0941 sec, and warnIfPerfScore > 4.4, and perfScore=3.51944]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.67174 secs, and comparison 3.79646 sec, and warnIfPerfScore > 0.6, and perfScore=0.494862]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.53818 secs, and comparison 3.74657 sec, and warnIfPerfScore > 0.6, and perfScore=0.497013]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 7.36429 secs, and comparison 3.95497 sec, and warnIfPerfScore > 0.6, and perfScore=0.537047]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.60051 secs, and comparison 6.10297 sec, and warnIfPerfScore > 1.3, and perfScore=0.802968]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.66285 secs, and comparison 9.61036 sec, and warnIfPerfScore > 1.3, and perfScore=1.10938]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 55.0139 secs, and comparison 6.75213 sec, and warnIfPerfScore > 0.3, and perfScore=0.122735]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.5372 secs, and comparison 14.9121 sec, and warnIfPerfScore > 1.5, and perfScore=1.41518]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.37058 secs, and comparison 3.5107 sec, and warnIfPerfScore > 0.55, and perfScore=0.419409]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.05585 sec, and warnIfPerfScore > 0.1, and perfScore=0.0703903]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.18778 sec, and warnIfPerfScore > 0.5, and perfScore=0.212519]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.77494 secs, and comparison 14.5338 sec, and warnIfPerfScore > 2, and perfScore=1.48684]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.6222 secs, and comparison 32.1397 sec, and warnIfPerfScore > 3.6, and perfScore=3.02571]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 38 seconds]]]

Succeeded
