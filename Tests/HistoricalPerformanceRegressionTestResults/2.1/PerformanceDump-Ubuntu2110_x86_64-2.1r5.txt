Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 10 8:27:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 2.99486 secs, and comparison 1.3036 sec, and warnIfPerfScore > 0.65, and perfScore=0.435278]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.14483 secs, and comparison 2.94803 sec, and warnIfPerfScore > 0.5, and perfScore=0.93742]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.49001 secs, and comparison 6.69444 sec, and warnIfPerfScore > 1.05, and perfScore=2.68852]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.06778 secs, and comparison 6.60549 sec, and warnIfPerfScore > 1.15, and perfScore=3.19449]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.04542 secs, and comparison 1.015 sec, and warnIfPerfScore > 0.48, and perfScore=0.250901]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.78178 secs, and comparison 1.16726 sec, and warnIfPerfScore > 0.57, and perfScore=0.244106]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.62206 secs, and comparison 11.793 sec, and warnIfPerfScore > 2.9, and perfScore=3.25589]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.13209 secs, and comparison 12.3262 sec, and warnIfPerfScore > 2.9, and perfScore=2.98304]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 5.41132 secs, and comparison 42.312 sec, and warnIfPerfScore > 24, and perfScore=7.81915]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.48941 secs, and comparison 7.39045 sec, and warnIfPerfScore > 1.7, and perfScore=1.34631]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.7341 secs, and comparison 5.37602 sec, and warnIfPerfScore > 1.5, and perfScore=0.937552]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.93843 secs, and comparison 9.10188 sec, and warnIfPerfScore > 2.1, and perfScore=3.09753]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.96986 secs, and comparison 3.66383 sec, and warnIfPerfScore > 1.6, and perfScore=0.922913]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.12865 secs, and comparison 1.35199 sec, and warnIfPerfScore > 0.23, and perfScore=0.327465]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.69359 secs, and comparison 4.17501 sec, and warnIfPerfScore > 1.3, and perfScore=1.13034]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.43241 secs, and comparison 6.89115 sec, and warnIfPerfScore > 1.2, and perfScore=2.00767]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 16.0093 secs, and comparison 1.75828 sec, and warnIfPerfScore > 0.33, and perfScore=0.109829]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.35999 secs, and comparison 40.7433 sec, and warnIfPerfScore > 6, and perfScore=12.126]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 3.37823 secs, and comparison 6.24713 sec, and warnIfPerfScore > 0.8, and perfScore=1.84923]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.39946 secs, and comparison 8.08198 sec, and warnIfPerfScore > 1.4, and perfScore=2.37743]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.8976 secs, and comparison 3.6747 sec, and warnIfPerfScore > 0.65, and perfScore=0.231148]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.40583 secs, and comparison 37.575 sec, and warnIfPerfScore > 4.4, and perfScore=8.52848]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.6278 secs, and comparison 3.69606 sec, and warnIfPerfScore > 0.6, and perfScore=0.317863]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7845 secs, and comparison 3.67359 sec, and warnIfPerfScore > 0.6, and perfScore=0.31173]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7714 secs, and comparison 3.63632 sec, and warnIfPerfScore > 0.6, and perfScore=0.308912]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.7261 secs, and comparison 4.18531 sec, and warnIfPerfScore > 1.3, and perfScore=0.356923]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 18.8023 secs, and comparison 9.25878 sec, and warnIfPerfScore > 1.3, and perfScore=0.492429]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 20.1619 secs, and comparison 5.6073 sec, and warnIfPerfScore > 0.3, and perfScore=0.278114]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.35362 secs, and comparison 13.5316 sec, and warnIfPerfScore > 1.5, and perfScore=1.84013]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.48597 secs, and comparison 1.99939 sec, and warnIfPerfScore > 0.55, and perfScore=0.308264]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.844958 sec, and warnIfPerfScore > 0.1, and perfScore=0.0563306]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42259 sec, and warnIfPerfScore > 0.5, and perfScore=0.0948395]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 59 seconds]]]

Succeeded
