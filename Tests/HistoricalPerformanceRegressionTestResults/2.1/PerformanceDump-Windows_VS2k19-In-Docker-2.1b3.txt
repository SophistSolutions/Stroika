Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Aug  9 19:42:44 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 12.0442 secs, and comparison 5.77332 sec, and warnIfPerfScore > 0.62, and perfScore=0.479344]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.1358 secs, and comparison 4.07488 sec, and warnIfPerfScore > 0.5, and perfScore=0.335773]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.7152 secs, and comparison 9.96938 sec, and warnIfPerfScore > 1.05, and perfScore=0.850977]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.9037 secs, and comparison 4.54582 sec, and warnIfPerfScore > 0.48, and perfScore=0.416906]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.0003 secs, and comparison 5.06241 sec, and warnIfPerfScore > 0.57, and perfScore=0.460205]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.7174 secs, and comparison 29.2816 sec, and warnIfPerfScore > 2.9, and perfScore=2.30248]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.6083 secs, and comparison 32.3291 sec, and warnIfPerfScore > 2.9, and perfScore=2.3757]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 12.6793 secs, and comparison 104.932 sec, and warnIfPerfScore > 9.7, and perfScore=8.27581]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.8739 secs, and comparison 13.7851 sec, and warnIfPerfScore > 1.6, and perfScore=1.26773]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.6992 secs, and comparison 14.8918 sec, and warnIfPerfScore > 1.5, and perfScore=1.0131]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.35292 secs, and comparison 14.1081 sec, and warnIfPerfScore > 2.1, and perfScore=1.50841]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 14.3127 secs, and comparison 10.189 sec, and warnIfPerfScore > 1.3, and perfScore=0.711883]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.8486 secs, and comparison 3.27256 sec, and warnIfPerfScore > 0.23, and perfScore=0.220396]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 16.284 secs, and comparison 14.9279 sec, and warnIfPerfScore > 1.3, and perfScore=0.916727]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 10.8719 secs, and comparison 8.38507 sec, and warnIfPerfScore > 1.2, and perfScore=0.771264]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.7279 secs, and comparison 2.26634 sec, and warnIfPerfScore > 0.33, and perfScore=0.211257]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 10.5467 secs, and comparison 50.9874 sec, and warnIfPerfScore > 6, and perfScore=4.83446]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.8259 secs, and comparison 4.69888 sec, and warnIfPerfScore > 0.5, and perfScore=0.434041]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.85 secs, and comparison 44.7293 sec, and warnIfPerfScore > 4.4, and perfScore=3.77461]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.7235 secs, and comparison 5.16012 sec, and warnIfPerfScore > 0.6, and perfScore=0.481198]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.5629 secs, and comparison 22.8144 sec, and warnIfPerfScore > 1.5, and perfScore=1.22904]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.1223 secs, and comparison 4.62213 sec, and warnIfPerfScore > 0.55, and perfScore=0.415575]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.6297 sec, and warnIfPerfScore > 0.25, and perfScore=0.108647]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.2225 sec, and warnIfPerfScore > 0.5, and perfScore=0.2815]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.0621 secs, and comparison 20.7431 sec, and warnIfPerfScore > 2, and perfScore=1.71969]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.5009 secs, and comparison 35.7473 sec, and warnIfPerfScore > 3.1, and perfScore=2.85958]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 53 seconds]]]

Succeeded
