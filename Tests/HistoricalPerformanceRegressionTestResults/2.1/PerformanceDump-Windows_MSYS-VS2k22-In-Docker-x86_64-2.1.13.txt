Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 20 2:4:9 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.41998 secs, and comparison 4.22987 sec, and warnIfPerfScore > 0.65, and perfScore=0.780422]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.52834 secs, and comparison 2.57426 sec, and warnIfPerfScore > 0.5, and perfScore=0.465647]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.56237 secs, and comparison 7.17224 sec, and warnIfPerfScore > 1.05, and perfScore=0.948412]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.27183 secs, and comparison 7.10186 sec, and warnIfPerfScore > 1.15, and perfScore=1.13234]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.43627 secs, and comparison 2.11669 sec, and warnIfPerfScore > 0.48, and perfScore=0.224314]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.21586 secs, and comparison 2.65328 sec, and warnIfPerfScore > 0.57, and perfScore=0.287904]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 36.2455 secs, and comparison 18.1216 sec, and warnIfPerfScore > 2.9, and perfScore=0.499969]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 40.1612 secs, and comparison 18.7202 sec, and warnIfPerfScore > 2.9, and perfScore=0.466127]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 15.4764 secs, and comparison 132.71 sec, and warnIfPerfScore > 24, and perfScore=8.57502]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 51.2049 secs, and comparison 9.63498 sec, and warnIfPerfScore > 1.7, and perfScore=0.188165]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.45809 secs, and comparison 5.20167 sec, and warnIfPerfScore > 1.5, and perfScore=0.95302]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 59.3013 secs, and comparison 11.4964 sec, and warnIfPerfScore > 2.1, and perfScore=0.193865]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.47261 secs, and comparison 3.76034 sec, and warnIfPerfScore > 1.6, and perfScore=0.580962]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 6.90752 secs, and comparison 0.654917 sec, and warnIfPerfScore > 0.23, and perfScore=0.0948121]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3603 secs, and comparison 11.882 sec, and warnIfPerfScore > 1.3, and perfScore=1.04593]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.9857 secs, and comparison 5.18182 sec, and warnIfPerfScore > 1.2, and perfScore=0.471687]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.93949 secs, and comparison 1.87068 sec, and warnIfPerfScore > 0.33, and perfScore=0.235617]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 10.593 secs, and comparison 37.5647 sec, and warnIfPerfScore > 6, and perfScore=3.54618]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.569 secs, and comparison 4.8735 sec, and warnIfPerfScore > 0.8, and perfScore=0.461112]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.5385 secs, and comparison 6.80601 sec, and warnIfPerfScore > 1.4, and perfScore=0.645821]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.88921 secs, and comparison 3.33714 sec, and warnIfPerfScore > 0.65, and perfScore=0.423001]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.9799 secs, and comparison 37.2178 sec, and warnIfPerfScore > 4.4, and perfScore=3.38965]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.85057 secs, and comparison 3.25177 sec, and warnIfPerfScore > 0.6, and perfScore=0.414208]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.88497 secs, and comparison 3.23579 sec, and warnIfPerfScore > 0.6, and perfScore=0.410375]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.84059 secs, and comparison 3.27424 sec, and warnIfPerfScore > 0.6, and perfScore=0.417601]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.83143 secs, and comparison 5.25687 sec, and warnIfPerfScore > 1.3, and perfScore=0.671253]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.37394 secs, and comparison 8.09332 sec, and warnIfPerfScore > 1.3, and perfScore=0.966489]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 36.3449 secs, and comparison 4.76037 sec, and warnIfPerfScore > 0.3, and perfScore=0.130978]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.37773 secs, and comparison 9.03001 sec, and warnIfPerfScore > 1.5, and perfScore=1.67915]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.08093 secs, and comparison 2.67193 sec, and warnIfPerfScore > 0.55, and perfScore=0.439395]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.604786 sec, and warnIfPerfScore > 0.1, and perfScore=0.0403191]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.5407 sec, and warnIfPerfScore > 0.5, and perfScore=0.16938]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.17077 secs, and comparison 12.3678 sec, and warnIfPerfScore > 2, and perfScore=2.00425]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 7.61608 secs, and comparison 78.3101 sec, and warnIfPerfScore > 3.6, and perfScore=10.2822]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 16 seconds]]]

Succeeded
