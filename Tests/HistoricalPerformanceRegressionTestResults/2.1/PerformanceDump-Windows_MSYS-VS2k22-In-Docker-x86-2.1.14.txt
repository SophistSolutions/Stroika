Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Sep  6 :22:23 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.944 secs, and comparison 4.05542 sec, and warnIfPerfScore > 0.65, and perfScore=0.584017]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.09659 secs, and comparison 2.61469 sec, and warnIfPerfScore > 0.5, and perfScore=0.368443]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.28841 secs, and comparison 7.17675 sec, and warnIfPerfScore > 1.05, and perfScore=0.865878]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.53643 secs, and comparison 7.1817 sec, and warnIfPerfScore > 1.15, and perfScore=1.09872]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.90805 secs, and comparison 2.08747 sec, and warnIfPerfScore > 0.48, and perfScore=0.263967]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.69238 secs, and comparison 2.50171 sec, and warnIfPerfScore > 0.57, and perfScore=0.325219]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.01594 secs, and comparison 19.6214 sec, and warnIfPerfScore > 2.9, and perfScore=2.4478]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.29905 secs, and comparison 20.509 sec, and warnIfPerfScore > 2.9, and perfScore=2.47125]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.78449 secs, and comparison 141.101 sec, and warnIfPerfScore > 24, and perfScore=18.126]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.28862 secs, and comparison 10.0168 sec, and warnIfPerfScore > 1.7, and perfScore=1.37431]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.88437 secs, and comparison 7.66237 sec, and warnIfPerfScore > 1.5, and perfScore=0.971842]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.30395 secs, and comparison 11.6336 sec, and warnIfPerfScore > 2.1, and perfScore=1.84544]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.8198 secs, and comparison 6.55693 sec, and warnIfPerfScore > 1.6, and perfScore=0.743434]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.18913 secs, and comparison 1.26615 sec, and warnIfPerfScore > 0.23, and perfScore=0.137788]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.6238 secs, and comparison 12.6348 sec, and warnIfPerfScore > 1.3, and perfScore=1.00087]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 9.56476 secs, and comparison 5.50211 sec, and warnIfPerfScore > 1.2, and perfScore=0.575248]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.6586 secs, and comparison 1.46584 sec, and warnIfPerfScore > 0.33, and perfScore=0.259046]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.21695 secs, and comparison 37.276 sec, and warnIfPerfScore > 6, and perfScore=4.04428]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.23464 secs, and comparison 5.30016 sec, and warnIfPerfScore > 0.8, and perfScore=0.573943]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.2093 secs, and comparison 9.21682 sec, and warnIfPerfScore > 1.4, and perfScore=1.00082]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.73101 secs, and comparison 3.24035 sec, and warnIfPerfScore > 0.65, and perfScore=0.565406]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.61133 secs, and comparison 34.909 sec, and warnIfPerfScore > 4.4, and perfScore=3.63207]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.85519 secs, and comparison 3.22703 sec, and warnIfPerfScore > 0.6, and perfScore=0.551141]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.88265 secs, and comparison 3.22014 sec, and warnIfPerfScore > 0.6, and perfScore=0.547396]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.91489 secs, and comparison 3.23225 sec, and warnIfPerfScore > 0.6, and perfScore=0.54646]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.94237 secs, and comparison 4.64687 sec, and warnIfPerfScore > 1.3, and perfScore=0.781989]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.50467 secs, and comparison 8.30173 sec, and warnIfPerfScore > 1.3, and perfScore=1.27627]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.2979 secs, and comparison 5.69573 sec, and warnIfPerfScore > 0.3, and perfScore=0.125739]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.8178 secs, and comparison 11.5951 sec, and warnIfPerfScore > 1.5, and perfScore=1.48316]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.03359 secs, and comparison 2.82851 sec, and warnIfPerfScore > 0.55, and perfScore=0.402144]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.764227 sec, and warnIfPerfScore > 0.1, and perfScore=0.0509485]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.54356 sec, and warnIfPerfScore > 0.5, and perfScore=0.16957]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.05822 secs, and comparison 13.2336 sec, and warnIfPerfScore > 2, and perfScore=1.64225]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.1971 secs, and comparison 28.0934 sec, and warnIfPerfScore > 3.6, and perfScore=3.05459]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 8 seconds]]]

Succeeded
