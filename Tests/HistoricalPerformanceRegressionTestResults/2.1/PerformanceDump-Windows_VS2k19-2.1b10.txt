Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 21 14:55:24 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.1249 secs, and comparison 5.18644 sec, and warnIfPerfScore > 0.62, and perfScore=0.512249]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.018 secs, and comparison 3.40832 sec, and warnIfPerfScore > 0.5, and perfScore=0.309343]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.1567 secs, and comparison 9.29875 sec, and warnIfPerfScore > 1.05, and perfScore=0.833469]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.4781 secs, and comparison 4.391 sec, and warnIfPerfScore > 0.48, and perfScore=0.382554]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.2951 secs, and comparison 4.50026 sec, and warnIfPerfScore > 0.57, and perfScore=0.398424]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.82 secs, and comparison 26.8481 sec, and warnIfPerfScore > 2.9, and perfScore=2.09423]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.5527 secs, and comparison 29.0681 sec, and warnIfPerfScore > 2.9, and perfScore=2.31568]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 12.0275 secs, and comparison 94.3066 sec, and warnIfPerfScore > 9.7, and perfScore=7.84091]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.0112 secs, and comparison 12.3256 sec, and warnIfPerfScore > 1.6, and perfScore=1.23119]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.2555 secs, and comparison 13.8266 sec, and warnIfPerfScore > 1.5, and perfScore=0.969913]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.40825 secs, and comparison 12.2717 sec, and warnIfPerfScore > 2.1, and perfScore=1.30435]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 12.7491 secs, and comparison 9.83315 sec, and warnIfPerfScore > 1.3, and perfScore=0.771282]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 13.4605 secs, and comparison 2.61504 sec, and warnIfPerfScore > 0.23, and perfScore=0.194275]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9757 secs, and comparison 13.4564 sec, and warnIfPerfScore > 1.3, and perfScore=1.03705]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.2328 secs, and comparison 7.62816 sec, and warnIfPerfScore > 1.2, and perfScore=0.745461]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.82684 secs, and comparison 1.96216 sec, and warnIfPerfScore > 0.33, and perfScore=0.199674]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.8495 secs, and comparison 45.671 sec, and warnIfPerfScore > 6, and perfScore=4.63688]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.37839 secs, and comparison 4.22625 sec, and warnIfPerfScore > 0.5, and perfScore=0.450637]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.9198 secs, and comparison 40.6122 sec, and warnIfPerfScore > 4.4, and perfScore=3.71914]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.57639 secs, and comparison 4.53502 sec, and warnIfPerfScore > 0.6, and perfScore=0.473563]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.0875 secs, and comparison 15.9541 sec, and warnIfPerfScore > 1.5, and perfScore=1.21903]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14 secs, and comparison 4.49135 sec, and warnIfPerfScore > 0.55, and perfScore=0.320812]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15 secs, and comparison 1.46758 sec, and warnIfPerfScore > 0.25, and perfScore=0.0978385]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.75319 sec, and warnIfPerfScore > 0.5, and perfScore=0.250213]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.0693 secs, and comparison 16.7585 sec, and warnIfPerfScore > 2, and perfScore=1.38853]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.3503 secs, and comparison 33.0367 sec, and warnIfPerfScore > 3.1, and perfScore=2.67498]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 41 seconds]]]

Succeeded
