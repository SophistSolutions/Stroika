Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 16:53:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.47194 secs, and comparison 4.65593 sec, and warnIfPerfScore > 0.65, and perfScore=0.623122]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.80659 secs, and comparison 2.79764 sec, and warnIfPerfScore > 0.5, and perfScore=0.358369]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.77344 secs, and comparison 8.53916 sec, and warnIfPerfScore > 1.05, and perfScore=0.873711]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.56699 secs, and comparison 8.54424 sec, and warnIfPerfScore > 1.15, and perfScore=1.12915]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.90792 secs, and comparison 2.84366 sec, and warnIfPerfScore > 0.48, and perfScore=0.319228]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.69962 secs, and comparison 3.41325 sec, and warnIfPerfScore > 0.57, and perfScore=0.392345]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.8555 secs, and comparison 23.2186 sec, and warnIfPerfScore > 2.9, and perfScore=2.62194]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.24551 secs, and comparison 24.9937 sec, and warnIfPerfScore > 2.9, and perfScore=2.70334]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.54609 secs, and comparison 145.523 sec, and warnIfPerfScore > 24, and perfScore=19.2846]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.43823 secs, and comparison 11.8142 sec, and warnIfPerfScore > 1.7, and perfScore=1.40008]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.80097 secs, and comparison 8.28702 sec, and warnIfPerfScore > 1.5, and perfScore=0.941603]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.43397 secs, and comparison 15.0806 sec, and warnIfPerfScore > 2.1, and perfScore=2.02861]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.37746 secs, and comparison 6.32565 sec, and warnIfPerfScore > 1.6, and perfScore=0.674559]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.80055 secs, and comparison 1.25118 sec, and warnIfPerfScore > 0.23, and perfScore=0.127665]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.9565 secs, and comparison 11.3916 sec, and warnIfPerfScore > 1.3, and perfScore=1.03971]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.8558 secs, and comparison 6.47689 sec, and warnIfPerfScore > 1.2, and perfScore=0.731372]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.3324 secs, and comparison 2.53641 sec, and warnIfPerfScore > 0.33, and perfScore=0.22382]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 8.49119 secs, and comparison 43.2428 sec, and warnIfPerfScore > 6, and perfScore=5.09266]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 8.48332 secs, and comparison 6.49191 sec, and warnIfPerfScore > 0.8, and perfScore=0.765256]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.47973 secs, and comparison 13.3761 sec, and warnIfPerfScore > 1.4, and perfScore=1.57742]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.3077 secs, and comparison 3.72237 sec, and warnIfPerfScore > 0.65, and perfScore=0.329189]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.19931 secs, and comparison 38.1227 sec, and warnIfPerfScore > 4.4, and perfScore=4.14408]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.1222 secs, and comparison 3.80116 sec, and warnIfPerfScore > 0.6, and perfScore=0.341765]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.1283 secs, and comparison 3.81517 sec, and warnIfPerfScore > 0.6, and perfScore=0.342834]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.225 secs, and comparison 3.87949 sec, and warnIfPerfScore > 0.6, and perfScore=0.345611]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.1562 secs, and comparison 7.1839 sec, and warnIfPerfScore > 1.3, and perfScore=0.64394]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.5841 secs, and comparison 10.7795 sec, and warnIfPerfScore > 1.3, and perfScore=0.856599]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 53.2267 secs, and comparison 6.62616 sec, and warnIfPerfScore > 0.3, and perfScore=0.124489]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.96535 secs, and comparison 13.2286 sec, and warnIfPerfScore > 1.5, and perfScore=1.66077]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.3929 secs, and comparison 4.54986 sec, and warnIfPerfScore > 0.55, and perfScore=0.339723]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 15 secs, and comparison 0.9457 sec, and warnIfPerfScore > 0.1, and perfScore=0.0630467]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.57025 sec, and warnIfPerfScore > 0.5, and perfScore=0.238017]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.4238 secs, and comparison 16.8091 sec, and warnIfPerfScore > 2, and perfScore=1.78368]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.59686 secs, and comparison 16.9641 sec, and warnIfPerfScore > 3.6, and perfScore=1.76767]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 57 seconds]]]

Succeeded
