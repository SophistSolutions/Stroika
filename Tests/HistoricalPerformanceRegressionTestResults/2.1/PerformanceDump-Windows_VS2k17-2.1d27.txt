Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Aug 27 10:17:33 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.8763 secs, and comparison 5.70945 sec, and warnIfPerfScore > 0.62, and perfScore=0.480744]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.6958 secs, and comparison 3.56485 sec, and warnIfPerfScore > 0.5, and perfScore=0.304798]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 12.0097 secs, and comparison 9.74997 sec, and warnIfPerfScore > 1.05, and perfScore=0.811839]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.71536 secs, and comparison 4.45745 sec, and warnIfPerfScore > 0.48, and perfScore=0.458805]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.6104 secs, and comparison 5.14019 sec, and warnIfPerfScore > 0.55, and perfScore=0.48445]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.1461 secs, and comparison 27.68 sec, and warnIfPerfScore > 2.9, and perfScore=2.27893]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.9749 secs, and comparison 29.7112 sec, and warnIfPerfScore > 2.9, and perfScore=2.48112]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 11.0397 secs, and comparison 98.4411 sec, and warnIfPerfScore > 9.7, and perfScore=8.91702]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.8059 secs, and comparison 15.7442 sec, and warnIfPerfScore > 1.6, and perfScore=1.33359]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.36 secs, and comparison 16.5759 sec, and warnIfPerfScore > 1.5, and perfScore=1.24071]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.02468 secs, and comparison 15.6667 sec, and warnIfPerfScore > 2.1, and perfScore=1.73598]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1793 secs, and comparison 12.5856 sec, and warnIfPerfScore > 1.3, and perfScore=1.03337]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.5359 secs, and comparison 1.5404 sec, and warnIfPerfScore > 0.18, and perfScore=0.122879]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.95 secs, and comparison 14.5023 sec, and warnIfPerfScore > 1.3, and perfScore=1.11987]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.92813 secs, and comparison 10.3669 sec, and warnIfPerfScore > 1.2, and perfScore=1.0442]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.595 secs, and comparison 2.25547 sec, and warnIfPerfScore > 0.33, and perfScore=0.212881]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.6534 secs, and comparison 46.8338 sec, and warnIfPerfScore > 6, and perfScore=4.39613]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.8978 secs, and comparison 4.31829 sec, and warnIfPerfScore > 0.5, and perfScore=0.396255]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.6572 secs, and comparison 41.1655 sec, and warnIfPerfScore > 4.4, and perfScore=3.8627]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.2673 secs, and comparison 4.81617 sec, and warnIfPerfScore > 0.6, and perfScore=0.427448]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.8668 secs, and comparison 19.5254 sec, and warnIfPerfScore > 1.5, and perfScore=1.31336]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.9319 secs, and comparison 4.75486 sec, and warnIfPerfScore > 0.55, and perfScore=0.318437]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.77921 sec, and warnIfPerfScore > 0.25, and perfScore=0.118614]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.8348 sec, and warnIfPerfScore > 0.5, and perfScore=0.388987]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.5898 secs, and comparison 18.6475 sec, and warnIfPerfScore > 1.9, and perfScore=1.37217]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.1626 secs, and comparison 32.7369 sec, and warnIfPerfScore > 3.1, and perfScore=2.69161]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 21 seconds]]]

Succeeded
