Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Dec 24 8:48:52 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 3.21948 secs, and comparison 1.28353 sec, and warnIfPerfScore > 0.62, and perfScore=0.398676]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.06394 secs, and comparison 2.93294 sec, and warnIfPerfScore > 0.5, and perfScore=0.957244]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.45138 secs, and comparison 6.55818 sec, and warnIfPerfScore > 1.05, and perfScore=2.6753]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.10174 secs, and comparison 6.54415 sec, and warnIfPerfScore > 1.15, and perfScore=3.11368]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.14254 secs, and comparison 1.02117 sec, and warnIfPerfScore > 0.48, and perfScore=0.246509]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.88088 secs, and comparison 1.20224 sec, and warnIfPerfScore > 0.57, and perfScore=0.246316]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 3.49258 secs, and comparison 12.5724 sec, and warnIfPerfScore > 2.9, and perfScore=3.59974]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 4.00576 secs, and comparison 13.2167 sec, and warnIfPerfScore > 2.9, and perfScore=3.29942]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 5.08117 secs, and comparison 48.4168 sec, and warnIfPerfScore > 9.7, and perfScore=9.52866]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.38761 secs, and comparison 7.96291 sec, and warnIfPerfScore > 1.6, and perfScore=1.478]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.67134 secs, and comparison 5.61689 sec, and warnIfPerfScore > 1.5, and perfScore=0.9904]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 3.01548 secs, and comparison 9.35407 sec, and warnIfPerfScore > 2.1, and perfScore=3.10202]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 3.88291 secs, and comparison 3.5152 sec, and warnIfPerfScore > 1.3, and perfScore=0.9053]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.07468 secs, and comparison 1.40186 sec, and warnIfPerfScore > 0.23, and perfScore=0.344042]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.2274 secs, and comparison 4.03681 sec, and warnIfPerfScore > 1.3, and perfScore=1.25079]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.98674 secs, and comparison 6.35028 sec, and warnIfPerfScore > 1.2, and perfScore=2.12616]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 16.0948 secs, and comparison 1.66511 sec, and warnIfPerfScore > 0.33, and perfScore=0.103456]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.9284 secs, and comparison 40.496 sec, and warnIfPerfScore > 6, and perfScore=13.8287]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.99845 secs, and comparison 5.85845 sec, and warnIfPerfScore > 0.8, and perfScore=1.95382]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.97338 secs, and comparison 7.04306 sec, and warnIfPerfScore > 0.9, and perfScore=2.3687]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.31 secs, and comparison 3.6483 sec, and warnIfPerfScore > 0.5, and perfScore=0.223685]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.31472 secs, and comparison 45.0123 sec, and warnIfPerfScore > 4.4, and perfScore=10.4323]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.5622 secs, and comparison 4.13959 sec, and warnIfPerfScore > 0.6, and perfScore=0.358029]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.7524 secs, and comparison 5.69092 sec, and warnIfPerfScore > 0.2, and perfScore=0.288112]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.31972 secs, and comparison 12.9948 sec, and warnIfPerfScore > 1.5, and perfScore=1.77532]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.88083 secs, and comparison 1.69496 sec, and warnIfPerfScore > 0.55, and perfScore=0.24633]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.841755 sec, and warnIfPerfScore > 0.25, and perfScore=0.056117]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.41843 sec, and warnIfPerfScore > 0.5, and perfScore=0.0945623]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 54 seconds]]]

Succeeded
