Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 8:33:22 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 45.1195 secs, and comparison 15.1094 sec, and warnIfPerfScore > 0.65, and perfScore=0.334876]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 45.3013 secs, and comparison 14.4491 sec, and warnIfPerfScore > 0.5, and perfScore=0.318956]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 27.1259 secs, and comparison 21.9279 sec, and warnIfPerfScore > 1.05, and perfScore=0.808377]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 23.3937 secs, and comparison 21.8498 sec, and warnIfPerfScore > 1.15, and perfScore=0.934004]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 22.2958 secs, and comparison 3.21488 sec, and warnIfPerfScore > 0.48, and perfScore=0.144192]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.4271 secs, and comparison 4.0048 sec, and warnIfPerfScore > 0.57, and perfScore=0.186903]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 21.3593 secs, and comparison 37.0687 sec, and warnIfPerfScore > 2.9, and perfScore=1.73548]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 20.5883 secs, and comparison 36.5805 sec, and warnIfPerfScore > 2.9, and perfScore=1.77677]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 15.3952 secs, and comparison 178.236 sec, and warnIfPerfScore > 24, and perfScore=11.5774]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 18.9033 secs, and comparison 15.6284 sec, and warnIfPerfScore > 1.7, and perfScore=0.826755]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 49.5998 secs, and comparison 49.9123 sec, and warnIfPerfScore > 1.5, and perfScore=1.0063]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.1077 secs, and comparison 18.8683 sec, and warnIfPerfScore > 2.1, and perfScore=1.042]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 41.0246 secs, and comparison 9.81518 sec, and warnIfPerfScore > 1.6, and perfScore=0.239251]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 43.2335 secs, and comparison 2.38003 sec, and warnIfPerfScore > 0.23, and perfScore=0.0550505]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.4113 secs, and comparison 21.8649 sec, and warnIfPerfScore > 1.3, and perfScore=1.63034]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.1345 secs, and comparison 21.9699 sec, and warnIfPerfScore > 1.2, and perfScore=1.55434]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 21.0164 secs, and comparison 5.36168 sec, and warnIfPerfScore > 0.33, and perfScore=0.255119]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 13.3443 secs, and comparison 54.1244 sec, and warnIfPerfScore > 6, and perfScore=4.05598]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.3671 secs, and comparison 21.7618 sec, and warnIfPerfScore > 0.8, and perfScore=1.62801]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 13.061 secs, and comparison 44.9674 sec, and warnIfPerfScore > 1.4, and perfScore=3.44286]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 19.9361 secs, and comparison 4.88792 sec, and warnIfPerfScore > 0.65, and perfScore=0.24518]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 23.919 secs, and comparison 59.4384 sec, and warnIfPerfScore > 4.4, and perfScore=2.48499]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.0339 secs, and comparison 5.68011 sec, and warnIfPerfScore > 0.6, and perfScore=0.270045]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 21.0815 secs, and comparison 6.1589 sec, and warnIfPerfScore > 0.6, and perfScore=0.292147]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.0147 secs, and comparison 5.76067 sec, and warnIfPerfScore > 0.6, and perfScore=0.274126]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 20.6823 secs, and comparison 13.3652 sec, and warnIfPerfScore > 1.3, and perfScore=0.646214]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 27.6008 secs, and comparison 21.3733 sec, and warnIfPerfScore > 1.3, and perfScore=0.774374]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 103.454 secs, and comparison 12.4825 sec, and warnIfPerfScore > 0.3, and perfScore=0.120658]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 18.8851 secs, and comparison 23.671 sec, and warnIfPerfScore > 1.5, and perfScore=1.25343]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.6594 secs, and comparison 5.47779 sec, and warnIfPerfScore > 0.55, and perfScore=0.349807]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.62482 sec, and warnIfPerfScore > 0.1, and perfScore=0.108321]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.98928 sec, and warnIfPerfScore > 0.5, and perfScore=0.265952]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.7976 secs, and comparison 19.9322 sec, and warnIfPerfScore > 2, and perfScore=1.06036]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.9879 secs, and comparison 29.4875 sec, and warnIfPerfScore > 3.6, and perfScore=1.34108]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes, 31 seconds]]]

Succeeded
