Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 20 18:29:8 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.15167 secs, and comparison 4.89568 sec, and warnIfPerfScore > 0.62, and perfScore=0.795829]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.26083 secs, and comparison 3.66798 sec, and warnIfPerfScore > 0.5, and perfScore=0.585861]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.7968 secs, and comparison 7.74652 sec, and warnIfPerfScore > 1.05, and perfScore=0.99355]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 2.8163 secs, and comparison 4.31533 sec, and warnIfPerfScore > 0.48, and perfScore=1.53227]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.90164 secs, and comparison 5.05612 sec, and warnIfPerfScore > 0.57, and perfScore=1.7425]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 7.15913 secs, and comparison 24.8531 sec, and warnIfPerfScore > 2.9, and perfScore=3.47153]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 8.67928 secs, and comparison 33.1835 sec, and warnIfPerfScore > 2.9, and perfScore=3.8233]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.4214 secs, and comparison 135.232 sec, and warnIfPerfScore > 9.7, and perfScore=10.0758]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.7499 secs, and comparison 14.2883 sec, and warnIfPerfScore > 1.6, and perfScore=1.32915]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.93029 secs, and comparison 8.99594 sec, and warnIfPerfScore > 1.5, and perfScore=0.90591]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.45317 secs, and comparison 13.5814 sec, and warnIfPerfScore > 2.1, and perfScore=1.60666]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.94352 secs, and comparison 6.4313 sec, and warnIfPerfScore > 1.3, and perfScore=0.926231]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 5.3817 secs, and comparison 2.1327 sec, and warnIfPerfScore > 0.23, and perfScore=0.396289]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.62659 secs, and comparison 7.49111 sec, and warnIfPerfScore > 1.3, and perfScore=1.61914]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.75005 secs, and comparison 11.0814 sec, and warnIfPerfScore > 1.2, and perfScore=1.64168]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 6.26274 secs, and comparison 1.82989 sec, and warnIfPerfScore > 0.33, and perfScore=0.292188]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.39322 secs, and comparison 45.4885 sec, and warnIfPerfScore > 6, and perfScore=10.3542]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.4153 secs, and comparison 3.95051 sec, and warnIfPerfScore > 0.5, and perfScore=0.615795]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.94546 secs, and comparison 39.9798 sec, and warnIfPerfScore > 4.4, and perfScore=5.03178]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.42962 secs, and comparison 3.76278 sec, and warnIfPerfScore > 0.6, and perfScore=0.585227]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3485 secs, and comparison 13.4267 sec, and warnIfPerfScore > 1.5, and perfScore=1.00586]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.24585 secs, and comparison 3.52034 sec, and warnIfPerfScore > 0.55, and perfScore=0.485843]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.79207 sec, and warnIfPerfScore > 0.25, and perfScore=0.119472]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.97795 sec, and warnIfPerfScore > 0.5, and perfScore=0.19853]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 17 seconds]]]

Succeeded
