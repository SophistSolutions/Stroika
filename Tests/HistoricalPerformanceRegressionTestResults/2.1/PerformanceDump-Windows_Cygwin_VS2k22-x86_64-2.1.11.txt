Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov 23 21:24:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.72479 secs, and comparison 4.53754 sec, and warnIfPerfScore > 0.65, and perfScore=0.792612]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.31924 secs, and comparison 2.80358 sec, and warnIfPerfScore > 0.5, and perfScore=0.443657]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.69982 secs, and comparison 8.34771 sec, and warnIfPerfScore > 1.05, and perfScore=0.860604]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.3515 secs, and comparison 8.22168 sec, and warnIfPerfScore > 1.15, and perfScore=1.11837]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.9044 secs, and comparison 2.74268 sec, and warnIfPerfScore > 0.48, and perfScore=0.25152]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.9098 secs, and comparison 3.16704 sec, and warnIfPerfScore > 0.57, and perfScore=0.290293]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.76372 secs, and comparison 23.1373 sec, and warnIfPerfScore > 2.9, and perfScore=2.64012]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.25079 secs, and comparison 23.1139 sec, and warnIfPerfScore > 2.9, and perfScore=2.49859]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 7.81744 secs, and comparison 174.506 sec, and warnIfPerfScore > 24, and perfScore=22.3226]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.31999 secs, and comparison 11.577 sec, and warnIfPerfScore > 1.7, and perfScore=1.58156]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.37035 secs, and comparison 7.12878 sec, and warnIfPerfScore > 1.5, and perfScore=0.967224]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.19433 secs, and comparison 13.8156 sec, and warnIfPerfScore > 2.1, and perfScore=1.92035]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.0297 secs, and comparison 4.91171 sec, and warnIfPerfScore > 1.6, and perfScore=0.54395]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 9.50748 secs, and comparison 0.920904 sec, and warnIfPerfScore > 0.23, and perfScore=0.096861]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.673 secs, and comparison 14.2832 sec, and warnIfPerfScore > 1.3, and perfScore=1.04463]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 10.1295 secs, and comparison 6.82355 sec, and warnIfPerfScore > 1.2, and perfScore=0.673634]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 12.081 secs, and comparison 2.70057 sec, and warnIfPerfScore > 0.33, and perfScore=0.223538]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.68063 secs, and comparison 43.3023 sec, and warnIfPerfScore > 6, and perfScore=4.47309]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.74196 secs, and comparison 6.78296 sec, and warnIfPerfScore > 0.8, and perfScore=0.696263]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.80733 secs, and comparison 10.1068 sec, and warnIfPerfScore > 1.4, and perfScore=1.03053]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.5371 secs, and comparison 3.97115 sec, and warnIfPerfScore > 0.65, and perfScore=0.316753]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.4673 secs, and comparison 40.7354 sec, and warnIfPerfScore > 4.4, and perfScore=3.89169]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.2654 secs, and comparison 3.90608 sec, and warnIfPerfScore > 0.6, and perfScore=0.318464]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.065 secs, and comparison 3.89697 sec, and warnIfPerfScore > 0.6, and perfScore=0.322998]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.5655 secs, and comparison 3.89958 sec, and warnIfPerfScore > 0.6, and perfScore=0.31034]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 12.1018 secs, and comparison 7.34778 sec, and warnIfPerfScore > 1.3, and perfScore=0.607163]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 13.2864 secs, and comparison 10.6213 sec, and warnIfPerfScore > 1.3, and perfScore=0.799413]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 51.3967 secs, and comparison 6.44719 sec, and warnIfPerfScore > 0.3, and perfScore=0.12544]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.11199 secs, and comparison 12.7262 sec, and warnIfPerfScore > 1.5, and perfScore=1.56881]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.3838 secs, and comparison 3.99412 sec, and warnIfPerfScore > 0.55, and perfScore=0.476409]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.812487 sec, and warnIfPerfScore > 0.1, and perfScore=0.0541658]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.34937 sec, and warnIfPerfScore > 0.5, and perfScore=0.223291]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.18133 secs, and comparison 15.0372 sec, and warnIfPerfScore > 2, and perfScore=1.6378]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.2381 secs, and comparison 18.8413 sec, and warnIfPerfScore > 3.6, and perfScore=1.67655]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 28 seconds]]]

Succeeded
