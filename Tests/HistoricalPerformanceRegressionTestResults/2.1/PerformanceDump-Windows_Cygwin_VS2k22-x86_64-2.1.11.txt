Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 28 17:22:42 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.39899 secs, and comparison 4.45479 sec, and warnIfPerfScore > 0.65, and perfScore=0.825115]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.17702 secs, and comparison 2.68646 sec, and warnIfPerfScore > 0.5, and perfScore=0.434912]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.4389 secs, and comparison 8.09236 sec, and warnIfPerfScore > 1.05, and perfScore=0.857342]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.2773 secs, and comparison 8.09772 sec, and warnIfPerfScore > 1.15, and perfScore=1.11274]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.1479 secs, and comparison 2.52742 sec, and warnIfPerfScore > 0.48, and perfScore=0.249059]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 10.2297 secs, and comparison 3.06257 sec, and warnIfPerfScore > 0.57, and perfScore=0.299381]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.52595 secs, and comparison 21.7197 sec, and warnIfPerfScore > 2.9, and perfScore=2.54748]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.97864 secs, and comparison 22.3081 sec, and warnIfPerfScore > 2.9, and perfScore=2.48457]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.54153 secs, and comparison 144.649 sec, and warnIfPerfScore > 24, and perfScore=19.1803]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.47461 secs, and comparison 11.2438 sec, and warnIfPerfScore > 1.7, and perfScore=1.50427]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.24433 secs, and comparison 6.86104 sec, and warnIfPerfScore > 1.5, and perfScore=0.947091]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.14576 secs, and comparison 13.2543 sec, and warnIfPerfScore > 2.1, and perfScore=1.85485]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.81323 secs, and comparison 4.95729 sec, and warnIfPerfScore > 1.6, and perfScore=0.562482]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 9.33181 secs, and comparison 0.850495 sec, and warnIfPerfScore > 0.23, and perfScore=0.0911394]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.6168 secs, and comparison 13.9034 sec, and warnIfPerfScore > 1.3, and perfScore=1.02105]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 9.97896 secs, and comparison 6.83679 sec, and warnIfPerfScore > 1.2, and perfScore=0.68512]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.3874 secs, and comparison 2.55545 sec, and warnIfPerfScore > 0.33, and perfScore=0.22441]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.52869 secs, and comparison 44.0791 sec, and warnIfPerfScore > 6, and perfScore=4.62593]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.7408 secs, and comparison 6.51917 sec, and warnIfPerfScore > 0.8, and perfScore=0.669265]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.55548 secs, and comparison 9.49882 sec, and warnIfPerfScore > 1.4, and perfScore=0.994071]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.4293 secs, and comparison 4.15145 sec, and warnIfPerfScore > 0.65, and perfScore=0.363228]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.0826 secs, and comparison 40.0175 sec, and warnIfPerfScore > 4.4, and perfScore=3.96898]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.2232 secs, and comparison 3.8911 sec, and warnIfPerfScore > 0.6, and perfScore=0.346701]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.2048 secs, and comparison 3.77495 sec, and warnIfPerfScore > 0.6, and perfScore=0.336904]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.0005 secs, and comparison 3.77559 sec, and warnIfPerfScore > 0.6, and perfScore=0.34322]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.3512 secs, and comparison 6.84463 sec, and warnIfPerfScore > 1.3, and perfScore=0.602985]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.1589 secs, and comparison 10.6709 sec, and warnIfPerfScore > 1.3, and perfScore=0.877621]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 50.896 secs, and comparison 7.62731 sec, and warnIfPerfScore > 0.3, and perfScore=0.149861]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.04899 secs, and comparison 12.7424 sec, and warnIfPerfScore > 1.5, and perfScore=1.58311]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.21035 secs, and comparison 3.53931 sec, and warnIfPerfScore > 0.55, and perfScore=0.431079]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.817903 sec, and warnIfPerfScore > 0.1, and perfScore=0.0545269]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.43791 sec, and warnIfPerfScore > 0.5, and perfScore=0.229194]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.89224 secs, and comparison 15.0561 sec, and warnIfPerfScore > 2, and perfScore=1.69317]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.9765 secs, and comparison 18.2317 sec, and warnIfPerfScore > 3.6, and perfScore=1.66098]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 38 seconds]]]

Succeeded
