Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 26 21:6:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.6314 secs, and comparison 4.49848 sec, and warnIfPerfScore > 0.65, and perfScore=0.79882]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.10169 secs, and comparison 2.75006 sec, and warnIfPerfScore > 0.5, and perfScore=0.450704]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 9.47836 secs, and comparison 8.05738 sec, and warnIfPerfScore > 1.05, and perfScore=0.850081]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.23449 secs, and comparison 8.10479 sec, and warnIfPerfScore > 1.15, and perfScore=1.1203]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.6119 secs, and comparison 2.69772 sec, and warnIfPerfScore > 0.48, and perfScore=0.254215]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.4011 secs, and comparison 3.05681 sec, and warnIfPerfScore > 0.57, and perfScore=0.293892]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.26095 secs, and comparison 22.671 sec, and warnIfPerfScore > 2.9, and perfScore=2.74436]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.96516 secs, and comparison 22.1328 sec, and warnIfPerfScore > 2.9, and perfScore=2.46876]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.03241 secs, and comparison 147.111 sec, and warnIfPerfScore > 24, and perfScore=18.3146]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.35804 secs, and comparison 11.3096 sec, and warnIfPerfScore > 1.7, and perfScore=1.53704]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.08353 secs, and comparison 6.73746 sec, and warnIfPerfScore > 1.5, and perfScore=0.951145]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.73139 secs, and comparison 13.7694 sec, and warnIfPerfScore > 2.1, and perfScore=2.04555]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 8.72936 secs, and comparison 4.29336 sec, and warnIfPerfScore > 1.6, and perfScore=0.491831]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 7.98058 secs, and comparison 0.772458 sec, and warnIfPerfScore > 0.23, and perfScore=0.0967923]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.042 secs, and comparison 13.5698 sec, and warnIfPerfScore > 1.3, and perfScore=1.04046]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.47627 secs, and comparison 5.79743 sec, and warnIfPerfScore > 1.2, and perfScore=0.611784]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.3504 secs, and comparison 2.64825 sec, and warnIfPerfScore > 0.33, and perfScore=0.233318]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.95828 secs, and comparison 40.7846 sec, and warnIfPerfScore > 6, and perfScore=4.55273]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.05459 secs, and comparison 6.14683 sec, and warnIfPerfScore > 0.8, and perfScore=0.678863]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.11271 secs, and comparison 9.47172 sec, and warnIfPerfScore > 1.4, and perfScore=1.0394]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.181 secs, and comparison 3.62924 sec, and warnIfPerfScore > 0.65, and perfScore=0.324591]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.56892 secs, and comparison 37.909 sec, and warnIfPerfScore > 4.4, and perfScore=3.96168]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.6188 secs, and comparison 3.72813 sec, and warnIfPerfScore > 0.6, and perfScore=0.351088]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.6746 secs, and comparison 3.56731 sec, and warnIfPerfScore > 0.6, and perfScore=0.334187]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.6429 secs, and comparison 3.51672 sec, and warnIfPerfScore > 0.6, and perfScore=0.33043]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.5416 secs, and comparison 6.66234 sec, and warnIfPerfScore > 1.3, and perfScore=0.632006]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.6235 secs, and comparison 9.58048 sec, and warnIfPerfScore > 1.3, and perfScore=0.824234]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 54.1705 secs, and comparison 6.20113 sec, and warnIfPerfScore > 0.3, and perfScore=0.114474]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.12817 secs, and comparison 11.2456 sec, and warnIfPerfScore > 1.5, and perfScore=1.57763]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.27029 secs, and comparison 3.56789 sec, and warnIfPerfScore > 0.55, and perfScore=0.490749]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.763957 sec, and warnIfPerfScore > 0.1, and perfScore=0.0509304]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.07486 sec, and warnIfPerfScore > 0.5, and perfScore=0.20499]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.49826 secs, and comparison 13.7808 sec, and warnIfPerfScore > 2, and perfScore=1.6216]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.4947 secs, and comparison 17.2041 sec, and warnIfPerfScore > 3.6, and perfScore=1.81197]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 17 seconds]]]

Succeeded
