Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 28 17:6:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.55595 secs, and comparison 4.87838 sec, and warnIfPerfScore > 0.65, and perfScore=0.645635]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.69797 secs, and comparison 3.13811 sec, and warnIfPerfScore > 0.5, and perfScore=0.360786]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.4807 secs, and comparison 8.69052 sec, and warnIfPerfScore > 1.05, and perfScore=0.829195]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.06089 secs, and comparison 8.70605 sec, and warnIfPerfScore > 1.15, and perfScore=1.08004]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 14.5632 secs, and comparison 2.6145 sec, and warnIfPerfScore > 0.48, and perfScore=0.179527]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 14.5486 secs, and comparison 3.08833 sec, and warnIfPerfScore > 0.57, and perfScore=0.212277]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.0421 secs, and comparison 25.0275 sec, and warnIfPerfScore > 2.9, and perfScore=2.26655]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.805 secs, and comparison 26.071 sec, and warnIfPerfScore > 2.9, and perfScore=2.20848]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 10.3875 secs, and comparison 165.305 sec, and warnIfPerfScore > 24, and perfScore=15.9138]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.9022 secs, and comparison 12.7106 sec, and warnIfPerfScore > 1.7, and perfScore=1.28361]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 11.8364 secs, and comparison 11.204 sec, and warnIfPerfScore > 1.5, and perfScore=0.946576]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.40442 secs, and comparison 14.5562 sec, and warnIfPerfScore > 2.1, and perfScore=1.73197]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 12.5354 secs, and comparison 8.18597 sec, and warnIfPerfScore > 1.6, and perfScore=0.653027]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 13.0467 secs, and comparison 1.81013 sec, and warnIfPerfScore > 0.23, and perfScore=0.138742]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.2556 secs, and comparison 14.9083 sec, and warnIfPerfScore > 1.3, and perfScore=1.04578]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.6347 secs, and comparison 7.47639 sec, and warnIfPerfScore > 1.2, and perfScore=0.642596]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.7259 secs, and comparison 3.00224 sec, and warnIfPerfScore > 0.33, and perfScore=0.256035]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.0885 secs, and comparison 44.222 sec, and warnIfPerfScore > 6, and perfScore=3.98811]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 11.1159 secs, and comparison 6.8549 sec, and warnIfPerfScore > 0.8, and perfScore=0.616675]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.0232 secs, and comparison 12.1282 sec, and warnIfPerfScore > 1.4, and perfScore=1.10024]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.8201 secs, and comparison 4.03732 sec, and warnIfPerfScore > 0.65, and perfScore=0.341564]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.6813 secs, and comparison 40.688 sec, and warnIfPerfScore > 4.4, and perfScore=3.48317]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.7644 secs, and comparison 4.02724 sec, and warnIfPerfScore > 0.6, and perfScore=0.342325]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.8058 secs, and comparison 4.03676 sec, and warnIfPerfScore > 0.6, and perfScore=0.341929]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.907 secs, and comparison 4.01015 sec, and warnIfPerfScore > 0.6, and perfScore=0.336789]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.8393 secs, and comparison 6.76283 sec, and warnIfPerfScore > 1.3, and perfScore=0.571217]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.6893 secs, and comparison 10.8534 sec, and warnIfPerfScore > 1.3, and perfScore=0.855318]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 58.0606 secs, and comparison 6.93666 sec, and warnIfPerfScore > 0.3, and perfScore=0.119473]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.7388 secs, and comparison 15.4237 sec, and warnIfPerfScore > 1.5, and perfScore=1.43626]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.47105 secs, and comparison 3.30759 sec, and warnIfPerfScore > 0.55, and perfScore=0.390458]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.01428 sec, and warnIfPerfScore > 0.1, and perfScore=0.0676189]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.25283 sec, and warnIfPerfScore > 0.5, and perfScore=0.216855]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.2014 secs, and comparison 19.78 sec, and warnIfPerfScore > 2, and perfScore=1.76585]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.5631 secs, and comparison 33.8909 sec, and warnIfPerfScore > 3.6, and perfScore=2.93096]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 52 seconds]]]

Succeeded
