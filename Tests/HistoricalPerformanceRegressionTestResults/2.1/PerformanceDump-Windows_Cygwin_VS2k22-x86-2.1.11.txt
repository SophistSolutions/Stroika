Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 26 20:50:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.59319 secs, and comparison 4.65171 sec, and warnIfPerfScore > 0.65, and perfScore=0.612616]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.1157 secs, and comparison 2.99485 sec, and warnIfPerfScore > 0.5, and perfScore=0.369019]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 10.6348 secs, and comparison 8.39767 sec, and warnIfPerfScore > 1.05, and perfScore=0.789639]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.81548 secs, and comparison 8.36408 sec, and warnIfPerfScore > 1.15, and perfScore=1.07019]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 12.2617 secs, and comparison 2.52065 sec, and warnIfPerfScore > 0.48, and perfScore=0.205572]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.9376 secs, and comparison 2.95889 sec, and warnIfPerfScore > 0.57, and perfScore=0.247863]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 10.6417 secs, and comparison 24.7421 sec, and warnIfPerfScore > 2.9, and perfScore=2.32502]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.3624 secs, and comparison 25.7856 sec, and warnIfPerfScore > 2.9, and perfScore=2.26938]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 10.0508 secs, and comparison 176.438 sec, and warnIfPerfScore > 24, and perfScore=17.5546]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.38222 secs, and comparison 11.7039 sec, and warnIfPerfScore > 1.7, and perfScore=1.24745]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.0732 secs, and comparison 9.72244 sec, and warnIfPerfScore > 1.5, and perfScore=0.965182]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.69212 secs, and comparison 13.8025 sec, and warnIfPerfScore > 2.1, and perfScore=1.58793]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.5741 secs, and comparison 7.80196 sec, and warnIfPerfScore > 1.6, and perfScore=0.674089]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 12.7554 secs, and comparison 1.68044 sec, and warnIfPerfScore > 0.23, and perfScore=0.131744]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.3305 secs, and comparison 14.0795 sec, and warnIfPerfScore > 1.3, and perfScore=0.982487]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 11.3037 secs, and comparison 6.65593 sec, and warnIfPerfScore > 1.2, and perfScore=0.588828]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.383 secs, and comparison 2.71044 sec, and warnIfPerfScore > 0.33, and perfScore=0.238114]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.9189 secs, and comparison 41.9277 sec, and warnIfPerfScore > 6, and perfScore=3.8399]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 10.9553 secs, and comparison 6.36798 sec, and warnIfPerfScore > 0.8, and perfScore=0.581267]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.8027 secs, and comparison 11.5345 sec, and warnIfPerfScore > 1.4, and perfScore=1.06775]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.2608 secs, and comparison 3.79208 sec, and warnIfPerfScore > 0.65, and perfScore=0.336751]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.1811 secs, and comparison 40.48 sec, and warnIfPerfScore > 4.4, and perfScore=3.62039]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.0164 secs, and comparison 4.22273 sec, and warnIfPerfScore > 0.6, and perfScore=0.351412]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.3516 secs, and comparison 3.99442 sec, and warnIfPerfScore > 0.6, and perfScore=0.351882]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.804 secs, and comparison 3.97511 sec, and warnIfPerfScore > 0.6, and perfScore=0.336759]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 12.3813 secs, and comparison 6.28578 sec, and warnIfPerfScore > 1.3, and perfScore=0.507683]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 12.6752 secs, and comparison 10.319 sec, and warnIfPerfScore > 1.3, and perfScore=0.814108]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 58.4926 secs, and comparison 7.02968 sec, and warnIfPerfScore > 0.3, and perfScore=0.120181]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.7594 secs, and comparison 15.3662 sec, and warnIfPerfScore > 1.5, and perfScore=1.42817]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.47047 secs, and comparison 3.74205 sec, and warnIfPerfScore > 0.55, and perfScore=0.441776]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.07049 sec, and warnIfPerfScore > 0.1, and perfScore=0.071366]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.33374 sec, and warnIfPerfScore > 0.5, and perfScore=0.222249]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.5889 secs, and comparison 15.7634 sec, and warnIfPerfScore > 2, and perfScore=1.36021]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.6526 secs, and comparison 34.0431 sec, and warnIfPerfScore > 3.6, and perfScore=2.9215]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 36 seconds]]]

Succeeded
