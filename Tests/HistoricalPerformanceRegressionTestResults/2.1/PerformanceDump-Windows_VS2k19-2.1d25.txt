Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jun  7 7:56:42 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.9729 secs, and comparison 5.29004 sec, and warnIfPerfScore > 0.62, and perfScore=0.482102]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.0167 secs, and comparison 3.42994 sec, and warnIfPerfScore > 0.5, and perfScore=0.311341]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 10.7291 secs, and comparison 9.66867 sec, and warnIfPerfScore > 1.05, and perfScore=0.901159]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.46558 secs, and comparison 4.16387 sec, and warnIfPerfScore > 0.48, and perfScore=0.439896]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.52243 secs, and comparison 4.45927 sec, and warnIfPerfScore > 0.55, and perfScore=0.468291]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.5466 secs, and comparison 26.4475 sec, and warnIfPerfScore > 2.9, and perfScore=2.50767]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.3109 secs, and comparison 28.0531 sec, and warnIfPerfScore > 2.9, and perfScore=2.48017]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 10.5626 secs, and comparison 90.0888 sec, and warnIfPerfScore > 9.7, and perfScore=8.52904]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.8333 secs, and comparison 13.5795 sec, and warnIfPerfScore > 1.6, and perfScore=1.2535]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5639 secs, and comparison 13.2529 sec, and warnIfPerfScore > 1.5, and perfScore=1.14606]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.38026 secs, and comparison 14.6047 sec, and warnIfPerfScore > 2.1, and perfScore=1.74275]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 11.2983 secs, and comparison 9.05412 sec, and warnIfPerfScore > 1.3, and perfScore=0.801369]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 11.8208 secs, and comparison 1.75515 sec, and warnIfPerfScore > 0.18, and perfScore=0.14848]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.0188 secs, and comparison 14.8479 sec, and warnIfPerfScore > 1.3, and perfScore=1.2354]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.36752 secs, and comparison 8.2724 sec, and warnIfPerfScore > 1.2, and perfScore=0.883094]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.4159 secs, and comparison 2.2116 sec, and warnIfPerfScore > 0.33, and perfScore=0.212329]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 9.15171 secs, and comparison 47.5377 sec, and warnIfPerfScore > 6, and perfScore=5.1944]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.98779 secs, and comparison 4.36539 sec, and warnIfPerfScore > 0.5, and perfScore=0.437072]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.2748 secs, and comparison 42.7296 sec, and warnIfPerfScore > 4.4, and perfScore=4.15869]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.0176 secs, and comparison 4.67469 sec, and warnIfPerfScore > 0.6, and perfScore=0.466647]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.6524 secs, and comparison 19.0232 sec, and warnIfPerfScore > 1.5, and perfScore=1.2983]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.7947 secs, and comparison 4.59417 sec, and warnIfPerfScore > 0.55, and perfScore=0.359068]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.55774 sec, and warnIfPerfScore > 0.25, and perfScore=0.103849]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.31673 sec, and warnIfPerfScore > 0.5, and perfScore=0.354449]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.7579 secs, and comparison 18.8293 sec, and warnIfPerfScore > 1.9, and perfScore=1.75027]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.5127 secs, and comparison 31.893 sec, and warnIfPerfScore > 3, and perfScore=2.77024]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 33 seconds]]]

Succeeded
