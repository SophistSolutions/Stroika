Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb 15 9:4:30 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.08274 secs, and comparison 4.74661 sec, and warnIfPerfScore > 0.65, and perfScore=0.78034]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.21424 secs, and comparison 3.03701 sec, and warnIfPerfScore > 0.5, and perfScore=0.488718]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.14729 secs, and comparison 7.26472 sec, and warnIfPerfScore > 1.05, and perfScore=0.891673]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.2754 secs, and comparison 7.08163 sec, and warnIfPerfScore > 1.15, and perfScore=1.12848]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 4.38219 secs, and comparison 3.28259 sec, and warnIfPerfScore > 0.48, and perfScore=0.749075]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.02282 secs, and comparison 4.14566 sec, and warnIfPerfScore > 0.57, and perfScore=0.825364]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 3.78876 secs, and comparison 17.6824 sec, and warnIfPerfScore > 2.9, and perfScore=4.66705]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 4.45388 secs, and comparison 18.1227 sec, and warnIfPerfScore > 2.9, and perfScore=4.06896]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.73346 secs, and comparison 57.3345 sec, and warnIfPerfScore > 24, and perfScore=9.99999]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.33157 secs, and comparison 10.7686 sec, and warnIfPerfScore > 1.7, and perfScore=2.01977]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.48994 secs, and comparison 6.16583 sec, and warnIfPerfScore > 1.5, and perfScore=0.95006]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 3.16546 secs, and comparison 13.0442 sec, and warnIfPerfScore > 2.1, and perfScore=4.12079]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.73312 secs, and comparison 4.20137 sec, and warnIfPerfScore > 1.6, and perfScore=0.887653]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 5.05518 secs, and comparison 2.07547 sec, and warnIfPerfScore > 0.23, and perfScore=0.410562]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.29004 secs, and comparison 4.98409 sec, and warnIfPerfScore > 1.3, and perfScore=1.16178]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.42965 secs, and comparison 7.62945 sec, and warnIfPerfScore > 1.2, and perfScore=1.72236]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 17.8569 secs, and comparison 1.98755 sec, and warnIfPerfScore > 0.33, and perfScore=0.111304]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.18565 secs, and comparison 43.435 sec, and warnIfPerfScore > 6, and perfScore=13.6346]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.31279 secs, and comparison 9.19923 sec, and warnIfPerfScore > 0.8, and perfScore=2.77688]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.88291 secs, and comparison 13.037 sec, and warnIfPerfScore > 1.4, and perfScore=3.35753]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 16.8768 secs, and comparison 4.55335 sec, and warnIfPerfScore > 0.65, and perfScore=0.269799]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.45822 secs, and comparison 40.0856 sec, and warnIfPerfScore > 4.4, and perfScore=4.73924]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.7928 secs, and comparison 4.25026 sec, and warnIfPerfScore > 0.6, and perfScore=0.269126]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.7437 secs, and comparison 4.13882 sec, and warnIfPerfScore > 0.6, and perfScore=0.262887]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.141 secs, and comparison 4.0767 sec, and warnIfPerfScore > 0.6, and perfScore=0.26925]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.2778 secs, and comparison 5.27201 sec, and warnIfPerfScore > 1.3, and perfScore=0.345078]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 24.7762 secs, and comparison 13.7794 sec, and warnIfPerfScore > 1.3, and perfScore=0.556155]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 23.6472 secs, and comparison 8.18318 sec, and warnIfPerfScore > 0.3, and perfScore=0.346053]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.3252 secs, and comparison 14.6315 sec, and warnIfPerfScore > 1.5, and perfScore=1.29194]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.1048 secs, and comparison 3.15693 sec, and warnIfPerfScore > 0.55, and perfScore=0.444338]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.52076 sec, and warnIfPerfScore > 0.1, and perfScore=0.101384]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.88242 sec, and warnIfPerfScore > 0.5, and perfScore=0.258828]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 20 seconds]]]

Succeeded
