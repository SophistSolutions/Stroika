Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Oct 24 23:4:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 37.3305 secs, and comparison 6.02781 sec, and warnIfPerfScore > 0.65, and perfScore=0.161472]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 38.5967 secs, and comparison 6.17089 sec, and warnIfPerfScore > 0.5, and perfScore=0.159881]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 16.6878 secs, and comparison 11.1963 sec, and warnIfPerfScore > 1.05, and perfScore=0.670929]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 12.9522 secs, and comparison 11.6917 sec, and warnIfPerfScore > 1.15, and perfScore=0.902683]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 17.8005 secs, and comparison 3.22813 sec, and warnIfPerfScore > 0.48, and perfScore=0.18135]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 17.4232 secs, and comparison 3.52124 sec, and warnIfPerfScore > 0.57, and perfScore=0.2021]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 17.456 secs, and comparison 30.0207 sec, and warnIfPerfScore > 2.9, and perfScore=1.71979]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 18.4293 secs, and comparison 31.4488 sec, and warnIfPerfScore > 2.9, and perfScore=1.70646]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 13.1286 secs, and comparison 154.433 sec, and warnIfPerfScore > 24, and perfScore=11.7631]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 17.8681 secs, and comparison 13.4234 sec, and warnIfPerfScore > 1.7, and perfScore=0.751249]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 37.228 secs, and comparison 37.2764 sec, and warnIfPerfScore > 1.5, and perfScore=1.0013]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.6237 secs, and comparison 15.3784 sec, and warnIfPerfScore > 2.1, and perfScore=0.984299]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 31.3312 secs, and comparison 9.14903 sec, and warnIfPerfScore > 1.6, and perfScore=0.29201]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 33.4969 secs, and comparison 2.35181 sec, and warnIfPerfScore > 0.23, and perfScore=0.07021]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.8425 secs, and comparison 20.0186 sec, and warnIfPerfScore > 1.3, and perfScore=1.69041]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.5187 secs, and comparison 19.2027 sec, and warnIfPerfScore > 1.2, and perfScore=1.53392]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 21.0679 secs, and comparison 5.3917 sec, and warnIfPerfScore > 0.33, and perfScore=0.25592]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.0928 secs, and comparison 51.6084 sec, and warnIfPerfScore > 6, and perfScore=3.94174]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.7926 secs, and comparison 18.8691 sec, and warnIfPerfScore > 0.8, and perfScore=1.475]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 12.7548 secs, and comparison 50.5323 sec, and warnIfPerfScore > 1.4, and perfScore=3.96184]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 21.5434 secs, and comparison 4.88925 sec, and warnIfPerfScore > 0.65, and perfScore=0.226949]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 23.7721 secs, and comparison 58.6543 sec, and warnIfPerfScore > 4.4, and perfScore=2.46736]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 21.9835 secs, and comparison 6.06549 sec, and warnIfPerfScore > 0.6, and perfScore=0.275912]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.8885 secs, and comparison 5.87733 sec, and warnIfPerfScore > 0.6, and perfScore=0.268512]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 22.0657 secs, and comparison 6.30674 sec, and warnIfPerfScore > 0.6, and perfScore=0.285817]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 22.391 secs, and comparison 13.8959 sec, and warnIfPerfScore > 1.3, and perfScore=0.620603]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 35.0569 secs, and comparison 24.9832 sec, and warnIfPerfScore > 1.3, and perfScore=0.712645]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 102.026 secs, and comparison 8.18949 sec, and warnIfPerfScore > 0.3, and perfScore=0.0802688]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.2451 secs, and comparison 22.6003 sec, and warnIfPerfScore > 1.5, and perfScore=1.2387]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.4842 secs, and comparison 5.70331 sec, and warnIfPerfScore > 0.55, and perfScore=0.292715]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.06146 sec, and warnIfPerfScore > 0.1, and perfScore=0.137431]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.40112 sec, and warnIfPerfScore > 0.5, and perfScore=0.293408]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.4566 secs, and comparison 21.0411 sec, and warnIfPerfScore > 2, and perfScore=1.08143]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 21.9992 secs, and comparison 25.5482 sec, and warnIfPerfScore > 3.6, and perfScore=1.16132]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 24 minutes, 36 seconds]]]

Succeeded
