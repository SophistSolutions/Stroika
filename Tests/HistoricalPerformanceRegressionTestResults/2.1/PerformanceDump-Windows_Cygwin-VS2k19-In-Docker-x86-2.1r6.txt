Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 28 1:8:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.47976 secs, and comparison 4.5929 sec, and warnIfPerfScore > 0.65, and perfScore=0.614044]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.62293 secs, and comparison 2.85746 sec, and warnIfPerfScore > 0.5, and perfScore=0.374851]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.51177 secs, and comparison 8.02347 sec, and warnIfPerfScore > 1.05, and perfScore=0.84353]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.39709 secs, and comparison 7.9041 sec, and warnIfPerfScore > 1.15, and perfScore=1.06854]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.68993 secs, and comparison 2.35029 sec, and warnIfPerfScore > 0.48, and perfScore=0.270461]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.73878 secs, and comparison 2.92295 sec, and warnIfPerfScore > 0.57, and perfScore=0.334481]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.23506 secs, and comparison 22.0487 sec, and warnIfPerfScore > 2.9, and perfScore=2.38749]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.54272 secs, and comparison 23.1085 sec, and warnIfPerfScore > 2.9, and perfScore=2.42158]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.20067 secs, and comparison 154.972 sec, and warnIfPerfScore > 24, and perfScore=16.8435]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.95653 secs, and comparison 11.2608 sec, and warnIfPerfScore > 1.7, and perfScore=1.41529]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.74947 secs, and comparison 8.7276 sec, and warnIfPerfScore > 1.5, and perfScore=0.9975]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.44564 secs, and comparison 13.2616 sec, and warnIfPerfScore > 2.1, and perfScore=1.78112]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.69742 secs, and comparison 8.39053 sec, and warnIfPerfScore > 1.6, and perfScore=0.865234]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 10.3198 secs, and comparison 1.541 sec, and warnIfPerfScore > 0.23, and perfScore=0.149324]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.1345 secs, and comparison 13.9146 sec, and warnIfPerfScore > 1.3, and perfScore=0.984437]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.8114 secs, and comparison 5.87157 sec, and warnIfPerfScore > 1.2, and perfScore=0.543088]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.85085 secs, and comparison 1.6398 sec, and warnIfPerfScore > 0.33, and perfScore=0.239357]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.2984 secs, and comparison 41.1925 sec, and warnIfPerfScore > 6, and perfScore=3.9999]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.285 secs, and comparison 5.69048 sec, and warnIfPerfScore > 0.8, and perfScore=0.553282]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.5652 secs, and comparison 10.2742 sec, and warnIfPerfScore > 1.4, and perfScore=0.972457]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.73096 secs, and comparison 3.63821 sec, and warnIfPerfScore > 0.65, and perfScore=0.540518]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.6525 secs, and comparison 38.3564 sec, and warnIfPerfScore > 4.4, and perfScore=3.60071]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.00493 secs, and comparison 3.54183 sec, and warnIfPerfScore > 0.6, and perfScore=0.505619]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.83164 secs, and comparison 3.52366 sec, and warnIfPerfScore > 0.6, and perfScore=0.515786]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.96275 secs, and comparison 3.50061 sec, and warnIfPerfScore > 0.6, and perfScore=0.502763]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.79545 secs, and comparison 5.15775 sec, and warnIfPerfScore > 1.3, and perfScore=0.759]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.54405 secs, and comparison 8.83529 sec, and warnIfPerfScore > 1.3, and perfScore=1.17116]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 49.1276 secs, and comparison 6.29847 sec, and warnIfPerfScore > 0.3, and perfScore=0.128206]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.35112 secs, and comparison 12.757 sec, and warnIfPerfScore > 1.5, and perfScore=1.36423]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.57866 secs, and comparison 3.03886 sec, and warnIfPerfScore > 0.55, and perfScore=0.400977]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.816614 sec, and warnIfPerfScore > 0.1, and perfScore=0.0544409]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.07159 sec, and warnIfPerfScore > 0.5, and perfScore=0.204773]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.75362 secs, and comparison 9.44376 sec, and warnIfPerfScore > 2, and perfScore=1.07884]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.3694 secs, and comparison 31.0455 sec, and warnIfPerfScore > 3.6, and perfScore=2.99395]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 27 seconds]]]

Succeeded
