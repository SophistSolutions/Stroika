Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 :55:19 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.39508 secs, and comparison 4.56714 sec, and warnIfPerfScore > 0.65, and perfScore=0.617591]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.43591 secs, and comparison 2.99385 sec, and warnIfPerfScore > 0.5, and perfScore=0.402621]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.14032 secs, and comparison 7.9618 sec, and warnIfPerfScore > 1.05, and perfScore=0.871063]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.2219 secs, and comparison 7.96423 sec, and warnIfPerfScore > 1.15, and perfScore=1.10279]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.16302 secs, and comparison 2.41108 sec, and warnIfPerfScore > 0.48, and perfScore=0.295367]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.05022 secs, and comparison 2.89608 sec, and warnIfPerfScore > 0.57, and perfScore=0.359751]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.59907 secs, and comparison 21.7279 sec, and warnIfPerfScore > 2.9, and perfScore=2.52677]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.98071 secs, and comparison 22.8963 sec, and warnIfPerfScore > 2.9, and perfScore=2.5495]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.3224 secs, and comparison 150.854 sec, and warnIfPerfScore > 24, and perfScore=18.1263]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.13061 secs, and comparison 10.9857 sec, and warnIfPerfScore > 1.7, and perfScore=1.54064]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.21235 secs, and comparison 8.02689 sec, and warnIfPerfScore > 1.5, and perfScore=0.977417]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.88775 secs, and comparison 12.7047 sec, and warnIfPerfScore > 2.1, and perfScore=1.84453]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.98436 secs, and comparison 7.84448 sec, and warnIfPerfScore > 1.6, and perfScore=0.873126]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.43537 secs, and comparison 1.33989 sec, and warnIfPerfScore > 0.23, and perfScore=0.142008]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9859 secs, and comparison 12.9634 sec, and warnIfPerfScore > 1.3, and perfScore=0.998265]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.0682 secs, and comparison 5.41629 sec, and warnIfPerfScore > 1.2, and perfScore=0.537958]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.25466 secs, and comparison 1.47087 sec, and warnIfPerfScore > 0.33, and perfScore=0.235164]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.68052 secs, and comparison 39.1595 sec, and warnIfPerfScore > 6, and perfScore=4.04518]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.72485 secs, and comparison 5.19401 sec, and warnIfPerfScore > 0.8, and perfScore=0.534096]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.7733 secs, and comparison 9.39058 sec, and warnIfPerfScore > 1.4, and perfScore=0.96084]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.2247 secs, and comparison 3.43997 sec, and warnIfPerfScore > 0.65, and perfScore=0.552632]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.78345 secs, and comparison 36.5982 sec, and warnIfPerfScore > 4.4, and perfScore=3.74083]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.36009 secs, and comparison 3.38138 sec, and warnIfPerfScore > 0.6, and perfScore=0.531655]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.24697 secs, and comparison 3.42982 sec, and warnIfPerfScore > 0.6, and perfScore=0.549037]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.41909 secs, and comparison 3.44582 sec, and warnIfPerfScore > 0.6, and perfScore=0.536809]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.46102 secs, and comparison 4.79759 sec, and warnIfPerfScore > 1.3, and perfScore=0.742544]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.95746 secs, and comparison 8.30554 sec, and warnIfPerfScore > 1.3, and perfScore=1.19376]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.5287 secs, and comparison 5.89714 sec, and warnIfPerfScore > 0.3, and perfScore=0.129526]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.63788 secs, and comparison 12.2354 sec, and warnIfPerfScore > 1.5, and perfScore=1.41648]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.25489 secs, and comparison 2.93874 sec, and warnIfPerfScore > 0.55, and perfScore=0.40507]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.764236 sec, and warnIfPerfScore > 0.1, and perfScore=0.0509491]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.96689 sec, and warnIfPerfScore > 0.5, and perfScore=0.197793]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.7244 secs, and comparison 9.02023 sec, and warnIfPerfScore > 2, and perfScore=1.03391]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.72316 secs, and comparison 29.6189 sec, and warnIfPerfScore > 3.6, and perfScore=3.04622]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 47 seconds]]]

Succeeded
