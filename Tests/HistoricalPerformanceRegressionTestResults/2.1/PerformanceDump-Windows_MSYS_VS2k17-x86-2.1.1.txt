Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 3:18:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.2206 secs, and comparison 5.60142 sec, and warnIfPerfScore > 0.65, and perfScore=0.423688]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.0527 secs, and comparison 3.11712 sec, and warnIfPerfScore > 0.5, and perfScore=0.238811]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 12.5462 secs, and comparison 11.66 sec, and warnIfPerfScore > 1.05, and perfScore=0.929369]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.91435 secs, and comparison 10.8243 sec, and warnIfPerfScore > 1.15, and perfScore=1.09178]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 27.8625 secs, and comparison 3.84521 sec, and warnIfPerfScore > 0.48, and perfScore=0.138007]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.8231 secs, and comparison 4.39123 sec, and warnIfPerfScore > 0.57, and perfScore=0.157827]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 15.1877 secs, and comparison 33.8711 sec, and warnIfPerfScore > 2.9, and perfScore=2.23017]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.4491 secs, and comparison 32.2253 sec, and warnIfPerfScore > 2.9, and perfScore=2.23027]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 14.6403 secs, and comparison 180.921 sec, and warnIfPerfScore > 24, and perfScore=12.3578]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.6253 secs, and comparison 15.8185 sec, and warnIfPerfScore > 1.7, and perfScore=1.16097]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 15.9514 secs, and comparison 14.5378 sec, and warnIfPerfScore > 1.5, and perfScore=0.911381]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.4777 secs, and comparison 19.979 sec, and warnIfPerfScore > 2.1, and perfScore=1.90681]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 14.7125 secs, and comparison 10.7013 sec, and warnIfPerfScore > 1.6, and perfScore=0.727364]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15.916 secs, and comparison 1.91225 sec, and warnIfPerfScore > 0.23, and perfScore=0.120147]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 18.4949 secs, and comparison 15.1477 sec, and warnIfPerfScore > 1.3, and perfScore=0.819019]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 12.004 secs, and comparison 9.44985 sec, and warnIfPerfScore > 1.2, and perfScore=0.787224]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.2847 secs, and comparison 2.62122 sec, and warnIfPerfScore > 0.33, and perfScore=0.232282]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.296 secs, and comparison 53.476 sec, and warnIfPerfScore > 6, and perfScore=4.73408]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 12.2686 secs, and comparison 7.9499 sec, and warnIfPerfScore > 0.8, and perfScore=0.647987]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.2525 secs, and comparison 18.0974 sec, and warnIfPerfScore > 1.4, and perfScore=1.47704]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.47704}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.2618 secs, and comparison 5.12675 sec, and warnIfPerfScore > 0.65, and perfScore=0.455233]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 12.9247 secs, and comparison 47.2474 sec, and warnIfPerfScore > 4.4, and perfScore=3.6556]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.2279 secs, and comparison 4.97209 sec, and warnIfPerfScore > 0.6, and perfScore=0.442835]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.8313 secs, and comparison 4.63492 sec, and warnIfPerfScore > 0.6, and perfScore=0.427918]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.7216 secs, and comparison 4.82964 sec, and warnIfPerfScore > 0.6, and perfScore=0.450458]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 11.2211 secs, and comparison 10.2969 sec, and warnIfPerfScore > 1.3, and perfScore=0.917637]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.4341 secs, and comparison 14.9104 sec, and warnIfPerfScore > 1.3, and perfScore=1.19915]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 76.7379 secs, and comparison 8.62497 sec, and warnIfPerfScore > 0.3, and perfScore=0.112395]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.0438 secs, and comparison 21.2061 sec, and warnIfPerfScore > 1.5, and perfScore=1.40962]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.13 secs, and comparison 5.32541 sec, and warnIfPerfScore > 0.55, and perfScore=0.330155]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 15 secs, and comparison 1.32587 sec, and warnIfPerfScore > 0.1, and perfScore=0.0883913]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.45184 sec, and warnIfPerfScore > 0.5, and perfScore=0.363456]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.8445 secs, and comparison 22.6849 sec, and warnIfPerfScore > 2, and perfScore=1.52816]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.0506 secs, and comparison 39.4562 sec, and warnIfPerfScore > 3.6, and perfScore=2.62156]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 38 seconds]]]

Succeeded
