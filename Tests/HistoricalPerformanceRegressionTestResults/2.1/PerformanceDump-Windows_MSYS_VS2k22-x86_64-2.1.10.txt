Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 19 13:23:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.8626 secs, and comparison 4.93886 sec, and warnIfPerfScore > 0.65, and perfScore=0.842435]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.40027 secs, and comparison 2.95667 sec, and warnIfPerfScore > 0.5, and perfScore=0.46196]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.8214 secs, and comparison 9.79049 sec, and warnIfPerfScore > 1.05, and perfScore=0.996853]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.99332 secs, and comparison 8.7007 sec, and warnIfPerfScore > 1.15, and perfScore=1.0885]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 10.1934 secs, and comparison 2.77738 sec, and warnIfPerfScore > 0.48, and perfScore=0.272469]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.2591 secs, and comparison 3.50024 sec, and warnIfPerfScore > 0.57, and perfScore=0.341183]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.17802 secs, and comparison 23.9297 sec, and warnIfPerfScore > 2.9, and perfScore=2.92609]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.65626 secs, and comparison 24.2125 sec, and warnIfPerfScore > 2.9, and perfScore=2.79711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.51691 secs, and comparison 150.068 sec, and warnIfPerfScore > 24, and perfScore=19.9641]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.0752 secs, and comparison 12.4773 sec, and warnIfPerfScore > 1.7, and perfScore=1.76353]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.97648 secs, and comparison 6.71893 sec, and warnIfPerfScore > 1.5, and perfScore=0.963082]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.03665 secs, and comparison 14.7537 sec, and warnIfPerfScore > 2.1, and perfScore=2.09669]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.96545 secs, and comparison 5.08061 sec, and warnIfPerfScore > 1.6, and perfScore=0.566688]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 9.49145 secs, and comparison 0.913912 sec, and warnIfPerfScore > 0.23, and perfScore=0.0962879]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.1971 secs, and comparison 14.5657 sec, and warnIfPerfScore > 1.3, and perfScore=1.02597]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.1669 secs, and comparison 6.69214 sec, and warnIfPerfScore > 1.2, and perfScore=0.658227]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.9461 secs, and comparison 2.67985 sec, and warnIfPerfScore > 0.33, and perfScore=0.224328]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.67147 secs, and comparison 44.5795 sec, and warnIfPerfScore > 6, and perfScore=4.60938]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.33441 secs, and comparison 6.38722 sec, and warnIfPerfScore > 0.8, and perfScore=0.684266]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.33865 secs, and comparison 9.35594 sec, and warnIfPerfScore > 1.4, and perfScore=1.00185]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.4274 secs, and comparison 3.93324 sec, and warnIfPerfScore > 0.65, and perfScore=0.344195]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.0091 secs, and comparison 41.3631 sec, and warnIfPerfScore > 4.4, and perfScore=4.13257]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.3126 secs, and comparison 3.91048 sec, and warnIfPerfScore > 0.6, and perfScore=0.345674]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.16 secs, and comparison 3.90964 sec, and warnIfPerfScore > 0.6, and perfScore=0.350327]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.3357 secs, and comparison 3.90615 sec, and warnIfPerfScore > 0.6, and perfScore=0.34459]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.5281 secs, and comparison 6.97164 sec, and warnIfPerfScore > 1.3, and perfScore=0.604754]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.949 secs, and comparison 10.0782 sec, and warnIfPerfScore > 1.3, and perfScore=0.843438]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.6345 secs, and comparison 6.02335 sec, and warnIfPerfScore > 0.3, and perfScore=0.126449]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.63419 secs, and comparison 12.3576 sec, and warnIfPerfScore > 1.5, and perfScore=1.61872]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.58432 secs, and comparison 3.76608 sec, and warnIfPerfScore > 0.55, and perfScore=0.496561]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.77084 sec, and warnIfPerfScore > 0.1, and perfScore=0.0513893]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.31275 sec, and warnIfPerfScore > 0.5, and perfScore=0.22085]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.12404 secs, and comparison 14.2547 sec, and warnIfPerfScore > 2, and perfScore=1.75463]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.0796 secs, and comparison 17.5131 sec, and warnIfPerfScore > 3.6, and perfScore=1.73747]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 45 seconds]]]

Succeeded
