Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 2::3 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.59873 secs, and comparison 4.72382 sec, and warnIfPerfScore > 0.65, and perfScore=0.84373]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 5.56812 secs, and comparison 3.42347 sec, and warnIfPerfScore > 0.5, and perfScore=0.614833]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.45451 secs, and comparison 7.18378 sec, and warnIfPerfScore > 1.05, and perfScore=1.11299]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.12803 secs, and comparison 7.48693 sec, and warnIfPerfScore > 1.15, and perfScore=1.22175]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 3.729 secs, and comparison 2.38624 sec, and warnIfPerfScore > 0.48, and perfScore=0.639914]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 4.44184 secs, and comparison 2.98735 sec, and warnIfPerfScore > 0.57, and perfScore=0.672547]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.35017 secs, and comparison 17.0196 sec, and warnIfPerfScore > 2.9, and perfScore=5.08022]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 4.15106 secs, and comparison 17.7701 sec, and warnIfPerfScore > 2.9, and perfScore=4.28086]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.39788 secs, and comparison 56.087 sec, and warnIfPerfScore > 24, and perfScore=10.3906]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.65335 secs, and comparison 10.1574 sec, and warnIfPerfScore > 1.7, and perfScore=1.79671]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 6.73619 secs, and comparison 6.22398 sec, and warnIfPerfScore > 1.5, and perfScore=0.923961]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.81498 secs, and comparison 12.2277 sec, and warnIfPerfScore > 2.1, and perfScore=4.3438]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 4.20044 secs, and comparison 3.60597 sec, and warnIfPerfScore > 1.6, and perfScore=0.858475]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.80944 secs, and comparison 1.69867 sec, and warnIfPerfScore > 0.23, and perfScore=0.353196]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.11216 secs, and comparison 4.9664 sec, and warnIfPerfScore > 1.3, and perfScore=1.20774]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.10121 secs, and comparison 7.58519 sec, and warnIfPerfScore > 1.2, and perfScore=2.44588]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 19.717 secs, and comparison 1.82416 sec, and warnIfPerfScore > 0.33, and perfScore=0.0925175]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.96616 secs, and comparison 42.0927 sec, and warnIfPerfScore > 6, and perfScore=14.191]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.02648 secs, and comparison 7.36292 sec, and warnIfPerfScore > 0.8, and perfScore=2.43283]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.98053 secs, and comparison 8.47568 sec, and warnIfPerfScore > 1.4, and perfScore=2.84369]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 19.4897 secs, and comparison 3.88451 sec, and warnIfPerfScore > 0.65, and perfScore=0.199311]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 4.41642 secs, and comparison 38.1156 sec, and warnIfPerfScore > 4.4, and perfScore=8.63044]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.3411 secs, and comparison 3.77389 sec, and warnIfPerfScore > 0.6, and perfScore=0.282877]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.5977 secs, and comparison 3.75239 sec, and warnIfPerfScore > 0.6, and perfScore=0.275958]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.7797 secs, and comparison 3.71002 sec, and warnIfPerfScore > 0.6, and perfScore=0.269239]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.5831 secs, and comparison 4.38879 sec, and warnIfPerfScore > 1.3, and perfScore=0.323107]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 21.4529 secs, and comparison 10.2358 sec, and warnIfPerfScore > 1.3, and perfScore=0.477127]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 18.9557 secs, and comparison 7.16192 sec, and warnIfPerfScore > 0.3, and perfScore=0.377824]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.37122 secs, and comparison 14.0818 sec, and warnIfPerfScore > 1.5, and perfScore=1.91038]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.31532 secs, and comparison 2.78177 sec, and warnIfPerfScore > 0.55, and perfScore=0.44048]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.83721 sec, and warnIfPerfScore > 0.1, and perfScore=0.055814]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.21659 sec, and warnIfPerfScore > 0.5, and perfScore=0.214439]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 21 seconds]]]

Succeeded
