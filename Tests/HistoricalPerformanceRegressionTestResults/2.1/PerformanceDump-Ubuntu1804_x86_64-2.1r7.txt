Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 31 21:23:3 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.05043 secs, and comparison 4.73214 sec, and warnIfPerfScore > 0.65, and perfScore=0.782116]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.12056 secs, and comparison 3.0145 sec, and warnIfPerfScore > 0.5, and perfScore=0.49252]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.99863 secs, and comparison 7.01346 sec, and warnIfPerfScore > 1.05, and perfScore=0.876832]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.04516 secs, and comparison 6.78014 sec, and warnIfPerfScore > 1.15, and perfScore=1.12158]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 3.86106 secs, and comparison 2.8004 sec, and warnIfPerfScore > 0.48, and perfScore=0.725293]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 4.48315 secs, and comparison 3.89894 sec, and warnIfPerfScore > 0.57, and perfScore=0.869689]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 3.54576 secs, and comparison 17.0978 sec, and warnIfPerfScore > 2.9, and perfScore=4.82203]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.08737 secs, and comparison 17.8128 sec, and warnIfPerfScore > 2.9, and perfScore=4.358]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 6.051 secs, and comparison 69.3589 sec, and warnIfPerfScore > 24, and perfScore=11.4624]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.17789 secs, and comparison 10.3093 sec, and warnIfPerfScore > 1.7, and perfScore=1.99102]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.78959 secs, and comparison 5.47343 sec, and warnIfPerfScore > 1.5, and perfScore=0.945393]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.84017 secs, and comparison 12.196 sec, and warnIfPerfScore > 2.1, and perfScore=4.2941]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.20581 secs, and comparison 4.49648 sec, and warnIfPerfScore > 1.6, and perfScore=1.06911]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 4.37569 secs, and comparison 1.89018 sec, and warnIfPerfScore > 0.23, and perfScore=0.431973]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.73858 secs, and comparison 4.82363 sec, and warnIfPerfScore > 1.3, and perfScore=1.29023]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.7533 secs, and comparison 7.3229 sec, and warnIfPerfScore > 1.2, and perfScore=1.95105]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 16.2963 secs, and comparison 1.70226 sec, and warnIfPerfScore > 0.33, and perfScore=0.104457]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.03616 secs, and comparison 42.6209 sec, and warnIfPerfScore > 6, and perfScore=14.0378]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.05055 secs, and comparison 6.78435 sec, and warnIfPerfScore > 0.8, and perfScore=2.22397]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.18234 secs, and comparison 7.41892 sec, and warnIfPerfScore > 1.4, and perfScore=2.33128]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.1249 secs, and comparison 3.71981 sec, and warnIfPerfScore > 0.65, and perfScore=0.334367]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 5.91413 secs, and comparison 39.5108 sec, and warnIfPerfScore > 4.4, and perfScore=6.68075]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7626 secs, and comparison 3.67714 sec, and warnIfPerfScore > 0.6, and perfScore=0.312612]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.7359 secs, and comparison 3.67346 sec, and warnIfPerfScore > 0.6, and perfScore=0.288434]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.7499 secs, and comparison 3.67658 sec, and warnIfPerfScore > 0.6, and perfScore=0.288362]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.4171 secs, and comparison 4.60007 sec, and warnIfPerfScore > 1.3, and perfScore=0.370462]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 19.1345 secs, and comparison 10.2021 sec, and warnIfPerfScore > 1.3, and perfScore=0.533176]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 18.847 secs, and comparison 8.13393 sec, and warnIfPerfScore > 0.3, and perfScore=0.431577]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.9076 secs, and comparison 16.5015 sec, and warnIfPerfScore > 1.5, and perfScore=1.3858]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.33701 secs, and comparison 3.59643 sec, and warnIfPerfScore > 0.55, and perfScore=0.490177]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 15 secs, and comparison 1.34357 sec, and warnIfPerfScore > 0.1, and perfScore=0.0895716]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.82444 sec, and warnIfPerfScore > 0.5, and perfScore=0.254963]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 35 seconds]]]

Succeeded
