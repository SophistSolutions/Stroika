Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 26 3:16:30 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.6482 secs, and comparison 4.77167 sec, and warnIfPerfScore > 0.65, and perfScore=0.844812]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.5809 secs, and comparison 3.13006 sec, and warnIfPerfScore > 0.5, and perfScore=0.560853]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.45208 secs, and comparison 7.22931 sec, and warnIfPerfScore > 1.05, and perfScore=1.12046]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.17814 secs, and comparison 7.12982 sec, and warnIfPerfScore > 1.15, and perfScore=1.15404]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 3.9519 secs, and comparison 2.36082 sec, and warnIfPerfScore > 0.48, and perfScore=0.59739]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 4.66852 secs, and comparison 2.95227 sec, and warnIfPerfScore > 0.57, and perfScore=0.632378]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.38672 secs, and comparison 16.9306 sec, and warnIfPerfScore > 2.9, and perfScore=4.99914]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 3.876 secs, and comparison 17.0736 sec, and warnIfPerfScore > 2.9, and perfScore=4.40495]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 5.88766 secs, and comparison 56.2551 sec, and warnIfPerfScore > 24, and perfScore=9.55475]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.35731 secs, and comparison 9.98201 sec, and warnIfPerfScore > 1.7, and perfScore=1.86325]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.74483 secs, and comparison 6.56921 sec, and warnIfPerfScore > 1.5, and perfScore=0.973962]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 2.89669 secs, and comparison 12.1453 sec, and warnIfPerfScore > 2.1, and perfScore=4.19284]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 4.32779 secs, and comparison 3.73619 sec, and warnIfPerfScore > 1.6, and perfScore=0.863301]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.55894 secs, and comparison 1.58826 sec, and warnIfPerfScore > 0.23, and perfScore=0.348382]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.1058 secs, and comparison 4.87266 sec, and warnIfPerfScore > 1.3, and perfScore=1.18677]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.01764 secs, and comparison 7.33533 sec, and warnIfPerfScore > 1.2, and perfScore=2.43082]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 20.2571 secs, and comparison 2.0598 sec, and warnIfPerfScore > 0.33, and perfScore=0.101683]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.82598 secs, and comparison 42.1813 sec, and warnIfPerfScore > 6, and perfScore=14.9262]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.82636 secs, and comparison 6.99553 sec, and warnIfPerfScore > 0.8, and perfScore=2.47511]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.01849 secs, and comparison 8.21864 sec, and warnIfPerfScore > 1.4, and perfScore=2.72276]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 21.6283 secs, and comparison 3.6798 sec, and warnIfPerfScore > 0.65, and perfScore=0.170139]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 4.61198 secs, and comparison 37.6831 sec, and warnIfPerfScore > 4.4, and perfScore=8.17071]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.7475 secs, and comparison 3.83824 sec, and warnIfPerfScore > 0.6, and perfScore=0.260263]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15.1098 secs, and comparison 3.70296 sec, and warnIfPerfScore > 0.6, and perfScore=0.245071]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.8303 secs, and comparison 3.75326 sec, and warnIfPerfScore > 0.6, and perfScore=0.271379]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.9205 secs, and comparison 4.44883 sec, and warnIfPerfScore > 1.3, and perfScore=0.319588]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 21.5158 secs, and comparison 10.6298 sec, and warnIfPerfScore > 1.3, and perfScore=0.494044]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.1835 secs, and comparison 7.27968 sec, and warnIfPerfScore > 0.3, and perfScore=0.379477]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.19361 secs, and comparison 13.8123 sec, and warnIfPerfScore > 1.5, and perfScore=1.92008]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.41264 secs, and comparison 3.13958 sec, and warnIfPerfScore > 0.55, and perfScore=0.489592]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.873832 sec, and warnIfPerfScore > 0.1, and perfScore=0.0582555]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23934 sec, and warnIfPerfScore > 0.5, and perfScore=0.215956]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 24 seconds]]]

Succeeded
