Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr 10 :49:11 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 5.77736 secs, and comparison 4.90489 sec, and warnIfPerfScore > 0.65, and perfScore=0.848986]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.63226 secs, and comparison 3.08978 sec, and warnIfPerfScore > 0.5, and perfScore=0.548587]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.67971 secs, and comparison 7.06525 sec, and warnIfPerfScore > 1.05, and perfScore=1.05772]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.1617 secs, and comparison 7.10323 sec, and warnIfPerfScore > 1.15, and perfScore=1.1528]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 3.87211 secs, and comparison 2.38157 sec, and warnIfPerfScore > 0.48, and perfScore=0.615058]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 4.5988 secs, and comparison 3.04268 sec, and warnIfPerfScore > 0.57, and perfScore=0.661626]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 3.58701 secs, and comparison 17.3093 sec, and warnIfPerfScore > 2.9, and perfScore=4.82556]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 4.2494 secs, and comparison 17.6265 sec, and warnIfPerfScore > 2.9, and perfScore=4.14799]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.59376 secs, and comparison 57.7826 sec, and warnIfPerfScore > 24, and perfScore=10.3298]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.11048 secs, and comparison 10.2042 sec, and warnIfPerfScore > 1.7, and perfScore=1.99672]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.58952 secs, and comparison 6.55617 sec, and warnIfPerfScore > 1.5, and perfScore=0.99494]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 3.01984 secs, and comparison 12.3321 sec, and warnIfPerfScore > 2.1, and perfScore=4.08369]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 4.38401 secs, and comparison 3.72602 sec, and warnIfPerfScore > 1.6, and perfScore=0.849911]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 4.45851 secs, and comparison 1.64136 sec, and warnIfPerfScore > 0.23, and perfScore=0.368142]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.81065 secs, and comparison 4.77653 sec, and warnIfPerfScore > 1.3, and perfScore=1.25347]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.14232 secs, and comparison 6.68771 sec, and warnIfPerfScore > 1.2, and perfScore=2.12827]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 20.4767 secs, and comparison 1.94938 sec, and warnIfPerfScore > 0.33, and perfScore=0.0951999]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.98004 secs, and comparison 42.3022 sec, and warnIfPerfScore > 6, and perfScore=14.1952]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.9716 secs, and comparison 6.64477 sec, and warnIfPerfScore > 0.8, and perfScore=2.23609]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.95799 secs, and comparison 8.20611 sec, and warnIfPerfScore > 1.4, and perfScore=2.77422]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 20.1794 secs, and comparison 3.7748 sec, and warnIfPerfScore > 0.65, and perfScore=0.187062]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 4.61813 secs, and comparison 37.9747 sec, and warnIfPerfScore > 4.4, and perfScore=8.22295]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.8265 secs, and comparison 3.88042 sec, and warnIfPerfScore > 0.6, and perfScore=0.280651]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.0837 secs, and comparison 3.75972 sec, and warnIfPerfScore > 0.6, and perfScore=0.266957]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.0863 secs, and comparison 3.82613 sec, and warnIfPerfScore > 0.6, and perfScore=0.27162]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.1834 secs, and comparison 4.30977 sec, and warnIfPerfScore > 1.3, and perfScore=0.30386]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 21.8369 secs, and comparison 10.4149 sec, and warnIfPerfScore > 1.3, and perfScore=0.47694]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.2757 secs, and comparison 7.27667 sec, and warnIfPerfScore > 0.3, and perfScore=0.377504]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.8584 secs, and comparison 14.2502 sec, and warnIfPerfScore > 1.5, and perfScore=1.81337]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.37816 secs, and comparison 3.3948 sec, and warnIfPerfScore > 0.55, and perfScore=0.532253]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.851675 sec, and warnIfPerfScore > 0.1, and perfScore=0.0567784]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.28269 sec, and warnIfPerfScore > 0.5, and perfScore=0.218846]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 26 seconds]]]

Succeeded
