Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 13:4:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.20863 secs, and comparison 4.30849 sec, and warnIfPerfScore > 0.65, and perfScore=0.597685]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.06626 secs, and comparison 2.77874 sec, and warnIfPerfScore > 0.5, and perfScore=0.393241]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.13859 secs, and comparison 7.94634 sec, and warnIfPerfScore > 1.05, and perfScore=0.869538]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.01841 secs, and comparison 7.70401 sec, and warnIfPerfScore > 1.15, and perfScore=1.09769]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.24244 secs, and comparison 2.49441 sec, and warnIfPerfScore > 0.48, and perfScore=0.30263]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.34453 secs, and comparison 2.81186 sec, and warnIfPerfScore > 0.57, and perfScore=0.336971]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.89049 secs, and comparison 21.3072 sec, and warnIfPerfScore > 2.9, and perfScore=2.39663]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.32326 secs, and comparison 23.1486 sec, and warnIfPerfScore > 2.9, and perfScore=2.48288]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.42354 secs, and comparison 160.921 sec, and warnIfPerfScore > 24, and perfScore=19.1037]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.28857 secs, and comparison 10.8624 sec, and warnIfPerfScore > 1.7, and perfScore=1.49033]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.88699 secs, and comparison 7.81475 sec, and warnIfPerfScore > 1.5, and perfScore=0.99084]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.11723 secs, and comparison 12.8801 sec, and warnIfPerfScore > 2.1, and perfScore=1.80971]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.70133 secs, and comparison 8.01817 sec, and warnIfPerfScore > 1.6, and perfScore=0.826503]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.079 secs, and comparison 1.31113 sec, and warnIfPerfScore > 0.23, and perfScore=0.130086]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3365 secs, and comparison 13.4481 sec, and warnIfPerfScore > 1.3, and perfScore=1.00836]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.1316 secs, and comparison 5.42835 sec, and warnIfPerfScore > 1.2, and perfScore=0.535783]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.29635 secs, and comparison 1.56096 sec, and warnIfPerfScore > 0.33, and perfScore=0.247914]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.75513 secs, and comparison 40.4491 sec, and warnIfPerfScore > 6, and perfScore=4.14644]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.72928 secs, and comparison 5.15272 sec, and warnIfPerfScore > 0.8, and perfScore=0.52961]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.77002 secs, and comparison 9.52786 sec, and warnIfPerfScore > 1.4, and perfScore=0.975213]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.26986 secs, and comparison 3.51809 sec, and warnIfPerfScore > 0.65, and perfScore=0.561112]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.0978 secs, and comparison 37.4291 sec, and warnIfPerfScore > 4.4, and perfScore=3.70664]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.49219 secs, and comparison 3.46023 sec, and warnIfPerfScore > 0.6, and perfScore=0.532984]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.40919 secs, and comparison 3.64489 sec, and warnIfPerfScore > 0.6, and perfScore=0.568698]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.3897 secs, and comparison 3.48799 sec, and warnIfPerfScore > 0.6, and perfScore=0.545876]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.40152 secs, and comparison 5.0431 sec, and warnIfPerfScore > 1.3, and perfScore=0.787797]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.01631 secs, and comparison 9.0391 sec, and warnIfPerfScore > 1.3, and perfScore=1.2883]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 46.396 secs, and comparison 6.38457 sec, and warnIfPerfScore > 0.3, and perfScore=0.13761]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.49975 secs, and comparison 12.1628 sec, and warnIfPerfScore > 1.5, and perfScore=1.43096]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.45921 secs, and comparison 2.97842 sec, and warnIfPerfScore > 0.55, and perfScore=0.399294]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.821386 sec, and warnIfPerfScore > 0.1, and perfScore=0.054759]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.03614 sec, and warnIfPerfScore > 0.5, and perfScore=0.202409]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.0061 secs, and comparison 14.239 sec, and warnIfPerfScore > 2, and perfScore=1.77851]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.20646 secs, and comparison 30.0688 sec, and warnIfPerfScore > 3.6, and perfScore=3.26605]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 14 seconds]]]

Succeeded
