Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 14:16:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.7019 secs, and comparison 5.28974 sec, and warnIfPerfScore > 0.65, and perfScore=0.545227]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.0189 secs, and comparison 3.97125 sec, and warnIfPerfScore > 0.5, and perfScore=0.396375]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 13.251 secs, and comparison 10.7357 sec, and warnIfPerfScore > 1.05, and perfScore=0.81018]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.69928 secs, and comparison 14.4858 sec, and warnIfPerfScore > 1.15, and perfScore=1.49349]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.5086 secs, and comparison 3.30743 sec, and warnIfPerfScore > 0.48, and perfScore=0.244839]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.5159 secs, and comparison 4.05653 sec, and warnIfPerfScore > 0.57, and perfScore=0.32411]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.6227 secs, and comparison 30.5745 sec, and warnIfPerfScore > 2.9, and perfScore=2.63058]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.1292 secs, and comparison 31.9921 sec, and warnIfPerfScore > 2.9, and perfScore=2.43671]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 13.349 secs, and comparison 162.118 sec, and warnIfPerfScore > 24, and perfScore=12.1446]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.86264 secs, and comparison 14.7648 sec, and warnIfPerfScore > 1.7, and perfScore=1.66596]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 16.0006 secs, and comparison 15.6863 sec, and warnIfPerfScore > 1.5, and perfScore=0.980362]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.0293 secs, and comparison 16.346 sec, and warnIfPerfScore > 2.1, and perfScore=1.35885]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 16.0558 secs, and comparison 8.49771 sec, and warnIfPerfScore > 1.6, and perfScore=0.529261]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 16.2007 secs, and comparison 1.11312 sec, and warnIfPerfScore > 0.23, and perfScore=0.0687084]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.8863 secs, and comparison 13.6508 sec, and warnIfPerfScore > 1.3, and perfScore=0.983046]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2768 secs, and comparison 12.6402 sec, and warnIfPerfScore > 1.2, and perfScore=1.0296]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 18.3811 secs, and comparison 4.52789 sec, and warnIfPerfScore > 0.33, and perfScore=0.246334]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 12.4762 secs, and comparison 45.3177 sec, and warnIfPerfScore > 6, and perfScore=3.63234]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3144 secs, and comparison 12.7994 sec, and warnIfPerfScore > 0.8, and perfScore=1.03938]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.3699 secs, and comparison 18.1917 sec, and warnIfPerfScore > 1.4, and perfScore=1.47065]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 18.5791 secs, and comparison 4.75915 sec, and warnIfPerfScore > 0.65, and perfScore=0.256156]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.7539 secs, and comparison 40.9724 sec, and warnIfPerfScore > 4.4, and perfScore=2.97897]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.6982 secs, and comparison 4.34963 sec, and warnIfPerfScore > 0.6, and perfScore=0.245767]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.5919 secs, and comparison 4.35303 sec, and warnIfPerfScore > 0.6, and perfScore=0.247446]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 17.9346 secs, and comparison 4.33222 sec, and warnIfPerfScore > 0.6, and perfScore=0.241556]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 17.9442 secs, and comparison 11.2845 sec, and warnIfPerfScore > 1.3, and perfScore=0.628865]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 20.6434 secs, and comparison 15.7525 sec, and warnIfPerfScore > 1.3, and perfScore=0.763079]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 84.7008 secs, and comparison 11.5793 sec, and warnIfPerfScore > 0.3, and perfScore=0.136709]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.7587 secs, and comparison 18.9775 sec, and warnIfPerfScore > 1.5, and perfScore=1.28585]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.1017 secs, and comparison 5.15462 sec, and warnIfPerfScore > 0.55, and perfScore=0.320129]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 15 secs, and comparison 1.27642 sec, and warnIfPerfScore > 0.1, and perfScore=0.0850947]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.97942 sec, and warnIfPerfScore > 0.5, and perfScore=0.265295]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.4024 secs, and comparison 25.5091 sec, and warnIfPerfScore > 2, and perfScore=1.55521]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 17.901 secs, and comparison 30.2106 sec, and warnIfPerfScore > 3.6, and perfScore=1.68765]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 34 seconds]]]

Succeeded
