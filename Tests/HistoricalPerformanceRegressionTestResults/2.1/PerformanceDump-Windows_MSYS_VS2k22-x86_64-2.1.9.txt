Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 10 16:27:42 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.74639 secs, and comparison 4.76663 sec, and warnIfPerfScore > 0.65, and perfScore=0.8295]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.41443 secs, and comparison 2.95664 sec, and warnIfPerfScore > 0.5, and perfScore=0.460937]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.44681 secs, and comparison 8.32484 sec, and warnIfPerfScore > 1.05, and perfScore=0.881233]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.80916 secs, and comparison 8.26234 sec, and warnIfPerfScore > 1.15, and perfScore=1.05803]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.69993 secs, and comparison 2.4925 sec, and warnIfPerfScore > 0.48, and perfScore=0.25696]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.69234 secs, and comparison 3.1539 sec, and warnIfPerfScore > 0.57, and perfScore=0.325401]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.66862 secs, and comparison 22.5091 sec, and warnIfPerfScore > 2.9, and perfScore=2.93522]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 8.0587 secs, and comparison 23.1089 sec, and warnIfPerfScore > 2.9, and perfScore=2.86758]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.86618 secs, and comparison 142.13 sec, and warnIfPerfScore > 24, and perfScore=20.7]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.55414 secs, and comparison 11.3813 sec, and warnIfPerfScore > 1.7, and perfScore=1.7365]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 6.72488 secs, and comparison 6.29768 sec, and warnIfPerfScore > 1.5, and perfScore=0.936475]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.5714 secs, and comparison 13.7591 sec, and warnIfPerfScore > 2.1, and perfScore=2.09378]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.57405 secs, and comparison 4.68669 sec, and warnIfPerfScore > 1.6, and perfScore=0.618782]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 8.05394 secs, and comparison 0.81853 sec, and warnIfPerfScore > 0.23, and perfScore=0.101631]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.4759 secs, and comparison 13.7511 sec, and warnIfPerfScore > 1.3, and perfScore=1.02042]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 9.8184 secs, and comparison 6.40668 sec, and warnIfPerfScore > 1.2, and perfScore=0.652518]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.0092 secs, and comparison 2.0914 sec, and warnIfPerfScore > 0.33, and perfScore=0.208947]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.20911 secs, and comparison 43.3993 sec, and warnIfPerfScore > 6, and perfScore=4.71265]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.20564 secs, and comparison 6.55315 sec, and warnIfPerfScore > 0.8, and perfScore=0.711862]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 9.24023 secs, and comparison 8.46861 sec, and warnIfPerfScore > 1.4, and perfScore=0.916494]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.0488 secs, and comparison 3.93729 sec, and warnIfPerfScore > 0.65, and perfScore=0.391816]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.84025 secs, and comparison 40.0843 sec, and warnIfPerfScore > 4.4, and perfScore=4.07351]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.69948 secs, and comparison 3.76999 sec, and warnIfPerfScore > 0.6, and perfScore=0.38868]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.0996 secs, and comparison 3.78779 sec, and warnIfPerfScore > 0.6, and perfScore=0.375043]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.8814 secs, and comparison 3.81376 sec, and warnIfPerfScore > 0.6, and perfScore=0.385954]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.85914 secs, and comparison 6.25446 sec, and warnIfPerfScore > 1.3, and perfScore=0.634382]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.3736 secs, and comparison 9.73646 sec, and warnIfPerfScore > 1.3, and perfScore=0.93858]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 45.2927 secs, and comparison 7.78353 sec, and warnIfPerfScore > 0.3, and perfScore=0.17185]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.15028 secs, and comparison 11.3475 sec, and warnIfPerfScore > 1.5, and perfScore=1.587]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.47911 secs, and comparison 3.51169 sec, and warnIfPerfScore > 0.55, and perfScore=0.469533]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 15 secs, and comparison 0.678511 sec, and warnIfPerfScore > 0.1, and perfScore=0.0452341]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.26488 sec, and warnIfPerfScore > 0.5, and perfScore=0.217659]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.65109 secs, and comparison 14.1594 sec, and warnIfPerfScore > 2, and perfScore=1.85064]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.2214 secs, and comparison 16.9776 sec, and warnIfPerfScore > 3.6, and perfScore=1.84111]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes]]]

Succeeded
