Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed May 11 21:53:54 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.05303 secs, and comparison 4.37133 sec, and warnIfPerfScore > 0.65, and perfScore=0.61978]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.09789 secs, and comparison 2.88971 sec, and warnIfPerfScore > 0.5, and perfScore=0.407122]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.49374 secs, and comparison 7.54594 sec, and warnIfPerfScore > 1.05, and perfScore=0.888412]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.83575 secs, and comparison 7.46446 sec, and warnIfPerfScore > 1.15, and perfScore=1.09197]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.01285 secs, and comparison 2.35348 sec, and warnIfPerfScore > 0.48, and perfScore=0.293713]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.75072 secs, and comparison 2.77537 sec, and warnIfPerfScore > 0.57, and perfScore=0.358079]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.18159 secs, and comparison 20.794 sec, and warnIfPerfScore > 2.9, and perfScore=2.54155]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.21704 secs, and comparison 21.4339 sec, and warnIfPerfScore > 2.9, and perfScore=2.60847]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.91826 secs, and comparison 145.993 sec, and warnIfPerfScore > 24, and perfScore=18.4375]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.20488 secs, and comparison 11.0252 sec, and warnIfPerfScore > 1.7, and perfScore=1.53024]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.67718 secs, and comparison 7.52968 sec, and warnIfPerfScore > 1.5, and perfScore=0.980787]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.79595 secs, and comparison 12.8697 sec, and warnIfPerfScore > 2.1, and perfScore=1.89372]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 13.6626 secs, and comparison 7.62191 sec, and warnIfPerfScore > 1.6, and perfScore=0.557868]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 14.2208 secs, and comparison 1.30669 sec, and warnIfPerfScore > 0.23, and perfScore=0.091886]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2465 secs, and comparison 13.0701 sec, and warnIfPerfScore > 1.3, and perfScore=1.06725]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.73622 secs, and comparison 5.39949 sec, and warnIfPerfScore > 1.2, and perfScore=0.554578]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.14776 secs, and comparison 1.48796 sec, and warnIfPerfScore > 0.33, and perfScore=0.242032]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.4051 secs, and comparison 39.8303 sec, and warnIfPerfScore > 6, and perfScore=4.23497]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.4212 secs, and comparison 5.18236 sec, and warnIfPerfScore > 0.8, and perfScore=0.550075]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.59422 secs, and comparison 9.32419 sec, and warnIfPerfScore > 1.4, and perfScore=0.971855]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.09721 secs, and comparison 3.46817 sec, and warnIfPerfScore > 0.65, and perfScore=0.568812]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.88395 secs, and comparison 37.1422 sec, and warnIfPerfScore > 4.4, and perfScore=3.75783]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.29241 secs, and comparison 3.42186 sec, and warnIfPerfScore > 0.6, and perfScore=0.543807]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.25899 secs, and comparison 3.44425 sec, and warnIfPerfScore > 0.6, and perfScore=0.550289]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.28138 secs, and comparison 3.43948 sec, and warnIfPerfScore > 0.6, and perfScore=0.547568]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.32957 secs, and comparison 4.69228 sec, and warnIfPerfScore > 1.3, and perfScore=0.741327]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.79444 secs, and comparison 8.69473 sec, and warnIfPerfScore > 1.3, and perfScore=1.27968]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.1358 secs, and comparison 5.81624 sec, and warnIfPerfScore > 0.3, and perfScore=0.126068]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.06302 secs, and comparison 11.976 sec, and warnIfPerfScore > 1.5, and perfScore=1.4853]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.53315 secs, and comparison 2.92589 sec, and warnIfPerfScore > 0.55, and perfScore=0.388402]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.760747 sec, and warnIfPerfScore > 0.1, and perfScore=0.0507165]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.05507 sec, and warnIfPerfScore > 0.5, and perfScore=0.203672]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.03888 secs, and comparison 13.2833 sec, and warnIfPerfScore > 2, and perfScore=1.65238]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.88965 secs, and comparison 28.6449 sec, and warnIfPerfScore > 3.6, and perfScore=3.22227]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 45 seconds]]]

Succeeded
