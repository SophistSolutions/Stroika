Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 28 3:20:34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 3.01039 secs, and comparison 1.30166 sec, and warnIfPerfScore > 0.65, and perfScore=0.43239]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.14887 secs, and comparison 2.91293 sec, and warnIfPerfScore > 0.5, and perfScore=0.925071]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.46722 secs, and comparison 6.60954 sec, and warnIfPerfScore > 1.05, and perfScore=2.67894]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.05999 secs, and comparison 6.60671 sec, and warnIfPerfScore > 1.15, and perfScore=3.20715]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.06699 secs, and comparison 1.01876 sec, and warnIfPerfScore > 0.48, and perfScore=0.250495]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.80942 secs, and comparison 1.1753 sec, and warnIfPerfScore > 0.57, and perfScore=0.244374]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.54865 secs, and comparison 11.7838 sec, and warnIfPerfScore > 2.9, and perfScore=3.32064]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.06013 secs, and comparison 12.3002 sec, and warnIfPerfScore > 2.9, and perfScore=3.02951]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 5.25795 secs, and comparison 41.8145 sec, and warnIfPerfScore > 24, and perfScore=7.95262]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.39727 secs, and comparison 7.27178 sec, and warnIfPerfScore > 1.7, and perfScore=1.34731]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.76222 secs, and comparison 5.4064 sec, and warnIfPerfScore > 1.5, and perfScore=0.938251]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.97438 secs, and comparison 9.12923 sec, and warnIfPerfScore > 2.1, and perfScore=3.06928]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.94576 secs, and comparison 3.61726 sec, and warnIfPerfScore > 1.6, and perfScore=0.916748]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 4.17473 secs, and comparison 1.33216 sec, and warnIfPerfScore > 0.23, and perfScore=0.319101]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.70926 secs, and comparison 4.22241 sec, and warnIfPerfScore > 1.3, and perfScore=1.13834]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.45071 secs, and comparison 6.84915 sec, and warnIfPerfScore > 1.2, and perfScore=1.98485]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 16.0533 secs, and comparison 1.74286 sec, and warnIfPerfScore > 0.33, and perfScore=0.108567]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.35057 secs, and comparison 40.7823 sec, and warnIfPerfScore > 6, and perfScore=12.1718]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 3.37038 secs, and comparison 6.22938 sec, and warnIfPerfScore > 0.8, and perfScore=1.84827]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.39397 secs, and comparison 8.02626 sec, and warnIfPerfScore > 1.4, and perfScore=2.36486]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.712 secs, and comparison 3.64606 sec, and warnIfPerfScore > 0.65, and perfScore=0.232055]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.3892 secs, and comparison 37.2788 sec, and warnIfPerfScore > 4.4, and perfScore=8.49331]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.5967 secs, and comparison 3.69294 sec, and warnIfPerfScore > 0.6, and perfScore=0.318448]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7232 secs, and comparison 3.64948 sec, and warnIfPerfScore > 0.6, and perfScore=0.311306]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7231 secs, and comparison 3.61056 sec, and warnIfPerfScore > 0.6, and perfScore=0.307987]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.6991 secs, and comparison 4.17224 sec, and warnIfPerfScore > 1.3, and perfScore=0.356628]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 18.9349 secs, and comparison 9.12448 sec, and warnIfPerfScore > 1.3, and perfScore=0.481886]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 20.3719 secs, and comparison 5.62265 sec, and warnIfPerfScore > 0.3, and perfScore=0.275999]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.35709 secs, and comparison 12.9859 sec, and warnIfPerfScore > 1.5, and perfScore=1.76508]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.35455 secs, and comparison 2.05831 sec, and warnIfPerfScore > 0.55, and perfScore=0.323912]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.845106 sec, and warnIfPerfScore > 0.1, and perfScore=0.0563404]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15 secs, and comparison 1.41749 sec, and warnIfPerfScore > 0.5, and perfScore=0.0944994]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 56 seconds]]]

Succeeded
