Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  3 15:58:36 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.3003 secs, and comparison 6.46998 sec, and warnIfPerfScore > 0.62, and perfScore=0.628137]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.0455 secs, and comparison 7.01844 sec, and warnIfPerfScore > 0.5, and perfScore=0.698663]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 18.7634 secs, and comparison 14.9515 sec, and warnIfPerfScore > 1.05, and perfScore=0.796844]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 37.336 secs, and comparison 6.06679 sec, and warnIfPerfScore > 0.48, and perfScore=0.162492]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 34.558 secs, and comparison 5.91894 sec, and warnIfPerfScore > 0.55, and perfScore=0.171276]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 24.7862 secs, and comparison 56.9002 sec, and warnIfPerfScore > 2.9, and perfScore=2.29564]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 24.0107 secs, and comparison 60.8328 sec, and warnIfPerfScore > 2.9, and perfScore=2.53357]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 22.1837 secs, and comparison 177.07 sec, and warnIfPerfScore > 9.7, and perfScore=7.98198]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.2797 secs, and comparison 27.8691 sec, and warnIfPerfScore > 1.6, and perfScore=1.44552]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.87589 secs, and comparison 6.5275 sec, and warnIfPerfScore > 1.5, and perfScore=0.735418]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.3588 secs, and comparison 32.8359 sec, and warnIfPerfScore > 2.1, and perfScore=2.28682]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.3877 secs, and comparison 6.33475 sec, and warnIfPerfScore > 1.3, and perfScore=0.556282]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.9694 secs, and comparison 1.92593 sec, and warnIfPerfScore > 0.18, and perfScore=0.160905]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.5432 secs, and comparison 18.3992 sec, and warnIfPerfScore > 1.3, and perfScore=1.11219]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 13.7511 secs, and comparison 12.3296 sec, and warnIfPerfScore > 1.2, and perfScore=0.896623]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 16.9914 secs, and comparison 3.03776 sec, and warnIfPerfScore > 0.33, and perfScore=0.178782]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 13.6094 secs, and comparison 61.4958 sec, and warnIfPerfScore > 6, and perfScore=4.51864]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.0355 secs, and comparison 5.75632 sec, and warnIfPerfScore > 0.5, and perfScore=0.410126]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 18.2157 secs, and comparison 53.5053 sec, and warnIfPerfScore > 4.4, and perfScore=2.93731]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.2168 secs, and comparison 5.062 sec, and warnIfPerfScore > 0.6, and perfScore=0.382999]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 40.2296 secs, and comparison 49.3196 sec, and warnIfPerfScore > 1.5, and perfScore=1.22595]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.98081 secs, and comparison 6.39343 sec, and warnIfPerfScore > 0.55, and perfScore=0.801101]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15 secs, and comparison 7.04142 sec, and warnIfPerfScore > 0.25, and perfScore=0.469428]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.10718 sec, and warnIfPerfScore > 0.5, and perfScore=0.273812]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 17 seconds]]]

Succeeded
