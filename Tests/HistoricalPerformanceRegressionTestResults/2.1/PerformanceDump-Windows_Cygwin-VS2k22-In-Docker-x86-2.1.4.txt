Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 4:45:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.73557 secs, and comparison 5.06421 sec, and warnIfPerfScore > 0.65, and perfScore=0.75186]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.75186}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.88297 secs, and comparison 2.57289 sec, and warnIfPerfScore > 0.5, and perfScore=0.373805]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.16259 secs, and comparison 6.98819 sec, and warnIfPerfScore > 1.05, and perfScore=0.856124]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.38122 secs, and comparison 7.04326 sec, and warnIfPerfScore > 1.15, and perfScore=1.10375]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.95264 secs, and comparison 2.07829 sec, and warnIfPerfScore > 0.48, and perfScore=0.261333]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.04269 secs, and comparison 2.55506 sec, and warnIfPerfScore > 0.57, and perfScore=0.317688]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.05324 secs, and comparison 19.3335 sec, and warnIfPerfScore > 2.9, and perfScore=2.40071]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.20948 secs, and comparison 20.1561 sec, and warnIfPerfScore > 2.9, and perfScore=2.45522]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.50613 secs, and comparison 139.017 sec, and warnIfPerfScore > 24, and perfScore=18.5205]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.06778 secs, and comparison 9.93522 sec, and warnIfPerfScore > 1.7, and perfScore=1.40571]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.55264 secs, and comparison 7.32267 sec, and warnIfPerfScore > 1.5, and perfScore=0.969551]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.49445 secs, and comparison 11.6389 sec, and warnIfPerfScore > 2.1, and perfScore=1.79212]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.50835 secs, and comparison 6.42299 sec, and warnIfPerfScore > 1.6, and perfScore=0.754904]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.94631 secs, and comparison 1.22425 sec, and warnIfPerfScore > 0.23, and perfScore=0.136845]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3175 secs, and comparison 12.5605 sec, and warnIfPerfScore > 1.3, and perfScore=1.01972]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.48599 secs, and comparison 5.35279 sec, and warnIfPerfScore > 1.2, and perfScore=0.564283]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.88025 secs, and comparison 2.10291 sec, and warnIfPerfScore > 0.33, and perfScore=0.236808]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.11317 secs, and comparison 37.4815 sec, and warnIfPerfScore > 6, and perfScore=4.11289]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 9.10072 secs, and comparison 5.92973 sec, and warnIfPerfScore > 0.8, and perfScore=0.651567]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.11384 secs, and comparison 8.82514 sec, and warnIfPerfScore > 1.4, and perfScore=0.968323]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.89874 secs, and comparison 3.35729 sec, and warnIfPerfScore > 0.65, and perfScore=0.377276]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.52475 secs, and comparison 34.8517 sec, and warnIfPerfScore > 4.4, and perfScore=3.65907]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.76972 secs, and comparison 3.32008 sec, and warnIfPerfScore > 0.6, and perfScore=0.378585]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.80168 secs, and comparison 3.3337 sec, and warnIfPerfScore > 0.6, and perfScore=0.378757]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.77839 secs, and comparison 3.34086 sec, and warnIfPerfScore > 0.6, and perfScore=0.380578]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 8.82298 secs, and comparison 4.81545 sec, and warnIfPerfScore > 1.3, and perfScore=0.545785]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.45608 secs, and comparison 8.12436 sec, and warnIfPerfScore > 1.3, and perfScore=0.859168]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 43.5389 secs, and comparison 5.61964 sec, and warnIfPerfScore > 0.3, and perfScore=0.129072]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.66865 secs, and comparison 11.3205 sec, and warnIfPerfScore > 1.5, and perfScore=1.47621]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.86575 secs, and comparison 2.67684 sec, and warnIfPerfScore > 0.55, and perfScore=0.389882]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.737408 sec, and warnIfPerfScore > 0.1, and perfScore=0.0491605]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.1122 sec, and warnIfPerfScore > 0.5, and perfScore=0.20748]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.62696 secs, and comparison 12.3726 sec, and warnIfPerfScore > 2, and perfScore=1.62221]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.60899 secs, and comparison 28.2535 sec, and warnIfPerfScore > 3.6, and perfScore=3.28186]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 21 seconds]]]

Succeeded
