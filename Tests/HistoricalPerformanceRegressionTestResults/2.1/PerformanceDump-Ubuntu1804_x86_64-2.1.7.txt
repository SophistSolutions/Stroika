Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 22 23:14:39 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 6.27913 secs, and comparison 5.22988 sec, and warnIfPerfScore > 0.65, and perfScore=0.832899]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.10788 secs, and comparison 3.04074 sec, and warnIfPerfScore > 0.5, and perfScore=0.497839]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.56871 secs, and comparison 6.86889 sec, and warnIfPerfScore > 1.05, and perfScore=1.0457]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.07603 secs, and comparison 6.90535 sec, and warnIfPerfScore > 1.15, and perfScore=1.13649]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 3.94134 secs, and comparison 2.60335 sec, and warnIfPerfScore > 0.48, and perfScore=0.660524]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 4.6498 secs, and comparison 3.50605 sec, and warnIfPerfScore > 0.57, and perfScore=0.754021]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 4.11672 secs, and comparison 16.9203 sec, and warnIfPerfScore > 2.9, and perfScore=4.11013]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.02505 secs, and comparison 17.6528 sec, and warnIfPerfScore > 2.9, and perfScore=4.38573]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.03172 secs, and comparison 54.0358 sec, and warnIfPerfScore > 24, and perfScore=10.739]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.22632 secs, and comparison 10.3648 sec, and warnIfPerfScore > 1.7, and perfScore=1.98319]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.87098 secs, and comparison 6.51929 sec, and warnIfPerfScore > 1.5, and perfScore=0.948814]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.88364 secs, and comparison 12.3158 sec, and warnIfPerfScore > 2.1, and perfScore=4.27091]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.48712 secs, and comparison 4.738 sec, and warnIfPerfScore > 1.6, and perfScore=1.05591]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 4.82546 secs, and comparison 2.0719 sec, and warnIfPerfScore > 0.23, and perfScore=0.429369]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.9832 secs, and comparison 4.7826 sec, and warnIfPerfScore > 1.3, and perfScore=1.20069]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.14562 secs, and comparison 7.15717 sec, and warnIfPerfScore > 1.2, and perfScore=2.27528]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 19.3844 secs, and comparison 1.63823 sec, and warnIfPerfScore > 0.33, and perfScore=0.0845128]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.12488 secs, and comparison 42.3134 sec, and warnIfPerfScore > 6, and perfScore=13.5408]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.07873 secs, and comparison 6.92038 sec, and warnIfPerfScore > 0.8, and perfScore=2.2478]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.09989 secs, and comparison 7.54987 sec, and warnIfPerfScore > 1.4, and perfScore=2.43553]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.6855 secs, and comparison 3.71769 sec, and warnIfPerfScore > 0.65, and perfScore=0.293065]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 6.27295 secs, and comparison 37.9495 sec, and warnIfPerfScore > 4.4, and perfScore=6.0497]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.5476 secs, and comparison 3.67535 sec, and warnIfPerfScore > 0.6, and perfScore=0.271292]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.7623 secs, and comparison 3.65979 sec, and warnIfPerfScore > 0.6, and perfScore=0.247915]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.0488 secs, and comparison 3.58002 sec, and warnIfPerfScore > 0.6, and perfScore=0.237893]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.7065 secs, and comparison 4.58145 sec, and warnIfPerfScore > 1.3, and perfScore=0.311526]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 21.5781 secs, and comparison 10.4559 sec, and warnIfPerfScore > 1.3, and perfScore=0.48456]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.2914 secs, and comparison 7.33136 sec, and warnIfPerfScore > 0.3, and perfScore=0.380032]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.345 secs, and comparison 12.782 sec, and warnIfPerfScore > 1.5, and perfScore=1.5317]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.06573 secs, and comparison 2.909 sec, and warnIfPerfScore > 0.55, and perfScore=0.411705]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.846342 sec, and warnIfPerfScore > 0.1, and perfScore=0.0564228]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.26918 sec, and warnIfPerfScore > 0.5, and perfScore=0.217945]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 20 seconds]]]

Succeeded
