Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 19:16:38 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.75517 secs, and comparison 4.20306 sec, and warnIfPerfScore > 0.65, and perfScore=0.622199]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.75867 secs, and comparison 2.77165 sec, and warnIfPerfScore > 0.5, and perfScore=0.357233]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.26792 secs, and comparison 7.22937 sec, and warnIfPerfScore > 1.05, and perfScore=0.874388]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.56175 secs, and comparison 7.27661 sec, and warnIfPerfScore > 1.15, and perfScore=1.10894]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.47207 secs, and comparison 2.23582 sec, and warnIfPerfScore > 0.48, and perfScore=0.299224]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.37984 secs, and comparison 2.67801 sec, and warnIfPerfScore > 0.57, and perfScore=0.362881]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.96152 secs, and comparison 19.8724 sec, and warnIfPerfScore > 2.9, and perfScore=2.49606]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.00418 secs, and comparison 20.4988 sec, and warnIfPerfScore > 2.9, and perfScore=2.56102]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.60069 secs, and comparison 141.164 sec, and warnIfPerfScore > 24, and perfScore=18.5725]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.89969 secs, and comparison 10.6024 sec, and warnIfPerfScore > 1.7, and perfScore=1.53665]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.38037 secs, and comparison 7.25401 sec, and warnIfPerfScore > 1.5, and perfScore=0.982879]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.70346 secs, and comparison 12.3004 sec, and warnIfPerfScore > 2.1, and perfScore=1.83493]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.30792 secs, and comparison 7.32782 sec, and warnIfPerfScore > 1.6, and perfScore=0.882029]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.69704 secs, and comparison 1.24866 sec, and warnIfPerfScore > 0.23, and perfScore=0.143573]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9432 secs, and comparison 12.7115 sec, and warnIfPerfScore > 1.3, and perfScore=1.06433]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.6727 secs, and comparison 5.08435 sec, and warnIfPerfScore > 1.2, and perfScore=0.52564]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.84412 secs, and comparison 1.43211 sec, and warnIfPerfScore > 0.33, and perfScore=0.245051]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.24817 secs, and comparison 38.3038 sec, and warnIfPerfScore > 6, and perfScore=4.14177]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.30094 secs, and comparison 4.95007 sec, and warnIfPerfScore > 0.8, and perfScore=0.532212]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.33794 secs, and comparison 8.83533 sec, and warnIfPerfScore > 1.4, and perfScore=0.946176]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.86236 secs, and comparison 3.34418 sec, and warnIfPerfScore > 0.65, and perfScore=0.57045]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.51623 secs, and comparison 35.923 sec, and warnIfPerfScore > 4.4, and perfScore=3.77492]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.02861 secs, and comparison 3.33273 sec, and warnIfPerfScore > 0.6, and perfScore=0.552818]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.026 secs, and comparison 3.3205 sec, and warnIfPerfScore > 0.6, and perfScore=0.551029]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.02041 secs, and comparison 3.32982 sec, and warnIfPerfScore > 0.6, and perfScore=0.553089]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.01861 secs, and comparison 4.53234 sec, and warnIfPerfScore > 1.3, and perfScore=0.753053]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.47457 secs, and comparison 8.04164 sec, and warnIfPerfScore > 1.3, and perfScore=1.24203]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 44.3666 secs, and comparison 5.5399 sec, and warnIfPerfScore > 0.3, and perfScore=0.124866]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.00691 secs, and comparison 11.6656 sec, and warnIfPerfScore > 1.5, and perfScore=1.45695]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.89384 secs, and comparison 2.95729 sec, and warnIfPerfScore > 0.55, and perfScore=0.428976]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.746107 sec, and warnIfPerfScore > 0.1, and perfScore=0.0497404]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.89662 sec, and warnIfPerfScore > 0.5, and perfScore=0.193108]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.60555 secs, and comparison 12.9884 sec, and warnIfPerfScore > 2, and perfScore=1.70775]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.61059 secs, and comparison 27.7009 sec, and warnIfPerfScore > 3.6, and perfScore=3.21707]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 8 seconds]]]

Succeeded
