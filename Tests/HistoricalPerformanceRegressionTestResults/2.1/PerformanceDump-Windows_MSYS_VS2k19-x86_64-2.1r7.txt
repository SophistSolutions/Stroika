Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr  2 2:48:1 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.6455 secs, and comparison 6.00109 sec, and warnIfPerfScore > 0.65, and perfScore=0.694129]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.16487 secs, and comparison 3.72382 sec, and warnIfPerfScore > 0.5, and perfScore=0.406315]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 12.1201 secs, and comparison 10.134 sec, and warnIfPerfScore > 1.05, and perfScore=0.836133]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.28109 secs, and comparison 10.2191 sec, and warnIfPerfScore > 1.15, and perfScore=1.10107]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.0545 secs, and comparison 3.10603 sec, and warnIfPerfScore > 0.48, and perfScore=0.30892]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.9926 secs, and comparison 4.14667 sec, and warnIfPerfScore > 0.57, and perfScore=0.414974]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.1151 secs, and comparison 30.1904 sec, and warnIfPerfScore > 2.9, and perfScore=2.71616]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.7256 secs, and comparison 31.9539 sec, and warnIfPerfScore > 2.9, and perfScore=2.51098]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 10.0642 secs, and comparison 155.877 sec, and warnIfPerfScore > 24, and perfScore=15.4883]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.11401 secs, and comparison 15.3848 sec, and warnIfPerfScore > 1.7, and perfScore=1.68803]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.3921 secs, and comparison 12.0016 sec, and warnIfPerfScore > 1.5, and perfScore=1.15487]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.22245 secs, and comparison 17.6148 sec, and warnIfPerfScore > 2.1, and perfScore=1.91]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.8671 secs, and comparison 6.66803 sec, and warnIfPerfScore > 1.6, and perfScore=0.56189]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 13.7196 secs, and comparison 1.02828 sec, and warnIfPerfScore > 0.23, and perfScore=0.0749495]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.873 secs, and comparison 13.9484 sec, and warnIfPerfScore > 1.3, and perfScore=1.00544]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.75732 secs, and comparison 8.72666 sec, and warnIfPerfScore > 1.2, and perfScore=0.894371]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 14.1144 secs, and comparison 2.89402 sec, and warnIfPerfScore > 0.33, and perfScore=0.205041]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 9.24831 secs, and comparison 50.2109 sec, and warnIfPerfScore > 6, and perfScore=5.4292]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.0058 secs, and comparison 8.63182 sec, and warnIfPerfScore > 0.8, and perfScore=0.862678]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.028 secs, and comparison 12.4604 sec, and warnIfPerfScore > 1.4, and perfScore=1.24256]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.6088 secs, and comparison 4.6966 sec, and warnIfPerfScore > 0.65, and perfScore=0.321491]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.487 secs, and comparison 45.9872 sec, and warnIfPerfScore > 4.4, and perfScore=4.00342]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.8239 secs, and comparison 4.17695 sec, and warnIfPerfScore > 0.6, and perfScore=0.302155]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.6079 secs, and comparison 4.34788 sec, and warnIfPerfScore > 0.6, and perfScore=0.319511]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.4749 secs, and comparison 4.0743 sec, and warnIfPerfScore > 0.6, and perfScore=0.302362]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 13.9307 secs, and comparison 9.5814 sec, and warnIfPerfScore > 1.3, and perfScore=0.687789]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 16.4395 secs, and comparison 13.9657 sec, and warnIfPerfScore > 1.3, and perfScore=0.849525]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 63.3885 secs, and comparison 11.8435 sec, and warnIfPerfScore > 0.3, and perfScore=0.186839]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.63057 secs, and comparison 16.5677 sec, and warnIfPerfScore > 1.5, and perfScore=1.72032]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.9945 secs, and comparison 4.69613 sec, and warnIfPerfScore > 0.55, and perfScore=0.391522]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.824971 sec, and warnIfPerfScore > 0.1, and perfScore=0.0549981]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.36563 sec, and warnIfPerfScore > 0.5, and perfScore=0.291042]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.3117 secs, and comparison 19.5473 sec, and warnIfPerfScore > 2, and perfScore=1.5877]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.2154 secs, and comparison 24.2044 sec, and warnIfPerfScore > 3.6, and perfScore=2.15814]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 36 seconds]]]

Succeeded
