Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Feb 26 14:40:51 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.70199 secs, and comparison 4.81291 sec, and warnIfPerfScore > 0.65, and perfScore=0.624891]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.62421 secs, and comparison 2.68399 sec, and warnIfPerfScore > 0.5, and perfScore=0.352035]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.0564 secs, and comparison 8.83473 sec, and warnIfPerfScore > 1.05, and perfScore=0.878516]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.95737 secs, and comparison 8.87973 sec, and warnIfPerfScore > 1.15, and perfScore=1.11591]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.9275 secs, and comparison 3.3088 sec, and warnIfPerfScore > 0.48, and perfScore=0.37063]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.09421 secs, and comparison 3.76171 sec, and warnIfPerfScore > 0.57, and perfScore=0.413638]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.12227 secs, and comparison 23.8537 sec, and warnIfPerfScore > 2.9, and perfScore=2.61488]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.66731 secs, and comparison 25.2123 sec, and warnIfPerfScore > 2.9, and perfScore=2.60799]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 7.97266 secs, and comparison 133.079 sec, and warnIfPerfScore > 24, and perfScore=16.692]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.67953 secs, and comparison 12.3077 sec, and warnIfPerfScore > 1.7, and perfScore=1.41801]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.9472 secs, and comparison 8.42214 sec, and warnIfPerfScore > 1.5, and perfScore=0.941316]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.61681 secs, and comparison 14.9655 sec, and warnIfPerfScore > 2.1, and perfScore=1.96479]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.786 secs, and comparison 6.87481 sec, and warnIfPerfScore > 1.6, and perfScore=0.702515]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.1698 secs, and comparison 1.24578 sec, and warnIfPerfScore > 0.23, and perfScore=0.122498]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 13.8729 secs, and comparison 11.7925 sec, and warnIfPerfScore > 1.3, and perfScore=0.850041]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.96007 secs, and comparison 6.77838 sec, and warnIfPerfScore > 1.2, and perfScore=0.75651]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.732 secs, and comparison 2.546 sec, and warnIfPerfScore > 0.33, and perfScore=0.217013]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.79941 secs, and comparison 43.5556 sec, and warnIfPerfScore > 6, and perfScore=4.94983]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.66854 secs, and comparison 6.88813 sec, and warnIfPerfScore > 0.8, and perfScore=0.794612]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.821 secs, and comparison 12.9509 sec, and warnIfPerfScore > 1.4, and perfScore=1.46818]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.5876 secs, and comparison 3.81606 sec, and warnIfPerfScore > 0.65, and perfScore=0.329322]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.43946 secs, and comparison 39.3853 sec, and warnIfPerfScore > 4.4, and perfScore=4.17241]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.3598 secs, and comparison 3.99413 sec, and warnIfPerfScore > 0.6, and perfScore=0.351603]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.2076 secs, and comparison 3.81006 sec, and warnIfPerfScore > 0.6, and perfScore=0.339953]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.1934 secs, and comparison 3.90592 sec, and warnIfPerfScore > 0.6, and perfScore=0.34895]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.458 secs, and comparison 8.45455 sec, and warnIfPerfScore > 1.3, and perfScore=0.737875]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 12.9233 secs, and comparison 11.4543 sec, and warnIfPerfScore > 1.3, and perfScore=0.886332]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 54.2769 secs, and comparison 7.3393 sec, and warnIfPerfScore > 0.3, and perfScore=0.13522]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.12367 secs, and comparison 13.3094 sec, and warnIfPerfScore > 1.5, and perfScore=1.63835]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.9605 secs, and comparison 4.52449 sec, and warnIfPerfScore > 0.55, and perfScore=0.324091]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 15 secs, and comparison 1.09131 sec, and warnIfPerfScore > 0.1, and perfScore=0.072754]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.60407 sec, and warnIfPerfScore > 0.5, and perfScore=0.240271]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.0222 secs, and comparison 17.7317 sec, and warnIfPerfScore > 2, and perfScore=1.76924]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.6378 secs, and comparison 17.6264 sec, and warnIfPerfScore > 3.6, and perfScore=1.65695]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 9 seconds]]]

Succeeded
