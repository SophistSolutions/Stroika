Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri May 13 10:13:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.09534 secs, and comparison 4.57796 sec, and warnIfPerfScore > 0.65, and perfScore=0.565506]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.4752 secs, and comparison 2.98849 sec, and warnIfPerfScore > 0.5, and perfScore=0.399787]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.40943 secs, and comparison 7.56907 sec, and warnIfPerfScore > 1.05, and perfScore=0.804414]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.98309 secs, and comparison 7.90307 sec, and warnIfPerfScore > 1.15, and perfScore=0.989976]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 33.8547 secs, and comparison 2.38489 sec, and warnIfPerfScore > 0.48, and perfScore=0.0704449]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 31.5957 secs, and comparison 2.96021 sec, and warnIfPerfScore > 0.57, and perfScore=0.0936905]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.53087 secs, and comparison 22.2911 sec, and warnIfPerfScore > 2.9, and perfScore=2.613]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.90345 secs, and comparison 22.5555 sec, and warnIfPerfScore > 2.9, and perfScore=2.53334]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.33653 secs, and comparison 157.642 sec, and warnIfPerfScore > 24, and perfScore=16.8844]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.77104 secs, and comparison 10.8741 sec, and warnIfPerfScore > 1.7, and perfScore=1.39932]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.6344 secs, and comparison 8.22602 sec, and warnIfPerfScore > 1.5, and perfScore=0.952704]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.59895 secs, and comparison 12.5568 sec, and warnIfPerfScore > 2.1, and perfScore=1.65244]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.65756 secs, and comparison 7.16151 sec, and warnIfPerfScore > 1.6, and perfScore=0.741544]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.78168 secs, and comparison 1.31963 sec, and warnIfPerfScore > 0.23, and perfScore=0.134909]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8269 secs, and comparison 13.2187 sec, and warnIfPerfScore > 1.3, and perfScore=1.03055]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.9628 secs, and comparison 6.17793 sec, and warnIfPerfScore > 1.2, and perfScore=0.563535]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.49412 secs, and comparison 1.54465 sec, and warnIfPerfScore > 0.33, and perfScore=0.237854]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.95988 secs, and comparison 39.012 sec, and warnIfPerfScore > 6, and perfScore=3.91691]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.77371 secs, and comparison 5.47499 sec, and warnIfPerfScore > 0.8, and perfScore=0.560175]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.85395 secs, and comparison 9.43842 sec, and warnIfPerfScore > 1.4, and perfScore=0.957831]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.32798 secs, and comparison 3.37842 sec, and warnIfPerfScore > 0.65, and perfScore=0.533887]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.90044 secs, and comparison 36.7498 sec, and warnIfPerfScore > 4.4, and perfScore=3.71194]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.355 secs, and comparison 3.34761 sec, and warnIfPerfScore > 0.6, and perfScore=0.526769]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.47602 secs, and comparison 3.46337 sec, and warnIfPerfScore > 0.6, and perfScore=0.5348]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.39553 secs, and comparison 3.40229 sec, and warnIfPerfScore > 0.6, and perfScore=0.531979]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.67403 secs, and comparison 4.98034 sec, and warnIfPerfScore > 1.3, and perfScore=0.746227]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.88397 secs, and comparison 8.48339 sec, and warnIfPerfScore > 1.3, and perfScore=1.23234]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.5501 secs, and comparison 6.14698 sec, and warnIfPerfScore > 0.3, and perfScore=0.129274]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.33185 secs, and comparison 13.9224 sec, and warnIfPerfScore > 1.5, and perfScore=1.49192]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.7056 secs, and comparison 2.92526 sec, and warnIfPerfScore > 0.55, and perfScore=0.379628]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.805031 sec, and warnIfPerfScore > 0.1, and perfScore=0.0536687]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.03044 sec, and warnIfPerfScore > 0.5, and perfScore=0.202029]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.05059 secs, and comparison 13.7042 sec, and warnIfPerfScore > 2, and perfScore=1.70226]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.37529 secs, and comparison 30.4387 sec, and warnIfPerfScore > 3.6, and perfScore=3.24669]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 5 seconds]]]

Succeeded
