Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 31 8:50:50 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.4766 secs, and comparison 5.10992 sec, and warnIfPerfScore > 0.62, and perfScore=0.445246]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.0024 secs, and comparison 3.34802 sec, and warnIfPerfScore > 0.5, and perfScore=0.3043]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.0534 secs, and comparison 9.31752 sec, and warnIfPerfScore > 1.05, and perfScore=0.842955]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.3653 secs, and comparison 4.12032 sec, and warnIfPerfScore > 0.48, and perfScore=0.397511]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.6732 secs, and comparison 4.2551 sec, and warnIfPerfScore > 0.57, and perfScore=0.398672]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.4481 secs, and comparison 24.8335 sec, and warnIfPerfScore > 2.9, and perfScore=2.16922]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.9926 secs, and comparison 26.3961 sec, and warnIfPerfScore > 2.9, and perfScore=2.20102]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 11.7695 secs, and comparison 88.2408 sec, and warnIfPerfScore > 9.7, and perfScore=7.49739]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.0375 secs, and comparison 11.5189 sec, and warnIfPerfScore > 1.6, and perfScore=1.14759]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.8257 secs, and comparison 14.3911 sec, and warnIfPerfScore > 1.5, and perfScore=0.970692]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.82965 secs, and comparison 12.2948 sec, and warnIfPerfScore > 2.1, and perfScore=1.39245]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 12.4454 secs, and comparison 9.14215 sec, and warnIfPerfScore > 1.3, and perfScore=0.73458]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 12.9488 secs, and comparison 2.56811 sec, and warnIfPerfScore > 0.23, and perfScore=0.198327]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.021 secs, and comparison 13.0883 sec, and warnIfPerfScore > 1.3, and perfScore=1.00517]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 10.5033 secs, and comparison 8.05189 sec, and warnIfPerfScore > 1.2, and perfScore=0.766605]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.36822 secs, and comparison 1.94082 sec, and warnIfPerfScore > 0.33, and perfScore=0.20717]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.0249 secs, and comparison 44.609 sec, and warnIfPerfScore > 6, and perfScore=4.44981]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.20115 secs, and comparison 4.20394 sec, and warnIfPerfScore > 0.5, and perfScore=0.456893]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.6316 secs, and comparison 40.0666 sec, and warnIfPerfScore > 4.4, and perfScore=3.76862]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.38823 secs, and comparison 4.40133 sec, and warnIfPerfScore > 0.6, and perfScore=0.468814]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.8993 secs, and comparison 18.5391 sec, and warnIfPerfScore > 1.5, and perfScore=1.2443]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.8641 secs, and comparison 4.54568 sec, and warnIfPerfScore > 0.55, and perfScore=0.327873]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42889 sec, and warnIfPerfScore > 0.25, and perfScore=0.0952596]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.68203 sec, and warnIfPerfScore > 0.5, and perfScore=0.245468]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.3412 secs, and comparison 18.8269 sec, and warnIfPerfScore > 2, and perfScore=1.66005]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.6532 secs, and comparison 32.5446 sec, and warnIfPerfScore > 3.1, and perfScore=2.79277]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 27 seconds]]]

Succeeded
