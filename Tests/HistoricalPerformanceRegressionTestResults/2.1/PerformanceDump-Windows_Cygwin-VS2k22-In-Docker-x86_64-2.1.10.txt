Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 4:45:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.60279 secs, and comparison 4.71432 sec, and warnIfPerfScore > 0.65, and perfScore=0.713989]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.60065 secs, and comparison 2.75882 sec, and warnIfPerfScore > 0.5, and perfScore=0.417962]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.96611 secs, and comparison 8.63237 sec, and warnIfPerfScore > 1.05, and perfScore=0.866173]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.76668 secs, and comparison 8.73099 sec, and warnIfPerfScore > 1.15, and perfScore=1.12416]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.028 secs, and comparison 2.751 sec, and warnIfPerfScore > 0.48, and perfScore=0.249457]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.9482 secs, and comparison 3.16057 sec, and warnIfPerfScore > 0.57, and perfScore=0.288685]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.45468 secs, and comparison 23.6388 sec, and warnIfPerfScore > 2.9, and perfScore=2.79594]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.78372 secs, and comparison 23.8645 sec, and warnIfPerfScore > 2.9, and perfScore=2.4392]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 8.27443 secs, and comparison 170.755 sec, and warnIfPerfScore > 24, and perfScore=20.6364]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.9684 secs, and comparison 11.9164 sec, and warnIfPerfScore > 1.7, and perfScore=1.49546]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.82755 secs, and comparison 7.29943 sec, and warnIfPerfScore > 1.5, and perfScore=0.932531]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.69991 secs, and comparison 14.3317 sec, and warnIfPerfScore > 2.1, and perfScore=1.86129]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.46408 secs, and comparison 5.07671 sec, and warnIfPerfScore > 1.6, and perfScore=0.536418]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 9.91383 secs, and comparison 0.948884 sec, and warnIfPerfScore > 0.23, and perfScore=0.0957132]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.4899 secs, and comparison 14.1506 sec, and warnIfPerfScore > 1.3, and perfScore=1.04898]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.234 secs, and comparison 7.02386 sec, and warnIfPerfScore > 1.2, and perfScore=0.686326]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.5122 secs, and comparison 2.8619 sec, and warnIfPerfScore > 0.33, and perfScore=0.228729]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.80873 secs, and comparison 44.035 sec, and warnIfPerfScore > 6, and perfScore=4.48937]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 9.92406 secs, and comparison 6.86028 sec, and warnIfPerfScore > 0.8, and perfScore=0.691278]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.86212 secs, and comparison 10.0763 sec, and warnIfPerfScore > 1.4, and perfScore=1.02172]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.3943 secs, and comparison 3.96961 sec, and warnIfPerfScore > 0.65, and perfScore=0.320278]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.414 secs, and comparison 41.1638 sec, and warnIfPerfScore > 4.4, and perfScore=3.95274]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.1564 secs, and comparison 3.90879 sec, and warnIfPerfScore > 0.6, and perfScore=0.321542]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.2399 secs, and comparison 3.8541 sec, and warnIfPerfScore > 0.6, and perfScore=0.314879]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.1115 secs, and comparison 3.81605 sec, and warnIfPerfScore > 0.6, and perfScore=0.315076]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 12.1225 secs, and comparison 7.33156 sec, and warnIfPerfScore > 1.3, and perfScore=0.604788]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.9514 secs, and comparison 10.3006 sec, and warnIfPerfScore > 1.3, and perfScore=0.79533]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 50.3536 secs, and comparison 6.13352 sec, and warnIfPerfScore > 0.3, and perfScore=0.121809]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.91857 secs, and comparison 12.6638 sec, and warnIfPerfScore > 1.5, and perfScore=1.59925]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.48455 secs, and comparison 3.43306 sec, and warnIfPerfScore > 0.55, and perfScore=0.404625]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.791952 sec, and warnIfPerfScore > 0.1, and perfScore=0.0527968]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.27893 sec, and warnIfPerfScore > 0.5, and perfScore=0.218595]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.22572 secs, and comparison 14.8433 sec, and warnIfPerfScore > 2, and perfScore=1.6089]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.8469 secs, and comparison 18.6899 sec, and warnIfPerfScore > 3.6, and perfScore=1.57763]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 26 seconds]]]

Succeeded
