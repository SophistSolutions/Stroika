Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 9:13:38 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.24607 secs, and comparison 4.22154 sec, and warnIfPerfScore > 0.65, and perfScore=0.804704]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.22255 secs, and comparison 2.55085 sec, and warnIfPerfScore > 0.5, and perfScore=0.48843]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.51213 secs, and comparison 6.91859 sec, and warnIfPerfScore > 1.05, and perfScore=0.920989]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.30336 secs, and comparison 6.8883 sec, and warnIfPerfScore > 1.15, and perfScore=1.0928]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 31.8663 secs, and comparison 2.09284 sec, and warnIfPerfScore > 0.48, and perfScore=0.0656757]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 30.2236 secs, and comparison 2.71551 sec, and warnIfPerfScore > 0.57, and perfScore=0.0898474]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.02551 secs, and comparison 17.8633 sec, and warnIfPerfScore > 2.9, and perfScore=2.96461]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.31006 secs, and comparison 17.896 sec, and warnIfPerfScore > 2.9, and perfScore=2.83611]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.34744 secs, and comparison 131.296 sec, and warnIfPerfScore > 24, and perfScore=24.5531]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.49108 secs, and comparison 9.5917 sec, and warnIfPerfScore > 1.7, and perfScore=1.74678]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.3871 secs, and comparison 5.13846 sec, and warnIfPerfScore > 1.5, and perfScore=0.953847]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.80205 secs, and comparison 11.5766 sec, and warnIfPerfScore > 2.1, and perfScore=2.41075]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.35655 secs, and comparison 4.37216 sec, and warnIfPerfScore > 1.6, and perfScore=0.687819]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 6.67736 secs, and comparison 0.631746 sec, and warnIfPerfScore > 0.23, and perfScore=0.0946102]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2252 secs, and comparison 11.5003 sec, and warnIfPerfScore > 1.3, and perfScore=1.0245]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.02409 secs, and comparison 4.76751 sec, and warnIfPerfScore > 1.2, and perfScore=0.594149]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.32431 secs, and comparison 1.66821 sec, and warnIfPerfScore > 0.33, and perfScore=0.227763]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.67769 secs, and comparison 37.5563 sec, and warnIfPerfScore > 6, and perfScore=4.89162]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.71176 secs, and comparison 4.64458 sec, and warnIfPerfScore > 0.8, and perfScore=0.602273]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.67339 secs, and comparison 7.01393 sec, and warnIfPerfScore > 1.4, and perfScore=0.914059]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.31523 secs, and comparison 3.29199 sec, and warnIfPerfScore > 0.65, and perfScore=0.450019]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.2263 secs, and comparison 35.122 sec, and warnIfPerfScore > 4.4, and perfScore=4.26947]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.36468 secs, and comparison 3.236 sec, and warnIfPerfScore > 0.6, and perfScore=0.439394]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.34365 secs, and comparison 3.2033 sec, and warnIfPerfScore > 0.6, and perfScore=0.436199]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.32893 secs, and comparison 3.25887 sec, and warnIfPerfScore > 0.6, and perfScore=0.444658]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.33367 secs, and comparison 4.68904 sec, and warnIfPerfScore > 1.3, and perfScore=0.639385]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.84473 secs, and comparison 7.75194 sec, and warnIfPerfScore > 1.3, and perfScore=0.988172]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 35.1586 secs, and comparison 4.79928 sec, and warnIfPerfScore > 0.3, and perfScore=0.136504]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.22272 secs, and comparison 8.77022 sec, and warnIfPerfScore > 1.5, and perfScore=1.67924]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.67909 secs, and comparison 2.60124 sec, and warnIfPerfScore > 0.55, and perfScore=0.458038]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.037
	DETAILS:         	[baseline test 15 secs, and comparison 0.558037 sec, and warnIfPerfScore > 0.1, and perfScore=0.0372024]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74192 sec, and warnIfPerfScore > 0.5, and perfScore=0.182795]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.06384 secs, and comparison 12.0239 sec, and warnIfPerfScore > 2, and perfScore=1.98289]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.79877 secs, and comparison 13.1544 sec, and warnIfPerfScore > 3.6, and perfScore=1.93482]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 32 seconds]]]

Succeeded
