Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Sep  6 8:34:43 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 2.17432 secs, and comparison 1.17703 sec, and warnIfPerfScore > 0.65, and perfScore=0.541334]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 2.18485 secs, and comparison 2.26567 sec, and warnIfPerfScore > 0.5, and perfScore=1.03699]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.07483 secs, and comparison 5.72765 sec, and warnIfPerfScore > 1.05, and perfScore=2.76054]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 1.75727 secs, and comparison 5.71721 sec, and warnIfPerfScore > 1.15, and perfScore=3.25346]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 2.75322 secs, and comparison 0.716909 sec, and warnIfPerfScore > 0.48, and perfScore=0.26039]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.31163 secs, and comparison 0.807334 sec, and warnIfPerfScore > 0.57, and perfScore=0.243788]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.69112 secs, and comparison 9.34537 sec, and warnIfPerfScore > 2.9, and perfScore=3.47268]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.14698 secs, and comparison 9.41449 sec, and warnIfPerfScore > 2.9, and perfScore=2.9916]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 3.7445 secs, and comparison 31.5909 sec, and warnIfPerfScore > 24, and perfScore=8.43662]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.89368 secs, and comparison 5.88494 sec, and warnIfPerfScore > 1.7, and perfScore=1.51141]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.32107 secs, and comparison 4.16211 sec, and warnIfPerfScore > 1.5, and perfScore=0.963213]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.10888 secs, and comparison 7.38048 sec, and warnIfPerfScore > 2.1, and perfScore=3.49971]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 2.94137 secs, and comparison 2.80005 sec, and warnIfPerfScore > 1.6, and perfScore=0.951955]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 3.05029 secs, and comparison 0.980993 sec, and warnIfPerfScore > 0.23, and perfScore=0.321606]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.4793 secs, and comparison 3.17346 sec, and warnIfPerfScore > 1.3, and perfScore=1.27998]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.41987 secs, and comparison 4.80663 sec, and warnIfPerfScore > 1.2, and perfScore=1.98631]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.2702 secs, and comparison 1.20045 sec, and warnIfPerfScore > 0.33, and perfScore=0.116887]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.35857 secs, and comparison 36.3985 sec, and warnIfPerfScore > 6, and perfScore=15.4324]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 2.34802 secs, and comparison 4.49373 sec, and warnIfPerfScore > 0.8, and perfScore=1.91383]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.3618 secs, and comparison 5.62714 sec, and warnIfPerfScore > 1.4, and perfScore=2.38256]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.0936 secs, and comparison 3.09369 sec, and warnIfPerfScore > 0.65, and perfScore=0.3065]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.27637 secs, and comparison 33.7675 sec, and warnIfPerfScore > 4.4, and perfScore=10.3064]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.69124 secs, and comparison 3.0825 sec, and warnIfPerfScore > 0.6, and perfScore=0.400781]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.3331 secs, and comparison 3.09332 sec, and warnIfPerfScore > 0.6, and perfScore=0.421829]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.44386 secs, and comparison 3.0351 sec, and warnIfPerfScore > 0.6, and perfScore=0.407731]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.35354 secs, and comparison 3.37739 sec, and warnIfPerfScore > 1.3, and perfScore=0.459288]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.3237 secs, and comparison 7.67646 sec, and warnIfPerfScore > 1.3, and perfScore=0.622901]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.1215 secs, and comparison 4.2631 sec, and warnIfPerfScore > 0.3, and perfScore=0.351698]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.17077 secs, and comparison 9.62048 sec, and warnIfPerfScore > 1.5, and perfScore=1.86055]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.51961 secs, and comparison 1.37009 sec, and warnIfPerfScore > 0.55, and perfScore=0.248221]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.562713 sec, and warnIfPerfScore > 0.1, and perfScore=0.0375142]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.074
	DETAILS:         	[baseline test 15 secs, and comparison 1.10777 sec, and warnIfPerfScore > 0.5, and perfScore=0.0738512]
	                 	Test_Optional_ is FASTER

[[[Tests took: 5 minutes, 59 seconds]]]

Succeeded
