Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 8:59:5 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.19775 secs, and comparison 4.82246 sec, and warnIfPerfScore > 0.65, and perfScore=1.50808]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.19706 secs, and comparison 2.2815 sec, and warnIfPerfScore > 0.5, and perfScore=0.713624]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.8087 secs, and comparison 6.94241 sec, and warnIfPerfScore > 1.05, and perfScore=1.01964]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.22805 secs, and comparison 6.94306 sec, and warnIfPerfScore > 1.15, and perfScore=1.11481]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 4.79267 secs, and comparison 1.20376 sec, and warnIfPerfScore > 0.48, and perfScore=0.251167]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.76247 secs, and comparison 1.792 sec, and warnIfPerfScore > 0.57, and perfScore=0.376274]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.62514 secs, and comparison 14.8014 sec, and warnIfPerfScore > 2.9, and perfScore=2.63129]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.68368 secs, and comparison 15.3718 sec, and warnIfPerfScore > 2.9, and perfScore=2.00058]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 9.70491 secs, and comparison 49.346 sec, and warnIfPerfScore > 24, and perfScore=5.08465]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.22837 secs, and comparison 7.77826 sec, and warnIfPerfScore > 1.7, and perfScore=3.49056]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 5.74498 secs, and comparison 3.86885 sec, and warnIfPerfScore > 1.5, and perfScore=0.673432]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.24483 secs, and comparison 9.59019 sec, and warnIfPerfScore > 2.1, and perfScore=2.95553]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.78573 secs, and comparison 2.74157 sec, and warnIfPerfScore > 1.6, and perfScore=0.47385]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 6.28831 secs, and comparison 0.561618 sec, and warnIfPerfScore > 0.23, and perfScore=0.0893115]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9106 secs, and comparison 13.389 sec, and warnIfPerfScore > 1.3, and perfScore=1.03705]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.76129 secs, and comparison 5.1498 sec, and warnIfPerfScore > 1.2, and perfScore=1.36916]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.87889 secs, and comparison 1.00468 sec, and warnIfPerfScore > 0.33, and perfScore=0.259012]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.59579 secs, and comparison 38.5778 sec, and warnIfPerfScore > 6, and perfScore=10.7286]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.59724 secs, and comparison 4.97307 sec, and warnIfPerfScore > 0.8, and perfScore=1.38247]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 3.5964 secs, and comparison 6.64471 sec, and warnIfPerfScore > 1.4, and perfScore=1.8476]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 3.79626 secs, and comparison 3.1884 sec, and warnIfPerfScore > 0.65, and perfScore=0.83988]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 4.8048 secs, and comparison 36.2228 sec, and warnIfPerfScore > 4.4, and perfScore=7.53888]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.81038 secs, and comparison 3.07932 sec, and warnIfPerfScore > 0.6, and perfScore=0.808141]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.78723 secs, and comparison 3.07911 sec, and warnIfPerfScore > 0.6, and perfScore=0.813025]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.79749 secs, and comparison 3.11501 sec, and warnIfPerfScore > 0.6, and perfScore=0.820282]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 3.78907 secs, and comparison 2.63331 sec, and warnIfPerfScore > 1.3, and perfScore=0.694974]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.13079 secs, and comparison 8.2459 sec, and warnIfPerfScore > 1.3, and perfScore=1.9962]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 27.9214 secs, and comparison 4.10009 sec, and warnIfPerfScore > 0.3, and perfScore=0.146844]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.92689 secs, and comparison 11.4751 sec, and warnIfPerfScore > 1.5, and perfScore=1.28545]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 2.52161 secs, and comparison 2.24619 sec, and warnIfPerfScore > 0.55, and perfScore=0.890778]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.96329 sec, and warnIfPerfScore > 0.1, and perfScore=0.130886]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.91458 sec, and warnIfPerfScore > 0.5, and perfScore=0.127639]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 33 seconds]]]

Succeeded
