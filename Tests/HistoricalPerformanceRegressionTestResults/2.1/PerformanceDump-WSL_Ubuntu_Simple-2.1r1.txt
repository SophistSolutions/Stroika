Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan  7 6:23:12 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.27774 secs, and comparison 4.08444 sec, and warnIfPerfScore > 0.65, and perfScore=0.954812]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 4.2891 secs, and comparison 1.89689 sec, and warnIfPerfScore > 0.5, and perfScore=0.442257]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.34217 secs, and comparison 5.7052 sec, and warnIfPerfScore > 1.05, and perfScore=1.06796]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.56163 secs, and comparison 5.73341 sec, and warnIfPerfScore > 1.15, and perfScore=1.25688]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 2.47341 secs, and comparison 2.12084 sec, and warnIfPerfScore > 0.48, and perfScore=0.857454]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 3.17906 secs, and comparison 2.75313 sec, and warnIfPerfScore > 0.57, and perfScore=0.86602]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 2.24362 secs, and comparison 12.6896 sec, and warnIfPerfScore > 2.9, and perfScore=5.65586]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 2.73774 secs, and comparison 13.1474 sec, and warnIfPerfScore > 2.9, and perfScore=4.80229]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.5565 secs, and comparison 36.1856 sec, and warnIfPerfScore > 24, and perfScore=10.1745]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.51897 secs, and comparison 7.74586 sec, and warnIfPerfScore > 1.6, and perfScore=2.20117]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.99294 secs, and comparison 3.774 sec, and warnIfPerfScore > 1.5, and perfScore=0.945168]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.11462 secs, and comparison 9.25591 sec, and warnIfPerfScore > 2.1, and perfScore=4.37711]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.04141 secs, and comparison 2.45035 sec, and warnIfPerfScore > 1.6, and perfScore=0.805663]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 3.20876 secs, and comparison 1.07207 sec, and warnIfPerfScore > 0.23, and perfScore=0.334108]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 2.74341 secs, and comparison 3.11751 sec, and warnIfPerfScore > 1.3, and perfScore=1.13636]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.18234 secs, and comparison 4.65419 sec, and warnIfPerfScore > 1.2, and perfScore=2.13266]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 9.59513 secs, and comparison 1.12909 sec, and warnIfPerfScore > 0.33, and perfScore=0.117674]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 2.11311 secs, and comparison 37.3654 sec, and warnIfPerfScore > 6, and perfScore=17.6827]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.02829 secs, and comparison 4.45127 sec, and warnIfPerfScore > 0.8, and perfScore=2.19459]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.07067 secs, and comparison 5.60926 sec, and warnIfPerfScore > 1.3, and perfScore=2.70892]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.56794 secs, and comparison 3.18114 sec, and warnIfPerfScore > 0.65, and perfScore=0.33248]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 2.85103 secs, and comparison 34.7268 sec, and warnIfPerfScore > 4.4, and perfScore=12.1804]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.1942 secs, and comparison 3.15796 sec, and warnIfPerfScore > 0.6, and perfScore=0.43896]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.89186 secs, and comparison 3.1685 sec, and warnIfPerfScore > 0.6, and perfScore=0.459745]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.84966 secs, and comparison 3.10233 sec, and warnIfPerfScore > 0.6, and perfScore=0.452918]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.83448 secs, and comparison 3.09944 sec, and warnIfPerfScore > 1.3, and perfScore=0.453501]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.4586 secs, and comparison 7.35431 sec, and warnIfPerfScore > 1.3, and perfScore=0.641818]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.1914 secs, and comparison 4.56856 sec, and warnIfPerfScore > 0.3, and perfScore=0.374737]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.09404 secs, and comparison 9.80355 sec, and warnIfPerfScore > 1.5, and perfScore=1.92451]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.34875 secs, and comparison 2.07363 sec, and warnIfPerfScore > 0.55, and perfScore=0.387685]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.730181 sec, and warnIfPerfScore > 0.1, and perfScore=0.0486788]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.4432 sec, and warnIfPerfScore > 0.5, and perfScore=0.16288]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 28 seconds]]]

Succeeded
