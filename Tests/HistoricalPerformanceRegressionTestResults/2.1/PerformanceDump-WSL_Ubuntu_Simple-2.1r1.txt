Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan  7 23:12:45 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.51677 secs, and comparison 5.92574 sec, and warnIfPerfScore > 0.65, and perfScore=0.909307]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.34296 secs, and comparison 3.11991 sec, and warnIfPerfScore > 0.5, and perfScore=0.491869]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.20791 secs, and comparison 8.84315 sec, and warnIfPerfScore > 1.05, and perfScore=1.07739]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.39479 secs, and comparison 8.48572 sec, and warnIfPerfScore > 1.15, and perfScore=1.14753]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 4.56625 secs, and comparison 3.14765 sec, and warnIfPerfScore > 0.48, and perfScore=0.689329]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 5.98345 secs, and comparison 4.13873 sec, and warnIfPerfScore > 0.57, and perfScore=0.691696]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 4.24159 secs, and comparison 19.3685 sec, and warnIfPerfScore > 2.9, and perfScore=4.56633]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.66958 secs, and comparison 20.3961 sec, and warnIfPerfScore > 2.9, and perfScore=4.36786]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 6.59471 secs, and comparison 62.3983 sec, and warnIfPerfScore > 24, and perfScore=9.46187]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.45116 secs, and comparison 12.0393 sec, and warnIfPerfScore > 1.6, and perfScore=1.86623]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.66612 secs, and comparison 4.89138 sec, and warnIfPerfScore > 1.5, and perfScore=0.863267]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 3.35436 secs, and comparison 14.084 sec, and warnIfPerfScore > 2.1, and perfScore=4.19872]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.89124 secs, and comparison 4.83712 sec, and warnIfPerfScore > 1.6, and perfScore=0.821069]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 5.53305 secs, and comparison 1.84152 sec, and warnIfPerfScore > 0.23, and perfScore=0.332822]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.68963 secs, and comparison 4.7961 sec, and warnIfPerfScore > 1.3, and perfScore=1.0227]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.0783 secs, and comparison 8.6674 sec, and warnIfPerfScore > 1.2, and perfScore=2.81565]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 17.2649 secs, and comparison 2.18867 sec, and warnIfPerfScore > 0.33, and perfScore=0.12677]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 3.62621 secs, and comparison 53.8475 sec, and warnIfPerfScore > 6, and perfScore=14.8495]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.51712 secs, and comparison 7.83477 sec, and warnIfPerfScore > 0.8, and perfScore=2.22761]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.5228 secs, and comparison 10.7215 sec, and warnIfPerfScore > 1.4, and perfScore=3.04347]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.2727 secs, and comparison 4.68309 sec, and warnIfPerfScore > 0.65, and perfScore=0.306631]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 5.11409 secs, and comparison 39.7032 sec, and warnIfPerfScore > 4.4, and perfScore=7.76349]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.30809 secs, and comparison 3.78029 sec, and warnIfPerfScore > 0.6, and perfScore=0.455013]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.17958 secs, and comparison 3.18101 sec, and warnIfPerfScore > 0.6, and perfScore=0.443064]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.89043 secs, and comparison 3.12574 sec, and warnIfPerfScore > 0.6, and perfScore=0.453635]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.64517 secs, and comparison 3.41315 sec, and warnIfPerfScore > 1.3, and perfScore=0.446446]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 13.2398 secs, and comparison 8.09344 sec, and warnIfPerfScore > 1.3, and perfScore=0.611297]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.0716 secs, and comparison 4.58629 sec, and warnIfPerfScore > 0.3, and perfScore=0.35086]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.17202 secs, and comparison 11.3356 sec, and warnIfPerfScore > 1.5, and perfScore=1.83661]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.88942 secs, and comparison 2.28294 sec, and warnIfPerfScore > 0.55, and perfScore=0.387634]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.828842 sec, and warnIfPerfScore > 0.1, and perfScore=0.0552561]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.71318 sec, and warnIfPerfScore > 0.5, and perfScore=0.180879]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 16 seconds]]]

Succeeded
