Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 25 15:29:9 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.82524 secs, and comparison 4.53495 sec, and warnIfPerfScore > 0.65, and perfScore=0.7785]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 5.93027 secs, and comparison 2.52232 sec, and warnIfPerfScore > 0.5, and perfScore=0.425329]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.15213 secs, and comparison 7.44461 sec, and warnIfPerfScore > 1.05, and perfScore=0.91321]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.83894 secs, and comparison 7.36817 sec, and warnIfPerfScore > 1.15, and perfScore=1.07739]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.4964 secs, and comparison 2.30908 sec, and warnIfPerfScore > 0.48, and perfScore=0.271771]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.49413 secs, and comparison 2.8769 sec, and warnIfPerfScore > 0.57, and perfScore=0.338693]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.5368 secs, and comparison 19.9305 sec, and warnIfPerfScore > 2.9, and perfScore=3.04898]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.94689 secs, and comparison 20.7777 sec, and warnIfPerfScore > 2.9, and perfScore=2.99094]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.18911 secs, and comparison 127.737 sec, and warnIfPerfScore > 24, and perfScore=20.639]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.95519 secs, and comparison 10.5487 sec, and warnIfPerfScore > 1.7, and perfScore=1.77135]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.08445 secs, and comparison 5.78312 sec, and warnIfPerfScore > 1.5, and perfScore=0.950476]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.45008 secs, and comparison 12.5083 sec, and warnIfPerfScore > 2.1, and perfScore=2.29507]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.02741 secs, and comparison 4.18262 sec, and warnIfPerfScore > 1.6, and perfScore=0.595186]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 7.62302 secs, and comparison 0.723384 sec, and warnIfPerfScore > 0.23, and perfScore=0.0948946]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4282 secs, and comparison 12.7451 sec, and warnIfPerfScore > 1.3, and perfScore=1.0255]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.60488 secs, and comparison 5.60833 sec, and warnIfPerfScore > 1.2, and perfScore=0.651762]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.05528 secs, and comparison 1.96024 sec, and warnIfPerfScore > 0.33, and perfScore=0.216474]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.28647 secs, and comparison 40.4375 sec, and warnIfPerfScore > 6, and perfScore=4.87994]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.30319 secs, and comparison 5.4391 sec, and warnIfPerfScore > 0.8, and perfScore=0.655062]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.31605 secs, and comparison 7.83067 sec, and warnIfPerfScore > 1.4, and perfScore=0.941633]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.99648 secs, and comparison 3.59591 sec, and warnIfPerfScore > 0.65, and perfScore=0.399702]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.83202 secs, and comparison 37.1692 sec, and warnIfPerfScore > 4.4, and perfScore=4.20845]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.4875 secs, and comparison 3.93595 sec, and warnIfPerfScore > 0.6, and perfScore=0.315191]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.8554 secs, and comparison 3.6178 sec, and warnIfPerfScore > 0.6, and perfScore=0.33327]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.93049 secs, and comparison 3.71926 sec, and warnIfPerfScore > 0.6, and perfScore=0.416468]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.04433 secs, and comparison 5.80917 sec, and warnIfPerfScore > 1.3, and perfScore=0.6423]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 9.42518 secs, and comparison 8.8066 sec, and warnIfPerfScore > 1.3, and perfScore=0.934369]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.5392 secs, and comparison 5.49897 sec, and warnIfPerfScore > 0.3, and perfScore=0.139076]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.88095 secs, and comparison 9.886 sec, and warnIfPerfScore > 1.5, and perfScore=1.68102]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.07514 secs, and comparison 2.97905 sec, and warnIfPerfScore > 0.55, and perfScore=0.490368]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.641897 sec, and warnIfPerfScore > 0.1, and perfScore=0.0427931]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.73027 sec, and warnIfPerfScore > 0.5, and perfScore=0.182018]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.65316 secs, and comparison 13.3103 sec, and warnIfPerfScore > 2, and perfScore=2.0006]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.25543 secs, and comparison 15.2501 sec, and warnIfPerfScore > 3.6, and perfScore=1.84728]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 49 seconds]]]

Succeeded
