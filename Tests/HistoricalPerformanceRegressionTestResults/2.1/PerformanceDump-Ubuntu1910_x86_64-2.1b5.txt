Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 12 1:53:1 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 5.48991 secs, and comparison 4.75033 sec, and warnIfPerfScore > 0.62, and perfScore=0.865284]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.81275 secs, and comparison 2.99619 sec, and warnIfPerfScore > 0.5, and perfScore=0.515451]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.52613 secs, and comparison 7.04411 sec, and warnIfPerfScore > 1.05, and perfScore=1.07937]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.79607 secs, and comparison 3.5171 sec, and warnIfPerfScore > 0.48, and perfScore=0.926509]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 4.55306 secs, and comparison 4.22184 sec, and warnIfPerfScore > 0.57, and perfScore=0.927252]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 3.48678 secs, and comparison 19.7547 sec, and warnIfPerfScore > 2.9, and perfScore=5.66561]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 4.12331 secs, and comparison 21.1493 sec, and warnIfPerfScore > 2.9, and perfScore=5.1292]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.66469 secs, and comparison 63.3447 sec, and warnIfPerfScore > 9.7, and perfScore=11.1824]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.99689 secs, and comparison 10.5012 sec, and warnIfPerfScore > 1.6, and perfScore=2.10154]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.90004 secs, and comparison 5.54988 sec, and warnIfPerfScore > 1.5, and perfScore=0.94065]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.85046 secs, and comparison 10.5168 sec, and warnIfPerfScore > 2.1, and perfScore=3.68952]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 4.19921 secs, and comparison 3.33395 sec, and warnIfPerfScore > 1.3, and perfScore=0.793948]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.49169 secs, and comparison 1.58854 sec, and warnIfPerfScore > 0.23, and perfScore=0.353661]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.08369 secs, and comparison 4.94066 sec, and warnIfPerfScore > 1.3, and perfScore=1.20985]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.08784 secs, and comparison 6.63763 sec, and warnIfPerfScore > 1.2, and perfScore=2.1496]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 16.0552 secs, and comparison 1.57504 sec, and warnIfPerfScore > 0.33, and perfScore=0.098101]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.03303 secs, and comparison 42.7947 sec, and warnIfPerfScore > 6, and perfScore=14.1096]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.7256 secs, and comparison 3.85099 sec, and warnIfPerfScore > 0.5, and perfScore=0.359048]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.39573 secs, and comparison 37.5824 sec, and warnIfPerfScore > 4.4, and perfScore=8.54973]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.6095 secs, and comparison 3.78569 sec, and warnIfPerfScore > 0.6, and perfScore=0.300224]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.26769 secs, and comparison 13.4014 sec, and warnIfPerfScore > 1.5, and perfScore=1.84397]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 7.7336 secs, and comparison 2.50378 sec, and warnIfPerfScore > 0.55, and perfScore=0.323754]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.1553 sec, and warnIfPerfScore > 0.25, and perfScore=0.0770198]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.86499 sec, and warnIfPerfScore > 0.5, and perfScore=0.257666]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 52 seconds]]]

Succeeded
