Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 20 2:41:47 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.96976 secs, and comparison 5.09639 sec, and warnIfPerfScore > 0.62, and perfScore=0.511185]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.93031 secs, and comparison 3.38344 sec, and warnIfPerfScore > 0.5, and perfScore=0.340718]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.0707 secs, and comparison 9.27506 sec, and warnIfPerfScore > 1.05, and perfScore=0.837803]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.7269 secs, and comparison 4.17145 sec, and warnIfPerfScore > 0.48, and perfScore=0.355718]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.5095 secs, and comparison 4.4232 sec, and warnIfPerfScore > 0.57, and perfScore=0.38431]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.1837 secs, and comparison 27.9498 sec, and warnIfPerfScore > 2.9, and perfScore=2.29403]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.5766 secs, and comparison 31.2926 sec, and warnIfPerfScore > 2.9, and perfScore=2.30489]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 12.829 secs, and comparison 101.981 sec, and warnIfPerfScore > 9.7, and perfScore=7.94928]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.725 secs, and comparison 12.699 sec, and warnIfPerfScore > 1.6, and perfScore=1.18406]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 15.2848 secs, and comparison 14.7285 sec, and warnIfPerfScore > 1.5, and perfScore=0.9636]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.25555 secs, and comparison 12.582 sec, and warnIfPerfScore > 2.1, and perfScore=1.3594]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 13.1886 secs, and comparison 10.1217 sec, and warnIfPerfScore > 1.3, and perfScore=0.767456]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.8772 secs, and comparison 2.74377 sec, and warnIfPerfScore > 0.23, and perfScore=0.197718]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.2276 secs, and comparison 13.7067 sec, and warnIfPerfScore > 1.3, and perfScore=1.03622]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.5561 secs, and comparison 7.9126 sec, and warnIfPerfScore > 1.2, and perfScore=0.749576]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.74644 secs, and comparison 1.98448 sec, and warnIfPerfScore > 0.33, and perfScore=0.203611]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 10.1188 secs, and comparison 45.825 sec, and warnIfPerfScore > 6, and perfScore=4.52869]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.49528 secs, and comparison 4.3604 sec, and warnIfPerfScore > 0.5, and perfScore=0.459218]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 11.0889 secs, and comparison 41.1898 sec, and warnIfPerfScore > 4.4, and perfScore=3.71452]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.63547 secs, and comparison 4.52714 sec, and warnIfPerfScore > 0.6, and perfScore=0.469841]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.0247 secs, and comparison 16.4716 sec, and warnIfPerfScore > 1.5, and perfScore=1.26465]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.0599 secs, and comparison 4.62814 sec, and warnIfPerfScore > 0.55, and perfScore=0.329173]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.51672 sec, and warnIfPerfScore > 0.25, and perfScore=0.101115]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.80224 sec, and warnIfPerfScore > 0.5, and perfScore=0.253483]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.2255 secs, and comparison 17.0112 sec, and warnIfPerfScore > 2, and perfScore=1.39145]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.3789 secs, and comparison 33.0947 sec, and warnIfPerfScore > 3.1, and perfScore=2.67347]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 2 seconds]]]

Succeeded
