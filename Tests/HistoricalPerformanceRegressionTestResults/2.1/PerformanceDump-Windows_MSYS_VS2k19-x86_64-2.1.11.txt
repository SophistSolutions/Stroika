Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 10:17:23 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 44.0158 secs, and comparison 14.5125 sec, and warnIfPerfScore > 0.65, and perfScore=0.329712]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 43.9677 secs, and comparison 14.2427 sec, and warnIfPerfScore > 0.5, and perfScore=0.323935]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 26.4638 secs, and comparison 21.2849 sec, and warnIfPerfScore > 1.05, and perfScore=0.804304]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 21.9513 secs, and comparison 25.6378 sec, and warnIfPerfScore > 1.15, and perfScore=1.16794]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.5722 secs, and comparison 3.68316 sec, and warnIfPerfScore > 0.48, and perfScore=0.179035]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.2851 secs, and comparison 3.95615 sec, and warnIfPerfScore > 0.57, and perfScore=0.195028]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 19.7026 secs, and comparison 36.1585 sec, and warnIfPerfScore > 2.9, and perfScore=1.83521]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.4656 secs, and comparison 35.6627 sec, and warnIfPerfScore > 2.9, and perfScore=1.74257]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 14.3367 secs, and comparison 178.892 sec, and warnIfPerfScore > 24, and perfScore=12.4779]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 17.5477 secs, and comparison 15.12 sec, and warnIfPerfScore > 1.7, and perfScore=0.861654]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 47.6417 secs, and comparison 48.7059 sec, and warnIfPerfScore > 1.5, and perfScore=1.02234]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.238 secs, and comparison 18.0451 sec, and warnIfPerfScore > 2.1, and perfScore=1.11129]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 39.2603 secs, and comparison 9.34099 sec, and warnIfPerfScore > 1.6, and perfScore=0.237925]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.044
	DETAILS:         	[baseline test 42.0265 secs, and comparison 1.8362 sec, and warnIfPerfScore > 0.23, and perfScore=0.0436915]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.9378 secs, and comparison 21.923 sec, and warnIfPerfScore > 1.3, and perfScore=1.69449]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.1566 secs, and comparison 20.4624 sec, and warnIfPerfScore > 1.2, and perfScore=1.5553]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.0615 secs, and comparison 5.33159 sec, and warnIfPerfScore > 0.33, and perfScore=0.265762]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.1557 secs, and comparison 53.0148 sec, and warnIfPerfScore > 6, and perfScore=4.02979]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.0243 secs, and comparison 19.8613 sec, and warnIfPerfScore > 0.8, and perfScore=1.52495]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.5424 secs, and comparison 42.4416 sec, and warnIfPerfScore > 1.4, and perfScore=3.38385]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 20.7048 secs, and comparison 5.00643 sec, and warnIfPerfScore > 0.65, and perfScore=0.241801]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 22.9257 secs, and comparison 57.9503 sec, and warnIfPerfScore > 4.4, and perfScore=2.52774]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 19.8078 secs, and comparison 6.17082 sec, and warnIfPerfScore > 0.6, and perfScore=0.311535]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 20.2625 secs, and comparison 5.94073 sec, and warnIfPerfScore > 0.6, and perfScore=0.293188]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.4919 secs, and comparison 5.49506 sec, and warnIfPerfScore > 0.6, and perfScore=0.268157]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 20.7984 secs, and comparison 12.9157 sec, and warnIfPerfScore > 1.3, and perfScore=0.620997]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 27.6727 secs, and comparison 20.9052 sec, and warnIfPerfScore > 1.3, and perfScore=0.755445]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 99.3321 secs, and comparison 13.0734 sec, and warnIfPerfScore > 0.3, and perfScore=0.131613]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.7004 secs, and comparison 22.0101 sec, and warnIfPerfScore > 1.5, and perfScore=1.17699]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.3008 secs, and comparison 5.17576 sec, and warnIfPerfScore > 0.55, and perfScore=0.338268]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.64321 sec, and warnIfPerfScore > 0.1, and perfScore=0.109547]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.06475 sec, and warnIfPerfScore > 0.5, and perfScore=0.270983]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.6818 secs, and comparison 19.7987 sec, and warnIfPerfScore > 2, and perfScore=1.05978]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.357 secs, and comparison 28.1099 sec, and warnIfPerfScore > 3.6, and perfScore=1.31619]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 50 seconds]]]

Succeeded
