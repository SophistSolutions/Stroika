Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 13:31:38 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.14678 secs, and comparison 4.42947 sec, and warnIfPerfScore > 0.65, and perfScore=0.619785]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.25513 secs, and comparison 3.37891 sec, and warnIfPerfScore > 0.5, and perfScore=0.365085]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 11.3846 secs, and comparison 9.20682 sec, and warnIfPerfScore > 1.05, and perfScore=0.808706]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.52754 secs, and comparison 8.95834 sec, and warnIfPerfScore > 1.15, and perfScore=1.05052]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.3021 secs, and comparison 2.3982 sec, and warnIfPerfScore > 0.48, and perfScore=0.232787]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.1837 secs, and comparison 2.83087 sec, and warnIfPerfScore > 0.57, and perfScore=0.277979]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.3667 secs, and comparison 27.2132 sec, and warnIfPerfScore > 2.9, and perfScore=2.62506]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.8312 secs, and comparison 28.5017 sec, and warnIfPerfScore > 2.9, and perfScore=2.22127]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 11.806 secs, and comparison 173.114 sec, and warnIfPerfScore > 24, and perfScore=14.6631]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2409 secs, and comparison 13.0123 sec, and warnIfPerfScore > 1.7, and perfScore=1.06301]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 13.5528 secs, and comparison 12.8353 sec, and warnIfPerfScore > 1.5, and perfScore=0.947061]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.0029 secs, and comparison 14.6122 sec, and warnIfPerfScore > 2.1, and perfScore=1.21739]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 14.4851 secs, and comparison 8.5423 sec, and warnIfPerfScore > 1.6, and perfScore=0.589728]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15.2176 secs, and comparison 2.02051 sec, and warnIfPerfScore > 0.23, and perfScore=0.132774]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.3091 secs, and comparison 15.6653 sec, and warnIfPerfScore > 1.3, and perfScore=1.02327]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 12.4966 secs, and comparison 8.32964 sec, and warnIfPerfScore > 1.2, and perfScore=0.666553]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.54835 secs, and comparison 2.31537 sec, and warnIfPerfScore > 0.33, and perfScore=0.270855]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 12.2334 secs, and comparison 44.2993 sec, and warnIfPerfScore > 6, and perfScore=3.62119]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 12.1213 secs, and comparison 8.26366 sec, and warnIfPerfScore > 0.8, and perfScore=0.681746]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.5565 secs, and comparison 14.3575 sec, and warnIfPerfScore > 1.4, and perfScore=1.14343]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.00556 secs, and comparison 4.04415 sec, and warnIfPerfScore > 0.65, and perfScore=0.449073]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 12.9193 secs, and comparison 41.7081 sec, and warnIfPerfScore > 4.4, and perfScore=3.22837]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.10011 secs, and comparison 4.0219 sec, and warnIfPerfScore > 0.6, and perfScore=0.441962]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.20993 secs, and comparison 3.98424 sec, and warnIfPerfScore > 0.6, and perfScore=0.432602]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.14723 secs, and comparison 4.14157 sec, and warnIfPerfScore > 0.6, and perfScore=0.452768]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.391 secs, and comparison 6.66412 sec, and warnIfPerfScore > 1.3, and perfScore=0.794199]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.42512 secs, and comparison 10.7479 sec, and warnIfPerfScore > 1.3, and perfScore=1.14035]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 60.0886 secs, and comparison 7.25176 sec, and warnIfPerfScore > 0.3, and perfScore=0.120684]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.7128 secs, and comparison 16.9174 sec, and warnIfPerfScore > 1.5, and perfScore=1.33074]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.18741 secs, and comparison 3.59091 sec, and warnIfPerfScore > 0.55, and perfScore=0.390851]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 15 secs, and comparison 1.08299 sec, and warnIfPerfScore > 0.1, and perfScore=0.0721991]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.476 sec, and warnIfPerfScore > 0.5, and perfScore=0.231733]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.9226 secs, and comparison 15.8371 sec, and warnIfPerfScore > 2, and perfScore=1.32832]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.261 secs, and comparison 33.5935 sec, and warnIfPerfScore > 3.6, and perfScore=2.53326]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 5 seconds]]]

Succeeded
