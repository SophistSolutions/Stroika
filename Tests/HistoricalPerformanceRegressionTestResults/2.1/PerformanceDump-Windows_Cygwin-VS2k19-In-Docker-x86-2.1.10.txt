Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 1:8:33 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.04281 secs, and comparison 5.29887 sec, and warnIfPerfScore > 0.65, and perfScore=0.585976]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.20954 secs, and comparison 3.24947 sec, and warnIfPerfScore > 0.5, and perfScore=0.352838]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.4162 secs, and comparison 9.38383 sec, and warnIfPerfScore > 1.05, and perfScore=0.821975]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.64511 secs, and comparison 9.3569 sec, and warnIfPerfScore > 1.15, and perfScore=1.08233]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.2735 secs, and comparison 2.95107 sec, and warnIfPerfScore > 0.48, and perfScore=0.261771]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.2059 secs, and comparison 3.34478 sec, and warnIfPerfScore > 0.57, and perfScore=0.298484]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.598 secs, and comparison 26.7251 sec, and warnIfPerfScore > 2.9, and perfScore=2.12138]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.8783 secs, and comparison 27.9137 sec, and warnIfPerfScore > 2.9, and perfScore=2.1675]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 11.8861 secs, and comparison 189.978 sec, and warnIfPerfScore > 24, and perfScore=15.9832]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.8621 secs, and comparison 13.3509 sec, and warnIfPerfScore > 1.7, and perfScore=1.22913]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 11.6945 secs, and comparison 11.256 sec, and warnIfPerfScore > 1.5, and perfScore=0.962503]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.348 secs, and comparison 15.309 sec, and warnIfPerfScore > 2.1, and perfScore=1.47941]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 12.747 secs, and comparison 9.41138 sec, and warnIfPerfScore > 1.6, and perfScore=0.738323]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 13.2228 secs, and comparison 1.86123 sec, and warnIfPerfScore > 0.23, and perfScore=0.140759]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.4217 secs, and comparison 15.0393 sec, and warnIfPerfScore > 1.3, and perfScore=1.04282]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 12.0738 secs, and comparison 7.184 sec, and warnIfPerfScore > 1.2, and perfScore=0.595008]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 8.20983 secs, and comparison 2.07435 sec, and warnIfPerfScore > 0.33, and perfScore=0.252666]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.5806 secs, and comparison 44.8488 sec, and warnIfPerfScore > 6, and perfScore=3.87277]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.6709 secs, and comparison 7.01494 sec, and warnIfPerfScore > 0.8, and perfScore=0.60106]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.7393 secs, and comparison 13.5122 sec, and warnIfPerfScore > 1.4, and perfScore=1.15102]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.23158 secs, and comparison 3.98805 sec, and warnIfPerfScore > 0.65, and perfScore=0.484482]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 12.055 secs, and comparison 41.9377 sec, and warnIfPerfScore > 4.4, and perfScore=3.47888]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.49318 secs, and comparison 3.982 sec, and warnIfPerfScore > 0.6, and perfScore=0.468846]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.47943 secs, and comparison 3.96265 sec, and warnIfPerfScore > 0.6, and perfScore=0.467325]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.53521 secs, and comparison 4.03524 sec, and warnIfPerfScore > 0.6, and perfScore=0.472776]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 8.42858 secs, and comparison 6.49965 sec, and warnIfPerfScore > 1.3, and perfScore=0.771144]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.36693 secs, and comparison 10.9879 sec, and warnIfPerfScore > 1.3, and perfScore=1.17305]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 60.5026 secs, and comparison 7.67243 sec, and warnIfPerfScore > 0.3, and perfScore=0.126812]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.2874 secs, and comparison 16.8882 sec, and warnIfPerfScore > 1.5, and perfScore=1.37443]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.88977 secs, and comparison 3.67894 sec, and warnIfPerfScore > 0.55, and perfScore=0.41384]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.05104 sec, and warnIfPerfScore > 0.1, and perfScore=0.0700696]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.55944 sec, and warnIfPerfScore > 0.5, and perfScore=0.237296]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.3635 secs, and comparison 15.2306 sec, and warnIfPerfScore > 2, and perfScore=1.34031]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.2128 secs, and comparison 33.6128 sec, and warnIfPerfScore > 3.6, and perfScore=2.54396]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 11 seconds]]]

Succeeded
