Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan  7 2:35:26 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 4.904 secs, and comparison 4.13108 sec, and warnIfPerfScore > 0.65, and perfScore=0.84239]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.114 secs, and comparison 2.42153 sec, and warnIfPerfScore > 0.5, and perfScore=0.473511]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.14754 secs, and comparison 6.63957 sec, and warnIfPerfScore > 1.05, and perfScore=0.928932]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.00383 secs, and comparison 6.5906 sec, and warnIfPerfScore > 1.15, and perfScore=1.09773]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 5.56166 secs, and comparison 2.29124 sec, and warnIfPerfScore > 0.48, and perfScore=0.411971]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.59199 secs, and comparison 2.81855 sec, and warnIfPerfScore > 0.57, and perfScore=0.504034]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.40644 secs, and comparison 16.8291 sec, and warnIfPerfScore > 2.9, and perfScore=3.11279]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 5.94091 secs, and comparison 17.0546 sec, and warnIfPerfScore > 2.9, and perfScore=2.87071]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.06642 secs, and comparison 126.032 sec, and warnIfPerfScore > 24, and perfScore=24.8759]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.82742 secs, and comparison 9.09936 sec, and warnIfPerfScore > 1.6, and perfScore=1.88493]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.44744 secs, and comparison 5.2846 sec, and warnIfPerfScore > 1.5, and perfScore=0.970107]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 4.42611 secs, and comparison 11.5077 sec, and warnIfPerfScore > 2.1, and perfScore=2.59995]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 6.21134 secs, and comparison 4.32891 sec, and warnIfPerfScore > 1.6, and perfScore=0.696935]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 6.39538 secs, and comparison 0.652064 sec, and warnIfPerfScore > 0.23, and perfScore=0.101959]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3425 secs, and comparison 11.6691 sec, and warnIfPerfScore > 1.3, and perfScore=1.0288]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.89841 secs, and comparison 5.05387 sec, and warnIfPerfScore > 1.2, and perfScore=0.639859]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 7.4008 secs, and comparison 1.65128 sec, and warnIfPerfScore > 0.33, and perfScore=0.223121]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.57112 secs, and comparison 37.222 sec, and warnIfPerfScore > 6, and perfScore=4.91631]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.53249 secs, and comparison 4.60361 sec, and warnIfPerfScore > 0.8, and perfScore=0.611167]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.58011 secs, and comparison 7.05643 sec, and warnIfPerfScore > 1.3, and perfScore=0.930914]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.31838 secs, and comparison 3.29 sec, and warnIfPerfScore > 0.65, and perfScore=0.449553]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.09687 secs, and comparison 34.729 sec, and warnIfPerfScore > 4.4, and perfScore=4.28918]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.35784 secs, and comparison 3.17944 sec, and warnIfPerfScore > 0.6, and perfScore=0.432116]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.41327 secs, and comparison 3.17439 sec, and warnIfPerfScore > 0.6, and perfScore=0.428204]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.34692 secs, and comparison 3.18727 sec, and warnIfPerfScore > 0.6, and perfScore=0.433823]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.34604 secs, and comparison 4.91358 sec, and warnIfPerfScore > 1.3, and perfScore=0.668875]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.79472 secs, and comparison 8.2429 sec, and warnIfPerfScore > 1.3, and perfScore=1.0575]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 33.8167 secs, and comparison 4.73935 sec, and warnIfPerfScore > 0.3, and perfScore=0.140148]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.5068 secs, and comparison 8.86063 sec, and warnIfPerfScore > 1.5, and perfScore=1.60903]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.29878 secs, and comparison 2.52611 sec, and warnIfPerfScore > 0.55, and perfScore=0.476734]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.047
	DETAILS:         	[baseline test 15 secs, and comparison 0.705251 sec, and warnIfPerfScore > 0.1, and perfScore=0.0470167]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.75687 sec, and warnIfPerfScore > 0.5, and perfScore=0.183791]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.86954 secs, and comparison 7.45068 sec, and warnIfPerfScore > 2, and perfScore=1.26938]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.19945 secs, and comparison 12.7461 sec, and warnIfPerfScore > 3.1, and perfScore=2.05601]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 22 seconds]]]

Succeeded
