Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 11:12:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.32454 secs, and comparison 4.1491 sec, and warnIfPerfScore > 0.65, and perfScore=0.77924]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 4.9517 secs, and comparison 2.42129 sec, and warnIfPerfScore > 0.5, and perfScore=0.488981]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.19391 secs, and comparison 6.60329 sec, and warnIfPerfScore > 1.05, and perfScore=0.917901]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.10597 secs, and comparison 7.09916 sec, and warnIfPerfScore > 1.15, and perfScore=1.16266]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.81307 secs, and comparison 2.25928 sec, and warnIfPerfScore > 0.48, and perfScore=0.388655]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.63402 secs, and comparison 2.86969 sec, and warnIfPerfScore > 0.57, and perfScore=0.50935]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.59046 secs, and comparison 17.2836 sec, and warnIfPerfScore > 2.9, and perfScore=3.09162]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 5.99839 secs, and comparison 17.001 sec, and warnIfPerfScore > 2.9, and perfScore=2.83426]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 5.0856 secs, and comparison 133.936 sec, and warnIfPerfScore > 24, and perfScore=26.3363]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.7086 secs, and comparison 9.29644 sec, and warnIfPerfScore > 1.6, and perfScore=1.97435]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.81435 secs, and comparison 5.32833 sec, and warnIfPerfScore > 1.5, and perfScore=0.91641]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.71032 secs, and comparison 11.3099 sec, and warnIfPerfScore > 2.1, and perfScore=2.40108]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.3155 secs, and comparison 4.35847 sec, and warnIfPerfScore > 1.6, and perfScore=0.690123]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 6.53659 secs, and comparison 0.64721 sec, and warnIfPerfScore > 0.23, and perfScore=0.0990133]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.6213 secs, and comparison 11.8276 sec, and warnIfPerfScore > 1.3, and perfScore=1.01775]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.95717 secs, and comparison 4.96125 sec, and warnIfPerfScore > 1.2, and perfScore=0.623495]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.43137 secs, and comparison 1.76537 sec, and warnIfPerfScore > 0.33, and perfScore=0.237556]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 7.69529 secs, and comparison 37.2668 sec, and warnIfPerfScore > 6, and perfScore=4.84281]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.55227 secs, and comparison 4.72788 sec, and warnIfPerfScore > 0.8, and perfScore=0.626021]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.578 secs, and comparison 7.13774 sec, and warnIfPerfScore > 1.4, and perfScore=0.941903]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.61357 secs, and comparison 3.36864 sec, and warnIfPerfScore > 0.65, and perfScore=0.442452]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.17603 secs, and comparison 34.8274 sec, and warnIfPerfScore > 4.4, and perfScore=4.2597]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.30309 secs, and comparison 3.17593 sec, and warnIfPerfScore > 0.6, and perfScore=0.434874]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.33423 secs, and comparison 3.17562 sec, and warnIfPerfScore > 0.6, and perfScore=0.432986]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.52689 secs, and comparison 3.30458 sec, and warnIfPerfScore > 0.6, and perfScore=0.439037]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.58188 secs, and comparison 4.91523 sec, and warnIfPerfScore > 1.3, and perfScore=0.648287]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.77862 secs, and comparison 8.20625 sec, and warnIfPerfScore > 1.3, and perfScore=1.05498]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 34.2032 secs, and comparison 4.7427 sec, and warnIfPerfScore > 0.3, and perfScore=0.138663]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.70798 secs, and comparison 9.24804 sec, and warnIfPerfScore > 1.5, and perfScore=1.6202]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.33129 secs, and comparison 2.47153 sec, and warnIfPerfScore > 0.55, and perfScore=0.463589]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.048
	DETAILS:         	[baseline test 15 secs, and comparison 0.721732 sec, and warnIfPerfScore > 0.1, and perfScore=0.0481155]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.64021 sec, and warnIfPerfScore > 0.5, and perfScore=0.176014]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.83144 secs, and comparison 7.42774 sec, and warnIfPerfScore > 2, and perfScore=1.27374]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.46553 secs, and comparison 13.2602 sec, and warnIfPerfScore > 3.1, and perfScore=2.05091]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 38 seconds]]]

Succeeded
