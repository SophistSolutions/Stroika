Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 10 21:15:29 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 40.7056 secs, and comparison 6.64982 sec, and warnIfPerfScore > 0.65, and perfScore=0.163364]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 40.4034 secs, and comparison 6.33961 sec, and warnIfPerfScore > 0.5, and perfScore=0.156908]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 17.9987 secs, and comparison 12.1446 sec, and warnIfPerfScore > 1.05, and perfScore=0.674748]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 12.9448 secs, and comparison 12.1429 sec, and warnIfPerfScore > 1.15, and perfScore=0.938053]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.4138 secs, and comparison 3.68054 sec, and warnIfPerfScore > 0.48, and perfScore=0.189584]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 19.492 secs, and comparison 3.97855 sec, and warnIfPerfScore > 0.57, and perfScore=0.204113]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 19.1627 secs, and comparison 32.0673 sec, and warnIfPerfScore > 2.9, and perfScore=1.67343]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 19.2528 secs, and comparison 33.5234 sec, and warnIfPerfScore > 2.9, and perfScore=1.74122]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.3667 secs, and comparison 186.209 sec, and warnIfPerfScore > 24, and perfScore=12.9612]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 19.5055 secs, and comparison 14.1526 sec, and warnIfPerfScore > 1.7, and perfScore=0.72557]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 39.7561 secs, and comparison 37.7498 sec, and warnIfPerfScore > 1.5, and perfScore=0.949533]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.3931 secs, and comparison 16.9999 sec, and warnIfPerfScore > 2.1, and perfScore=1.03701]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 32.8967 secs, and comparison 9.43275 sec, and warnIfPerfScore > 1.6, and perfScore=0.286738]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 35.3238 secs, and comparison 2.06836 sec, and warnIfPerfScore > 0.23, and perfScore=0.0585542]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.4217 secs, and comparison 21.9555 sec, and warnIfPerfScore > 1.3, and perfScore=1.76751]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.4471 secs, and comparison 20.2802 sec, and warnIfPerfScore > 1.2, and perfScore=1.50815]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 21.8567 secs, and comparison 5.37247 sec, and warnIfPerfScore > 0.33, and perfScore=0.245804]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 12.937 secs, and comparison 51.8989 sec, and warnIfPerfScore > 6, and perfScore=4.01167]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.3512 secs, and comparison 18.6419 sec, and warnIfPerfScore > 0.8, and perfScore=1.39627]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 12.8674 secs, and comparison 50.2537 sec, and warnIfPerfScore > 1.4, and perfScore=3.90552]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 21.6496 secs, and comparison 4.88596 sec, and warnIfPerfScore > 0.65, and perfScore=0.225684]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 23.7894 secs, and comparison 57.4395 sec, and warnIfPerfScore > 4.4, and perfScore=2.4145]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 21.5119 secs, and comparison 6.14868 sec, and warnIfPerfScore > 0.6, and perfScore=0.285827]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 21.6214 secs, and comparison 5.96467 sec, and warnIfPerfScore > 0.6, and perfScore=0.275869]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 21.2402 secs, and comparison 6.02693 sec, and warnIfPerfScore > 0.6, and perfScore=0.283752]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 21.5119 secs, and comparison 13.2289 sec, and warnIfPerfScore > 1.3, and perfScore=0.614955]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 28.7814 secs, and comparison 20.6493 sec, and warnIfPerfScore > 1.3, and perfScore=0.717452]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.081
	DETAILS:         	[baseline test 99.9061 secs, and comparison 8.04484 sec, and warnIfPerfScore > 0.3, and perfScore=0.080524]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.5975 secs, and comparison 22.6803 sec, and warnIfPerfScore > 1.5, and perfScore=1.28884]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 19.2778 secs, and comparison 6.14899 sec, and warnIfPerfScore > 0.55, and perfScore=0.318968]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.78908 sec, and warnIfPerfScore > 0.1, and perfScore=0.119272]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.39693 sec, and warnIfPerfScore > 0.5, and perfScore=0.293128]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.5048 secs, and comparison 22.4302 sec, and warnIfPerfScore > 2, and perfScore=1.14999]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 21.667 secs, and comparison 26.17 sec, and warnIfPerfScore > 3.6, and perfScore=1.20782]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 25 minutes, 27 seconds]]]

Succeeded
