Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec  5 4:1:34 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 5.73178 secs, and comparison 5.07312 sec, and warnIfPerfScore > 0.62, and perfScore=0.885085]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.69737 secs, and comparison 3.0049 sec, and warnIfPerfScore > 0.5, and perfScore=0.527418]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.76144 secs, and comparison 7.58101 sec, and warnIfPerfScore > 1.05, and perfScore=1.12121]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.06804 secs, and comparison 3.74705 sec, and warnIfPerfScore > 0.48, and perfScore=0.921096]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 4.6907 secs, and comparison 4.36599 sec, and warnIfPerfScore > 0.57, and perfScore=0.930775]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 7.18239 secs, and comparison 38.6086 sec, and warnIfPerfScore > 2.9, and perfScore=5.37545]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.37635 secs, and comparison 40.503 sec, and warnIfPerfScore > 2.9, and perfScore=4.8354]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	34
	DETAILS:         	[baseline test 11.1136 secs, and comparison 374.179 sec, and warnIfPerfScore > 9.7, and perfScore=33.6687]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.07937 secs, and comparison 11.6361 sec, and warnIfPerfScore > 1.6, and perfScore=2.29086]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 29.7579 secs, and comparison 34.9618 sec, and warnIfPerfScore > 1.5, and perfScore=1.17488]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 3.08465 secs, and comparison 11.4435 sec, and warnIfPerfScore > 2.1, and perfScore=3.70982]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.8115 secs, and comparison 5.15094 sec, and warnIfPerfScore > 1.3, and perfScore=0.756212]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.32169 secs, and comparison 3.1648 sec, and warnIfPerfScore > 0.23, and perfScore=0.43225]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 4.15095 secs, and comparison 6.19343 sec, and warnIfPerfScore > 1.3, and perfScore=1.49205]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 31.3361 secs, and comparison 11.2984 sec, and warnIfPerfScore > 1.2, and perfScore=0.360554]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.016
	DETAILS:         	[baseline test 146.897 secs, and comparison 2.38578 sec, and warnIfPerfScore > 0.33, and perfScore=0.0162412]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 33.6663 secs, and comparison 70.3672 sec, and warnIfPerfScore > 6, and perfScore=2.09014]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 96.5974 secs, and comparison 5.89408 sec, and warnIfPerfScore > 0.5, and perfScore=0.0610169]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 36.2791 secs, and comparison 51.2098 sec, and warnIfPerfScore > 4.4, and perfScore=1.41155]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.035
	DETAILS:         	[baseline test 121.795 secs, and comparison 4.23024 sec, and warnIfPerfScore > 0.6, and perfScore=0.0347325]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.18269 secs, and comparison 18.6986 sec, and warnIfPerfScore > 1.5, and perfScore=2.28514]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.6161 secs, and comparison 3.10344 sec, and warnIfPerfScore > 0.55, and perfScore=0.292334]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.68208 sec, and warnIfPerfScore > 0.25, and perfScore=0.112138]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.44778 sec, and warnIfPerfScore > 0.5, and perfScore=0.363186]
	                 	Test_Optional_ is FASTER

[[[Tests took: 22 minutes, 24 seconds]]]

Succeeded
