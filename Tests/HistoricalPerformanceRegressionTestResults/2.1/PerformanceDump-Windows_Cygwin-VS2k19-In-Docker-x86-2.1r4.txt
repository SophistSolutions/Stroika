Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  1 :16:40 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.42263 secs, and comparison 4.47819 sec, and warnIfPerfScore > 0.65, and perfScore=0.603315]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.38596 secs, and comparison 2.98749 sec, and warnIfPerfScore > 0.5, and perfScore=0.404483]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.00974 secs, and comparison 7.84275 sec, and warnIfPerfScore > 1.05, and perfScore=0.870475]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.08523 secs, and comparison 7.95305 sec, and warnIfPerfScore > 1.15, and perfScore=1.12248]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.04812 secs, and comparison 2.73517 sec, and warnIfPerfScore > 0.48, and perfScore=0.339851]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.79509 secs, and comparison 3.1917 sec, and warnIfPerfScore > 0.57, and perfScore=0.409449]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.37264 secs, and comparison 21.4717 sec, and warnIfPerfScore > 2.9, and perfScore=2.56451]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.60435 secs, and comparison 22.1855 sec, and warnIfPerfScore > 2.9, and perfScore=2.5784]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.20192 secs, and comparison 148.84 sec, and warnIfPerfScore > 24, and perfScore=18.1469]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.33878 secs, and comparison 11.3276 sec, and warnIfPerfScore > 1.7, and perfScore=1.54353]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.87755 secs, and comparison 7.85875 sec, and warnIfPerfScore > 1.5, and perfScore=0.997614]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.14479 secs, and comparison 13.1786 sec, and warnIfPerfScore > 2.1, and perfScore=1.84451]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.6835 secs, and comparison 7.96623 sec, and warnIfPerfScore > 1.6, and perfScore=0.917399]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 9.07816 secs, and comparison 1.43121 sec, and warnIfPerfScore > 0.23, and perfScore=0.157654]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0497 secs, and comparison 13.6266 sec, and warnIfPerfScore > 1.3, and perfScore=1.04421]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.4543 secs, and comparison 5.44333 sec, and warnIfPerfScore > 1.2, and perfScore=0.520678]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.25086 secs, and comparison 1.51385 sec, and warnIfPerfScore > 0.33, and perfScore=0.242183]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.98061 secs, and comparison 41.2534 sec, and warnIfPerfScore > 6, and perfScore=4.13335]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.0143 secs, and comparison 5.18278 sec, and warnIfPerfScore > 0.8, and perfScore=0.517535]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.0176 secs, and comparison 9.38916 sec, and warnIfPerfScore > 1.4, and perfScore=0.937265]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.24301 secs, and comparison 3.57734 sec, and warnIfPerfScore > 0.65, and perfScore=0.573015]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.0804 secs, and comparison 38.6698 sec, and warnIfPerfScore > 4.4, and perfScore=3.83614]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.4906 secs, and comparison 3.57365 sec, and warnIfPerfScore > 0.6, and perfScore=0.550589]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.45779 secs, and comparison 3.61898 sec, and warnIfPerfScore > 0.6, and perfScore=0.560405]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.46985 secs, and comparison 3.5792 sec, and warnIfPerfScore > 0.6, and perfScore=0.553213]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.43508 secs, and comparison 4.82918 sec, and warnIfPerfScore > 1.3, and perfScore=0.750445]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.95159 secs, and comparison 9.01346 sec, and warnIfPerfScore > 1.3, and perfScore=1.2966]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.0379 secs, and comparison 6.13414 sec, and warnIfPerfScore > 0.3, and perfScore=0.133241]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.46875 secs, and comparison 12.311 sec, and warnIfPerfScore > 1.5, and perfScore=1.4537]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.41838 secs, and comparison 2.96795 sec, and warnIfPerfScore > 0.55, and perfScore=0.40008]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 15 secs, and comparison 0.952816 sec, and warnIfPerfScore > 0.1, and perfScore=0.063521]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.10282 sec, and warnIfPerfScore > 0.5, and perfScore=0.206855]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.18723 secs, and comparison 8.8921 sec, and warnIfPerfScore > 2, and perfScore=1.08609]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.69248 secs, and comparison 30.9211 sec, and warnIfPerfScore > 3.6, and perfScore=3.19021]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 53 seconds]]]

Succeeded
