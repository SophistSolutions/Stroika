Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Dec 23 16:36:38 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.64813 secs, and comparison 5.16001 sec, and warnIfPerfScore > 0.62, and perfScore=0.77616]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.84028 secs, and comparison 3.94484 sec, and warnIfPerfScore > 0.5, and perfScore=0.576708]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.92074 secs, and comparison 8.12146 sec, and warnIfPerfScore > 1.05, and perfScore=0.910402]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.46197 secs, and comparison 8.13294 sec, and warnIfPerfScore > 1.15, and perfScore=1.08992]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.12472 secs, and comparison 3.612 sec, and warnIfPerfScore > 0.48, and perfScore=1.15594]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.17435 secs, and comparison 4.41002 sec, and warnIfPerfScore > 0.57, and perfScore=1.38927]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.4412 secs, and comparison 23.2344 sec, and warnIfPerfScore > 2.9, and perfScore=1.6089]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 15.9853 secs, and comparison 25.0631 sec, and warnIfPerfScore > 2.9, and perfScore=1.56788]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.1
	DETAILS:         	[baseline test 14.1307 secs, and comparison 100.922 sec, and warnIfPerfScore > 9.7, and perfScore=7.14203]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 13.5896 secs, and comparison 11.7077 sec, and warnIfPerfScore > 1.6, and perfScore=0.861514]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.68704 secs, and comparison 9.55858 sec, and warnIfPerfScore > 1.5, and perfScore=0.986738]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.58458 secs, and comparison 13.6447 sec, and warnIfPerfScore > 2.1, and perfScore=1.42361]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.44497 secs, and comparison 7.08757 sec, and warnIfPerfScore > 1.3, and perfScore=0.839265]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.79389 secs, and comparison 3.20757 sec, and warnIfPerfScore > 0.23, and perfScore=0.36475]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.33711 secs, and comparison 8.59986 sec, and warnIfPerfScore > 1.3, and perfScore=1.1721]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.61217 secs, and comparison 11.6815 sec, and warnIfPerfScore > 1.2, and perfScore=1.76667]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.7758 secs, and comparison 2.0834 sec, and warnIfPerfScore > 0.33, and perfScore=0.307476]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 6.18259 secs, and comparison 46.4961 sec, and warnIfPerfScore > 6, and perfScore=7.52049]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.84238 secs, and comparison 11.1763 sec, and warnIfPerfScore > 0.8, and perfScore=1.91297]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.26791 secs, and comparison 15.8191 sec, and warnIfPerfScore > 0.9, and perfScore=2.52382]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.3435 secs, and comparison 3.84071 sec, and warnIfPerfScore > 0.5, and perfScore=0.605457]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 8.8213 secs, and comparison 46.674 sec, and warnIfPerfScore > 4.4, and perfScore=5.29105]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.26236 secs, and comparison 6.23464 sec, and warnIfPerfScore > 0.6, and perfScore=0.995574]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 34.7624 secs, and comparison 9.08463 sec, and warnIfPerfScore > 0.2, and perfScore=0.261335]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.8072 secs, and comparison 18.1582 sec, and warnIfPerfScore > 1.5, and perfScore=1.14873]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.5082 secs, and comparison 3.12874 sec, and warnIfPerfScore > 0.55, and perfScore=0.250135]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.43044 sec, and warnIfPerfScore > 0.25, and perfScore=0.0953624]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.84663 sec, and warnIfPerfScore > 0.5, and perfScore=0.189775]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 8 seconds]]]

Succeeded
