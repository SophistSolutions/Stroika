Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri May 13 9:31:5 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 5.12647 secs, and comparison 2.15702 sec, and warnIfPerfScore > 0.65, and perfScore=0.420761]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 5.35288 secs, and comparison 3.72662 sec, and warnIfPerfScore > 0.5, and perfScore=0.696189]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.04875 secs, and comparison 7.7386 sec, and warnIfPerfScore > 1.05, and perfScore=1.91135]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.35144 secs, and comparison 7.64141 sec, and warnIfPerfScore > 1.15, and perfScore=1.75607]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 7.15512 secs, and comparison 1.56415 sec, and warnIfPerfScore > 0.48, and perfScore=0.218605]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 8.47982 secs, and comparison 1.78575 sec, and warnIfPerfScore > 0.57, and perfScore=0.210588]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.18956 secs, and comparison 15.6983 sec, and warnIfPerfScore > 2.9, and perfScore=2.53626]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.28868 secs, and comparison 13.6972 sec, and warnIfPerfScore > 2.9, and perfScore=2.58991]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.69797 secs, and comparison 59.4285 sec, and warnIfPerfScore > 24, and perfScore=10.4298]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.34781 secs, and comparison 9.10314 sec, and warnIfPerfScore > 1.7, and perfScore=0.973826]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.9286 secs, and comparison 8.55063 sec, and warnIfPerfScore > 1.5, and perfScore=0.957667]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 4.31035 secs, and comparison 11.1644 sec, and warnIfPerfScore > 2.1, and perfScore=2.59013]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.05815 secs, and comparison 6.28819 sec, and warnIfPerfScore > 1.6, and perfScore=1.03797]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.90413 secs, and comparison 2.14371 sec, and warnIfPerfScore > 0.23, and perfScore=0.310496]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.21269 secs, and comparison 5.57815 sec, and warnIfPerfScore > 1.3, and perfScore=1.32413]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.14227 secs, and comparison 9.90104 sec, and warnIfPerfScore > 1.2, and perfScore=1.92542]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 18.8746 secs, and comparison 1.98951 sec, and warnIfPerfScore > 0.33, and perfScore=0.105407]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.68654 secs, and comparison 43.2161 sec, and warnIfPerfScore > 6, and perfScore=11.7227]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 3.92449 secs, and comparison 7.05132 sec, and warnIfPerfScore > 0.8, and perfScore=1.79675]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.89615 secs, and comparison 8.7917 sec, and warnIfPerfScore > 1.4, and perfScore=2.25651]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 18.0352 secs, and comparison 3.80392 sec, and warnIfPerfScore > 0.65, and perfScore=0.210916]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.55604 secs, and comparison 38.368 sec, and warnIfPerfScore > 4.4, and perfScore=8.42136]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 16.4825 secs, and comparison 3.90841 sec, and warnIfPerfScore > 0.6, and perfScore=0.237125]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 19.6783 secs, and comparison 4.00307 sec, and warnIfPerfScore > 0.6, and perfScore=0.203425]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.1316 secs, and comparison 4.28116 sec, and warnIfPerfScore > 0.6, and perfScore=0.282928]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.5562 secs, and comparison 5.10088 sec, and warnIfPerfScore > 1.3, and perfScore=0.376277]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 20.6419 secs, and comparison 10.3024 sec, and warnIfPerfScore > 1.3, and perfScore=0.4991]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 19.6048 secs, and comparison 6.37808 sec, and warnIfPerfScore > 0.3, and perfScore=0.325332]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.15338 secs, and comparison 16.841 sec, and warnIfPerfScore > 1.5, and perfScore=1.83986]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.85041 secs, and comparison 2.14315 sec, and warnIfPerfScore > 0.55, and perfScore=0.312849]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.793503 sec, and warnIfPerfScore > 0.1, and perfScore=0.0529002]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15 secs, and comparison 1.47696 sec, and warnIfPerfScore > 0.5, and perfScore=0.0984637]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 59 seconds]]]

Succeeded
