Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar 21 10:41:4 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 3.31494 secs, and comparison 1.4313 sec, and warnIfPerfScore > 0.65, and perfScore=0.431773]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.5302 secs, and comparison 3.24834 sec, and warnIfPerfScore > 0.5, and perfScore=0.920157]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.70187 secs, and comparison 6.90992 sec, and warnIfPerfScore > 1.05, and perfScore=1.8666]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.38877 secs, and comparison 6.82785 sec, and warnIfPerfScore > 1.15, and perfScore=2.85832]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 3.87137 secs, and comparison 0.971147 sec, and warnIfPerfScore > 0.48, and perfScore=0.250853]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.66235 secs, and comparison 1.05626 sec, and warnIfPerfScore > 0.57, and perfScore=0.226551]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 3.45678 secs, and comparison 11.939 sec, and warnIfPerfScore > 2.9, and perfScore=3.4538]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 4.12804 secs, and comparison 14.9118 sec, and warnIfPerfScore > 2.9, and perfScore=3.61231]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 6.82362 secs, and comparison 43.9434 sec, and warnIfPerfScore > 24, and perfScore=6.4399]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.08012 secs, and comparison 7.89796 sec, and warnIfPerfScore > 1.7, and perfScore=0.977455]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.7491 secs, and comparison 6.46852 sec, and warnIfPerfScore > 1.5, and perfScore=0.958427]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 2.80119 secs, and comparison 9.27194 sec, and warnIfPerfScore > 2.1, and perfScore=3.31]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.10638 secs, and comparison 3.62721 sec, and warnIfPerfScore > 1.6, and perfScore=0.883312]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.3097 secs, and comparison 1.41902 sec, and warnIfPerfScore > 0.23, and perfScore=0.329262]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.24542 secs, and comparison 9.32942 sec, and warnIfPerfScore > 1.3, and perfScore=2.19753]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.12234 secs, and comparison 9.03302 sec, and warnIfPerfScore > 1.2, and perfScore=2.19124]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 19.8413 secs, and comparison 1.75284 sec, and warnIfPerfScore > 0.33, and perfScore=0.0883428]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.93157 secs, and comparison 41.3691 sec, and warnIfPerfScore > 6, and perfScore=14.1116]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.95075 secs, and comparison 6.12414 sec, and warnIfPerfScore > 0.8, and perfScore=2.07545]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.96518 secs, and comparison 8.27035 sec, and warnIfPerfScore > 1.4, and perfScore=2.78916]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.9745 secs, and comparison 4.19625 sec, and warnIfPerfScore > 0.65, and perfScore=0.19096]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 4.73635 secs, and comparison 37.6367 sec, and warnIfPerfScore > 4.4, and perfScore=7.94636]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.7873 secs, and comparison 3.80843 sec, and warnIfPerfScore > 0.6, and perfScore=0.276227]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.0751 secs, and comparison 3.75317 sec, and warnIfPerfScore > 0.6, and perfScore=0.266653]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.0183 secs, and comparison 3.7285 sec, and warnIfPerfScore > 0.6, and perfScore=0.265974]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.9903 secs, and comparison 4.3039 sec, and warnIfPerfScore > 1.3, and perfScore=0.307635]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 22.1951 secs, and comparison 12.1105 sec, and warnIfPerfScore > 1.3, and perfScore=0.545638]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 30.8103 secs, and comparison 6.16357 sec, and warnIfPerfScore > 0.3, and perfScore=0.200049]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.8204 secs, and comparison 19.9485 sec, and warnIfPerfScore > 1.5, and perfScore=1.44341]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.67999 secs, and comparison 3.06842 sec, and warnIfPerfScore > 0.55, and perfScore=0.353505]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 15 secs, and comparison 1.4514 sec, and warnIfPerfScore > 0.1, and perfScore=0.0967602]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.15115 sec, and warnIfPerfScore > 0.5, and perfScore=0.14341]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 20 seconds]]]

Succeeded
