Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb 15 2:15:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.04163 secs, and comparison 4.4097 sec, and warnIfPerfScore > 0.65, and perfScore=0.626232]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.76058 secs, and comparison 2.97698 sec, and warnIfPerfScore > 0.5, and perfScore=0.383603]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.80523 secs, and comparison 8.20036 sec, and warnIfPerfScore > 1.05, and perfScore=0.931306]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.72031 secs, and comparison 8.31729 sec, and warnIfPerfScore > 1.15, and perfScore=0.953783]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15.4972 secs, and comparison 3.10234 sec, and warnIfPerfScore > 0.48, and perfScore=0.200186]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.5311 secs, and comparison 3.09562 sec, and warnIfPerfScore > 0.57, and perfScore=0.228777]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.73815 secs, and comparison 22.1312 sec, and warnIfPerfScore > 2.9, and perfScore=2.53271]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 12.3133 secs, and comparison 25.2078 sec, and warnIfPerfScore > 2.9, and perfScore=2.04721]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 8.33379 secs, and comparison 167.993 sec, and warnIfPerfScore > 24, and perfScore=20.1581]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.9614 secs, and comparison 11.8313 sec, and warnIfPerfScore > 1.7, and perfScore=1.69955]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.70995 secs, and comparison 7.60722 sec, and warnIfPerfScore > 1.5, and perfScore=0.986675]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 6.46639 secs, and comparison 14.8184 sec, and warnIfPerfScore > 2.1, and perfScore=2.2916]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2.1 and got 2.2916}}}

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.66606 secs, and comparison 9.39252 sec, and warnIfPerfScore > 1.6, and perfScore=1.08383]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.2411 secs, and comparison 1.2886 sec, and warnIfPerfScore > 0.23, and perfScore=0.105268]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3766 secs, and comparison 13.7166 sec, and warnIfPerfScore > 1.3, and perfScore=1.02541]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 12.3418 secs, and comparison 5.68064 sec, and warnIfPerfScore > 1.2, and perfScore=0.460277]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.11713 secs, and comparison 2.42922 sec, and warnIfPerfScore > 0.33, and perfScore=0.34132]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.34132}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.89795 secs, and comparison 42.7724 sec, and warnIfPerfScore > 6, and perfScore=4.32134]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.57208 secs, and comparison 7.9719 sec, and warnIfPerfScore > 0.8, and perfScore=0.832828]
	                 	Sequence_Array<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.8 and got 0.832828}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 10.4654 secs, and comparison 9.58342 sec, and warnIfPerfScore > 1.4, and perfScore=0.915728]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.39382 secs, and comparison 3.72695 sec, and warnIfPerfScore > 0.65, and perfScore=0.504063]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.50692 secs, and comparison 39.5967 sec, and warnIfPerfScore > 4.4, and perfScore=4.16505]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.28634 secs, and comparison 3.80664 sec, and warnIfPerfScore > 0.6, and perfScore=0.605542]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.605542}}}

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.39857 secs, and comparison 3.65627 sec, and warnIfPerfScore > 0.6, and perfScore=0.57142]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.66568 secs, and comparison 3.48091 sec, and warnIfPerfScore > 0.6, and perfScore=0.45409]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.86836 secs, and comparison 7.4318 sec, and warnIfPerfScore > 1.3, and perfScore=1.08203]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.90674 secs, and comparison 8.67203 sec, and warnIfPerfScore > 1.3, and perfScore=1.09679]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 48.7731 secs, and comparison 7.43024 sec, and warnIfPerfScore > 0.3, and perfScore=0.152343]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5053 secs, and comparison 13.0321 sec, and warnIfPerfScore > 1.5, and perfScore=1.04213]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.32712 secs, and comparison 3.84606 sec, and warnIfPerfScore > 0.55, and perfScore=0.524907]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 15 secs, and comparison 1.29928 sec, and warnIfPerfScore > 0.1, and perfScore=0.0866188]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.57976 sec, and warnIfPerfScore > 0.5, and perfScore=0.23865]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.52382 secs, and comparison 8.9208 sec, and warnIfPerfScore > 2, and perfScore=1.04657]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.58454 secs, and comparison 34.2193 sec, and warnIfPerfScore > 3.6, and perfScore=3.57026]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 25 seconds]]]

Succeeded
