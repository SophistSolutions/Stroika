Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 28 2:59:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 7.74211 secs, and comparison 5.46186 sec, and warnIfPerfScore > 0.65, and perfScore=0.705475]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.49688 secs, and comparison 3.25172 sec, and warnIfPerfScore > 0.5, and perfScore=0.382696]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.0953 secs, and comparison 9.78749 sec, and warnIfPerfScore > 1.05, and perfScore=0.882133]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.77763 secs, and comparison 9.8786 sec, and warnIfPerfScore > 1.15, and perfScore=1.12543]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 10.3133 secs, and comparison 3.05539 sec, and warnIfPerfScore > 0.48, and perfScore=0.296259]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.054 secs, and comparison 3.90657 sec, and warnIfPerfScore > 0.57, and perfScore=0.388561]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.4712 secs, and comparison 27.0243 sec, and warnIfPerfScore > 2.9, and perfScore=2.58081]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.8393 secs, and comparison 27.5806 sec, and warnIfPerfScore > 2.9, and perfScore=2.5445]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 8.7361 secs, and comparison 143.58 sec, and warnIfPerfScore > 24, and perfScore=16.4352]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.51574 secs, and comparison 14.0527 sec, and warnIfPerfScore > 1.7, and perfScore=1.6502]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.4316 secs, and comparison 9.83269 sec, and warnIfPerfScore > 1.5, and perfScore=0.942583]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.57018 secs, and comparison 16.9207 sec, and warnIfPerfScore > 2.1, and perfScore=1.97436]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 10.7831 secs, and comparison 6.31847 sec, and warnIfPerfScore > 1.6, and perfScore=0.58596]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 11.3749 secs, and comparison 1.00521 sec, and warnIfPerfScore > 0.23, and perfScore=0.0883711]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.0529 secs, and comparison 12.7728 sec, and warnIfPerfScore > 1.3, and perfScore=1.05973]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.19179 secs, and comparison 8.32348 sec, and warnIfPerfScore > 1.2, and perfScore=0.905535]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.1645 secs, and comparison 3.26834 sec, and warnIfPerfScore > 0.33, and perfScore=0.24827]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 8.5174 secs, and comparison 46.5016 sec, and warnIfPerfScore > 6, and perfScore=5.4596]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.51623 secs, and comparison 8.0426 sec, and warnIfPerfScore > 0.8, and perfScore=0.944385]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.44026 secs, and comparison 10.892 sec, and warnIfPerfScore > 1.4, and perfScore=1.29049]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.0528 secs, and comparison 4.27326 sec, and warnIfPerfScore > 0.65, and perfScore=0.327383]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.53387 secs, and comparison 43.1467 sec, and warnIfPerfScore > 4.4, and perfScore=4.52562]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.9982 secs, and comparison 3.99996 sec, and warnIfPerfScore > 0.6, and perfScore=0.307731]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.0554 secs, and comparison 4.35181 sec, and warnIfPerfScore > 0.6, and perfScore=0.333335]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.8653 secs, and comparison 4.25759 sec, and warnIfPerfScore > 0.6, and perfScore=0.330937]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 12.565 secs, and comparison 8.89174 sec, and warnIfPerfScore > 1.3, and perfScore=0.707657]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 14.3201 secs, and comparison 11.7038 sec, and warnIfPerfScore > 1.3, and perfScore=0.817294]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 59.4131 secs, and comparison 11.3558 sec, and warnIfPerfScore > 0.3, and perfScore=0.191132]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.12143 secs, and comparison 14.7959 sec, and warnIfPerfScore > 1.5, and perfScore=1.6221]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.3544 secs, and comparison 4.25797 sec, and warnIfPerfScore > 0.55, and perfScore=0.375008]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.79805 sec, and warnIfPerfScore > 0.1, and perfScore=0.0532033]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.86553 sec, and warnIfPerfScore > 0.5, and perfScore=0.257702]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.6328 secs, and comparison 16.4826 sec, and warnIfPerfScore > 2, and perfScore=1.55017]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.5299 secs, and comparison 20.5051 sec, and warnIfPerfScore > 3.6, and perfScore=1.94733]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 11 seconds]]]

Succeeded
