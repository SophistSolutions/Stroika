Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Mar  9 14:36:41 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.1517 secs, and comparison 5.28542 sec, and warnIfPerfScore > 0.65, and perfScore=0.520645]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.5823 secs, and comparison 3.54604 sec, and warnIfPerfScore > 0.5, and perfScore=0.33509]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.6951 secs, and comparison 9.91705 sec, and warnIfPerfScore > 1.05, and perfScore=0.847969]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.36894 secs, and comparison 10.0431 sec, and warnIfPerfScore > 1.15, and perfScore=1.07196]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 10.6401 secs, and comparison 3.18189 sec, and warnIfPerfScore > 0.48, and perfScore=0.299048]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.2433 secs, and comparison 3.91035 sec, and warnIfPerfScore > 0.57, and perfScore=0.347794]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.077 secs, and comparison 30.2985 sec, and warnIfPerfScore > 2.9, and perfScore=2.31693]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.016 secs, and comparison 31.4031 sec, and warnIfPerfScore > 2.9, and perfScore=2.24052]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 12.8503 secs, and comparison 164.331 sec, and warnIfPerfScore > 24, and perfScore=12.788]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.3924 secs, and comparison 14.9992 sec, and warnIfPerfScore > 1.7, and perfScore=1.31659]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 13.5635 secs, and comparison 12.8538 sec, and warnIfPerfScore > 1.5, and perfScore=0.947673]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.154 secs, and comparison 17.7215 sec, and warnIfPerfScore > 2.1, and perfScore=1.74528]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 13.1274 secs, and comparison 10.5723 sec, and warnIfPerfScore > 1.6, and perfScore=0.80536]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15.1003 secs, and comparison 2.12693 sec, and warnIfPerfScore > 0.23, and perfScore=0.140853]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.0636 secs, and comparison 14.7836 sec, and warnIfPerfScore > 1.3, and perfScore=1.0512]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.9345 secs, and comparison 8.53342 sec, and warnIfPerfScore > 1.2, and perfScore=0.78041]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.2619 secs, and comparison 2.71027 sec, and warnIfPerfScore > 0.33, and perfScore=0.264111]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.4388 secs, and comparison 45.8773 sec, and warnIfPerfScore > 6, and perfScore=4.39488]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.351 secs, and comparison 7.75532 sec, and warnIfPerfScore > 0.8, and perfScore=0.749232]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.6225 secs, and comparison 13.8468 sec, and warnIfPerfScore > 1.4, and perfScore=1.30354]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.3076 secs, and comparison 4.2359 sec, and warnIfPerfScore > 0.65, and perfScore=0.410951]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.8276 secs, and comparison 43.1118 sec, and warnIfPerfScore > 4.4, and perfScore=3.64503]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.4757 secs, and comparison 4.37687 sec, and warnIfPerfScore > 0.6, and perfScore=0.417813]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.7607 secs, and comparison 4.36493 sec, and warnIfPerfScore > 0.6, and perfScore=0.405636]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.7887 secs, and comparison 4.1299 sec, and warnIfPerfScore > 0.6, and perfScore=0.3828]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 10.9141 secs, and comparison 7.93593 sec, and warnIfPerfScore > 1.3, and perfScore=0.727127]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6392 secs, and comparison 12.6108 sec, and warnIfPerfScore > 1.3, and perfScore=1.08347]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 66.6876 secs, and comparison 10.7336 sec, and warnIfPerfScore > 0.3, and perfScore=0.160954]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.5171 secs, and comparison 19.1304 sec, and warnIfPerfScore > 1.5, and perfScore=1.41527]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.7493 secs, and comparison 4.75083 sec, and warnIfPerfScore > 0.55, and perfScore=0.322105]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43674 sec, and warnIfPerfScore > 0.1, and perfScore=0.0957826]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.87072 sec, and warnIfPerfScore > 0.5, and perfScore=0.258048]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.1499 secs, and comparison 17.7166 sec, and warnIfPerfScore > 2, and perfScore=1.45817]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 13.7966 secs, and comparison 35.8788 sec, and warnIfPerfScore > 3.6, and perfScore=2.60055]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 3 seconds]]]

Succeeded
