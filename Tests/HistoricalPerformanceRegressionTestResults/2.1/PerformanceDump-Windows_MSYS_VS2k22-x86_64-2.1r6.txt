Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 27 15:34:34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.48021 secs, and comparison 4.85173 sec, and warnIfPerfScore > 0.65, and perfScore=0.748699]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.13215 secs, and comparison 2.9181 sec, and warnIfPerfScore > 0.5, and perfScore=0.409146]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.4521 secs, and comparison 8.76667 sec, and warnIfPerfScore > 1.05, and perfScore=0.83875]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.1546 secs, and comparison 8.76858 sec, and warnIfPerfScore > 1.15, and perfScore=1.07529]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.9926 secs, and comparison 2.74825 sec, and warnIfPerfScore > 0.48, and perfScore=0.229162]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.8799 secs, and comparison 3.2931 sec, and warnIfPerfScore > 0.57, and perfScore=0.277199]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 10.4676 secs, and comparison 24.5263 sec, and warnIfPerfScore > 2.9, and perfScore=2.34306]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.1689 secs, and comparison 24.8181 sec, and warnIfPerfScore > 2.9, and perfScore=2.22207]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 9.0787 secs, and comparison 170.908 sec, and warnIfPerfScore > 24, and perfScore=18.8252]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.95254 secs, and comparison 11.9982 sec, and warnIfPerfScore > 1.7, and perfScore=1.3402]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.82282 secs, and comparison 8.55021 sec, and warnIfPerfScore > 1.5, and perfScore=0.969101]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.75453 secs, and comparison 14.2639 sec, and warnIfPerfScore > 2.1, and perfScore=1.62932]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.6899 secs, and comparison 5.56002 sec, and warnIfPerfScore > 1.6, and perfScore=0.52012]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 11.1185 secs, and comparison 1.05173 sec, and warnIfPerfScore > 0.23, and perfScore=0.0945928]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.7504 secs, and comparison 15.5157 sec, and warnIfPerfScore > 1.3, and perfScore=1.05189]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.1209 secs, and comparison 7.77628 sec, and warnIfPerfScore > 1.2, and perfScore=0.699252]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.3474 secs, and comparison 2.66209 sec, and warnIfPerfScore > 0.33, and perfScore=0.234598]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.6687 secs, and comparison 45.5183 sec, and warnIfPerfScore > 6, and perfScore=4.26654]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 10.7402 secs, and comparison 7.59281 sec, and warnIfPerfScore > 0.8, and perfScore=0.706955]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.7686 secs, and comparison 11.9498 sec, and warnIfPerfScore > 1.4, and perfScore=1.10969]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.4884 secs, and comparison 4.11186 sec, and warnIfPerfScore > 0.65, and perfScore=0.357915]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 11.4207 secs, and comparison 42.1081 sec, and warnIfPerfScore > 4.4, and perfScore=3.68699]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.3526 secs, and comparison 3.97704 sec, and warnIfPerfScore > 0.6, and perfScore=0.350319]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.2956 secs, and comparison 3.96788 sec, and warnIfPerfScore > 0.6, and perfScore=0.351276]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.2336 secs, and comparison 3.95509 sec, and warnIfPerfScore > 0.6, and perfScore=0.352077]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 11.3043 secs, and comparison 7.10551 sec, and warnIfPerfScore > 1.3, and perfScore=0.628567]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 12.2456 secs, and comparison 11.1465 sec, and warnIfPerfScore > 1.3, and perfScore=0.910241]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 57.6389 secs, and comparison 6.98054 sec, and warnIfPerfScore > 0.3, and perfScore=0.121108]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.61821 secs, and comparison 14.14 sec, and warnIfPerfScore > 1.5, and perfScore=1.47012]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.31155 secs, and comparison 4.19568 sec, and warnIfPerfScore > 0.55, and perfScore=0.450589]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.884368 sec, and warnIfPerfScore > 0.1, and perfScore=0.0589578]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.93084 sec, and warnIfPerfScore > 0.5, and perfScore=0.262056]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.75586 secs, and comparison 11.411 sec, and warnIfPerfScore > 2, and perfScore=1.16965]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.2668 secs, and comparison 20.0833 sec, and warnIfPerfScore > 3.6, and perfScore=1.6372]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 6 seconds]]]

Succeeded
