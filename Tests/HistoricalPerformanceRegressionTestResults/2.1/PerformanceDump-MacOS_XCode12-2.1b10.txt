Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 21 13:47:5 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.98943 secs, and comparison 6.43383 sec, and warnIfPerfScore > 0.62, and perfScore=0.71571]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.21776 secs, and comparison 4.43439 sec, and warnIfPerfScore > 0.5, and perfScore=0.48107]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 18.385 secs, and comparison 13.1032 sec, and warnIfPerfScore > 1.05, and perfScore=0.712712]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 41.5166 secs, and comparison 6.22317 sec, and warnIfPerfScore > 0.48, and perfScore=0.149896]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 39.008 secs, and comparison 6.24311 sec, and warnIfPerfScore > 0.57, and perfScore=0.160047]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 28.926 secs, and comparison 68.9122 sec, and warnIfPerfScore > 2.9, and perfScore=2.38236]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 28.9525 secs, and comparison 73.9027 sec, and warnIfPerfScore > 2.9, and perfScore=2.55255]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 23.3531 secs, and comparison 217.543 sec, and warnIfPerfScore > 9.7, and perfScore=9.31536]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 29.5296 secs, and comparison 36.7604 sec, and warnIfPerfScore > 1.6, and perfScore=1.24487]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.9182 secs, and comparison 7.85837 sec, and warnIfPerfScore > 1.5, and perfScore=0.719749]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 19.0756 secs, and comparison 42.0032 sec, and warnIfPerfScore > 2.1, and perfScore=2.20193]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 13.6501 secs, and comparison 7.60921 sec, and warnIfPerfScore > 1.3, and perfScore=0.557447]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15.9344 secs, and comparison 2.28037 sec, and warnIfPerfScore > 0.23, and perfScore=0.14311]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 23.9347 secs, and comparison 24.1644 sec, and warnIfPerfScore > 1.3, and perfScore=1.0096]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.192 secs, and comparison 15.0941 sec, and warnIfPerfScore > 1.2, and perfScore=1.06357]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15.4985 secs, and comparison 2.54375 sec, and warnIfPerfScore > 0.33, and perfScore=0.164129]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 13.8332 secs, and comparison 60.8763 sec, and warnIfPerfScore > 6, and perfScore=4.40073]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.208 secs, and comparison 5.3676 sec, and warnIfPerfScore > 0.5, and perfScore=0.33117]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.9718 secs, and comparison 54.8392 sec, and warnIfPerfScore > 4.4, and perfScore=3.23119]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 16.5056 secs, and comparison 5.5484 sec, and warnIfPerfScore > 0.6, and perfScore=0.336152]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 42.4924 secs, and comparison 57.6186 sec, and warnIfPerfScore > 1.5, and perfScore=1.35598]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 8.58784 secs, and comparison 6.57177 sec, and warnIfPerfScore > 0.55, and perfScore=0.765241]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 15 secs, and comparison 7.95997 sec, and warnIfPerfScore > 0.25, and perfScore=0.530665]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.04311 sec, and warnIfPerfScore > 0.5, and perfScore=0.269541]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 5 seconds]]]

Succeeded
