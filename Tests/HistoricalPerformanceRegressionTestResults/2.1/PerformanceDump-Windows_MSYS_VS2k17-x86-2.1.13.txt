Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 20 18:34:27 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 52.088 secs, and comparison 6.24242 sec, and warnIfPerfScore > 0.65, and perfScore=0.119844]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 53.2299 secs, and comparison 6.59987 sec, and warnIfPerfScore > 0.5, and perfScore=0.123988]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 19.2513 secs, and comparison 13.3966 sec, and warnIfPerfScore > 1.05, and perfScore=0.695879]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.6391 secs, and comparison 14.8882 sec, and warnIfPerfScore > 1.15, and perfScore=1.01701]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 23.7134 secs, and comparison 3.89779 sec, and warnIfPerfScore > 0.48, and perfScore=0.164371]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 24.4205 secs, and comparison 4.15516 sec, and warnIfPerfScore > 0.57, and perfScore=0.17015]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 25.2165 secs, and comparison 40.3715 sec, and warnIfPerfScore > 2.9, and perfScore=1.601]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 27.483 secs, and comparison 39.6466 sec, and warnIfPerfScore > 2.9, and perfScore=1.44259]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 22.6108 secs, and comparison 231.891 sec, and warnIfPerfScore > 24, and perfScore=10.2558]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 25.9245 secs, and comparison 18.6124 sec, and warnIfPerfScore > 1.7, and perfScore=0.717946]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 46.9324 secs, and comparison 42.2944 sec, and warnIfPerfScore > 1.5, and perfScore=0.901176]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.2467 secs, and comparison 19.2172 sec, and warnIfPerfScore > 2.1, and perfScore=0.998469]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 37.2223 secs, and comparison 15.9294 sec, and warnIfPerfScore > 1.6, and perfScore=0.427954]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 39.626 secs, and comparison 2.7386 sec, and warnIfPerfScore > 0.23, and perfScore=0.0691113]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 16.4324 secs, and comparison 25.4655 sec, and warnIfPerfScore > 1.3, and perfScore=1.54971]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.54971}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.3428 secs, and comparison 20.5697 sec, and warnIfPerfScore > 1.2, and perfScore=1.25864]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.25864}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.235 secs, and comparison 4.40699 sec, and warnIfPerfScore > 0.33, and perfScore=0.33298]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.33298}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 16.0692 secs, and comparison 55.6973 sec, and warnIfPerfScore > 6, and perfScore=3.46608]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.8849 secs, and comparison 19.9908 sec, and warnIfPerfScore > 0.8, and perfScore=1.25847]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.25847}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.9555 secs, and comparison 42.9149 sec, and warnIfPerfScore > 1.4, and perfScore=2.68966]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.68966}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.1748 secs, and comparison 5.13123 sec, and warnIfPerfScore > 0.65, and perfScore=0.317237]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 26.8762 secs, and comparison 60.9533 sec, and warnIfPerfScore > 4.4, and perfScore=2.26792]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 16.1234 secs, and comparison 6.33144 sec, and warnIfPerfScore > 0.6, and perfScore=0.392687]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15.9368 secs, and comparison 6.39385 sec, and warnIfPerfScore > 0.6, and perfScore=0.401201]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15.9262 secs, and comparison 6.65419 sec, and warnIfPerfScore > 0.6, and perfScore=0.417813]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 15.6466 secs, and comparison 14.7592 sec, and warnIfPerfScore > 1.3, and perfScore=0.943282]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 23.619 secs, and comparison 23.5252 sec, and warnIfPerfScore > 1.3, and perfScore=0.996031]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.076
	DETAILS:         	[baseline test 118.834 secs, and comparison 9.05641 sec, and warnIfPerfScore > 0.3, and perfScore=0.0762105]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 28.5045 secs, and comparison 31.6424 sec, and warnIfPerfScore > 1.5, and perfScore=1.11008]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 24.4552 secs, and comparison 7.45038 sec, and warnIfPerfScore > 0.55, and perfScore=0.304654]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.70478 sec, and warnIfPerfScore > 0.1, and perfScore=0.180319]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.180319}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.76115 sec, and warnIfPerfScore > 0.5, and perfScore=0.384076]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 26.0435 secs, and comparison 43.8883 sec, and warnIfPerfScore > 2, and perfScore=1.68519]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 24.44 secs, and comparison 43.7959 sec, and warnIfPerfScore > 3.6, and perfScore=1.79198]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 36 seconds]]]

Succeeded
