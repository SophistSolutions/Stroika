Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Dec 20 22:58:47 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21055 secs, and comparison 4.81846 sec, and warnIfPerfScore > 0.62, and perfScore=1.50082]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 3.38292 secs, and comparison 2.28063 sec, and warnIfPerfScore > 0.5, and perfScore=0.674162]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.24803 secs, and comparison 7.17466 sec, and warnIfPerfScore > 1.05, and perfScore=0.989877]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31617 secs, and comparison 7.1751 sec, and warnIfPerfScore > 1.15, and perfScore=1.13599]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.89331 secs, and comparison 1.50441 sec, and warnIfPerfScore > 0.48, and perfScore=0.255274]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 5.90542 secs, and comparison 2.01173 sec, and warnIfPerfScore > 0.57, and perfScore=0.340658]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.9239 secs, and comparison 15.6637 sec, and warnIfPerfScore > 2.9, and perfScore=2.64415]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 7.03974 secs, and comparison 16.297 sec, and warnIfPerfScore > 2.9, and perfScore=2.315]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 9.39401 secs, and comparison 56.4553 sec, and warnIfPerfScore > 9.7, and perfScore=6.00971]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.27156 secs, and comparison 8.06867 sec, and warnIfPerfScore > 1.6, and perfScore=1.88893]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.73018 secs, and comparison 3.87201 sec, and warnIfPerfScore > 1.5, and perfScore=0.818576]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.66048 secs, and comparison 9.78813 sec, and warnIfPerfScore > 2.1, and perfScore=2.674]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.17828 secs, and comparison 3.0044 sec, and warnIfPerfScore > 1.3, and perfScore=0.580192]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 5.47986 secs, and comparison 0.68383 sec, and warnIfPerfScore > 0.23, and perfScore=0.12479]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4295 secs, and comparison 12.9068 sec, and warnIfPerfScore > 1.3, and perfScore=1.0384]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.57001 secs, and comparison 5.31606 sec, and warnIfPerfScore > 1.2, and perfScore=1.16325]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.59938 secs, and comparison 1.07106 sec, and warnIfPerfScore > 0.33, and perfScore=0.23287]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 4.4072 secs, and comparison 38.4096 sec, and warnIfPerfScore > 6, and perfScore=8.71519]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.40698 secs, and comparison 5.12004 sec, and warnIfPerfScore > 0.8, and perfScore=1.1618]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.40631 secs, and comparison 7.06075 sec, and warnIfPerfScore > 0.9, and perfScore=1.60242]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 4.59956 secs, and comparison 3.18371 sec, and warnIfPerfScore > 0.5, and perfScore=0.692178]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 5.67119 secs, and comparison 29.0347 sec, and warnIfPerfScore > 4.4, and perfScore=5.11968]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 4.40533 secs, and comparison 2.81961 sec, and warnIfPerfScore > 0.6, and perfScore=0.640045]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.3981 secs, and comparison 4.18438 sec, and warnIfPerfScore > 0.2, and perfScore=0.142335]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.2266 secs, and comparison 11.9819 sec, and warnIfPerfScore > 1.5, and perfScore=1.29862]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 4.54709 secs, and comparison 2.62001 sec, and warnIfPerfScore > 0.55, and perfScore=0.576195]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.08944 sec, and warnIfPerfScore > 0.25, and perfScore=0.139296]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94611 sec, and warnIfPerfScore > 0.5, and perfScore=0.129741]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 17 seconds]]]

Succeeded
