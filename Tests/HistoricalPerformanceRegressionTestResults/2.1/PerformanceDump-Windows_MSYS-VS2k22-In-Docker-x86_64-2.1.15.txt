Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 31 :43:55 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.72825 secs, and comparison 4.17925 sec, and warnIfPerfScore > 0.65, and perfScore=0.88389]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.20168 secs, and comparison 2.4133 sec, and warnIfPerfScore > 0.5, and perfScore=0.463946]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.74112 secs, and comparison 6.89285 sec, and warnIfPerfScore > 1.05, and perfScore=0.89042]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.34314 secs, and comparison 6.88808 sec, and warnIfPerfScore > 1.15, and perfScore=1.08591]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.54176 secs, and comparison 2.04498 sec, and warnIfPerfScore > 0.48, and perfScore=0.214319]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.28215 secs, and comparison 2.66246 sec, and warnIfPerfScore > 0.57, and perfScore=0.286837]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.49257 secs, and comparison 18.1235 sec, and warnIfPerfScore > 2.9, and perfScore=2.79141]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.12551 secs, and comparison 18.4028 sec, and warnIfPerfScore > 2.9, and perfScore=2.58267]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 5.82815 secs, and comparison 129.454 sec, and warnIfPerfScore > 24, and perfScore=22.2119]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.50148 secs, and comparison 9.44618 sec, and warnIfPerfScore > 1.7, and perfScore=1.71703]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.94906 secs, and comparison 5.42579 sec, and warnIfPerfScore > 1.5, and perfScore=0.912041]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.09371 secs, and comparison 11.2521 sec, and warnIfPerfScore > 2.1, and perfScore=2.20903]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.62779 secs, and comparison 3.96798 sec, and warnIfPerfScore > 1.6, and perfScore=0.598688]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 6.87461 secs, and comparison 0.678268 sec, and warnIfPerfScore > 0.23, and perfScore=0.0986627]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4434 secs, and comparison 11.8396 sec, and warnIfPerfScore > 1.3, and perfScore=1.03462]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.98946 secs, and comparison 5.22622 sec, and warnIfPerfScore > 1.2, and perfScore=0.65414]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.1718 secs, and comparison 1.73479 sec, and warnIfPerfScore > 0.33, and perfScore=0.241891]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 7.64155 secs, and comparison 36.6146 sec, and warnIfPerfScore > 6, and perfScore=4.79152]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.65795 secs, and comparison 5.07156 sec, and warnIfPerfScore > 0.8, and perfScore=0.662261]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.65578 secs, and comparison 7.2817 sec, and warnIfPerfScore > 1.4, and perfScore=0.951137]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.24662 secs, and comparison 3.29383 sec, and warnIfPerfScore > 0.65, and perfScore=0.454534]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.28525 secs, and comparison 34.1754 sec, and warnIfPerfScore > 4.4, and perfScore=4.12484]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.20193 secs, and comparison 3.1449 sec, and warnIfPerfScore > 0.6, and perfScore=0.436675]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.19168 secs, and comparison 3.19292 sec, and warnIfPerfScore > 0.6, and perfScore=0.443974]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.28438 secs, and comparison 3.1674 sec, and warnIfPerfScore > 0.6, and perfScore=0.43482]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 7.27022 secs, and comparison 4.98338 sec, and warnIfPerfScore > 1.3, and perfScore=0.685452]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.78837 secs, and comparison 8.18314 sec, and warnIfPerfScore > 1.3, and perfScore=1.05069]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 37.2521 secs, and comparison 6.31396 sec, and warnIfPerfScore > 0.3, and perfScore=0.169493]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.59035 secs, and comparison 9.05343 sec, and warnIfPerfScore > 1.5, and perfScore=1.61947]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.82844 secs, and comparison 2.74807 sec, and warnIfPerfScore > 0.55, and perfScore=0.471492]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.587664 sec, and warnIfPerfScore > 0.1, and perfScore=0.0391776]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.46675 sec, and warnIfPerfScore > 0.5, and perfScore=0.16445]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.19149 secs, and comparison 12.9001 sec, and warnIfPerfScore > 2, and perfScore=2.08353]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.21962 secs, and comparison 15.0283 sec, and warnIfPerfScore > 3.6, and perfScore=1.82835]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 57 seconds]]]

Succeeded
