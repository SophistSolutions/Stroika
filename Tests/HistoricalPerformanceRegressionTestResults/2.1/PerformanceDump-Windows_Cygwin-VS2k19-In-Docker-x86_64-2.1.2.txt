Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 22:55:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.26267 secs, and comparison 4.59512 sec, and warnIfPerfScore > 0.65, and perfScore=0.733731]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.43165 secs, and comparison 2.88259 sec, and warnIfPerfScore > 0.5, and perfScore=0.448188]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.08229 secs, and comparison 7.85324 sec, and warnIfPerfScore > 1.05, and perfScore=0.864677]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.22838 secs, and comparison 7.79299 sec, and warnIfPerfScore > 1.15, and perfScore=1.07811]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 35.3798 secs, and comparison 2.48821 sec, and warnIfPerfScore > 0.48, and perfScore=0.0703287]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 33.1565 secs, and comparison 3.02617 sec, and warnIfPerfScore > 0.57, and perfScore=0.0912693]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.53224 secs, and comparison 21.8751 sec, and warnIfPerfScore > 2.9, and perfScore=2.9042]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.3778 secs, and comparison 21.6943 sec, and warnIfPerfScore > 2.9, and perfScore=2.5895]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.83645 secs, and comparison 147.954 sec, and warnIfPerfScore > 24, and perfScore=21.6419]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.92453 secs, and comparison 11.2996 sec, and warnIfPerfScore > 1.7, and perfScore=1.63183]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.66869 secs, and comparison 6.03677 sec, and warnIfPerfScore > 1.5, and perfScore=0.90524]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.90224 secs, and comparison 13.1508 sec, and warnIfPerfScore > 2.1, and perfScore=1.90529]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.6195 secs, and comparison 5.19092 sec, and warnIfPerfScore > 1.6, and perfScore=0.681267]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 8.3102 secs, and comparison 0.809697 sec, and warnIfPerfScore > 0.23, and perfScore=0.0974341]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.823 secs, and comparison 13.2033 sec, and warnIfPerfScore > 1.3, and perfScore=1.02966]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 9.64174 secs, and comparison 6.37067 sec, and warnIfPerfScore > 1.2, and perfScore=0.660739]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.12433 secs, and comparison 2.00252 sec, and warnIfPerfScore > 0.33, and perfScore=0.219471]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.52098 secs, and comparison 41.3354 sec, and warnIfPerfScore > 6, and perfScore=4.85102]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.44467 secs, and comparison 6.08908 sec, and warnIfPerfScore > 0.8, and perfScore=0.721056]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.23118 secs, and comparison 9.26002 sec, and warnIfPerfScore > 1.4, and perfScore=1.00312]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.87626 secs, and comparison 3.67157 sec, and warnIfPerfScore > 0.65, and perfScore=0.41364]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.92312 secs, and comparison 38.2555 sec, and warnIfPerfScore > 4.4, and perfScore=3.85519]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.59784 secs, and comparison 3.49476 sec, and warnIfPerfScore > 0.6, and perfScore=0.40647]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.8369 secs, and comparison 3.64092 sec, and warnIfPerfScore > 0.6, and perfScore=0.412014]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.08567 secs, and comparison 3.59267 sec, and warnIfPerfScore > 0.6, and perfScore=0.395422]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.63243 secs, and comparison 5.52058 sec, and warnIfPerfScore > 1.3, and perfScore=0.639517]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.91299 secs, and comparison 9.42815 sec, and warnIfPerfScore > 1.3, and perfScore=0.95109]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 43.1015 secs, and comparison 5.51552 sec, and warnIfPerfScore > 0.3, and perfScore=0.127966]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.97301 secs, and comparison 11.3105 sec, and warnIfPerfScore > 1.5, and perfScore=1.62203]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.53738 secs, and comparison 3.29151 sec, and warnIfPerfScore > 0.55, and perfScore=0.436692]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.044
	DETAILS:         	[baseline test 15 secs, and comparison 0.655552 sec, and warnIfPerfScore > 0.1, and perfScore=0.0437034]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.05536 sec, and warnIfPerfScore > 0.5, and perfScore=0.203691]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.4438 secs, and comparison 13.9775 sec, and warnIfPerfScore > 2, and perfScore=1.65535]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.28236 secs, and comparison 15.8945 sec, and warnIfPerfScore > 3.6, and perfScore=1.91908]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 28 seconds]]]

Succeeded
