Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 1:24:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.92921 secs, and comparison 4.7781 sec, and warnIfPerfScore > 0.65, and perfScore=0.689559]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.4099 secs, and comparison 2.80946 sec, and warnIfPerfScore > 0.5, and perfScore=0.438299]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.9691 secs, and comparison 8.54322 sec, and warnIfPerfScore > 1.05, and perfScore=0.85697]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.81793 secs, and comparison 8.641 sec, and warnIfPerfScore > 1.15, and perfScore=1.10528]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 37.0759 secs, and comparison 2.69845 sec, and warnIfPerfScore > 0.48, and perfScore=0.0727819]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 35.7385 secs, and comparison 3.37148 sec, and warnIfPerfScore > 0.57, and perfScore=0.0943377]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.60436 secs, and comparison 23.8971 sec, and warnIfPerfScore > 2.9, and perfScore=2.48815]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 10.5243 secs, and comparison 23.5114 sec, and warnIfPerfScore > 2.9, and perfScore=2.23402]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.55052 secs, and comparison 161.883 sec, and warnIfPerfScore > 24, and perfScore=18.9326]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.24956 secs, and comparison 12.2047 sec, and warnIfPerfScore > 1.7, and perfScore=1.47944]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.20629 secs, and comparison 7.75733 sec, and warnIfPerfScore > 1.5, and perfScore=0.945292]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.45624 secs, and comparison 14.4585 sec, and warnIfPerfScore > 2.1, and perfScore=1.93911]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.65863 secs, and comparison 5.98599 sec, and warnIfPerfScore > 1.6, and perfScore=0.619756]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 9.98452 secs, and comparison 0.974338 sec, and warnIfPerfScore > 0.23, and perfScore=0.0975848]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3551 secs, and comparison 14.004 sec, and warnIfPerfScore > 1.3, and perfScore=1.04859]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.1356 secs, and comparison 7.12183 sec, and warnIfPerfScore > 1.2, and perfScore=0.702654]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.8009 secs, and comparison 2.55136 sec, and warnIfPerfScore > 0.33, and perfScore=0.236217]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.69895 secs, and comparison 43.9874 sec, and warnIfPerfScore > 6, and perfScore=4.53527]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.7011 secs, and comparison 7.16175 sec, and warnIfPerfScore > 0.8, and perfScore=0.738241]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.72739 secs, and comparison 10.6909 sec, and warnIfPerfScore > 1.4, and perfScore=1.09905]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.8265 secs, and comparison 3.96255 sec, and warnIfPerfScore > 0.65, and perfScore=0.366006]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.1226 secs, and comparison 41.2305 sec, and warnIfPerfScore > 4.4, and perfScore=4.07313]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.7166 secs, and comparison 3.82822 sec, and warnIfPerfScore > 0.6, and perfScore=0.357225]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.6982 secs, and comparison 3.88136 sec, and warnIfPerfScore > 0.6, and perfScore=0.362806]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.6701 secs, and comparison 3.77627 sec, and warnIfPerfScore > 0.6, and perfScore=0.353913]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.6363 secs, and comparison 6.66314 sec, and warnIfPerfScore > 1.3, and perfScore=0.626451]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.542 secs, and comparison 9.88901 sec, and warnIfPerfScore > 1.3, and perfScore=0.856783]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 50.6648 secs, and comparison 6.16464 sec, and warnIfPerfScore > 0.3, and perfScore=0.121675]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.59083 secs, and comparison 12.892 sec, and warnIfPerfScore > 1.5, and perfScore=1.50067]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.30096 secs, and comparison 3.54802 sec, and warnIfPerfScore > 0.55, and perfScore=0.427422]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.779846 sec, and warnIfPerfScore > 0.1, and perfScore=0.0519897]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.15582 sec, and warnIfPerfScore > 0.5, and perfScore=0.210388]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.38285 secs, and comparison 14.967 sec, and warnIfPerfScore > 2, and perfScore=1.59515]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.6456 secs, and comparison 17.9696 sec, and warnIfPerfScore > 3.6, and perfScore=1.68799]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 2 seconds]]]

Succeeded
