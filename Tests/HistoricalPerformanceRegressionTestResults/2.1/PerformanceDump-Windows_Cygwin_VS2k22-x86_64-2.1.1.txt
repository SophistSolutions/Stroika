Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jun 26 10:23:3 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 6.96428 secs, and comparison 4.39865 sec, and warnIfPerfScore > 0.65, and perfScore=0.631601]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.67825 secs, and comparison 2.57408 sec, and warnIfPerfScore > 0.5, and perfScore=0.453323]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.28853 secs, and comparison 7.24743 sec, and warnIfPerfScore > 1.05, and perfScore=0.874393]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.65529 secs, and comparison 7.22169 sec, and warnIfPerfScore > 1.15, and perfScore=1.08511]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 7.00745 secs, and comparison 2.27115 sec, and warnIfPerfScore > 0.48, and perfScore=0.324105]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.33491 secs, and comparison 2.84222 sec, and warnIfPerfScore > 0.57, and perfScore=0.387493]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.91984 secs, and comparison 19.2309 sec, and warnIfPerfScore > 2.9, and perfScore=2.7791]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.16541 secs, and comparison 19.5326 sec, and warnIfPerfScore > 2.9, and perfScore=2.72596]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 6.34557 secs, and comparison 151.248 sec, and warnIfPerfScore > 24, and perfScore=23.8352]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.88119 secs, and comparison 9.8307 sec, and warnIfPerfScore > 1.7, and perfScore=1.67155]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.77886 secs, and comparison 5.58652 sec, and warnIfPerfScore > 1.5, and perfScore=0.966716]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.57769 secs, and comparison 11.9217 sec, and warnIfPerfScore > 2.1, and perfScore=2.13738]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.92048 secs, and comparison 4.15849 sec, and warnIfPerfScore > 1.6, and perfScore=0.600896]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 7.31637 secs, and comparison 0.749481 sec, and warnIfPerfScore > 0.23, and perfScore=0.102439]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1264 secs, and comparison 12.7186 sec, and warnIfPerfScore > 1.3, and perfScore=1.04884]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.8016 secs, and comparison 5.67273 sec, and warnIfPerfScore > 1.2, and perfScore=0.644511]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.15381 secs, and comparison 1.90178 sec, and warnIfPerfScore > 0.33, and perfScore=0.233238]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.42596 secs, and comparison 39.7061 sec, and warnIfPerfScore > 6, and perfScore=4.71235]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.6286 secs, and comparison 5.45615 sec, and warnIfPerfScore > 0.8, and perfScore=0.469199]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 11.5751 secs, and comparison 8.19879 sec, and warnIfPerfScore > 1.4, and perfScore=0.708316]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.34083 secs, and comparison 3.55354 sec, and warnIfPerfScore > 0.65, and perfScore=0.426042]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.9747 secs, and comparison 36.6542 sec, and warnIfPerfScore > 4.4, and perfScore=3.06096]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.38075 secs, and comparison 3.42492 sec, and warnIfPerfScore > 0.6, and perfScore=0.408665]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.25798 secs, and comparison 3.42749 sec, and warnIfPerfScore > 0.6, and perfScore=0.415052]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.39922 secs, and comparison 3.41442 sec, and warnIfPerfScore > 0.6, and perfScore=0.406516]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 8.15389 secs, and comparison 5.44856 sec, and warnIfPerfScore > 1.3, and perfScore=0.668217]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.70426 secs, and comparison 9.43752 sec, and warnIfPerfScore > 1.3, and perfScore=1.08424]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 41.4917 secs, and comparison 5.34561 sec, and warnIfPerfScore > 0.3, and perfScore=0.128836]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.57114 secs, and comparison 10.0115 sec, and warnIfPerfScore > 1.5, and perfScore=1.52355]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.67806 secs, and comparison 2.83524 sec, and warnIfPerfScore > 0.55, and perfScore=0.424561]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.042
	DETAILS:         	[baseline test 15 secs, and comparison 0.635999 sec, and warnIfPerfScore > 0.1, and perfScore=0.0423999]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.95745 sec, and warnIfPerfScore > 0.5, and perfScore=0.197163]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.1436 secs, and comparison 13.4864 sec, and warnIfPerfScore > 2, and perfScore=1.88789]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.40076 secs, and comparison 15.3652 sec, and warnIfPerfScore > 3.6, and perfScore=1.82902]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 11 seconds]]]

Succeeded
