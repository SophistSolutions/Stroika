Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  8 10:43:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.83901 secs, and comparison 4.88183 sec, and warnIfPerfScore > 0.65, and perfScore=0.622761]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.9801 secs, and comparison 3.01927 sec, and warnIfPerfScore > 0.5, and perfScore=0.37835]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 9.67306 secs, and comparison 8.23123 sec, and warnIfPerfScore > 1.05, and perfScore=0.850943]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.68242 secs, and comparison 8.44626 sec, and warnIfPerfScore > 1.15, and perfScore=1.09943]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.9879 secs, and comparison 2.76593 sec, and warnIfPerfScore > 0.48, and perfScore=0.307739]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.90281 secs, and comparison 3.27904 sec, and warnIfPerfScore > 0.57, and perfScore=0.368315]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.3825 secs, and comparison 23.2424 sec, and warnIfPerfScore > 2.9, and perfScore=2.47721]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.90342 secs, and comparison 23.8776 sec, and warnIfPerfScore > 2.9, and perfScore=2.41104]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.59018 secs, and comparison 162.136 sec, and warnIfPerfScore > 24, and perfScore=16.9065]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.11712 secs, and comparison 12.1079 sec, and warnIfPerfScore > 1.7, and perfScore=1.49165]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.77395 secs, and comparison 9.18527 sec, and warnIfPerfScore > 1.5, and perfScore=1.04688]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.37268 secs, and comparison 13.8611 sec, and warnIfPerfScore > 2.1, and perfScore=1.65551]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.65734 secs, and comparison 8.68203 sec, and warnIfPerfScore > 1.6, and perfScore=0.899009]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.3343 secs, and comparison 1.46111 sec, and warnIfPerfScore > 0.23, and perfScore=0.141383]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.2632 secs, and comparison 14.985 sec, and warnIfPerfScore > 1.3, and perfScore=1.05061]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 11.1781 secs, and comparison 5.97695 sec, and warnIfPerfScore > 1.2, and perfScore=0.534703]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.96152 secs, and comparison 1.72246 sec, and warnIfPerfScore > 0.33, and perfScore=0.247426]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.6558 secs, and comparison 44.077 sec, and warnIfPerfScore > 6, and perfScore=4.13644]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.8414 secs, and comparison 5.83896 sec, and warnIfPerfScore > 0.8, and perfScore=0.538582]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 11.3043 secs, and comparison 10.1557 sec, and warnIfPerfScore > 1.4, and perfScore=0.898386]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.84151 secs, and comparison 3.62249 sec, and warnIfPerfScore > 0.65, and perfScore=0.529487]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 10.2331 secs, and comparison 49.0452 sec, and warnIfPerfScore > 4.4, and perfScore=4.7928]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.4 and got 4.7928}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 8.83554 secs, and comparison 4.61397 sec, and warnIfPerfScore > 0.6, and perfScore=0.522205]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 8.62048 secs, and comparison 4.5895 sec, and warnIfPerfScore > 0.6, and perfScore=0.532396]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.19777 secs, and comparison 3.71585 sec, and warnIfPerfScore > 0.6, and perfScore=0.516251]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.81214 secs, and comparison 4.98123 sec, and warnIfPerfScore > 1.3, and perfScore=0.731227]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.04138 secs, and comparison 8.8461 sec, and warnIfPerfScore > 1.3, and perfScore=1.2563]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 47.1101 secs, and comparison 7.70171 sec, and warnIfPerfScore > 0.3, and perfScore=0.163483]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.44161 secs, and comparison 13.0224 sec, and warnIfPerfScore > 1.5, and perfScore=1.37925]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.58233 secs, and comparison 3.38426 sec, and warnIfPerfScore > 0.55, and perfScore=0.446335]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 15 secs, and comparison 0.957265 sec, and warnIfPerfScore > 0.1, and perfScore=0.0638177]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.0796 sec, and warnIfPerfScore > 0.5, and perfScore=0.205306]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.34281 secs, and comparison 9.16566 sec, and warnIfPerfScore > 2, and perfScore=1.09863]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.5651 secs, and comparison 40.786 sec, and warnIfPerfScore > 3.6, and perfScore=3.86044]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.6 and got 3.86044}}}

[[[Tests took: 14 minutes, 24 seconds]]]

Succeeded
