Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 3:54: 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.60462 secs, and comparison 4.11808 sec, and warnIfPerfScore > 0.65, and perfScore=0.623515]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.62239 secs, and comparison 2.59628 sec, and warnIfPerfScore > 0.5, and perfScore=0.392046]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.23424 secs, and comparison 7.05982 sec, and warnIfPerfScore > 1.05, and perfScore=0.857373]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.48609 secs, and comparison 7.17146 sec, and warnIfPerfScore > 1.15, and perfScore=1.10567]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.85136 secs, and comparison 2.36511 sec, and warnIfPerfScore > 0.48, and perfScore=0.301235]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.65343 secs, and comparison 2.81308 sec, and warnIfPerfScore > 0.57, and perfScore=0.367558]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.30812 secs, and comparison 19.2772 sec, and warnIfPerfScore > 2.9, and perfScore=2.32029]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.47573 secs, and comparison 19.8797 sec, and warnIfPerfScore > 2.9, and perfScore=2.34549]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 7.9043 secs, and comparison 135.36 sec, and warnIfPerfScore > 24, and perfScore=17.1248]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.25844 secs, and comparison 10.052 sec, and warnIfPerfScore > 1.7, and perfScore=1.38487]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.72245 secs, and comparison 7.69979 sec, and warnIfPerfScore > 1.5, and perfScore=0.997065]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.02706 secs, and comparison 11.8616 sec, and warnIfPerfScore > 2.1, and perfScore=1.68799]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.29358 secs, and comparison 7.39759 sec, and warnIfPerfScore > 1.6, and perfScore=0.891966]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 8.71542 secs, and comparison 1.2992 sec, and warnIfPerfScore > 0.23, and perfScore=0.14907]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2881 secs, and comparison 12.7313 sec, and warnIfPerfScore > 1.3, and perfScore=1.03607]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.96855 secs, and comparison 5.18931 sec, and warnIfPerfScore > 1.2, and perfScore=0.520569]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.88976 secs, and comparison 1.46906 sec, and warnIfPerfScore > 0.33, and perfScore=0.249426]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.55281 secs, and comparison 37.6465 sec, and warnIfPerfScore > 6, and perfScore=3.94089]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.54233 secs, and comparison 4.99048 sec, and warnIfPerfScore > 0.8, and perfScore=0.522984]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.52005 secs, and comparison 9.0426 sec, and warnIfPerfScore > 1.4, and perfScore=0.949848]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.91015 secs, and comparison 3.26593 sec, and warnIfPerfScore > 0.65, and perfScore=0.552596]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.60158 secs, and comparison 35.067 sec, and warnIfPerfScore > 4.4, and perfScore=3.65221]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.06107 secs, and comparison 3.25876 sec, and warnIfPerfScore > 0.6, and perfScore=0.537653]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.14906 secs, and comparison 3.27821 sec, and warnIfPerfScore > 0.6, and perfScore=0.533124]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.09598 secs, and comparison 3.24456 sec, and warnIfPerfScore > 0.6, and perfScore=0.532246]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.10365 secs, and comparison 4.50768 sec, and warnIfPerfScore > 1.3, and perfScore=0.738521]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.57509 secs, and comparison 8.3608 sec, and warnIfPerfScore > 1.3, and perfScore=1.27159]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.5695 secs, and comparison 5.68575 sec, and warnIfPerfScore > 0.3, and perfScore=0.127571]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.06519 secs, and comparison 11.3812 sec, and warnIfPerfScore > 1.5, and perfScore=1.41115]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.88153 secs, and comparison 2.92068 sec, and warnIfPerfScore > 0.55, and perfScore=0.424424]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.858569 sec, and warnIfPerfScore > 0.1, and perfScore=0.057238]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.8662 sec, and warnIfPerfScore > 0.5, and perfScore=0.19108]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.2994 secs, and comparison 8.56398 sec, and warnIfPerfScore > 2, and perfScore=1.03188]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.27807 secs, and comparison 28.8878 sec, and warnIfPerfScore > 3.6, and perfScore=3.11355]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 1 second]]]

Succeeded
