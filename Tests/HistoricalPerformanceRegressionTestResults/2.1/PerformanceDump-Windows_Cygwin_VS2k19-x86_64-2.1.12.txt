Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec 11 17:15:10 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 43.2522 secs, and comparison 14.993 sec, and warnIfPerfScore > 0.65, and perfScore=0.346642]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 43.6983 secs, and comparison 14.408 sec, and warnIfPerfScore > 0.5, and perfScore=0.329716]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 26.6244 secs, and comparison 20.5337 sec, and warnIfPerfScore > 1.05, and perfScore=0.771236]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 22.4178 secs, and comparison 20.6898 sec, and warnIfPerfScore > 1.15, and perfScore=0.922918]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 30.6939 secs, and comparison 3.11008 sec, and warnIfPerfScore > 0.48, and perfScore=0.101326]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 29.6353 secs, and comparison 3.83021 sec, and warnIfPerfScore > 0.57, and perfScore=0.129245]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 19.3646 secs, and comparison 34.7446 sec, and warnIfPerfScore > 2.9, and perfScore=1.79423]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.1356 secs, and comparison 34.3944 sec, and warnIfPerfScore > 2.9, and perfScore=1.70814]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 15.0518 secs, and comparison 244.431 sec, and warnIfPerfScore > 24, and perfScore=16.2393]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 18.1887 secs, and comparison 14.5541 sec, and warnIfPerfScore > 1.7, and perfScore=0.800171]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 47.4161 secs, and comparison 46.4073 sec, and warnIfPerfScore > 1.5, and perfScore=0.978723]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.7728 secs, and comparison 17.2213 sec, and warnIfPerfScore > 2.1, and perfScore=1.02674]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 39.7855 secs, and comparison 9.70085 sec, and warnIfPerfScore > 1.6, and perfScore=0.243829]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 42.1238 secs, and comparison 1.89259 sec, and warnIfPerfScore > 0.23, and perfScore=0.0449292]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.6345 secs, and comparison 21.9638 sec, and warnIfPerfScore > 1.3, and perfScore=1.7384]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.5509 secs, and comparison 20.3933 sec, and warnIfPerfScore > 1.2, and perfScore=1.50494]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 19.996 secs, and comparison 5.50616 sec, and warnIfPerfScore > 0.33, and perfScore=0.275362]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 12.7702 secs, and comparison 54.5459 sec, and warnIfPerfScore > 6, and perfScore=4.27134]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.7351 secs, and comparison 19.8802 sec, and warnIfPerfScore > 0.8, and perfScore=1.56106]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 13.4108 secs, and comparison 43.3312 sec, and warnIfPerfScore > 1.4, and perfScore=3.23106]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 20.5041 secs, and comparison 4.99508 sec, and warnIfPerfScore > 0.65, and perfScore=0.243613]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 22.5016 secs, and comparison 57.9296 sec, and warnIfPerfScore > 4.4, and perfScore=2.57446]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 20.2999 secs, and comparison 5.77347 sec, and warnIfPerfScore > 0.6, and perfScore=0.284409]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.7322 secs, and comparison 5.66134 sec, and warnIfPerfScore > 0.6, and perfScore=0.286909]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 19.9604 secs, and comparison 5.56511 sec, and warnIfPerfScore > 0.6, and perfScore=0.278807]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 19.6644 secs, and comparison 13.2058 sec, and warnIfPerfScore > 1.3, and perfScore=0.671561]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 26.8339 secs, and comparison 19.8702 sec, and warnIfPerfScore > 1.3, and perfScore=0.74049]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 98.4064 secs, and comparison 12.8316 sec, and warnIfPerfScore > 0.3, and perfScore=0.130394]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.2152 secs, and comparison 22.4807 sec, and warnIfPerfScore > 1.5, and perfScore=1.23417]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.7311 secs, and comparison 4.98927 sec, and warnIfPerfScore > 0.55, and perfScore=0.33869]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.6439 sec, and warnIfPerfScore > 0.1, and perfScore=0.109593]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.07808 sec, and warnIfPerfScore > 0.5, and perfScore=0.271872]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.1396 secs, and comparison 19.5055 sec, and warnIfPerfScore > 2, and perfScore=1.01912]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.546 secs, and comparison 27.8665 sec, and warnIfPerfScore > 3.6, and perfScore=1.23598]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes, 58 seconds]]]

Succeeded
