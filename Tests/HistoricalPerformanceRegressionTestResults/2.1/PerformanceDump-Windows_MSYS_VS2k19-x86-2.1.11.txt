Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 9:47:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 50.5868 secs, and comparison 16.2225 sec, and warnIfPerfScore > 0.65, and perfScore=0.320686]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 51.7723 secs, and comparison 15.5285 sec, and warnIfPerfScore > 0.5, and perfScore=0.299938]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 29.6073 secs, and comparison 23.4915 sec, and warnIfPerfScore > 1.05, and perfScore=0.793438]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 24.4343 secs, and comparison 23.5953 sec, and warnIfPerfScore > 1.15, and perfScore=0.965663]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 20.8034 secs, and comparison 3.60043 sec, and warnIfPerfScore > 0.48, and perfScore=0.17307]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 21.1431 secs, and comparison 4.17266 sec, and warnIfPerfScore > 0.57, and perfScore=0.197354]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.5731 secs, and comparison 39.49 sec, and warnIfPerfScore > 2.9, and perfScore=1.67522]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.8396 secs, and comparison 42.4739 sec, and warnIfPerfScore > 2.9, and perfScore=1.70993]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 21.1242 secs, and comparison 220.173 sec, and warnIfPerfScore > 24, and perfScore=10.4228]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 21.4601 secs, and comparison 17.0204 sec, and warnIfPerfScore > 1.7, and perfScore=0.793119]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 52.2777 secs, and comparison 52.7542 sec, and warnIfPerfScore > 1.5, and perfScore=1.00911]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 20.2462 secs, and comparison 19.7233 sec, and warnIfPerfScore > 2.1, and perfScore=0.974169]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 45.179 secs, and comparison 13.2064 sec, and warnIfPerfScore > 1.6, and perfScore=0.292312]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 47.0197 secs, and comparison 3.74709 sec, and warnIfPerfScore > 0.23, and perfScore=0.079692]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.5674 secs, and comparison 25.3524 sec, and warnIfPerfScore > 1.3, and perfScore=1.36542]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.36542}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.662 secs, and comparison 20.8784 sec, and warnIfPerfScore > 1.2, and perfScore=1.25306]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.25306}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.2371 secs, and comparison 4.56996 sec, and warnIfPerfScore > 0.33, and perfScore=0.345239]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.345239}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 15.9962 secs, and comparison 53.438 sec, and warnIfPerfScore > 6, and perfScore=3.34066]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.5932 secs, and comparison 20.0355 sec, and warnIfPerfScore > 0.8, and perfScore=1.28488]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.28488}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 15.9208 secs, and comparison 33.8534 sec, and warnIfPerfScore > 1.4, and perfScore=2.12636]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.12636}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 14.0239 secs, and comparison 5.12617 sec, and warnIfPerfScore > 0.65, and perfScore=0.365532]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 25.8766 secs, and comparison 61.488 sec, and warnIfPerfScore > 4.4, and perfScore=2.3762]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 14.2017 secs, and comparison 6.07322 sec, and warnIfPerfScore > 0.6, and perfScore=0.427639]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.2044 secs, and comparison 5.83916 sec, and warnIfPerfScore > 0.6, and perfScore=0.411082]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 14.4534 secs, and comparison 6.08516 sec, and warnIfPerfScore > 0.6, and perfScore=0.42102]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.564 secs, and comparison 14.0925 sec, and warnIfPerfScore > 1.3, and perfScore=0.96762]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 22.0184 secs, and comparison 22.0102 sec, and warnIfPerfScore > 1.3, and perfScore=0.999629]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 108.16 secs, and comparison 14.5447 sec, and warnIfPerfScore > 0.3, and perfScore=0.134474]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 27.5152 secs, and comparison 31.3294 sec, and warnIfPerfScore > 1.5, and perfScore=1.13862]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 19.4226 secs, and comparison 5.99114 sec, and warnIfPerfScore > 0.55, and perfScore=0.308462]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.95564 sec, and warnIfPerfScore > 0.1, and perfScore=0.130376]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.130376}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.74599 sec, and warnIfPerfScore > 0.5, and perfScore=0.316399]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.51 secs, and comparison 21.8182 sec, and warnIfPerfScore > 2, and perfScore=1.06378]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 23.6608 secs, and comparison 44.7721 sec, and warnIfPerfScore > 3.6, and perfScore=1.89225]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 30 seconds]]]

Succeeded
