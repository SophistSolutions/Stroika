Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 10:21:12 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 6.44351 secs, and comparison 4.21948 sec, and warnIfPerfScore > 0.65, and perfScore=0.654842]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.654842}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.46528 secs, and comparison 2.72267 sec, and warnIfPerfScore > 0.5, and perfScore=0.421121]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.81297 secs, and comparison 7.49775 sec, and warnIfPerfScore > 1.05, and perfScore=0.850763]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.84579 secs, and comparison 7.54404 sec, and warnIfPerfScore > 1.15, and perfScore=1.102]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 8.52233 secs, and comparison 2.17314 sec, and warnIfPerfScore > 0.48, and perfScore=0.254993]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.14665 secs, and comparison 2.55725 sec, and warnIfPerfScore > 0.57, and perfScore=0.313902]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.84052 secs, and comparison 20.4641 sec, and warnIfPerfScore > 2.9, and perfScore=2.3148]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.21247 secs, and comparison 21.229 sec, and warnIfPerfScore > 2.9, and perfScore=2.30437]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 8.15747 secs, and comparison 161.71 sec, and warnIfPerfScore > 24, and perfScore=19.8236]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.65134 secs, and comparison 10.6722 sec, and warnIfPerfScore > 1.7, and perfScore=1.39481]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.64647 secs, and comparison 8.52068 sec, and warnIfPerfScore > 1.5, and perfScore=0.985451]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.22127 secs, and comparison 12.1284 sec, and warnIfPerfScore > 2.1, and perfScore=1.67953]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 10.5242 secs, and comparison 7.81994 sec, and warnIfPerfScore > 1.6, and perfScore=0.743044]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 13.3734 secs, and comparison 1.7999 sec, and warnIfPerfScore > 0.23, and perfScore=0.134588]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 15.6102 secs, and comparison 14.4437 sec, and warnIfPerfScore > 1.3, and perfScore=0.925274]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.1373 secs, and comparison 7.64016 sec, and warnIfPerfScore > 1.2, and perfScore=0.629478]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 6.89337 secs, and comparison 1.77285 sec, and warnIfPerfScore > 0.33, and perfScore=0.257182]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.7909 secs, and comparison 42.7023 sec, and warnIfPerfScore > 6, and perfScore=3.95725]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.6015 secs, and comparison 6.78847 sec, and warnIfPerfScore > 0.8, and perfScore=0.640332]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.3285 secs, and comparison 9.90609 sec, and warnIfPerfScore > 1.4, and perfScore=0.959104]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.70972 secs, and comparison 3.35211 sec, and warnIfPerfScore > 0.65, and perfScore=0.499591]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.7848 secs, and comparison 39.8646 sec, and warnIfPerfScore > 4.4, and perfScore=3.69635]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.86086 secs, and comparison 4.0767 sec, and warnIfPerfScore > 0.6, and perfScore=0.518608]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.46743 secs, and comparison 3.76778 sec, and warnIfPerfScore > 0.6, and perfScore=0.504562]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 7.12133 secs, and comparison 3.90001 sec, and warnIfPerfScore > 0.6, and perfScore=0.547652]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.26364 secs, and comparison 7.74068 sec, and warnIfPerfScore > 1.3, and perfScore=1.06567]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.45425 secs, and comparison 9.79081 sec, and warnIfPerfScore > 1.3, and perfScore=1.15809]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.4674 secs, and comparison 6.0044 sec, and warnIfPerfScore > 0.3, and perfScore=0.126495]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.73632 secs, and comparison 12.8398 sec, and warnIfPerfScore > 1.5, and perfScore=1.4697]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.65865 secs, and comparison 3.16336 sec, and warnIfPerfScore > 0.55, and perfScore=0.413044]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.833505 sec, and warnIfPerfScore > 0.1, and perfScore=0.055567]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74217 sec, and warnIfPerfScore > 0.5, and perfScore=0.182812]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.21457 secs, and comparison 15.3012 sec, and warnIfPerfScore > 2, and perfScore=1.66055]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.5051 secs, and comparison 29.6589 sec, and warnIfPerfScore > 3.6, and perfScore=2.57789]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 55 seconds]]]

Succeeded
