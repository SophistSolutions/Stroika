Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 31 17:42:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.69797 secs, and comparison 5.25295 sec, and warnIfPerfScore > 0.65, and perfScore=0.603928]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.27518 secs, and comparison 2.93408 sec, and warnIfPerfScore > 0.5, and perfScore=0.316337]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.7168 secs, and comparison 10.1685 sec, and warnIfPerfScore > 1.05, and perfScore=0.799608]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.79928 secs, and comparison 10.0826 sec, and warnIfPerfScore > 1.15, and perfScore=1.14584]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.5418 secs, and comparison 3.2769 sec, and warnIfPerfScore > 0.48, and perfScore=0.283916]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.5205 secs, and comparison 3.79891 sec, and warnIfPerfScore > 0.57, and perfScore=0.361095]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 13.7556 secs, and comparison 27.4647 sec, and warnIfPerfScore > 2.9, and perfScore=1.99662]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.0488 secs, and comparison 28.9061 sec, and warnIfPerfScore > 2.9, and perfScore=2.21523]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 9.9805 secs, and comparison 157.172 sec, and warnIfPerfScore > 24, and perfScore=15.7479]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9951 secs, and comparison 13.7461 sec, and warnIfPerfScore > 1.7, and perfScore=1.14597]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.5544 secs, and comparison 24.0227 sec, and warnIfPerfScore > 1.5, and perfScore=1.77232]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.1238 secs, and comparison 16.8843 sec, and warnIfPerfScore > 2.1, and perfScore=1.39265]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.7575 secs, and comparison 6.97016 sec, and warnIfPerfScore > 1.6, and perfScore=0.647937]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.4463 secs, and comparison 1.38939 sec, and warnIfPerfScore > 0.23, and perfScore=0.121383]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1584 secs, and comparison 13.7571 sec, and warnIfPerfScore > 1.3, and perfScore=1.13149]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.661 secs, and comparison 9.53942 sec, and warnIfPerfScore > 1.2, and perfScore=0.894794]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 14.7395 secs, and comparison 3.15246 sec, and warnIfPerfScore > 0.33, and perfScore=0.213878]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.9419 secs, and comparison 46.3007 sec, and warnIfPerfScore > 6, and perfScore=4.23151]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 9.34938 secs, and comparison 7.37125 sec, and warnIfPerfScore > 0.8, and perfScore=0.788422]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.2208 secs, and comparison 19.8756 sec, and warnIfPerfScore > 1.4, and perfScore=1.62637]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.8101 secs, and comparison 4.19791 sec, and warnIfPerfScore > 0.65, and perfScore=0.303975]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.5115 secs, and comparison 41.7232 sec, and warnIfPerfScore > 4.4, and perfScore=3.9693]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.8739 secs, and comparison 4.31297 sec, and warnIfPerfScore > 0.6, and perfScore=0.28997]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.4175 secs, and comparison 4.12661 sec, and warnIfPerfScore > 0.6, and perfScore=0.286221]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.7888 secs, and comparison 4.37114 sec, and warnIfPerfScore > 0.6, and perfScore=0.317007]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 13.3756 secs, and comparison 8.03275 sec, and warnIfPerfScore > 1.3, and perfScore=0.600554]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 14.1459 secs, and comparison 12.1617 sec, and warnIfPerfScore > 1.3, and perfScore=0.859738]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 61.7094 secs, and comparison 7.56327 sec, and warnIfPerfScore > 0.3, and perfScore=0.122563]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.7192 secs, and comparison 18.7015 sec, and warnIfPerfScore > 1.5, and perfScore=1.74467]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 19.5474 secs, and comparison 8.16627 sec, and warnIfPerfScore > 0.55, and perfScore=0.417768]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.69862 sec, and warnIfPerfScore > 0.1, and perfScore=0.179908]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.10601 sec, and warnIfPerfScore > 0.5, and perfScore=0.3404]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 20.127 secs, and comparison 19.8018 sec, and warnIfPerfScore > 2, and perfScore=0.983843]
	                 	codecvt_utf8 is FASTER

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.0936 secs, and comparison 19.3776 sec, and warnIfPerfScore > 3.6, and perfScore=1.74674]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 16 seconds]]]

Succeeded
