Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec  6 20:7:1 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 5.39654 secs, and comparison 4.58501 sec, and warnIfPerfScore > 0.62, and perfScore=0.84962]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.38628 secs, and comparison 2.92323 sec, and warnIfPerfScore > 0.5, and perfScore=0.542718]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.32227 secs, and comparison 6.52246 sec, and warnIfPerfScore > 1.05, and perfScore=1.03167]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.89652 secs, and comparison 3.7023 sec, and warnIfPerfScore > 0.48, and perfScore=0.950156]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.631 secs, and comparison 4.35482 sec, and warnIfPerfScore > 0.57, and perfScore=0.940363]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 3.34369 secs, and comparison 19.2959 sec, and warnIfPerfScore > 2.9, and perfScore=5.77083]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 4.001 secs, and comparison 20.4837 sec, and warnIfPerfScore > 2.9, and perfScore=5.11966]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.75967 secs, and comparison 65.2973 sec, and warnIfPerfScore > 9.7, and perfScore=11.337]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.13283 secs, and comparison 10.7532 sec, and warnIfPerfScore > 1.6, and perfScore=2.09498]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.93315 secs, and comparison 5.67264 sec, and warnIfPerfScore > 1.5, and perfScore=0.956093]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.86603 secs, and comparison 10.6935 sec, and warnIfPerfScore > 2.1, and perfScore=3.73112]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 4.26267 secs, and comparison 3.96399 sec, and warnIfPerfScore > 1.3, and perfScore=0.92993]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.47941 secs, and comparison 1.49296 sec, and warnIfPerfScore > 0.23, and perfScore=0.333295]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.10379 secs, and comparison 5.10678 sec, and warnIfPerfScore > 1.3, and perfScore=1.24441]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.01962 secs, and comparison 7.38355 sec, and warnIfPerfScore > 1.2, and perfScore=2.4452]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15.9669 secs, and comparison 1.49996 sec, and warnIfPerfScore > 0.33, and perfScore=0.0939418]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.85453 secs, and comparison 40.8201 sec, and warnIfPerfScore > 6, and perfScore=14.3001]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.887 secs, and comparison 3.7051 sec, and warnIfPerfScore > 0.5, and perfScore=0.340321]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.7
	DETAILS:         	[baseline test 4.77138 secs, and comparison 36.6395 sec, and warnIfPerfScore > 4.4, and perfScore=7.67903]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.6986 secs, and comparison 3.71541 sec, and warnIfPerfScore > 0.6, and perfScore=0.292583]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.23525 secs, and comparison 13.6417 sec, and warnIfPerfScore > 1.5, and perfScore=1.88546]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.89038 secs, and comparison 2.12566 sec, and warnIfPerfScore > 0.55, and perfScore=0.308497]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 15 secs, and comparison 1.08773 sec, and warnIfPerfScore > 0.25, and perfScore=0.0725156]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.48108 sec, and warnIfPerfScore > 0.5, and perfScore=0.232072]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 48 seconds]]]

Succeeded
