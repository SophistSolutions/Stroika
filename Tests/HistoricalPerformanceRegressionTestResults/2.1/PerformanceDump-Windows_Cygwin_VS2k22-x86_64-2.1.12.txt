Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec 11 21:38:8 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.34017 secs, and comparison 4.73801 sec, and warnIfPerfScore > 0.65, and perfScore=0.7473]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.56903 secs, and comparison 2.87571 sec, and warnIfPerfScore > 0.5, and perfScore=0.437768]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.67507 secs, and comparison 8.44604 sec, and warnIfPerfScore > 1.05, and perfScore=0.87297]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.6814 secs, and comparison 8.4813 sec, and warnIfPerfScore > 1.15, and perfScore=1.10414]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.2486 secs, and comparison 2.73831 sec, and warnIfPerfScore > 0.48, and perfScore=0.243436]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.1622 secs, and comparison 3.22333 sec, and warnIfPerfScore > 0.57, and perfScore=0.288771]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.52343 secs, and comparison 23.5532 sec, and warnIfPerfScore > 2.9, and perfScore=2.47319]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.0414 secs, and comparison 24.1798 sec, and warnIfPerfScore > 2.9, and perfScore=2.408]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.55859 secs, and comparison 152.732 sec, and warnIfPerfScore > 24, and perfScore=17.8455]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.97039 secs, and comparison 11.7418 sec, and warnIfPerfScore > 1.7, and perfScore=1.47318]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.85152 secs, and comparison 7.43407 sec, and warnIfPerfScore > 1.5, and perfScore=0.946831]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.8649 secs, and comparison 14.0302 sec, and warnIfPerfScore > 2.1, and perfScore=1.78391]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.50574 secs, and comparison 5.36984 sec, and warnIfPerfScore > 1.6, and perfScore=0.564905]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 10.2168 secs, and comparison 1.01259 sec, and warnIfPerfScore > 0.23, and perfScore=0.0991103]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.7583 secs, and comparison 14.1887 sec, and warnIfPerfScore > 1.3, and perfScore=1.03129]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.5188 secs, and comparison 7.27182 sec, and warnIfPerfScore > 1.2, and perfScore=0.691314]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 12.0186 secs, and comparison 2.70342 sec, and warnIfPerfScore > 0.33, and perfScore=0.224937]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.1215 secs, and comparison 43.0792 sec, and warnIfPerfScore > 6, and perfScore=4.2562]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.116 secs, and comparison 7.00233 sec, and warnIfPerfScore > 0.8, and perfScore=0.692204]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.1737 secs, and comparison 10.2903 sec, and warnIfPerfScore > 1.4, and perfScore=1.01146]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.8722 secs, and comparison 4.00732 sec, and warnIfPerfScore > 0.65, and perfScore=0.337538]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.661 secs, and comparison 40.4587 sec, and warnIfPerfScore > 4.4, and perfScore=3.79502]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.7066 secs, and comparison 3.84172 sec, and warnIfPerfScore > 0.6, and perfScore=0.328166]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.7993 secs, and comparison 3.81791 sec, and warnIfPerfScore > 0.6, and perfScore=0.323572]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.778 secs, and comparison 3.80672 sec, and warnIfPerfScore > 0.6, and perfScore=0.323205]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.687 secs, and comparison 7.06301 sec, and warnIfPerfScore > 1.3, and perfScore=0.60435]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.3676 secs, and comparison 10.6274 sec, and warnIfPerfScore > 1.3, and perfScore=0.859294]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 50.579 secs, and comparison 7.26102 sec, and warnIfPerfScore > 0.3, and perfScore=0.143558]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.3453 secs, and comparison 12.7727 sec, and warnIfPerfScore > 1.5, and perfScore=1.53053]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.31344 secs, and comparison 3.87824 sec, and warnIfPerfScore > 0.55, and perfScore=0.466502]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.798765 sec, and warnIfPerfScore > 0.1, and perfScore=0.053251]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.29342 sec, and warnIfPerfScore > 0.5, and perfScore=0.219561]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.3936 secs, and comparison 14.5907 sec, and warnIfPerfScore > 2, and perfScore=1.55326]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.0234 secs, and comparison 18.3434 sec, and warnIfPerfScore > 3.6, and perfScore=1.66404]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 11 seconds]]]

Succeeded
