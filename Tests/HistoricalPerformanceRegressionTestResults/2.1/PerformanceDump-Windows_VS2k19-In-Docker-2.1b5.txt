Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 12 1:57:38 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.8871 secs, and comparison 5.54997 sec, and warnIfPerfScore > 0.62, and perfScore=0.466891]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.1306 secs, and comparison 3.68533 sec, and warnIfPerfScore > 0.5, and perfScore=0.303804]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.6941 secs, and comparison 9.90012 sec, and warnIfPerfScore > 1.05, and perfScore=0.846593]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.6718 secs, and comparison 4.76851 sec, and warnIfPerfScore > 0.48, and perfScore=0.446832]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.8781 secs, and comparison 4.85113 sec, and warnIfPerfScore > 0.57, and perfScore=0.445952]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.9036 secs, and comparison 28.7878 sec, and warnIfPerfScore > 2.9, and perfScore=2.231]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.6196 secs, and comparison 31.2236 sec, and warnIfPerfScore > 2.9, and perfScore=2.47421]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 12.4231 secs, and comparison 100.898 sec, and warnIfPerfScore > 9.7, and perfScore=8.12179]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.469 secs, and comparison 13.3411 sec, and warnIfPerfScore > 1.6, and perfScore=1.27434]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.9217 secs, and comparison 14.7064 sec, and warnIfPerfScore > 1.5, and perfScore=0.985568]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.14576 secs, and comparison 14.2593 sec, and warnIfPerfScore > 2.1, and perfScore=1.55912]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 13.9779 secs, and comparison 10.1749 sec, and warnIfPerfScore > 1.3, and perfScore=0.727926]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 14.5621 secs, and comparison 3.29877 sec, and warnIfPerfScore > 0.23, and perfScore=0.226531]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.4317 secs, and comparison 14.6769 sec, and warnIfPerfScore > 1.3, and perfScore=1.01699]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 11.0387 secs, and comparison 8.32826 sec, and warnIfPerfScore > 1.2, and perfScore=0.754462]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 10.6688 secs, and comparison 2.11661 sec, and warnIfPerfScore > 0.33, and perfScore=0.198393]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 10.6313 secs, and comparison 49.8903 sec, and warnIfPerfScore > 6, and perfScore=4.69278]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.6587 secs, and comparison 4.7336 sec, and warnIfPerfScore > 0.5, and perfScore=0.444105]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.7911 secs, and comparison 44.6118 sec, and warnIfPerfScore > 4.4, and perfScore=3.78352]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.7128 secs, and comparison 4.94137 sec, and warnIfPerfScore > 0.6, and perfScore=0.461258]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.5652 secs, and comparison 22.8688 sec, and warnIfPerfScore > 1.5, and perfScore=1.16885]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.03 secs, and comparison 4.59785 sec, and warnIfPerfScore > 0.55, and perfScore=0.416848]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.65451 sec, and warnIfPerfScore > 0.25, and perfScore=0.1103]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.02333 sec, and warnIfPerfScore > 0.5, and perfScore=0.268222]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.2405 secs, and comparison 21.8377 sec, and warnIfPerfScore > 2, and perfScore=1.78405]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.3792 secs, and comparison 36.2667 sec, and warnIfPerfScore > 3.1, and perfScore=2.92964]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 45 seconds]]]

Succeeded
