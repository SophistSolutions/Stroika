Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug  1 9:20:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.54377 secs, and comparison 4.91988 sec, and warnIfPerfScore > 0.65, and perfScore=0.751842]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.58677 secs, and comparison 2.93503 sec, and warnIfPerfScore > 0.5, and perfScore=0.445595]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.88843 secs, and comparison 7.83428 sec, and warnIfPerfScore > 1.05, and perfScore=0.881402]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.28538 secs, and comparison 8.26538 sec, and warnIfPerfScore > 1.15, and perfScore=1.13452]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.7331 secs, and comparison 2.6293 sec, and warnIfPerfScore > 0.48, and perfScore=0.244972]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.9195 secs, and comparison 3.13376 sec, and warnIfPerfScore > 0.57, and perfScore=0.286987]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.50889 secs, and comparison 21.4937 sec, and warnIfPerfScore > 2.9, and perfScore=2.86243]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.71228 secs, and comparison 22.1124 sec, and warnIfPerfScore > 2.9, and perfScore=2.86717]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.46046 secs, and comparison 142.952 sec, and warnIfPerfScore > 24, and perfScore=22.1272]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.37936 secs, and comparison 10.7434 sec, and warnIfPerfScore > 1.7, and perfScore=1.6841]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.08184 secs, and comparison 5.76603 sec, and warnIfPerfScore > 1.5, and perfScore=0.948073]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.73016 secs, and comparison 12.6152 sec, and warnIfPerfScore > 2.1, and perfScore=2.20155]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.4197 secs, and comparison 4.14982 sec, and warnIfPerfScore > 1.6, and perfScore=0.334134]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 12.8686 secs, and comparison 0.755127 sec, and warnIfPerfScore > 0.23, and perfScore=0.0586797]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5117 secs, and comparison 12.7437 sec, and warnIfPerfScore > 1.3, and perfScore=1.01855]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.7181 secs, and comparison 5.64087 sec, and warnIfPerfScore > 1.2, and perfScore=0.481379]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.91837 secs, and comparison 2.04718 sec, and warnIfPerfScore > 0.33, and perfScore=0.229547]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.20962 secs, and comparison 40.1117 sec, and warnIfPerfScore > 6, and perfScore=4.88593]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.24438 secs, and comparison 5.48169 sec, and warnIfPerfScore > 0.8, and perfScore=0.664901]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.22731 secs, and comparison 8.01792 sec, and warnIfPerfScore > 1.4, and perfScore=0.97455]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.83593 secs, and comparison 3.55321 sec, and warnIfPerfScore > 0.65, and perfScore=0.402132]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.00159 secs, and comparison 37.7447 sec, and warnIfPerfScore > 4.4, and perfScore=4.19311]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.69183 secs, and comparison 3.47622 sec, and warnIfPerfScore > 0.6, and perfScore=0.399941]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.78981 secs, and comparison 3.50994 sec, and warnIfPerfScore > 0.6, and perfScore=0.399319]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.69258 secs, and comparison 3.43641 sec, and warnIfPerfScore > 0.6, and perfScore=0.395327]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.76232 secs, and comparison 5.41216 sec, and warnIfPerfScore > 1.3, and perfScore=0.617664]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.3643 secs, and comparison 8.84834 sec, and warnIfPerfScore > 1.3, and perfScore=0.944901]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 40.8882 secs, and comparison 6.42769 sec, and warnIfPerfScore > 0.3, and perfScore=0.157202]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.70348 secs, and comparison 10.3839 sec, and warnIfPerfScore > 1.5, and perfScore=1.54903]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.5768 secs, and comparison 2.86902 sec, and warnIfPerfScore > 0.55, and perfScore=0.436234]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.640922 sec, and warnIfPerfScore > 0.1, and perfScore=0.0427281]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.93692 sec, and warnIfPerfScore > 0.5, and perfScore=0.195794]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.66883 secs, and comparison 13.5608 sec, and warnIfPerfScore > 2, and perfScore=1.7683]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.18873 secs, and comparison 15.1773 sec, and warnIfPerfScore > 3.6, and perfScore=1.85343]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 32 seconds]]]

Succeeded
