Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Mar  9 10:15:55 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.67514 secs, and comparison 5.32161 sec, and warnIfPerfScore > 0.65, and perfScore=0.797228]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.85237 secs, and comparison 3.41765 sec, and warnIfPerfScore > 0.5, and perfScore=0.498754]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.83038 secs, and comparison 8.07786 sec, and warnIfPerfScore > 1.05, and perfScore=1.03161]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.03563 secs, and comparison 8.07863 sec, and warnIfPerfScore > 1.15, and perfScore=1.33849]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 3.85828 secs, and comparison 2.83472 sec, and warnIfPerfScore > 0.48, and perfScore=0.73471]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 4.54228 secs, and comparison 3.88565 sec, and warnIfPerfScore > 0.57, and perfScore=0.85544]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 3.7633 secs, and comparison 17.3966 sec, and warnIfPerfScore > 2.9, and perfScore=4.6227]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 4.24037 secs, and comparison 17.9789 sec, and warnIfPerfScore > 2.9, and perfScore=4.23995]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 5.80025 secs, and comparison 75.5026 sec, and warnIfPerfScore > 24, and perfScore=13.0171]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.52856 secs, and comparison 11.7615 sec, and warnIfPerfScore > 1.7, and perfScore=1.37907]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.87662 secs, and comparison 8.23054 sec, and warnIfPerfScore > 1.5, and perfScore=0.927216]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 4.69012 secs, and comparison 13.5941 sec, and warnIfPerfScore > 2.1, and perfScore=2.89845]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 6.74785 secs, and comparison 5.46699 sec, and warnIfPerfScore > 1.6, and perfScore=0.810182]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.97882 secs, and comparison 2.33349 sec, and warnIfPerfScore > 0.23, and perfScore=0.334367]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.29731 secs, and comparison 6.70375 sec, and warnIfPerfScore > 1.3, and perfScore=1.2655]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 4.43948 secs, and comparison 11.0805 sec, and warnIfPerfScore > 1.2, and perfScore=2.4959]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 24.9079 secs, and comparison 3.54317 sec, and warnIfPerfScore > 0.33, and perfScore=0.142251]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.27792 secs, and comparison 48.0105 sec, and warnIfPerfScore > 6, and perfScore=11.2229]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.98087 secs, and comparison 10.1493 sec, and warnIfPerfScore > 0.8, and perfScore=2.54952]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.47727 secs, and comparison 9.64002 sec, and warnIfPerfScore > 1.4, and perfScore=2.1531]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 24.6657 secs, and comparison 3.88192 sec, and warnIfPerfScore > 0.65, and perfScore=0.157382]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 6.23906 secs, and comparison 40.6248 sec, and warnIfPerfScore > 4.4, and perfScore=6.51137]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.9472 secs, and comparison 4.35688 sec, and warnIfPerfScore > 0.6, and perfScore=0.273207]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 16.6843 secs, and comparison 4.2113 sec, and warnIfPerfScore > 0.6, and perfScore=0.25241]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 14.6854 secs, and comparison 4.1516 sec, and warnIfPerfScore > 0.6, and perfScore=0.282703]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 14.5392 secs, and comparison 5.5074 sec, and warnIfPerfScore > 1.3, and perfScore=0.378798]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 24.9295 secs, and comparison 13.1472 sec, and warnIfPerfScore > 1.3, and perfScore=0.527376]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 29.7361 secs, and comparison 9.1073 sec, and warnIfPerfScore > 0.3, and perfScore=0.306271]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.0522 secs, and comparison 17.845 sec, and warnIfPerfScore > 1.5, and perfScore=1.3672]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.10935 secs, and comparison 2.89816 sec, and warnIfPerfScore > 0.55, and perfScore=0.407654]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.0616 sec, and warnIfPerfScore > 0.1, and perfScore=0.0707733]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.41503 sec, and warnIfPerfScore > 0.5, and perfScore=0.227669]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 22 seconds]]]

Succeeded
