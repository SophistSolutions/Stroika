Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 20:53:47 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 3.16925 secs, and comparison 1.29956 sec, and warnIfPerfScore > 0.65, and perfScore=0.410052]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 2.9619 secs, and comparison 2.97679 sec, and warnIfPerfScore > 0.5, and perfScore=1.00503]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.51035 secs, and comparison 6.74405 sec, and warnIfPerfScore > 1.05, and perfScore=2.6865]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.08984 secs, and comparison 6.69045 sec, and warnIfPerfScore > 1.15, and perfScore=3.20142]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.02625 secs, and comparison 0.955859 sec, and warnIfPerfScore > 0.48, and perfScore=0.237407]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 4.742 secs, and comparison 1.05603 sec, and warnIfPerfScore > 0.57, and perfScore=0.222696]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 3.66778 secs, and comparison 11.8657 sec, and warnIfPerfScore > 2.9, and perfScore=3.23512]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.08625 secs, and comparison 12.3152 sec, and warnIfPerfScore > 2.9, and perfScore=3.01381]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 5.38799 secs, and comparison 42.8382 sec, and warnIfPerfScore > 24, and perfScore=7.95068]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.3664 secs, and comparison 7.4321 sec, and warnIfPerfScore > 1.7, and perfScore=1.38493]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.62703 secs, and comparison 5.40519 sec, and warnIfPerfScore > 1.5, and perfScore=0.960575]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.90872 secs, and comparison 9.12167 sec, and warnIfPerfScore > 2.1, and perfScore=3.13597]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.89043 secs, and comparison 3.68665 sec, and warnIfPerfScore > 1.6, and perfScore=0.947622]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.03252 secs, and comparison 1.34977 sec, and warnIfPerfScore > 0.23, and perfScore=0.334722]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.55299 secs, and comparison 4.26285 sec, and warnIfPerfScore > 1.3, and perfScore=1.19979]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.03234 secs, and comparison 7.36544 sec, and warnIfPerfScore > 1.2, and perfScore=2.42896]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 17.0301 secs, and comparison 1.8617 sec, and warnIfPerfScore > 0.33, and perfScore=0.109319]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.92892 secs, and comparison 40.9005 sec, and warnIfPerfScore > 6, and perfScore=13.9643]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.95042 secs, and comparison 6.63672 sec, and warnIfPerfScore > 0.8, and perfScore=2.24942]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.97033 secs, and comparison 7.56979 sec, and warnIfPerfScore > 1.4, and perfScore=2.54847]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.6469 secs, and comparison 3.6752 sec, and warnIfPerfScore > 0.65, and perfScore=0.220773]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.43048 secs, and comparison 37.3927 sec, and warnIfPerfScore > 4.4, and perfScore=8.43987]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.0728 secs, and comparison 3.7032 sec, and warnIfPerfScore > 0.6, and perfScore=0.306738]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.1426 secs, and comparison 3.73578 sec, and warnIfPerfScore > 0.6, and perfScore=0.307659]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.1774 secs, and comparison 3.64745 sec, and warnIfPerfScore > 0.6, and perfScore=0.299527]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.1858 secs, and comparison 4.32606 sec, and warnIfPerfScore > 1.3, and perfScore=0.355007]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 18.982 secs, and comparison 9.44123 sec, and warnIfPerfScore > 1.3, and perfScore=0.497379]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 19.1133 secs, and comparison 5.696 sec, and warnIfPerfScore > 0.3, and perfScore=0.298013]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.52835 secs, and comparison 13.3151 sec, and warnIfPerfScore > 1.5, and perfScore=1.76866]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.60075 secs, and comparison 2.46908 sec, and warnIfPerfScore > 0.55, and perfScore=0.374061]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.794249 sec, and warnIfPerfScore > 0.1, and perfScore=0.0529499]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42493 sec, and warnIfPerfScore > 0.5, and perfScore=0.0949954]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 1 second]]]

Succeeded
