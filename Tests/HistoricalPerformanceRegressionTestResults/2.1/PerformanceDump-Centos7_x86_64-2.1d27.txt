Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Aug 27 3:2:14 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.66798 secs, and comparison 5.25339 sec, and warnIfPerfScore > 0.62, and perfScore=0.787853]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.66072 secs, and comparison 3.64013 sec, and warnIfPerfScore > 0.5, and perfScore=0.546507]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.29843 secs, and comparison 7.97052 sec, and warnIfPerfScore > 1.05, and perfScore=0.960486]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.04987 secs, and comparison 4.52183 sec, and warnIfPerfScore > 0.48, and perfScore=1.48263]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.09061 secs, and comparison 4.98451 sec, and warnIfPerfScore > 0.55, and perfScore=1.61279]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8949 secs, and comparison 31.8511 sec, and warnIfPerfScore > 2.9, and perfScore=2.6777]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.7644 secs, and comparison 35.0116 sec, and warnIfPerfScore > 2.9, and perfScore=2.54363]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 12.6181 secs, and comparison 156.043 sec, and warnIfPerfScore > 9.7, and perfScore=12.3666]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.2855 secs, and comparison 15.5725 sec, and warnIfPerfScore > 1.6, and perfScore=1.17214]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.03145 secs, and comparison 8.58707 sec, and warnIfPerfScore > 1.5, and perfScore=0.950797]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.35748 secs, and comparison 14.668 sec, and warnIfPerfScore > 2.1, and perfScore=1.56751]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.38559 secs, and comparison 7.52806 sec, and warnIfPerfScore > 1.3, and perfScore=1.01929]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.82173 secs, and comparison 2.87131 sec, and warnIfPerfScore > 0.18, and perfScore=0.367094]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.86431 secs, and comparison 8.11985 sec, and warnIfPerfScore > 1.3, and perfScore=1.18291]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.20892 secs, and comparison 12.5114 sec, and warnIfPerfScore > 1.2, and perfScore=2.01507]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 5.26779 secs, and comparison 1.71482 sec, and warnIfPerfScore > 0.33, and perfScore=0.32553]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 5.85767 secs, and comparison 47.0304 sec, and warnIfPerfScore > 6, and perfScore=8.02887]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.67781 secs, and comparison 3.75057 sec, and warnIfPerfScore > 0.5, and perfScore=1.01978]
	                 	Sequence_DoublyLinkedList<string> is ***SLOWER***

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 8.09754 secs, and comparison 41.7236 sec, and warnIfPerfScore > 4.4, and perfScore=5.15262]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 5.17385 secs, and comparison 3.76695 sec, and warnIfPerfScore > 0.6, and perfScore=0.728074]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.1071 secs, and comparison 19.7046 sec, and warnIfPerfScore > 1.5, and perfScore=1.22335]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.7229 secs, and comparison 4.6629 sec, and warnIfPerfScore > 0.55, and perfScore=0.434855]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.60593 sec, and warnIfPerfScore > 0.25, and perfScore=0.107062]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.19337 sec, and warnIfPerfScore > 0.5, and perfScore=0.279558]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 26 seconds]]]

Succeeded
