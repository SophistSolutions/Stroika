Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 20::5 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 48.339 secs, and comparison 14.9253 sec, and warnIfPerfScore > 0.65, and perfScore=0.308763]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 48.5798 secs, and comparison 14.5092 sec, and warnIfPerfScore > 0.5, and perfScore=0.298667]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 28.0679 secs, and comparison 21.6251 sec, and warnIfPerfScore > 1.05, and perfScore=0.770458]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 22.4228 secs, and comparison 21.7094 sec, and warnIfPerfScore > 1.15, and perfScore=0.968185]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 19.8711 secs, and comparison 3.4202 sec, and warnIfPerfScore > 0.48, and perfScore=0.172119]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.3405 secs, and comparison 3.74988 sec, and warnIfPerfScore > 0.57, and perfScore=0.184355]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 21.8081 secs, and comparison 36.0369 sec, and warnIfPerfScore > 2.9, and perfScore=1.65246]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.0134 secs, and comparison 39.1793 sec, and warnIfPerfScore > 2.9, and perfScore=1.70246]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 20.5753 secs, and comparison 208.677 sec, and warnIfPerfScore > 24, and perfScore=10.1421]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 20.0637 secs, and comparison 16.2979 sec, and warnIfPerfScore > 1.7, and perfScore=0.812308]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 49.6855 secs, and comparison 50.4405 sec, and warnIfPerfScore > 1.5, and perfScore=1.0152]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.6566 secs, and comparison 18.7331 sec, and warnIfPerfScore > 2.1, and perfScore=1.0041]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 40.9873 secs, and comparison 12.6372 sec, and warnIfPerfScore > 1.6, and perfScore=0.30832]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.076
	DETAILS:         	[baseline test 43.6315 secs, and comparison 3.29755 sec, and warnIfPerfScore > 0.23, and perfScore=0.0755773]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 15.8591 secs, and comparison 24.7939 sec, and warnIfPerfScore > 1.3, and perfScore=1.56339]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.56339}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.7287 secs, and comparison 20.6535 sec, and warnIfPerfScore > 1.2, and perfScore=1.40226]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.40226}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.7825 secs, and comparison 4.60667 sec, and warnIfPerfScore > 0.33, and perfScore=0.360388]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.360388}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 14.2531 secs, and comparison 50.8943 sec, and warnIfPerfScore > 6, and perfScore=3.57075]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.0936 secs, and comparison 19.6955 sec, and warnIfPerfScore > 0.8, and perfScore=1.39747]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.39747}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.0152 secs, and comparison 31.7217 sec, and warnIfPerfScore > 1.4, and perfScore=2.26337]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.26337}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.5076 secs, and comparison 4.82537 sec, and warnIfPerfScore > 0.65, and perfScore=0.385796]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 25.4551 secs, and comparison 57.7022 sec, and warnIfPerfScore > 4.4, and perfScore=2.26682]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.4493 secs, and comparison 5.51359 sec, and warnIfPerfScore > 0.6, and perfScore=0.409953]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.3892 secs, and comparison 5.72293 sec, and warnIfPerfScore > 0.6, and perfScore=0.427429]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 13.8225 secs, and comparison 6.02665 sec, and warnIfPerfScore > 0.6, and perfScore=0.436004]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0967 secs, and comparison 13.8282 sec, and warnIfPerfScore > 1.3, and perfScore=1.05585]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.9822 secs, and comparison 21.1263 sec, and warnIfPerfScore > 1.3, and perfScore=1.05725]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 107.218 secs, and comparison 14.6059 sec, and warnIfPerfScore > 0.3, and perfScore=0.136226]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 26.4203 secs, and comparison 29.6345 sec, and warnIfPerfScore > 1.5, and perfScore=1.12166]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 18.1796 secs, and comparison 5.47983 sec, and warnIfPerfScore > 0.55, and perfScore=0.301427]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.78219 sec, and warnIfPerfScore > 0.1, and perfScore=0.118812]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.118812}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.57766 sec, and warnIfPerfScore > 0.5, and perfScore=0.305177]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 20.8261 secs, and comparison 24.8999 sec, and warnIfPerfScore > 2, and perfScore=1.19561]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 23.421 secs, and comparison 42.7828 sec, and warnIfPerfScore > 3.6, and perfScore=1.82669]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes, 56 seconds]]]

Succeeded
