Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan 16 4:44:57 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.207 secs, and comparison 5.09406 sec, and warnIfPerfScore > 0.62, and perfScore=0.454543]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.0426 secs, and comparison 3.40985 sec, and warnIfPerfScore > 0.5, and perfScore=0.308792]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.1198 secs, and comparison 9.13002 sec, and warnIfPerfScore > 1.05, and perfScore=0.821063]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.5037 secs, and comparison 4.2063 sec, and warnIfPerfScore > 0.48, and perfScore=0.365647]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.5687 secs, and comparison 4.4531 sec, and warnIfPerfScore > 0.57, and perfScore=0.384926]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.4263 secs, and comparison 26.6334 sec, and warnIfPerfScore > 2.9, and perfScore=2.33089]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.4653 secs, and comparison 28.2903 sec, and warnIfPerfScore > 2.9, and perfScore=2.26953]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 11.8912 secs, and comparison 96.3536 sec, and warnIfPerfScore > 9.7, and perfScore=8.10292]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.52368 secs, and comparison 12.3099 sec, and warnIfPerfScore > 1.6, and perfScore=1.29256]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.7362 secs, and comparison 13.7158 sec, and warnIfPerfScore > 1.5, and perfScore=0.998511]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.81841 secs, and comparison 12.6914 sec, and warnIfPerfScore > 2.1, and perfScore=1.4392]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 12.634 secs, and comparison 9.90971 sec, and warnIfPerfScore > 1.3, and perfScore=0.784367]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.2927 secs, and comparison 3.68061 sec, and warnIfPerfScore > 0.23, and perfScore=0.276889]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.23 and got 0.276889}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.1778 secs, and comparison 13.9083 sec, and warnIfPerfScore > 1.3, and perfScore=0.980991]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.1714 secs, and comparison 7.6074 sec, and warnIfPerfScore > 1.2, and perfScore=0.74792]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.7076 secs, and comparison 1.9288 sec, and warnIfPerfScore > 0.33, and perfScore=0.19869]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 10.0341 secs, and comparison 47.1622 sec, and warnIfPerfScore > 6, and perfScore=4.70019]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.60524 secs, and comparison 4.28428 sec, and warnIfPerfScore > 0.5, and perfScore=0.446036]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 11.0044 secs, and comparison 40.8753 sec, and warnIfPerfScore > 4.4, and perfScore=3.71446]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.198 secs, and comparison 5.08838 sec, and warnIfPerfScore > 0.6, and perfScore=0.498959]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.2708 secs, and comparison 20.3732 sec, and warnIfPerfScore > 1.5, and perfScore=1.11507]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 16.018 secs, and comparison 5.01235 sec, and warnIfPerfScore > 0.55, and perfScore=0.312921]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.06208 sec, and warnIfPerfScore > 0.25, and perfScore=0.137472]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.80964 sec, and warnIfPerfScore > 0.5, and perfScore=0.253976]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.993 secs, and comparison 22.563 sec, and warnIfPerfScore > 2, and perfScore=1.73655]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.8195 secs, and comparison 33.3885 sec, and warnIfPerfScore > 3.1, and perfScore=2.82488]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 15 seconds]]]

Succeeded
