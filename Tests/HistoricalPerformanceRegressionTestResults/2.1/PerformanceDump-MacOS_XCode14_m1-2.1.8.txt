Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov  3 15:39:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.27519 secs, and comparison 4.84486 sec, and warnIfPerfScore > 0.65, and perfScore=1.47926]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 3.21844 secs, and comparison 2.30727 sec, and warnIfPerfScore > 0.5, and perfScore=0.716891]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.631 secs, and comparison 7.02202 sec, and warnIfPerfScore > 1.05, and perfScore=1.05897]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.07685 secs, and comparison 6.98992 sec, and warnIfPerfScore > 1.15, and perfScore=1.15025]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.50982 secs, and comparison 1.18916 sec, and warnIfPerfScore > 0.48, and perfScore=0.263682]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.52682 secs, and comparison 1.80146 sec, and warnIfPerfScore > 0.57, and perfScore=0.397953]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 5.27078 secs, and comparison 14.796 sec, and warnIfPerfScore > 2.9, and perfScore=2.80718]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.1092 secs, and comparison 15.5265 sec, and warnIfPerfScore > 2.9, and perfScore=2.18401]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 9.31251 secs, and comparison 49.4144 sec, and warnIfPerfScore > 24, and perfScore=5.30623]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.3863 secs, and comparison 7.78526 sec, and warnIfPerfScore > 1.7, and perfScore=2.29905]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 4.95953 secs, and comparison 3.96872 sec, and warnIfPerfScore > 1.5, and perfScore=0.800222]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.83388 secs, and comparison 9.80103 sec, and warnIfPerfScore > 2.1, and perfScore=3.45853]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.16671 secs, and comparison 2.81887 sec, and warnIfPerfScore > 1.6, and perfScore=0.545584]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 5.37496 secs, and comparison 0.575614 sec, and warnIfPerfScore > 0.23, and perfScore=0.107092]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.49594 secs, and comparison 13.2153 sec, and warnIfPerfScore > 1.3, and perfScore=1.39168]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.9465 secs, and comparison 5.03808 sec, and warnIfPerfScore > 1.2, and perfScore=1.2766]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.91175 secs, and comparison 1.00995 sec, and warnIfPerfScore > 0.33, and perfScore=0.258183]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.70196 secs, and comparison 38.6549 sec, and warnIfPerfScore > 6, and perfScore=10.4417]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.66584 secs, and comparison 4.85125 sec, and warnIfPerfScore > 0.8, and perfScore=1.32337]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.74101 secs, and comparison 7.09898 sec, and warnIfPerfScore > 1.4, and perfScore=1.89761]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.99054 secs, and comparison 3.24682 sec, and warnIfPerfScore > 0.65, and perfScore=0.813629]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 5.03432 secs, and comparison 36.4385 sec, and warnIfPerfScore > 4.4, and perfScore=7.23801]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 3.89691 secs, and comparison 3.09356 sec, and warnIfPerfScore > 0.6, and perfScore=0.793849]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.86157 secs, and comparison 3.15286 sec, and warnIfPerfScore > 0.6, and perfScore=0.816469]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 3.93162 secs, and comparison 3.15596 sec, and warnIfPerfScore > 0.6, and perfScore=0.802711]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 3.93047 secs, and comparison 2.81362 sec, and warnIfPerfScore > 1.3, and perfScore=0.715849]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.2479 secs, and comparison 8.43512 sec, and warnIfPerfScore > 1.3, and perfScore=1.98571]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.6627 secs, and comparison 4.16678 sec, and warnIfPerfScore > 0.3, and perfScore=0.145373]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.80854 secs, and comparison 11.4862 sec, and warnIfPerfScore > 1.5, and perfScore=1.30399]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 2.49552 secs, and comparison 2.29414 sec, and warnIfPerfScore > 0.55, and perfScore=0.919304]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.2659 sec, and warnIfPerfScore > 0.1, and perfScore=0.15106]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.96206 sec, and warnIfPerfScore > 0.5, and perfScore=0.130804]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 31 seconds]]]

Succeeded
