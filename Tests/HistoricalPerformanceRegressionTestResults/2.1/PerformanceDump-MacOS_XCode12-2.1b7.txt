Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Dec  4 11:12:58 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.37103 secs, and comparison 6.95283 sec, and warnIfPerfScore > 0.62, and perfScore=0.741949]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.26278 secs, and comparison 4.47503 sec, and warnIfPerfScore > 0.5, and perfScore=0.48312]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 18.1358 secs, and comparison 12.6614 sec, and warnIfPerfScore > 1.05, and perfScore=0.698146]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 33.3164 secs, and comparison 6.16269 sec, and warnIfPerfScore > 0.48, and perfScore=0.184975]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 33.5677 secs, and comparison 6.15527 sec, and warnIfPerfScore > 0.57, and perfScore=0.183369]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 23.2009 secs, and comparison 64.086 sec, and warnIfPerfScore > 2.9, and perfScore=2.76223]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 26.2265 secs, and comparison 67.6779 sec, and warnIfPerfScore > 2.9, and perfScore=2.58051]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 19.8605 secs, and comparison 189.48 sec, and warnIfPerfScore > 9.7, and perfScore=9.54056]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 22.8845 secs, and comparison 32.3073 sec, and warnIfPerfScore > 1.6, and perfScore=1.41175]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.60876 secs, and comparison 7.00898 sec, and warnIfPerfScore > 1.5, and perfScore=0.729436]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.4841 secs, and comparison 36.5585 sec, and warnIfPerfScore > 2.1, and perfScore=2.21781]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 12.8261 secs, and comparison 7.47031 sec, and warnIfPerfScore > 1.3, and perfScore=0.582429]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 13.5454 secs, and comparison 2.28229 sec, and warnIfPerfScore > 0.23, and perfScore=0.168492]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 22.2432 secs, and comparison 23.0592 sec, and warnIfPerfScore > 1.3, and perfScore=1.03669]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.2284 secs, and comparison 14.6808 sec, and warnIfPerfScore > 1.2, and perfScore=1.10979]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 14.2366 secs, and comparison 2.733 sec, and warnIfPerfScore > 0.33, and perfScore=0.191969]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 13.7059 secs, and comparison 59.2187 sec, and warnIfPerfScore > 6, and perfScore=4.32069]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15.1675 secs, and comparison 5.44581 sec, and warnIfPerfScore > 0.5, and perfScore=0.359046]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.7739 secs, and comparison 53.1823 sec, and warnIfPerfScore > 4.4, and perfScore=3.17053]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 14.3563 secs, and comparison 5.38837 sec, and warnIfPerfScore > 0.6, and perfScore=0.37533]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 37.4775 secs, and comparison 50.6549 sec, and warnIfPerfScore > 1.5, and perfScore=1.35161]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.43612 secs, and comparison 6.4458 sec, and warnIfPerfScore > 0.55, and perfScore=0.764072]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.21301 sec, and warnIfPerfScore > 0.25, and perfScore=0.480867]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.01414 sec, and warnIfPerfScore > 0.5, and perfScore=0.267609]
	                 	Test_Optional_ is FASTER

[[[Tests took: 18 minutes, 2 seconds]]]

Succeeded
