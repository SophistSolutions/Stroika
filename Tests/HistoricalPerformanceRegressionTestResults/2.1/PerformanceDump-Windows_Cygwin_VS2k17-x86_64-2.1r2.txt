Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 21:27:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 12.2717 secs, and comparison 6.17531 sec, and warnIfPerfScore > 0.65, and perfScore=0.503214]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.5821 secs, and comparison 4.10823 sec, and warnIfPerfScore > 0.5, and perfScore=0.326515]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.3299 secs, and comparison 9.84546 sec, and warnIfPerfScore > 1.05, and perfScore=0.798502]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.49645 secs, and comparison 9.33774 sec, and warnIfPerfScore > 1.15, and perfScore=1.09902]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.26508 secs, and comparison 3.2484 sec, and warnIfPerfScore > 0.48, and perfScore=0.350607]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.0953 secs, and comparison 3.78579 sec, and warnIfPerfScore > 0.57, and perfScore=0.416236]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.72996 secs, and comparison 23.993 sec, and warnIfPerfScore > 2.9, and perfScore=2.74835]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.93533 secs, and comparison 28.6822 sec, and warnIfPerfScore > 2.9, and perfScore=2.88688]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 10.057 secs, and comparison 164.763 sec, and warnIfPerfScore > 24, and perfScore=16.3829]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.65061 secs, and comparison 12.9641 sec, and warnIfPerfScore > 1.7, and perfScore=1.34334]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9039 secs, and comparison 11.8554 sec, and warnIfPerfScore > 1.5, and perfScore=0.995925]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.8287 secs, and comparison 16.114 sec, and warnIfPerfScore > 2.1, and perfScore=1.48808]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 13.2649 secs, and comparison 7.64732 sec, and warnIfPerfScore > 1.6, and perfScore=0.57651]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 12.528 secs, and comparison 1.3073 sec, and warnIfPerfScore > 0.23, and perfScore=0.104351]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 13.6942 secs, and comparison 12.7895 sec, and warnIfPerfScore > 1.3, and perfScore=0.933937]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 10.1103 secs, and comparison 7.35457 sec, and warnIfPerfScore > 1.2, and perfScore=0.727432]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 16.3846 secs, and comparison 3.80414 sec, and warnIfPerfScore > 0.33, and perfScore=0.232178]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 12.3011 secs, and comparison 45.8501 sec, and warnIfPerfScore > 6, and perfScore=3.72732]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.4615 secs, and comparison 10.229 sec, and warnIfPerfScore > 0.8, and perfScore=0.892469]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 11.7801 secs, and comparison 22.4967 sec, and warnIfPerfScore > 1.4, and perfScore=1.90973]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 25.3995 secs, and comparison 4.29103 sec, and warnIfPerfScore > 0.65, and perfScore=0.168942]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.1873 secs, and comparison 38.6781 sec, and warnIfPerfScore > 4.4, and perfScore=3.7967]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.0621 secs, and comparison 4.32766 sec, and warnIfPerfScore > 0.6, and perfScore=0.358782]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.5335 secs, and comparison 4.20905 sec, and warnIfPerfScore > 0.6, and perfScore=0.335823]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.5812 secs, and comparison 4.59131 sec, and warnIfPerfScore > 0.6, and perfScore=0.314878]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 16.0077 secs, and comparison 10.1706 sec, and warnIfPerfScore > 1.3, and perfScore=0.635359]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 17.061 secs, and comparison 15.3848 sec, and warnIfPerfScore > 1.3, and perfScore=0.901753]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 56.947 secs, and comparison 7.37138 sec, and warnIfPerfScore > 0.3, and perfScore=0.129443]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.07367 secs, and comparison 16.0868 sec, and warnIfPerfScore > 1.5, and perfScore=1.77291]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.8515 secs, and comparison 4.54858 sec, and warnIfPerfScore > 0.55, and perfScore=0.328383]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 15 secs, and comparison 1.17872 sec, and warnIfPerfScore > 0.1, and perfScore=0.0785816]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.61901 sec, and warnIfPerfScore > 0.5, and perfScore=0.241267]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.65688 secs, and comparison 18.5724 sec, and warnIfPerfScore > 2, and perfScore=1.92323]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 10.6196 secs, and comparison 21.0776 sec, and warnIfPerfScore > 3.6, and perfScore=1.98478]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 42 seconds]]]

Succeeded
