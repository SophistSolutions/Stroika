Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 16 5:1:36 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.95813 secs, and comparison 4.6079 sec, and warnIfPerfScore > 0.62, and perfScore=0.773379]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.98761 secs, and comparison 2.84835 sec, and warnIfPerfScore > 0.5, and perfScore=0.475708]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.21993 secs, and comparison 6.82308 sec, and warnIfPerfScore > 1.05, and perfScore=1.09697]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.50383 secs, and comparison 3.25562 sec, and warnIfPerfScore > 0.45, and perfScore=0.929159]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 4.19676 secs, and comparison 3.91257 sec, and warnIfPerfScore > 0.55, and perfScore=0.932284]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 2.99825 secs, and comparison 17.1276 sec, and warnIfPerfScore > 2.8, and perfScore=5.71252]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.50917 secs, and comparison 17.9593 sec, and warnIfPerfScore > 2.9, and perfScore=5.11781]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.72729 secs, and comparison 54.1479 sec, and warnIfPerfScore > 9.7, and perfScore=11.4543]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.59375 secs, and comparison 9.9127 sec, and warnIfPerfScore > 1.6, and perfScore=2.15787]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.19043 secs, and comparison 5.08703 sec, and warnIfPerfScore > 1.5, and perfScore=0.980079]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 2.35271 secs, and comparison 10.644 sec, and warnIfPerfScore > 2.1, and perfScore=4.52413]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.04801 secs, and comparison 4.19458 sec, and warnIfPerfScore > 1.3, and perfScore=1.03621]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.24224 secs, and comparison 1.53317 sec, and warnIfPerfScore > 0.18, and perfScore=0.361406]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 2.27498 secs, and comparison 3.1647 sec, and warnIfPerfScore > 1.3, and perfScore=1.39109]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.17551 secs, and comparison 7.72025 sec, and warnIfPerfScore > 1.2, and perfScore=2.43118]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.5831 secs, and comparison 1.41876 sec, and warnIfPerfScore > 0.33, and perfScore=0.104451]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.06075 secs, and comparison 42.4391 sec, and warnIfPerfScore > 6, and perfScore=13.8656]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.25885 secs, and comparison 3.93348 sec, and warnIfPerfScore > 0.5, and perfScore=0.424835]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 5.81068 secs, and comparison 40.5158 sec, and warnIfPerfScore > 4.4, and perfScore=6.97265]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.6054 secs, and comparison 3.78726 sec, and warnIfPerfScore > 0.6, and perfScore=0.357107]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.83302 secs, and comparison 10.847 sec, and warnIfPerfScore > 1.5, and perfScore=1.38478]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.92252 secs, and comparison 2.08348 sec, and warnIfPerfScore > 0.55, and perfScore=0.300971]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.852369 sec, and warnIfPerfScore > 0.25, and perfScore=0.0568246]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.57802 sec, and warnIfPerfScore > 0.5, and perfScore=0.238535]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 23 seconds]]]

Succeeded
