Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr  5 13:53:47 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.26548 secs, and comparison 6.24436 sec, and warnIfPerfScore > 0.65, and perfScore=0.755475]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.28766 secs, and comparison 3.30725 sec, and warnIfPerfScore > 0.5, and perfScore=0.35609]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.7829 secs, and comparison 9.99366 sec, and warnIfPerfScore > 1.05, and perfScore=0.848149]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.15341 secs, and comparison 9.9781 sec, and warnIfPerfScore > 1.15, and perfScore=1.0901]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.2205 secs, and comparison 2.99763 sec, and warnIfPerfScore > 0.48, and perfScore=0.293297]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.3295 secs, and comparison 3.81937 sec, and warnIfPerfScore > 0.57, and perfScore=0.369754]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.0526 secs, and comparison 27.906 sec, and warnIfPerfScore > 2.9, and perfScore=2.52483]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.2396 secs, and comparison 27.909 sec, and warnIfPerfScore > 2.9, and perfScore=2.48309]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.85609 secs, and comparison 148.471 sec, and warnIfPerfScore > 24, and perfScore=16.7648]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.89621 secs, and comparison 14.3478 sec, and warnIfPerfScore > 1.7, and perfScore=1.6128]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 10.0995 secs, and comparison 9.91405 sec, and warnIfPerfScore > 1.5, and perfScore=0.981641]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 8.27229 secs, and comparison 17.8431 sec, and warnIfPerfScore > 2.1, and perfScore=2.15697]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.3786 secs, and comparison 6.96651 sec, and warnIfPerfScore > 1.6, and perfScore=0.612246]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 11.6224 secs, and comparison 1.0301 sec, and warnIfPerfScore > 0.23, and perfScore=0.0886305]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.7819 secs, and comparison 13.2123 sec, and warnIfPerfScore > 1.3, and perfScore=1.03368]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.45801 secs, and comparison 8.20675 sec, and warnIfPerfScore > 1.2, and perfScore=0.867704]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.1447 secs, and comparison 3.07907 sec, and warnIfPerfScore > 0.33, and perfScore=0.234244]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.48901 secs, and comparison 47.5944 sec, and warnIfPerfScore > 6, and perfScore=5.01574]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.94926 secs, and comparison 7.91219 sec, and warnIfPerfScore > 0.8, and perfScore=0.884117]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.96519 secs, and comparison 10.9888 sec, and warnIfPerfScore > 1.4, and perfScore=1.22572]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.527 secs, and comparison 4.31319 sec, and warnIfPerfScore > 0.65, and perfScore=0.318858]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.94789 secs, and comparison 42.6996 sec, and warnIfPerfScore > 4.4, and perfScore=4.29233]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.3594 secs, and comparison 4.48393 sec, and warnIfPerfScore > 0.6, and perfScore=0.335639]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.419 secs, and comparison 4.346 sec, and warnIfPerfScore > 0.6, and perfScore=0.32387]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 13.1206 secs, and comparison 3.82817 sec, and warnIfPerfScore > 0.6, and perfScore=0.291768]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 12.7999 secs, and comparison 8.96497 sec, and warnIfPerfScore > 1.3, and perfScore=0.700392]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 14.7672 secs, and comparison 12.8607 sec, and warnIfPerfScore > 1.3, and perfScore=0.870898]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 60.1483 secs, and comparison 11.743 sec, and warnIfPerfScore > 0.3, and perfScore=0.195234]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.95128 secs, and comparison 14.9978 sec, and warnIfPerfScore > 1.5, and perfScore=1.67549]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.6934 secs, and comparison 4.36323 sec, and warnIfPerfScore > 0.55, and perfScore=0.373138]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.822748 sec, and warnIfPerfScore > 0.1, and perfScore=0.0548499]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.8431 sec, and warnIfPerfScore > 0.5, and perfScore=0.256207]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.8865 secs, and comparison 17.9401 sec, and warnIfPerfScore > 2, and perfScore=1.64792]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 10.9627 secs, and comparison 21.4578 sec, and warnIfPerfScore > 3.6, and perfScore=1.95734]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 39 seconds]]]

Succeeded
