Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 11:19:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 6.0822 secs, and comparison 4.99682 sec, and warnIfPerfScore > 0.65, and perfScore=0.821548]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.61518 secs, and comparison 2.90763 sec, and warnIfPerfScore > 0.5, and perfScore=0.439539]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.15192 secs, and comparison 8.27995 sec, and warnIfPerfScore > 1.05, and perfScore=0.904723]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.95102 secs, and comparison 7.55652 sec, and warnIfPerfScore > 1.15, and perfScore=1.08711]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 9.55094 secs, and comparison 2.54491 sec, and warnIfPerfScore > 0.48, and perfScore=0.266457]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.36736 secs, and comparison 2.95481 sec, and warnIfPerfScore > 0.57, and perfScore=0.315437]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.02811 secs, and comparison 20.9547 sec, and warnIfPerfScore > 2.9, and perfScore=2.61016]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.0831 secs, and comparison 19.8256 sec, and warnIfPerfScore > 2.9, and perfScore=2.45273]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 7.1384 secs, and comparison 154.434 sec, and warnIfPerfScore > 24, and perfScore=21.6342]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.00634 secs, and comparison 10.9964 sec, and warnIfPerfScore > 1.7, and perfScore=1.8308]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.50092 secs, and comparison 6.33247 sec, and warnIfPerfScore > 1.5, and perfScore=0.974089]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.7719 secs, and comparison 13.2141 sec, and warnIfPerfScore > 2.1, and perfScore=2.28939]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 7.56407 secs, and comparison 5.55682 sec, and warnIfPerfScore > 1.6, and perfScore=0.734634]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 9.12436 secs, and comparison 0.874331 sec, and warnIfPerfScore > 0.23, and perfScore=0.0958237]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 13.9887 secs, and comparison 13.4583 sec, and warnIfPerfScore > 1.3, and perfScore=0.962083]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.0815 secs, and comparison 6.64312 sec, and warnIfPerfScore > 1.2, and perfScore=0.658941]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.6475 secs, and comparison 2.5555 sec, and warnIfPerfScore > 0.33, and perfScore=0.240009]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.02351 secs, and comparison 39.6423 sec, and warnIfPerfScore > 6, and perfScore=4.39322]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.31844 secs, and comparison 5.21614 sec, and warnIfPerfScore > 0.8, and perfScore=0.627057]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.5175 secs, and comparison 7.92027 sec, and warnIfPerfScore > 1.4, and perfScore=0.929882]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.06665 secs, and comparison 3.40461 sec, and warnIfPerfScore > 0.65, and perfScore=0.42206]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.36614 secs, and comparison 36.4736 sec, and warnIfPerfScore > 4.4, and perfScore=3.8942]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.61156 secs, and comparison 3.55314 sec, and warnIfPerfScore > 0.6, and perfScore=0.412601]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.76294 secs, and comparison 3.32026 sec, and warnIfPerfScore > 0.6, and perfScore=0.378898]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.23248 secs, and comparison 3.46823 sec, and warnIfPerfScore > 0.6, and perfScore=0.421287]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.52807 secs, and comparison 5.20455 sec, and warnIfPerfScore > 1.3, and perfScore=0.610284]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.9008 secs, and comparison 8.27882 sec, and warnIfPerfScore > 1.3, and perfScore=0.930121]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 40.6015 secs, and comparison 6.25281 sec, and warnIfPerfScore > 0.3, and perfScore=0.154004]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.92189 secs, and comparison 9.63462 sec, and warnIfPerfScore > 1.5, and perfScore=1.62695]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.82564 secs, and comparison 2.76415 sec, and warnIfPerfScore > 0.55, and perfScore=0.404966]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.611016 sec, and warnIfPerfScore > 0.1, and perfScore=0.0407344]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.82202 sec, and warnIfPerfScore > 0.5, and perfScore=0.188134]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.13925 secs, and comparison 8.01545 sec, and warnIfPerfScore > 2, and perfScore=1.12273]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.04922 secs, and comparison 14.3187 sec, and warnIfPerfScore > 3.6, and perfScore=2.03125]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 21 seconds]]]

Succeeded
