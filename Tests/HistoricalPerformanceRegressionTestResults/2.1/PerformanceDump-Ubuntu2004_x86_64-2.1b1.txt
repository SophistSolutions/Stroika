Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jun  7 8:55:30 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.33744 secs, and comparison 4.58843 sec, and warnIfPerfScore > 0.62, and perfScore=0.85967]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.32118 secs, and comparison 2.94169 sec, and warnIfPerfScore > 0.5, and perfScore=0.552826]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.34286 secs, and comparison 6.90543 sec, and warnIfPerfScore > 1.05, and perfScore=1.08869]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.73685 secs, and comparison 3.52393 sec, and warnIfPerfScore > 0.48, and perfScore=0.943021]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.44759 secs, and comparison 4.06016 sec, and warnIfPerfScore > 0.57, and perfScore=0.91289]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.27919 secs, and comparison 16.6037 sec, and warnIfPerfScore > 2.9, and perfScore=5.06336]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 3.83155 secs, and comparison 17.414 sec, and warnIfPerfScore > 2.9, and perfScore=4.54489]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.47339 secs, and comparison 56.8446 sec, and warnIfPerfScore > 9.7, and perfScore=10.3856]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.0288 secs, and comparison 9.39977 sec, and warnIfPerfScore > 1.6, and perfScore=1.86919]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.8945 secs, and comparison 5.48374 sec, and warnIfPerfScore > 1.5, and perfScore=0.930314]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.74445 secs, and comparison 10.4234 sec, and warnIfPerfScore > 2.1, and perfScore=3.798]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 4.18219 secs, and comparison 3.30671 sec, and warnIfPerfScore > 1.3, and perfScore=0.790664]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.54093 secs, and comparison 1.54689 sec, and warnIfPerfScore > 0.23, and perfScore=0.340654]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.98831 secs, and comparison 4.71845 sec, and warnIfPerfScore > 1.3, and perfScore=1.18307]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.17606 secs, and comparison 7.82941 sec, and warnIfPerfScore > 1.2, and perfScore=2.46514]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15.7745 secs, and comparison 1.59972 sec, and warnIfPerfScore > 0.33, and perfScore=0.101412]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.04997 secs, and comparison 40.7756 sec, and warnIfPerfScore > 6, and perfScore=13.3692]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.0169 secs, and comparison 3.80305 sec, and warnIfPerfScore > 0.5, and perfScore=0.345201]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.36172 secs, and comparison 36.9703 sec, and warnIfPerfScore > 4.4, and perfScore=8.47607]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.594 secs, and comparison 3.77274 sec, and warnIfPerfScore > 0.6, and perfScore=0.299566]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.11395 secs, and comparison 13.3507 sec, and warnIfPerfScore > 1.5, and perfScore=1.8767]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.93949 secs, and comparison 2.0915 sec, and warnIfPerfScore > 0.55, and perfScore=0.301391]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.074
	DETAILS:         	[baseline test 15 secs, and comparison 1.10631 sec, and warnIfPerfScore > 0.25, and perfScore=0.0737539]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.80604 sec, and warnIfPerfScore > 0.5, and perfScore=0.253736]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 31 seconds]]]

Succeeded
