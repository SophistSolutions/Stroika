Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 6::24 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.92858 secs, and comparison 4.28088 sec, and warnIfPerfScore > 0.65, and perfScore=0.617858]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.94193 secs, and comparison 2.84699 sec, and warnIfPerfScore > 0.5, and perfScore=0.410115]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.43799 secs, and comparison 7.71055 sec, and warnIfPerfScore > 1.05, and perfScore=0.913791]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.95555 secs, and comparison 7.46363 sec, and warnIfPerfScore > 1.15, and perfScore=1.07305]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.72363 secs, and comparison 2.34616 sec, and warnIfPerfScore > 0.48, and perfScore=0.303763]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.37819 secs, and comparison 2.82432 sec, and warnIfPerfScore > 0.57, and perfScore=0.382793]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.96125 secs, and comparison 20.5232 sec, and warnIfPerfScore > 2.9, and perfScore=2.57789]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.16997 secs, and comparison 20.8563 sec, and warnIfPerfScore > 2.9, and perfScore=2.5528]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.71467 secs, and comparison 138.831 sec, and warnIfPerfScore > 24, and perfScore=17.9958]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.98802 secs, and comparison 10.9882 sec, and warnIfPerfScore > 1.7, and perfScore=1.57243]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.91879 secs, and comparison 7.72151 sec, and warnIfPerfScore > 1.5, and perfScore=0.975087]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.74162 secs, and comparison 13.4004 sec, and warnIfPerfScore > 2.1, and perfScore=1.98772]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.49449 secs, and comparison 7.65569 sec, and warnIfPerfScore > 1.6, and perfScore=0.901253]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 8.92946 secs, and comparison 1.30634 sec, and warnIfPerfScore > 0.23, and perfScore=0.146296]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.861 secs, and comparison 12.9934 sec, and warnIfPerfScore > 1.3, and perfScore=1.01029]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.86121 secs, and comparison 5.19693 sec, and warnIfPerfScore > 1.2, and perfScore=0.527008]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.87572 secs, and comparison 1.53274 sec, and warnIfPerfScore > 0.33, and perfScore=0.26086]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.53982 secs, and comparison 39.1426 sec, and warnIfPerfScore > 6, and perfScore=4.10308]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.5032 secs, and comparison 5.0795 sec, and warnIfPerfScore > 0.8, and perfScore=0.534504]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.66392 secs, and comparison 9.06505 sec, and warnIfPerfScore > 1.4, and perfScore=0.938031]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.00144 secs, and comparison 3.41116 sec, and warnIfPerfScore > 0.65, and perfScore=0.56839]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.59378 secs, and comparison 37.2933 sec, and warnIfPerfScore > 4.4, and perfScore=3.88723]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.1698 secs, and comparison 3.46156 sec, and warnIfPerfScore > 0.6, and perfScore=0.561049]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.16341 secs, and comparison 3.40661 sec, and warnIfPerfScore > 0.6, and perfScore=0.552715]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.09226 secs, and comparison 3.49401 sec, and warnIfPerfScore > 0.6, and perfScore=0.573516]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.23378 secs, and comparison 4.73449 sec, and warnIfPerfScore > 1.3, and perfScore=0.759488]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.62376 secs, and comparison 8.35286 sec, and warnIfPerfScore > 1.3, and perfScore=1.26104]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.4884 secs, and comparison 5.82518 sec, and warnIfPerfScore > 0.3, and perfScore=0.130937]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.02789 secs, and comparison 11.6373 sec, and warnIfPerfScore > 1.5, and perfScore=1.44961]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 7.1009 secs, and comparison 3.72919 sec, and warnIfPerfScore > 0.55, and perfScore=0.525172]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 15 secs, and comparison 0.902419 sec, and warnIfPerfScore > 0.1, and perfScore=0.0601613]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.19114 sec, and warnIfPerfScore > 0.5, and perfScore=0.212742]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.05216 secs, and comparison 8.75997 sec, and warnIfPerfScore > 2, and perfScore=1.0879]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.15302 secs, and comparison 29.6036 sec, and warnIfPerfScore > 3.6, and perfScore=3.2343]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 19 seconds]]]

Succeeded
