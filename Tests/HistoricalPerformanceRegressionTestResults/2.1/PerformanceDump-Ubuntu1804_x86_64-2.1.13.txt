Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 20 19:21:52 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.47637 secs, and comparison 4.84085 sec, and warnIfPerfScore > 0.65, and perfScore=0.647487]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.99807 secs, and comparison 4.15068 sec, and warnIfPerfScore > 0.5, and perfScore=0.593117]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.95994 secs, and comparison 8.09183 sec, and warnIfPerfScore > 1.05, and perfScore=1.01657]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.17703 secs, and comparison 7.95301 sec, and warnIfPerfScore > 1.15, and perfScore=1.10812]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.51403 secs, and comparison 2.95297 sec, and warnIfPerfScore > 0.48, and perfScore=0.453324]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 5.88206 secs, and comparison 3.84401 sec, and warnIfPerfScore > 0.57, and perfScore=0.653515]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 4.61984 secs, and comparison 19.3172 sec, and warnIfPerfScore > 2.9, and perfScore=4.18134]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.56386 secs, and comparison 19.5752 sec, and warnIfPerfScore > 2.9, and perfScore=2.58799]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 5.22404 secs, and comparison 66.0844 sec, and warnIfPerfScore > 24, and perfScore=12.6501]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.3759 secs, and comparison 10.8619 sec, and warnIfPerfScore > 1.7, and perfScore=1.47262]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.46315 secs, and comparison 7.53172 sec, and warnIfPerfScore > 1.5, and perfScore=0.889944]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 3.07929 secs, and comparison 13.015 sec, and warnIfPerfScore > 2.1, and perfScore=4.22662]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.91885 secs, and comparison 7.90172 sec, and warnIfPerfScore > 1.6, and perfScore=0.997836]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 5.13417 secs, and comparison 1.91386 sec, and warnIfPerfScore > 0.23, and perfScore=0.37277]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.63577 secs, and comparison 5.00863 sec, and warnIfPerfScore > 1.3, and perfScore=1.08043]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.36232 secs, and comparison 7.24944 sec, and warnIfPerfScore > 1.2, and perfScore=1.66183]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 24.016 secs, and comparison 3.54712 sec, and warnIfPerfScore > 0.33, and perfScore=0.147698]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 5.56768 secs, and comparison 43.8033 sec, and warnIfPerfScore > 6, and perfScore=7.86742]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.21313 secs, and comparison 11.9717 sec, and warnIfPerfScore > 0.8, and perfScore=2.29645]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 3.36373 secs, and comparison 10.3137 sec, and warnIfPerfScore > 1.4, and perfScore=3.06616]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15.4578 secs, and comparison 3.91267 sec, and warnIfPerfScore > 0.65, and perfScore=0.25312]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.26889 secs, and comparison 40.4442 sec, and warnIfPerfScore > 4.4, and perfScore=4.89113]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 23.8865 secs, and comparison 4.09089 sec, and warnIfPerfScore > 0.6, and perfScore=0.171263]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 23.1463 secs, and comparison 4.30697 sec, and warnIfPerfScore > 0.6, and perfScore=0.186076]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 20.1098 secs, and comparison 4.28796 sec, and warnIfPerfScore > 0.6, and perfScore=0.213227]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 21.2445 secs, and comparison 5.37658 sec, and warnIfPerfScore > 1.3, and perfScore=0.253081]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 24.9273 secs, and comparison 11.1668 sec, and warnIfPerfScore > 1.3, and perfScore=0.447976]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 20.4861 secs, and comparison 7.26111 sec, and warnIfPerfScore > 0.3, and perfScore=0.354441]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.0327 secs, and comparison 14.361 sec, and warnIfPerfScore > 1.5, and perfScore=1.43142]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.03355 secs, and comparison 3.12878 sec, and warnIfPerfScore > 0.55, and perfScore=0.346351]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.61674 sec, and warnIfPerfScore > 0.1, and perfScore=0.107783]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.91908 sec, and warnIfPerfScore > 0.5, and perfScore=0.327939]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 35 seconds]]]

Succeeded
