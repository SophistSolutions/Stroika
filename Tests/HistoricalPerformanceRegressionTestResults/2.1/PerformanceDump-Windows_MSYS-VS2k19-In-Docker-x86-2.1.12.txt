Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 22:14:7 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 8.28625 secs, and comparison 4.56721 sec, and warnIfPerfScore > 0.65, and perfScore=0.551179]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.19845 secs, and comparison 2.80867 sec, and warnIfPerfScore > 0.5, and perfScore=0.390178]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.13774 secs, and comparison 7.82023 sec, and warnIfPerfScore > 1.05, and perfScore=0.855816]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.25606 secs, and comparison 7.7327 sec, and warnIfPerfScore > 1.15, and perfScore=1.06569]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.37402 secs, and comparison 2.32453 sec, and warnIfPerfScore > 0.48, and perfScore=0.277588]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.31927 secs, and comparison 2.76152 sec, and warnIfPerfScore > 0.57, and perfScore=0.331943]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.86466 secs, and comparison 21.5728 sec, and warnIfPerfScore > 2.9, and perfScore=2.43357]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.68529 secs, and comparison 22.0165 sec, and warnIfPerfScore > 2.9, and perfScore=2.27319]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.11549 secs, and comparison 158.86 sec, and warnIfPerfScore > 24, and perfScore=17.4274]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.11433 secs, and comparison 11.1765 sec, and warnIfPerfScore > 1.7, and perfScore=1.37738]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.79117 secs, and comparison 8.79987 sec, and warnIfPerfScore > 1.5, and perfScore=1.00099]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.28275 secs, and comparison 13.0615 sec, and warnIfPerfScore > 2.1, and perfScore=1.57696]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 10.4761 secs, and comparison 8.33229 sec, and warnIfPerfScore > 1.6, and perfScore=0.79536]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.9856 secs, and comparison 1.446 sec, and warnIfPerfScore > 0.23, and perfScore=0.131626]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.9061 secs, and comparison 13.9261 sec, and warnIfPerfScore > 1.3, and perfScore=1.00144]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.8808 secs, and comparison 5.97154 sec, and warnIfPerfScore > 1.2, and perfScore=0.548814]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.70914 secs, and comparison 1.59392 sec, and warnIfPerfScore > 0.33, and perfScore=0.237575]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.1074 secs, and comparison 40.9968 sec, and warnIfPerfScore > 6, and perfScore=4.05611]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.1418 secs, and comparison 5.49858 sec, and warnIfPerfScore > 0.8, and perfScore=0.542172]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.98697 secs, and comparison 10.0781 sec, and warnIfPerfScore > 1.4, and perfScore=1.00912]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.56104 secs, and comparison 3.5416 sec, and warnIfPerfScore > 0.65, and perfScore=0.539792]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.3864 secs, and comparison 37.3035 sec, and warnIfPerfScore > 4.4, and perfScore=3.59156]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.5032 secs, and comparison 3.54762 sec, and warnIfPerfScore > 0.6, and perfScore=0.545519]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.55602 secs, and comparison 3.47324 sec, and warnIfPerfScore > 0.6, and perfScore=0.529778]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.50677 secs, and comparison 3.48063 sec, and warnIfPerfScore > 0.6, and perfScore=0.534924]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.55455 secs, and comparison 5.11478 sec, and warnIfPerfScore > 1.3, and perfScore=0.780341]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.05167 secs, and comparison 9.04935 sec, and warnIfPerfScore > 1.3, and perfScore=1.28329]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.4475 secs, and comparison 5.95363 sec, and warnIfPerfScore > 0.3, and perfScore=0.122888]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.7052 secs, and comparison 12.2614 sec, and warnIfPerfScore > 1.5, and perfScore=1.40852]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.83033 secs, and comparison 2.89632 sec, and warnIfPerfScore > 0.55, and perfScore=0.369885]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.820892 sec, and warnIfPerfScore > 0.1, and perfScore=0.0547261]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.02331 sec, and warnIfPerfScore > 0.5, and perfScore=0.201554]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 8.24423 secs, and comparison 18.4418 sec, and warnIfPerfScore > 2, and perfScore=2.23694]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2 and got 2.23694}}}

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.63911 secs, and comparison 30.0723 sec, and warnIfPerfScore > 3.6, and perfScore=3.11982]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 33 seconds]]]

Succeeded
