Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 19 13:12:14 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.7869 secs, and comparison 4.1801 sec, and warnIfPerfScore > 0.65, and perfScore=0.615907]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.81379 secs, and comparison 2.75632 sec, and warnIfPerfScore > 0.5, and perfScore=0.404522]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 8.62219 secs, and comparison 7.1982 sec, and warnIfPerfScore > 1.05, and perfScore=0.834846]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.56773 secs, and comparison 7.19899 sec, and warnIfPerfScore > 1.15, and perfScore=1.09612]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.68055 secs, and comparison 2.19322 sec, and warnIfPerfScore > 0.48, and perfScore=0.285555]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.65396 secs, and comparison 2.66193 sec, and warnIfPerfScore > 0.57, and perfScore=0.347785]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.63421 secs, and comparison 19.8918 sec, and warnIfPerfScore > 2.9, and perfScore=2.30384]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.77533 secs, and comparison 20.6914 sec, and warnIfPerfScore > 2.9, and perfScore=2.35791]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.29865 secs, and comparison 139.907 sec, and warnIfPerfScore > 24, and perfScore=16.859]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.24786 secs, and comparison 10.4011 sec, and warnIfPerfScore > 1.7, and perfScore=1.43506]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.63912 secs, and comparison 7.65683 sec, and warnIfPerfScore > 1.5, and perfScore=1.00232]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.07951 secs, and comparison 12.1711 sec, and warnIfPerfScore > 2.1, and perfScore=1.71919]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.00697 secs, and comparison 7.31245 sec, and warnIfPerfScore > 1.6, and perfScore=0.811866]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.49021 secs, and comparison 1.29626 sec, and warnIfPerfScore > 0.23, and perfScore=0.136589]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.341 secs, and comparison 12.3776 sec, and warnIfPerfScore > 1.3, and perfScore=1.00297]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.66785 secs, and comparison 5.17669 sec, and warnIfPerfScore > 1.2, and perfScore=0.535454]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.87631 secs, and comparison 1.46259 sec, and warnIfPerfScore > 0.33, and perfScore=0.248896]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.23458 secs, and comparison 37.9943 sec, and warnIfPerfScore > 6, and perfScore=4.11435]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.24995 secs, and comparison 5.17335 sec, and warnIfPerfScore > 0.8, and perfScore=0.559284]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.24001 secs, and comparison 9.3493 sec, and warnIfPerfScore > 1.4, and perfScore=1.01183]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.94225 secs, and comparison 3.31949 sec, and warnIfPerfScore > 0.65, and perfScore=0.558626]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.56866 secs, and comparison 35.6357 sec, and warnIfPerfScore > 4.4, and perfScore=3.72421]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.09982 secs, and comparison 3.30171 sec, and warnIfPerfScore > 0.6, and perfScore=0.54128]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.09975 secs, and comparison 3.30109 sec, and warnIfPerfScore > 0.6, and perfScore=0.541185]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.096 secs, and comparison 3.31201 sec, and warnIfPerfScore > 0.6, and perfScore=0.543309]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.02724 secs, and comparison 4.75642 sec, and warnIfPerfScore > 1.3, and perfScore=0.789154]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.5342 secs, and comparison 8.26325 sec, and warnIfPerfScore > 1.3, and perfScore=1.26462]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 43.6331 secs, and comparison 5.60553 sec, and warnIfPerfScore > 0.3, and perfScore=0.12847]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.51463 secs, and comparison 11.8705 sec, and warnIfPerfScore > 1.5, and perfScore=1.39413]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.11664 secs, and comparison 2.82662 sec, and warnIfPerfScore > 0.55, and perfScore=0.397184]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.802571 sec, and warnIfPerfScore > 0.1, and perfScore=0.0535047]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.90677 sec, and warnIfPerfScore > 0.5, and perfScore=0.193785]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.0892 secs, and comparison 13.5434 sec, and warnIfPerfScore > 2, and perfScore=1.67426]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.31082 secs, and comparison 27.5594 sec, and warnIfPerfScore > 3.6, and perfScore=2.95993]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 13 seconds]]]

Succeeded
