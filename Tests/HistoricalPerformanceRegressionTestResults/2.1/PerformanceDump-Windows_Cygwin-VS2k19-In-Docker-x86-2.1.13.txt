Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Apr  9 22:34:48 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.96741 secs, and comparison 4.23957 sec, and warnIfPerfScore > 0.65, and perfScore=0.608486]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.45716 secs, and comparison 2.79728 sec, and warnIfPerfScore > 0.5, and perfScore=0.375114]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.50127 secs, and comparison 7.28482 sec, and warnIfPerfScore > 1.05, and perfScore=0.85691]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.61644 secs, and comparison 7.36223 sec, and warnIfPerfScore > 1.15, and perfScore=1.11272]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.89903 secs, and comparison 2.22726 sec, and warnIfPerfScore > 0.48, and perfScore=0.281966]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.04797 secs, and comparison 2.72094 sec, and warnIfPerfScore > 0.57, and perfScore=0.33809]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.85182 secs, and comparison 20.1777 sec, and warnIfPerfScore > 2.9, and perfScore=2.2795]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.92495 secs, and comparison 20.8031 sec, and warnIfPerfScore > 2.9, and perfScore=2.3309]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.59168 secs, and comparison 145.832 sec, and warnIfPerfScore > 24, and perfScore=16.9737]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.94296 secs, and comparison 10.5691 sec, and warnIfPerfScore > 1.7, and perfScore=1.33063]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.7994 secs, and comparison 7.94603 sec, and warnIfPerfScore > 1.5, and perfScore=1.0188]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.0868 secs, and comparison 12.2584 sec, and warnIfPerfScore > 2.1, and perfScore=1.72976]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.69254 secs, and comparison 7.40084 sec, and warnIfPerfScore > 1.6, and perfScore=0.763561]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.42883 secs, and comparison 1.26455 sec, and warnIfPerfScore > 0.23, and perfScore=0.134115]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.6248 secs, and comparison 12.5574 sec, and warnIfPerfScore > 1.3, and perfScore=0.994661]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.69713 secs, and comparison 5.45687 sec, and warnIfPerfScore > 1.2, and perfScore=0.56273]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.94769 secs, and comparison 1.47903 sec, and warnIfPerfScore > 0.33, and perfScore=0.248673]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.29457 secs, and comparison 38.7029 sec, and warnIfPerfScore > 6, and perfScore=4.16403]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.29723 secs, and comparison 5.12834 sec, and warnIfPerfScore > 0.8, and perfScore=0.551598]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.32063 secs, and comparison 9.81194 sec, and warnIfPerfScore > 1.4, and perfScore=1.05271]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.94538 secs, and comparison 3.39285 sec, and warnIfPerfScore > 0.65, and perfScore=0.57067]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.65203 secs, and comparison 36.5778 sec, and warnIfPerfScore > 4.4, and perfScore=3.78965]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.13512 secs, and comparison 3.34934 sec, and warnIfPerfScore > 0.6, and perfScore=0.545929]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.16615 secs, and comparison 3.33819 sec, and warnIfPerfScore > 0.6, and perfScore=0.541373]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.15285 secs, and comparison 3.69256 sec, and warnIfPerfScore > 0.6, and perfScore=0.600138]
	                 	Collection_stdforward_list<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.600138}}}

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.3354 secs, and comparison 4.73081 sec, and warnIfPerfScore > 1.3, and perfScore=0.746726]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.68289 secs, and comparison 8.27476 sec, and warnIfPerfScore > 1.3, and perfScore=1.2382]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.6838 secs, and comparison 5.64286 sec, and warnIfPerfScore > 0.3, and perfScore=0.12352]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.26971 secs, and comparison 12.1261 sec, and warnIfPerfScore > 1.5, and perfScore=1.46633]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.90381 secs, and comparison 2.77647 sec, and warnIfPerfScore > 0.55, and perfScore=0.402165]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.779036 sec, and warnIfPerfScore > 0.1, and perfScore=0.0519357]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.97037 sec, and warnIfPerfScore > 0.5, and perfScore=0.198024]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.88954 secs, and comparison 17.2312 sec, and warnIfPerfScore > 2, and perfScore=2.18405]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2 and got 2.18405}}}

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.26607 secs, and comparison 27.9646 sec, and warnIfPerfScore > 3.6, and perfScore=3.01796]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 40 seconds]]]

Succeeded
