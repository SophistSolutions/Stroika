Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jun  7 9:36:19 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.63256 secs, and comparison 4.57133 sec, and warnIfPerfScore > 0.62, and perfScore=0.811591]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.34603 secs, and comparison 2.92438 sec, and warnIfPerfScore > 0.5, and perfScore=0.547019]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.22992 secs, and comparison 6.88102 sec, and warnIfPerfScore > 1.05, and perfScore=1.10451]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.72915 secs, and comparison 3.4808 sec, and warnIfPerfScore > 0.48, and perfScore=0.933403]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.40838 secs, and comparison 4.06018 sec, and warnIfPerfScore > 0.57, and perfScore=0.921015]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.33796 secs, and comparison 16.555 sec, and warnIfPerfScore > 2.9, and perfScore=4.95961]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 3.91135 secs, and comparison 17.335 sec, and warnIfPerfScore > 2.9, and perfScore=4.43198]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.30228 secs, and comparison 56.5213 sec, and warnIfPerfScore > 9.7, and perfScore=10.6598]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.02984 secs, and comparison 9.35464 sec, and warnIfPerfScore > 1.6, and perfScore=1.85983]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.64583 secs, and comparison 5.55394 sec, and warnIfPerfScore > 1.5, and perfScore=0.983725]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.77657 secs, and comparison 10.3974 sec, and warnIfPerfScore > 2.1, and perfScore=3.74471]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.09524 secs, and comparison 3.34092 sec, and warnIfPerfScore > 1.3, and perfScore=0.815805]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.27144 secs, and comparison 1.52489 sec, and warnIfPerfScore > 0.23, and perfScore=0.356997]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.07254 secs, and comparison 4.69524 sec, and warnIfPerfScore > 1.3, and perfScore=1.1529]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.21305 secs, and comparison 7.09998 sec, and warnIfPerfScore > 1.2, and perfScore=2.20973]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15.643 secs, and comparison 1.61556 sec, and warnIfPerfScore > 0.33, and perfScore=0.103277]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.14499 secs, and comparison 40.3714 sec, and warnIfPerfScore > 6, and perfScore=12.8368]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.7592 secs, and comparison 3.77807 sec, and warnIfPerfScore > 0.5, and perfScore=0.351146]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.3709 secs, and comparison 36.6878 sec, and warnIfPerfScore > 4.4, and perfScore=8.39364]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.3954 secs, and comparison 3.70714 sec, and warnIfPerfScore > 0.6, and perfScore=0.299075]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.97061 secs, and comparison 13.7181 sec, and warnIfPerfScore > 1.5, and perfScore=1.96799]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.07511 secs, and comparison 2.07421 sec, and warnIfPerfScore > 0.55, and perfScore=0.29317]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 15 secs, and comparison 1.09848 sec, and warnIfPerfScore > 0.25, and perfScore=0.0732318]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.80364 sec, and warnIfPerfScore > 0.5, and perfScore=0.253576]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 29 seconds]]]

Succeeded
