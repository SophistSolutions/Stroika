Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 10 4:53:44 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.9955 secs, and comparison 5.36215 sec, and warnIfPerfScore > 0.62, and perfScore=0.48767]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.9595 secs, and comparison 3.55625 sec, and warnIfPerfScore > 0.5, and perfScore=0.237724]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.0102 secs, and comparison 9.75064 sec, and warnIfPerfScore > 1.05, and perfScore=0.885604]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.58835 secs, and comparison 3.80216 sec, and warnIfPerfScore > 0.48, and perfScore=0.39654]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.64268 secs, and comparison 4.08464 sec, and warnIfPerfScore > 0.55, and perfScore=0.4236]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.5913 secs, and comparison 26.4489 sec, and warnIfPerfScore > 2.9, and perfScore=2.49723]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.0396 secs, and comparison 28.5839 sec, and warnIfPerfScore > 2.9, and perfScore=2.58921]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 10.6796 secs, and comparison 93.7577 sec, and warnIfPerfScore > 9.7, and perfScore=8.77911]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.9704 secs, and comparison 13.2659 sec, and warnIfPerfScore > 1.6, and perfScore=1.20925]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2944 secs, and comparison 13.9565 sec, and warnIfPerfScore > 1.5, and perfScore=1.13519]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.62941 secs, and comparison 14.256 sec, and warnIfPerfScore > 2.1, and perfScore=1.65202]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.6289 secs, and comparison 9.74402 sec, and warnIfPerfScore > 1.3, and perfScore=0.837912]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 11.994 secs, and comparison 1.71587 sec, and warnIfPerfScore > 0.18, and perfScore=0.143061]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.5024 secs, and comparison 15.3413 sec, and warnIfPerfScore > 1.3, and perfScore=1.33375]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.33375}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.56699 secs, and comparison 8.66987 sec, and warnIfPerfScore > 1.2, and perfScore=0.906228]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.86951 secs, and comparison 2.24001 sec, and warnIfPerfScore > 0.33, and perfScore=0.226962]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.27989 secs, and comparison 46.6284 sec, and warnIfPerfScore > 6, and perfScore=5.02468]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.0098 secs, and comparison 4.14358 sec, and warnIfPerfScore > 0.5, and perfScore=0.413951]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.3388 secs, and comparison 42.0775 sec, and warnIfPerfScore > 4.4, and perfScore=4.06988]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.589 secs, and comparison 4.60326 sec, and warnIfPerfScore > 0.6, and perfScore=0.43472]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.5527 secs, and comparison 18.6692 sec, and warnIfPerfScore > 1.5, and perfScore=1.28287]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.0508 secs, and comparison 4.7472 sec, and warnIfPerfScore > 0.55, and perfScore=0.33786]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42703 sec, and warnIfPerfScore > 0.25, and perfScore=0.0951356]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.93992 sec, and warnIfPerfScore > 0.5, and perfScore=0.329328]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.058 secs, and comparison 17.7374 sec, and warnIfPerfScore > 1.9, and perfScore=1.60404]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8808 secs, and comparison 32.3876 sec, and warnIfPerfScore > 3, and perfScore=2.72605]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 41 seconds]]]

Failed
