Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Aug 13 23:17:17 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 12.3865 secs, and comparison 7.39435 sec, and warnIfPerfScore > 0.62, and perfScore=0.59697]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.2039 secs, and comparison 4.31465 sec, and warnIfPerfScore > 0.5, and perfScore=0.353546]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 14.9106 secs, and comparison 12.5559 sec, and warnIfPerfScore > 1.05, and perfScore=0.842076]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 89.6373 secs, and comparison 5.44712 sec, and warnIfPerfScore > 0.48, and perfScore=0.0607684]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 85.3886 secs, and comparison 5.99664 sec, and warnIfPerfScore > 0.57, and perfScore=0.0702277]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 110.984 secs, and comparison 35.4917 sec, and warnIfPerfScore > 2.9, and perfScore=0.319791]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 120.435 secs, and comparison 39.4835 sec, and warnIfPerfScore > 2.9, and perfScore=0.327842]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 47.6018 secs, and comparison 135.968 sec, and warnIfPerfScore > 9.7, and perfScore=2.85635]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 150.194 secs, and comparison 16.0962 sec, and warnIfPerfScore > 1.6, and perfScore=0.107169]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 20.445 secs, and comparison 18.1453 sec, and warnIfPerfScore > 1.5, and perfScore=0.887517]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 170.769 secs, and comparison 16.335 sec, and warnIfPerfScore > 2.1, and perfScore=0.0956555]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 17.4333 secs, and comparison 25.7455 sec, and warnIfPerfScore > 1.3, and perfScore=1.4768]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.4768}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 20.4514 secs, and comparison 2.66941 sec, and warnIfPerfScore > 0.23, and perfScore=0.130525]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 19.5236 secs, and comparison 17.9849 sec, and warnIfPerfScore > 1.3, and perfScore=0.921189]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 23.9452 secs, and comparison 11.1407 sec, and warnIfPerfScore > 1.2, and perfScore=0.465255]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 14.9733 secs, and comparison 2.67694 sec, and warnIfPerfScore > 0.33, and perfScore=0.178782]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 21.9825 secs, and comparison 57.9552 sec, and warnIfPerfScore > 6, and perfScore=2.63643]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.9095 secs, and comparison 5.58236 sec, and warnIfPerfScore > 0.5, and perfScore=0.350882]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 24.1123 secs, and comparison 50.6678 sec, and warnIfPerfScore > 4.4, and perfScore=2.10132]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.5819 secs, and comparison 5.83643 sec, and warnIfPerfScore > 0.6, and perfScore=0.374564]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.7781 secs, and comparison 29.1001 sec, and warnIfPerfScore > 1.5, and perfScore=1.33621]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 14.872 secs, and comparison 5.43173 sec, and warnIfPerfScore > 0.55, and perfScore=0.365232]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.21782 sec, and warnIfPerfScore > 0.25, and perfScore=0.147855]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15 secs, and comparison 5.99045 sec, and warnIfPerfScore > 0.5, and perfScore=0.399363]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 15.4409 secs, and comparison 26.6608 sec, and warnIfPerfScore > 2, and perfScore=1.72663]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 16.0178 secs, and comparison 236.072 sec, and warnIfPerfScore > 3.1, and perfScore=14.7381]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 14.7381}}}

[[[Tests took: 31 minutes, 25 seconds]]]

Succeeded
