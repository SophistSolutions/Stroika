Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  8 11:34:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.92995 secs, and comparison 6.2483 sec, and warnIfPerfScore > 0.65, and perfScore=0.699702]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.2791 secs, and comparison 4.5238 sec, and warnIfPerfScore > 0.5, and perfScore=0.440099]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 20.7749 secs, and comparison 13.0142 sec, and warnIfPerfScore > 1.05, and perfScore=0.626437]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.854 secs, and comparison 13.8782 sec, and warnIfPerfScore > 1.15, and perfScore=1.07968]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 41.4871 secs, and comparison 5.32098 sec, and warnIfPerfScore > 0.48, and perfScore=0.128256]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 32.557 secs, and comparison 5.82766 sec, and warnIfPerfScore > 0.57, and perfScore=0.178999]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.1099 secs, and comparison 40.4797 sec, and warnIfPerfScore > 2.9, and perfScore=1.83084]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 25.0038 secs, and comparison 43.0678 sec, and warnIfPerfScore > 2.9, and perfScore=1.72245]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 21.4285 secs, and comparison 138.293 sec, and warnIfPerfScore > 24, and perfScore=6.45369]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 22.198 secs, and comparison 16.1565 sec, and warnIfPerfScore > 1.7, and perfScore=0.727837]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.4134 secs, and comparison 6.8966 sec, and warnIfPerfScore > 1.5, and perfScore=0.662279]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.7853 secs, and comparison 20.1259 sec, and warnIfPerfScore > 2.1, and perfScore=1.19902]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 13.6956 secs, and comparison 7.15992 sec, and warnIfPerfScore > 1.6, and perfScore=0.522789]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 13.4588 secs, and comparison 1.13587 sec, and warnIfPerfScore > 0.23, and perfScore=0.0843958]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.0374 secs, and comparison 19.4437 sec, and warnIfPerfScore > 1.3, and perfScore=1.02134]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.6416 secs, and comparison 16.0729 sec, and warnIfPerfScore > 1.2, and perfScore=1.17823]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.40029 secs, and comparison 2.08416 sec, and warnIfPerfScore > 0.33, and perfScore=0.221712]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 12.477 secs, and comparison 56.7281 sec, and warnIfPerfScore > 6, and perfScore=4.54663]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.6547 secs, and comparison 15.1714 sec, and warnIfPerfScore > 0.8, and perfScore=1.19887]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.5328 secs, and comparison 17.4144 sec, and warnIfPerfScore > 1.4, and perfScore=1.28683]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.42735 secs, and comparison 4.83209 sec, and warnIfPerfScore > 0.65, and perfScore=0.51256]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 17.6816 secs, and comparison 51.6807 sec, and warnIfPerfScore > 4.4, and perfScore=2.92285]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.3845 secs, and comparison 4.81515 sec, and warnIfPerfScore > 0.6, and perfScore=0.463688]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.1535 secs, and comparison 4.82917 sec, and warnIfPerfScore > 0.6, and perfScore=0.475615]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.02533 secs, and comparison 4.69826 sec, and warnIfPerfScore > 0.6, and perfScore=0.520564]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.34223 secs, and comparison 5.69515 sec, and warnIfPerfScore > 1.3, and perfScore=0.609613]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.55083 secs, and comparison 15.3909 sec, and warnIfPerfScore > 1.3, and perfScore=1.61147]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 145.736 secs, and comparison 8.44525 sec, and warnIfPerfScore > 0.3, and perfScore=0.0579488]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 33.2854 secs, and comparison 39.3529 sec, and warnIfPerfScore > 1.5, and perfScore=1.18229]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.87842 secs, and comparison 5.46566 sec, and warnIfPerfScore > 0.55, and perfScore=0.615612]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.17173 sec, and warnIfPerfScore > 0.1, and perfScore=0.478115]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.7598 sec, and warnIfPerfScore > 0.5, and perfScore=0.183986]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 28 seconds]]]

Succeeded
