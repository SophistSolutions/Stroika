Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 21 5:29:5 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.50283 secs, and comparison 4.63335 sec, and warnIfPerfScore > 0.62, and perfScore=0.617547]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.39129 secs, and comparison 3.75572 sec, and warnIfPerfScore > 0.5, and perfScore=0.508128]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.58706 secs, and comparison 10.3227 sec, and warnIfPerfScore > 1.05, and perfScore=1.36056]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 4.895 secs, and comparison 3.86275 sec, and warnIfPerfScore > 0.48, and perfScore=0.789122]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 5.11537 secs, and comparison 4.547 sec, and warnIfPerfScore > 0.57, and perfScore=0.888891]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 3.37832 secs, and comparison 21.4772 sec, and warnIfPerfScore > 2.9, and perfScore=6.35737]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 6.14621 secs, and comparison 23.6769 sec, and warnIfPerfScore > 2.9, and perfScore=3.85227]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 5.37496 secs, and comparison 64.0727 sec, and warnIfPerfScore > 9.7, and perfScore=11.9206]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.92138 secs, and comparison 10.465 sec, and warnIfPerfScore > 1.6, and perfScore=2.12642]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.82416 secs, and comparison 5.61462 sec, and warnIfPerfScore > 1.5, and perfScore=0.964023]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 2.8066 secs, and comparison 12.8222 sec, and warnIfPerfScore > 2.1, and perfScore=4.56859]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.54222 secs, and comparison 3.69277 sec, and warnIfPerfScore > 1.3, and perfScore=0.564452]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.27216 secs, and comparison 1.53445 sec, and warnIfPerfScore > 0.23, and perfScore=0.359174]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.70649 secs, and comparison 4.60944 sec, and warnIfPerfScore > 1.3, and perfScore=1.24361]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.14163 secs, and comparison 7.85831 sec, and warnIfPerfScore > 1.2, and perfScore=2.50134]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 16.5455 secs, and comparison 1.53402 sec, and warnIfPerfScore > 0.33, and perfScore=0.0927152]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.8
	DETAILS:         	[baseline test 4.49935 secs, and comparison 44.2829 sec, and warnIfPerfScore > 6, and perfScore=9.84206]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.3601 secs, and comparison 4.08117 sec, and warnIfPerfScore > 0.5, and perfScore=0.330189]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 5.45911 secs, and comparison 37.1517 sec, and warnIfPerfScore > 4.4, and perfScore=6.80546]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 13.0934 secs, and comparison 3.763 sec, and warnIfPerfScore > 0.6, and perfScore=0.287397]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.27334 secs, and comparison 14.1304 sec, and warnIfPerfScore > 1.5, and perfScore=1.94277]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.81351 secs, and comparison 2.96585 sec, and warnIfPerfScore > 0.55, and perfScore=0.336512]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.076
	DETAILS:         	[baseline test 15 secs, and comparison 1.13603 sec, and warnIfPerfScore > 0.25, and perfScore=0.0757351]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85321 sec, and warnIfPerfScore > 0.5, and perfScore=0.256881]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 33 seconds]]]

Succeeded
