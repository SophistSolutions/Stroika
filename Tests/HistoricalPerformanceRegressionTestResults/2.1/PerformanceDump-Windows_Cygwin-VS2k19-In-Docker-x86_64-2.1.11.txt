Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 24 2:21:41 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.51538 secs, and comparison 4.40002 sec, and warnIfPerfScore > 0.65, and perfScore=0.797773]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 5.77825 secs, and comparison 2.51461 sec, and warnIfPerfScore > 0.5, and perfScore=0.435186]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.26566 secs, and comparison 7.98736 sec, and warnIfPerfScore > 1.05, and perfScore=0.966331]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.23284 secs, and comparison 7.49842 sec, and warnIfPerfScore > 1.15, and perfScore=1.03672]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.3899 secs, and comparison 2.29912 sec, and warnIfPerfScore > 0.48, and perfScore=0.0668545]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 33.0301 secs, and comparison 3.01286 sec, and warnIfPerfScore > 0.57, and perfScore=0.0912157]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.62846 secs, and comparison 19.5679 sec, and warnIfPerfScore > 2.9, and perfScore=2.56512]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.29011 secs, and comparison 19.9536 sec, and warnIfPerfScore > 2.9, and perfScore=2.40691]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.56773 secs, and comparison 151.783 sec, and warnIfPerfScore > 24, and perfScore=23.1104]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.81666 secs, and comparison 10.7541 sec, and warnIfPerfScore > 1.7, and perfScore=1.57763]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.78183 secs, and comparison 6.51309 sec, and warnIfPerfScore > 1.5, and perfScore=0.960373]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.09678 secs, and comparison 12.4374 sec, and warnIfPerfScore > 2.1, and perfScore=2.04]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 8.14353 secs, and comparison 5.4455 sec, and warnIfPerfScore > 1.6, and perfScore=0.668691]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 8.89422 secs, and comparison 0.732122 sec, and warnIfPerfScore > 0.23, and perfScore=0.0823143]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2826 secs, and comparison 12.9211 sec, and warnIfPerfScore > 1.3, and perfScore=1.05198]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.52189 secs, and comparison 6.08425 sec, and warnIfPerfScore > 1.2, and perfScore=0.638975]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 8.97464 secs, and comparison 2.27793 sec, and warnIfPerfScore > 0.33, and perfScore=0.253819]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 8.78829 secs, and comparison 39.9833 sec, and warnIfPerfScore > 6, and perfScore=4.54961]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.81193 secs, and comparison 6.20018 sec, and warnIfPerfScore > 0.8, and perfScore=0.703613]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.0581 secs, and comparison 8.9256 sec, and warnIfPerfScore > 1.4, and perfScore=0.985371]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.19095 secs, and comparison 3.5784 sec, and warnIfPerfScore > 0.65, and perfScore=0.389339]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.76399 secs, and comparison 37.476 sec, and warnIfPerfScore > 4.4, and perfScore=3.83819]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.64614 secs, and comparison 3.65448 sec, and warnIfPerfScore > 0.6, and perfScore=0.378854]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.7574 secs, and comparison 3.45316 sec, and warnIfPerfScore > 0.6, and perfScore=0.394314]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.07001 secs, and comparison 3.56616 sec, and warnIfPerfScore > 0.6, and perfScore=0.393181]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.44916 secs, and comparison 5.78816 sec, and warnIfPerfScore > 1.3, and perfScore=0.612558]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.84995 secs, and comparison 8.54503 sec, and warnIfPerfScore > 1.3, and perfScore=0.86752]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 44.2652 secs, and comparison 5.37056 sec, and warnIfPerfScore > 0.3, and perfScore=0.121327]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.96042 secs, and comparison 10.956 sec, and warnIfPerfScore > 1.5, and perfScore=1.57404]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.21695 secs, and comparison 2.98966 sec, and warnIfPerfScore > 0.55, and perfScore=0.414255]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.042
	DETAILS:         	[baseline test 15 secs, and comparison 0.62648 sec, and warnIfPerfScore > 0.1, and perfScore=0.0417653]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.88923 sec, and warnIfPerfScore > 0.5, and perfScore=0.192615]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.29536 secs, and comparison 14.7653 sec, and warnIfPerfScore > 2, and perfScore=1.77994]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.18296 secs, and comparison 15.3484 sec, and warnIfPerfScore > 3.6, and perfScore=1.6714]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 26 seconds]]]

Succeeded
