Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 10:35:7 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.99437 secs, and comparison 4.45526 sec, and warnIfPerfScore > 0.65, and perfScore=0.892056]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.28941 secs, and comparison 2.65478 sec, and warnIfPerfScore > 0.5, and perfScore=0.501905]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.23405 secs, and comparison 9.00348 sec, and warnIfPerfScore > 1.05, and perfScore=0.975031]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.89197 secs, and comparison 9.09949 sec, and warnIfPerfScore > 1.15, and perfScore=1.15301]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 35.5796 secs, and comparison 2.28516 sec, and warnIfPerfScore > 0.48, and perfScore=0.0642267]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 30.4666 secs, and comparison 2.7811 sec, and warnIfPerfScore > 0.57, and perfScore=0.0912836]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 7.06311 secs, and comparison 21.05 sec, and warnIfPerfScore > 2.9, and perfScore=2.98027]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.99085 secs, and comparison 21.3486 sec, and warnIfPerfScore > 2.9, and perfScore=2.67163]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	32
	DETAILS:         	[baseline test 6.47088 secs, and comparison 210 sec, and warnIfPerfScore > 24, and perfScore=32.4531]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.26452 secs, and comparison 14.0916 sec, and warnIfPerfScore > 1.7, and perfScore=1.52103]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.82326 secs, and comparison 8.94383 sec, and warnIfPerfScore > 1.5, and perfScore=0.910474]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.68358 secs, and comparison 15.8579 sec, and warnIfPerfScore > 2.1, and perfScore=1.8262]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.9136 secs, and comparison 6.52813 sec, and warnIfPerfScore > 1.6, and perfScore=0.598165]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 12.101 secs, and comparison 1.05061 sec, and warnIfPerfScore > 0.23, and perfScore=0.0868205]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.0706 secs, and comparison 16.6435 sec, and warnIfPerfScore > 1.3, and perfScore=1.03565]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.0704 secs, and comparison 7.07697 sec, and warnIfPerfScore > 1.2, and perfScore=0.639267]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.61074 secs, and comparison 2.10109 sec, and warnIfPerfScore > 0.33, and perfScore=0.218619]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.56525 secs, and comparison 43.9984 sec, and warnIfPerfScore > 6, and perfScore=4.59982]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 9.20837 secs, and comparison 6.36058 sec, and warnIfPerfScore > 0.8, and perfScore=0.690738]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.8989 secs, and comparison 9.0566 sec, and warnIfPerfScore > 1.4, and perfScore=1.01772]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.61499 secs, and comparison 3.67813 sec, and warnIfPerfScore > 0.65, and perfScore=0.426945]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.39671 secs, and comparison 40.8956 sec, and warnIfPerfScore > 4.4, and perfScore=4.35212]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.12102 secs, and comparison 3.77777 sec, and warnIfPerfScore > 0.6, and perfScore=0.414183]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.2359 secs, and comparison 3.86 sec, and warnIfPerfScore > 0.6, and perfScore=0.417934]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.06641 secs, and comparison 3.85722 sec, and warnIfPerfScore > 0.6, and perfScore=0.425441]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.14695 secs, and comparison 6.19447 sec, and warnIfPerfScore > 1.3, and perfScore=0.677217]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.52731 secs, and comparison 9.60726 sec, and warnIfPerfScore > 1.3, and perfScore=1.00839]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 43.0837 secs, and comparison 7.51157 sec, and warnIfPerfScore > 0.3, and perfScore=0.174348]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.74371 secs, and comparison 11.1993 sec, and warnIfPerfScore > 1.5, and perfScore=1.66071]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.10603 secs, and comparison 3.32771 sec, and warnIfPerfScore > 0.55, and perfScore=0.468294]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.047
	DETAILS:         	[baseline test 15 secs, and comparison 0.708107 sec, and warnIfPerfScore > 0.1, and perfScore=0.0472072]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.85368 sec, and warnIfPerfScore > 0.5, and perfScore=0.190245]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.93437 secs, and comparison 15.0754 sec, and warnIfPerfScore > 2, and perfScore=1.90001]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.6623 secs, and comparison 19.4184 sec, and warnIfPerfScore > 3.6, and perfScore=1.66506]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 26 seconds]]]

Succeeded
