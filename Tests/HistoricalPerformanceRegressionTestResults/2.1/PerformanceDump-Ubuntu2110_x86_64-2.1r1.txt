Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 9:46:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 5.13901 secs, and comparison 2.06872 sec, and warnIfPerfScore > 0.65, and perfScore=0.402552]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 5.38373 secs, and comparison 3.63623 sec, and warnIfPerfScore > 0.5, and perfScore=0.675412]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.77992 secs, and comparison 7.44757 sec, and warnIfPerfScore > 1.05, and perfScore=1.9703]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.7735 secs, and comparison 7.14918 sec, and warnIfPerfScore > 1.15, and perfScore=2.57768]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 6.9354 secs, and comparison 1.51981 sec, and warnIfPerfScore > 0.48, and perfScore=0.219138]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 6.00417 secs, and comparison 1.18011 sec, and warnIfPerfScore > 0.57, and perfScore=0.196549]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 4.35036 secs, and comparison 12.7825 sec, and warnIfPerfScore > 2.9, and perfScore=2.93825]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.4504 secs, and comparison 13.1513 sec, and warnIfPerfScore > 2.9, and perfScore=2.95507]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 5.564 secs, and comparison 47.1742 sec, and warnIfPerfScore > 24, and perfScore=8.47846]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.79632 secs, and comparison 8.06673 sec, and warnIfPerfScore > 1.6, and perfScore=1.3917]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.27029 secs, and comparison 8.84091 sec, and warnIfPerfScore > 1.5, and perfScore=0.953682]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.65633 secs, and comparison 10.2741 sec, and warnIfPerfScore > 2.1, and perfScore=2.80995]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.90657 secs, and comparison 4.01122 sec, and warnIfPerfScore > 1.6, and perfScore=0.81752]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 5.32743 secs, and comparison 2.25456 sec, and warnIfPerfScore > 0.23, and perfScore=0.423198]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.05705 secs, and comparison 4.71343 sec, and warnIfPerfScore > 1.3, and perfScore=1.16179]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.21822 secs, and comparison 6.62304 sec, and warnIfPerfScore > 1.2, and perfScore=2.05798]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 20.0189 secs, and comparison 2.07147 sec, and warnIfPerfScore > 0.33, and perfScore=0.103476]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.20816 secs, and comparison 42.0582 sec, and warnIfPerfScore > 6, and perfScore=13.1098]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.10701 secs, and comparison 6.1755 sec, and warnIfPerfScore > 0.8, and perfScore=1.9876]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.27653 secs, and comparison 8.71316 sec, and warnIfPerfScore > 1.4, and perfScore=2.65927]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.7354 secs, and comparison 3.80492 sec, and warnIfPerfScore > 0.65, and perfScore=0.175056]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.1
	DETAILS:         	[baseline test 5.47246 secs, and comparison 39.0128 sec, and warnIfPerfScore > 4.4, and perfScore=7.12893]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.0395 secs, and comparison 4.04161 sec, and warnIfPerfScore > 0.6, and perfScore=0.287875]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.5898 secs, and comparison 4.484 sec, and warnIfPerfScore > 0.6, and perfScore=0.329952]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.768 secs, and comparison 4.17335 sec, and warnIfPerfScore > 0.6, and perfScore=0.303119]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.8344 secs, and comparison 4.77701 sec, and warnIfPerfScore > 1.3, and perfScore=0.345299]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 20.977 secs, and comparison 10.7913 sec, and warnIfPerfScore > 1.3, and perfScore=0.514438]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 22.9543 secs, and comparison 6.25681 sec, and warnIfPerfScore > 0.3, and perfScore=0.272577]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.6409 secs, and comparison 16.6439 sec, and warnIfPerfScore > 1.5, and perfScore=1.56414]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.2665 secs, and comparison 5.15428 sec, and warnIfPerfScore > 0.55, and perfScore=0.316865]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.28159 sec, and warnIfPerfScore > 0.1, and perfScore=0.152106]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.13897 sec, and warnIfPerfScore > 0.5, and perfScore=0.209265]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 35 seconds]]]

Succeeded
