Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Aug 10 23:24:2 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.67201 secs, and comparison 6.50273 sec, and warnIfPerfScore > 0.65, and perfScore=0.672325]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.86288 secs, and comparison 4.28649 sec, and warnIfPerfScore > 0.5, and perfScore=0.483645]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 16.6406 secs, and comparison 12.1928 sec, and warnIfPerfScore > 1.05, and perfScore=0.732714]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.368 secs, and comparison 12.3148 sec, and warnIfPerfScore > 1.15, and perfScore=1.08329]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 32.8215 secs, and comparison 4.24437 sec, and warnIfPerfScore > 0.48, and perfScore=0.129317]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 35.0258 secs, and comparison 5.14859 sec, and warnIfPerfScore > 0.57, and perfScore=0.146994]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 22.9781 secs, and comparison 38.0406 sec, and warnIfPerfScore > 2.9, and perfScore=1.65552]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.5829 secs, and comparison 41.8571 sec, and warnIfPerfScore > 2.9, and perfScore=1.70269]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 18.8379 secs, and comparison 136.381 sec, and warnIfPerfScore > 24, and perfScore=7.23971]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 24.0283 secs, and comparison 16.4499 sec, and warnIfPerfScore > 1.7, and perfScore=0.684608]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.36445 secs, and comparison 6.95609 sec, and warnIfPerfScore > 1.5, and perfScore=0.742819]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.7591 secs, and comparison 20.2759 sec, and warnIfPerfScore > 2.1, and perfScore=1.08086]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 14.2015 secs, and comparison 6.95512 sec, and warnIfPerfScore > 1.6, and perfScore=0.489747]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 15.7812 secs, and comparison 1.39892 sec, and warnIfPerfScore > 0.23, and perfScore=0.0886446]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.2028 secs, and comparison 20.2423 sec, and warnIfPerfScore > 1.3, and perfScore=1.00195]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.125 secs, and comparison 15.5395 sec, and warnIfPerfScore > 1.2, and perfScore=1.18396]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 9.61348 secs, and comparison 2.61134 sec, and warnIfPerfScore > 0.33, and perfScore=0.271633]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 12.8066 secs, and comparison 57.8094 sec, and warnIfPerfScore > 6, and perfScore=4.51405]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.0975 secs, and comparison 16.0118 sec, and warnIfPerfScore > 0.8, and perfScore=1.22251]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.5681 secs, and comparison 17.3086 sec, and warnIfPerfScore > 1.4, and perfScore=1.49623]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.36842 secs, and comparison 5.09124 sec, and warnIfPerfScore > 0.65, and perfScore=0.543447]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 19.0271 secs, and comparison 54.173 sec, and warnIfPerfScore > 4.4, and perfScore=2.84715]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.1978 secs, and comparison 4.88863 sec, and warnIfPerfScore > 0.6, and perfScore=0.479383]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.3346 secs, and comparison 4.67196 sec, and warnIfPerfScore > 0.6, and perfScore=0.452068]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.1198 secs, and comparison 5.03043 sec, and warnIfPerfScore > 0.6, and perfScore=0.497088]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.1471 secs, and comparison 5.82156 sec, and warnIfPerfScore > 1.3, and perfScore=0.573714]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.6995 secs, and comparison 15.326 sec, and warnIfPerfScore > 1.3, and perfScore=1.4324]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 141.992 secs, and comparison 8.6193 sec, and warnIfPerfScore > 0.3, and perfScore=0.0607028]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 33.949 secs, and comparison 36.3201 sec, and warnIfPerfScore > 1.5, and perfScore=1.06984]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.72288 secs, and comparison 5.71117 sec, and warnIfPerfScore > 0.55, and perfScore=0.587395]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15 secs, and comparison 6.95195 sec, and warnIfPerfScore > 0.1, and perfScore=0.463463]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.68787 sec, and warnIfPerfScore > 0.5, and perfScore=0.179191]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 10 seconds]]]

Succeeded
