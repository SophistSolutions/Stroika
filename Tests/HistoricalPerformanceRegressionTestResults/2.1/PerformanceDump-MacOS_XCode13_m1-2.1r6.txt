Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Mar 25 20:5:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21522 secs, and comparison 4.82061 sec, and warnIfPerfScore > 0.65, and perfScore=1.49931]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.2123 secs, and comparison 2.28182 sec, and warnIfPerfScore > 0.5, and perfScore=0.710337]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25259 secs, and comparison 7.1772 sec, and warnIfPerfScore > 1.05, and perfScore=0.989605]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31893 secs, and comparison 7.1796 sec, and warnIfPerfScore > 1.15, and perfScore=1.1362]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 5.90479 secs, and comparison 1.23507 sec, and warnIfPerfScore > 0.48, and perfScore=0.209164]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 5.8906 secs, and comparison 1.78368 sec, and warnIfPerfScore > 0.57, and perfScore=0.302801]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.03287 secs, and comparison 15.4054 sec, and warnIfPerfScore > 2.9, and perfScore=2.55358]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.40518 secs, and comparison 15.8786 sec, and warnIfPerfScore > 2.9, and perfScore=2.14426]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 9.59109 secs, and comparison 54.2896 sec, and warnIfPerfScore > 24, and perfScore=5.66042]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.26543 secs, and comparison 7.59462 sec, and warnIfPerfScore > 1.7, and perfScore=1.7805]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.73906 secs, and comparison 3.88079 sec, and warnIfPerfScore > 1.5, and perfScore=0.818894]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.66063 secs, and comparison 9.57271 sec, and warnIfPerfScore > 2.1, and perfScore=2.61504]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.23879 secs, and comparison 2.94997 sec, and warnIfPerfScore > 1.6, and perfScore=0.563102]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 5.4104 secs, and comparison 0.678413 sec, and warnIfPerfScore > 0.23, and perfScore=0.125391]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4243 secs, and comparison 12.9013 sec, and warnIfPerfScore > 1.3, and perfScore=1.03839]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.66597 secs, and comparison 5.30334 sec, and warnIfPerfScore > 1.2, and perfScore=1.1366]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.48126 secs, and comparison 1.06685 sec, and warnIfPerfScore > 0.33, and perfScore=0.238068]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.32409 secs, and comparison 38.3887 sec, and warnIfPerfScore > 6, and perfScore=8.87787]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.3235 secs, and comparison 5.08834 sec, and warnIfPerfScore > 0.8, and perfScore=1.1769]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.32403 secs, and comparison 7.03929 sec, and warnIfPerfScore > 1.4, and perfScore=1.62795]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.48207 secs, and comparison 3.18241 sec, and warnIfPerfScore > 0.65, and perfScore=0.71003]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.59219 secs, and comparison 36.2474 sec, and warnIfPerfScore > 4.4, and perfScore=6.48179]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.4988 secs, and comparison 3.0725 sec, and warnIfPerfScore > 0.6, and perfScore=0.682959]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.49051 secs, and comparison 3.06971 sec, and warnIfPerfScore > 0.6, and perfScore=0.6836]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.49487 secs, and comparison 3.07607 sec, and warnIfPerfScore > 0.6, and perfScore=0.684351]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 4.50311 secs, and comparison 2.8172 sec, and warnIfPerfScore > 1.3, and perfScore=0.625612]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.67882 secs, and comparison 8.16631 sec, and warnIfPerfScore > 1.3, and perfScore=1.74538]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 30.1936 secs, and comparison 4.36307 sec, and warnIfPerfScore > 0.3, and perfScore=0.144503]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.2055 secs, and comparison 11.9301 sec, and warnIfPerfScore > 1.5, and perfScore=1.29597]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 4.63775 secs, and comparison 2.71461 sec, and warnIfPerfScore > 0.55, and perfScore=0.585329]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.04183 sec, and warnIfPerfScore > 0.1, and perfScore=0.136122]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.9461 sec, and warnIfPerfScore > 0.5, and perfScore=0.12974]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 57 seconds]]]

Succeeded
