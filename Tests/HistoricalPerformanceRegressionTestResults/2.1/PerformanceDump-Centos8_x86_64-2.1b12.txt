Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 16 13:27:11 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 7.21304 secs, and comparison 5.16493 sec, and warnIfPerfScore > 0.62, and perfScore=0.716055]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.37206 secs, and comparison 3.69743 sec, and warnIfPerfScore > 0.5, and perfScore=0.501547]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.98135 secs, and comparison 7.81791 sec, and warnIfPerfScore > 1.05, and perfScore=0.979522]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.4099 secs, and comparison 4.47614 sec, and warnIfPerfScore > 0.48, and perfScore=0.827398]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.88579 secs, and comparison 4.98987 sec, and warnIfPerfScore > 0.57, and perfScore=0.724662]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 5.33096 secs, and comparison 23.4164 sec, and warnIfPerfScore > 2.9, and perfScore=4.39252]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 4.69419 secs, and comparison 26.5647 sec, and warnIfPerfScore > 2.9, and perfScore=5.65906]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 7.3699 secs, and comparison 83.1591 sec, and warnIfPerfScore > 9.7, and perfScore=11.2836]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.38235 secs, and comparison 12.2263 sec, and warnIfPerfScore > 1.6, and perfScore=2.27155]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.255 secs, and comparison 7.62367 sec, and warnIfPerfScore > 1.5, and perfScore=0.923521]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.89762 secs, and comparison 10.9781 sec, and warnIfPerfScore > 2.1, and perfScore=3.78867]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 5.79514 secs, and comparison 4.94399 sec, and warnIfPerfScore > 1.3, and perfScore=0.853126]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 5.96068 secs, and comparison 1.89716 sec, and warnIfPerfScore > 0.23, and perfScore=0.318279]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.43648 secs, and comparison 5.41479 sec, and warnIfPerfScore > 1.3, and perfScore=1.22051]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.37071 secs, and comparison 8.30493 sec, and warnIfPerfScore > 1.2, and perfScore=1.90013]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 20.2014 secs, and comparison 1.79411 sec, and warnIfPerfScore > 0.33, and perfScore=0.0888108]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.02966 secs, and comparison 44.6343 sec, and warnIfPerfScore > 6, and perfScore=11.0764]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 16.0469 secs, and comparison 3.97854 sec, and warnIfPerfScore > 0.5, and perfScore=0.247932]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 5.97831 secs, and comparison 40.7187 sec, and warnIfPerfScore > 4.4, and perfScore=6.81107]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.4521 secs, and comparison 4.27853 sec, and warnIfPerfScore > 0.6, and perfScore=0.27689]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.9651 secs, and comparison 16.514 sec, and warnIfPerfScore > 1.5, and perfScore=1.50604]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.3202 secs, and comparison 2.915 sec, and warnIfPerfScore > 0.55, and perfScore=0.257505]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.69044 sec, and warnIfPerfScore > 0.25, and perfScore=0.112696]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.38973 sec, and warnIfPerfScore > 0.5, and perfScore=0.292649]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 24 seconds]]]

Succeeded
