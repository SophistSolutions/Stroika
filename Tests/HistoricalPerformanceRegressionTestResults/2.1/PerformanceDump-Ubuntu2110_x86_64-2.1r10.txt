Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri May 13 19:16:9 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 3.17404 secs, and comparison 1.32549 sec, and warnIfPerfScore > 0.65, and perfScore=0.417604]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 2.95627 secs, and comparison 3.00571 sec, and warnIfPerfScore > 0.5, and perfScore=1.01672]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.58844 secs, and comparison 6.83359 sec, and warnIfPerfScore > 1.05, and perfScore=2.64004]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.17954 secs, and comparison 6.74348 sec, and warnIfPerfScore > 1.15, and perfScore=3.09399]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.05304 secs, and comparison 0.965596 sec, and warnIfPerfScore > 0.48, and perfScore=0.23824]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 4.8731 secs, and comparison 1.04996 sec, and warnIfPerfScore > 0.57, and perfScore=0.215461]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 3.72135 secs, and comparison 12.0427 sec, and warnIfPerfScore > 2.9, and perfScore=3.2361]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.20032 secs, and comparison 12.5621 sec, and warnIfPerfScore > 2.9, and perfScore=2.99075]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 5.71127 secs, and comparison 48.4808 sec, and warnIfPerfScore > 24, and perfScore=8.48863]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.50488 secs, and comparison 7.41433 sec, and warnIfPerfScore > 1.7, and perfScore=1.34686]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.85499 secs, and comparison 5.52447 sec, and warnIfPerfScore > 1.5, and perfScore=0.94355]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.10263 secs, and comparison 9.34708 sec, and warnIfPerfScore > 2.1, and perfScore=3.01263]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.93558 secs, and comparison 3.73988 sec, and warnIfPerfScore > 1.6, and perfScore=0.950275]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.22325 secs, and comparison 1.39541 sec, and warnIfPerfScore > 0.23, and perfScore=0.330412]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.90876 secs, and comparison 4.93584 sec, and warnIfPerfScore > 1.3, and perfScore=1.26276]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.54343 secs, and comparison 10.8162 sec, and warnIfPerfScore > 1.2, and perfScore=2.38062]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 20.7439 secs, and comparison 3.33585 sec, and warnIfPerfScore > 0.33, and perfScore=0.160811]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 4.82894 secs, and comparison 45.2767 sec, and warnIfPerfScore > 6, and perfScore=9.37612]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.05861 secs, and comparison 6.73145 sec, and warnIfPerfScore > 0.8, and perfScore=2.20082]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.02969 secs, and comparison 8.27862 sec, and warnIfPerfScore > 1.4, and perfScore=2.7325]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.6482 secs, and comparison 3.74256 sec, and warnIfPerfScore > 0.65, and perfScore=0.224803]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 4.44577 secs, and comparison 38.3001 sec, and warnIfPerfScore > 4.4, and perfScore=8.61497]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.2349 secs, and comparison 3.77918 sec, and warnIfPerfScore > 0.6, and perfScore=0.308885]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.2806 secs, and comparison 3.7772 sec, and warnIfPerfScore > 0.6, and perfScore=0.307574]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.2961 secs, and comparison 3.70527 sec, and warnIfPerfScore > 0.6, and perfScore=0.301336]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.2256 secs, and comparison 4.28173 sec, and warnIfPerfScore > 1.3, and perfScore=0.350227]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 19.3595 secs, and comparison 12.2518 sec, and warnIfPerfScore > 1.3, and perfScore=0.632859]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.7271 secs, and comparison 5.8013 sec, and warnIfPerfScore > 0.3, and perfScore=0.294077]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.51153 secs, and comparison 13.7075 sec, and warnIfPerfScore > 1.5, and perfScore=1.82486]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.62704 secs, and comparison 2.48306 sec, and warnIfPerfScore > 0.55, and perfScore=0.374686]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.787244 sec, and warnIfPerfScore > 0.1, and perfScore=0.0524829]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43922 sec, and warnIfPerfScore > 0.5, and perfScore=0.0959479]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 37 seconds]]]

Succeeded
