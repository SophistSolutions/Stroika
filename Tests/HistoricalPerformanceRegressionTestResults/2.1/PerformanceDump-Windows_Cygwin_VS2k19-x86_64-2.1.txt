Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 15 14:21:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.90499 secs, and comparison 5.86211 sec, and warnIfPerfScore > 0.65, and perfScore=0.658295]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.27566 secs, and comparison 3.80795 sec, and warnIfPerfScore > 0.5, and perfScore=0.410532]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.0949 secs, and comparison 10.4599 sec, and warnIfPerfScore > 1.05, and perfScore=0.864816]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.92259 secs, and comparison 10.0264 sec, and warnIfPerfScore > 1.15, and perfScore=1.12371]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.7539 secs, and comparison 3.08949 sec, and warnIfPerfScore > 0.48, and perfScore=0.242239]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.8 secs, and comparison 4.10427 sec, and warnIfPerfScore > 0.57, and perfScore=0.34782]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.138 secs, and comparison 29.4379 sec, and warnIfPerfScore > 2.9, and perfScore=2.64301]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.8375 secs, and comparison 29.0092 sec, and warnIfPerfScore > 2.9, and perfScore=2.45062]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 9.62803 secs, and comparison 141.393 sec, and warnIfPerfScore > 24, and perfScore=14.6856]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.54591 secs, and comparison 14.5493 sec, and warnIfPerfScore > 1.7, and perfScore=1.52414]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.9484 secs, and comparison 10.4571 sec, and warnIfPerfScore > 1.5, and perfScore=0.955122]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.98131 secs, and comparison 17.365 sec, and warnIfPerfScore > 2.1, and perfScore=1.93345]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.3559 secs, and comparison 6.81178 sec, and warnIfPerfScore > 1.6, and perfScore=0.599847]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 12.3471 secs, and comparison 1.13286 sec, and warnIfPerfScore > 0.23, and perfScore=0.0917511]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.661 secs, and comparison 14.2754 sec, and warnIfPerfScore > 1.3, and perfScore=1.04497]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.1507 secs, and comparison 9.45551 sec, and warnIfPerfScore > 1.2, and perfScore=0.931511]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.2711 secs, and comparison 3.43533 sec, and warnIfPerfScore > 0.33, and perfScore=0.240719]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 9.83975 secs, and comparison 50.0103 sec, and warnIfPerfScore > 6, and perfScore=5.08248]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 9.5149 secs, and comparison 8.8393 sec, and warnIfPerfScore > 0.8, and perfScore=0.928996]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.40152 secs, and comparison 12.0711 sec, and warnIfPerfScore > 1.4, and perfScore=1.28395]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.5612 secs, and comparison 4.32502 sec, and warnIfPerfScore > 0.65, and perfScore=0.318926]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.8244 secs, and comparison 44.0627 sec, and warnIfPerfScore > 4.4, and perfScore=4.0707]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.296 secs, and comparison 4.30834 sec, and warnIfPerfScore > 0.6, and perfScore=0.324034]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.5017 secs, and comparison 4.37682 sec, and warnIfPerfScore > 0.6, and perfScore=0.324168]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.3773 secs, and comparison 4.34451 sec, and warnIfPerfScore > 0.6, and perfScore=0.324768]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 13.4448 secs, and comparison 9.23801 sec, and warnIfPerfScore > 1.3, and perfScore=0.687106]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 15.691 secs, and comparison 12.9634 sec, and warnIfPerfScore > 1.3, and perfScore=0.826168]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 61.9273 secs, and comparison 11.5994 sec, and warnIfPerfScore > 0.3, and perfScore=0.187308]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.658 secs, and comparison 15.5656 sec, and warnIfPerfScore > 1.5, and perfScore=1.61168]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.3294 secs, and comparison 4.57399 sec, and warnIfPerfScore > 0.55, and perfScore=0.370983]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 15 secs, and comparison 1.03085 sec, and warnIfPerfScore > 0.1, and perfScore=0.0687235]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.23863 sec, and warnIfPerfScore > 0.5, and perfScore=0.282576]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.4043 secs, and comparison 18.1971 sec, and warnIfPerfScore > 2, and perfScore=1.59563]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 11.6369 secs, and comparison 23.1778 sec, and warnIfPerfScore > 3.6, and perfScore=1.99175]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 6 seconds]]]

Succeeded
