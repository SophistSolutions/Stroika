Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 16 15:36:31 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.2563 secs, and comparison 5.78378 sec, and warnIfPerfScore > 0.62, and perfScore=0.405701]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 14.7803 secs, and comparison 3.45894 sec, and warnIfPerfScore > 0.5, and perfScore=0.234024]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 14.1804 secs, and comparison 10.6975 sec, and warnIfPerfScore > 1.05, and perfScore=0.754387]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 14.3294 secs, and comparison 5.09023 sec, and warnIfPerfScore > 0.48, and perfScore=0.355229]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.2458 secs, and comparison 5.27879 sec, and warnIfPerfScore > 0.57, and perfScore=0.346247]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.4646 secs, and comparison 30.3728 sec, and warnIfPerfScore > 2.9, and perfScore=2.25575]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 15.958 secs, and comparison 33.4529 sec, and warnIfPerfScore > 2.9, and perfScore=2.09631]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 12.4184 secs, and comparison 126.598 sec, and warnIfPerfScore > 9.7, and perfScore=10.1944]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 9.7 and got 10.1944}}}

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 18.0299 secs, and comparison 15.1012 sec, and warnIfPerfScore > 1.6, and perfScore=0.837566]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 16.9073 secs, and comparison 16.0567 sec, and warnIfPerfScore > 1.5, and perfScore=0.949689]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.5018 secs, and comparison 14.1642 sec, and warnIfPerfScore > 2.1, and perfScore=1.34874]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 14.773 secs, and comparison 11.0585 sec, and warnIfPerfScore > 1.3, and perfScore=0.748563]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15.2106 secs, and comparison 1.56827 sec, and warnIfPerfScore > 0.23, and perfScore=0.103104]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 15.8706 secs, and comparison 15.2233 sec, and warnIfPerfScore > 1.3, and perfScore=0.959218]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.7315 secs, and comparison 8.67678 sec, and warnIfPerfScore > 1.2, and perfScore=0.739612]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 10.9614 secs, and comparison 2.00198 sec, and warnIfPerfScore > 0.33, and perfScore=0.182639]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 10.8473 secs, and comparison 51.2814 sec, and warnIfPerfScore > 6, and perfScore=4.72758]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.8214 secs, and comparison 4.80294 sec, and warnIfPerfScore > 0.5, and perfScore=0.3475]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 15.9051 secs, and comparison 47.4763 sec, and warnIfPerfScore > 4.4, and perfScore=2.98497]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.579 secs, and comparison 5.679 sec, and warnIfPerfScore > 0.6, and perfScore=0.418218]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.7333 secs, and comparison 18.4121 sec, and warnIfPerfScore > 1.5, and perfScore=1.03828]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.585 secs, and comparison 4.90427 sec, and warnIfPerfScore > 0.55, and perfScore=0.31468]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.54531 sec, and warnIfPerfScore > 0.25, and perfScore=0.103021]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.83136 sec, and warnIfPerfScore > 0.5, and perfScore=0.388757]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.3461 secs, and comparison 30.8608 sec, and warnIfPerfScore > 2, and perfScore=2.31234]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2 and got 2.31234}}}

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 21.714 secs, and comparison 43.0456 sec, and warnIfPerfScore > 3.1, and perfScore=1.98238]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 29 seconds]]]

Succeeded
