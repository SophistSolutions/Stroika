Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr 14 11:51:28 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.34473 secs, and comparison 6.72127 sec, and warnIfPerfScore > 0.65, and perfScore=0.719258]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.94278 secs, and comparison 4.53686 sec, and warnIfPerfScore > 0.5, and perfScore=0.456297]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 18.0431 secs, and comparison 12.5633 sec, and warnIfPerfScore > 1.05, and perfScore=0.696295]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6321 secs, and comparison 12.4826 sec, and warnIfPerfScore > 1.15, and perfScore=1.07311]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 35.7865 secs, and comparison 4.35207 sec, and warnIfPerfScore > 0.48, and perfScore=0.121612]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 35.5781 secs, and comparison 4.99842 sec, and warnIfPerfScore > 0.57, and perfScore=0.140492]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 22.9084 secs, and comparison 39.9178 sec, and warnIfPerfScore > 2.9, and perfScore=1.74249]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 24.3348 secs, and comparison 45.8993 sec, and warnIfPerfScore > 2.9, and perfScore=1.88616]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.3
	DETAILS:         	[baseline test 18.2196 secs, and comparison 133.389 sec, and warnIfPerfScore > 24, and perfScore=7.32115]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 23.6466 secs, and comparison 16.3206 sec, and warnIfPerfScore > 1.7, and perfScore=0.69019]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.74022 secs, and comparison 7.50692 sec, and warnIfPerfScore > 1.5, and perfScore=0.770713]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.1437 secs, and comparison 20.3792 sec, and warnIfPerfScore > 2.1, and perfScore=1.34572]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 14.9621 secs, and comparison 8.01254 sec, and warnIfPerfScore > 1.6, and perfScore=0.535523]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 13.5988 secs, and comparison 1.35117 sec, and warnIfPerfScore > 0.23, and perfScore=0.0993597]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 19.3842 secs, and comparison 18.1766 sec, and warnIfPerfScore > 1.3, and perfScore=0.937701]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.4997 secs, and comparison 15.5195 sec, and warnIfPerfScore > 1.2, and perfScore=1.14961]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.0688 secs, and comparison 2.56219 sec, and warnIfPerfScore > 0.33, and perfScore=0.254469]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 14.3654 secs, and comparison 56.0871 sec, and warnIfPerfScore > 6, and perfScore=3.90432]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.3938 secs, and comparison 13.5126 sec, and warnIfPerfScore > 0.8, and perfScore=1.09026]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.4597 secs, and comparison 15.0309 sec, and warnIfPerfScore > 1.4, and perfScore=1.31162]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 8.64068 secs, and comparison 4.69299 sec, and warnIfPerfScore > 0.65, and perfScore=0.543127]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 16.2307 secs, and comparison 49.8432 sec, and warnIfPerfScore > 4.4, and perfScore=3.07092]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.0704 secs, and comparison 4.66706 sec, and warnIfPerfScore > 0.6, and perfScore=0.514537]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.5402 secs, and comparison 4.85314 sec, and warnIfPerfScore > 0.6, and perfScore=0.508704]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.62432 secs, and comparison 4.86812 sec, and warnIfPerfScore > 0.6, and perfScore=0.505814]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.0511 secs, and comparison 6.0595 sec, and warnIfPerfScore > 1.3, and perfScore=0.602869]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.001 secs, and comparison 13.9507 sec, and warnIfPerfScore > 1.3, and perfScore=1.39493]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 142.458 secs, and comparison 8.67267 sec, and warnIfPerfScore > 0.3, and perfScore=0.0608787]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 30.3406 secs, and comparison 31.0164 sec, and warnIfPerfScore > 1.5, and perfScore=1.02228]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.87921 secs, and comparison 4.6707 sec, and warnIfPerfScore > 0.55, and perfScore=0.678959]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.5797 sec, and warnIfPerfScore > 0.1, and perfScore=0.37198]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.42009 sec, and warnIfPerfScore > 0.5, and perfScore=0.161339]
	                 	Test_Optional_ is FASTER

[[[Tests took: 19 minutes, 44 seconds]]]

Succeeded
