Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 20 12:54:24 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.91104 secs, and comparison 6.21579 sec, and warnIfPerfScore > 0.65, and perfScore=0.697538]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.90844 secs, and comparison 4.20426 sec, and warnIfPerfScore > 0.5, and perfScore=0.471941]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 15.7198 secs, and comparison 12.5496 sec, and warnIfPerfScore > 1.05, and perfScore=0.798328]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4482 secs, and comparison 12.6244 sec, and warnIfPerfScore > 1.15, and perfScore=1.01416]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 35.7061 secs, and comparison 4.32226 sec, and warnIfPerfScore > 0.48, and perfScore=0.121051]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 35.3339 secs, and comparison 5.21973 sec, and warnIfPerfScore > 0.57, and perfScore=0.147726]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.7069 secs, and comparison 39.5251 sec, and warnIfPerfScore > 2.9, and perfScore=1.66724]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 27.6199 secs, and comparison 46.0311 sec, and warnIfPerfScore > 2.9, and perfScore=1.66659]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 21.1816 secs, and comparison 134.952 sec, and warnIfPerfScore > 24, and perfScore=6.37119]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 23.2729 secs, and comparison 16.1406 sec, and warnIfPerfScore > 1.7, and perfScore=0.693539]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.78876 secs, and comparison 7.1874 sec, and warnIfPerfScore > 1.5, and perfScore=0.73425]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.5475 secs, and comparison 20.3015 sec, and warnIfPerfScore > 2.1, and perfScore=1.22686]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 12.6507 secs, and comparison 6.73814 sec, and warnIfPerfScore > 1.6, and perfScore=0.532631]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 13.2417 secs, and comparison 1.14982 sec, and warnIfPerfScore > 0.23, and perfScore=0.0868331]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.8026 secs, and comparison 19.1016 sec, and warnIfPerfScore > 1.3, and perfScore=1.0159]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.1378 secs, and comparison 15.8245 sec, and warnIfPerfScore > 1.2, and perfScore=1.20451]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.25148 secs, and comparison 2.09075 sec, and warnIfPerfScore > 0.33, and perfScore=0.225991]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 12.9954 secs, and comparison 56.6668 sec, and warnIfPerfScore > 6, and perfScore=4.36052]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.2037 secs, and comparison 14.6915 sec, and warnIfPerfScore > 0.8, and perfScore=1.20385]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.2121 secs, and comparison 18.9535 sec, and warnIfPerfScore > 1.4, and perfScore=1.43456]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.1136 secs, and comparison 4.83653 sec, and warnIfPerfScore > 0.65, and perfScore=0.478218]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 17.5194 secs, and comparison 51.629 sec, and warnIfPerfScore > 4.4, and perfScore=2.94695]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.80993 secs, and comparison 4.55041 sec, and warnIfPerfScore > 0.6, and perfScore=0.463857]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.08781 secs, and comparison 4.5319 sec, and warnIfPerfScore > 0.6, and perfScore=0.498679]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 8.9932 secs, and comparison 4.63216 sec, and warnIfPerfScore > 0.6, and perfScore=0.515073]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.48726 secs, and comparison 6.70974 sec, and warnIfPerfScore > 1.3, and perfScore=0.707237]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.60937 secs, and comparison 13.9154 sec, and warnIfPerfScore > 1.3, and perfScore=1.44811]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 140.146 secs, and comparison 8.20066 sec, and warnIfPerfScore > 0.3, and perfScore=0.0585149]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 36.6932 secs, and comparison 34.9036 sec, and warnIfPerfScore > 1.5, and perfScore=0.951228]
	                 	String Characters::Format is FASTER

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.79654 secs, and comparison 5.46364 sec, and warnIfPerfScore > 0.55, and perfScore=0.621112]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15 secs, and comparison 6.60653 sec, and warnIfPerfScore > 0.1, and perfScore=0.440435]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78804 sec, and warnIfPerfScore > 0.5, and perfScore=0.185869]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 6 seconds]]]

Succeeded
