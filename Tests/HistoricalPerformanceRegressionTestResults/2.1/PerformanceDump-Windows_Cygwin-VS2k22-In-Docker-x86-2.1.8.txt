Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov  3 2:40:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.19636 secs, and comparison 4.40926 sec, and warnIfPerfScore > 0.65, and perfScore=0.612707]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.03009 secs, and comparison 2.77561 sec, and warnIfPerfScore > 0.5, and perfScore=0.345651]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.79646 secs, and comparison 7.58803 sec, and warnIfPerfScore > 1.05, and perfScore=0.862622]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.88854 secs, and comparison 7.57337 sec, and warnIfPerfScore > 1.15, and perfScore=1.09942]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.33202 secs, and comparison 2.26455 sec, and warnIfPerfScore > 0.48, and perfScore=0.271789]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.5828 secs, and comparison 2.77275 sec, and warnIfPerfScore > 0.57, and perfScore=0.323059]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.46551 secs, and comparison 20.8633 sec, and warnIfPerfScore > 2.9, and perfScore=2.4645]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.6384 secs, and comparison 21.6112 sec, and warnIfPerfScore > 2.9, and perfScore=2.50176]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.06045 secs, and comparison 149.104 sec, and warnIfPerfScore > 24, and perfScore=18.4982]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.35573 secs, and comparison 10.9656 sec, and warnIfPerfScore > 1.7, and perfScore=1.49075]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.64071 secs, and comparison 8.27787 sec, and warnIfPerfScore > 1.5, and perfScore=0.958008]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.44529 secs, and comparison 12.7883 sec, and warnIfPerfScore > 2.1, and perfScore=1.98412]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.36079 secs, and comparison 6.91374 sec, and warnIfPerfScore > 1.6, and perfScore=0.738584]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.87357 secs, and comparison 1.34113 sec, and warnIfPerfScore > 0.23, and perfScore=0.135831]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3446 secs, and comparison 13.5885 sec, and warnIfPerfScore > 1.3, and perfScore=1.01828]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.2305 secs, and comparison 5.69994 sec, and warnIfPerfScore > 1.2, and perfScore=0.557151]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.52924 secs, and comparison 2.24052 sec, and warnIfPerfScore > 0.33, and perfScore=0.235121]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.6908 secs, and comparison 40.6992 sec, and warnIfPerfScore > 6, and perfScore=4.19978]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.71779 secs, and comparison 5.51501 sec, and warnIfPerfScore > 0.8, and perfScore=0.567517]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.78432 secs, and comparison 9.60018 sec, and warnIfPerfScore > 1.4, and perfScore=0.98118]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.51383 secs, and comparison 3.64803 sec, and warnIfPerfScore > 0.65, and perfScore=0.383445]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.1382 secs, and comparison 37.8527 sec, and warnIfPerfScore > 4.4, and perfScore=3.73366]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.40681 secs, and comparison 3.60737 sec, and warnIfPerfScore > 0.6, and perfScore=0.383485]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.39668 secs, and comparison 3.58769 sec, and warnIfPerfScore > 0.6, and perfScore=0.381803]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.33063 secs, and comparison 3.62802 sec, and warnIfPerfScore > 0.6, and perfScore=0.388829]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.30901 secs, and comparison 5.09608 sec, and warnIfPerfScore > 1.3, and perfScore=0.547435]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.98711 secs, and comparison 8.66561 sec, and warnIfPerfScore > 1.3, and perfScore=0.867679]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.3125 secs, and comparison 6.08733 sec, and warnIfPerfScore > 0.3, and perfScore=0.13144]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.51915 secs, and comparison 12.3186 sec, and warnIfPerfScore > 1.5, and perfScore=1.44599]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.51427 secs, and comparison 2.91162 sec, and warnIfPerfScore > 0.55, and perfScore=0.387478]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.799907 sec, and warnIfPerfScore > 0.1, and perfScore=0.0533272]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.40827 sec, and warnIfPerfScore > 0.5, and perfScore=0.227218]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.14142 secs, and comparison 13.6583 sec, and warnIfPerfScore > 2, and perfScore=1.67763]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.33654 secs, and comparison 30.6971 sec, and warnIfPerfScore > 3.6, and perfScore=3.28784]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 17 seconds]]]

Succeeded
