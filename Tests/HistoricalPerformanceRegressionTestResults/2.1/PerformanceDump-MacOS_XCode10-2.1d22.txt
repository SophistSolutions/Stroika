Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Mar 22 20:49:20 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.36132 secs, and comparison 6.81606 sec, and warnIfPerfScore > 0.62, and perfScore=0.728108]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.31307 secs, and comparison 5.10627 sec, and warnIfPerfScore > 0.5, and perfScore=0.548291]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 18.5413 secs, and comparison 12.8325 sec, and warnIfPerfScore > 1.05, and perfScore=0.692106]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 40.1339 secs, and comparison 5.95594 sec, and warnIfPerfScore > 0.48, and perfScore=0.148402]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 39.4618 secs, and comparison 5.87914 sec, and warnIfPerfScore > 0.55, and perfScore=0.148983]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 26.0802 secs, and comparison 64.5408 sec, and warnIfPerfScore > 2.9, and perfScore=2.4747]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 26.2834 secs, and comparison 58.3328 sec, and warnIfPerfScore > 2.9, and perfScore=2.21938]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 16.428 secs, and comparison 148.91 sec, and warnIfPerfScore > 9.7, and perfScore=9.06437]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.2318 secs, and comparison 26.6715 sec, and warnIfPerfScore > 1.6, and perfScore=1.31829]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.12632 secs, and comparison 5.91923 sec, and warnIfPerfScore > 1.5, and perfScore=0.728402]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.7317 secs, and comparison 31.7966 sec, and warnIfPerfScore > 2.1, and perfScore=2.31556]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.0946 secs, and comparison 6.16 sec, and warnIfPerfScore > 1.3, and perfScore=0.555222]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.5394 secs, and comparison 1.85927 sec, and warnIfPerfScore > 0.18, and perfScore=0.161124]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.4207 secs, and comparison 17.1672 sec, and warnIfPerfScore > 1.3, and perfScore=1.04547]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1907 secs, and comparison 13.1974 sec, and warnIfPerfScore > 1.2, and perfScore=1.08258]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 12.8758 secs, and comparison 2.37116 sec, and warnIfPerfScore > 0.33, and perfScore=0.184156]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 11.8181 secs, and comparison 54.9266 sec, and warnIfPerfScore > 6, and perfScore=4.64767]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.812 secs, and comparison 5.06731 sec, and warnIfPerfScore > 0.5, and perfScore=0.395511]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.2643 secs, and comparison 50.5393 sec, and warnIfPerfScore > 4.4, and perfScore=3.81016]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.7857 secs, and comparison 4.94422 sec, and warnIfPerfScore > 0.6, and perfScore=0.386699]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.786 secs, and comparison 41.0571 sec, and warnIfPerfScore > 1.5, and perfScore=1.3784]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.605 secs, and comparison 5.62773 sec, and warnIfPerfScore > 0.55, and perfScore=0.142096]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.30519 sec, and warnIfPerfScore > 0.25, and perfScore=0.420346]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.93197 sec, and warnIfPerfScore > 0.5, and perfScore=0.262131]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 37 seconds]]]

Succeeded
