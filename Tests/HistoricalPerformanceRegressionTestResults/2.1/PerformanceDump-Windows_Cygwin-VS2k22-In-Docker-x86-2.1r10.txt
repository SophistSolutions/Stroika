Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed May 11 18:58:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.2888 secs, and comparison 4.38226 sec, and warnIfPerfScore > 0.65, and perfScore=0.601232]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.4086 secs, and comparison 2.91055 sec, and warnIfPerfScore > 0.5, and perfScore=0.392861]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.67925 secs, and comparison 7.63334 sec, and warnIfPerfScore > 1.05, and perfScore=0.879493]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.93593 secs, and comparison 7.60162 sec, and warnIfPerfScore > 1.15, and perfScore=1.09598]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.88863 secs, and comparison 2.36181 sec, and warnIfPerfScore > 0.48, and perfScore=0.299394]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.8188 secs, and comparison 2.91258 sec, and warnIfPerfScore > 0.57, and perfScore=0.37251]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.16516 secs, and comparison 21.0887 sec, and warnIfPerfScore > 2.9, and perfScore=2.58277]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.21994 secs, and comparison 21.8506 sec, and warnIfPerfScore > 2.9, and perfScore=2.65824]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.82721 secs, and comparison 146.737 sec, and warnIfPerfScore > 24, and perfScore=18.747]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.35176 secs, and comparison 10.9626 sec, and warnIfPerfScore > 1.7, and perfScore=1.49116]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.62739 secs, and comparison 7.59345 sec, and warnIfPerfScore > 1.5, and perfScore=0.99555]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.1237 secs, and comparison 12.8716 sec, and warnIfPerfScore > 2.1, and perfScore=1.80687]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.87888 secs, and comparison 6.67844 sec, and warnIfPerfScore > 1.6, and perfScore=0.752172]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 9.04749 secs, and comparison 1.35958 sec, and warnIfPerfScore > 0.23, and perfScore=0.150272]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.6556 secs, and comparison 13.078 sec, and warnIfPerfScore > 1.3, and perfScore=1.03338]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.94187 secs, and comparison 5.52453 sec, and warnIfPerfScore > 1.2, and perfScore=0.555684]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.18835 secs, and comparison 1.45715 sec, and warnIfPerfScore > 0.33, and perfScore=0.235467]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.5818 secs, and comparison 39.567 sec, and warnIfPerfScore > 6, and perfScore=4.12939]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.51551 secs, and comparison 5.26968 sec, and warnIfPerfScore > 0.8, and perfScore=0.553799]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.46404 secs, and comparison 9.29121 sec, and warnIfPerfScore > 1.4, and perfScore=0.981738]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.18998 secs, and comparison 3.47569 sec, and warnIfPerfScore > 0.65, and perfScore=0.561504]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.97067 secs, and comparison 37.0209 sec, and warnIfPerfScore > 4.4, and perfScore=3.71298]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.28543 secs, and comparison 3.41806 sec, and warnIfPerfScore > 0.6, and perfScore=0.543807]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.32423 secs, and comparison 3.46098 sec, and warnIfPerfScore > 0.6, and perfScore=0.547257]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.22576 secs, and comparison 3.47323 sec, and warnIfPerfScore > 0.6, and perfScore=0.557881]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.30456 secs, and comparison 4.63287 sec, and warnIfPerfScore > 1.3, and perfScore=0.734844]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.7915 secs, and comparison 8.25403 sec, and warnIfPerfScore > 1.3, and perfScore=1.21535]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.4408 secs, and comparison 5.83532 sec, and warnIfPerfScore > 0.3, and perfScore=0.125651]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.15857 secs, and comparison 12.0324 sec, and warnIfPerfScore > 1.5, and perfScore=1.47481]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.45991 secs, and comparison 3.30053 sec, and warnIfPerfScore > 0.55, and perfScore=0.442435]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.757974 sec, and warnIfPerfScore > 0.1, and perfScore=0.0505316]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.09327 sec, and warnIfPerfScore > 0.5, and perfScore=0.206218]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.006 secs, and comparison 12.9372 sec, and warnIfPerfScore > 2, and perfScore=1.61593]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.94424 secs, and comparison 29.3003 sec, and warnIfPerfScore > 3.6, and perfScore=3.27588]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 38 seconds]]]

Succeeded
