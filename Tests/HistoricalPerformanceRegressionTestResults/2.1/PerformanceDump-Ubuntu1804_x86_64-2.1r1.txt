Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 20:43:57 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.97006 secs, and comparison 4.57388 sec, and warnIfPerfScore > 0.65, and perfScore=0.766136]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.88316 secs, and comparison 2.93367 sec, and warnIfPerfScore > 0.5, and perfScore=0.498656]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 7.75252 secs, and comparison 6.66493 sec, and warnIfPerfScore > 1.05, and perfScore=0.85971]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.87846 secs, and comparison 6.66812 sec, and warnIfPerfScore > 1.15, and perfScore=1.13433]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 3.77712 secs, and comparison 2.95916 sec, and warnIfPerfScore > 0.48, and perfScore=0.783442]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.41756 secs, and comparison 3.96752 sec, and warnIfPerfScore > 0.57, and perfScore=0.898125]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 3.45901 secs, and comparison 16.6336 sec, and warnIfPerfScore > 2.9, and perfScore=4.80877]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.02276 secs, and comparison 17.5296 sec, and warnIfPerfScore > 2.9, and perfScore=4.35761]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.482 secs, and comparison 53.2625 sec, and warnIfPerfScore > 24, and perfScore=11.8837]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.13586 secs, and comparison 10.2551 sec, and warnIfPerfScore > 1.6, and perfScore=1.99677]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.93649 secs, and comparison 5.64277 sec, and warnIfPerfScore > 1.5, and perfScore=0.950523]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.74688 secs, and comparison 12.0756 sec, and warnIfPerfScore > 2.1, and perfScore=4.3961]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 4.30014 secs, and comparison 4.16696 sec, and warnIfPerfScore > 1.6, and perfScore=0.969031]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.47862 secs, and comparison 1.7283 sec, and warnIfPerfScore > 0.23, and perfScore=0.385901]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.84772 secs, and comparison 4.70988 sec, and warnIfPerfScore > 1.3, and perfScore=1.22407]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.32218 secs, and comparison 6.80901 sec, and warnIfPerfScore > 1.2, and perfScore=2.04956]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15.5768 secs, and comparison 1.57872 sec, and warnIfPerfScore > 0.33, and perfScore=0.101351]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.12545 secs, and comparison 41.661 sec, and warnIfPerfScore > 6, and perfScore=13.3296]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.20916 secs, and comparison 6.47752 sec, and warnIfPerfScore > 0.8, and perfScore=2.01845]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.21638 secs, and comparison 7.789 sec, and warnIfPerfScore > 1.4, and perfScore=2.42166]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.591 secs, and comparison 3.63724 sec, and warnIfPerfScore > 0.65, and perfScore=0.343427]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.75315 secs, and comparison 37.4266 sec, and warnIfPerfScore > 4.4, and perfScore=6.50541]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.3075 secs, and comparison 3.60263 sec, and warnIfPerfScore > 0.6, and perfScore=0.318606]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.2782 secs, and comparison 3.59823 sec, and warnIfPerfScore > 0.6, and perfScore=0.293058]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.2969 secs, and comparison 3.56112 sec, and warnIfPerfScore > 0.6, and perfScore=0.289594]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.2525 secs, and comparison 4.22658 sec, and warnIfPerfScore > 1.3, and perfScore=0.344956]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 18.1238 secs, and comparison 10.0817 sec, and warnIfPerfScore > 1.3, and perfScore=0.556269]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 18.1573 secs, and comparison 7.03203 sec, and warnIfPerfScore > 0.3, and perfScore=0.387285]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.79331 secs, and comparison 12.3176 sec, and warnIfPerfScore > 1.5, and perfScore=1.58053]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.86573 secs, and comparison 2.66531 sec, and warnIfPerfScore > 0.55, and perfScore=0.388205]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.04366 sec, and warnIfPerfScore > 0.1, and perfScore=0.0695772]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.18189 sec, and warnIfPerfScore > 0.5, and perfScore=0.212126]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 47 seconds]]]

Succeeded
