Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 8:43:12 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.739 secs, and comparison 5.24474 sec, and warnIfPerfScore > 0.65, and perfScore=0.778266]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.73308 secs, and comparison 3.48023 sec, and warnIfPerfScore > 0.5, and perfScore=0.516885]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.68975 secs, and comparison 7.10213 sec, and warnIfPerfScore > 1.05, and perfScore=1.06164]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.01718 secs, and comparison 7.14743 sec, and warnIfPerfScore > 1.15, and perfScore=1.18784]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 3.81056 secs, and comparison 2.44033 sec, and warnIfPerfScore > 0.48, and perfScore=0.640413]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 4.71622 secs, and comparison 3.05216 sec, and warnIfPerfScore > 0.57, and perfScore=0.647163]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 3.44741 secs, and comparison 18.0851 sec, and warnIfPerfScore > 2.9, and perfScore=5.246]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 4.80601 secs, and comparison 18.7113 sec, and warnIfPerfScore > 2.9, and perfScore=3.89331]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 6.08721 secs, and comparison 64.7944 sec, and warnIfPerfScore > 24, and perfScore=10.6443]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.39653 secs, and comparison 10.5511 sec, and warnIfPerfScore > 1.7, and perfScore=1.95516]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.67066 secs, and comparison 6.07467 sec, and warnIfPerfScore > 1.5, and perfScore=0.910654]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 3.0443 secs, and comparison 12.9007 sec, and warnIfPerfScore > 2.1, and perfScore=4.23765]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 4.78759 secs, and comparison 3.82347 sec, and warnIfPerfScore > 1.6, and perfScore=0.79862]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.9744 secs, and comparison 1.70694 sec, and warnIfPerfScore > 0.23, and perfScore=0.343145]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.44764 secs, and comparison 5.33775 sec, and warnIfPerfScore > 1.3, and perfScore=1.20013]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.20422 secs, and comparison 8.26029 sec, and warnIfPerfScore > 1.2, and perfScore=2.57794]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 18.165 secs, and comparison 2.00774 sec, and warnIfPerfScore > 0.33, and perfScore=0.110528]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.34327 secs, and comparison 43.8313 sec, and warnIfPerfScore > 6, and perfScore=13.1103]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.7051 secs, and comparison 7.88393 sec, and warnIfPerfScore > 0.8, and perfScore=2.12786]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 3.33282 secs, and comparison 13.1217 sec, and warnIfPerfScore > 1.4, and perfScore=3.93713]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 19.4343 secs, and comparison 3.83795 sec, and warnIfPerfScore > 0.65, and perfScore=0.197484]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 4.81042 secs, and comparison 39.7663 sec, and warnIfPerfScore > 4.4, and perfScore=8.26672]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.2065 secs, and comparison 3.99392 sec, and warnIfPerfScore > 0.6, and perfScore=0.302421]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.0864 secs, and comparison 3.91836 sec, and warnIfPerfScore > 0.6, and perfScore=0.299423]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.2732 secs, and comparison 3.88037 sec, and warnIfPerfScore > 0.6, and perfScore=0.316166]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.3591 secs, and comparison 7.04457 sec, and warnIfPerfScore > 1.3, and perfScore=0.527324]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 25.5763 secs, and comparison 10.612 sec, and warnIfPerfScore > 1.3, and perfScore=0.414916]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 29.5339 secs, and comparison 9.10862 sec, and warnIfPerfScore > 0.3, and perfScore=0.308412]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.3809 secs, and comparison 14.2111 sec, and warnIfPerfScore > 1.5, and perfScore=1.36896]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.37259 secs, and comparison 2.76654 sec, and warnIfPerfScore > 0.55, and perfScore=0.434131]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.875976 sec, and warnIfPerfScore > 0.1, and perfScore=0.0583984]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.22659 sec, and warnIfPerfScore > 0.5, and perfScore=0.215106]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 11 seconds]]]

Succeeded
