Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr  1 2:16:36 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.99908 secs, and comparison 5.39571 sec, and warnIfPerfScore > 0.65, and perfScore=0.770918]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.6178 secs, and comparison 3.14335 sec, and warnIfPerfScore > 0.5, and perfScore=0.474985]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.6271 secs, and comparison 9.1033 sec, and warnIfPerfScore > 1.05, and perfScore=0.856611]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.23596 secs, and comparison 9.0365 sec, and warnIfPerfScore > 1.15, and perfScore=1.0972]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.7848 secs, and comparison 2.83665 sec, and warnIfPerfScore > 0.48, and perfScore=0.263023]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.5531 secs, and comparison 3.49688 sec, and warnIfPerfScore > 0.57, and perfScore=0.33136]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.28525 secs, and comparison 24.4257 sec, and warnIfPerfScore > 2.9, and perfScore=2.63059]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.60494 secs, and comparison 24.0068 sec, and warnIfPerfScore > 2.9, and perfScore=2.49942]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 8.13192 secs, and comparison 174.588 sec, and warnIfPerfScore > 24, and perfScore=21.4695]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.56672 secs, and comparison 12.2627 sec, and warnIfPerfScore > 1.7, and perfScore=1.6206]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.04021 secs, and comparison 7.73736 sec, and warnIfPerfScore > 1.5, and perfScore=0.962332]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 6.98508 secs, and comparison 15.0439 sec, and warnIfPerfScore > 2.1, and perfScore=2.15372]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.34006 secs, and comparison 6.21171 sec, and warnIfPerfScore > 1.6, and perfScore=0.665061]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 9.74086 secs, and comparison 0.906052 sec, and warnIfPerfScore > 0.23, and perfScore=0.0930157]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.4408 secs, and comparison 15.8332 sec, and warnIfPerfScore > 1.3, and perfScore=1.02541]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.6476 secs, and comparison 6.84899 sec, and warnIfPerfScore > 1.2, and perfScore=0.643241]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.1639 secs, and comparison 2.67286 sec, and warnIfPerfScore > 0.33, and perfScore=0.239421]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 10.2853 secs, and comparison 48.7089 sec, and warnIfPerfScore > 6, and perfScore=4.73578]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 10.3517 secs, and comparison 6.9984 sec, and warnIfPerfScore > 0.8, and perfScore=0.676066]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.6953 secs, and comparison 10.2343 sec, and warnIfPerfScore > 1.4, and perfScore=0.956898]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.2691 secs, and comparison 4.38186 sec, and warnIfPerfScore > 0.65, and perfScore=0.388838]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.8796 secs, and comparison 45.6039 sec, and warnIfPerfScore > 4.4, and perfScore=4.19167]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.9687 secs, and comparison 4.27305 sec, and warnIfPerfScore > 0.6, and perfScore=0.389568]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.0817 secs, and comparison 4.24924 sec, and warnIfPerfScore > 0.6, and perfScore=0.383447]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.0348 secs, and comparison 4.24681 sec, and warnIfPerfScore > 0.6, and perfScore=0.384857]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 10.902 secs, and comparison 6.47864 sec, and warnIfPerfScore > 1.3, and perfScore=0.59426]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 11.6717 secs, and comparison 10.7094 sec, and warnIfPerfScore > 1.3, and perfScore=0.917557]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 54.0085 secs, and comparison 8.1451 sec, and warnIfPerfScore > 0.3, and perfScore=0.150811]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.90033 secs, and comparison 12.6857 sec, and warnIfPerfScore > 1.5, and perfScore=1.60572]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.27593 secs, and comparison 3.47405 sec, and warnIfPerfScore > 0.55, and perfScore=0.419777]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.803096 sec, and warnIfPerfScore > 0.1, and perfScore=0.0535398]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.58991 sec, and warnIfPerfScore > 0.5, and perfScore=0.239328]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.29825 secs, and comparison 10.7582 sec, and warnIfPerfScore > 2, and perfScore=1.15701]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.9612 secs, and comparison 18.042 sec, and warnIfPerfScore > 3.6, and perfScore=1.81123]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 46 seconds]]]

Succeeded
