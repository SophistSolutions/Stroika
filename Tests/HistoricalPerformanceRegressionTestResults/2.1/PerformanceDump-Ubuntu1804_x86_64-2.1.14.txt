Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 4:23:39 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.93608 secs, and comparison 5.18628 sec, and warnIfPerfScore > 0.65, and perfScore=0.747726]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.36728 secs, and comparison 3.19011 sec, and warnIfPerfScore > 0.5, and perfScore=0.501016]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.9212 secs, and comparison 7.08894 sec, and warnIfPerfScore > 1.05, and perfScore=1.02424]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.15557 secs, and comparison 7.60446 sec, and warnIfPerfScore > 1.15, and perfScore=1.23538]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 4.39069 secs, and comparison 2.61302 sec, and warnIfPerfScore > 0.48, and perfScore=0.595128]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.57042 secs, and comparison 3.77282 sec, and warnIfPerfScore > 0.57, and perfScore=0.498363]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 4.03681 secs, and comparison 17.0858 sec, and warnIfPerfScore > 2.9, and perfScore=4.23249]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 4.458 secs, and comparison 18.4838 sec, and warnIfPerfScore > 2.9, and perfScore=4.1462]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 5.79977 secs, and comparison 55.9582 sec, and warnIfPerfScore > 24, and perfScore=9.64835]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.60735 secs, and comparison 10.7148 sec, and warnIfPerfScore > 1.7, and perfScore=1.91085]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.4743 secs, and comparison 6.70833 sec, and warnIfPerfScore > 1.5, and perfScore=0.640455]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 3.15128 secs, and comparison 12.2139 sec, and warnIfPerfScore > 2.1, and perfScore=3.87585]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 5.05848 secs, and comparison 4.44346 sec, and warnIfPerfScore > 1.6, and perfScore=0.878418]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.55966 secs, and comparison 2.45644 sec, and warnIfPerfScore > 0.23, and perfScore=0.374477]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.27378 secs, and comparison 6.3338 sec, and warnIfPerfScore > 1.3, and perfScore=1.201]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.88237 secs, and comparison 8.01973 sec, and warnIfPerfScore > 1.2, and perfScore=1.64259]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 20.3767 secs, and comparison 3.41022 sec, and warnIfPerfScore > 0.33, and perfScore=0.167359]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 5.11758 secs, and comparison 42.4481 sec, and warnIfPerfScore > 6, and perfScore=8.29457]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.43675 secs, and comparison 7.06055 sec, and warnIfPerfScore > 0.8, and perfScore=2.05442]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.16682 secs, and comparison 7.95111 sec, and warnIfPerfScore > 1.4, and perfScore=2.51076]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.2339 secs, and comparison 3.72124 sec, and warnIfPerfScore > 0.65, and perfScore=0.281191]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 6.21444 secs, and comparison 39.5585 sec, and warnIfPerfScore > 4.4, and perfScore=6.36557]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.2435 secs, and comparison 3.72175 sec, and warnIfPerfScore > 0.6, and perfScore=0.261294]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.4406 secs, and comparison 3.72541 sec, and warnIfPerfScore > 0.6, and perfScore=0.241274]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.6345 secs, and comparison 3.65185 sec, and warnIfPerfScore > 0.6, and perfScore=0.233577]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.5037 secs, and comparison 4.29692 sec, and warnIfPerfScore > 1.3, and perfScore=0.277154]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 22.6867 secs, and comparison 10.2444 sec, and warnIfPerfScore > 1.3, and perfScore=0.45156]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 18.7243 secs, and comparison 7.24964 sec, and warnIfPerfScore > 0.3, and perfScore=0.387177]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.2634 secs, and comparison 12.5366 sec, and warnIfPerfScore > 1.5, and perfScore=1.51713]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.01831 secs, and comparison 2.52753 sec, and warnIfPerfScore > 0.55, and perfScore=0.360134]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.874619 sec, and warnIfPerfScore > 0.1, and perfScore=0.058308]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.16354 sec, and warnIfPerfScore > 0.5, and perfScore=0.210903]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 56 seconds]]]

Succeeded
