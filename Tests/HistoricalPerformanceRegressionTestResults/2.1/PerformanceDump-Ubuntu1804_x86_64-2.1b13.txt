Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Aug 14 8:4:18 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.97048 secs, and comparison 4.59408 sec, and warnIfPerfScore > 0.62, and perfScore=0.769466]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.89392 secs, and comparison 2.9457 sec, and warnIfPerfScore > 0.5, and perfScore=0.499786]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.32219 secs, and comparison 6.702 sec, and warnIfPerfScore > 1.05, and perfScore=1.06008]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 3.80343 secs, and comparison 3.73694 sec, and warnIfPerfScore > 0.48, and perfScore=0.982517]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.50171 secs, and comparison 4.30925 sec, and warnIfPerfScore > 0.57, and perfScore=0.957247]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 5.47037 secs, and comparison 19.3858 sec, and warnIfPerfScore > 2.9, and perfScore=3.54379]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 6.32495 secs, and comparison 20.6489 sec, and warnIfPerfScore > 2.9, and perfScore=3.26467]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.53119 secs, and comparison 63.3958 sec, and warnIfPerfScore > 9.7, and perfScore=11.4615]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.6374 secs, and comparison 10.2665 sec, and warnIfPerfScore > 1.6, and perfScore=1.34424]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.80999 secs, and comparison 5.60924 sec, and warnIfPerfScore > 1.5, and perfScore=0.965448]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 2.86621 secs, and comparison 11.0984 sec, and warnIfPerfScore > 2.1, and perfScore=3.87215]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.34683 secs, and comparison 4.44844 sec, and warnIfPerfScore > 1.3, and perfScore=1.02338]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.53612 secs, and comparison 1.72911 sec, and warnIfPerfScore > 0.23, and perfScore=0.381187]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.9375 secs, and comparison 4.48947 sec, and warnIfPerfScore > 1.3, and perfScore=1.14019]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.28433 secs, and comparison 7.14057 sec, and warnIfPerfScore > 1.2, and perfScore=2.17413]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 15.7005 secs, and comparison 1.43909 sec, and warnIfPerfScore > 0.33, and perfScore=0.0916591]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.08714 secs, and comparison 42.1885 sec, and warnIfPerfScore > 6, and perfScore=13.6659]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.4651 secs, and comparison 3.76913 sec, and warnIfPerfScore > 0.5, and perfScore=0.360162]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.80135 secs, and comparison 37.9106 sec, and warnIfPerfScore > 4.4, and perfScore=6.53479]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.1953 secs, and comparison 3.77631 sec, and warnIfPerfScore > 0.6, and perfScore=0.309654]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.83983 secs, and comparison 11.5753 sec, and warnIfPerfScore > 1.5, and perfScore=1.47647]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.07962 secs, and comparison 2.42968 sec, and warnIfPerfScore > 0.55, and perfScore=0.343193]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 15 secs, and comparison 1.07346 sec, and warnIfPerfScore > 0.25, and perfScore=0.0715641]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.77096 sec, and warnIfPerfScore > 0.5, and perfScore=0.251397]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 57 seconds]]]

Succeeded
