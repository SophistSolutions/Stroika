Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 31 :31:18 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.40657 secs, and comparison 4.21235 sec, and warnIfPerfScore > 0.65, and perfScore=0.657506]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.657506}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.44883 secs, and comparison 2.77121 sec, and warnIfPerfScore > 0.5, and perfScore=0.429723]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.79292 secs, and comparison 7.60585 sec, and warnIfPerfScore > 1.05, and perfScore=0.864998]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.83639 secs, and comparison 7.67868 sec, and warnIfPerfScore > 1.15, and perfScore=1.12321]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.29694 secs, and comparison 2.14415 sec, and warnIfPerfScore > 0.48, and perfScore=0.258427]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.32062 secs, and comparison 2.58528 sec, and warnIfPerfScore > 0.57, and perfScore=0.310707]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.93926 secs, and comparison 21.3094 sec, and warnIfPerfScore > 2.9, and perfScore=2.3838]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.24569 secs, and comparison 22.0799 sec, and warnIfPerfScore > 2.9, and perfScore=2.38812]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.90134 secs, and comparison 146.366 sec, and warnIfPerfScore > 24, and perfScore=18.5243]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.59658 secs, and comparison 10.7206 sec, and warnIfPerfScore > 1.7, and perfScore=1.41124]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.39913 secs, and comparison 8.28046 sec, and warnIfPerfScore > 1.5, and perfScore=0.985872]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.75493 secs, and comparison 12.0227 sec, and warnIfPerfScore > 2.1, and perfScore=1.77984]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.38231 secs, and comparison 6.80319 sec, and warnIfPerfScore > 1.6, and perfScore=0.725109]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.88254 secs, and comparison 1.35521 sec, and warnIfPerfScore > 0.23, and perfScore=0.137131]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.031 secs, and comparison 12.989 sec, and warnIfPerfScore > 1.3, and perfScore=0.996775]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.72109 secs, and comparison 5.8793 sec, and warnIfPerfScore > 1.2, and perfScore=0.604799]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.94713 secs, and comparison 1.46976 sec, and warnIfPerfScore > 0.33, and perfScore=0.247138]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.42053 secs, and comparison 37.7829 sec, and warnIfPerfScore > 6, and perfScore=4.01069]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.34072 secs, and comparison 5.65343 sec, and warnIfPerfScore > 0.8, and perfScore=0.605246]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.38269 secs, and comparison 9.59104 sec, and warnIfPerfScore > 1.4, and perfScore=1.02221]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.04439 secs, and comparison 3.60158 sec, and warnIfPerfScore > 0.65, and perfScore=0.595855]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.88439 secs, and comparison 38.405 sec, and warnIfPerfScore > 4.4, and perfScore=3.88541]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.03887 secs, and comparison 3.30078 sec, and warnIfPerfScore > 0.6, and perfScore=0.54659]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.0401 secs, and comparison 3.27352 sec, and warnIfPerfScore > 0.6, and perfScore=0.541964]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.17026 secs, and comparison 3.31252 sec, and warnIfPerfScore > 0.6, and perfScore=0.536853]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 6.14556 secs, and comparison 5.06796 sec, and warnIfPerfScore > 1.3, and perfScore=0.824653]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.98718 secs, and comparison 8.83487 sec, and warnIfPerfScore > 1.3, and perfScore=1.26444]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 46.5981 secs, and comparison 5.7975 sec, and warnIfPerfScore > 0.3, and perfScore=0.124415]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.95923 secs, and comparison 11.6647 sec, and warnIfPerfScore > 1.5, and perfScore=1.46556]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.6439 secs, and comparison 2.83621 sec, and warnIfPerfScore > 0.55, and perfScore=0.371042]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.785102 sec, and warnIfPerfScore > 0.1, and perfScore=0.0523402]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.61156 sec, and warnIfPerfScore > 0.5, and perfScore=0.174104]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.32216 secs, and comparison 14.1947 sec, and warnIfPerfScore > 2, and perfScore=1.52268]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.186 secs, and comparison 27.421 sec, and warnIfPerfScore > 3.6, and perfScore=2.69203]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 37 seconds]]]

Succeeded
