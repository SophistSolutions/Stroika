Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 14:4:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.9191 secs, and comparison 7.24271 sec, and warnIfPerfScore > 0.65, and perfScore=0.663308]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.6483 secs, and comparison 4.68787 sec, and warnIfPerfScore > 0.5, and perfScore=0.440248]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 20.9664 secs, and comparison 13.9195 sec, and warnIfPerfScore > 1.05, and perfScore=0.663896]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6786 secs, and comparison 13.7182 sec, and warnIfPerfScore > 1.15, and perfScore=1.08199]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 33.7276 secs, and comparison 4.07422 sec, and warnIfPerfScore > 0.48, and perfScore=0.120798]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 34.5462 secs, and comparison 5.04207 sec, and warnIfPerfScore > 0.57, and perfScore=0.145952]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.6817 secs, and comparison 39.224 sec, and warnIfPerfScore > 2.9, and perfScore=1.6563]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 25.3101 secs, and comparison 45.4699 sec, and warnIfPerfScore > 2.9, and perfScore=1.79651]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 21.8025 secs, and comparison 134.574 sec, and warnIfPerfScore > 24, and perfScore=6.1724]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 22.0826 secs, and comparison 15.9784 sec, and warnIfPerfScore > 1.7, and perfScore=0.723576]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.52743 secs, and comparison 6.89151 sec, and warnIfPerfScore > 1.5, and perfScore=0.723334]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.3118 secs, and comparison 20.4039 sec, and warnIfPerfScore > 2.1, and perfScore=1.17862]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 14.1986 secs, and comparison 8.24566 sec, and warnIfPerfScore > 1.6, and perfScore=0.580737]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 14.3637 secs, and comparison 1.22653 sec, and warnIfPerfScore > 0.23, and perfScore=0.0853908]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.7712 secs, and comparison 18.7146 sec, and warnIfPerfScore > 1.3, and perfScore=1.05308]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.8957 secs, and comparison 15.8374 sec, and warnIfPerfScore > 1.2, and perfScore=1.22812]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.34386 secs, and comparison 2.31722 sec, and warnIfPerfScore > 0.33, and perfScore=0.247994]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 12.4591 secs, and comparison 56.7442 sec, and warnIfPerfScore > 6, and perfScore=4.55443]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0982 secs, and comparison 13.9781 sec, and warnIfPerfScore > 0.8, and perfScore=1.06717]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.724 secs, and comparison 16.5628 sec, and warnIfPerfScore > 1.4, and perfScore=1.3017]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.26506 secs, and comparison 5.09324 sec, and warnIfPerfScore > 0.65, and perfScore=0.549725]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 17.8383 secs, and comparison 52.4186 sec, and warnIfPerfScore > 4.4, and perfScore=2.93855]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.26452 secs, and comparison 4.71945 sec, and warnIfPerfScore > 0.6, and perfScore=0.509411]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.79711 secs, and comparison 4.864 sec, and warnIfPerfScore > 0.6, and perfScore=0.496473]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.2645 secs, and comparison 5.03154 sec, and warnIfPerfScore > 0.6, and perfScore=0.490188]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.5253 secs, and comparison 6.46387 sec, and warnIfPerfScore > 1.3, and perfScore=0.6786]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.5567 secs, and comparison 13.7632 sec, and warnIfPerfScore > 1.3, and perfScore=1.30374]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 141.401 secs, and comparison 8.64591 sec, and warnIfPerfScore > 0.3, and perfScore=0.0611447]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 39.1023 secs, and comparison 39.3146 sec, and warnIfPerfScore > 1.5, and perfScore=1.00543]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.57971 secs, and comparison 5.91078 sec, and warnIfPerfScore > 0.55, and perfScore=0.61701]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15 secs, and comparison 7.08159 sec, and warnIfPerfScore > 0.1, and perfScore=0.472106]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.71202 sec, and warnIfPerfScore > 0.5, and perfScore=0.180802]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 25 seconds]]]

Succeeded
