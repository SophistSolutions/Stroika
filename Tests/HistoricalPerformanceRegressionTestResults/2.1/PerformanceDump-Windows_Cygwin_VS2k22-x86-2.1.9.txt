Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 10 20:3:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.69604 secs, and comparison 4.60256 sec, and warnIfPerfScore > 0.65, and perfScore=0.598043]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.65527 secs, and comparison 3.04027 sec, and warnIfPerfScore > 0.5, and perfScore=0.397147]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.09174 secs, and comparison 7.92163 sec, and warnIfPerfScore > 1.05, and perfScore=0.871299]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.16452 secs, and comparison 7.91094 sec, and warnIfPerfScore > 1.15, and perfScore=1.10418]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 12.3812 secs, and comparison 2.44607 sec, and warnIfPerfScore > 0.48, and perfScore=0.197563]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.1624 secs, and comparison 2.97537 sec, and warnIfPerfScore > 0.57, and perfScore=0.244637]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.69074 secs, and comparison 22.0727 sec, and warnIfPerfScore > 2.9, and perfScore=2.5398]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.25886 secs, and comparison 22.7754 sec, and warnIfPerfScore > 2.9, and perfScore=2.45985]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.24173 secs, and comparison 154.477 sec, and warnIfPerfScore > 24, and perfScore=18.7433]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.68885 secs, and comparison 11.4598 sec, and warnIfPerfScore > 1.7, and perfScore=1.49045]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.11634 secs, and comparison 8.03926 sec, and warnIfPerfScore > 1.5, and perfScore=0.990502]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 123.237 secs, and comparison 13.4182 sec, and warnIfPerfScore > 2.1, and perfScore=0.108881]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.37067 secs, and comparison 6.96088 sec, and warnIfPerfScore > 1.6, and perfScore=0.742837]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.87781 secs, and comparison 1.40256 sec, and warnIfPerfScore > 0.23, and perfScore=0.141991]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.6094 secs, and comparison 13.8869 sec, and warnIfPerfScore > 1.3, and perfScore=1.02039]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.137 secs, and comparison 5.80786 sec, and warnIfPerfScore > 1.2, and perfScore=0.572939]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.57804 secs, and comparison 2.26678 sec, and warnIfPerfScore > 0.33, and perfScore=0.236665]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.72279 secs, and comparison 42.169 sec, and warnIfPerfScore > 6, and perfScore=4.33713]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.71474 secs, and comparison 5.56571 sec, and warnIfPerfScore > 0.8, and perfScore=0.572914]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.7139 secs, and comparison 9.67419 sec, and warnIfPerfScore > 1.4, and perfScore=0.995912]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.60074 secs, and comparison 3.80488 sec, and warnIfPerfScore > 0.65, and perfScore=0.396311]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.1033 secs, and comparison 39.413 sec, and warnIfPerfScore > 4.4, and perfScore=3.90101]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.49484 secs, and comparison 3.78453 sec, and warnIfPerfScore > 0.6, and perfScore=0.398588]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.47538 secs, and comparison 3.77849 sec, and warnIfPerfScore > 0.6, and perfScore=0.398769]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.49445 secs, and comparison 3.79911 sec, and warnIfPerfScore > 0.6, and perfScore=0.40014]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.49247 secs, and comparison 5.11408 sec, and warnIfPerfScore > 1.3, and perfScore=0.538752]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.1616 secs, and comparison 9.03534 sec, and warnIfPerfScore > 1.3, and perfScore=0.889169]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.553 secs, and comparison 6.35452 sec, and warnIfPerfScore > 0.3, and perfScore=0.13363]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.84983 secs, and comparison 12.2512 sec, and warnIfPerfScore > 1.5, and perfScore=1.5607]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.5607}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.95977 secs, and comparison 3.2047 sec, and warnIfPerfScore > 0.55, and perfScore=0.402611]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.839728 sec, and warnIfPerfScore > 0.1, and perfScore=0.0559819]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.06062 sec, and warnIfPerfScore > 0.5, and perfScore=0.204041]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.78607 secs, and comparison 14.2046 sec, and warnIfPerfScore > 2, and perfScore=1.61672]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.60296 secs, and comparison 30.8549 sec, and warnIfPerfScore > 3.6, and perfScore=3.58655]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 41 seconds]]]

Succeeded
