Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 11:37:31 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.71387 secs, and comparison 4.08693 sec, and warnIfPerfScore > 0.65, and perfScore=0.608729]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.80475 secs, and comparison 2.64855 sec, and warnIfPerfScore > 0.5, and perfScore=0.38922]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.33267 secs, and comparison 7.13556 sec, and warnIfPerfScore > 1.05, and perfScore=0.856335]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.5101 secs, and comparison 7.15907 sec, and warnIfPerfScore > 1.15, and perfScore=1.09969]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.13878 secs, and comparison 2.10674 sec, and warnIfPerfScore > 0.48, and perfScore=0.258853]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.10372 secs, and comparison 2.53885 sec, and warnIfPerfScore > 0.57, and perfScore=0.313294]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 8.71879 secs, and comparison 19.6154 sec, and warnIfPerfScore > 2.9, and perfScore=2.24979]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.80145 secs, and comparison 20.6442 sec, and warnIfPerfScore > 2.9, and perfScore=2.34555]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 8.52357 secs, and comparison 139.161 sec, and warnIfPerfScore > 24, and perfScore=16.3267]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.31136 secs, and comparison 10.0093 sec, and warnIfPerfScore > 1.7, and perfScore=1.369]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.86529 secs, and comparison 7.73332 sec, and warnIfPerfScore > 1.5, and perfScore=0.983222]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.83541 secs, and comparison 11.8183 sec, and warnIfPerfScore > 2.1, and perfScore=1.72898]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.30044 secs, and comparison 7.44033 sec, and warnIfPerfScore > 1.6, and perfScore=0.799998]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.70438 secs, and comparison 1.29702 sec, and warnIfPerfScore > 0.23, and perfScore=0.133653]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4725 secs, and comparison 12.5582 sec, and warnIfPerfScore > 1.3, and perfScore=1.00687]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.69374 secs, and comparison 5.31604 sec, and warnIfPerfScore > 1.2, and perfScore=0.548399]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.98177 secs, and comparison 1.51054 sec, and warnIfPerfScore > 0.33, and perfScore=0.252524]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.29133 secs, and comparison 37.4699 sec, and warnIfPerfScore > 6, and perfScore=4.03279]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.33841 secs, and comparison 5.20993 sec, and warnIfPerfScore > 0.8, and perfScore=0.557904]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.28817 secs, and comparison 9.46224 sec, and warnIfPerfScore > 1.4, and perfScore=1.01874]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.02918 secs, and comparison 3.26341 sec, and warnIfPerfScore > 0.65, and perfScore=0.541268]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.66011 secs, and comparison 34.9587 sec, and warnIfPerfScore > 4.4, and perfScore=3.61887]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.25275 secs, and comparison 3.2441 sec, and warnIfPerfScore > 0.6, and perfScore=0.518827]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.16188 secs, and comparison 3.24697 sec, and warnIfPerfScore > 0.6, and perfScore=0.526944]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.12717 secs, and comparison 3.26224 sec, and warnIfPerfScore > 0.6, and perfScore=0.532422]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.13074 secs, and comparison 4.69003 sec, and warnIfPerfScore > 1.3, and perfScore=0.765002]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.73256 secs, and comparison 8.29917 sec, and warnIfPerfScore > 1.3, and perfScore=1.23269]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.6452 secs, and comparison 5.62565 sec, and warnIfPerfScore > 0.3, and perfScore=0.126008]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.44337 secs, and comparison 11.5175 sec, and warnIfPerfScore > 1.5, and perfScore=1.36409]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.08311 secs, and comparison 2.72044 sec, and warnIfPerfScore > 0.55, and perfScore=0.384074]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.764467 sec, and warnIfPerfScore > 0.1, and perfScore=0.0509645]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.87674 sec, and warnIfPerfScore > 0.5, and perfScore=0.191783]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.10532 secs, and comparison 13.3917 sec, and warnIfPerfScore > 2, and perfScore=1.65221]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 8.91403 secs, and comparison 27.6806 sec, and warnIfPerfScore > 3.6, and perfScore=3.10529]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 15 seconds]]]

Succeeded
