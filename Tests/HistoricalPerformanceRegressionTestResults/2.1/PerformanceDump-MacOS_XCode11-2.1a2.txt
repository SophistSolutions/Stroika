Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 25 5:48:45 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.10769 secs, and comparison 6.57743 sec, and warnIfPerfScore > 0.62, and perfScore=0.722184]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.02594 secs, and comparison 4.37976 sec, and warnIfPerfScore > 0.5, and perfScore=0.485242]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 16.5802 secs, and comparison 12.4886 sec, and warnIfPerfScore > 1.05, and perfScore=0.753222]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 32.5342 secs, and comparison 5.9954 sec, and warnIfPerfScore > 0.48, and perfScore=0.18428]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 32.7996 secs, and comparison 6.0092 sec, and warnIfPerfScore > 0.55, and perfScore=0.18321]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 22.3402 secs, and comparison 58.2348 sec, and warnIfPerfScore > 2.9, and perfScore=2.60673]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 23.4803 secs, and comparison 59.1546 sec, and warnIfPerfScore > 2.9, and perfScore=2.51932]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 18.3404 secs, and comparison 172.157 sec, and warnIfPerfScore > 9.7, and perfScore=9.38679]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 24.1115 secs, and comparison 28.865 sec, and warnIfPerfScore > 1.6, and perfScore=1.19714]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.27478 secs, and comparison 7.01662 sec, and warnIfPerfScore > 1.5, and perfScore=0.756527]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 16.8357 secs, and comparison 36.0882 sec, and warnIfPerfScore > 2.1, and perfScore=2.14355]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 15.4516 secs, and comparison 7.55766 sec, and warnIfPerfScore > 1.3, and perfScore=0.489118]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 14.8831 secs, and comparison 2.18769 sec, and warnIfPerfScore > 0.18, and perfScore=0.146991]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.8662 secs, and comparison 19.6315 sec, and warnIfPerfScore > 1.3, and perfScore=1.09881]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8568 secs, and comparison 13.6589 sec, and warnIfPerfScore > 1.2, and perfScore=1.06239]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.9313 secs, and comparison 3.30518 sec, and warnIfPerfScore > 0.33, and perfScore=0.237249]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 13.3434 secs, and comparison 58.44 sec, and warnIfPerfScore > 6, and perfScore=4.3797]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.1841 secs, and comparison 5.0326 sec, and warnIfPerfScore > 0.5, and perfScore=0.354805]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 15.7084 secs, and comparison 50.8679 sec, and warnIfPerfScore > 4.4, and perfScore=3.23826]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.996 secs, and comparison 4.91743 sec, and warnIfPerfScore > 0.6, and perfScore=0.351345]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 34.343 secs, and comparison 47.9405 sec, and warnIfPerfScore > 1.5, and perfScore=1.39593]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.79119 secs, and comparison 6.21671 sec, and warnIfPerfScore > 0.55, and perfScore=0.797915]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.33871 sec, and warnIfPerfScore > 0.25, and perfScore=0.422581]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.83443 sec, and warnIfPerfScore > 0.5, and perfScore=0.255629]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 4 seconds]]]

Succeeded
