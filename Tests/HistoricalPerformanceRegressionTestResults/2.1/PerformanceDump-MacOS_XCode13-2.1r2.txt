Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 18:45:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.67268 secs, and comparison 6.44487 sec, and warnIfPerfScore > 0.65, and perfScore=0.666296]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.6853 secs, and comparison 4.3342 sec, and warnIfPerfScore > 0.5, and perfScore=0.447503]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 16.9995 secs, and comparison 12.8643 sec, and warnIfPerfScore > 1.05, and perfScore=0.756748]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.362 secs, and comparison 13.0362 sec, and warnIfPerfScore > 1.15, and perfScore=1.14735]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 33.9252 secs, and comparison 4.92436 sec, and warnIfPerfScore > 0.48, and perfScore=0.145153]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 35.8563 secs, and comparison 5.7923 sec, and warnIfPerfScore > 0.57, and perfScore=0.161542]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 26.1482 secs, and comparison 39.0707 sec, and warnIfPerfScore > 2.9, and perfScore=1.4942]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 26.7374 secs, and comparison 45.4248 sec, and warnIfPerfScore > 2.9, and perfScore=1.69893]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 18.3296 secs, and comparison 135.783 sec, and warnIfPerfScore > 24, and perfScore=7.40787]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 27.4543 secs, and comparison 17.6261 sec, and warnIfPerfScore > 1.7, and perfScore=0.642015]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.7354 secs, and comparison 7.68492 sec, and warnIfPerfScore > 1.5, and perfScore=0.715848]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.0131 secs, and comparison 21.475 sec, and warnIfPerfScore > 2.1, and perfScore=1.12948]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 15.7674 secs, and comparison 8.36855 sec, and warnIfPerfScore > 1.6, and perfScore=0.530748]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 15.6894 secs, and comparison 1.40413 sec, and warnIfPerfScore > 0.23, and perfScore=0.0894952]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 19.351 secs, and comparison 19.0273 sec, and warnIfPerfScore > 1.3, and perfScore=0.983273]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.0865 secs, and comparison 14.2282 sec, and warnIfPerfScore > 1.2, and perfScore=1.1772]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.0417 secs, and comparison 2.80588 sec, and warnIfPerfScore > 0.33, and perfScore=0.279424]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 12.9811 secs, and comparison 57.4399 sec, and warnIfPerfScore > 6, and perfScore=4.42489]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.593 secs, and comparison 16.0902 sec, and warnIfPerfScore > 0.8, and perfScore=1.2777]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.837 secs, and comparison 17.5247 sec, and warnIfPerfScore > 1.4, and perfScore=1.36517]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.67423 secs, and comparison 5.07185 sec, and warnIfPerfScore > 0.65, and perfScore=0.524264]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 20.1035 secs, and comparison 54.2483 sec, and warnIfPerfScore > 4.4, and perfScore=2.69845]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.37799 secs, and comparison 4.70931 sec, and warnIfPerfScore > 0.6, and perfScore=0.502166]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.40469 secs, and comparison 4.85661 sec, and warnIfPerfScore > 0.6, and perfScore=0.516403]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.50796 secs, and comparison 4.63915 sec, and warnIfPerfScore > 0.6, and perfScore=0.487923]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.31756 secs, and comparison 6.88915 sec, and warnIfPerfScore > 1.3, and perfScore=0.739372]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.7322 secs, and comparison 14.5984 sec, and warnIfPerfScore > 1.3, and perfScore=1.36025]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 149.194 secs, and comparison 8.53716 sec, and warnIfPerfScore > 0.3, and perfScore=0.0572218]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 41.4315 secs, and comparison 35.8124 sec, and warnIfPerfScore > 1.5, and perfScore=0.864376]
	                 	String Characters::Format is FASTER

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.95658 secs, and comparison 4.75749 sec, and warnIfPerfScore > 0.55, and perfScore=0.597932]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15 secs, and comparison 7.09998 sec, and warnIfPerfScore > 0.1, and perfScore=0.473332]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.5612 sec, and warnIfPerfScore > 0.5, and perfScore=0.170747]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 48 seconds]]]

Succeeded
