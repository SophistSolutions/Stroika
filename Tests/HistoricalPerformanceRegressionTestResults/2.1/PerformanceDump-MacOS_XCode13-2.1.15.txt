Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 29 19:17:13 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.47858 secs, and comparison 6.82707 sec, and warnIfPerfScore > 0.65, and perfScore=0.720263]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.62275 secs, and comparison 4.78441 sec, and warnIfPerfScore > 0.5, and perfScore=0.497197]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 17.2085 secs, and comparison 12.2644 sec, and warnIfPerfScore > 1.05, and perfScore=0.712693]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.3792 secs, and comparison 13.2504 sec, and warnIfPerfScore > 1.15, and perfScore=1.16445]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 35.8079 secs, and comparison 4.24889 sec, and warnIfPerfScore > 0.48, and perfScore=0.118658]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 34.3115 secs, and comparison 5.08833 sec, and warnIfPerfScore > 0.57, and perfScore=0.148298]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 22.195 secs, and comparison 38.3283 sec, and warnIfPerfScore > 2.9, and perfScore=1.72689]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 26.4325 secs, and comparison 43.0327 sec, and warnIfPerfScore > 2.9, and perfScore=1.62802]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 19.594 secs, and comparison 136.228 sec, and warnIfPerfScore > 24, and perfScore=6.95254]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 22.4577 secs, and comparison 15.991 sec, and warnIfPerfScore > 1.7, and perfScore=0.712049]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.81394 secs, and comparison 7.0857 sec, and warnIfPerfScore > 1.5, and perfScore=0.722004]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.6685 secs, and comparison 20.372 sec, and warnIfPerfScore > 2.1, and perfScore=1.30019]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.0517 secs, and comparison 6.85985 sec, and warnIfPerfScore > 1.6, and perfScore=0.525589]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 13.3123 secs, and comparison 1.2024 sec, and warnIfPerfScore > 0.23, and perfScore=0.0903223]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 19.2145 secs, and comparison 18.6318 sec, and warnIfPerfScore > 1.3, and perfScore=0.969677]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.6566 secs, and comparison 14.9604 sec, and warnIfPerfScore > 1.2, and perfScore=1.09547]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 9.39358 secs, and comparison 2.55307 sec, and warnIfPerfScore > 0.33, and perfScore=0.271789]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 15.638 secs, and comparison 58.2304 sec, and warnIfPerfScore > 6, and perfScore=3.72365]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.2965 secs, and comparison 15.6069 sec, and warnIfPerfScore > 0.8, and perfScore=1.17376]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.7963 secs, and comparison 16.3954 sec, and warnIfPerfScore > 1.4, and perfScore=1.10808]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.68933 secs, and comparison 5.20421 sec, and warnIfPerfScore > 0.65, and perfScore=0.59892]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 18.3284 secs, and comparison 51.5129 sec, and warnIfPerfScore > 4.4, and perfScore=2.81056]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 8.76552 secs, and comparison 4.41218 sec, and warnIfPerfScore > 0.6, and perfScore=0.503357]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 8.54217 secs, and comparison 4.41468 sec, and warnIfPerfScore > 0.6, and perfScore=0.51681]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 8.52313 secs, and comparison 4.53766 sec, and warnIfPerfScore > 0.6, and perfScore=0.532393]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.76726 secs, and comparison 6.06514 sec, and warnIfPerfScore > 1.3, and perfScore=0.620966]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.98843 secs, and comparison 16.3488 sec, and warnIfPerfScore > 1.3, and perfScore=1.63678]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 157.248 secs, and comparison 8.33359 sec, and warnIfPerfScore > 0.3, and perfScore=0.0529966]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 29.7354 secs, and comparison 31.3548 sec, and warnIfPerfScore > 1.5, and perfScore=1.05446]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.96643 secs, and comparison 5.43894 sec, and warnIfPerfScore > 0.55, and perfScore=0.682733]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15 secs, and comparison 7.02398 sec, and warnIfPerfScore > 0.1, and perfScore=0.468265]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.53737 sec, and warnIfPerfScore > 0.5, and perfScore=0.169158]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 11 seconds]]]

Succeeded
