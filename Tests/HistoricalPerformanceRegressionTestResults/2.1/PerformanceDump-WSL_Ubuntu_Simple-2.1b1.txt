Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jun  8 :50:11 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.33694 secs, and comparison 4.60096 sec, and warnIfPerfScore > 0.62, and perfScore=0.862096]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.43442 secs, and comparison 2.94405 sec, and warnIfPerfScore > 0.5, and perfScore=0.541741]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.34313 secs, and comparison 6.88256 sec, and warnIfPerfScore > 1.05, and perfScore=1.08504]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.74343 secs, and comparison 3.49774 sec, and warnIfPerfScore > 0.48, and perfScore=0.934367]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.48862 secs, and comparison 4.08256 sec, and warnIfPerfScore > 0.57, and perfScore=0.909536]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.95147 secs, and comparison 30.6108 sec, and warnIfPerfScore > 2.9, and perfScore=3.41964]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 10.138 secs, and comparison 32.7947 sec, and warnIfPerfScore > 2.9, and perfScore=3.23482]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	30
	DETAILS:         	[baseline test 12.1936 secs, and comparison 367.486 sec, and warnIfPerfScore > 9.7, and perfScore=30.1375]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.99898 secs, and comparison 9.41964 sec, and warnIfPerfScore > 1.6, and perfScore=1.88431]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 22.2604 secs, and comparison 21.985 sec, and warnIfPerfScore > 1.5, and perfScore=0.987629]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.76975 secs, and comparison 10.4237 sec, and warnIfPerfScore > 2.1, and perfScore=3.76342]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 6.7095 secs, and comparison 4.25018 sec, and warnIfPerfScore > 1.3, and perfScore=0.633457]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.3793 secs, and comparison 2.82875 sec, and warnIfPerfScore > 0.23, and perfScore=0.383335]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.2877 secs, and comparison 4.58554 sec, and warnIfPerfScore > 1.3, and perfScore=1.06946]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 23.019 secs, and comparison 10.7973 sec, and warnIfPerfScore > 1.2, and perfScore=0.46906]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.017
	DETAILS:         	[baseline test 92.6949 secs, and comparison 1.56683 sec, and warnIfPerfScore > 0.33, and perfScore=0.0169031]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 21.8776 secs, and comparison 41.9262 sec, and warnIfPerfScore > 6, and perfScore=1.9164]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 48.4249 secs, and comparison 3.80388 sec, and warnIfPerfScore > 0.5, and perfScore=0.078552]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.3545 secs, and comparison 39.1506 sec, and warnIfPerfScore > 4.4, and perfScore=1.75135]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 65.8462 secs, and comparison 3.7569 sec, and warnIfPerfScore > 0.6, and perfScore=0.0570557]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.36654 secs, and comparison 14.3972 sec, and warnIfPerfScore > 1.5, and perfScore=1.9544]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.06516 secs, and comparison 2.12964 sec, and warnIfPerfScore > 0.55, and perfScore=0.264054]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.12038 sec, and warnIfPerfScore > 0.25, and perfScore=0.074692]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.81966 sec, and warnIfPerfScore > 0.5, and perfScore=0.254644]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 7 seconds]]]

Succeeded
