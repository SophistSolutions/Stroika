Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jun 25 6:14:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.88317 secs, and comparison 4.22954 sec, and warnIfPerfScore > 0.65, and perfScore=0.614475]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.92244 secs, and comparison 2.65166 sec, and warnIfPerfScore > 0.5, and perfScore=0.383053]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.50866 secs, and comparison 7.26409 sec, and warnIfPerfScore > 1.05, and perfScore=0.853729]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.57174 secs, and comparison 7.26905 sec, and warnIfPerfScore > 1.15, and perfScore=1.10611]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.86258 secs, and comparison 2.17679 sec, and warnIfPerfScore > 0.48, and perfScore=0.276855]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.97598 secs, and comparison 2.62836 sec, and warnIfPerfScore > 0.57, and perfScore=0.329534]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.44013 secs, and comparison 20.0326 sec, and warnIfPerfScore > 2.9, and perfScore=2.3735]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.3562 secs, and comparison 20.6851 sec, and warnIfPerfScore > 2.9, and perfScore=2.47542]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.80693 secs, and comparison 145.471 sec, and warnIfPerfScore > 24, and perfScore=18.6336]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.39572 secs, and comparison 10.4656 sec, and warnIfPerfScore > 1.7, and perfScore=1.41508]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.50323 secs, and comparison 7.50481 sec, and warnIfPerfScore > 1.5, and perfScore=1.00021]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.02164 secs, and comparison 12.003 sec, and warnIfPerfScore > 2.1, and perfScore=1.70943]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 8.42961 secs, and comparison 6.61521 sec, and warnIfPerfScore > 1.6, and perfScore=0.784759]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.94966 secs, and comparison 1.27021 sec, and warnIfPerfScore > 0.23, and perfScore=0.141929]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.6003 secs, and comparison 13.1665 sec, and warnIfPerfScore > 1.3, and perfScore=1.04493]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.0188 secs, and comparison 5.43116 sec, and warnIfPerfScore > 1.2, and perfScore=0.542097]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.06097 secs, and comparison 1.45236 sec, and warnIfPerfScore > 0.33, and perfScore=0.239626]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.59875 secs, and comparison 38.807 sec, and warnIfPerfScore > 6, and perfScore=4.04292]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.69458 secs, and comparison 5.24722 sec, and warnIfPerfScore > 0.8, and perfScore=0.541253]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.62207 secs, and comparison 9.04959 sec, and warnIfPerfScore > 1.4, and perfScore=0.940504]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.08323 secs, and comparison 3.39202 sec, and warnIfPerfScore > 0.65, and perfScore=0.557601]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.0347 secs, and comparison 36.2115 sec, and warnIfPerfScore > 4.4, and perfScore=3.60861]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.26936 secs, and comparison 3.36925 sec, and warnIfPerfScore > 0.6, and perfScore=0.537414]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.29015 secs, and comparison 3.35815 sec, and warnIfPerfScore > 0.6, and perfScore=0.533874]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.26698 secs, and comparison 3.40502 sec, and warnIfPerfScore > 0.6, and perfScore=0.543327]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.24888 secs, and comparison 4.68436 sec, and warnIfPerfScore > 1.3, and perfScore=0.749632]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.75159 secs, and comparison 8.33876 sec, and warnIfPerfScore > 1.3, and perfScore=1.23508]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.104 secs, and comparison 6.02049 sec, and warnIfPerfScore > 0.3, and perfScore=0.127813]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.19335 secs, and comparison 11.7796 sec, and warnIfPerfScore > 1.5, and perfScore=1.4377]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.58519 secs, and comparison 3.37143 sec, and warnIfPerfScore > 0.55, and perfScore=0.444475]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.775222 sec, and warnIfPerfScore > 0.1, and perfScore=0.0516815]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.10552 sec, and warnIfPerfScore > 0.5, and perfScore=0.207035]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.0287 secs, and comparison 13.0247 sec, and warnIfPerfScore > 2, and perfScore=1.62226]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.91888 secs, and comparison 29.3566 sec, and warnIfPerfScore > 3.6, and perfScore=3.29151]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 28 seconds]]]

Succeeded
