Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 21 12:53:46 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.02192 secs, and comparison 4.1976 sec, and warnIfPerfScore > 0.62, and perfScore=0.597785]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.89699 secs, and comparison 2.60905 sec, and warnIfPerfScore > 0.5, and perfScore=0.378288]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.2732 secs, and comparison 7.15912 sec, and warnIfPerfScore > 1.05, and perfScore=0.865339]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.70055 secs, and comparison 7.15009 sec, and warnIfPerfScore > 1.15, and perfScore=1.06709]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 7.4599 secs, and comparison 2.40208 sec, and warnIfPerfScore > 0.48, and perfScore=0.321998]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.54971 secs, and comparison 2.95013 sec, and warnIfPerfScore > 0.57, and perfScore=0.390761]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.70612 secs, and comparison 19.9789 sec, and warnIfPerfScore > 2.9, and perfScore=2.59261]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.58781 secs, and comparison 20.5452 sec, and warnIfPerfScore > 2.9, and perfScore=2.70765]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 7.33252 secs, and comparison 66.0138 sec, and warnIfPerfScore > 9.7, and perfScore=9.00288]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.69371 secs, and comparison 10.8389 sec, and warnIfPerfScore > 1.6, and perfScore=1.61927]
	                 	String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.6 and got 1.61927}}}

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.27112 secs, and comparison 8.10487 sec, and warnIfPerfScore > 1.5, and perfScore=0.979899]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.79843 secs, and comparison 12.0728 sec, and warnIfPerfScore > 2.1, and perfScore=1.77582]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 8.90641 secs, and comparison 7.1133 sec, and warnIfPerfScore > 1.3, and perfScore=0.798672]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.44742 secs, and comparison 1.26679 sec, and warnIfPerfScore > 0.23, and perfScore=0.134088]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3276 secs, and comparison 12.796 sec, and warnIfPerfScore > 1.3, and perfScore=1.038]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.78142 secs, and comparison 5.46731 sec, and warnIfPerfScore > 1.2, and perfScore=0.558949]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.98245 secs, and comparison 1.4443 sec, and warnIfPerfScore > 0.33, and perfScore=0.241422]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.29496 secs, and comparison 37.8717 sec, and warnIfPerfScore > 6, and perfScore=4.07444]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.33865 secs, and comparison 5.28565 sec, and warnIfPerfScore > 0.8, and perfScore=0.565998]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.35874 secs, and comparison 8.7875 sec, and warnIfPerfScore > 0.9, and perfScore=0.938961]
	                 	Sequence_stdvector<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.9 and got 0.938961}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.89935 secs, and comparison 3.27035 sec, and warnIfPerfScore > 0.5, and perfScore=0.554358]
	                 	Sequence_DoublyLinkedList<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.5 and got 0.554358}}}

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.2617 secs, and comparison 35.5896 sec, and warnIfPerfScore > 4.4, and perfScore=3.84266]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.05097 secs, and comparison 4.48828 sec, and warnIfPerfScore > 0.6, and perfScore=0.741744]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.741744}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 43.0235 secs, and comparison 5.75832 sec, and warnIfPerfScore > 0.2, and perfScore=0.133841]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.08585 secs, and comparison 11.6273 sec, and warnIfPerfScore > 1.5, and perfScore=1.43798]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.81057 secs, and comparison 2.672 sec, and warnIfPerfScore > 0.55, and perfScore=0.392331]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.889483 sec, and warnIfPerfScore > 0.25, and perfScore=0.0592989]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.82485 sec, and warnIfPerfScore > 0.5, and perfScore=0.188323]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.72411 secs, and comparison 8.43757 sec, and warnIfPerfScore > 2, and perfScore=1.09237]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.10203 secs, and comparison 28.4905 sec, and warnIfPerfScore > 3.1, and perfScore=3.13013]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 3.13013}}}

[[[Tests took: 10 minutes, 8 seconds]]]

Succeeded
