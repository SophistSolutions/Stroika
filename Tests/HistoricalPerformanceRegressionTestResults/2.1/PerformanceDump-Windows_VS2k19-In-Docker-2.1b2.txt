Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Aug  2 21:12:35 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 12.8163 secs, and comparison 5.91238 sec, and warnIfPerfScore > 0.62, and perfScore=0.461318]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.8433 secs, and comparison 3.99164 sec, and warnIfPerfScore > 0.5, and perfScore=0.310796]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 12.0324 secs, and comparison 10.2864 sec, and warnIfPerfScore > 1.05, and perfScore=0.854891]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.236 secs, and comparison 4.58606 sec, and warnIfPerfScore > 0.48, and perfScore=0.408156]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.323 secs, and comparison 5.12696 sec, and warnIfPerfScore > 0.57, and perfScore=0.452791]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.7714 secs, and comparison 27.5936 sec, and warnIfPerfScore > 2.9, and perfScore=2.16058]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.1361 secs, and comparison 30.3359 sec, and warnIfPerfScore > 2.9, and perfScore=2.30935]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 13.1742 secs, and comparison 98.8828 sec, and warnIfPerfScore > 9.7, and perfScore=7.50581]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1639 secs, and comparison 12.9512 sec, and warnIfPerfScore > 1.6, and perfScore=1.1601]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.6121 secs, and comparison 14.6326 sec, and warnIfPerfScore > 1.5, and perfScore=1.0014]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.31597 secs, and comparison 14.1847 sec, and warnIfPerfScore > 2.1, and perfScore=1.52262]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 13.8784 secs, and comparison 10.2948 sec, and warnIfPerfScore > 1.3, and perfScore=0.741786]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 14.5177 secs, and comparison 3.05796 sec, and warnIfPerfScore > 0.23, and perfScore=0.210636]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 17.3113 secs, and comparison 15.3203 sec, and warnIfPerfScore > 1.3, and perfScore=0.884989]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 11.1358 secs, and comparison 8.61727 sec, and warnIfPerfScore > 1.2, and perfScore=0.773831]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.9051 secs, and comparison 2.23741 sec, and warnIfPerfScore > 0.33, and perfScore=0.205171]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 10.8481 secs, and comparison 50.6091 sec, and warnIfPerfScore > 6, and perfScore=4.66527]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.9736 secs, and comparison 4.99559 sec, and warnIfPerfScore > 0.5, and perfScore=0.455236]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 12.0041 secs, and comparison 44.9786 sec, and warnIfPerfScore > 4.4, and perfScore=3.74695]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.4691 secs, and comparison 5.025 sec, and warnIfPerfScore > 0.6, and perfScore=0.438134]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.7874 secs, and comparison 23.5681 sec, and warnIfPerfScore > 1.5, and perfScore=1.19106]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.3807 secs, and comparison 4.92443 sec, and warnIfPerfScore > 0.55, and perfScore=0.432701]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.73346 sec, and warnIfPerfScore > 0.25, and perfScore=0.115564]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.07586 sec, and warnIfPerfScore > 0.5, and perfScore=0.271724]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.3277 secs, and comparison 21.5941 sec, and warnIfPerfScore > 2, and perfScore=1.75167]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.0032 secs, and comparison 36.9957 sec, and warnIfPerfScore > 3.1, and perfScore=2.84512]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 54 seconds]]]

Succeeded
