Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 31 15:43:17 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.0221 secs, and comparison 7.01791 sec, and warnIfPerfScore > 0.65, and perfScore=0.636715]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.3704 secs, and comparison 4.52929 sec, and warnIfPerfScore > 0.5, and perfScore=0.366138]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 15.0322 secs, and comparison 12.7026 sec, and warnIfPerfScore > 1.05, and perfScore=0.845026]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1046 secs, and comparison 12.7376 sec, and warnIfPerfScore > 1.15, and perfScore=1.0523]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.9722 secs, and comparison 3.84592 sec, and warnIfPerfScore > 0.48, and perfScore=0.240788]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 18.038 secs, and comparison 4.90745 sec, and warnIfPerfScore > 0.57, and perfScore=0.272063]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 17.0655 secs, and comparison 35.899 sec, and warnIfPerfScore > 2.9, and perfScore=2.1036]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 17.2268 secs, and comparison 38.2562 sec, and warnIfPerfScore > 2.9, and perfScore=2.22074]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 16.8435 secs, and comparison 232.686 sec, and warnIfPerfScore > 24, and perfScore=13.8146]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.8116 secs, and comparison 16.8619 sec, and warnIfPerfScore > 1.7, and perfScore=1.22085]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.2025 secs, and comparison 16.9633 sec, and warnIfPerfScore > 1.5, and perfScore=1.04695]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.8474 secs, and comparison 21.2433 sec, and warnIfPerfScore > 2.1, and perfScore=1.53411]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 18.9263 secs, and comparison 12.0037 sec, and warnIfPerfScore > 1.6, and perfScore=0.634233]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 20.5128 secs, and comparison 2.64543 sec, and warnIfPerfScore > 0.23, and perfScore=0.128965]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.4734 secs, and comparison 21.0328 sec, and warnIfPerfScore > 1.3, and perfScore=1.02732]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 16.6467 secs, and comparison 10.5367 sec, and warnIfPerfScore > 1.2, and perfScore=0.632965]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.3054 secs, and comparison 2.8314 sec, and warnIfPerfScore > 0.33, and perfScore=0.250446]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 15.8712 secs, and comparison 58.7515 sec, and warnIfPerfScore > 6, and perfScore=3.70177]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 16.2401 secs, and comparison 10.4876 sec, and warnIfPerfScore > 0.8, and perfScore=0.645782]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.6138 secs, and comparison 17.0508 sec, and warnIfPerfScore > 1.4, and perfScore=1.09203]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.903 secs, and comparison 5.52839 sec, and warnIfPerfScore > 0.65, and perfScore=0.464454]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 16.7021 secs, and comparison 55.622 sec, and warnIfPerfScore > 4.4, and perfScore=3.33025]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.2538 secs, and comparison 5.32281 sec, and warnIfPerfScore > 0.6, and perfScore=0.434381]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.6616 secs, and comparison 5.17201 sec, and warnIfPerfScore > 0.6, and perfScore=0.443509]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.6138 secs, and comparison 5.33419 sec, and warnIfPerfScore > 0.6, and perfScore=0.459299]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.7941 secs, and comparison 8.77019 sec, and warnIfPerfScore > 1.3, and perfScore=0.743606]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0858 secs, and comparison 13.6755 sec, and warnIfPerfScore > 1.3, and perfScore=1.04507]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 84.9095 secs, and comparison 10.2792 sec, and warnIfPerfScore > 0.3, and perfScore=0.121061]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.6844 secs, and comparison 23.4718 sec, and warnIfPerfScore > 1.5, and perfScore=1.40681]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 13.1354 secs, and comparison 5.07091 sec, and warnIfPerfScore > 0.55, and perfScore=0.386049]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.66496 sec, and warnIfPerfScore > 0.1, and perfScore=0.110997]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.110997}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.87943 sec, and warnIfPerfScore > 0.5, and perfScore=0.325295]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.0317 secs, and comparison 17.1393 sec, and warnIfPerfScore > 2, and perfScore=1.06909]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 18.5828 secs, and comparison 46.6763 sec, and warnIfPerfScore > 3.6, and perfScore=2.51179]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 21 minutes, 51 seconds]]]

Succeeded
