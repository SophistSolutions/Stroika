Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 11:3:4 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.714 secs, and comparison 4.82363 sec, and warnIfPerfScore > 0.65, and perfScore=0.844178]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 5.73347 secs, and comparison 3.45205 sec, and warnIfPerfScore > 0.5, and perfScore=0.602086]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.92428 secs, and comparison 7.87328 sec, and warnIfPerfScore > 1.05, and perfScore=0.993564]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.46821 secs, and comparison 7.79323 sec, and warnIfPerfScore > 1.15, and perfScore=1.20485]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 4.33898 secs, and comparison 2.40848 sec, and warnIfPerfScore > 0.48, and perfScore=0.55508]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.92748 secs, and comparison 3.049 sec, and warnIfPerfScore > 0.57, and perfScore=0.618775]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.09704 secs, and comparison 18.0902 sec, and warnIfPerfScore > 2.9, and perfScore=4.41543]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 6.10548 secs, and comparison 19.5719 sec, and warnIfPerfScore > 2.9, and perfScore=3.20563]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 6.75239 secs, and comparison 58.8366 sec, and warnIfPerfScore > 24, and perfScore=8.71344]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.65076 secs, and comparison 10.8697 sec, and warnIfPerfScore > 1.7, and perfScore=1.92359]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.9194 secs, and comparison 7.21986 sec, and warnIfPerfScore > 1.5, and perfScore=0.911667]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 3.44071 secs, and comparison 13.1499 sec, and warnIfPerfScore > 2.1, and perfScore=3.82186]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 4.7271 secs, and comparison 3.67779 sec, and warnIfPerfScore > 1.6, and perfScore=0.778022]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 4.93116 secs, and comparison 1.82741 sec, and warnIfPerfScore > 0.23, and perfScore=0.370583]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.37379 secs, and comparison 5.40619 sec, and warnIfPerfScore > 1.3, and perfScore=1.23604]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.51049 secs, and comparison 8.8909 sec, and warnIfPerfScore > 1.2, and perfScore=2.53267]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 21.5978 secs, and comparison 2.41635 sec, and warnIfPerfScore > 0.33, and perfScore=0.11188]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.81624 secs, and comparison 45.0448 sec, and warnIfPerfScore > 6, and perfScore=11.8034]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.12357 secs, and comparison 8.7488 sec, and warnIfPerfScore > 0.8, and perfScore=2.8009]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 5.55322 secs, and comparison 16.4644 sec, and warnIfPerfScore > 1.4, and perfScore=2.96484]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 29.6989 secs, and comparison 3.87962 sec, and warnIfPerfScore > 0.65, and perfScore=0.130632]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 4.79335 secs, and comparison 39.5754 sec, and warnIfPerfScore > 4.4, and perfScore=8.25632]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.9544 secs, and comparison 3.85539 sec, and warnIfPerfScore > 0.6, and perfScore=0.276285]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.3503 secs, and comparison 3.91406 sec, and warnIfPerfScore > 0.6, and perfScore=0.272751]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.3791 secs, and comparison 3.81525 sec, and warnIfPerfScore > 0.6, and perfScore=0.265333]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.7692 secs, and comparison 4.43318 sec, and warnIfPerfScore > 1.3, and perfScore=0.321963]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 21.7907 secs, and comparison 10.3706 sec, and warnIfPerfScore > 1.3, and perfScore=0.475917]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.1082 secs, and comparison 7.24413 sec, and warnIfPerfScore > 0.3, and perfScore=0.379112]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.30214 secs, and comparison 13.9898 sec, and warnIfPerfScore > 1.5, and perfScore=1.91585]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.46782 secs, and comparison 3.33639 sec, and warnIfPerfScore > 0.55, and perfScore=0.515845]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.835876 sec, and warnIfPerfScore > 0.1, and perfScore=0.0557251]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.44022 sec, and warnIfPerfScore > 0.5, and perfScore=0.229348]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 21 seconds]]]

Succeeded
