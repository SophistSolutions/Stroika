Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Sep  6 16:52:38 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 53.439 secs, and comparison 16.6882 sec, and warnIfPerfScore > 0.65, and perfScore=0.312285]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 52.0496 secs, and comparison 15.4044 sec, and warnIfPerfScore > 0.5, and perfScore=0.295955]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 31.7684 secs, and comparison 24.2311 sec, and warnIfPerfScore > 1.05, and perfScore=0.762741]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 25.9214 secs, and comparison 24.2679 sec, and warnIfPerfScore > 1.15, and perfScore=0.936211]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.564 secs, and comparison 4.05937 sec, and warnIfPerfScore > 0.48, and perfScore=0.188247]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.352 secs, and comparison 3.88457 sec, and warnIfPerfScore > 0.57, and perfScore=0.18193]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 25.3692 secs, and comparison 41.2158 sec, and warnIfPerfScore > 2.9, and perfScore=1.62464]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 25.801 secs, and comparison 44.6939 sec, and warnIfPerfScore > 2.9, and perfScore=1.73226]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 19.9346 secs, and comparison 222.344 sec, and warnIfPerfScore > 24, and perfScore=11.1537]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 22.2065 secs, and comparison 18.1024 sec, and warnIfPerfScore > 1.7, and perfScore=0.815187]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 54.4331 secs, and comparison 53.6814 sec, and warnIfPerfScore > 1.5, and perfScore=0.98619]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.9524 secs, and comparison 21.2016 sec, and warnIfPerfScore > 2.1, and perfScore=1.01189]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 44.3765 secs, and comparison 13.3733 sec, and warnIfPerfScore > 1.6, and perfScore=0.301359]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 48.7449 secs, and comparison 3.79764 sec, and warnIfPerfScore > 0.23, and perfScore=0.0779085]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.3496 secs, and comparison 27.4381 sec, and warnIfPerfScore > 1.3, and perfScore=1.41802]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.41802}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.6746 secs, and comparison 22.1676 sec, and warnIfPerfScore > 1.2, and perfScore=1.32943]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.32943}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.276 secs, and comparison 4.84332 sec, and warnIfPerfScore > 0.33, and perfScore=0.339264]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.339264}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 16.1764 secs, and comparison 56.7859 sec, and warnIfPerfScore > 6, and perfScore=3.51041]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.8097 secs, and comparison 21.3133 sec, and warnIfPerfScore > 0.8, and perfScore=1.43915]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.43915}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.4971 secs, and comparison 35.8865 sec, and warnIfPerfScore > 1.4, and perfScore=2.17531]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.17531}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 14.705 secs, and comparison 5.2449 sec, and warnIfPerfScore > 0.65, and perfScore=0.356676]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 28.4688 secs, and comparison 62.4543 sec, and warnIfPerfScore > 4.4, and perfScore=2.19378]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 14.9192 secs, and comparison 6.25307 sec, and warnIfPerfScore > 0.6, and perfScore=0.419128]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.7758 secs, and comparison 6.04418 sec, and warnIfPerfScore > 0.6, and perfScore=0.409059]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.9954 secs, and comparison 6.11135 sec, and warnIfPerfScore > 0.6, and perfScore=0.407549]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 15.8993 secs, and comparison 13.9424 sec, and warnIfPerfScore > 1.3, and perfScore=0.876923]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 21.3256 secs, and comparison 22.6279 sec, and warnIfPerfScore > 1.3, and perfScore=1.06107]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 120.218 secs, and comparison 15.7432 sec, and warnIfPerfScore > 0.3, and perfScore=0.130955]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 29.0233 secs, and comparison 33.2337 sec, and warnIfPerfScore > 1.5, and perfScore=1.14507]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 20.2276 secs, and comparison 6.4584 sec, and warnIfPerfScore > 0.55, and perfScore=0.319287]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.93383 sec, and warnIfPerfScore > 0.1, and perfScore=0.128922]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.128922}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.08564 sec, and warnIfPerfScore > 0.5, and perfScore=0.339043]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 21.9088 secs, and comparison 23.3786 sec, and warnIfPerfScore > 2, and perfScore=1.06709]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 25.2849 secs, and comparison 47.7967 sec, and warnIfPerfScore > 3.6, and perfScore=1.89033]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 30 minutes, 36 seconds]]]

Succeeded
