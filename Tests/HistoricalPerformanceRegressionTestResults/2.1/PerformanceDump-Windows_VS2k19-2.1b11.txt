Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 22 15:9:46 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.003 secs, and comparison 5.17506 sec, and warnIfPerfScore > 0.62, and perfScore=0.517353]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.99514 secs, and comparison 3.38841 sec, and warnIfPerfScore > 0.5, and perfScore=0.339006]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.0668 secs, and comparison 9.26872 sec, and warnIfPerfScore > 1.05, and perfScore=0.837524]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.4775 secs, and comparison 4.22646 sec, and warnIfPerfScore > 0.48, and perfScore=0.36824]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.269 secs, and comparison 4.49115 sec, and warnIfPerfScore > 0.57, and perfScore=0.398539]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.934 secs, and comparison 26.6255 sec, and warnIfPerfScore > 2.9, and perfScore=2.23107]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.366 secs, and comparison 29.1901 sec, and warnIfPerfScore > 2.9, and perfScore=2.36052]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 11.765 secs, and comparison 94.8119 sec, and warnIfPerfScore > 9.7, and perfScore=8.05879]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.1405 secs, and comparison 12.2524 sec, and warnIfPerfScore > 1.6, and perfScore=1.20827]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.7458 secs, and comparison 14.6147 sec, and warnIfPerfScore > 1.5, and perfScore=0.991108]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.79336 secs, and comparison 12.252 sec, and warnIfPerfScore > 2.1, and perfScore=1.39332]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 12.7776 secs, and comparison 9.90677 sec, and warnIfPerfScore > 1.3, and perfScore=0.775324]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.4084 secs, and comparison 2.68476 sec, and warnIfPerfScore > 0.23, and perfScore=0.20023]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.883 secs, and comparison 13.7981 sec, and warnIfPerfScore > 1.3, and perfScore=1.07103]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 10.1593 secs, and comparison 7.68895 sec, and warnIfPerfScore > 1.2, and perfScore=0.756837]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.48325 secs, and comparison 1.96508 sec, and warnIfPerfScore > 0.33, and perfScore=0.207216]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.74744 secs, and comparison 44.5712 sec, and warnIfPerfScore > 6, and perfScore=4.5726]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.4208 secs, and comparison 4.22911 sec, and warnIfPerfScore > 0.5, and perfScore=0.448912]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.8401 secs, and comparison 40.0469 sec, and warnIfPerfScore > 4.4, and perfScore=3.69434]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.437 secs, and comparison 4.43326 sec, and warnIfPerfScore > 0.6, and perfScore=0.469775]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.5801 secs, and comparison 16.0031 sec, and warnIfPerfScore > 1.5, and perfScore=1.27209]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.9061 secs, and comparison 4.47619 sec, and warnIfPerfScore > 0.55, and perfScore=0.321887]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.06939 sec, and warnIfPerfScore > 0.25, and perfScore=0.137959]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.02919 sec, and warnIfPerfScore > 0.5, and perfScore=0.268613]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.9131 secs, and comparison 17.0174 sec, and warnIfPerfScore > 2, and perfScore=1.42847]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.151 secs, and comparison 32.3039 sec, and warnIfPerfScore > 3.1, and perfScore=2.65853]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 46 seconds]]]

Succeeded
