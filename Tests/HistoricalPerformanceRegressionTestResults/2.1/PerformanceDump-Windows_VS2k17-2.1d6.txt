Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/9/18 11:08:55]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.2101 secs, and comparison 5.43048 sec, and warnIfPerfScore > 0.62, and perfScore=0.484425]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.1773 secs, and comparison 4.72977 sec, and warnIfPerfScore > 0.65, and perfScore=0.42316]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.0083 secs, and comparison 9.48002 sec, and warnIfPerfScore > 1.05, and perfScore=0.861174]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.66949 secs, and comparison 3.49312 sec, and warnIfPerfScore > 0.5, and perfScore=0.361252]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.82319 secs, and comparison 4.35928 sec, and warnIfPerfScore > 0.68, and perfScore=0.443774]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.2731 secs, and comparison 29.2115 sec, and warnIfPerfScore > 4.3, and perfScore=2.59126]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.0446 secs, and comparison 31.3941 sec, and warnIfPerfScore > 4, and perfScore=2.60649]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 10.786 secs, and comparison 95.0576 sec, and warnIfPerfScore > 10.4, and perfScore=8.81306]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.4487 secs, and comparison 15.8278 sec, and warnIfPerfScore > 3.2, and perfScore=1.3825]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.2332 secs, and comparison 15.9771 sec, and warnIfPerfScore > 1.8, and perfScore=1.20735]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.93856 secs, and comparison 15.5582 sec, and warnIfPerfScore > 2.8, and perfScore=1.74057]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.0519 secs, and comparison 33.842 sec, and warnIfPerfScore > 3.3, and perfScore=2.80803]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.5476 secs, and comparison 1.54173 sec, and warnIfPerfScore > 0.25, and perfScore=0.12287]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.015 secs, and comparison 13.8857 sec, and warnIfPerfScore > 1.4, and perfScore=1.0669]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.88228 secs, and comparison 36.711 sec, and warnIfPerfScore > 7.7, and perfScore=3.71483]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3484 secs, and comparison 4.40776 sec, and warnIfPerfScore > 1.55, and perfScore=0.425938]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 9.5847 secs, and comparison 72.2062 sec, and warnIfPerfScore > 9, and perfScore=7.53349]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.2901 secs, and comparison 6.54941 sec, and warnIfPerfScore > 1, and perfScore=0.636474]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 10.7897 secs, and comparison 64.6543 sec, and warnIfPerfScore > 7.9, and perfScore=5.99225]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.2359 secs, and comparison 6.64332 sec, and warnIfPerfScore > 0.8, and perfScore=0.649022]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.4179 secs, and comparison 18.8079 sec, and warnIfPerfScore > 1.7, and perfScore=1.30448]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.4538 secs, and comparison 4.22533 sec, and warnIfPerfScore > 0.55, and perfScore=0.314063]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.59405 sec, and warnIfPerfScore > 0.4, and perfScore=0.172937]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.67539 sec, and warnIfPerfScore > 1.1, and perfScore=0.311693]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.4524 secs, and comparison 17.339 sec, and warnIfPerfScore > 2.4, and perfScore=1.39242]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.0168 secs, and comparison 32.7042 sec, and warnIfPerfScore > 2.9, and perfScore=2.72155]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 44 seconds]]]

Succeeded
