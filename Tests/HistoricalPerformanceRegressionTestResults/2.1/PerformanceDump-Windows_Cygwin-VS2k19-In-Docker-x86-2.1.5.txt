Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 3:20:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.94809 secs, and comparison 4.29709 sec, and warnIfPerfScore > 0.65, and perfScore=0.618457]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.95246 secs, and comparison 2.85042 sec, and warnIfPerfScore > 0.5, and perfScore=0.409987]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.56797 secs, and comparison 7.60033 sec, and warnIfPerfScore > 1.05, and perfScore=0.887063]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.8079 secs, and comparison 7.66904 sec, and warnIfPerfScore > 1.15, and perfScore=1.12649]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.79389 secs, and comparison 2.26958 sec, and warnIfPerfScore > 0.48, and perfScore=0.2912]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.74878 secs, and comparison 2.73706 sec, and warnIfPerfScore > 0.57, and perfScore=0.353225]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.29932 secs, and comparison 20.5327 sec, and warnIfPerfScore > 2.9, and perfScore=2.47403]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.21097 secs, and comparison 21.9463 sec, and warnIfPerfScore > 2.9, and perfScore=2.6728]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.71395 secs, and comparison 145.947 sec, and warnIfPerfScore > 24, and perfScore=18.9199]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.09994 secs, and comparison 11.1115 sec, and warnIfPerfScore > 1.7, and perfScore=1.56501]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.73191 secs, and comparison 7.61126 sec, and warnIfPerfScore > 1.5, and perfScore=0.984396]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.862 secs, and comparison 13.23 sec, and warnIfPerfScore > 2.1, and perfScore=1.928]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.45302 secs, and comparison 7.54271 sec, and warnIfPerfScore > 1.6, and perfScore=0.89231]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.81416 secs, and comparison 1.22559 sec, and warnIfPerfScore > 0.23, and perfScore=0.139048]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1664 secs, and comparison 12.9629 sec, and warnIfPerfScore > 1.3, and perfScore=1.06547]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.75706 secs, and comparison 5.23831 sec, and warnIfPerfScore > 1.2, and perfScore=0.536874]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.00649 secs, and comparison 1.45157 sec, and warnIfPerfScore > 0.33, and perfScore=0.241666]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.45034 secs, and comparison 42.3956 sec, and warnIfPerfScore > 6, and perfScore=4.48615]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.35042 secs, and comparison 4.99254 sec, and warnIfPerfScore > 0.8, and perfScore=0.533938]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.37365 secs, and comparison 9.03863 sec, and warnIfPerfScore > 1.4, and perfScore=0.964259]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.00261 secs, and comparison 3.41588 sec, and warnIfPerfScore > 0.65, and perfScore=0.569066]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.96063 secs, and comparison 39.1903 sec, and warnIfPerfScore > 4.4, and perfScore=3.93451]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.19535 secs, and comparison 3.40943 sec, and warnIfPerfScore > 0.6, and perfScore=0.550321]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.20159 secs, and comparison 3.42603 sec, and warnIfPerfScore > 0.6, and perfScore=0.552445]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.16991 secs, and comparison 3.41914 sec, and warnIfPerfScore > 0.6, and perfScore=0.554163]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.1812 secs, and comparison 4.71069 sec, and warnIfPerfScore > 1.3, and perfScore=0.762099]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.71101 secs, and comparison 8.19864 sec, and warnIfPerfScore > 1.3, and perfScore=1.22167]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.4503 secs, and comparison 5.69532 sec, and warnIfPerfScore > 0.3, and perfScore=0.125309]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.92337 secs, and comparison 11.8197 sec, and warnIfPerfScore > 1.5, and perfScore=1.49175]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.05701 secs, and comparison 3.56482 sec, and warnIfPerfScore > 0.55, and perfScore=0.505146]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.754067 sec, and warnIfPerfScore > 0.1, and perfScore=0.0502711]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.96125 sec, and warnIfPerfScore > 0.5, and perfScore=0.197417]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.7828 secs, and comparison 13.0729 sec, and warnIfPerfScore > 2, and perfScore=1.67971]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.92051 secs, and comparison 28.8459 sec, and warnIfPerfScore > 3.6, and perfScore=3.23366]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 34 seconds]]]

Succeeded
