Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep  6 :31:21 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.7653 secs, and comparison 5.48041 sec, and warnIfPerfScore > 0.62, and perfScore=0.465811]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.8202 secs, and comparison 3.66436 sec, and warnIfPerfScore > 0.5, and perfScore=0.310007]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.5032 secs, and comparison 10.1432 sec, and warnIfPerfScore > 1.05, and perfScore=0.881769]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.8659 secs, and comparison 4.49525 sec, and warnIfPerfScore > 0.48, and perfScore=0.413704]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.7812 secs, and comparison 4.91137 sec, and warnIfPerfScore > 0.57, and perfScore=0.455551]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.3808 secs, and comparison 29.08 sec, and warnIfPerfScore > 2.9, and perfScore=2.3488]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.7264 secs, and comparison 30.4333 sec, and warnIfPerfScore > 2.9, and perfScore=2.39134]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 12.4658 secs, and comparison 98.2881 sec, and warnIfPerfScore > 9.7, and perfScore=7.88463]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.3268 secs, and comparison 13.152 sec, and warnIfPerfScore > 1.6, and perfScore=1.27358]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 14.6926 secs, and comparison 13.9084 sec, and warnIfPerfScore > 1.5, and perfScore=0.946627]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.09739 secs, and comparison 13.4047 sec, and warnIfPerfScore > 2.1, and perfScore=1.47346]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 13.4055 secs, and comparison 10.035 sec, and warnIfPerfScore > 1.3, and perfScore=0.748575]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.0883 secs, and comparison 3.13911 sec, and warnIfPerfScore > 0.23, and perfScore=0.222817]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.5772 secs, and comparison 14.4743 sec, and warnIfPerfScore > 1.3, and perfScore=0.992935]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 11.0535 secs, and comparison 8.60151 sec, and warnIfPerfScore > 1.2, and perfScore=0.778167]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 10.5338 secs, and comparison 2.12841 sec, and warnIfPerfScore > 0.33, and perfScore=0.202055]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 10.5453 secs, and comparison 48.657 sec, and warnIfPerfScore > 6, and perfScore=4.6141]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.5039 secs, and comparison 4.60367 sec, and warnIfPerfScore > 0.5, and perfScore=0.438283]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.494 secs, and comparison 43.3147 sec, and warnIfPerfScore > 4.4, and perfScore=3.76847]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.5287 secs, and comparison 4.7969 sec, and warnIfPerfScore > 0.6, and perfScore=0.4556]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.5497 secs, and comparison 22.6018 sec, and warnIfPerfScore > 1.5, and perfScore=1.21845]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.6126 secs, and comparison 4.51034 sec, and warnIfPerfScore > 0.55, and perfScore=0.424998]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.62125 sec, and warnIfPerfScore > 0.25, and perfScore=0.108083]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.04738 sec, and warnIfPerfScore > 0.5, and perfScore=0.269825]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.8692 secs, and comparison 21.7666 sec, and warnIfPerfScore > 2, and perfScore=1.83387]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.0029 secs, and comparison 34.8071 sec, and warnIfPerfScore > 3.1, and perfScore=2.67687]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 30 seconds]]]

Succeeded
