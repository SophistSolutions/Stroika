Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 20:24:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.07749 secs, and comparison 4.59821 sec, and warnIfPerfScore > 0.65, and perfScore=0.756598]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.9128 secs, and comparison 2.94399 sec, and warnIfPerfScore > 0.5, and perfScore=0.497901]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.43384 secs, and comparison 6.77449 sec, and warnIfPerfScore > 1.05, and perfScore=1.05295]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.9584 secs, and comparison 6.68906 sec, and warnIfPerfScore > 1.15, and perfScore=1.12263]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 3.8807 secs, and comparison 2.55487 sec, and warnIfPerfScore > 0.48, and perfScore=0.658352]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 4.52072 secs, and comparison 3.58185 sec, and warnIfPerfScore > 0.57, and perfScore=0.792319]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.30243 secs, and comparison 16.8277 sec, and warnIfPerfScore > 2.9, and perfScore=5.09556]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 3.98823 secs, and comparison 17.669 sec, and warnIfPerfScore > 2.9, and perfScore=4.43028]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.93918 secs, and comparison 54.4024 sec, and warnIfPerfScore > 24, and perfScore=11.0145]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.33689 secs, and comparison 10.4891 sec, and warnIfPerfScore > 1.7, and perfScore=1.96539]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.0452 secs, and comparison 5.75165 sec, and warnIfPerfScore > 1.5, and perfScore=0.951441]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.80735 secs, and comparison 12.0959 sec, and warnIfPerfScore > 2.1, and perfScore=4.30865]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 4.4164 secs, and comparison 3.81416 sec, and warnIfPerfScore > 1.6, and perfScore=0.863635]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.62234 secs, and comparison 1.80739 sec, and warnIfPerfScore > 0.23, and perfScore=0.391011]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.91093 secs, and comparison 4.71949 sec, and warnIfPerfScore > 1.3, and perfScore=1.20674]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.15114 secs, and comparison 7.40626 sec, and warnIfPerfScore > 1.2, and perfScore=2.35035]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 16.7058 secs, and comparison 1.77542 sec, and warnIfPerfScore > 0.33, and perfScore=0.106276]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.96784 secs, and comparison 42.1137 sec, and warnIfPerfScore > 6, and perfScore=14.19]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.02909 secs, and comparison 7.0156 sec, and warnIfPerfScore > 0.8, and perfScore=2.31608]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.05478 secs, and comparison 7.80477 sec, and warnIfPerfScore > 1.4, and perfScore=2.55493]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.5996 secs, and comparison 3.67797 sec, and warnIfPerfScore > 0.65, and perfScore=0.317077]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.83019 secs, and comparison 37.7985 sec, and warnIfPerfScore > 4.4, and perfScore=6.48324]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.2189 secs, and comparison 3.64178 sec, and warnIfPerfScore > 0.6, and perfScore=0.298046]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.1304 secs, and comparison 3.64021 sec, and warnIfPerfScore > 0.6, and perfScore=0.277235]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.1903 secs, and comparison 3.61273 sec, and warnIfPerfScore > 0.6, and perfScore=0.273894]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.1894 secs, and comparison 4.73739 sec, and warnIfPerfScore > 1.3, and perfScore=0.359182]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 19.2335 secs, and comparison 10.1803 sec, and warnIfPerfScore > 1.3, and perfScore=0.529301]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 18.5767 secs, and comparison 7.41277 sec, and warnIfPerfScore > 0.3, and perfScore=0.399035]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.04593 secs, and comparison 12.5037 sec, and warnIfPerfScore > 1.5, and perfScore=1.55405]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.99391 secs, and comparison 2.96424 sec, and warnIfPerfScore > 0.55, and perfScore=0.423831]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.826537 sec, and warnIfPerfScore > 0.1, and perfScore=0.0551025]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.16351 sec, and warnIfPerfScore > 0.5, and perfScore=0.210901]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 59 seconds]]]

Succeeded
