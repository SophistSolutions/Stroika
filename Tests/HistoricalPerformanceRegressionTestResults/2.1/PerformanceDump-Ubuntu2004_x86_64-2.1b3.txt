Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug 10 9:40:48 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 5.48406 secs, and comparison 4.67925 sec, and warnIfPerfScore > 0.62, and perfScore=0.853245]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.4928 secs, and comparison 3.01162 sec, and warnIfPerfScore > 0.5, and perfScore=0.548286]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.48341 secs, and comparison 6.91702 sec, and warnIfPerfScore > 1.05, and perfScore=1.06688]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.90153 secs, and comparison 3.7327 sec, and warnIfPerfScore > 0.48, and perfScore=0.956727]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.65997 secs, and comparison 4.27594 sec, and warnIfPerfScore > 0.57, and perfScore=0.91759]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 3.49504 secs, and comparison 19.987 sec, and warnIfPerfScore > 2.9, and perfScore=5.71868]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 4.17016 secs, and comparison 21.2445 sec, and warnIfPerfScore > 2.9, and perfScore=5.0944]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 6.0091 secs, and comparison 65.1209 sec, and warnIfPerfScore > 9.7, and perfScore=10.837]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.26572 secs, and comparison 10.7665 sec, and warnIfPerfScore > 1.6, and perfScore=2.04465]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.12034 secs, and comparison 6.0154 sec, and warnIfPerfScore > 1.5, and perfScore=0.982853]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.94959 secs, and comparison 10.6117 sec, and warnIfPerfScore > 2.1, and perfScore=3.59769]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 4.44044 secs, and comparison 3.68591 sec, and warnIfPerfScore > 1.3, and perfScore=0.830077]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.52187 secs, and comparison 1.62756 sec, and warnIfPerfScore > 0.23, and perfScore=0.359929]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.25217 secs, and comparison 4.94028 sec, and warnIfPerfScore > 1.3, and perfScore=1.16183]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.43201 secs, and comparison 6.94861 sec, and warnIfPerfScore > 1.2, and perfScore=2.02465]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 16.2927 secs, and comparison 1.60813 sec, and warnIfPerfScore > 0.33, and perfScore=0.0987027]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.29082 secs, and comparison 42.687 sec, and warnIfPerfScore > 6, and perfScore=12.9715]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.0992 secs, and comparison 3.85666 sec, and warnIfPerfScore > 0.5, and perfScore=0.347472]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 4.61913 secs, and comparison 37.4493 sec, and warnIfPerfScore > 4.4, and perfScore=8.10743]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.8112 secs, and comparison 3.83159 sec, and warnIfPerfScore > 0.6, and perfScore=0.299081]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.38164 secs, and comparison 14.0013 sec, and warnIfPerfScore > 1.5, and perfScore=1.89677]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.26909 secs, and comparison 2.53562 sec, and warnIfPerfScore > 0.55, and perfScore=0.348823]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 15 secs, and comparison 1.17046 sec, and warnIfPerfScore > 0.25, and perfScore=0.0780308]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85477 sec, and warnIfPerfScore > 0.5, and perfScore=0.256985]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 59 seconds]]]

Succeeded
