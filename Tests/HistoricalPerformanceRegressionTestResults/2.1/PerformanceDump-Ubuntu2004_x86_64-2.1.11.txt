Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 1:41:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 17.5106 secs, and comparison 5.10756 sec, and warnIfPerfScore > 0.65, and perfScore=0.291685]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.20991 secs, and comparison 8.1841 sec, and warnIfPerfScore > 0.5, and perfScore=1.13512]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.5592 secs, and comparison 9.12714 sec, and warnIfPerfScore > 1.05, and perfScore=0.954802]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.83545 secs, and comparison 13.8243 sec, and warnIfPerfScore > 1.15, and perfScore=1.76432]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.16999 secs, and comparison 2.75564 sec, and warnIfPerfScore > 0.48, and perfScore=0.337288]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.3419 secs, and comparison 3.42711 sec, and warnIfPerfScore > 0.57, and perfScore=0.331382]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.06163 secs, and comparison 21.937 sec, and warnIfPerfScore > 2.9, and perfScore=2.72116]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.8795 secs, and comparison 22.7648 sec, and warnIfPerfScore > 2.9, and perfScore=1.34867]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 10.2839 secs, and comparison 74.3691 sec, and warnIfPerfScore > 24, and perfScore=7.23163]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.379 secs, and comparison 12.6579 sec, and warnIfPerfScore > 1.7, and perfScore=1.11239]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.8097 secs, and comparison 15.3733 sec, and warnIfPerfScore > 1.5, and perfScore=1.20013]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.67792 secs, and comparison 14.4159 sec, and warnIfPerfScore > 2.1, and perfScore=2.53894]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.96856 secs, and comparison 6.47555 sec, and warnIfPerfScore > 1.6, and perfScore=0.722027]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.37338 secs, and comparison 2.97774 sec, and warnIfPerfScore > 0.23, and perfScore=0.35562]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.20763 secs, and comparison 10.3157 sec, and warnIfPerfScore > 1.3, and perfScore=1.43122]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.75181 secs, and comparison 9.79932 sec, and warnIfPerfScore > 1.2, and perfScore=2.06223]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 25.6045 secs, and comparison 3.3175 sec, and warnIfPerfScore > 0.33, and perfScore=0.129567]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.73515 secs, and comparison 48.0702 sec, and warnIfPerfScore > 6, and perfScore=10.1518]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 6.45374 secs, and comparison 8.85334 sec, and warnIfPerfScore > 0.8, and perfScore=1.37182]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 6.42487 secs, and comparison 14.8444 sec, and warnIfPerfScore > 1.4, and perfScore=2.31046]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 31.7636 secs, and comparison 5.4587 sec, and warnIfPerfScore > 0.65, and perfScore=0.171854]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 16.5214 secs, and comparison 45.7688 sec, and warnIfPerfScore > 4.4, and perfScore=2.77027]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 24.0939 secs, and comparison 5.69851 sec, and warnIfPerfScore > 0.6, and perfScore=0.236512]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 25.0336 secs, and comparison 5.72891 sec, and warnIfPerfScore > 0.6, and perfScore=0.228849]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 24.224 secs, and comparison 5.82055 sec, and warnIfPerfScore > 0.6, and perfScore=0.24028]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 20.3461 secs, and comparison 5.19862 sec, and warnIfPerfScore > 1.3, and perfScore=0.255509]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 35.2234 secs, and comparison 16.6868 sec, and warnIfPerfScore > 1.3, and perfScore=0.473743]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 25.4189 secs, and comparison 7.65777 sec, and warnIfPerfScore > 0.3, and perfScore=0.301263]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 10.083 secs, and comparison 22.5843 sec, and warnIfPerfScore > 1.5, and perfScore=2.23985]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.0449 secs, and comparison 4.5925 sec, and warnIfPerfScore > 0.55, and perfScore=0.381282]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.63933 sec, and warnIfPerfScore > 0.1, and perfScore=0.109289]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.07534 sec, and warnIfPerfScore > 0.5, and perfScore=0.338356]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 36 seconds]]]

Succeeded
