Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/21/18 3:56:02]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.83109 secs, and comparison 6.17622 sec, and warnIfPerfScore > 0.62, and perfScore=0.699373]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.82706 secs, and comparison 5.27738 sec, and warnIfPerfScore > 0.5, and perfScore=0.597863]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 14.8856 secs, and comparison 11.632 sec, and warnIfPerfScore > 1.05, and perfScore=0.781428]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 27.9022 secs, and comparison 4.31997 sec, and warnIfPerfScore > 0.43, and perfScore=0.154826]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.9156 secs, and comparison 5.07765 sec, and warnIfPerfScore > 0.5, and perfScore=0.181893]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 18.6155 secs, and comparison 52.534 sec, and warnIfPerfScore > 2.8, and perfScore=2.82205]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 20.5065 secs, and comparison 52.9905 sec, and warnIfPerfScore > 2.9, and perfScore=2.58408]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 16.928 secs, and comparison 151.781 sec, and warnIfPerfScore > 9.7, and perfScore=8.96627]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.8987 secs, and comparison 26.7872 sec, and warnIfPerfScore > 1.6, and perfScore=1.34618]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.1364 secs, and comparison 5.92571 sec, and warnIfPerfScore > 1.5, and perfScore=0.728296]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.9413 secs, and comparison 31.9692 sec, and warnIfPerfScore > 2.1, and perfScore=2.47032]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.9494 secs, and comparison 6.20381 sec, and warnIfPerfScore > 1.3, and perfScore=0.566588]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.4436 secs, and comparison 1.91741 sec, and warnIfPerfScore > 0.18, and perfScore=0.167554]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.4843 secs, and comparison 16.6704 sec, and warnIfPerfScore > 1.3, and perfScore=1.0766]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.0446 secs, and comparison 13.0996 sec, and warnIfPerfScore > 1.2, and perfScore=1.08759]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.8663 secs, and comparison 2.38733 sec, and warnIfPerfScore > 0.33, and perfScore=0.185549]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.5795 secs, and comparison 54.8382 sec, and warnIfPerfScore > 6, and perfScore=4.7358]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.867 secs, and comparison 5.08746 sec, and warnIfPerfScore > 0.5, and perfScore=0.395388]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.1374 secs, and comparison 50.515 sec, and warnIfPerfScore > 4.4, and perfScore=3.84514]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.8792 secs, and comparison 4.92908 sec, and warnIfPerfScore > 0.6, and perfScore=0.382717]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.5454 secs, and comparison 41.5322 sec, and warnIfPerfScore > 1.5, and perfScore=1.40571]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.9968 secs, and comparison 5.48003 sec, and warnIfPerfScore > 0.55, and perfScore=0.137012]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.3246 sec, and warnIfPerfScore > 0.25, and perfScore=0.42164]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79659 sec, and warnIfPerfScore > 0.5, and perfScore=0.18644]
	                 	Test_Optional_ is FASTER

[[[Tests took: 15 minutes, 35 seconds]]]

Succeeded
