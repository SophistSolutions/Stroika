Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 10:8:3 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.31067 secs, and comparison 4.27028 sec, and warnIfPerfScore > 0.65, and perfScore=0.676676]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.23647 secs, and comparison 2.37198 sec, and warnIfPerfScore > 0.5, and perfScore=0.452973]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.87558 secs, and comparison 6.91181 sec, and warnIfPerfScore > 1.05, and perfScore=0.877625]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.28818 secs, and comparison 6.8667 sec, and warnIfPerfScore > 1.15, and perfScore=1.092]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.44951 secs, and comparison 2.08763 sec, and warnIfPerfScore > 0.48, and perfScore=0.323688]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.73014 secs, and comparison 2.68246 sec, and warnIfPerfScore > 0.57, and perfScore=0.398574]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.1834 secs, and comparison 18.6336 sec, and warnIfPerfScore > 2.9, and perfScore=3.01349]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.01839 secs, and comparison 19.0527 sec, and warnIfPerfScore > 2.9, and perfScore=2.71468]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 6.18722 secs, and comparison 157.061 sec, and warnIfPerfScore > 24, and perfScore=25.3847]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.44788 secs, and comparison 9.43163 sec, and warnIfPerfScore > 1.7, and perfScore=1.73125]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.45797 secs, and comparison 5.32654 sec, and warnIfPerfScore > 1.5, and perfScore=0.975921]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.92642 secs, and comparison 11.3902 sec, and warnIfPerfScore > 2.1, and perfScore=2.31207]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 6.40129 secs, and comparison 4.09421 sec, and warnIfPerfScore > 1.6, and perfScore=0.639591]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 6.74408 secs, and comparison 0.657236 sec, and warnIfPerfScore > 0.23, and perfScore=0.0974539]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4741 secs, and comparison 11.7851 sec, and warnIfPerfScore > 1.3, and perfScore=1.02711]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.40529 secs, and comparison 5.79481 sec, and warnIfPerfScore > 1.2, and perfScore=0.689424]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.86377 secs, and comparison 1.84947 sec, and warnIfPerfScore > 0.33, and perfScore=0.235189]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.12584 secs, and comparison 39.0406 sec, and warnIfPerfScore > 6, and perfScore=4.8045]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.1883 secs, and comparison 5.24745 sec, and warnIfPerfScore > 0.8, and perfScore=0.469012]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.2105 secs, and comparison 7.8663 sec, and warnIfPerfScore > 1.4, and perfScore=0.701687]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.67369 secs, and comparison 3.4728 sec, and warnIfPerfScore > 0.65, and perfScore=0.45256]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.4469 secs, and comparison 36.3277 sec, and warnIfPerfScore > 4.4, and perfScore=3.17359]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.68924 secs, and comparison 3.37831 sec, and warnIfPerfScore > 0.6, and perfScore=0.439355]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.64969 secs, and comparison 3.37797 sec, and warnIfPerfScore > 0.6, and perfScore=0.441583]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.75365 secs, and comparison 3.32107 sec, and warnIfPerfScore > 0.6, and perfScore=0.428323]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.71907 secs, and comparison 5.11641 sec, and warnIfPerfScore > 1.3, and perfScore=0.662826]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.363 secs, and comparison 8.79637 sec, and warnIfPerfScore > 1.3, and perfScore=1.05182]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 39.2196 secs, and comparison 5.22696 sec, and warnIfPerfScore > 0.3, and perfScore=0.133274]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.17239 secs, and comparison 10.084 sec, and warnIfPerfScore > 1.5, and perfScore=1.63372]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.36474 secs, and comparison 2.88714 sec, and warnIfPerfScore > 0.55, and perfScore=0.453615]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.642307 sec, and warnIfPerfScore > 0.1, and perfScore=0.0428205]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.02439 sec, and warnIfPerfScore > 0.5, and perfScore=0.201626]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.76592 secs, and comparison 13.4389 sec, and warnIfPerfScore > 2, and perfScore=1.98626]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.30542 secs, and comparison 14.566 sec, and warnIfPerfScore > 3.6, and perfScore=1.56533]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 53 seconds]]]

Succeeded
