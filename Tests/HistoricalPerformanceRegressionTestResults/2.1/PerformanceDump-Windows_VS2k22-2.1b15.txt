Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 25 12:21:52 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.72602 secs, and comparison 4.14804 sec, and warnIfPerfScore > 0.62, and perfScore=0.616715]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.82471 secs, and comparison 2.57212 sec, and warnIfPerfScore > 0.5, and perfScore=0.376883]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.13443 secs, and comparison 7.20878 sec, and warnIfPerfScore > 1.05, and perfScore=0.886206]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.40068 secs, and comparison 7.10654 sec, and warnIfPerfScore > 1.15, and perfScore=1.11028]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.40379 secs, and comparison 2.44834 sec, and warnIfPerfScore > 0.48, and perfScore=0.330688]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.41083 secs, and comparison 2.85229 sec, and warnIfPerfScore > 0.57, and perfScore=0.384882]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.49998 secs, and comparison 19.9544 sec, and warnIfPerfScore > 2.9, and perfScore=2.66059]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.70235 secs, and comparison 20.5777 sec, and warnIfPerfScore > 2.9, and perfScore=2.67161]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 7.25443 secs, and comparison 65.1687 sec, and warnIfPerfScore > 9.7, and perfScore=8.9833]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.81045 secs, and comparison 10.5022 sec, and warnIfPerfScore > 1.6, and perfScore=1.54207]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.18416 secs, and comparison 8.03876 sec, and warnIfPerfScore > 1.5, and perfScore=0.982234]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.49393 secs, and comparison 11.8776 sec, and warnIfPerfScore > 2.1, and perfScore=1.82903]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 8.82065 secs, and comparison 7.15816 sec, and warnIfPerfScore > 1.3, and perfScore=0.811523]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.17044 secs, and comparison 1.22879 sec, and warnIfPerfScore > 0.23, and perfScore=0.133995]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3613 secs, and comparison 12.7381 sec, and warnIfPerfScore > 1.3, and perfScore=1.03049]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.71523 secs, and comparison 5.36108 sec, and warnIfPerfScore > 1.2, and perfScore=0.551822]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.93293 secs, and comparison 1.40522 sec, and warnIfPerfScore > 0.33, and perfScore=0.236851]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.3327 secs, and comparison 38.8577 sec, and warnIfPerfScore > 6, and perfScore=4.1636]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.33182 secs, and comparison 5.15711 sec, and warnIfPerfScore > 0.8, and perfScore=0.552637]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.34967 secs, and comparison 9.57301 sec, and warnIfPerfScore > 0.9, and perfScore=1.02389]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.9 and got 1.02389}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 5.91486 secs, and comparison 3.48609 sec, and warnIfPerfScore > 0.5, and perfScore=0.589378]
	                 	Sequence_DoublyLinkedList<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.5 and got 0.589378}}}

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.36492 secs, and comparison 35.7748 sec, and warnIfPerfScore > 4.4, and perfScore=3.82009]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.0617 secs, and comparison 4.53256 sec, and warnIfPerfScore > 0.6, and perfScore=0.747737]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.747737}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 43.6591 secs, and comparison 5.69979 sec, and warnIfPerfScore > 0.2, and perfScore=0.130552]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.07055 secs, and comparison 12.0537 sec, and warnIfPerfScore > 1.5, and perfScore=1.49354]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.77277 secs, and comparison 2.755 sec, and warnIfPerfScore > 0.55, and perfScore=0.406775]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 15 secs, and comparison 0.903408 sec, and warnIfPerfScore > 0.25, and perfScore=0.0602272]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80694 sec, and warnIfPerfScore > 0.5, and perfScore=0.187129]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.60267 secs, and comparison 8.42548 sec, and warnIfPerfScore > 2, and perfScore=1.10823]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.81107 secs, and comparison 28.8208 sec, and warnIfPerfScore > 3.1, and perfScore=3.27098]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 3.27098}}}

[[[Tests took: 10 minutes, 7 seconds]]]

Succeeded
