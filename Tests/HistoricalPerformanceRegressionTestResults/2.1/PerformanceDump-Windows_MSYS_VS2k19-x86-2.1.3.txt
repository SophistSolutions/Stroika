Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Aug  9 12:56:41 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 14.3616 secs, and comparison 5.76128 sec, and warnIfPerfScore > 0.65, and perfScore=0.401158]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.3127 secs, and comparison 4.03452 sec, and warnIfPerfScore > 0.5, and perfScore=0.263475]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 15.2786 secs, and comparison 11.8512 sec, and warnIfPerfScore > 1.05, and perfScore=0.775676]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.8144 secs, and comparison 11.536 sec, and warnIfPerfScore > 1.15, and perfScore=1.06673]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 17.4943 secs, and comparison 3.52639 sec, and warnIfPerfScore > 0.48, and perfScore=0.201573]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 17.7524 secs, and comparison 3.84962 sec, and warnIfPerfScore > 0.57, and perfScore=0.216851]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 20.4678 secs, and comparison 35.8481 sec, and warnIfPerfScore > 2.9, and perfScore=1.75144]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 21.166 secs, and comparison 38.9231 sec, and warnIfPerfScore > 2.9, and perfScore=1.83894]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 20.5186 secs, and comparison 190.471 sec, and warnIfPerfScore > 24, and perfScore=9.28286]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.8447 secs, and comparison 16.9823 sec, and warnIfPerfScore > 1.7, and perfScore=1.43375]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.6248 secs, and comparison 14.2246 sec, and warnIfPerfScore > 1.5, and perfScore=0.972637]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.4621 secs, and comparison 19.5942 sec, and warnIfPerfScore > 2.1, and perfScore=1.70947]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 15.4523 secs, and comparison 10.9587 sec, and warnIfPerfScore > 1.6, and perfScore=0.709197]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 16.0575 secs, and comparison 2.32602 sec, and warnIfPerfScore > 0.23, and perfScore=0.144856]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.315 secs, and comparison 16.736 sec, and warnIfPerfScore > 1.3, and perfScore=1.09278]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 12.3578 secs, and comparison 9.50696 sec, and warnIfPerfScore > 1.2, and perfScore=0.76931]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 11.5311 secs, and comparison 3.16059 sec, and warnIfPerfScore > 0.33, and perfScore=0.274093]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 12.1384 secs, and comparison 52.9783 sec, and warnIfPerfScore > 6, and perfScore=4.36453]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.0556 secs, and comparison 10.5492 sec, and warnIfPerfScore > 0.8, and perfScore=0.875045]
	                 	Sequence_Array<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.8 and got 0.875045}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.656 secs, and comparison 22.7001 sec, and warnIfPerfScore > 1.4, and perfScore=1.54887]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.54887}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.4327 secs, and comparison 4.64204 sec, and warnIfPerfScore > 0.65, and perfScore=0.321634]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.937 secs, and comparison 43.189 sec, and warnIfPerfScore > 4.4, and perfScore=2.70998]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.7113 secs, and comparison 4.58716 sec, and warnIfPerfScore > 0.6, and perfScore=0.311813]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.8362 secs, and comparison 4.62957 sec, and warnIfPerfScore > 0.6, and perfScore=0.360666]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.9656 secs, and comparison 4.58122 sec, and warnIfPerfScore > 0.6, and perfScore=0.353338]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 12.8083 secs, and comparison 9.83913 sec, and warnIfPerfScore > 1.3, and perfScore=0.768181]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 13.8656 secs, and comparison 12.7847 sec, and warnIfPerfScore > 1.3, and perfScore=0.92204]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 74.8444 secs, and comparison 11.8472 sec, and warnIfPerfScore > 0.3, and perfScore=0.158291]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.6597 secs, and comparison 20.5335 sec, and warnIfPerfScore > 1.5, and perfScore=1.40068]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.4264 secs, and comparison 5.4834 sec, and warnIfPerfScore > 0.55, and perfScore=0.333816]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 15 secs, and comparison 1.17225 sec, and warnIfPerfScore > 0.1, and perfScore=0.0781498]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.26486 sec, and warnIfPerfScore > 0.5, and perfScore=0.284324]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.3175 secs, and comparison 23.9396 sec, and warnIfPerfScore > 2, and perfScore=1.7976]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.8548 secs, and comparison 38.8634 sec, and warnIfPerfScore > 3.6, and perfScore=2.61622]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 20 minutes, 8 seconds]]]

Succeeded
