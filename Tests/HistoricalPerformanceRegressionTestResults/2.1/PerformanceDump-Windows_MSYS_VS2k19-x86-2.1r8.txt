Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr  5 2:15:9 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 12.112 secs, and comparison 6.07373 sec, and warnIfPerfScore > 0.65, and perfScore=0.501464]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.6127 secs, and comparison 3.93026 sec, and warnIfPerfScore > 0.5, and perfScore=0.338444]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.9134 secs, and comparison 11.3736 sec, and warnIfPerfScore > 1.05, and perfScore=0.880761]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.8917 secs, and comparison 11.0781 sec, and warnIfPerfScore > 1.15, and perfScore=1.01712]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.33 secs, and comparison 3.31405 sec, and warnIfPerfScore > 0.48, and perfScore=0.248616]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.3548 secs, and comparison 3.93438 sec, and warnIfPerfScore > 0.57, and perfScore=0.318449]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.8925 secs, and comparison 33.0347 sec, and warnIfPerfScore > 2.9, and perfScore=2.21821]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 15.0381 secs, and comparison 35.4049 sec, and warnIfPerfScore > 2.9, and perfScore=2.35434]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.2046 secs, and comparison 188.232 sec, and warnIfPerfScore > 24, and perfScore=13.2515]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.817 secs, and comparison 16.6304 sec, and warnIfPerfScore > 1.7, and perfScore=1.40733]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.7115 secs, and comparison 14.2193 sec, and warnIfPerfScore > 1.5, and perfScore=0.96654]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.3103 secs, and comparison 20.6646 sec, and warnIfPerfScore > 2.1, and perfScore=1.82706]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 15.5583 secs, and comparison 10.9983 sec, and warnIfPerfScore > 1.6, and perfScore=0.706907]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 16.1228 secs, and comparison 2.28466 sec, and warnIfPerfScore > 0.23, and perfScore=0.141704]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 17.1284 secs, and comparison 16.4685 sec, and warnIfPerfScore > 1.3, and perfScore=0.961473]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 12.1978 secs, and comparison 8.74294 sec, and warnIfPerfScore > 1.2, and perfScore=0.716766]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 13.016 secs, and comparison 2.90176 sec, and warnIfPerfScore > 0.33, and perfScore=0.222937]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 11.9447 secs, and comparison 51.263 sec, and warnIfPerfScore > 6, and perfScore=4.29169]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 11.8707 secs, and comparison 9.23355 sec, and warnIfPerfScore > 0.8, and perfScore=0.777847]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.7864 secs, and comparison 16.7999 sec, and warnIfPerfScore > 1.4, and perfScore=1.42536]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.42536}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.9935 secs, and comparison 4.84424 sec, and warnIfPerfScore > 0.65, and perfScore=0.403905]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 12.4993 secs, and comparison 48.5011 sec, and warnIfPerfScore > 4.4, and perfScore=3.8803]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.1417 secs, and comparison 5.05978 sec, and warnIfPerfScore > 0.6, and perfScore=0.416729]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.3621 secs, and comparison 4.75975 sec, and warnIfPerfScore > 0.6, and perfScore=0.385027]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.8002 secs, and comparison 4.8279 sec, and warnIfPerfScore > 0.6, and perfScore=0.409137]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 12.3118 secs, and comparison 9.36565 sec, and warnIfPerfScore > 1.3, and perfScore=0.760708]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 13.8586 secs, and comparison 13.6512 sec, and warnIfPerfScore > 1.3, and perfScore=0.985039]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 75.441 secs, and comparison 12.1563 sec, and warnIfPerfScore > 0.3, and perfScore=0.161137]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.8838 secs, and comparison 21.5713 sec, and warnIfPerfScore > 1.5, and perfScore=1.44931]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 16.7395 secs, and comparison 5.07273 sec, and warnIfPerfScore > 0.55, and perfScore=0.303039]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 15 secs, and comparison 1.16367 sec, and warnIfPerfScore > 0.1, and perfScore=0.0775782]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.69034 sec, and warnIfPerfScore > 0.5, and perfScore=0.312689]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.7787 secs, and comparison 25.3169 sec, and warnIfPerfScore > 2, and perfScore=1.8374]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.5426 secs, and comparison 39.8302 sec, and warnIfPerfScore > 3.6, and perfScore=2.73886]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 19 seconds]]]

Succeeded
