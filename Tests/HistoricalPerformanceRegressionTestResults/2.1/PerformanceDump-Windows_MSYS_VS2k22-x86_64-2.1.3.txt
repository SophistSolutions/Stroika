Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Aug 10 20:17:12 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.1283 secs, and comparison 4.38961 sec, and warnIfPerfScore > 0.65, and perfScore=0.855958]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.72707 secs, and comparison 2.6842 sec, and warnIfPerfScore > 0.5, and perfScore=0.399014]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 9.41458 secs, and comparison 7.35813 sec, and warnIfPerfScore > 1.05, and perfScore=0.781568]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.30276 secs, and comparison 8.09156 sec, and warnIfPerfScore > 1.15, and perfScore=1.10801]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.528 secs, and comparison 2.52648 sec, and warnIfPerfScore > 0.48, and perfScore=0.239977]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.4321 secs, and comparison 3.02535 sec, and warnIfPerfScore > 0.57, and perfScore=0.290004]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.02748 secs, and comparison 21.332 sec, and warnIfPerfScore > 2.9, and perfScore=2.36301]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.78553 secs, and comparison 20.0319 sec, and warnIfPerfScore > 2.9, and perfScore=2.2801]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.00507 secs, and comparison 149.701 sec, and warnIfPerfScore > 24, and perfScore=18.7008]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.75518 secs, and comparison 10.6896 sec, and warnIfPerfScore > 1.7, and perfScore=1.37838]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.50957 secs, and comparison 7.48906 sec, and warnIfPerfScore > 1.5, and perfScore=0.997268]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.57775 secs, and comparison 12.7761 sec, and warnIfPerfScore > 2.1, and perfScore=1.686]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.96086 secs, and comparison 4.5982 sec, and warnIfPerfScore > 1.6, and perfScore=0.577601]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 8.31193 secs, and comparison 0.795767 sec, and warnIfPerfScore > 0.23, and perfScore=0.0957379]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1188 secs, and comparison 13.4052 sec, and warnIfPerfScore > 1.3, and perfScore=1.02183]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.28529 secs, and comparison 6.9029 sec, and warnIfPerfScore > 1.2, and perfScore=0.743423]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.637 secs, and comparison 2.35492 sec, and warnIfPerfScore > 0.33, and perfScore=0.221389]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.43557 secs, and comparison 40.8811 sec, and warnIfPerfScore > 6, and perfScore=4.33266]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.88989 secs, and comparison 6.36947 sec, and warnIfPerfScore > 0.8, and perfScore=0.716485]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.12347 secs, and comparison 9.34327 sec, and warnIfPerfScore > 1.4, and perfScore=1.02409]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.9241 secs, and comparison 3.86777 sec, and warnIfPerfScore > 0.65, and perfScore=0.354058]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.396 secs, and comparison 38.5076 sec, and warnIfPerfScore > 4.4, and perfScore=3.70408]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.43192 secs, and comparison 3.48403 sec, and warnIfPerfScore > 0.6, and perfScore=0.369387]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.53696 secs, and comparison 3.46497 sec, and warnIfPerfScore > 0.6, and perfScore=0.36332]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.46693 secs, and comparison 3.43765 sec, and warnIfPerfScore > 0.6, and perfScore=0.363122]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.69774 secs, and comparison 6.47076 sec, and warnIfPerfScore > 1.3, and perfScore=0.667244]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.0174 secs, and comparison 10.2544 sec, and warnIfPerfScore > 1.3, and perfScore=1.02367]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 43.52 secs, and comparison 6.76791 sec, and warnIfPerfScore > 0.3, and perfScore=0.155513]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.63964 secs, and comparison 11.8429 sec, and warnIfPerfScore > 1.5, and perfScore=1.37077]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.10341 secs, and comparison 2.80524 sec, and warnIfPerfScore > 0.55, and perfScore=0.346181]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.583205 sec, and warnIfPerfScore > 0.1, and perfScore=0.0388803]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.83928 sec, and warnIfPerfScore > 0.5, and perfScore=0.189285]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 6.41561 secs, and comparison 14.1055 sec, and warnIfPerfScore > 2, and perfScore=2.19862]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.76494 secs, and comparison 17.8187 sec, and warnIfPerfScore > 3.6, and perfScore=1.82476]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 1 second]]]

Succeeded
