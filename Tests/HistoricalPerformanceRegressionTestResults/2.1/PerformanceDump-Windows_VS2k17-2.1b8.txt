Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Dec 23 20:28:57 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.9119 secs, and comparison 4.99981 sec, and warnIfPerfScore > 0.62, and perfScore=0.458199]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.7372 secs, and comparison 3.33055 sec, and warnIfPerfScore > 0.5, and perfScore=0.310187]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.9074 secs, and comparison 9.04841 sec, and warnIfPerfScore > 1.05, and perfScore=0.829566]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.1343 secs, and comparison 4.03574 sec, and warnIfPerfScore > 0.48, and perfScore=0.398226]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.5273 secs, and comparison 4.49818 sec, and warnIfPerfScore > 0.57, and perfScore=0.427288]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.1365 secs, and comparison 26.4996 sec, and warnIfPerfScore > 2.9, and perfScore=2.37952]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.5589 secs, and comparison 28.3101 sec, and warnIfPerfScore > 2.9, and perfScore=2.4492]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 11.3061 secs, and comparison 91.6542 sec, and warnIfPerfScore > 9.7, and perfScore=8.10662]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.72973 secs, and comparison 12.3215 sec, and warnIfPerfScore > 1.6, and perfScore=1.26637]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 14.0078 secs, and comparison 13.3948 sec, and warnIfPerfScore > 1.5, and perfScore=0.956237]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.63107 secs, and comparison 12.0106 sec, and warnIfPerfScore > 2.1, and perfScore=1.39155]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 12.6232 secs, and comparison 8.75624 sec, and warnIfPerfScore > 1.3, and perfScore=0.693661]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.1031 secs, and comparison 2.576 sec, and warnIfPerfScore > 0.23, and perfScore=0.196595]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.554 secs, and comparison 12.8186 sec, and warnIfPerfScore > 1.3, and perfScore=1.02107]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.2207 secs, and comparison 8.01489 sec, and warnIfPerfScore > 1.2, and perfScore=0.784183]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.22188 secs, and comparison 1.91606 sec, and warnIfPerfScore > 0.33, and perfScore=0.207773]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.79127 secs, and comparison 45.4713 sec, and warnIfPerfScore > 6, and perfScore=4.64406]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.09777 secs, and comparison 4.13977 sec, and warnIfPerfScore > 0.5, and perfScore=0.455031]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.4198 secs, and comparison 39.8269 sec, and warnIfPerfScore > 4.4, and perfScore=3.82223]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.17166 secs, and comparison 4.35821 sec, and warnIfPerfScore > 0.6, and perfScore=0.475182]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.4533 secs, and comparison 17.7086 sec, and warnIfPerfScore > 1.5, and perfScore=1.22523]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.6238 secs, and comparison 4.30565 sec, and warnIfPerfScore > 0.55, and perfScore=0.316039]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15 secs, and comparison 1.41371 sec, and warnIfPerfScore > 0.25, and perfScore=0.0942473]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.66302 sec, and warnIfPerfScore > 0.5, and perfScore=0.244202]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.5191 secs, and comparison 18.4512 sec, and warnIfPerfScore > 2, and perfScore=1.60179]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.0856 secs, and comparison 31.8995 sec, and warnIfPerfScore > 3.1, and perfScore=2.87757]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 25 seconds]]]

Succeeded
