Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 31 1:37:21 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.49738 secs, and comparison 4.04428 sec, and warnIfPerfScore > 0.65, and perfScore=0.622448]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.50817 secs, and comparison 2.59651 sec, and warnIfPerfScore > 0.5, and perfScore=0.398962]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 7.89616 secs, and comparison 6.88111 sec, and warnIfPerfScore > 1.05, and perfScore=0.87145]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.23875 secs, and comparison 6.90523 sec, and warnIfPerfScore > 1.15, and perfScore=1.10683]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.1917 secs, and comparison 2.33705 sec, and warnIfPerfScore > 0.48, and perfScore=0.191691]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.2834 secs, and comparison 2.78424 sec, and warnIfPerfScore > 0.57, and perfScore=0.246756]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.16412 secs, and comparison 19.1228 sec, and warnIfPerfScore > 2.9, and perfScore=2.66924]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.53546 secs, and comparison 19.6759 sec, and warnIfPerfScore > 2.9, and perfScore=2.6111]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 6.85599 secs, and comparison 136.496 sec, and warnIfPerfScore > 24, and perfScore=19.909]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.19266 secs, and comparison 10.3341 sec, and warnIfPerfScore > 1.7, and perfScore=1.66876]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.11924 secs, and comparison 6.91431 sec, and warnIfPerfScore > 1.5, and perfScore=0.971215]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.48813 secs, and comparison 11.5747 sec, and warnIfPerfScore > 2.1, and perfScore=1.78398]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 7.97268 secs, and comparison 6.95836 sec, and warnIfPerfScore > 1.6, and perfScore=0.872776]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 8.35156 secs, and comparison 1.2167 sec, and warnIfPerfScore > 0.23, and perfScore=0.145685]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2072 secs, and comparison 12.5076 sec, and warnIfPerfScore > 1.3, and perfScore=1.02461]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.33388 secs, and comparison 6.95182 sec, and warnIfPerfScore > 1.2, and perfScore=0.744794]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.77103 secs, and comparison 1.47219 sec, and warnIfPerfScore > 0.33, and perfScore=0.255099]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.96987 secs, and comparison 37.2348 sec, and warnIfPerfScore > 6, and perfScore=4.1511]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.9638 secs, and comparison 5.10095 sec, and warnIfPerfScore > 0.8, and perfScore=0.569061]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.97425 secs, and comparison 8.61863 sec, and warnIfPerfScore > 1.4, and perfScore=0.960373]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.75502 secs, and comparison 3.23772 sec, and warnIfPerfScore > 0.65, and perfScore=0.56259]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 8.95693 secs, and comparison 34.7281 sec, and warnIfPerfScore > 4.4, and perfScore=3.87723]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.91774 secs, and comparison 3.24485 sec, and warnIfPerfScore > 0.6, and perfScore=0.548326]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.93855 secs, and comparison 3.23849 sec, and warnIfPerfScore > 0.6, and perfScore=0.545334]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.92863 secs, and comparison 3.2145 sec, and warnIfPerfScore > 0.6, and perfScore=0.5422]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.92093 secs, and comparison 4.45643 sec, and warnIfPerfScore > 1.3, and perfScore=0.752657]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.22552 secs, and comparison 7.56668 sec, and warnIfPerfScore > 1.3, and perfScore=1.21543]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 40.1795 secs, and comparison 5.69389 sec, and warnIfPerfScore > 0.3, and perfScore=0.141711]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.74645 secs, and comparison 11.1974 sec, and warnIfPerfScore > 1.5, and perfScore=1.44549]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.70431 secs, and comparison 2.62465 sec, and warnIfPerfScore > 0.55, and perfScore=0.391487]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.837894 sec, and warnIfPerfScore > 0.1, and perfScore=0.0558596]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.8362 sec, and warnIfPerfScore > 0.5, and perfScore=0.18908]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.33298 secs, and comparison 8.39757 sec, and warnIfPerfScore > 2, and perfScore=1.14518]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.46291 secs, and comparison 28.5339 sec, and warnIfPerfScore > 3.6, and perfScore=3.37165]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 48 seconds]]]

Succeeded
