Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar  6 22:12:21 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.61689 secs, and comparison 4.09376 sec, and warnIfPerfScore > 0.65, and perfScore=0.618683]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.64473 secs, and comparison 2.57953 sec, and warnIfPerfScore > 0.5, and perfScore=0.388206]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.30952 secs, and comparison 7.11051 sec, and warnIfPerfScore > 1.05, and perfScore=0.855706]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.53209 secs, and comparison 7.28831 sec, and warnIfPerfScore > 1.15, and perfScore=1.11577]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.87303 secs, and comparison 2.37121 sec, and warnIfPerfScore > 0.48, and perfScore=0.301181]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.62096 secs, and comparison 2.80099 sec, and warnIfPerfScore > 0.57, and perfScore=0.367537]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.44513 secs, and comparison 19.2451 sec, and warnIfPerfScore > 2.9, and perfScore=2.27884]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.59387 secs, and comparison 20.1279 sec, and warnIfPerfScore > 2.9, and perfScore=2.34212]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.13237 secs, and comparison 141.881 sec, and warnIfPerfScore > 24, and perfScore=17.4464]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.15536 secs, and comparison 10.07 sec, and warnIfPerfScore > 1.7, and perfScore=1.40733]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.58124 secs, and comparison 7.75137 sec, and warnIfPerfScore > 1.5, and perfScore=1.02244]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.99121 secs, and comparison 11.8978 sec, and warnIfPerfScore > 2.1, and perfScore=1.70182]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.30855 secs, and comparison 7.37045 sec, and warnIfPerfScore > 1.6, and perfScore=0.887093]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.7717 secs, and comparison 1.26545 sec, and warnIfPerfScore > 0.23, and perfScore=0.144265]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2504 secs, and comparison 12.7309 sec, and warnIfPerfScore > 1.3, and perfScore=1.03923]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.86059 secs, and comparison 5.24044 sec, and warnIfPerfScore > 1.2, and perfScore=0.531453]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.90761 secs, and comparison 1.50981 sec, and warnIfPerfScore > 0.33, and perfScore=0.25557]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.4166 secs, and comparison 37.6011 sec, and warnIfPerfScore > 6, and perfScore=3.99306]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.4245 secs, and comparison 5.02186 sec, and warnIfPerfScore > 0.8, and perfScore=0.532851]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.47439 secs, and comparison 8.97595 sec, and warnIfPerfScore > 1.4, and perfScore=0.947391]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.90839 secs, and comparison 3.29713 sec, and warnIfPerfScore > 0.65, and perfScore=0.558041]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.56605 secs, and comparison 34.9561 sec, and warnIfPerfScore > 4.4, and perfScore=3.65418]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.15516 secs, and comparison 3.28599 sec, and warnIfPerfScore > 0.6, and perfScore=0.533859]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.2316 secs, and comparison 3.27855 sec, and warnIfPerfScore > 0.6, and perfScore=0.526118]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.15698 secs, and comparison 3.2603 sec, and warnIfPerfScore > 0.6, and perfScore=0.52953]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.11479 secs, and comparison 4.52442 sec, and warnIfPerfScore > 1.3, and perfScore=0.739914]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.61214 secs, and comparison 8.38678 sec, and warnIfPerfScore > 1.3, and perfScore=1.26839]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 43.9137 secs, and comparison 5.79581 sec, and warnIfPerfScore > 0.3, and perfScore=0.131982]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.08783 secs, and comparison 11.2919 sec, and warnIfPerfScore > 1.5, and perfScore=1.39616]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.16234 secs, and comparison 3.13955 sec, and warnIfPerfScore > 0.55, and perfScore=0.438342]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.854266 sec, and warnIfPerfScore > 0.1, and perfScore=0.0569511]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.88274 sec, and warnIfPerfScore > 0.5, and perfScore=0.192183]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.82139 secs, and comparison 8.5291 sec, and warnIfPerfScore > 2, and perfScore=1.09048]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.39758 secs, and comparison 28.9094 sec, and warnIfPerfScore > 3.6, and perfScore=3.07626]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 8 seconds]]]

Succeeded
