Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan 16 3:46:35 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.304 secs, and comparison 5.34825 sec, and warnIfPerfScore > 0.62, and perfScore=0.47313]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.3235 secs, and comparison 3.79135 sec, and warnIfPerfScore > 0.5, and perfScore=0.334821]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.884 secs, and comparison 9.77453 sec, and warnIfPerfScore > 1.05, and perfScore=0.822498]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.3664 secs, and comparison 4.40661 sec, and warnIfPerfScore > 0.48, and perfScore=0.387686]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.3127 secs, and comparison 4.61419 sec, and warnIfPerfScore > 0.57, and perfScore=0.407877]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.7267 secs, and comparison 28.0148 sec, and warnIfPerfScore > 2.9, and perfScore=2.20126]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.5475 secs, and comparison 30.31 sec, and warnIfPerfScore > 2.9, and perfScore=2.23731]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 12.4589 secs, and comparison 98.4554 sec, and warnIfPerfScore > 9.7, and perfScore=7.90239]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.9978 secs, and comparison 12.8871 sec, and warnIfPerfScore > 1.6, and perfScore=1.17178]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.9029 secs, and comparison 13.8413 sec, and warnIfPerfScore > 1.5, and perfScore=0.995569]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.29091 secs, and comparison 12.8995 sec, and warnIfPerfScore > 2.1, and perfScore=1.3884]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 13.3194 secs, and comparison 10.4081 sec, and warnIfPerfScore > 1.3, and perfScore=0.781422]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.8704 secs, and comparison 3.18155 sec, and warnIfPerfScore > 0.23, and perfScore=0.229377]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 15.5325 secs, and comparison 14.3523 sec, and warnIfPerfScore > 1.3, and perfScore=0.924014]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 17.9872 secs, and comparison 7.95122 sec, and warnIfPerfScore > 1.2, and perfScore=0.442049]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 10.8473 secs, and comparison 2.07324 sec, and warnIfPerfScore > 0.33, and perfScore=0.191129]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 17.3613 secs, and comparison 48.6364 sec, and warnIfPerfScore > 6, and perfScore=2.80143]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.8168 secs, and comparison 4.45069 sec, and warnIfPerfScore > 0.5, and perfScore=0.411462]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 18.2289 secs, and comparison 42.1193 sec, and warnIfPerfScore > 4.4, and perfScore=2.31058]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.839 secs, and comparison 4.85119 sec, and warnIfPerfScore > 0.6, and perfScore=0.447569]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.5399 secs, and comparison 22.0956 sec, and warnIfPerfScore > 1.5, and perfScore=1.19179]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.6255 secs, and comparison 4.40377 sec, and warnIfPerfScore > 0.55, and perfScore=0.414455]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.66465 sec, and warnIfPerfScore > 0.25, and perfScore=0.110977]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.95677 sec, and warnIfPerfScore > 0.5, and perfScore=0.263785]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.5565 secs, and comparison 20.5468 sec, and warnIfPerfScore > 2, and perfScore=1.63634]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.4576 secs, and comparison 34.2834 sec, and warnIfPerfScore > 3.1, and perfScore=2.75201]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 47 seconds]]]

Succeeded
