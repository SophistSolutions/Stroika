Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug 10 14:27:31 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.55665 secs, and comparison 4.65246 sec, and warnIfPerfScore > 0.62, and perfScore=0.837279]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.52854 secs, and comparison 2.97812 sec, and warnIfPerfScore > 0.5, and perfScore=0.538682]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.40508 secs, and comparison 6.87373 sec, and warnIfPerfScore > 1.05, and perfScore=1.07317]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 3.9277 secs, and comparison 3.5824 sec, and warnIfPerfScore > 0.48, and perfScore=0.912085]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.67828 secs, and comparison 4.09946 sec, and warnIfPerfScore > 0.57, and perfScore=0.876276]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 3.43819 secs, and comparison 20.1869 sec, and warnIfPerfScore > 2.9, and perfScore=5.87139]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 4.13349 secs, and comparison 21.7772 sec, and warnIfPerfScore > 2.9, and perfScore=5.26848]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.84285 secs, and comparison 64.079 sec, and warnIfPerfScore > 9.7, and perfScore=10.9671]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.23441 secs, and comparison 10.6956 sec, and warnIfPerfScore > 1.6, and perfScore=2.04333]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.94945 secs, and comparison 5.82638 sec, and warnIfPerfScore > 1.5, and perfScore=0.979313]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.92888 secs, and comparison 10.6252 sec, and warnIfPerfScore > 2.1, and perfScore=3.62772]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 4.32185 secs, and comparison 3.42446 sec, and warnIfPerfScore > 1.3, and perfScore=0.792359]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.54079 secs, and comparison 1.56298 sec, and warnIfPerfScore > 0.23, and perfScore=0.344209]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.34816 secs, and comparison 5.08439 sec, and warnIfPerfScore > 1.3, and perfScore=1.16932]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.38048 secs, and comparison 7.82773 sec, and warnIfPerfScore > 1.2, and perfScore=2.31557]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 16.0472 secs, and comparison 1.55043 sec, and warnIfPerfScore > 0.33, and perfScore=0.0966168]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.21972 secs, and comparison 42.3113 sec, and warnIfPerfScore > 6, and perfScore=13.1413]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.7794 secs, and comparison 3.84151 sec, and warnIfPerfScore > 0.5, and perfScore=0.356374]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 4.64009 secs, and comparison 37.3666 sec, and warnIfPerfScore > 4.4, and perfScore=8.05299]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.5138 secs, and comparison 3.78204 sec, and warnIfPerfScore > 0.6, and perfScore=0.302229]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.49077 secs, and comparison 13.8938 sec, and warnIfPerfScore > 1.5, and perfScore=1.85479]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.85942 secs, and comparison 2.21472 sec, and warnIfPerfScore > 0.55, and perfScore=0.224629]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.15548 sec, and warnIfPerfScore > 0.25, and perfScore=0.0770317]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.872 sec, and warnIfPerfScore > 0.5, and perfScore=0.258134]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 58 seconds]]]

Succeeded
