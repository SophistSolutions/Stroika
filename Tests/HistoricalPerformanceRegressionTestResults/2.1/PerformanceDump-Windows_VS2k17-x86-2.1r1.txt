Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 4:32:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.5463 secs, and comparison 5.24387 sec, and warnIfPerfScore > 0.65, and perfScore=0.497223]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.3554 secs, and comparison 3.9158 sec, and warnIfPerfScore > 0.5, and perfScore=0.316931]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 17.9599 secs, and comparison 9.7673 sec, and warnIfPerfScore > 1.05, and perfScore=0.543841]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.41887 secs, and comparison 9.32079 sec, and warnIfPerfScore > 1.15, and perfScore=1.10713]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 18.3444 secs, and comparison 3.37171 sec, and warnIfPerfScore > 0.48, and perfScore=0.1838]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.9615 secs, and comparison 4.7083 sec, and warnIfPerfScore > 0.57, and perfScore=0.42953]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 22.1069 secs, and comparison 29.1626 sec, and warnIfPerfScore > 2.9, and perfScore=1.31916]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.547 secs, and comparison 37.632 sec, and warnIfPerfScore > 2.9, and perfScore=2.58693]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 16.0528 secs, and comparison 252.764 sec, and warnIfPerfScore > 24, and perfScore=15.7458]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 21.9442 secs, and comparison 14.0643 sec, and warnIfPerfScore > 1.6, and perfScore=0.640914]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.7343 secs, and comparison 14.4869 sec, and warnIfPerfScore > 1.5, and perfScore=1.13763]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.7038 secs, and comparison 19.0667 sec, and warnIfPerfScore > 2.1, and perfScore=1.6291]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 16.4989 secs, and comparison 13.0926 sec, and warnIfPerfScore > 1.6, and perfScore=0.793546]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15.7111 secs, and comparison 3.05615 sec, and warnIfPerfScore > 0.23, and perfScore=0.194522]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 23.7354 secs, and comparison 19.1484 sec, and warnIfPerfScore > 1.3, and perfScore=0.806744]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 11.2669 secs, and comparison 7.39481 sec, and warnIfPerfScore > 1.2, and perfScore=0.656333]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.4197 secs, and comparison 2.34954 sec, and warnIfPerfScore > 0.33, and perfScore=0.249428]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.3396 secs, and comparison 45.9277 sec, and warnIfPerfScore > 6, and perfScore=4.44193]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 16.1485 secs, and comparison 14.1394 sec, and warnIfPerfScore > 0.8, and perfScore=0.875588]
	                 	Sequence_Array<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.8 and got 0.875588}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 18.8234 secs, and comparison 28.0693 sec, and warnIfPerfScore > 1.4, and perfScore=1.49119]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.49119}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 18.499 secs, and comparison 4.99641 sec, and warnIfPerfScore > 0.65, and perfScore=0.270091]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 20.7216 secs, and comparison 42.1741 sec, and warnIfPerfScore > 4.4, and perfScore=2.03527]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.52791 secs, and comparison 4.26557 sec, and warnIfPerfScore > 0.6, and perfScore=0.447692]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.81208 secs, and comparison 4.15411 sec, and warnIfPerfScore > 0.6, and perfScore=0.423367]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.90017 secs, and comparison 4.22743 sec, and warnIfPerfScore > 0.6, and perfScore=0.427006]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2606 secs, and comparison 13.3336 sec, and warnIfPerfScore > 1.3, and perfScore=1.08751]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.9993 secs, and comparison 18.9466 sec, and warnIfPerfScore > 1.3, and perfScore=1.11455]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 75.3788 secs, and comparison 8.82997 sec, and warnIfPerfScore > 0.3, and perfScore=0.117141]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.4102 secs, and comparison 22.8242 sec, and warnIfPerfScore > 1.5, and perfScore=1.11828]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 24.0149 secs, and comparison 7.3821 sec, and warnIfPerfScore > 0.55, and perfScore=0.307397]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.76411 sec, and warnIfPerfScore > 0.1, and perfScore=0.184274]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.184274}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.31184 sec, and warnIfPerfScore > 0.5, and perfScore=0.354122]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.2181 secs, and comparison 22.985 sec, and warnIfPerfScore > 2, and perfScore=1.41724]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.6256 secs, and comparison 33.8852 sec, and warnIfPerfScore > 3.1, and perfScore=2.48688]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 21 minutes, 45 seconds]]]

Succeeded
