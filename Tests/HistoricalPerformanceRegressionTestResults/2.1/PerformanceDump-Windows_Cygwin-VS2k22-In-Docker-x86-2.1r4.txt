Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  1 3:33:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.52436 secs, and comparison 4.52367 sec, and warnIfPerfScore > 0.65, and perfScore=0.601203]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.49042 secs, and comparison 2.99707 sec, and warnIfPerfScore > 0.5, and perfScore=0.40012]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.03351 secs, and comparison 7.97946 sec, and warnIfPerfScore > 1.05, and perfScore=0.883318]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.14839 secs, and comparison 7.91277 sec, and warnIfPerfScore > 1.15, and perfScore=1.10693]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.90009 secs, and comparison 2.66384 sec, and warnIfPerfScore > 0.48, and perfScore=0.337192]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.96255 secs, and comparison 3.24684 sec, and warnIfPerfScore > 0.57, and perfScore=0.407763]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.02956 secs, and comparison 21.7681 sec, and warnIfPerfScore > 2.9, and perfScore=2.711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 8.15081 secs, and comparison 22.5162 sec, and warnIfPerfScore > 2.9, and perfScore=2.76245]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.65124 secs, and comparison 148.947 sec, and warnIfPerfScore > 24, and perfScore=19.467]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.38987 secs, and comparison 11.3391 sec, and warnIfPerfScore > 1.7, and perfScore=1.53441]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.96861 secs, and comparison 7.76042 sec, and warnIfPerfScore > 1.5, and perfScore=0.973873]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.39853 secs, and comparison 13.2605 sec, and warnIfPerfScore > 2.1, and perfScore=1.79231]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.28021 secs, and comparison 6.86837 sec, and warnIfPerfScore > 1.6, and perfScore=0.74011]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.73294 secs, and comparison 1.30024 sec, and warnIfPerfScore > 0.23, and perfScore=0.133592]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0129 secs, and comparison 13.5973 sec, and warnIfPerfScore > 1.3, and perfScore=1.04491]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.1491 secs, and comparison 5.66951 sec, and warnIfPerfScore > 1.2, and perfScore=0.558624]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.30157 secs, and comparison 1.49924 sec, and warnIfPerfScore > 0.33, and perfScore=0.237916]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.71846 secs, and comparison 41.3511 sec, and warnIfPerfScore > 6, and perfScore=4.2549]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.71854 secs, and comparison 5.47548 sec, and warnIfPerfScore > 0.8, and perfScore=0.563406]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.71764 secs, and comparison 9.13609 sec, and warnIfPerfScore > 1.4, and perfScore=0.940155]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.24727 secs, and comparison 3.58817 sec, and warnIfPerfScore > 0.65, and perfScore=0.574359]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.96713 secs, and comparison 38.7602 sec, and warnIfPerfScore > 4.4, and perfScore=3.8888]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.43453 secs, and comparison 3.55553 sec, and warnIfPerfScore > 0.6, and perfScore=0.55257]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.44405 secs, and comparison 3.55191 sec, and warnIfPerfScore > 0.6, and perfScore=0.551192]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.46005 secs, and comparison 3.59267 sec, and warnIfPerfScore > 0.6, and perfScore=0.556136]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.43354 secs, and comparison 4.90144 sec, and warnIfPerfScore > 1.3, and perfScore=0.761857]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.92822 secs, and comparison 8.48936 sec, and warnIfPerfScore > 1.3, and perfScore=1.22533]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.6242 secs, and comparison 6.03457 sec, and warnIfPerfScore > 0.3, and perfScore=0.12943]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.73514 secs, and comparison 12.9147 sec, and warnIfPerfScore > 1.5, and perfScore=1.47848]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.18444 secs, and comparison 3.00592 sec, and warnIfPerfScore > 0.55, and perfScore=0.418392]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 15 secs, and comparison 0.95059 sec, and warnIfPerfScore > 0.1, and perfScore=0.0633727]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.03065 sec, and warnIfPerfScore > 0.5, and perfScore=0.202043]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.72793 secs, and comparison 8.64925 sec, and warnIfPerfScore > 2, and perfScore=0.990985]
	                 	codecvt_utf8 is FASTER

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.49759 secs, and comparison 30.3254 sec, and warnIfPerfScore > 3.6, and perfScore=3.19296]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 53 seconds]]]

Succeeded
