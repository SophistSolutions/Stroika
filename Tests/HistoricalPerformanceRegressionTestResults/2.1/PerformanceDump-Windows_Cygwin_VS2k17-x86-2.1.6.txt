Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Oct 17 21:17:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 53.5295 secs, and comparison 7.05966 sec, and warnIfPerfScore > 0.65, and perfScore=0.131884]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 50.3577 secs, and comparison 6.55197 sec, and warnIfPerfScore > 0.5, and perfScore=0.130109]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 20.7379 secs, and comparison 15.0737 sec, and warnIfPerfScore > 1.05, and perfScore=0.726871]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.9316 secs, and comparison 14.6324 sec, and warnIfPerfScore > 1.15, and perfScore=0.979963]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 23.938 secs, and comparison 3.9184 sec, and warnIfPerfScore > 0.48, and perfScore=0.16369]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 24.2262 secs, and comparison 4.07068 sec, and warnIfPerfScore > 0.57, and perfScore=0.168028]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 27.7612 secs, and comparison 41.377 sec, and warnIfPerfScore > 2.9, and perfScore=1.49046]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 28.3582 secs, and comparison 45.0075 sec, and warnIfPerfScore > 2.9, and perfScore=1.58711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 24.6663 secs, and comparison 251.688 sec, and warnIfPerfScore > 24, and perfScore=10.2037]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 21.9197 secs, and comparison 15.5598 sec, and warnIfPerfScore > 1.7, and perfScore=0.709855]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 41.8309 secs, and comparison 45.7968 sec, and warnIfPerfScore > 1.5, and perfScore=1.09481]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 21.6589 secs, and comparison 19.9136 sec, and warnIfPerfScore > 2.1, and perfScore=0.919418]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 36.9316 secs, and comparison 13.2737 sec, and warnIfPerfScore > 1.6, and perfScore=0.359414]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 37.7041 secs, and comparison 2.50103 sec, and warnIfPerfScore > 0.23, and perfScore=0.066333]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.0846 secs, and comparison 27.0889 sec, and warnIfPerfScore > 1.3, and perfScore=1.41941]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.41941}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.8826 secs, and comparison 20.4143 sec, and warnIfPerfScore > 1.2, and perfScore=1.37169]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.37169}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.2048 secs, and comparison 4.30698 sec, and warnIfPerfScore > 0.33, and perfScore=0.326167]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 14.2564 secs, and comparison 51.2571 sec, and warnIfPerfScore > 6, and perfScore=3.59536]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.29 secs, and comparison 19.3612 sec, and warnIfPerfScore > 0.8, and perfScore=1.35488]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.35488}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.3713 secs, and comparison 38.2115 sec, and warnIfPerfScore > 1.4, and perfScore=2.65888]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.65888}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.3053 secs, and comparison 5.01085 sec, and warnIfPerfScore > 0.65, and perfScore=0.376605]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 24.5653 secs, and comparison 60.6271 sec, and warnIfPerfScore > 4.4, and perfScore=2.468]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.6302 secs, and comparison 5.83267 sec, and warnIfPerfScore > 0.6, and perfScore=0.427923]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 13.0793 secs, and comparison 6.05237 sec, and warnIfPerfScore > 0.6, and perfScore=0.462744]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 13.6552 secs, and comparison 6.63545 sec, and warnIfPerfScore > 0.6, and perfScore=0.485928]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.474 secs, and comparison 14.2108 sec, and warnIfPerfScore > 1.3, and perfScore=1.05469]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.3337 secs, and comparison 21.3829 sec, and warnIfPerfScore > 1.3, and perfScore=1.0516]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 108.694 secs, and comparison 8.37358 sec, and warnIfPerfScore > 0.3, and perfScore=0.0770378]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 26.0109 secs, and comparison 29.9739 sec, and warnIfPerfScore > 1.5, and perfScore=1.15236]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 18.7125 secs, and comparison 6.20929 sec, and warnIfPerfScore > 0.55, and perfScore=0.331827]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.14547 sec, and warnIfPerfScore > 0.1, and perfScore=0.143031]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.143031}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.08267 sec, and warnIfPerfScore > 0.5, and perfScore=0.338844]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 20.2633 secs, and comparison 23.7782 sec, and warnIfPerfScore > 2, and perfScore=1.17346]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 24.0484 secs, and comparison 42.2682 sec, and warnIfPerfScore > 3.6, and perfScore=1.75763]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 18 seconds]]]

Succeeded
