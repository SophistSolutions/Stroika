Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 26 4:32:58 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.18577 secs, and comparison 4.30092 sec, and warnIfPerfScore > 0.65, and perfScore=0.598533]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.20989 secs, and comparison 2.70074 sec, and warnIfPerfScore > 0.5, and perfScore=0.374589]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.8836 secs, and comparison 7.76694 sec, and warnIfPerfScore > 1.05, and perfScore=0.8743]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.87613 secs, and comparison 7.38102 sec, and warnIfPerfScore > 1.15, and perfScore=1.07343]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 35.0127 secs, and comparison 2.2028 sec, and warnIfPerfScore > 0.48, and perfScore=0.0629144]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 33.6169 secs, and comparison 2.64161 sec, and warnIfPerfScore > 0.57, and perfScore=0.0785798]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.95109 secs, and comparison 20.4889 sec, and warnIfPerfScore > 2.9, and perfScore=2.28899]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.56234 secs, and comparison 21.7737 sec, and warnIfPerfScore > 2.9, and perfScore=2.27702]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.32396 secs, and comparison 152.041 sec, and warnIfPerfScore > 24, and perfScore=18.2655]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.84654 secs, and comparison 10.4112 sec, and warnIfPerfScore > 1.7, and perfScore=1.32685]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.71809 secs, and comparison 8.63006 sec, and warnIfPerfScore > 1.5, and perfScore=0.989902]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.23176 secs, and comparison 12.2327 sec, and warnIfPerfScore > 2.1, and perfScore=1.69152]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.21478 secs, and comparison 7.08763 sec, and warnIfPerfScore > 1.6, and perfScore=0.769158]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.139 secs, and comparison 1.40997 sec, and warnIfPerfScore > 0.23, and perfScore=0.139063]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8874 secs, and comparison 13.2507 sec, and warnIfPerfScore > 1.3, and perfScore=1.02819]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.6372 secs, and comparison 6.80131 sec, and warnIfPerfScore > 1.2, and perfScore=0.639386]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.48067 secs, and comparison 2.30852 sec, and warnIfPerfScore > 0.33, and perfScore=0.243498]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.88511 secs, and comparison 39.3217 sec, and warnIfPerfScore > 6, and perfScore=3.97787]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.91033 secs, and comparison 5.85728 sec, and warnIfPerfScore > 0.8, and perfScore=0.591028]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.90367 secs, and comparison 9.61126 sec, and warnIfPerfScore > 1.4, and perfScore=0.970475]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.58711 secs, and comparison 3.48924 sec, and warnIfPerfScore > 0.65, and perfScore=0.363951]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.5426 secs, and comparison 36.2027 sec, and warnIfPerfScore > 4.4, and perfScore=3.43394]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.68478 secs, and comparison 3.46766 sec, and warnIfPerfScore > 0.6, and perfScore=0.358053]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.38075 secs, and comparison 3.47443 sec, and warnIfPerfScore > 0.6, and perfScore=0.370379]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.30987 secs, and comparison 3.65581 sec, and warnIfPerfScore > 0.6, and perfScore=0.392681]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.72519 secs, and comparison 4.98287 sec, and warnIfPerfScore > 1.3, and perfScore=0.512368]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.0948 secs, and comparison 8.68637 sec, and warnIfPerfScore > 1.3, and perfScore=0.860478]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.7869 secs, and comparison 6.16955 sec, and warnIfPerfScore > 0.3, and perfScore=0.131865]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.23467 secs, and comparison 11.6134 sec, and warnIfPerfScore > 1.5, and perfScore=1.41031]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.42881 secs, and comparison 2.85025 sec, and warnIfPerfScore > 0.55, and perfScore=0.383675]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.799968 sec, and warnIfPerfScore > 0.1, and perfScore=0.0533312]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.91671 sec, and warnIfPerfScore > 0.5, and perfScore=0.194448]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.62797 secs, and comparison 14.3946 sec, and warnIfPerfScore > 2, and perfScore=1.66837]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.55242 secs, and comparison 29.8653 sec, and warnIfPerfScore > 3.6, and perfScore=3.12646]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 13 seconds]]]

Succeeded
