Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 1:39:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.60002 secs, and comparison 4.44528 sec, and warnIfPerfScore > 0.65, and perfScore=0.584903]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.63184 secs, and comparison 2.96347 sec, and warnIfPerfScore > 0.5, and perfScore=0.388304]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.9412 secs, and comparison 7.72131 sec, and warnIfPerfScore > 1.05, and perfScore=0.863566]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.99205 secs, and comparison 7.68761 sec, and warnIfPerfScore > 1.15, and perfScore=1.09948]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.8414 secs, and comparison 2.32469 sec, and warnIfPerfScore > 0.48, and perfScore=0.0667221]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 33.3284 secs, and comparison 2.80982 sec, and warnIfPerfScore > 0.57, and perfScore=0.084307]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.88056 secs, and comparison 21.3765 sec, and warnIfPerfScore > 2.9, and perfScore=2.40711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.23567 secs, and comparison 22.2444 sec, and warnIfPerfScore > 2.9, and perfScore=2.40853]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.35181 secs, and comparison 143.893 sec, and warnIfPerfScore > 24, and perfScore=17.2289]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.70535 secs, and comparison 11.3544 sec, and warnIfPerfScore > 1.7, and perfScore=1.47357]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.45514 secs, and comparison 8.18627 sec, and warnIfPerfScore > 1.5, and perfScore=0.968201]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.88362 secs, and comparison 12.9184 sec, and warnIfPerfScore > 2.1, and perfScore=1.87669]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.54087 secs, and comparison 6.78246 sec, and warnIfPerfScore > 1.6, and perfScore=0.710886]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.95733 secs, and comparison 1.38316 sec, and warnIfPerfScore > 0.23, and perfScore=0.138909]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.7334 secs, and comparison 13.2481 sec, and warnIfPerfScore > 1.3, and perfScore=1.04042]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 10.0192 secs, and comparison 5.79597 sec, and warnIfPerfScore > 1.2, and perfScore=0.578489]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.28538 secs, and comparison 2.25972 sec, and warnIfPerfScore > 0.33, and perfScore=0.243363]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.63222 secs, and comparison 39.5763 sec, and warnIfPerfScore > 6, and perfScore=4.10874]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.67541 secs, and comparison 6.50252 sec, and warnIfPerfScore > 0.8, and perfScore=0.672066]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.65547 secs, and comparison 9.68959 sec, and warnIfPerfScore > 1.4, and perfScore=1.00353]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.37992 secs, and comparison 3.55835 sec, and warnIfPerfScore > 0.65, and perfScore=0.379358]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.9497 secs, and comparison 37.0542 sec, and warnIfPerfScore > 4.4, and perfScore=3.72415]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.25262 secs, and comparison 3.64968 sec, and warnIfPerfScore > 0.6, and perfScore=0.394448]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.29584 secs, and comparison 3.65669 sec, and warnIfPerfScore > 0.6, and perfScore=0.393368]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.23977 secs, and comparison 3.61912 sec, and warnIfPerfScore > 0.6, and perfScore=0.391689]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.27589 secs, and comparison 5.18427 sec, and warnIfPerfScore > 1.3, and perfScore=0.558897]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.95645 secs, and comparison 8.87263 sec, and warnIfPerfScore > 1.3, and perfScore=0.891144]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.3888 secs, and comparison 6.07805 sec, and warnIfPerfScore > 0.3, and perfScore=0.131024]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.62292 secs, and comparison 11.8144 sec, and warnIfPerfScore > 1.5, and perfScore=1.54985]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.54985}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.29975 secs, and comparison 2.92131 sec, and warnIfPerfScore > 0.55, and perfScore=0.400193]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.812544 sec, and warnIfPerfScore > 0.1, and perfScore=0.0541696]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.93591 sec, and warnIfPerfScore > 0.5, and perfScore=0.195727]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.27794 secs, and comparison 13.8769 sec, and warnIfPerfScore > 2, and perfScore=1.67636]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.31851 secs, and comparison 28.8402 sec, and warnIfPerfScore > 3.6, and perfScore=3.09494]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 1 second]]]

Succeeded
