Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  8 18:22:19 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.44039 secs, and comparison 4.49743 sec, and warnIfPerfScore > 0.65, and perfScore=0.604461]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.47188 secs, and comparison 2.99792 sec, and warnIfPerfScore > 0.5, and perfScore=0.401227]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.85029 secs, and comparison 7.7676 sec, and warnIfPerfScore > 1.05, and perfScore=0.877666]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.89374 secs, and comparison 7.85869 sec, and warnIfPerfScore > 1.15, and perfScore=1.13997]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.7404 secs, and comparison 2.62539 sec, and warnIfPerfScore > 0.48, and perfScore=0.339181]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.86425 secs, and comparison 3.28035 sec, and warnIfPerfScore > 0.57, and perfScore=0.417122]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.85213 secs, and comparison 21.7239 sec, and warnIfPerfScore > 2.9, and perfScore=2.76663]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.06566 secs, and comparison 21.9064 sec, and warnIfPerfScore > 2.9, and perfScore=2.71601]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.53346 secs, and comparison 151.41 sec, and warnIfPerfScore > 24, and perfScore=20.0983]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.27077 secs, and comparison 11.3058 sec, and warnIfPerfScore > 1.7, and perfScore=1.55497]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.81237 secs, and comparison 7.59947 sec, and warnIfPerfScore > 1.5, and perfScore=0.972748]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.37371 secs, and comparison 13.2046 sec, and warnIfPerfScore > 2.1, and perfScore=1.79077]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.40659 secs, and comparison 6.96112 sec, and warnIfPerfScore > 1.6, and perfScore=0.740026]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.70815 secs, and comparison 1.25296 sec, and warnIfPerfScore > 0.23, and perfScore=0.129063]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9237 secs, and comparison 13.462 sec, and warnIfPerfScore > 1.3, and perfScore=1.04166]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.1239 secs, and comparison 5.62084 sec, and warnIfPerfScore > 1.2, and perfScore=0.555205]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.20147 secs, and comparison 1.46196 sec, and warnIfPerfScore > 0.33, and perfScore=0.235743]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.75074 secs, and comparison 40.8472 sec, and warnIfPerfScore > 6, and perfScore=4.18914]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.73789 secs, and comparison 5.36784 sec, and warnIfPerfScore > 0.8, and perfScore=0.551232]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.69295 secs, and comparison 9.09532 sec, and warnIfPerfScore > 1.4, and perfScore=0.938345]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.25524 secs, and comparison 3.68157 sec, and warnIfPerfScore > 0.65, and perfScore=0.588558]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.0456 secs, and comparison 38.4141 sec, and warnIfPerfScore > 4.4, and perfScore=3.82398]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.49934 secs, and comparison 3.55543 sec, and warnIfPerfScore > 0.6, and perfScore=0.547044]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.41037 secs, and comparison 3.54047 sec, and warnIfPerfScore > 0.6, and perfScore=0.552304]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.42737 secs, and comparison 3.55772 sec, and warnIfPerfScore > 0.6, and perfScore=0.553526]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.4617 secs, and comparison 4.80574 sec, and warnIfPerfScore > 1.3, and perfScore=0.743727]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.83446 secs, and comparison 8.36619 sec, and warnIfPerfScore > 1.3, and perfScore=1.22412]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.7398 secs, and comparison 5.96777 sec, and warnIfPerfScore > 0.3, and perfScore=0.127681]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.45602 secs, and comparison 12.5867 sec, and warnIfPerfScore > 1.5, and perfScore=1.48849]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.30164 secs, and comparison 3.55431 sec, and warnIfPerfScore > 0.55, and perfScore=0.486782]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 15 secs, and comparison 0.916599 sec, and warnIfPerfScore > 0.1, and perfScore=0.0611066]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.10782 sec, and warnIfPerfScore > 0.5, and perfScore=0.207188]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.60534 secs, and comparison 8.53444 sec, and warnIfPerfScore > 2, and perfScore=0.99176]
	                 	codecvt_utf8 is FASTER

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.5408 secs, and comparison 29.7617 sec, and warnIfPerfScore > 3.6, and perfScore=3.11942]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 51 seconds]]]

Succeeded
