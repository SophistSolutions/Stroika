Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 21 7:37:46 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.96886 secs, and comparison 5.07233 sec, and warnIfPerfScore > 0.62, and perfScore=0.508817]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.80648 secs, and comparison 3.50727 sec, and warnIfPerfScore > 0.5, and perfScore=0.357648]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.3957 secs, and comparison 9.64477 sec, and warnIfPerfScore > 1.05, and perfScore=0.846351]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.9144 secs, and comparison 4.19922 sec, and warnIfPerfScore > 0.48, and perfScore=0.35245]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.9873 secs, and comparison 4.46185 sec, and warnIfPerfScore > 0.57, and perfScore=0.372214]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.1818 secs, and comparison 27.2908 sec, and warnIfPerfScore > 2.9, and perfScore=2.24029]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.532 secs, and comparison 29.4756 sec, and warnIfPerfScore > 2.9, and perfScore=2.35203]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 12.3391 secs, and comparison 94.0616 sec, and warnIfPerfScore > 9.7, and perfScore=7.62306]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.90493 secs, and comparison 12.4605 sec, and warnIfPerfScore > 1.6, and perfScore=1.25801]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.6534 secs, and comparison 13.4251 sec, and warnIfPerfScore > 1.5, and perfScore=0.983276]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.73503 secs, and comparison 12.4431 sec, and warnIfPerfScore > 2.1, and perfScore=1.4245]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 12.8117 secs, and comparison 9.72841 sec, and warnIfPerfScore > 1.3, and perfScore=0.759335]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.4199 secs, and comparison 2.68202 sec, and warnIfPerfScore > 0.23, and perfScore=0.199855]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9487 secs, and comparison 13.301 sec, and warnIfPerfScore > 1.3, and perfScore=1.02721]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 10.3392 secs, and comparison 7.80999 sec, and warnIfPerfScore > 1.2, and perfScore=0.755377]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.52483 secs, and comparison 1.96474 sec, and warnIfPerfScore > 0.33, and perfScore=0.206276]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.65538 secs, and comparison 45.6319 sec, and warnIfPerfScore > 6, and perfScore=4.72606]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.26774 secs, and comparison 4.35806 sec, and warnIfPerfScore > 0.5, and perfScore=0.47024]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.9045 secs, and comparison 40.4033 sec, and warnIfPerfScore > 4.4, and perfScore=3.70521]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.51651 secs, and comparison 4.42148 sec, and warnIfPerfScore > 0.6, and perfScore=0.464611]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.5953 secs, and comparison 16.1054 sec, and warnIfPerfScore > 1.5, and perfScore=1.27869]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.304 secs, and comparison 4.53479 sec, and warnIfPerfScore > 0.55, and perfScore=0.317031]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 15 secs, and comparison 1.48182 sec, and warnIfPerfScore > 0.25, and perfScore=0.0987878]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.73679 sec, and warnIfPerfScore > 0.5, and perfScore=0.249119]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.0455 secs, and comparison 17.0462 sec, and warnIfPerfScore > 2, and perfScore=1.41515]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.2171 secs, and comparison 32.7558 sec, and warnIfPerfScore > 3.1, and perfScore=2.68115]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 39 seconds]]]

Succeeded
