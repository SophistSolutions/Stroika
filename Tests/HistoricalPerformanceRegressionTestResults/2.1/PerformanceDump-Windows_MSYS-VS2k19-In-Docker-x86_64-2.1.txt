Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 15 17:22:58 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.49849 secs, and comparison 4.36944 sec, and warnIfPerfScore > 0.65, and perfScore=0.794662]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.61865 secs, and comparison 2.63968 sec, and warnIfPerfScore > 0.5, and perfScore=0.469807]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.15399 secs, and comparison 7.2237 sec, and warnIfPerfScore > 1.05, and perfScore=0.88591]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.5988 secs, and comparison 7.34046 sec, and warnIfPerfScore > 1.15, and perfScore=1.11239]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.75941 secs, and comparison 2.23727 sec, and warnIfPerfScore > 0.48, and perfScore=0.229242]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 9.35412 secs, and comparison 2.8715 sec, and warnIfPerfScore > 0.57, and perfScore=0.306977]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.50539 secs, and comparison 18.8479 sec, and warnIfPerfScore > 2.9, and perfScore=2.89728]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.82469 secs, and comparison 19.0394 sec, and warnIfPerfScore > 2.9, and perfScore=2.78978]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.15347 secs, and comparison 134.557 sec, and warnIfPerfScore > 24, and perfScore=21.8668]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.60199 secs, and comparison 10.0064 sec, and warnIfPerfScore > 1.7, and perfScore=1.78622]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.67311 secs, and comparison 5.68372 sec, and warnIfPerfScore > 1.5, and perfScore=1.00187]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.09526 secs, and comparison 12.7317 sec, and warnIfPerfScore > 2.1, and perfScore=2.49873]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.8284 secs, and comparison 4.43484 sec, and warnIfPerfScore > 1.6, and perfScore=0.374932]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 12.4368 secs, and comparison 0.636064 sec, and warnIfPerfScore > 0.23, and perfScore=0.0511439]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.6818 secs, and comparison 12.04 sec, and warnIfPerfScore > 1.3, and perfScore=1.03066]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.6343 secs, and comparison 5.08328 sec, and warnIfPerfScore > 1.2, and perfScore=0.436921]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.66784 secs, and comparison 1.78403 sec, and warnIfPerfScore > 0.33, and perfScore=0.232665]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.0421 secs, and comparison 38.7821 sec, and warnIfPerfScore > 6, and perfScore=3.51221]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.79899 secs, and comparison 4.85844 sec, and warnIfPerfScore > 0.8, and perfScore=0.622957]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.81653 secs, and comparison 7.52728 sec, and warnIfPerfScore > 1.4, and perfScore=0.962996]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.66034 secs, and comparison 3.45538 sec, and warnIfPerfScore > 0.65, and perfScore=0.451074]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.52921 secs, and comparison 36.3403 sec, and warnIfPerfScore > 4.4, and perfScore=4.26068]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.66815 secs, and comparison 3.33538 sec, and warnIfPerfScore > 0.6, and perfScore=0.434965]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.87104 secs, and comparison 3.33556 sec, and warnIfPerfScore > 0.6, and perfScore=0.423776]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.572 secs, and comparison 3.33091 sec, and warnIfPerfScore > 0.6, and perfScore=0.439899]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.74135 secs, and comparison 5.10705 sec, and warnIfPerfScore > 1.3, and perfScore=0.659711]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.26703 secs, and comparison 8.01693 sec, and warnIfPerfScore > 1.3, and perfScore=0.969747]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 37.1685 secs, and comparison 5.97608 sec, and warnIfPerfScore > 0.3, and perfScore=0.160783]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.72716 secs, and comparison 9.50034 sec, and warnIfPerfScore > 1.5, and perfScore=1.65882]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.19054 secs, and comparison 2.87354 sec, and warnIfPerfScore > 0.55, and perfScore=0.464182]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.569941 sec, and warnIfPerfScore > 0.1, and perfScore=0.0379961]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80481 sec, and warnIfPerfScore > 0.5, and perfScore=0.186987]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.87158 secs, and comparison 12.6334 sec, and warnIfPerfScore > 2, and perfScore=1.8385]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.15375 secs, and comparison 13.858 sec, and warnIfPerfScore > 3.6, and perfScore=1.93716]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 38 seconds]]]

Succeeded
