Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 31 6:33:22 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.29655 secs, and comparison 4.14364 sec, and warnIfPerfScore > 0.65, and perfScore=0.782328]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 4.84522 secs, and comparison 2.42236 sec, and warnIfPerfScore > 0.5, and perfScore=0.499949]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.55483 secs, and comparison 6.90464 sec, and warnIfPerfScore > 1.05, and perfScore=0.913937]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.30205 secs, and comparison 6.88389 sec, and warnIfPerfScore > 1.15, and perfScore=1.09233]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.16697 secs, and comparison 2.04854 sec, and warnIfPerfScore > 0.48, and perfScore=0.332179]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.19165 secs, and comparison 2.54766 sec, and warnIfPerfScore > 0.57, and perfScore=0.411467]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.41809 secs, and comparison 18.3061 sec, and warnIfPerfScore > 2.9, and perfScore=2.85227]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.08768 secs, and comparison 18.4311 sec, and warnIfPerfScore > 2.9, and perfScore=2.60044]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 5.96769 secs, and comparison 126.659 sec, and warnIfPerfScore > 24, and perfScore=21.2241]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.70779 secs, and comparison 9.54941 sec, and warnIfPerfScore > 1.7, and perfScore=1.67305]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.16214 secs, and comparison 5.63098 sec, and warnIfPerfScore > 1.5, and perfScore=0.913802]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.27675 secs, and comparison 11.4394 sec, and warnIfPerfScore > 2.1, and perfScore=2.16788]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.80526 secs, and comparison 4.07496 sec, and warnIfPerfScore > 1.6, and perfScore=0.598796]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 7.10593 secs, and comparison 0.704897 sec, and warnIfPerfScore > 0.23, and perfScore=0.0991985]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.5288 secs, and comparison 12.0326 sec, and warnIfPerfScore > 1.3, and perfScore=1.0437]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 8.05339 secs, and comparison 5.35659 sec, and warnIfPerfScore > 1.2, and perfScore=0.665135]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.36174 secs, and comparison 1.75601 sec, and warnIfPerfScore > 0.33, and perfScore=0.238532]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 7.75328 secs, and comparison 36.5403 sec, and warnIfPerfScore > 6, and perfScore=4.71289]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.80696 secs, and comparison 5.2276 sec, and warnIfPerfScore > 0.8, and perfScore=0.669607]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.81584 secs, and comparison 7.60898 sec, and warnIfPerfScore > 1.4, and perfScore=0.973534]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.52877 secs, and comparison 3.26019 sec, and warnIfPerfScore > 0.65, and perfScore=0.433032]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.31099 secs, and comparison 33.903 sec, and warnIfPerfScore > 4.4, and perfScore=4.0793]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.57198 secs, and comparison 3.19076 sec, and warnIfPerfScore > 0.6, and perfScore=0.42139]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.59855 secs, and comparison 3.16167 sec, and warnIfPerfScore > 0.6, and perfScore=0.41609]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.57746 secs, and comparison 3.16456 sec, and warnIfPerfScore > 0.6, and perfScore=0.417628]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.55637 secs, and comparison 5.05161 sec, and warnIfPerfScore > 1.3, and perfScore=0.668524]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.92394 secs, and comparison 8.30286 sec, and warnIfPerfScore > 1.3, and perfScore=1.04782]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 36.7262 secs, and comparison 6.37992 sec, and warnIfPerfScore > 0.3, and perfScore=0.173716]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.65265 secs, and comparison 9.22732 sec, and warnIfPerfScore > 1.5, and perfScore=1.63239]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.01956 secs, and comparison 2.86678 sec, and warnIfPerfScore > 0.55, and perfScore=0.476244]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.601453 sec, and warnIfPerfScore > 0.1, and perfScore=0.0400969]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.35198 sec, and warnIfPerfScore > 0.5, and perfScore=0.156799]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.2522 secs, and comparison 13.129 sec, and warnIfPerfScore > 2, and perfScore=2.09991]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.32603 secs, and comparison 15.3014 sec, and warnIfPerfScore > 3.6, and perfScore=1.83778]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 52 seconds]]]

Succeeded
