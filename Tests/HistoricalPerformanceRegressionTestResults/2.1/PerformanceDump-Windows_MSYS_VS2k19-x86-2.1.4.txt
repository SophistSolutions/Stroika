Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 19:19:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 11.5501 secs, and comparison 5.94501 sec, and warnIfPerfScore > 0.65, and perfScore=0.514716]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.7042 secs, and comparison 3.85349 sec, and warnIfPerfScore > 0.5, and perfScore=0.359999]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 12.4252 secs, and comparison 10.8593 sec, and warnIfPerfScore > 1.05, and perfScore=0.873972]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.63534 secs, and comparison 11.0146 sec, and warnIfPerfScore > 1.15, and perfScore=1.14315]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.6832 secs, and comparison 3.28829 sec, and warnIfPerfScore > 0.48, and perfScore=0.281454]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.8513 secs, and comparison 3.82149 sec, and warnIfPerfScore > 0.57, and perfScore=0.322454]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.9047 secs, and comparison 31.511 sec, and warnIfPerfScore > 2.9, and perfScore=2.26622]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 14.0604 secs, and comparison 34.035 sec, and warnIfPerfScore > 2.9, and perfScore=2.42062]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 14.364 secs, and comparison 167.523 sec, and warnIfPerfScore > 24, and perfScore=11.6627]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.9569 secs, and comparison 15.7134 sec, and warnIfPerfScore > 1.7, and perfScore=1.4341]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 13.6825 secs, and comparison 13.1988 sec, and warnIfPerfScore > 1.5, and perfScore=0.964648]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.3257 secs, and comparison 18.5944 sec, and warnIfPerfScore > 2.1, and perfScore=1.80079]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 13.951 secs, and comparison 10.6642 sec, and warnIfPerfScore > 1.6, and perfScore=0.764403]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15.0044 secs, and comparison 2.04118 sec, and warnIfPerfScore > 0.23, and perfScore=0.136039]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.9285 secs, and comparison 15.0227 sec, and warnIfPerfScore > 1.3, and perfScore=1.00631]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 12.1177 secs, and comparison 8.81464 sec, and warnIfPerfScore > 1.2, and perfScore=0.727416]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.2938 secs, and comparison 2.68287 sec, and warnIfPerfScore > 0.33, and perfScore=0.237552]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 10.8733 secs, and comparison 48.9855 sec, and warnIfPerfScore > 6, and perfScore=4.50513]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.125 secs, and comparison 7.5649 sec, and warnIfPerfScore > 0.8, and perfScore=0.679989]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.8608 secs, and comparison 14.8051 sec, and warnIfPerfScore > 1.4, and perfScore=1.36317]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.5968 secs, and comparison 4.88455 sec, and warnIfPerfScore > 0.65, and perfScore=0.421197]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.9653 secs, and comparison 44.9881 sec, and warnIfPerfScore > 4.4, and perfScore=3.75989]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.3859 secs, and comparison 4.38729 sec, and warnIfPerfScore > 0.6, and perfScore=0.385327]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.3574 secs, and comparison 5.0375 sec, and warnIfPerfScore > 0.6, and perfScore=0.443542]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.1147 secs, and comparison 4.444 sec, and warnIfPerfScore > 0.6, and perfScore=0.399832]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 11.2719 secs, and comparison 8.64012 sec, and warnIfPerfScore > 1.3, and perfScore=0.766521]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0907 secs, and comparison 13.6906 sec, and warnIfPerfScore > 1.3, and perfScore=1.04582]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 70.2973 secs, and comparison 11.4532 sec, and warnIfPerfScore > 0.3, and perfScore=0.162925]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.1158 secs, and comparison 20.0034 sec, and warnIfPerfScore > 1.5, and perfScore=1.32334]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 17.1288 secs, and comparison 5.50395 sec, and warnIfPerfScore > 0.55, and perfScore=0.321327]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 15 secs, and comparison 1.22999 sec, and warnIfPerfScore > 0.1, and perfScore=0.0819994]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.26514 sec, and warnIfPerfScore > 0.5, and perfScore=0.284343]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 12.1359 secs, and comparison 23.3365 sec, and warnIfPerfScore > 2, and perfScore=1.92293]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.417 secs, and comparison 36.4933 sec, and warnIfPerfScore > 3.6, and perfScore=2.53128]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 1 second]]]

Succeeded
