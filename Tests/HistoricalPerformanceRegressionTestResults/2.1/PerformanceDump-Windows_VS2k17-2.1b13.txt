Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Aug 13 1:21:36 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.4313 secs, and comparison 5.06914 sec, and warnIfPerfScore > 0.62, and perfScore=0.407771]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 12.0395 secs, and comparison 3.2063 sec, and warnIfPerfScore > 0.5, and perfScore=0.266316]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.6468 secs, and comparison 9.95859 sec, and warnIfPerfScore > 1.05, and perfScore=0.855052]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.1223 secs, and comparison 4.68304 sec, and warnIfPerfScore > 0.48, and perfScore=0.386315]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.9219 secs, and comparison 4.71811 sec, and warnIfPerfScore > 0.57, and perfScore=0.395753]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.7016 secs, and comparison 30.028 sec, and warnIfPerfScore > 2.9, and perfScore=2.19157]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.9653 secs, and comparison 32.8242 sec, and warnIfPerfScore > 2.9, and perfScore=2.35041]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 12.5063 secs, and comparison 105.054 sec, and warnIfPerfScore > 9.7, and perfScore=8.40009]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8598 secs, and comparison 14.1306 sec, and warnIfPerfScore > 1.6, and perfScore=1.09882]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.3256 secs, and comparison 15.4726 sec, and warnIfPerfScore > 1.5, and perfScore=1.00959]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.98866 secs, and comparison 13.495 sec, and warnIfPerfScore > 2.1, and perfScore=1.35103]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 13.3274 secs, and comparison 10.8042 sec, and warnIfPerfScore > 1.3, and perfScore=0.810677]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 14.4463 secs, and comparison 1.46677 sec, and warnIfPerfScore > 0.23, and perfScore=0.101533]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 15.7492 secs, and comparison 14.6099 sec, and warnIfPerfScore > 1.3, and perfScore=0.927657]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 11.1661 secs, and comparison 9.01673 sec, and warnIfPerfScore > 1.2, and perfScore=0.807509]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 11.74 secs, and comparison 2.49698 sec, and warnIfPerfScore > 0.33, and perfScore=0.21269]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 11.906 secs, and comparison 51.1922 sec, and warnIfPerfScore > 6, and perfScore=4.2997]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.3514 secs, and comparison 4.54419 sec, and warnIfPerfScore > 0.5, and perfScore=0.400319]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 13.4417 secs, and comparison 46.2569 sec, and warnIfPerfScore > 4.4, and perfScore=3.44129]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.6216 secs, and comparison 4.78168 sec, and warnIfPerfScore > 0.6, and perfScore=0.450184]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.76 secs, and comparison 18.2572 sec, and warnIfPerfScore > 1.5, and perfScore=1.32683]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 16.0811 secs, and comparison 4.90711 sec, and warnIfPerfScore > 0.55, and perfScore=0.305147]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.84051 sec, and warnIfPerfScore > 0.25, and perfScore=0.1227]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.90319 sec, and warnIfPerfScore > 0.5, and perfScore=0.393546]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.9024 secs, and comparison 25.8418 sec, and warnIfPerfScore > 2, and perfScore=1.8588]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.0311 secs, and comparison 37.7069 sec, and warnIfPerfScore > 3.1, and perfScore=2.68738]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 10 seconds]]]

Succeeded
