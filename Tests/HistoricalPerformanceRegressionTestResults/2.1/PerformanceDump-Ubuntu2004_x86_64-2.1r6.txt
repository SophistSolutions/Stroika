Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 28 ::34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 6.1116 secs, and comparison 4.94191 sec, and warnIfPerfScore > 0.65, and perfScore=0.80861]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.70342 secs, and comparison 2.98894 sec, and warnIfPerfScore > 0.5, and perfScore=0.524061]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.10301 secs, and comparison 7.65866 sec, and warnIfPerfScore > 1.05, and perfScore=1.07823]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.46899 secs, and comparison 7.21356 sec, and warnIfPerfScore > 1.15, and perfScore=1.1151]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 3.7908 secs, and comparison 2.6269 sec, and warnIfPerfScore > 0.48, and perfScore=0.692966]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 5.40581 secs, and comparison 3.3175 sec, and warnIfPerfScore > 0.57, and perfScore=0.613692]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 5.37791 secs, and comparison 18.85 sec, and warnIfPerfScore > 2.9, and perfScore=3.50508]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 4.1025 secs, and comparison 19.7893 sec, and warnIfPerfScore > 2.9, and perfScore=4.82371]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 6.4629 secs, and comparison 62.8581 sec, and warnIfPerfScore > 24, and perfScore=9.72599]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.16865 secs, and comparison 10.5 sec, and warnIfPerfScore > 1.7, and perfScore=1.70216]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.63528 secs, and comparison 7.40885 sec, and warnIfPerfScore > 1.5, and perfScore=0.970344]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 3.98256 secs, and comparison 12.7715 sec, and warnIfPerfScore > 2.1, and perfScore=3.20685]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 5.11079 secs, and comparison 3.69245 sec, and warnIfPerfScore > 1.6, and perfScore=0.722482]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 5.3093 secs, and comparison 1.59811 sec, and warnIfPerfScore > 0.23, and perfScore=0.301001]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 4.12975 secs, and comparison 5.68863 sec, and warnIfPerfScore > 1.3, and perfScore=1.37748]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.06134 secs, and comparison 7.62531 sec, and warnIfPerfScore > 1.2, and perfScore=1.87753]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 21.7421 secs, and comparison 2.91704 sec, and warnIfPerfScore > 0.33, and perfScore=0.134165]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.30991 secs, and comparison 45.3594 sec, and warnIfPerfScore > 6, and perfScore=13.7041]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.28458 secs, and comparison 8.97012 sec, and warnIfPerfScore > 0.8, and perfScore=2.73098]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.43443 secs, and comparison 9.44327 sec, and warnIfPerfScore > 1.4, and perfScore=2.12954]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 19.6086 secs, and comparison 4.14587 sec, and warnIfPerfScore > 0.65, and perfScore=0.211431]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 6.63458 secs, and comparison 41.1414 sec, and warnIfPerfScore > 4.4, and perfScore=6.20105]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.6816 secs, and comparison 4.35641 sec, and warnIfPerfScore > 0.6, and perfScore=0.296727]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.4911 secs, and comparison 4.24862 sec, and warnIfPerfScore > 0.6, and perfScore=0.293188]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4267 secs, and comparison 4.3425 sec, and warnIfPerfScore > 0.6, and perfScore=0.323422]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15.6077 secs, and comparison 6.24792 sec, and warnIfPerfScore > 1.3, and perfScore=0.400311]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 20.6046 secs, and comparison 11.5183 sec, and warnIfPerfScore > 1.3, and perfScore=0.559014]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 24.0636 secs, and comparison 8.74242 sec, and warnIfPerfScore > 0.3, and perfScore=0.363305]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 8.18958 secs, and comparison 17.0215 sec, and warnIfPerfScore > 1.5, and perfScore=2.07844]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.46169 secs, and comparison 2.83878 sec, and warnIfPerfScore > 0.55, and perfScore=0.380448]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.02557 sec, and warnIfPerfScore > 0.1, and perfScore=0.0683714]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.55186 sec, and warnIfPerfScore > 0.5, and perfScore=0.23679]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 30 seconds]]]

Succeeded
