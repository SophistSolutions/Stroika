Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 10:54:35 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.68313 secs, and comparison 4.16766 sec, and warnIfPerfScore > 0.65, and perfScore=0.623609]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.68496 secs, and comparison 2.58124 sec, and warnIfPerfScore > 0.5, and perfScore=0.386127]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.3891 secs, and comparison 7.1685 sec, and warnIfPerfScore > 1.05, and perfScore=0.854502]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.37894 secs, and comparison 7.02168 sec, and warnIfPerfScore > 1.15, and perfScore=1.10076]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 57.6405 secs, and comparison 2.49097 sec, and warnIfPerfScore > 0.48, and perfScore=0.0432157]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 54.6299 secs, and comparison 3.21518 sec, and warnIfPerfScore > 0.57, and perfScore=0.0588538]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 39.8094 secs, and comparison 19.695 sec, and warnIfPerfScore > 2.9, and perfScore=0.494732]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 43.4993 secs, and comparison 19.7716 sec, and warnIfPerfScore > 2.9, and perfScore=0.454528]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 18.0182 secs, and comparison 142.719 sec, and warnIfPerfScore > 24, and perfScore=7.92082]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 54.5451 secs, and comparison 10.158 sec, and warnIfPerfScore > 1.6, and perfScore=0.186231]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.03775 secs, and comparison 7.01629 sec, and warnIfPerfScore > 1.5, and perfScore=0.99695]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 62.3979 secs, and comparison 12.4315 sec, and warnIfPerfScore > 2.1, and perfScore=0.19923]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.96624 secs, and comparison 12.2494 sec, and warnIfPerfScore > 1.6, and perfScore=1.53767]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 8.29652 secs, and comparison 1.25536 sec, and warnIfPerfScore > 0.23, and perfScore=0.151311]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4942 secs, and comparison 13.3606 sec, and warnIfPerfScore > 1.3, and perfScore=1.06934]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.14155 secs, and comparison 5.43408 sec, and warnIfPerfScore > 1.2, and perfScore=0.594438]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.21059 secs, and comparison 1.46775 sec, and warnIfPerfScore > 0.33, and perfScore=0.236331]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.08874 secs, and comparison 38.6164 sec, and warnIfPerfScore > 6, and perfScore=4.24882]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.82927 secs, and comparison 5.1231 sec, and warnIfPerfScore > 0.8, and perfScore=0.580241]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.79764 secs, and comparison 8.71306 sec, and warnIfPerfScore > 1.4, and perfScore=0.990386]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.76636 secs, and comparison 3.48415 sec, and warnIfPerfScore > 0.65, and perfScore=0.514922]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.05807 secs, and comparison 35.9468 sec, and warnIfPerfScore > 4.4, and perfScore=3.96848]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.33126 secs, and comparison 3.25155 sec, and warnIfPerfScore > 0.6, and perfScore=0.51357]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.36492 secs, and comparison 3.23616 sec, and warnIfPerfScore > 0.6, and perfScore=0.508437]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.47557 secs, and comparison 3.51809 sec, and warnIfPerfScore > 0.6, and perfScore=0.543286]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.51677 secs, and comparison 4.72092 sec, and warnIfPerfScore > 1.3, and perfScore=0.724427]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.66944 secs, and comparison 7.99521 sec, and warnIfPerfScore > 1.3, and perfScore=1.19878]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 41.3301 secs, and comparison 5.88336 sec, and warnIfPerfScore > 0.3, and perfScore=0.142351]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.58958 secs, and comparison 12.0197 sec, and warnIfPerfScore > 1.5, and perfScore=1.39934]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.34714 secs, and comparison 2.92126 sec, and warnIfPerfScore > 0.55, and perfScore=0.460249]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 15 secs, and comparison 0.89949 sec, and warnIfPerfScore > 0.1, and perfScore=0.059966]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.89157 sec, and warnIfPerfScore > 0.5, and perfScore=0.192771]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.34254 secs, and comparison 8.71972 sec, and warnIfPerfScore > 2, and perfScore=1.04521]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 8.86647 secs, and comparison 97.6184 sec, and warnIfPerfScore > 3.1, and perfScore=11.0098]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 11.0098}}}

[[[Tests took: 18 minutes, 2 seconds]]]

Succeeded
