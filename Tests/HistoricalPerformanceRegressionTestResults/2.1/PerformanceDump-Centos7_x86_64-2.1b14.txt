Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Dec 20 23:13:17 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.61603 secs, and comparison 5.15067 sec, and warnIfPerfScore > 0.62, and perfScore=0.778513]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.57999 secs, and comparison 3.82626 sec, and warnIfPerfScore > 0.5, and perfScore=0.581499]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.67352 secs, and comparison 8.01905 sec, and warnIfPerfScore > 1.05, and perfScore=0.924543]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.50955 secs, and comparison 8.4981 sec, and warnIfPerfScore > 1.15, and perfScore=1.13164]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.18246 secs, and comparison 3.27729 sec, and warnIfPerfScore > 0.48, and perfScore=1.0298]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.11484 secs, and comparison 4.44645 sec, and warnIfPerfScore > 0.57, and perfScore=1.4275]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.0651 secs, and comparison 21.7128 sec, and warnIfPerfScore > 2.9, and perfScore=1.79963]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 14.9346 secs, and comparison 24.8445 sec, and warnIfPerfScore > 2.9, and perfScore=1.66355]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 14.0804 secs, and comparison 94.2815 sec, and warnIfPerfScore > 9.7, and perfScore=6.69592]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 12.6132 secs, and comparison 11.704 sec, and warnIfPerfScore > 1.6, and perfScore=0.927922]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.64192 secs, and comparison 9.45174 sec, and warnIfPerfScore > 1.5, and perfScore=0.980276]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.12237 secs, and comparison 13.4805 sec, and warnIfPerfScore > 2.1, and perfScore=1.47774]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.55139 secs, and comparison 7.17327 sec, and warnIfPerfScore > 1.3, and perfScore=0.838842]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.21773 secs, and comparison 3.09819 sec, and warnIfPerfScore > 0.23, and perfScore=0.377012]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.44414 secs, and comparison 8.74779 sec, and warnIfPerfScore > 1.3, and perfScore=1.17512]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.56338 secs, and comparison 11.702 sec, and warnIfPerfScore > 1.2, and perfScore=1.78292]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 6.49785 secs, and comparison 1.68191 sec, and warnIfPerfScore > 0.33, and perfScore=0.258841]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 5.37497 secs, and comparison 45.5671 sec, and warnIfPerfScore > 6, and perfScore=8.47765]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.95423 secs, and comparison 10.3768 sec, and warnIfPerfScore > 0.8, and perfScore=1.74275]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.4605 secs, and comparison 14.3265 sec, and warnIfPerfScore > 0.9, and perfScore=2.62367]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 6.06212 secs, and comparison 3.87063 sec, and warnIfPerfScore > 0.5, and perfScore=0.638495]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 8.58822 secs, and comparison 45.5917 sec, and warnIfPerfScore > 4.4, and perfScore=5.30863]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.44448 secs, and comparison 6.25014 sec, and warnIfPerfScore > 0.6, and perfScore=0.969844]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 34.0605 secs, and comparison 9.23439 sec, and warnIfPerfScore > 0.2, and perfScore=0.271117]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.9458 secs, and comparison 18.4455 sec, and warnIfPerfScore > 1.5, and perfScore=1.15677]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.9148 secs, and comparison 3.00639 sec, and warnIfPerfScore > 0.55, and perfScore=0.275441]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 15 secs, and comparison 1.4857 sec, and warnIfPerfScore > 0.25, and perfScore=0.0990468]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.9286 sec, and warnIfPerfScore > 0.5, and perfScore=0.19524]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 40 seconds]]]

Succeeded
