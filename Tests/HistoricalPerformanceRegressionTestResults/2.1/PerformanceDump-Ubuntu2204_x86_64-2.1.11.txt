Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 11:42:17 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 3.25423 secs, and comparison 1.43435 sec, and warnIfPerfScore > 0.65, and perfScore=0.440765]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 3.31928 secs, and comparison 2.94468 sec, and warnIfPerfScore > 0.5, and perfScore=0.887146]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 2.97338 secs, and comparison 9.03213 sec, and warnIfPerfScore > 1.05, and perfScore=3.03767]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.35772 secs, and comparison 7.63673 sec, and warnIfPerfScore > 1.15, and perfScore=3.23903]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.10321 secs, and comparison 0.954961 sec, and warnIfPerfScore > 0.48, and perfScore=0.232735]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 5.26752 secs, and comparison 1.05674 sec, and warnIfPerfScore > 0.57, and perfScore=0.200615]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 4.20528 secs, and comparison 12.2276 sec, and warnIfPerfScore > 2.9, and perfScore=2.90769]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 5.29207 secs, and comparison 14.8136 sec, and warnIfPerfScore > 2.9, and perfScore=2.7992]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 6.38719 secs, and comparison 52.9216 sec, and warnIfPerfScore > 24, and perfScore=8.28559]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.73264 secs, and comparison 7.92385 sec, and warnIfPerfScore > 1.7, and perfScore=1.38223]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.86824 secs, and comparison 7.83883 sec, and warnIfPerfScore > 1.5, and perfScore=1.14132]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.83495 secs, and comparison 10.139 sec, and warnIfPerfScore > 2.1, and perfScore=3.57643]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 5.8532 secs, and comparison 3.85899 sec, and warnIfPerfScore > 1.6, and perfScore=0.659296]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 4.30805 secs, and comparison 1.39904 sec, and warnIfPerfScore > 0.23, and perfScore=0.32475]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.52633 secs, and comparison 5.61521 sec, and warnIfPerfScore > 1.3, and perfScore=1.24057]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.13262 secs, and comparison 8.60399 sec, and warnIfPerfScore > 1.2, and perfScore=2.74658]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 22.4313 secs, and comparison 1.9696 sec, and warnIfPerfScore > 0.33, and perfScore=0.087806]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.0092 secs, and comparison 43.2755 sec, and warnIfPerfScore > 6, and perfScore=14.3811]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 2.94463 secs, and comparison 17.9789 sec, and warnIfPerfScore > 0.8, and perfScore=6.10564]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.92575 secs, and comparison 7.86534 sec, and warnIfPerfScore > 1.4, and perfScore=2.68831]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.2781 secs, and comparison 3.73398 sec, and warnIfPerfScore > 0.65, and perfScore=0.184139]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 4.4994 secs, and comparison 40.9305 sec, and warnIfPerfScore > 4.4, and perfScore=9.09689]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.6903 secs, and comparison 4.56168 sec, and warnIfPerfScore > 0.6, and perfScore=0.333206]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.9275 secs, and comparison 5.76407 sec, and warnIfPerfScore > 0.6, and perfScore=0.413863]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 13.8469 secs, and comparison 3.66859 sec, and warnIfPerfScore > 0.6, and perfScore=0.264939]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 16.9772 secs, and comparison 4.23235 sec, and warnIfPerfScore > 1.3, and perfScore=0.249297]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 26.9659 secs, and comparison 10.8149 sec, and warnIfPerfScore > 1.3, and perfScore=0.40106]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.4649 secs, and comparison 5.82474 sec, and warnIfPerfScore > 0.3, and perfScore=0.271361]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.70962 secs, and comparison 15.5088 sec, and warnIfPerfScore > 1.5, and perfScore=2.01162]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.66242 secs, and comparison 2.12266 sec, and warnIfPerfScore > 0.55, and perfScore=0.318602]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.783065 sec, and warnIfPerfScore > 0.1, and perfScore=0.0522044]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.44283 sec, and warnIfPerfScore > 0.5, and perfScore=0.096189]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 46 seconds]]]

Succeeded
