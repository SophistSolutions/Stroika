Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 21 21:17:37 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.48103 secs, and comparison 4.58428 sec, and warnIfPerfScore > 0.62, and perfScore=0.83639]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.46402 secs, and comparison 2.9335 sec, and warnIfPerfScore > 0.5, and perfScore=0.536876]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31632 secs, and comparison 7.1174 sec, and warnIfPerfScore > 1.05, and perfScore=1.12683]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.9722 secs, and comparison 7.0694 sec, and warnIfPerfScore > 1.15, and perfScore=1.18372]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.89973 secs, and comparison 2.78606 sec, and warnIfPerfScore > 0.48, and perfScore=0.714425]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 4.66626 secs, and comparison 3.55881 sec, and warnIfPerfScore > 0.57, and perfScore=0.762669]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.40271 secs, and comparison 17.1854 sec, and warnIfPerfScore > 2.9, and perfScore=5.05049]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 3.88794 secs, and comparison 17.7495 sec, and warnIfPerfScore > 2.9, and perfScore=4.56526]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.48912 secs, and comparison 57.0443 sec, and warnIfPerfScore > 9.7, and perfScore=10.3923]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.98669 secs, and comparison 10.0822 sec, and warnIfPerfScore > 1.6, and perfScore=2.02181]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.83561 secs, and comparison 5.52539 sec, and warnIfPerfScore > 1.5, and perfScore=0.94684]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.86154 secs, and comparison 12.1753 sec, and warnIfPerfScore > 2.1, and perfScore=4.25483]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.05072 secs, and comparison 3.30337 sec, and warnIfPerfScore > 1.3, and perfScore=0.815501]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 4.22471 secs, and comparison 1.56729 sec, and warnIfPerfScore > 0.23, and perfScore=0.370982]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.6414 secs, and comparison 4.48046 sec, and warnIfPerfScore > 1.3, and perfScore=1.23042]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.77874 secs, and comparison 6.66239 sec, and warnIfPerfScore > 1.2, and perfScore=2.39763]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.9253 secs, and comparison 1.79556 sec, and warnIfPerfScore > 0.33, and perfScore=0.112749]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.70696 secs, and comparison 40.1243 sec, and warnIfPerfScore > 6, and perfScore=14.8226]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.75687 secs, and comparison 6.57309 sec, and warnIfPerfScore > 0.8, and perfScore=2.38426]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.76025 secs, and comparison 7.52897 sec, and warnIfPerfScore > 0.9, and perfScore=2.72764]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 16.2295 secs, and comparison 3.69428 sec, and warnIfPerfScore > 0.5, and perfScore=0.227628]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 4.16556 secs, and comparison 38.0711 sec, and warnIfPerfScore > 4.4, and perfScore=9.13949]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.7347 secs, and comparison 4.29295 sec, and warnIfPerfScore > 0.6, and perfScore=0.365833]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 18.0541 secs, and comparison 7.37451 sec, and warnIfPerfScore > 0.2, and perfScore=0.408467]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.24944 secs, and comparison 13.7743 sec, and warnIfPerfScore > 1.5, and perfScore=1.90005]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.90072 secs, and comparison 2.51193 sec, and warnIfPerfScore > 0.55, and perfScore=0.36401]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 15 secs, and comparison 1.07339 sec, and warnIfPerfScore > 0.25, and perfScore=0.0715595]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.13472 sec, and warnIfPerfScore > 0.5, and perfScore=0.208982]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 35 seconds]]]

Succeeded
