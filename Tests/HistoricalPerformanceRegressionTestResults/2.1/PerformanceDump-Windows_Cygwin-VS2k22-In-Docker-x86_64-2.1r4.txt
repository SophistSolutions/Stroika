Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  1 3:46:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.656 secs, and comparison 4.53094 sec, and warnIfPerfScore > 0.65, and perfScore=0.680731]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.80614 secs, and comparison 2.75541 sec, and warnIfPerfScore > 0.5, and perfScore=0.474568]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.29706 secs, and comparison 7.5099 sec, and warnIfPerfScore > 1.05, and perfScore=0.905128]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.86078 secs, and comparison 7.52242 sec, and warnIfPerfScore > 1.15, and perfScore=1.09644]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.02388 secs, and comparison 2.63504 sec, and warnIfPerfScore > 0.48, and perfScore=0.3284]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.08424 secs, and comparison 3.32146 sec, and warnIfPerfScore > 0.57, and perfScore=0.410856]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.28387 secs, and comparison 19.7647 sec, and warnIfPerfScore > 2.9, and perfScore=3.14531]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.75093 secs, and comparison 19.9324 sec, and warnIfPerfScore > 2.9, and perfScore=2.95255]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.11562 secs, and comparison 136.165 sec, and warnIfPerfScore > 24, and perfScore=22.2651]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.6962 secs, and comparison 10.1877 sec, and warnIfPerfScore > 1.7, and perfScore=1.78851]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.50083 secs, and comparison 5.34162 sec, and warnIfPerfScore > 1.5, and perfScore=0.971057]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.97685 secs, and comparison 12.1353 sec, and warnIfPerfScore > 2.1, and perfScore=2.43835]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.66045 secs, and comparison 4.13525 sec, and warnIfPerfScore > 1.6, and perfScore=0.620867]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 6.98985 secs, and comparison 0.678248 sec, and warnIfPerfScore > 0.23, and perfScore=0.0970334]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9422 secs, and comparison 12.4374 sec, and warnIfPerfScore > 1.3, and perfScore=1.04146]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.40317 secs, and comparison 5.198 sec, and warnIfPerfScore > 1.2, and perfScore=0.618576]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.19686 secs, and comparison 1.98995 sec, and warnIfPerfScore > 0.33, and perfScore=0.24277]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.23858 secs, and comparison 39.0344 sec, and warnIfPerfScore > 6, and perfScore=4.738]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.21645 secs, and comparison 4.99007 sec, and warnIfPerfScore > 0.8, and perfScore=0.607327]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.24786 secs, and comparison 7.64738 sec, and warnIfPerfScore > 1.4, and perfScore=0.927195]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.20231 secs, and comparison 3.45147 sec, and warnIfPerfScore > 0.65, and perfScore=0.420793]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.8044 secs, and comparison 36.3998 sec, and warnIfPerfScore > 4.4, and perfScore=4.13427]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.16375 secs, and comparison 3.37837 sec, and warnIfPerfScore > 0.6, and perfScore=0.413826]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.15925 secs, and comparison 3.373 sec, and warnIfPerfScore > 0.6, and perfScore=0.413396]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.16182 secs, and comparison 3.38173 sec, and warnIfPerfScore > 0.6, and perfScore=0.414335]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.16025 secs, and comparison 5.24709 sec, and warnIfPerfScore > 1.3, and perfScore=0.643005]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.71198 secs, and comparison 8.54073 sec, and warnIfPerfScore > 1.3, and perfScore=0.980343]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 40.3875 secs, and comparison 5.22668 sec, and warnIfPerfScore > 0.3, and perfScore=0.129413]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.82894 secs, and comparison 9.41655 sec, and warnIfPerfScore > 1.5, and perfScore=1.61548]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.47629 secs, and comparison 2.84771 sec, and warnIfPerfScore > 0.55, and perfScore=0.439714]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.048
	DETAILS:         	[baseline test 15 secs, and comparison 0.722779 sec, and warnIfPerfScore > 0.1, and perfScore=0.0481852]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.83248 sec, and warnIfPerfScore > 0.5, and perfScore=0.188832]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.86894 secs, and comparison 7.83027 sec, and warnIfPerfScore > 2, and perfScore=1.13995]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.74596 secs, and comparison 13.9903 sec, and warnIfPerfScore > 3.6, and perfScore=1.80614]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 29 seconds]]]

Succeeded
