Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 17:57:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.95527 secs, and comparison 4.59239 sec, and warnIfPerfScore > 0.65, and perfScore=0.771147]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.89996 secs, and comparison 2.95886 sec, and warnIfPerfScore > 0.5, and perfScore=0.501506]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.32904 secs, and comparison 6.68249 sec, and warnIfPerfScore > 1.05, and perfScore=1.05585]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.8996 secs, and comparison 6.67642 sec, and warnIfPerfScore > 1.15, and perfScore=1.13167]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 3.84798 secs, and comparison 2.55349 sec, and warnIfPerfScore > 0.48, and perfScore=0.663594]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 4.50088 secs, and comparison 3.60971 sec, and warnIfPerfScore > 0.57, and perfScore=0.802002]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.31263 secs, and comparison 16.75 sec, and warnIfPerfScore > 2.9, and perfScore=5.0564]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 4.05696 secs, and comparison 17.3983 sec, and warnIfPerfScore > 2.9, and perfScore=4.28851]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.81484 secs, and comparison 53.8292 sec, and warnIfPerfScore > 24, and perfScore=11.1799]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.12746 secs, and comparison 10.2823 sec, and warnIfPerfScore > 1.7, and perfScore=2.00534]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.8436 secs, and comparison 5.69712 sec, and warnIfPerfScore > 1.5, and perfScore=0.974933]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.74988 secs, and comparison 12.1207 sec, and warnIfPerfScore > 2.1, and perfScore=4.40773]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.26285 secs, and comparison 4.32771 sec, and warnIfPerfScore > 1.6, and perfScore=1.01521]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 4.41998 secs, and comparison 1.836 sec, and warnIfPerfScore > 0.23, and perfScore=0.415385]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.71828 secs, and comparison 4.66697 sec, and warnIfPerfScore > 1.3, and perfScore=1.25514]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.13748 secs, and comparison 6.95903 sec, and warnIfPerfScore > 1.2, and perfScore=2.21803]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15.912 secs, and comparison 1.59335 sec, and warnIfPerfScore > 0.33, and perfScore=0.100135]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.94398 secs, and comparison 41.9977 sec, and warnIfPerfScore > 6, and perfScore=14.2656]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.01321 secs, and comparison 6.6716 sec, and warnIfPerfScore > 0.8, and perfScore=2.21412]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.12144 secs, and comparison 7.13996 sec, and warnIfPerfScore > 1.4, and perfScore=2.28739]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.8591 secs, and comparison 3.66516 sec, and warnIfPerfScore > 0.65, and perfScore=0.33752]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.77296 secs, and comparison 37.5257 sec, and warnIfPerfScore > 4.4, and perfScore=6.50024]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.4093 secs, and comparison 3.60428 sec, and warnIfPerfScore > 0.6, and perfScore=0.315907]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.4158 secs, and comparison 3.62828 sec, and warnIfPerfScore > 0.6, and perfScore=0.292232]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.4262 secs, and comparison 3.56782 sec, and warnIfPerfScore > 0.6, and perfScore=0.287121]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.4002 secs, and comparison 4.28372 sec, and warnIfPerfScore > 1.3, and perfScore=0.345457]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 18.8006 secs, and comparison 10.084 sec, and warnIfPerfScore > 1.3, and perfScore=0.536366]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 18.3393 secs, and comparison 7.11024 sec, and warnIfPerfScore > 0.3, and perfScore=0.387705]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.93187 secs, and comparison 12.2613 sec, and warnIfPerfScore > 1.5, and perfScore=1.54583]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.88719 secs, and comparison 3.10348 sec, and warnIfPerfScore > 0.55, and perfScore=0.450616]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.8087 sec, and warnIfPerfScore > 0.1, and perfScore=0.0539133]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.1438 sec, and warnIfPerfScore > 0.5, and perfScore=0.209587]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 47 seconds]]]

Succeeded
