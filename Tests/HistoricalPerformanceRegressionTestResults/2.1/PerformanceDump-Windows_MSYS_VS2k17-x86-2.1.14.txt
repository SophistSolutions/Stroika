Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Sep  6 5:1:25 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 49.5496 secs, and comparison 6.40157 sec, and warnIfPerfScore > 0.65, and perfScore=0.129195]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.9399 secs, and comparison 5.81146 sec, and warnIfPerfScore > 0.5, and perfScore=0.118747]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 17.3837 secs, and comparison 12.4716 sec, and warnIfPerfScore > 1.05, and perfScore=0.717432]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 13.4686 secs, and comparison 12.9416 sec, and warnIfPerfScore > 1.15, and perfScore=0.960873]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 33.8563 secs, and comparison 3.64043 sec, and warnIfPerfScore > 0.48, and perfScore=0.107526]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 33.4663 secs, and comparison 4.04598 sec, and warnIfPerfScore > 0.57, and perfScore=0.120897]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 22.4206 secs, and comparison 35.1837 sec, and warnIfPerfScore > 2.9, and perfScore=1.56926]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.3872 secs, and comparison 37.2277 sec, and warnIfPerfScore > 2.9, and perfScore=1.59179]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 19.7424 secs, and comparison 221.023 sec, and warnIfPerfScore > 24, and perfScore=11.1954]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 21.246 secs, and comparison 15.7022 sec, and warnIfPerfScore > 1.7, and perfScore=0.739065]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 39.5928 secs, and comparison 40.3689 sec, and warnIfPerfScore > 1.5, and perfScore=1.0196]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.8772 secs, and comparison 18.2484 sec, and warnIfPerfScore > 2.1, and perfScore=1.02076]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 35.4951 secs, and comparison 13.521 sec, and warnIfPerfScore > 1.6, and perfScore=0.380926]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 36.7352 secs, and comparison 2.37376 sec, and warnIfPerfScore > 0.23, and perfScore=0.0646183]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 18.3233 secs, and comparison 23.7461 sec, and warnIfPerfScore > 1.3, and perfScore=1.29595]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.9243 secs, and comparison 19.2161 sec, and warnIfPerfScore > 1.2, and perfScore=1.20671]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.20671}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.8358 secs, and comparison 4.02427 sec, and warnIfPerfScore > 0.33, and perfScore=0.313518]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 14.583 secs, and comparison 52.4543 sec, and warnIfPerfScore > 6, and perfScore=3.59695]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.3938 secs, and comparison 18.3726 sec, and warnIfPerfScore > 0.8, and perfScore=1.27643]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.27643}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.6751 secs, and comparison 37.3286 sec, and warnIfPerfScore > 1.4, and perfScore=2.54367]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.54367}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.6285 secs, and comparison 4.35056 sec, and warnIfPerfScore > 0.65, and perfScore=0.344503]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 23.8837 secs, and comparison 60.1439 sec, and warnIfPerfScore > 4.4, and perfScore=2.5182]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 12.7873 secs, and comparison 5.9692 sec, and warnIfPerfScore > 0.6, and perfScore=0.466808]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.683 secs, and comparison 6.21545 sec, and warnIfPerfScore > 0.6, and perfScore=0.454247]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 12.4624 secs, and comparison 5.9934 sec, and warnIfPerfScore > 0.6, and perfScore=0.480917]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.159 secs, and comparison 13.4237 sec, and warnIfPerfScore > 1.3, and perfScore=1.02012]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.5302 secs, and comparison 20.5855 sec, and warnIfPerfScore > 1.3, and perfScore=1.05403]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 110.427 secs, and comparison 8.52545 sec, and warnIfPerfScore > 0.3, and perfScore=0.0772044]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 26.5346 secs, and comparison 29.9607 sec, and warnIfPerfScore > 1.5, and perfScore=1.12912]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 20.1519 secs, and comparison 5.78384 sec, and warnIfPerfScore > 0.55, and perfScore=0.287013]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.1141 sec, and warnIfPerfScore > 0.1, and perfScore=0.14094]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.14094}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.07354 sec, and warnIfPerfScore > 0.5, and perfScore=0.338236]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.6439 secs, and comparison 24.5653 sec, and warnIfPerfScore > 2, and perfScore=1.25053]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.831 secs, and comparison 41.0167 sec, and warnIfPerfScore > 3.6, and perfScore=1.79654]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes, 16 seconds]]]

Succeeded
