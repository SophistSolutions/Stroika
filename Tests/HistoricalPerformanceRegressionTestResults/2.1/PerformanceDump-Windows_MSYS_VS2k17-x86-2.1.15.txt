Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Feb  3 23:59:59 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 53.4717 secs, and comparison 6.68483 sec, and warnIfPerfScore > 0.65, and perfScore=0.125016]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 53.6068 secs, and comparison 6.29359 sec, and warnIfPerfScore > 0.5, and perfScore=0.117403]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 20.0856 secs, and comparison 13.618 sec, and warnIfPerfScore > 1.05, and perfScore=0.677999]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 14.4167 secs, and comparison 13.8105 sec, and warnIfPerfScore > 1.15, and perfScore=0.957952]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 36.8197 secs, and comparison 4.00011 sec, and warnIfPerfScore > 0.48, and perfScore=0.108641]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 36.1069 secs, and comparison 4.22257 sec, and warnIfPerfScore > 0.57, and perfScore=0.116947]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 25.0999 secs, and comparison 38.8394 sec, and warnIfPerfScore > 2.9, and perfScore=1.54739]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 25.7495 secs, and comparison 39.3491 sec, and warnIfPerfScore > 2.9, and perfScore=1.52815]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 21.2974 secs, and comparison 223.85 sec, and warnIfPerfScore > 24, and perfScore=10.5107]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 24.7394 secs, and comparison 16.8466 sec, and warnIfPerfScore > 1.7, and perfScore=0.680962]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 45.0443 secs, and comparison 43.5828 sec, and warnIfPerfScore > 1.5, and perfScore=0.967554]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 19.9435 secs, and comparison 19.4522 sec, and warnIfPerfScore > 2.1, and perfScore=0.975366]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 38.671 secs, and comparison 14.2077 sec, and warnIfPerfScore > 1.6, and perfScore=0.3674]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 41.6227 secs, and comparison 2.86972 sec, and warnIfPerfScore > 0.23, and perfScore=0.0689461]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.9599 secs, and comparison 25.8557 sec, and warnIfPerfScore > 1.3, and perfScore=1.29539]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.1215 secs, and comparison 22.512 sec, and warnIfPerfScore > 1.2, and perfScore=1.31484]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.31484}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.8819 secs, and comparison 4.49047 sec, and warnIfPerfScore > 0.33, and perfScore=0.323477]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 15.9485 secs, and comparison 56.4789 sec, and warnIfPerfScore > 6, and perfScore=3.54133]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.1335 secs, and comparison 20.7608 sec, and warnIfPerfScore > 0.8, and perfScore=1.28681]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.28681}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.6254 secs, and comparison 40.2719 sec, and warnIfPerfScore > 1.4, and perfScore=2.57733]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.57733}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 14.1447 secs, and comparison 5.07817 sec, and warnIfPerfScore > 0.65, and perfScore=0.359016]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 25.8581 secs, and comparison 64.4844 sec, and warnIfPerfScore > 4.4, and perfScore=2.49378]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.1393 secs, and comparison 6.49646 sec, and warnIfPerfScore > 0.6, and perfScore=0.459463]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.1164 secs, and comparison 6.53802 sec, and warnIfPerfScore > 0.6, and perfScore=0.463151]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.2861 secs, and comparison 6.63974 sec, and warnIfPerfScore > 0.6, and perfScore=0.464769]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.6938 secs, and comparison 14.1714 sec, and warnIfPerfScore > 1.3, and perfScore=1.03488]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 21.7494 secs, and comparison 21.9499 sec, and warnIfPerfScore > 1.3, and perfScore=1.00922]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 121.108 secs, and comparison 9.31801 sec, and warnIfPerfScore > 0.3, and perfScore=0.0769396]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 28.2342 secs, and comparison 31.6212 sec, and warnIfPerfScore > 1.5, and perfScore=1.11996]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 20.8452 secs, and comparison 6.97833 sec, and warnIfPerfScore > 0.55, and perfScore=0.33477]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.47206 sec, and warnIfPerfScore > 0.1, and perfScore=0.164804]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.164804}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.65603 sec, and warnIfPerfScore > 0.5, and perfScore=0.377068]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.9897 secs, and comparison 27.7602 sec, and warnIfPerfScore > 2, and perfScore=1.26242]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 25.5773 secs, and comparison 46.4023 sec, and warnIfPerfScore > 3.6, and perfScore=1.8142]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 30 seconds]]]

Succeeded
