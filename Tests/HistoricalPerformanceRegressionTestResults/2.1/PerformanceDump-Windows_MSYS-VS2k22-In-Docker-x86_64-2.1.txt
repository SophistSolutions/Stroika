Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 1:46:2 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.47587 secs, and comparison 4.44622 sec, and warnIfPerfScore > 0.65, and perfScore=0.811967]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.73002 secs, and comparison 2.74889 sec, and warnIfPerfScore > 0.5, and perfScore=0.479735]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.11256 secs, and comparison 7.39114 sec, and warnIfPerfScore > 1.05, and perfScore=0.911074]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.81333 secs, and comparison 9.9546 sec, and warnIfPerfScore > 1.15, and perfScore=1.46105]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.2093 secs, and comparison 2.39866 sec, and warnIfPerfScore > 0.48, and perfScore=0.234948]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.61047 secs, and comparison 2.79136 sec, and warnIfPerfScore > 0.57, and perfScore=0.29045]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.40968 secs, and comparison 19.1893 sec, and warnIfPerfScore > 2.9, and perfScore=2.99379]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.6132 secs, and comparison 19.3019 sec, and warnIfPerfScore > 2.9, and perfScore=2.91869]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.83755 secs, and comparison 132.855 sec, and warnIfPerfScore > 24, and perfScore=22.7587]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.67697 secs, and comparison 10.186 sec, and warnIfPerfScore > 1.7, and perfScore=1.79427]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.49185 secs, and comparison 5.46031 sec, and warnIfPerfScore > 1.5, and perfScore=0.994257]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.44446 secs, and comparison 12.1933 sec, and warnIfPerfScore > 2.1, and perfScore=2.23958]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.9814 secs, and comparison 3.9258 sec, and warnIfPerfScore > 1.6, and perfScore=0.327658]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 12.6016 secs, and comparison 0.66262 sec, and warnIfPerfScore > 0.23, and perfScore=0.0525821]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5531 secs, and comparison 12.2746 sec, and warnIfPerfScore > 1.3, and perfScore=1.06245]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.5038 secs, and comparison 5.3756 sec, and warnIfPerfScore > 1.2, and perfScore=0.467288]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.63053 secs, and comparison 1.73054 sec, and warnIfPerfScore > 0.33, and perfScore=0.226792]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.2068 secs, and comparison 39.4129 sec, and warnIfPerfScore > 6, and perfScore=3.51686]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.90175 secs, and comparison 5.05272 sec, and warnIfPerfScore > 0.8, and perfScore=0.639443]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.90841 secs, and comparison 7.61956 sec, and warnIfPerfScore > 1.4, and perfScore=0.963476]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.73787 secs, and comparison 3.62087 sec, and warnIfPerfScore > 0.65, and perfScore=0.467942]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.50212 secs, and comparison 36.6429 sec, and warnIfPerfScore > 4.4, and perfScore=4.30985]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.46306 secs, and comparison 3.40336 sec, and warnIfPerfScore > 0.6, and perfScore=0.456028]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.74184 secs, and comparison 3.35427 sec, and warnIfPerfScore > 0.6, and perfScore=0.433265]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.47177 secs, and comparison 3.38132 sec, and warnIfPerfScore > 0.6, and perfScore=0.452547]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.59832 secs, and comparison 5.15209 sec, and warnIfPerfScore > 1.3, and perfScore=0.678056]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.07811 secs, and comparison 8.66233 sec, and warnIfPerfScore > 1.3, and perfScore=1.07232]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 37.5924 secs, and comparison 5.01123 sec, and warnIfPerfScore > 0.3, and perfScore=0.133304]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.0695 secs, and comparison 9.68407 sec, and warnIfPerfScore > 1.5, and perfScore=1.59553]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.19464 secs, and comparison 2.87338 sec, and warnIfPerfScore > 0.55, and perfScore=0.46385]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.592608 sec, and warnIfPerfScore > 0.1, and perfScore=0.0395072]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.85834 sec, and warnIfPerfScore > 0.5, and perfScore=0.190556]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.76277 secs, and comparison 12.7618 sec, and warnIfPerfScore > 2, and perfScore=1.88706]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.94944 secs, and comparison 14.6205 sec, and warnIfPerfScore > 3.6, and perfScore=1.83919]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 42 seconds]]]

Succeeded
