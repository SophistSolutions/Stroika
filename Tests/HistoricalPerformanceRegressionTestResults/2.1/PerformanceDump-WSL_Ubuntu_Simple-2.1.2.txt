Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug  1 10:39:59 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.343 secs, and comparison 4.60129 sec, and warnIfPerfScore > 0.65, and perfScore=0.86118]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.30518 secs, and comparison 2.57653 sec, and warnIfPerfScore > 0.5, and perfScore=0.485664]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.90371 secs, and comparison 6.29363 sec, and warnIfPerfScore > 1.05, and perfScore=1.06605]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.67872 secs, and comparison 6.34005 sec, and warnIfPerfScore > 1.15, and perfScore=1.11646]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 2.75052 secs, and comparison 2.07536 sec, and warnIfPerfScore > 0.48, and perfScore=0.754533]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 3.3653 secs, and comparison 2.7969 sec, and warnIfPerfScore > 0.57, and perfScore=0.831101]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 2.50048 secs, and comparison 14.7148 sec, and warnIfPerfScore > 2.9, and perfScore=5.8848]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 3.11764 secs, and comparison 14.915 sec, and warnIfPerfScore > 2.9, and perfScore=4.78405]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.95703 secs, and comparison 42.2904 sec, and warnIfPerfScore > 24, and perfScore=10.6874]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.65744 secs, and comparison 9.04006 sec, and warnIfPerfScore > 1.7, and perfScore=2.47169]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 4.44139 secs, and comparison 4.29861 sec, and warnIfPerfScore > 1.5, and perfScore=0.967852]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 2.02576 secs, and comparison 10.8924 sec, and warnIfPerfScore > 2.1, and perfScore=5.37697]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.04322 secs, and comparison 2.82834 sec, and warnIfPerfScore > 1.6, and perfScore=0.92939]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 3.22116 secs, and comparison 1.11987 sec, and warnIfPerfScore > 0.23, and perfScore=0.347662]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 2.94248 secs, and comparison 3.38043 sec, and warnIfPerfScore > 1.3, and perfScore=1.14884]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.59967 secs, and comparison 5.31596 sec, and warnIfPerfScore > 1.2, and perfScore=2.04486]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.8696 secs, and comparison 1.27688 sec, and warnIfPerfScore > 0.33, and perfScore=0.117473]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.49293 secs, and comparison 42.3593 sec, and warnIfPerfScore > 6, and perfScore=16.9917]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.48104 secs, and comparison 5.23495 sec, and warnIfPerfScore > 0.8, and perfScore=2.10999]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.48072 secs, and comparison 6.30915 sec, and warnIfPerfScore > 1.4, and perfScore=2.54328]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.9582 secs, and comparison 3.73553 sec, and warnIfPerfScore > 0.65, and perfScore=0.340888]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.4234 secs, and comparison 37.8427 sec, and warnIfPerfScore > 4.4, and perfScore=11.0541]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.23909 secs, and comparison 3.56417 sec, and warnIfPerfScore > 0.6, and perfScore=0.432592]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.96706 secs, and comparison 3.63972 sec, and warnIfPerfScore > 0.6, and perfScore=0.456846]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.02515 secs, and comparison 3.52388 sec, and warnIfPerfScore > 0.6, and perfScore=0.439105]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.75968 secs, and comparison 3.66924 sec, and warnIfPerfScore > 1.3, and perfScore=0.472859]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.0473 secs, and comparison 8.06624 sec, and warnIfPerfScore > 1.3, and perfScore=0.618232]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.9413 secs, and comparison 5.57643 sec, and warnIfPerfScore > 0.3, and perfScore=0.430902]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.48709 secs, and comparison 11.4309 sec, and warnIfPerfScore > 1.5, and perfScore=2.08324]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 5.8026 secs, and comparison 2.34294 sec, and warnIfPerfScore > 0.55, and perfScore=0.403775]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.042
	DETAILS:         	[baseline test 15 secs, and comparison 0.635109 sec, and warnIfPerfScore > 0.1, and perfScore=0.0423406]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.68795 sec, and warnIfPerfScore > 0.5, and perfScore=0.179197]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 17 seconds]]]

Succeeded
