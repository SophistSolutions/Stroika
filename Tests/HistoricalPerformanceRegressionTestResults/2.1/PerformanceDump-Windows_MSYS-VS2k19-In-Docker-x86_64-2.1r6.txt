Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 7:55:24 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.55823 secs, and comparison 4.28567 sec, and warnIfPerfScore > 0.65, and perfScore=0.771049]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.6639 secs, and comparison 2.56435 sec, and warnIfPerfScore > 0.5, and perfScore=0.452753]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.00588 secs, and comparison 7.2392 sec, and warnIfPerfScore > 1.05, and perfScore=0.904236]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.54802 secs, and comparison 7.22022 sec, and warnIfPerfScore > 1.15, and perfScore=1.10266]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.08651 secs, and comparison 2.20993 sec, and warnIfPerfScore > 0.48, and perfScore=0.273286]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.95076 secs, and comparison 2.76197 sec, and warnIfPerfScore > 0.57, and perfScore=0.347384]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.85349 secs, and comparison 19.1571 sec, and warnIfPerfScore > 2.9, and perfScore=2.79523]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.15581 secs, and comparison 19.2783 sec, and warnIfPerfScore > 2.9, and perfScore=2.69408]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.05894 secs, and comparison 128.473 sec, and warnIfPerfScore > 24, and perfScore=21.2039]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.5037 secs, and comparison 10.1651 sec, and warnIfPerfScore > 1.7, and perfScore=1.84696]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.24703 secs, and comparison 5.96401 sec, and warnIfPerfScore > 1.5, and perfScore=0.954695]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.26225 secs, and comparison 12.0714 sec, and warnIfPerfScore > 2.1, and perfScore=2.29396]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.04871 secs, and comparison 4.78511 sec, and warnIfPerfScore > 1.6, and perfScore=0.678863]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 7.53974 secs, and comparison 0.685529 sec, and warnIfPerfScore > 0.23, and perfScore=0.0909222]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.0845 secs, and comparison 12.5585 sec, and warnIfPerfScore > 1.3, and perfScore=1.03922]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.8251 secs, and comparison 5.44429 sec, and warnIfPerfScore > 1.2, and perfScore=0.61691]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.58788 secs, and comparison 2.04929 sec, and warnIfPerfScore > 0.33, and perfScore=0.238626]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.54077 secs, and comparison 39.8684 sec, and warnIfPerfScore > 6, and perfScore=4.66801]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.60708 secs, and comparison 5.42744 sec, and warnIfPerfScore > 0.8, and perfScore=0.630578]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.54497 secs, and comparison 7.72162 sec, and warnIfPerfScore > 1.4, and perfScore=0.903645]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.44869 secs, and comparison 3.51763 sec, and warnIfPerfScore > 0.65, and perfScore=0.416352]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.07237 secs, and comparison 37.3077 sec, and warnIfPerfScore > 4.4, and perfScore=4.11223]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.26678 secs, and comparison 3.46547 sec, and warnIfPerfScore > 0.6, and perfScore=0.419204]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.38235 secs, and comparison 3.42088 sec, and warnIfPerfScore > 0.6, and perfScore=0.408105]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.41577 secs, and comparison 3.49771 sec, and warnIfPerfScore > 0.6, and perfScore=0.415614]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.49935 secs, and comparison 5.19445 sec, and warnIfPerfScore > 1.3, and perfScore=0.611158]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.97378 secs, and comparison 8.66833 sec, and warnIfPerfScore > 1.3, and perfScore=0.965962]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 40.0156 secs, and comparison 6.27178 sec, and warnIfPerfScore > 0.3, and perfScore=0.156733]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.01099 secs, and comparison 10.1323 sec, and warnIfPerfScore > 1.5, and perfScore=1.68563]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.74135 secs, and comparison 2.90436 sec, and warnIfPerfScore > 0.55, and perfScore=0.430828]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.612885 sec, and warnIfPerfScore > 0.1, and perfScore=0.040859]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.92692 sec, and warnIfPerfScore > 0.5, and perfScore=0.195128]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.15782 secs, and comparison 8.29903 sec, and warnIfPerfScore > 2, and perfScore=1.15943]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.38706 secs, and comparison 14.1905 sec, and warnIfPerfScore > 3.6, and perfScore=1.92099]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 29 seconds]]]

Succeeded
