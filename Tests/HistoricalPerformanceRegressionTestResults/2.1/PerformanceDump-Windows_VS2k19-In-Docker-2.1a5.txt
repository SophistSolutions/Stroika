Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 31 3:15:2 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 12.8709 secs, and comparison 6.1188 sec, and warnIfPerfScore > 0.62, and perfScore=0.475397]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.8959 secs, and comparison 4.06496 sec, and warnIfPerfScore > 0.5, and perfScore=0.315213]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 12.3222 secs, and comparison 10.5308 sec, and warnIfPerfScore > 1.05, and perfScore=0.854617]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.341 secs, and comparison 4.7492 sec, and warnIfPerfScore > 0.48, and perfScore=0.418765]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.6973 secs, and comparison 5.12841 sec, and warnIfPerfScore > 0.57, and perfScore=0.438425]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.6222 secs, and comparison 28.3426 sec, and warnIfPerfScore > 2.9, and perfScore=2.24545]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.0653 secs, and comparison 30.7756 sec, and warnIfPerfScore > 2.9, and perfScore=2.35552]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 12.5943 secs, and comparison 102.384 sec, and warnIfPerfScore > 9.7, and perfScore=8.12943]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.791 secs, and comparison 13.4439 sec, and warnIfPerfScore > 1.6, and perfScore=1.24585]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.1366 secs, and comparison 15.3829 sec, and warnIfPerfScore > 1.5, and perfScore=1.01627]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.702 secs, and comparison 14.519 sec, and warnIfPerfScore > 2.1, and perfScore=1.35666]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 14.099 secs, and comparison 10.7277 sec, and warnIfPerfScore > 1.3, and perfScore=0.760885]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15.1077 secs, and comparison 3.17092 sec, and warnIfPerfScore > 0.23, and perfScore=0.209888]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.3748 secs, and comparison 15.7011 sec, and warnIfPerfScore > 1.3, and perfScore=1.02122]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 12.0394 secs, and comparison 8.55118 sec, and warnIfPerfScore > 1.2, and perfScore=0.710265]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 11.6345 secs, and comparison 2.38031 sec, and warnIfPerfScore > 0.33, and perfScore=0.20459]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 10.9287 secs, and comparison 52.3021 sec, and warnIfPerfScore > 6, and perfScore=4.78577]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.24 secs, and comparison 4.96247 sec, and warnIfPerfScore > 0.5, and perfScore=0.441502]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.8584 secs, and comparison 46.8547 sec, and warnIfPerfScore > 4.4, and perfScore=3.95118]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.6615 secs, and comparison 5.2678 sec, and warnIfPerfScore > 0.6, and perfScore=0.451724]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 20.3739 secs, and comparison 24.7966 sec, and warnIfPerfScore > 1.5, and perfScore=1.21708]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.5406 secs, and comparison 4.99613 sec, and warnIfPerfScore > 0.55, and perfScore=0.432917]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.70688 sec, and warnIfPerfScore > 0.25, and perfScore=0.113792]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.37381 sec, and warnIfPerfScore > 0.5, and perfScore=0.291587]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.5204 secs, and comparison 21.4927 sec, and warnIfPerfScore > 2, and perfScore=1.58965]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.8302 secs, and comparison 37.7885 sec, and warnIfPerfScore > 3.1, and perfScore=2.73232]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 14 seconds]]]

Succeeded
