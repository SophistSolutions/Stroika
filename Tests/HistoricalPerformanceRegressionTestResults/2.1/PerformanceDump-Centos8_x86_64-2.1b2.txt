Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Aug  2 22:40:9 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 15.0205 secs, and comparison 10.458 sec, and warnIfPerfScore > 0.62, and perfScore=0.696249]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 13.3291 secs, and comparison 6.14024 sec, and warnIfPerfScore > 0.5, and perfScore=0.460664]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 15.6738 secs, and comparison 14.5771 sec, and warnIfPerfScore > 1.05, and perfScore=0.930029]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.75872 secs, and comparison 7.91895 sec, and warnIfPerfScore > 0.48, and perfScore=1.02065]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 12.3941 secs, and comparison 10.1549 sec, and warnIfPerfScore > 0.57, and perfScore=0.819339]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.7588 secs, and comparison 46.1156 sec, and warnIfPerfScore > 2.9, and perfScore=4.28632]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 12.7865 secs, and comparison 49.5527 sec, and warnIfPerfScore > 2.9, and perfScore=3.87539]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 15.0109 secs, and comparison 174.372 sec, and warnIfPerfScore > 9.7, and perfScore=11.6163]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 10.7507 secs, and comparison 21.4152 sec, and warnIfPerfScore > 1.6, and perfScore=1.99199]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 19.2392 secs, and comparison 17.9432 sec, and warnIfPerfScore > 1.5, and perfScore=0.932636]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 7.59984 secs, and comparison 26.2266 sec, and warnIfPerfScore > 2.1, and perfScore=3.45094]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 16.3599 secs, and comparison 8.85434 sec, and warnIfPerfScore > 1.3, and perfScore=0.541223]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.0162 secs, and comparison 5.10039 sec, and warnIfPerfScore > 0.23, and perfScore=0.462992]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1858 secs, and comparison 12.1718 sec, and warnIfPerfScore > 1.3, and perfScore=0.998852]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.6682 secs, and comparison 16.3515 sec, and warnIfPerfScore > 1.2, and perfScore=1.53274]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 35.4989 secs, and comparison 3.2546 sec, and warnIfPerfScore > 0.33, and perfScore=0.0916819]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 7.62645 secs, and comparison 88.7295 sec, and warnIfPerfScore > 6, and perfScore=11.6344]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 29.2482 secs, and comparison 8.69184 sec, and warnIfPerfScore > 0.5, and perfScore=0.297175]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 15.5574 secs, and comparison 73.0159 sec, and warnIfPerfScore > 4.4, and perfScore=4.69333]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 18.3484 secs, and comparison 4.1618 sec, and warnIfPerfScore > 0.6, and perfScore=0.226821]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8781 secs, and comparison 14.4727 sec, and warnIfPerfScore > 1.5, and perfScore=1.12382]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.63528 secs, and comparison 2.49957 sec, and warnIfPerfScore > 0.55, and perfScore=0.28946]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 15 secs, and comparison 1.26092 sec, and warnIfPerfScore > 0.25, and perfScore=0.0840616]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.96227 sec, and warnIfPerfScore > 0.5, and perfScore=0.264151]
	                 	Test_Optional_ is FASTER

[[[Tests took: 15 minutes, 31 seconds]]]

Succeeded
