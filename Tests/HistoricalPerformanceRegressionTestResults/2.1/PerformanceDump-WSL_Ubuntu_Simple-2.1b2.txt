Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug  3 4:25:39 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.65457 secs, and comparison 4.65974 sec, and warnIfPerfScore > 0.62, and perfScore=0.824066]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.47964 secs, and comparison 3.01105 sec, and warnIfPerfScore > 0.5, and perfScore=0.549499]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.44674 secs, and comparison 6.89971 sec, and warnIfPerfScore > 1.05, and perfScore=1.07026]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.7638 secs, and comparison 3.55243 sec, and warnIfPerfScore > 0.48, and perfScore=0.94384]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.58059 secs, and comparison 4.1818 sec, and warnIfPerfScore > 0.57, and perfScore=0.912939]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 7.19742 secs, and comparison 33.9383 sec, and warnIfPerfScore > 2.9, and perfScore=4.71534]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.81069 secs, and comparison 38.9686 sec, and warnIfPerfScore > 2.9, and perfScore=4.42288]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	29
	DETAILS:         	[baseline test 13.0828 secs, and comparison 378.882 sec, and warnIfPerfScore > 9.7, and perfScore=28.9604]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.78607 secs, and comparison 9.57017 sec, and warnIfPerfScore > 1.6, and perfScore=1.654]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 26.4189 secs, and comparison 23.6831 sec, and warnIfPerfScore > 1.5, and perfScore=0.896445]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.8615 secs, and comparison 11.0092 sec, and warnIfPerfScore > 2.1, and perfScore=3.84734]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.48047 secs, and comparison 4.57414 sec, and warnIfPerfScore > 1.3, and perfScore=0.705834]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.07742 secs, and comparison 2.87316 sec, and warnIfPerfScore > 0.23, and perfScore=0.405961]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.69697 secs, and comparison 4.4927 sec, and warnIfPerfScore > 1.3, and perfScore=1.21524]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 22.1184 secs, and comparison 10.4083 sec, and warnIfPerfScore > 1.2, and perfScore=0.470574]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.015
	DETAILS:         	[baseline test 104.629 secs, and comparison 1.57355 sec, and warnIfPerfScore > 0.33, and perfScore=0.0150393]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.5989 secs, and comparison 41.4881 sec, and warnIfPerfScore > 6, and perfScore=1.83585]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 56.4063 secs, and comparison 3.85939 sec, and warnIfPerfScore > 0.5, and perfScore=0.0684212]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 21.5689 secs, and comparison 37.7918 sec, and warnIfPerfScore > 4.4, and perfScore=1.75214]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 67.5726 secs, and comparison 3.78988 sec, and warnIfPerfScore > 0.6, and perfScore=0.0560861]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.12992 secs, and comparison 13.8291 sec, and warnIfPerfScore > 1.5, and perfScore=1.93958]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.24627 secs, and comparison 2.53647 sec, and warnIfPerfScore > 0.55, and perfScore=0.350038]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.15335 sec, and warnIfPerfScore > 0.25, and perfScore=0.0768902]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.88978 sec, and warnIfPerfScore > 0.5, and perfScore=0.259319]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 54 seconds]]]

Succeeded
