Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 9:44:27 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.80629 secs, and comparison 4.66429 sec, and warnIfPerfScore > 0.65, and perfScore=0.597504]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.88246 secs, and comparison 3.06574 sec, and warnIfPerfScore > 0.5, and perfScore=0.388932]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.62317 secs, and comparison 8.22862 sec, and warnIfPerfScore > 1.05, and perfScore=0.855084]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.4318 secs, and comparison 8.13163 sec, and warnIfPerfScore > 1.15, and perfScore=1.09417]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.7988 secs, and comparison 2.48724 sec, and warnIfPerfScore > 0.48, and perfScore=0.230326]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.7307 secs, and comparison 2.99693 sec, and warnIfPerfScore > 0.57, and perfScore=0.279285]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.47651 secs, and comparison 23.1365 sec, and warnIfPerfScore > 2.9, and perfScore=2.44146]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 10.4551 secs, and comparison 23.7236 sec, and warnIfPerfScore > 2.9, and perfScore=2.26909]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 9.01589 secs, and comparison 168.467 sec, and warnIfPerfScore > 24, and perfScore=18.6856]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.9321 secs, and comparison 11.5671 sec, and warnIfPerfScore > 1.7, and perfScore=1.29501]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.79016 secs, and comparison 8.7786 sec, and warnIfPerfScore > 1.5, and perfScore=0.998684]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.23413 secs, and comparison 13.4921 sec, and warnIfPerfScore > 2.1, and perfScore=1.86506]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.27782 secs, and comparison 7.12781 sec, and warnIfPerfScore > 1.6, and perfScore=0.768263]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.90083 secs, and comparison 1.37097 sec, and warnIfPerfScore > 0.23, and perfScore=0.13847]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3164 secs, and comparison 13.292 sec, and warnIfPerfScore > 1.3, and perfScore=0.998162]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.1255 secs, and comparison 5.6578 sec, and warnIfPerfScore > 1.2, and perfScore=0.558767]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.3033 secs, and comparison 2.1934 sec, and warnIfPerfScore > 0.33, and perfScore=0.235766]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.74926 secs, and comparison 39.9682 sec, and warnIfPerfScore > 6, and perfScore=4.09962]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.3511 secs, and comparison 5.79954 sec, and warnIfPerfScore > 0.8, and perfScore=0.560282]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.1591 secs, and comparison 9.42323 sec, and warnIfPerfScore > 1.4, and perfScore=0.927565]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.7457 secs, and comparison 3.83518 sec, and warnIfPerfScore > 0.65, and perfScore=0.393525]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.4646 secs, and comparison 37.7713 sec, and warnIfPerfScore > 4.4, and perfScore=3.60944]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.27645 secs, and comparison 3.61792 sec, and warnIfPerfScore > 0.6, and perfScore=0.390011]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.40514 secs, and comparison 3.57743 sec, and warnIfPerfScore > 0.6, and perfScore=0.380369]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.29398 secs, and comparison 3.58068 sec, and warnIfPerfScore > 0.6, and perfScore=0.385268]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.27441 secs, and comparison 4.95989 sec, and warnIfPerfScore > 1.3, and perfScore=0.534793]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.0366 secs, and comparison 8.51042 sec, and warnIfPerfScore > 1.3, and perfScore=0.847942]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.9831 secs, and comparison 5.9286 sec, and warnIfPerfScore > 0.3, and perfScore=0.121034]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.08137 secs, and comparison 12.7731 sec, and warnIfPerfScore > 1.5, and perfScore=1.58057]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.58057}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.8316 secs, and comparison 4.75331 sec, and warnIfPerfScore > 0.55, and perfScore=0.401746]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 2.01482 sec, and warnIfPerfScore > 0.1, and perfScore=0.134321]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.134321}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.91034 sec, and warnIfPerfScore > 0.5, and perfScore=0.394022]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.7578 secs, and comparison 22.2474 sec, and warnIfPerfScore > 2, and perfScore=1.25282]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 18.7994 secs, and comparison 44.3965 sec, and warnIfPerfScore > 3.6, and perfScore=2.3616]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 59 seconds]]]

Succeeded
