Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat May 14 23:18:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.92147 secs, and comparison 5.387 sec, and warnIfPerfScore > 0.65, and perfScore=0.603824]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.59073 secs, and comparison 2.99673 sec, and warnIfPerfScore > 0.5, and perfScore=0.348833]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.8457 secs, and comparison 9.7248 sec, and warnIfPerfScore > 1.05, and perfScore=0.820954]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.32303 secs, and comparison 10.2779 sec, and warnIfPerfScore > 1.15, and perfScore=1.10242]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.9027 secs, and comparison 3.39024 sec, and warnIfPerfScore > 0.48, and perfScore=0.310955]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.9066 secs, and comparison 3.79092 sec, and warnIfPerfScore > 0.57, and perfScore=0.318388]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.8123 secs, and comparison 28.5236 sec, and warnIfPerfScore > 2.9, and perfScore=2.63807]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.6272 secs, and comparison 28.4769 sec, and warnIfPerfScore > 2.9, and perfScore=2.67962]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.48667 secs, and comparison 148.159 sec, and warnIfPerfScore > 24, and perfScore=17.4579]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.56472 secs, and comparison 14.4851 sec, and warnIfPerfScore > 1.7, and perfScore=1.51443]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.294 secs, and comparison 9.69692 sec, and warnIfPerfScore > 1.5, and perfScore=0.941995]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.83058 secs, and comparison 16.7788 sec, and warnIfPerfScore > 2.1, and perfScore=1.90008]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 10.8656 secs, and comparison 7.31632 sec, and warnIfPerfScore > 1.6, and perfScore=0.673347]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 11.3247 secs, and comparison 1.42492 sec, and warnIfPerfScore > 0.23, and perfScore=0.125824]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6571 secs, and comparison 13.8173 sec, and warnIfPerfScore > 1.3, and perfScore=1.09166]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.2895 secs, and comparison 7.19779 sec, and warnIfPerfScore > 1.2, and perfScore=0.699529]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 13.5913 secs, and comparison 2.80603 sec, and warnIfPerfScore > 0.33, and perfScore=0.206458]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 9.49043 secs, and comparison 49.6599 sec, and warnIfPerfScore > 6, and perfScore=5.23263]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 10.1274 secs, and comparison 7.52734 sec, and warnIfPerfScore > 0.8, and perfScore=0.743268]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.74901 secs, and comparison 15.8137 sec, and warnIfPerfScore > 1.4, and perfScore=1.62208]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.3074 secs, and comparison 4.66599 sec, and warnIfPerfScore > 0.65, and perfScore=0.350631]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.5459 secs, and comparison 44.686 sec, and warnIfPerfScore > 4.4, and perfScore=4.23729]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9457 secs, and comparison 4.24523 sec, and warnIfPerfScore > 0.6, and perfScore=0.327925]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.7981 secs, and comparison 4.40029 sec, and warnIfPerfScore > 0.6, and perfScore=0.343823]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.1874 secs, and comparison 4.24602 sec, and warnIfPerfScore > 0.6, and perfScore=0.321975]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 12.6704 secs, and comparison 8.46906 sec, and warnIfPerfScore > 1.3, and perfScore=0.668415]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 14.8157 secs, and comparison 12.7119 sec, and warnIfPerfScore > 1.3, and perfScore=0.858006]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 61.8084 secs, and comparison 7.66776 sec, and warnIfPerfScore > 0.3, and perfScore=0.124057]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.38912 secs, and comparison 15.5387 sec, and warnIfPerfScore > 1.5, and perfScore=1.65497]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.6141 secs, and comparison 5.02414 sec, and warnIfPerfScore > 0.55, and perfScore=0.32177]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.972973 sec, and warnIfPerfScore > 0.1, and perfScore=0.0648649]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.2802 sec, and warnIfPerfScore > 0.5, and perfScore=0.285346]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.7839 secs, and comparison 19.4168 sec, and warnIfPerfScore > 2, and perfScore=1.80053]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.5054 secs, and comparison 19.5374 sec, and warnIfPerfScore > 3.6, and perfScore=1.69811]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 52 seconds]]]

Succeeded
