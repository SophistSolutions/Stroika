Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 20:1:57 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.55765 secs, and comparison 4.05201 sec, and warnIfPerfScore > 0.65, and perfScore=0.617906]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.54187 secs, and comparison 2.6198 sec, and warnIfPerfScore > 0.5, and perfScore=0.400466]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 7.93049 secs, and comparison 6.91021 sec, and warnIfPerfScore > 1.05, and perfScore=0.871347]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.23544 secs, and comparison 6.90162 sec, and warnIfPerfScore > 1.15, and perfScore=1.10684]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.7791 secs, and comparison 2.33646 sec, and warnIfPerfScore > 0.48, and perfScore=0.0671798]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 32.7645 secs, and comparison 2.79894 sec, and warnIfPerfScore > 0.57, and perfScore=0.0854259]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.05321 secs, and comparison 18.9851 sec, and warnIfPerfScore > 2.9, and perfScore=2.6917]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.37706 secs, and comparison 19.7876 sec, and warnIfPerfScore > 2.9, and perfScore=2.68232]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 6.86161 secs, and comparison 140.381 sec, and warnIfPerfScore > 24, and perfScore=20.4588]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.16378 secs, and comparison 10.3172 sec, and warnIfPerfScore > 1.7, and perfScore=1.67384]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.15048 secs, and comparison 6.95215 sec, and warnIfPerfScore > 1.5, and perfScore=0.972264]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 119.647 secs, and comparison 11.8898 sec, and warnIfPerfScore > 2.1, and perfScore=0.0993741]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.0595 secs, and comparison 7.17492 sec, and warnIfPerfScore > 1.6, and perfScore=0.890245]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.56783 secs, and comparison 1.21111 sec, and warnIfPerfScore > 0.23, and perfScore=0.141355]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.371 secs, and comparison 12.5554 sec, and warnIfPerfScore > 1.3, and perfScore=1.01491]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 9.42941 secs, and comparison 5.49337 sec, and warnIfPerfScore > 1.2, and perfScore=0.582578]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.05061 secs, and comparison 1.45812 sec, and warnIfPerfScore > 0.33, and perfScore=0.240987]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.9929 secs, and comparison 38.2839 sec, and warnIfPerfScore > 6, and perfScore=4.25713]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.98313 secs, and comparison 5.1142 sec, and warnIfPerfScore > 0.8, and perfScore=0.569311]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.05327 secs, and comparison 8.91331 sec, and warnIfPerfScore > 1.4, and perfScore=0.984541]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.85458 secs, and comparison 3.28672 sec, and warnIfPerfScore > 0.65, and perfScore=0.561394]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 8.94348 secs, and comparison 34.9628 sec, and warnIfPerfScore > 4.4, and perfScore=3.90931]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.93327 secs, and comparison 3.23288 sec, and warnIfPerfScore > 0.6, and perfScore=0.544873]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.93381 secs, and comparison 3.24048 sec, and warnIfPerfScore > 0.6, and perfScore=0.546105]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.23765 secs, and comparison 3.26185 sec, and warnIfPerfScore > 0.6, and perfScore=0.522928]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.21881 secs, and comparison 4.42485 sec, and warnIfPerfScore > 1.3, and perfScore=0.711527]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.59517 secs, and comparison 7.63448 sec, and warnIfPerfScore > 1.3, and perfScore=1.15759]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.882 secs, and comparison 5.59159 sec, and warnIfPerfScore > 0.3, and perfScore=0.140204]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.68819 secs, and comparison 11.1305 sec, and warnIfPerfScore > 1.5, and perfScore=1.44774]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.57148 secs, and comparison 2.6235 sec, and warnIfPerfScore > 0.55, and perfScore=0.399225]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.853908 sec, and warnIfPerfScore > 0.1, and perfScore=0.0569272]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.86242 sec, and warnIfPerfScore > 0.5, and perfScore=0.190828]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.33807 secs, and comparison 8.42899 sec, and warnIfPerfScore > 2, and perfScore=1.14867]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 8.43141 secs, and comparison 29.4615 sec, and warnIfPerfScore > 3.6, and perfScore=3.49426]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 33 seconds]]]

Succeeded
