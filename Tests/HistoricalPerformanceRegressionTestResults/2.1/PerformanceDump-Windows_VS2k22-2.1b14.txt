Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Dec 22 10:57:1 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.5836 secs, and comparison 4.08108 sec, and warnIfPerfScore > 0.62, and perfScore=0.619886]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.70769 secs, and comparison 2.57029 sec, and warnIfPerfScore > 0.5, and perfScore=0.383185]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.2019 secs, and comparison 7.14033 sec, and warnIfPerfScore > 1.05, and perfScore=0.87057]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.41206 secs, and comparison 7.07027 sec, and warnIfPerfScore > 1.15, and perfScore=1.10265]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.33859 secs, and comparison 2.39571 sec, and warnIfPerfScore > 0.48, and perfScore=0.326454]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.28803 secs, and comparison 2.86655 sec, and warnIfPerfScore > 0.57, and perfScore=0.393323]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.66994 secs, and comparison 20.621 sec, and warnIfPerfScore > 2.9, and perfScore=2.68855]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.79566 secs, and comparison 21.5389 sec, and warnIfPerfScore > 2.9, and perfScore=2.76293]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 7.11569 secs, and comparison 67.4652 sec, and warnIfPerfScore > 9.7, and perfScore=9.48119]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.77572 secs, and comparison 10.7219 sec, and warnIfPerfScore > 1.6, and perfScore=1.58239]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.82873 secs, and comparison 7.60829 sec, and warnIfPerfScore > 1.5, and perfScore=0.971842]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.63154 secs, and comparison 12.3707 sec, and warnIfPerfScore > 2.1, and perfScore=1.86543]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 8.75843 secs, and comparison 7.12758 sec, and warnIfPerfScore > 1.3, and perfScore=0.813796]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.21143 secs, and comparison 1.22737 sec, and warnIfPerfScore > 0.23, and perfScore=0.133244]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2812 secs, and comparison 12.7728 sec, and warnIfPerfScore > 1.3, and perfScore=1.04003]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.75464 secs, and comparison 5.40974 sec, and warnIfPerfScore > 1.2, and perfScore=0.554582]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.90531 secs, and comparison 1.42312 sec, and warnIfPerfScore > 0.33, and perfScore=0.24099]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.35739 secs, and comparison 37.757 sec, and warnIfPerfScore > 6, and perfScore=4.03499]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.36985 secs, and comparison 5.15489 sec, and warnIfPerfScore > 0.8, and perfScore=0.550157]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.36285 secs, and comparison 8.78669 sec, and warnIfPerfScore > 0.9, and perfScore=0.938463]
	                 	Sequence_stdvector<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.9 and got 0.938463}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.8999 secs, and comparison 3.31872 sec, and warnIfPerfScore > 0.5, and perfScore=0.562505]
	                 	Sequence_DoublyLinkedList<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.5 and got 0.562505}}}

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.68593 secs, and comparison 35.1128 sec, and warnIfPerfScore > 4.4, and perfScore=3.62514]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.03236 secs, and comparison 4.47767 sec, and warnIfPerfScore > 0.6, and perfScore=0.742276]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.742276}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.2976 secs, and comparison 5.74127 sec, and warnIfPerfScore > 0.2, and perfScore=0.129607]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.87515 secs, and comparison 11.6133 sec, and warnIfPerfScore > 1.5, and perfScore=1.47468]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.80548 secs, and comparison 2.75143 sec, and warnIfPerfScore > 0.55, and perfScore=0.404296]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 15 secs, and comparison 0.893123 sec, and warnIfPerfScore > 0.25, and perfScore=0.0595415]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.86268 sec, and warnIfPerfScore > 0.5, and perfScore=0.190845]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.51836 secs, and comparison 8.52062 sec, and warnIfPerfScore > 2, and perfScore=1.13331]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.67673 secs, and comparison 28.3566 sec, and warnIfPerfScore > 3.1, and perfScore=3.26812]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 3.26812}}}

[[[Tests took: 10 minutes, 7 seconds]]]

Succeeded
