Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 17:29:24 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.17552 secs, and comparison 4.0432 sec, and warnIfPerfScore > 0.65, and perfScore=0.781215]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 4.69983 secs, and comparison 2.33207 sec, and warnIfPerfScore > 0.5, and perfScore=0.496203]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.06621 secs, and comparison 6.87086 sec, and warnIfPerfScore > 1.05, and perfScore=0.972355]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.97366 secs, and comparison 8.29221 sec, and warnIfPerfScore > 1.15, and perfScore=1.38813]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 5.4499 secs, and comparison 2.27265 sec, and warnIfPerfScore > 0.48, and perfScore=0.417009]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.53996 secs, and comparison 2.82097 sec, and warnIfPerfScore > 0.57, and perfScore=0.509205]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 5.29736 secs, and comparison 16.8981 sec, and warnIfPerfScore > 2.9, and perfScore=3.18991]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 5.79742 secs, and comparison 16.7868 sec, and warnIfPerfScore > 2.9, and perfScore=2.89557]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.05043 secs, and comparison 125.982 sec, and warnIfPerfScore > 24, and perfScore=24.9448]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.79043 secs, and comparison 9.01916 sec, and warnIfPerfScore > 1.7, and perfScore=1.88274]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.35202 secs, and comparison 4.96949 sec, and warnIfPerfScore > 1.5, and perfScore=0.928527]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 4.35987 secs, and comparison 11.0986 sec, and warnIfPerfScore > 2.1, and perfScore=2.54564]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.12591 secs, and comparison 4.23288 sec, and warnIfPerfScore > 1.6, and perfScore=0.69098]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 6.41458 secs, and comparison 0.607251 sec, and warnIfPerfScore > 0.23, and perfScore=0.0946673]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1147 secs, and comparison 11.4902 sec, and warnIfPerfScore > 1.3, and perfScore=1.03379]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.6931 secs, and comparison 4.79737 sec, and warnIfPerfScore > 1.2, and perfScore=0.623594]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.2256 secs, and comparison 1.68366 sec, and warnIfPerfScore > 0.33, and perfScore=0.233013]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.35882 secs, and comparison 36.5226 sec, and warnIfPerfScore > 6, and perfScore=4.9631]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.36928 secs, and comparison 4.60506 sec, and warnIfPerfScore > 0.8, and perfScore=0.6249]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.36509 secs, and comparison 6.88418 sec, and warnIfPerfScore > 1.4, and perfScore=0.934704]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.17722 secs, and comparison 3.25496 sec, and warnIfPerfScore > 0.65, and perfScore=0.453512]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.00573 secs, and comparison 34.0027 sec, and warnIfPerfScore > 4.4, and perfScore=4.24729]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.14589 secs, and comparison 3.19148 sec, and warnIfPerfScore > 0.6, and perfScore=0.446618]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.15881 secs, and comparison 3.15224 sec, and warnIfPerfScore > 0.6, and perfScore=0.440331]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.15379 secs, and comparison 3.17002 sec, and warnIfPerfScore > 0.6, and perfScore=0.443124]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.16349 secs, and comparison 4.57501 sec, and warnIfPerfScore > 1.3, and perfScore=0.638656]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.60692 secs, and comparison 7.4069 sec, and warnIfPerfScore > 1.3, and perfScore=0.973706]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 32.7467 secs, and comparison 4.73362 sec, and warnIfPerfScore > 0.3, and perfScore=0.144553]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.19226 secs, and comparison 8.54852 sec, and warnIfPerfScore > 1.5, and perfScore=1.6464]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.44861 secs, and comparison 2.54924 sec, and warnIfPerfScore > 0.55, and perfScore=0.46787]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.649058 sec, and warnIfPerfScore > 0.1, and perfScore=0.0432705]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.63578 sec, and warnIfPerfScore > 0.5, and perfScore=0.175719]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.57845 secs, and comparison 7.38162 sec, and warnIfPerfScore > 2, and perfScore=1.32324]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.70923 secs, and comparison 11.2885 sec, and warnIfPerfScore > 3.6, and perfScore=1.68254]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 12 seconds]]]

Succeeded
