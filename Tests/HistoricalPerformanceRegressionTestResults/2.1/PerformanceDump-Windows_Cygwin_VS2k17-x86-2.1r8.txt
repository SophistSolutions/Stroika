Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 6:11:30 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.7587 secs, and comparison 6.56799 sec, and warnIfPerfScore > 0.65, and perfScore=0.558565]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 11.2133 secs, and comparison 3.07538 sec, and warnIfPerfScore > 0.5, and perfScore=0.274263]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.2361 secs, and comparison 9.84552 sec, and warnIfPerfScore > 1.05, and perfScore=0.87624]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.37489 secs, and comparison 9.13341 sec, and warnIfPerfScore > 1.15, and perfScore=1.09057]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.6468 secs, and comparison 3.04955 sec, and warnIfPerfScore > 0.48, and perfScore=0.286428]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.8919 secs, and comparison 3.51632 sec, and warnIfPerfScore > 0.57, and perfScore=0.322837]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.7688 secs, and comparison 28.4459 sec, and warnIfPerfScore > 2.9, and perfScore=2.22777]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.452 secs, and comparison 29.9782 sec, and warnIfPerfScore > 2.9, and perfScore=2.07433]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 12.4645 secs, and comparison 152.149 sec, and warnIfPerfScore > 24, and perfScore=12.2066]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1283 secs, and comparison 14.5957 sec, and warnIfPerfScore > 1.7, and perfScore=1.20344]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 12.9347 secs, and comparison 12.6052 sec, and warnIfPerfScore > 1.5, and perfScore=0.974525]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.55908 secs, and comparison 17.4201 sec, and warnIfPerfScore > 2.1, and perfScore=1.82236]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 13.941 secs, and comparison 10.9528 sec, and warnIfPerfScore > 1.6, and perfScore=0.785648]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15.3298 secs, and comparison 1.49473 sec, and warnIfPerfScore > 0.23, and perfScore=0.0975047]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 15.5126 secs, and comparison 14.44 sec, and warnIfPerfScore > 1.3, and perfScore=0.930853]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.5212 secs, and comparison 7.28848 sec, and warnIfPerfScore > 1.2, and perfScore=0.692741]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.63431 secs, and comparison 2.33542 sec, and warnIfPerfScore > 0.33, and perfScore=0.242407]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 10.0545 secs, and comparison 46.0934 sec, and warnIfPerfScore > 6, and perfScore=4.58437]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 10.1475 secs, and comparison 6.89152 sec, and warnIfPerfScore > 0.8, and perfScore=0.679137]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.3223 secs, and comparison 16.4359 sec, and warnIfPerfScore > 1.4, and perfScore=1.59226]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.59226}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.0036 secs, and comparison 4.39935 sec, and warnIfPerfScore > 0.65, and perfScore=0.439777]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.8011 secs, and comparison 44.996 sec, and warnIfPerfScore > 4.4, and perfScore=3.81286]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.0871 secs, and comparison 4.64122 sec, and warnIfPerfScore > 0.6, and perfScore=0.460113]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.5051 secs, and comparison 4.64818 sec, and warnIfPerfScore > 0.6, and perfScore=0.442468]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3718 secs, and comparison 4.51047 sec, and warnIfPerfScore > 0.6, and perfScore=0.434879]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.5471 secs, and comparison 8.21734 sec, and warnIfPerfScore > 1.3, and perfScore=0.779107]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.2212 secs, and comparison 12.433 sec, and warnIfPerfScore > 1.3, and perfScore=1.10799]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 67.7878 secs, and comparison 7.71567 sec, and warnIfPerfScore > 0.3, and perfScore=0.113821]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.681 secs, and comparison 18.7416 sec, and warnIfPerfScore > 1.5, and perfScore=1.3699]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.0925 secs, and comparison 4.5818 sec, and warnIfPerfScore > 0.55, and perfScore=0.30358]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 15 secs, and comparison 1.22707 sec, and warnIfPerfScore > 0.1, and perfScore=0.0818048]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.55773 sec, and warnIfPerfScore > 0.5, and perfScore=0.303848]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.2274 secs, and comparison 20.4631 sec, and warnIfPerfScore > 2, and perfScore=1.67355]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.387 secs, and comparison 33.0949 sec, and warnIfPerfScore > 3.6, and perfScore=2.47217]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 49 seconds]]]

Succeeded
