Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 5:21:49 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.6123 secs, and comparison 4.65308 sec, and warnIfPerfScore > 0.65, and perfScore=0.829086]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.49951 secs, and comparison 2.95491 sec, and warnIfPerfScore > 0.5, and perfScore=0.537305]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.39873 secs, and comparison 7.15645 sec, and warnIfPerfScore > 1.05, and perfScore=1.11842]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.0207 secs, and comparison 7.0902 sec, and warnIfPerfScore > 1.15, and perfScore=1.17764]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 4.19084 secs, and comparison 2.37326 sec, and warnIfPerfScore > 0.48, and perfScore=0.566297]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 4.9168 secs, and comparison 2.99646 sec, and warnIfPerfScore > 0.57, and perfScore=0.609433]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 3.63453 secs, and comparison 16.8659 sec, and warnIfPerfScore > 2.9, and perfScore=4.64047]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 4.21883 secs, and comparison 18.3042 sec, and warnIfPerfScore > 2.9, and perfScore=4.33869]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 7.26597 secs, and comparison 54.6866 sec, and warnIfPerfScore > 24, and perfScore=7.52639]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.16472 secs, and comparison 10.6195 sec, and warnIfPerfScore > 1.7, and perfScore=1.72263]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.70675 secs, and comparison 6.41194 sec, and warnIfPerfScore > 1.5, and perfScore=0.956042]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 3.06518 secs, and comparison 12.6054 sec, and warnIfPerfScore > 2.1, and perfScore=4.11245]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.9457 secs, and comparison 3.69969 sec, and warnIfPerfScore > 1.6, and perfScore=0.338005]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.48003 secs, and comparison 4.94012 sec, and warnIfPerfScore > 0.23, and perfScore=1.1027]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.23573 secs, and comparison 4.68374 sec, and warnIfPerfScore > 1.3, and perfScore=1.10577]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.10648 secs, and comparison 7.95806 sec, and warnIfPerfScore > 1.2, and perfScore=2.56176]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 20.5487 secs, and comparison 1.95851 sec, and warnIfPerfScore > 0.33, and perfScore=0.0953106]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.00441 secs, and comparison 41.3571 sec, and warnIfPerfScore > 6, and perfScore=13.7654]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.46754 secs, and comparison 8.78252 sec, and warnIfPerfScore > 0.8, and perfScore=2.53278]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.07918 secs, and comparison 8.75355 sec, and warnIfPerfScore > 1.4, and perfScore=2.84282]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.0358 secs, and comparison 3.7215 sec, and warnIfPerfScore > 0.65, and perfScore=0.176912]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.42192 secs, and comparison 39.3855 sec, and warnIfPerfScore > 4.4, and perfScore=8.90688]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.0237 secs, and comparison 3.76733 sec, and warnIfPerfScore > 0.6, and perfScore=0.26864]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.5182 secs, and comparison 3.76954 sec, and warnIfPerfScore > 0.6, and perfScore=0.259642]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.5504 secs, and comparison 3.77333 sec, and warnIfPerfScore > 0.6, and perfScore=0.259328]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.3197 secs, and comparison 4.97249 sec, and warnIfPerfScore > 1.3, and perfScore=0.347249]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 21.9257 secs, and comparison 10.7727 sec, and warnIfPerfScore > 1.3, and perfScore=0.491326]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 19.1427 secs, and comparison 7.41105 sec, and warnIfPerfScore > 0.3, and perfScore=0.387148]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.71146 secs, and comparison 14.5133 sec, and warnIfPerfScore > 1.5, and perfScore=1.88204]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.66811 secs, and comparison 3.18347 sec, and warnIfPerfScore > 0.55, and perfScore=0.477418]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 15 secs, and comparison 0.931391 sec, and warnIfPerfScore > 0.1, and perfScore=0.0620927]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.21895 sec, and warnIfPerfScore > 0.5, and perfScore=0.214597]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 22 seconds]]]

Succeeded
