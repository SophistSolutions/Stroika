Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 15 17:59:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.52597 secs, and comparison 4.3354 sec, and warnIfPerfScore > 0.65, and perfScore=0.784551]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.55094 secs, and comparison 2.62124 sec, and warnIfPerfScore > 0.5, and perfScore=0.472216]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.64415 secs, and comparison 7.12035 sec, and warnIfPerfScore > 1.05, and perfScore=0.931477]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.39009 secs, and comparison 7.06798 sec, and warnIfPerfScore > 1.15, and perfScore=1.10608]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.65262 secs, and comparison 2.17025 sec, and warnIfPerfScore > 0.48, and perfScore=0.283595]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.63863 secs, and comparison 2.75803 sec, and warnIfPerfScore > 0.57, and perfScore=0.361063]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.87392 secs, and comparison 18.4175 sec, and warnIfPerfScore > 2.9, and perfScore=3.13547]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.2722 secs, and comparison 18.6767 sec, and warnIfPerfScore > 2.9, and perfScore=2.9777]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 5.55007 secs, and comparison 124.382 sec, and warnIfPerfScore > 24, and perfScore=22.4109]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.94532 secs, and comparison 9.88975 sec, and warnIfPerfScore > 1.7, and perfScore=1.99982]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.49326 secs, and comparison 4.94461 sec, and warnIfPerfScore > 1.5, and perfScore=0.900125]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 4.57848 secs, and comparison 11.9242 sec, and warnIfPerfScore > 2.1, and perfScore=2.6044]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 6.08196 secs, and comparison 3.94042 sec, and warnIfPerfScore > 1.6, and perfScore=0.647887]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 6.754 secs, and comparison 0.662971 sec, and warnIfPerfScore > 0.23, and perfScore=0.0981597]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.0268 secs, and comparison 12.0064 sec, and warnIfPerfScore > 1.3, and perfScore=0.998307]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.1598 secs, and comparison 4.9773 sec, and warnIfPerfScore > 1.2, and perfScore=0.609978]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.73019 secs, and comparison 1.78072 sec, and warnIfPerfScore > 0.33, and perfScore=0.230359]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.74304 secs, and comparison 38.8167 sec, and warnIfPerfScore > 6, and perfScore=5.0131]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.77514 secs, and comparison 4.73161 sec, and warnIfPerfScore > 0.8, and perfScore=0.608556]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.74368 secs, and comparison 7.11801 sec, and warnIfPerfScore > 1.4, and perfScore=0.919203]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.69919 secs, and comparison 3.39172 sec, and warnIfPerfScore > 0.65, and perfScore=0.44053]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.20919 secs, and comparison 35.9581 sec, and warnIfPerfScore > 4.4, and perfScore=4.38022]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.55652 secs, and comparison 3.31537 sec, and warnIfPerfScore > 0.6, and perfScore=0.438743]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.60861 secs, and comparison 3.33805 sec, and warnIfPerfScore > 0.6, and perfScore=0.43872]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.64127 secs, and comparison 3.30782 sec, and warnIfPerfScore > 0.6, and perfScore=0.432888]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.65174 secs, and comparison 4.94578 sec, and warnIfPerfScore > 1.3, and perfScore=0.64636]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.19388 secs, and comparison 8.13734 sec, and warnIfPerfScore > 1.3, and perfScore=0.9931]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 34.8491 secs, and comparison 6.37335 sec, and warnIfPerfScore > 0.3, and perfScore=0.182884]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.22479 secs, and comparison 9.02136 sec, and warnIfPerfScore > 1.5, and perfScore=1.72665]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.88007 secs, and comparison 2.68327 sec, and warnIfPerfScore > 0.55, and perfScore=0.456334]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.574935 sec, and warnIfPerfScore > 0.1, and perfScore=0.038329]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.44618 sec, and warnIfPerfScore > 0.5, and perfScore=0.229746]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.95086 secs, and comparison 12.2219 sec, and warnIfPerfScore > 2, and perfScore=2.0538]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.25929 secs, and comparison 13.7376 sec, and warnIfPerfScore > 3.6, and perfScore=1.89242]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 51 seconds]]]

Succeeded
