Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan 16 21:32:27 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.51011 secs, and comparison 4.62493 sec, and warnIfPerfScore > 0.62, and perfScore=0.839354]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.4629 secs, and comparison 2.96865 sec, and warnIfPerfScore > 0.5, and perfScore=0.54342]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.30722 secs, and comparison 7.01782 sec, and warnIfPerfScore > 1.05, and perfScore=1.11267]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 3.65134 secs, and comparison 3.59817 sec, and warnIfPerfScore > 0.48, and perfScore=0.985437]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 4.37225 secs, and comparison 4.25717 sec, and warnIfPerfScore > 0.57, and perfScore=0.97368]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.79185 secs, and comparison 32.1713 sec, and warnIfPerfScore > 2.9, and perfScore=3.65922]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.87383 secs, and comparison 35.427 sec, and warnIfPerfScore > 2.9, and perfScore=3.58797]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	29
	DETAILS:         	[baseline test 12.4669 secs, and comparison 360.183 sec, and warnIfPerfScore > 9.7, and perfScore=28.8912]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.78707 secs, and comparison 10.868 sec, and warnIfPerfScore > 1.6, and perfScore=2.27028]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 23.7588 secs, and comparison 23.8149 sec, and warnIfPerfScore > 1.5, and perfScore=1.00236]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.78816 secs, and comparison 10.3171 sec, and warnIfPerfScore > 2.1, and perfScore=3.70032]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.22797 secs, and comparison 4.48989 sec, and warnIfPerfScore > 1.3, and perfScore=0.720924]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.80664 secs, and comparison 2.74046 sec, and warnIfPerfScore > 0.23, and perfScore=0.402615]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.96337 secs, and comparison 4.59846 sec, and warnIfPerfScore > 1.3, and perfScore=1.16024]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 24.5543 secs, and comparison 10.4345 sec, and warnIfPerfScore > 1.2, and perfScore=0.424958]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.016
	DETAILS:         	[baseline test 97.1875 secs, and comparison 1.54483 sec, and warnIfPerfScore > 0.33, and perfScore=0.0158954]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 23.5599 secs, and comparison 42.7705 sec, and warnIfPerfScore > 6, and perfScore=1.81539]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 48.5107 secs, and comparison 3.7212 sec, and warnIfPerfScore > 0.5, and perfScore=0.0767089]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.4536 secs, and comparison 37.273 sec, and warnIfPerfScore > 4.4, and perfScore=1.58922]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 65.9825 secs, and comparison 3.74787 sec, and warnIfPerfScore > 0.6, and perfScore=0.056801]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.07907 secs, and comparison 13.8657 sec, and warnIfPerfScore > 1.5, and perfScore=1.95869]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.9563 secs, and comparison 2.14234 sec, and warnIfPerfScore > 0.55, and perfScore=0.307972]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.15496 sec, and warnIfPerfScore > 0.25, and perfScore=0.0769973]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.80511 sec, and warnIfPerfScore > 0.5, and perfScore=0.253674]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 12 seconds]]]

Succeeded
