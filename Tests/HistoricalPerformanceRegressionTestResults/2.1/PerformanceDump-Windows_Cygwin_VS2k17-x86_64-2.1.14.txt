Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 18:47:14 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 41.8687 secs, and comparison 6.95247 sec, and warnIfPerfScore > 0.65, and perfScore=0.166054]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 41.4291 secs, and comparison 6.61198 sec, and warnIfPerfScore > 0.5, and perfScore=0.159597]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 17.4829 secs, and comparison 12.7705 sec, and warnIfPerfScore > 1.05, and perfScore=0.730458]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 13.4887 secs, and comparison 12.8 sec, and warnIfPerfScore > 1.15, and perfScore=0.94894]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 32.0928 secs, and comparison 3.43709 sec, and warnIfPerfScore > 0.48, and perfScore=0.107099]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 30.7066 secs, and comparison 4.25084 sec, and warnIfPerfScore > 0.57, and perfScore=0.138434]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.7967 secs, and comparison 32.5181 sec, and warnIfPerfScore > 2.9, and perfScore=1.6426]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.0792 secs, and comparison 34.8457 sec, and warnIfPerfScore > 2.9, and perfScore=1.73541]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 15.1181 secs, and comparison 174.203 sec, and warnIfPerfScore > 24, and perfScore=11.5228]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 20.6426 secs, and comparison 14.0644 sec, and warnIfPerfScore > 1.7, and perfScore=0.68133]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 40.9193 secs, and comparison 39.9753 sec, and warnIfPerfScore > 1.5, and perfScore=0.976932]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.3108 secs, and comparison 16.9815 sec, and warnIfPerfScore > 2.1, and perfScore=1.04112]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 35.0053 secs, and comparison 10.4216 sec, and warnIfPerfScore > 1.6, and perfScore=0.297714]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 36.8041 secs, and comparison 2.403 sec, and warnIfPerfScore > 0.23, and perfScore=0.0652918]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.441 secs, and comparison 22.737 sec, and warnIfPerfScore > 1.3, and perfScore=1.69162]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.2585 secs, and comparison 21.7658 sec, and warnIfPerfScore > 1.2, and perfScore=1.52651]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 22.1972 secs, and comparison 5.58395 sec, and warnIfPerfScore > 0.33, and perfScore=0.251561]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 13.6951 secs, and comparison 56.5707 sec, and warnIfPerfScore > 6, and perfScore=4.13074]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.5444 secs, and comparison 20.8249 sec, and warnIfPerfScore > 0.8, and perfScore=1.53752]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 12.9329 secs, and comparison 54.9089 sec, and warnIfPerfScore > 1.4, and perfScore=4.24566]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 22.0327 secs, and comparison 5.09143 sec, and warnIfPerfScore > 0.65, and perfScore=0.231085]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 24.9488 secs, and comparison 59.7823 sec, and warnIfPerfScore > 4.4, and perfScore=2.3962]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 22.2063 secs, and comparison 5.93932 sec, and warnIfPerfScore > 0.6, and perfScore=0.267461]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.3863 secs, and comparison 5.81978 sec, and warnIfPerfScore > 0.6, and perfScore=0.272126]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 21.6055 secs, and comparison 6.77179 sec, and warnIfPerfScore > 0.6, and perfScore=0.313429]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 21.7816 secs, and comparison 13.8157 sec, and warnIfPerfScore > 1.3, and perfScore=0.634281]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 28.6307 secs, and comparison 22.857 sec, and warnIfPerfScore > 1.3, and perfScore=0.798339]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 108.906 secs, and comparison 8.92882 sec, and warnIfPerfScore > 0.3, and perfScore=0.0819869]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 18.2736 secs, and comparison 23.3966 sec, and warnIfPerfScore > 1.5, and perfScore=1.28035]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 20.0803 secs, and comparison 6.20613 sec, and warnIfPerfScore > 0.55, and perfScore=0.309066]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.98285 sec, and warnIfPerfScore > 0.1, and perfScore=0.13219]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.67717 sec, and warnIfPerfScore > 0.5, and perfScore=0.311811]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.8966 secs, and comparison 22.5441 sec, and warnIfPerfScore > 2, and perfScore=1.13306]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.3942 secs, and comparison 27.4001 sec, and warnIfPerfScore > 3.6, and perfScore=1.22353]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 39 seconds]]]

Succeeded
