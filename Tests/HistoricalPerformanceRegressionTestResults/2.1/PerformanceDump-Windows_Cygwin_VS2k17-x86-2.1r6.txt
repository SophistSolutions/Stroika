Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Mar 25 12:54:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.0837 secs, and comparison 5.30938 sec, and warnIfPerfScore > 0.65, and perfScore=0.4058]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 12.3265 secs, and comparison 3.15492 sec, and warnIfPerfScore > 0.5, and perfScore=0.255946]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 11.937 secs, and comparison 10.8482 sec, and warnIfPerfScore > 1.05, and perfScore=0.908786]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.88353 secs, and comparison 10.2599 sec, and warnIfPerfScore > 1.15, and perfScore=1.15494]
	                 	SharedPtr is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.15 and got 1.15494}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.6524 secs, and comparison 3.3472 sec, and warnIfPerfScore > 0.48, and perfScore=0.287255]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.9086 secs, and comparison 4.27505 sec, and warnIfPerfScore > 0.57, and perfScore=0.358988]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.1108 secs, and comparison 29.991 sec, and warnIfPerfScore > 2.9, and perfScore=2.12539]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.7678 secs, and comparison 32.5255 sec, and warnIfPerfScore > 2.9, and perfScore=2.20245]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 12.7526 secs, and comparison 210.55 sec, and warnIfPerfScore > 24, and perfScore=16.5103]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.3603 secs, and comparison 15.2984 sec, and warnIfPerfScore > 1.7, and perfScore=1.14506]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.6505 secs, and comparison 13.3159 sec, and warnIfPerfScore > 1.5, and perfScore=0.975491]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.3413 secs, and comparison 18.7393 sec, and warnIfPerfScore > 2.1, and perfScore=1.81208]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 15.5616 secs, and comparison 11.8998 sec, and warnIfPerfScore > 1.6, and perfScore=0.76469]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15.6424 secs, and comparison 1.83754 sec, and warnIfPerfScore > 0.23, and perfScore=0.117472]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 16.1853 secs, and comparison 15.2054 sec, and warnIfPerfScore > 1.3, and perfScore=0.939456]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 11.5536 secs, and comparison 8.45117 sec, and warnIfPerfScore > 1.2, and perfScore=0.731477]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.7722 secs, and comparison 2.58966 sec, and warnIfPerfScore > 0.33, and perfScore=0.240402]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 11.1935 secs, and comparison 51.0191 sec, and warnIfPerfScore > 6, and perfScore=4.55791]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.2361 secs, and comparison 7.68235 sec, and warnIfPerfScore > 0.8, and perfScore=0.627844]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.6683 secs, and comparison 16.7247 sec, and warnIfPerfScore > 1.4, and perfScore=1.56769]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.56769}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.6434 secs, and comparison 4.82772 sec, and warnIfPerfScore > 0.65, and perfScore=0.453587]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 12.6472 secs, and comparison 46.6418 sec, and warnIfPerfScore > 4.4, and perfScore=3.6879]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.6882 secs, and comparison 4.42166 sec, and warnIfPerfScore > 0.6, and perfScore=0.413696]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.5422 secs, and comparison 4.60185 sec, and warnIfPerfScore > 0.6, and perfScore=0.436518]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.5001 secs, and comparison 4.95754 sec, and warnIfPerfScore > 0.6, and perfScore=0.472143]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 10.4426 secs, and comparison 9.37921 sec, and warnIfPerfScore > 1.3, and perfScore=0.898167]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.269 secs, and comparison 14.0565 sec, and warnIfPerfScore > 1.3, and perfScore=1.14569]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 74.1894 secs, and comparison 8.27194 sec, and warnIfPerfScore > 0.3, and perfScore=0.111498]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.6672 secs, and comparison 20.3776 sec, and warnIfPerfScore > 1.5, and perfScore=1.38933]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 16.2079 secs, and comparison 5.5915 sec, and warnIfPerfScore > 0.55, and perfScore=0.344985]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 15 secs, and comparison 1.37947 sec, and warnIfPerfScore > 0.1, and perfScore=0.0919647]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.32595 sec, and warnIfPerfScore > 0.5, and perfScore=0.355064]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 14.1467 secs, and comparison 23.4588 sec, and warnIfPerfScore > 2, and perfScore=1.65826]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.1182 secs, and comparison 36.9621 sec, and warnIfPerfScore > 3.6, and perfScore=2.61804]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 43 seconds]]]

Succeeded
