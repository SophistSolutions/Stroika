Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 16 20:59:59 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 12.257 secs, and comparison 6.17181 sec, and warnIfPerfScore > 0.62, and perfScore=0.503531]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.9614 secs, and comparison 4.19336 sec, and warnIfPerfScore > 0.5, and perfScore=0.350574]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 13.6387 secs, and comparison 11.4729 sec, and warnIfPerfScore > 1.05, and perfScore=0.841202]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 82.4071 secs, and comparison 5.15438 sec, and warnIfPerfScore > 0.48, and perfScore=0.0625478]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 77.4155 secs, and comparison 5.37145 sec, and warnIfPerfScore > 0.57, and perfScore=0.0693846]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 96.3946 secs, and comparison 32.5722 sec, and warnIfPerfScore > 2.9, and perfScore=0.337904]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 106.413 secs, and comparison 34.5566 sec, and warnIfPerfScore > 2.9, and perfScore=0.32474]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 42.5679 secs, and comparison 114.273 sec, and warnIfPerfScore > 9.7, and perfScore=2.68448]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 132.545 secs, and comparison 14.8899 sec, and warnIfPerfScore > 1.6, and perfScore=0.112338]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.5171 secs, and comparison 16.543 sec, and warnIfPerfScore > 1.5, and perfScore=1.00157]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 156.654 secs, and comparison 14.6037 sec, and warnIfPerfScore > 2.1, and perfScore=0.093223]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 15.0528 secs, and comparison 23.4392 sec, and warnIfPerfScore > 1.3, and perfScore=1.55714]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.55714}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 16.0367 secs, and comparison 2.18231 sec, and warnIfPerfScore > 0.23, and perfScore=0.136082]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 17.7087 secs, and comparison 16.2693 sec, and warnIfPerfScore > 1.3, and perfScore=0.918717]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 20.585 secs, and comparison 9.45903 sec, and warnIfPerfScore > 1.2, and perfScore=0.459512]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 14.558 secs, and comparison 2.66015 sec, and warnIfPerfScore > 0.33, and perfScore=0.182728]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 19.3996 secs, and comparison 53.8954 sec, and warnIfPerfScore > 6, and perfScore=2.77817]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.5547 secs, and comparison 5.03123 sec, and warnIfPerfScore > 0.5, and perfScore=0.371179]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 20.5778 secs, and comparison 47.5969 sec, and warnIfPerfScore > 4.4, and perfScore=2.31303]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 13.979 secs, and comparison 5.44041 sec, and warnIfPerfScore > 0.6, and perfScore=0.389186]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.7019 secs, and comparison 23.4732 sec, and warnIfPerfScore > 1.5, and perfScore=1.19142]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.3813 secs, and comparison 5.10954 sec, and warnIfPerfScore > 0.55, and perfScore=0.381841]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.05085 sec, and warnIfPerfScore > 0.25, and perfScore=0.136724]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.58947 sec, and warnIfPerfScore > 0.5, and perfScore=0.372631]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.3788 secs, and comparison 22.9249 sec, and warnIfPerfScore > 2, and perfScore=1.59436]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 14.5846 secs, and comparison 211.494 sec, and warnIfPerfScore > 3.1, and perfScore=14.5012]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 14.5012}}}

[[[Tests took: 27 minutes, 47 seconds]]]

Succeeded
