Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Oct 23 22:11:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 3.80316 secs, and comparison 1.46562 sec, and warnIfPerfScore > 0.65, and perfScore=0.385369]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 3.34224 secs, and comparison 3.05477 sec, and warnIfPerfScore > 0.5, and perfScore=0.913989]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.75723 secs, and comparison 7.17161 sec, and warnIfPerfScore > 1.05, and perfScore=2.60102]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 2.28996 secs, and comparison 6.77986 sec, and warnIfPerfScore > 1.15, and perfScore=2.96069]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 3.82137 secs, and comparison 0.963683 sec, and warnIfPerfScore > 0.48, and perfScore=0.252183]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.82515 secs, and comparison 1.08792 sec, and warnIfPerfScore > 0.57, and perfScore=0.225469]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 4.11854 secs, and comparison 12.1125 sec, and warnIfPerfScore > 2.9, and perfScore=2.94096]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 4.7175 secs, and comparison 12.804 sec, and warnIfPerfScore > 2.9, and perfScore=2.71414]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 5.53222 secs, and comparison 48.4583 sec, and warnIfPerfScore > 24, and perfScore=8.75929]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.88778 secs, and comparison 7.97683 sec, and warnIfPerfScore > 1.7, and perfScore=1.35481]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.51572 secs, and comparison 7.29152 sec, and warnIfPerfScore > 1.5, and perfScore=0.970168]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.03077 secs, and comparison 10.0312 sec, and warnIfPerfScore > 2.1, and perfScore=3.30978]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.36479 secs, and comparison 4.30015 sec, and warnIfPerfScore > 1.6, and perfScore=0.98519]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 4.66956 secs, and comparison 1.45839 sec, and warnIfPerfScore > 0.23, and perfScore=0.312319]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.47487 secs, and comparison 4.52331 sec, and warnIfPerfScore > 1.3, and perfScore=1.30172]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.26986 secs, and comparison 8.29619 sec, and warnIfPerfScore > 1.2, and perfScore=2.53717]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 21.4084 secs, and comparison 2.00638 sec, and warnIfPerfScore > 0.33, and perfScore=0.0937194]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.88911 secs, and comparison 42.2614 sec, and warnIfPerfScore > 6, and perfScore=14.6278]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.94084 secs, and comparison 6.45086 sec, and warnIfPerfScore > 0.8, and perfScore=2.19354]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.08265 secs, and comparison 9.33752 sec, and warnIfPerfScore > 1.4, and perfScore=3.02906]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.5566 secs, and comparison 3.75687 sec, and warnIfPerfScore > 0.65, and perfScore=0.182757]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.54776 secs, and comparison 37.9931 sec, and warnIfPerfScore > 4.4, and perfScore=8.35424]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 13.6211 secs, and comparison 3.96064 sec, and warnIfPerfScore > 0.6, and perfScore=0.290773]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.7667 secs, and comparison 5.80191 sec, and warnIfPerfScore > 0.6, and perfScore=0.421446]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.7242 secs, and comparison 3.70753 sec, and warnIfPerfScore > 0.6, and perfScore=0.270145]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.7524 secs, and comparison 4.24086 sec, and warnIfPerfScore > 1.3, and perfScore=0.308372]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 33.5479 secs, and comparison 14.2421 sec, and warnIfPerfScore > 1.3, and perfScore=0.424531]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 33.9134 secs, and comparison 7.50895 sec, and warnIfPerfScore > 0.3, and perfScore=0.221416]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.49411 secs, and comparison 14.9755 sec, and warnIfPerfScore > 1.5, and perfScore=1.99831]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 7.19584 secs, and comparison 2.25131 sec, and warnIfPerfScore > 0.55, and perfScore=0.312863]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.765335 sec, and warnIfPerfScore > 0.1, and perfScore=0.0510223]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.58254 sec, and warnIfPerfScore > 0.5, and perfScore=0.105503]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 34 seconds]]]

Succeeded
