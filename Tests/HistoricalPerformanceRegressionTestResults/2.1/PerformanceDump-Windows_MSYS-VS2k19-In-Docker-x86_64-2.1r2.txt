Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 23:4:21 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.16232 secs, and comparison 4.04775 sec, and warnIfPerfScore > 0.65, and perfScore=0.784095]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 4.7204 secs, and comparison 2.31006 sec, and warnIfPerfScore > 0.5, and perfScore=0.489378]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.00844 secs, and comparison 6.47047 sec, and warnIfPerfScore > 1.05, and perfScore=0.923241]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.89442 secs, and comparison 6.49167 sec, and warnIfPerfScore > 1.15, and perfScore=1.10132]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 5.46441 secs, and comparison 2.25921 sec, and warnIfPerfScore > 0.48, and perfScore=0.41344]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.5451 secs, and comparison 2.77574 sec, and warnIfPerfScore > 0.57, and perfScore=0.500576]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.2828 secs, and comparison 16.5264 sec, and warnIfPerfScore > 2.9, and perfScore=3.12834]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 5.77605 secs, and comparison 16.4821 sec, and warnIfPerfScore > 2.9, and perfScore=2.85353]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.00633 secs, and comparison 124.061 sec, and warnIfPerfScore > 24, and perfScore=24.7808]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.7702 secs, and comparison 9.03534 sec, and warnIfPerfScore > 1.7, and perfScore=1.89412]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.39522 secs, and comparison 4.90006 sec, and warnIfPerfScore > 1.5, and perfScore=0.908223]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 4.39259 secs, and comparison 10.9713 sec, and warnIfPerfScore > 2.1, and perfScore=2.49768]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.1511 secs, and comparison 4.22249 sec, and warnIfPerfScore > 1.6, and perfScore=0.686462]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 6.5072 secs, and comparison 0.610386 sec, and warnIfPerfScore > 0.23, and perfScore=0.0938016]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.0447 secs, and comparison 11.3779 sec, and warnIfPerfScore > 1.3, and perfScore=1.03017]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.64966 secs, and comparison 4.84165 sec, and warnIfPerfScore > 1.2, and perfScore=0.632924]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.26064 secs, and comparison 1.68347 sec, and warnIfPerfScore > 0.33, and perfScore=0.231862]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.34442 secs, and comparison 36.3607 sec, and warnIfPerfScore > 6, and perfScore=4.9508]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.35589 secs, and comparison 4.65657 sec, and warnIfPerfScore > 0.8, and perfScore=0.63304]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.3308 secs, and comparison 6.96847 sec, and warnIfPerfScore > 1.4, and perfScore=0.950574]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.20766 secs, and comparison 3.22043 sec, and warnIfPerfScore > 0.65, and perfScore=0.446807]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 7.96854 secs, and comparison 33.8844 sec, and warnIfPerfScore > 4.4, and perfScore=4.25228]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.12682 secs, and comparison 3.14243 sec, and warnIfPerfScore > 0.6, and perfScore=0.44093]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.12527 secs, and comparison 3.13389 sec, and warnIfPerfScore > 0.6, and perfScore=0.439827]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.12227 secs, and comparison 3.12525 sec, and warnIfPerfScore > 0.6, and perfScore=0.4388]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.17167 secs, and comparison 4.57606 sec, and warnIfPerfScore > 1.3, and perfScore=0.638074]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.5912 secs, and comparison 7.42342 sec, and warnIfPerfScore > 1.3, and perfScore=0.977898]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 32.9733 secs, and comparison 4.69455 sec, and warnIfPerfScore > 0.3, and perfScore=0.142374]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.16852 secs, and comparison 8.53243 sec, and warnIfPerfScore > 1.5, and perfScore=1.65085]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.33003 secs, and comparison 2.52479 sec, and warnIfPerfScore > 0.55, and perfScore=0.473691]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.648473 sec, and warnIfPerfScore > 0.1, and perfScore=0.0432315]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.63968 sec, and warnIfPerfScore > 0.5, and perfScore=0.175978]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.63875 secs, and comparison 7.40296 sec, and warnIfPerfScore > 2, and perfScore=1.31287]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.68624 secs, and comparison 11.2725 sec, and warnIfPerfScore > 3.6, and perfScore=1.68593]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 5 seconds]]]

Succeeded
