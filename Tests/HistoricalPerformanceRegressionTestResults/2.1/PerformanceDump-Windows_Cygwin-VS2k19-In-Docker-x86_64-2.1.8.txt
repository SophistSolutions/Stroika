Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov  2 23:51:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.32053 secs, and comparison 4.46727 sec, and warnIfPerfScore > 0.65, and perfScore=0.839629]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.08152 secs, and comparison 2.54359 sec, and warnIfPerfScore > 0.5, and perfScore=0.500556]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.95344 secs, and comparison 7.16962 sec, and warnIfPerfScore > 1.05, and perfScore=0.901449]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.65711 secs, and comparison 7.32733 sec, and warnIfPerfScore > 1.15, and perfScore=1.10068]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 32.9388 secs, and comparison 2.20438 sec, and warnIfPerfScore > 0.48, and perfScore=0.0669234]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 31.2837 secs, and comparison 2.8057 sec, and warnIfPerfScore > 0.57, and perfScore=0.0896857]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.63237 secs, and comparison 18.8395 sec, and warnIfPerfScore > 2.9, and perfScore=2.84054]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 7.58272 secs, and comparison 18.3632 sec, and warnIfPerfScore > 2.9, and perfScore=2.42171]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.17741 secs, and comparison 144.797 sec, and warnIfPerfScore > 24, and perfScore=23.4398]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.11844 secs, and comparison 9.85614 sec, and warnIfPerfScore > 1.7, and perfScore=1.61089]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 6.17038 secs, and comparison 5.78539 sec, and warnIfPerfScore > 1.5, and perfScore=0.937607]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.61678 secs, and comparison 12.1535 sec, and warnIfPerfScore > 2.1, and perfScore=2.16378]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.1627 secs, and comparison 4.77908 sec, and warnIfPerfScore > 1.6, and perfScore=0.667217]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 7.45647 secs, and comparison 0.686099 sec, and warnIfPerfScore > 0.23, and perfScore=0.0920139]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4115 secs, and comparison 12.5539 sec, and warnIfPerfScore > 1.3, and perfScore=1.01147]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.4024 secs, and comparison 5.2333 sec, and warnIfPerfScore > 1.2, and perfScore=0.622834]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.16972 secs, and comparison 1.9571 sec, and warnIfPerfScore > 0.33, and perfScore=0.239555]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.28058 secs, and comparison 40.0477 sec, and warnIfPerfScore > 6, and perfScore=4.83634]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.22246 secs, and comparison 5.0521 sec, and warnIfPerfScore > 0.8, and perfScore=0.614427]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.10153 secs, and comparison 7.98267 sec, and warnIfPerfScore > 1.4, and perfScore=0.985329]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.05579 secs, and comparison 3.56117 sec, and warnIfPerfScore > 0.65, and perfScore=0.442063]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.74715 secs, and comparison 37.3906 sec, and warnIfPerfScore > 4.4, and perfScore=4.2746]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.96849 secs, and comparison 3.42348 sec, and warnIfPerfScore > 0.6, and perfScore=0.429627]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.90088 secs, and comparison 3.40659 sec, and warnIfPerfScore > 0.6, and perfScore=0.431167]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.94743 secs, and comparison 3.42348 sec, and warnIfPerfScore > 0.6, and perfScore=0.430766]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.17532 secs, and comparison 5.14835 sec, and warnIfPerfScore > 1.3, and perfScore=0.629743]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.5759 secs, and comparison 8.17858 sec, and warnIfPerfScore > 1.3, and perfScore=0.953671]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 39.4227 secs, and comparison 5.32162 sec, and warnIfPerfScore > 0.3, and perfScore=0.134989]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.77208 secs, and comparison 9.2963 sec, and warnIfPerfScore > 1.5, and perfScore=1.61056]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.42987 secs, and comparison 2.87112 sec, and warnIfPerfScore > 0.55, and perfScore=0.446529]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.042
	DETAILS:         	[baseline test 15 secs, and comparison 0.627546 sec, and warnIfPerfScore > 0.1, and perfScore=0.0418364]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.97219 sec, and warnIfPerfScore > 0.5, and perfScore=0.198146]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.83091 secs, and comparison 13.2418 sec, and warnIfPerfScore > 2, and perfScore=1.93851]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.59252 secs, and comparison 14.8885 sec, and warnIfPerfScore > 3.6, and perfScore=1.96094]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 28 seconds]]]

Succeeded
