Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 12 22:8:10 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.65706 secs, and comparison 5.16559 sec, and warnIfPerfScore > 0.62, and perfScore=0.775956]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.66484 secs, and comparison 3.61009 sec, and warnIfPerfScore > 0.5, and perfScore=0.541661]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.02804 secs, and comparison 7.94025 sec, and warnIfPerfScore > 1.05, and perfScore=0.87951]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.9668 secs, and comparison 4.60673 sec, and warnIfPerfScore > 0.48, and perfScore=1.55276]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 3.00474 secs, and comparison 5.07048 sec, and warnIfPerfScore > 0.57, and perfScore=1.68749]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 10.8715 secs, and comparison 31.9985 sec, and warnIfPerfScore > 2.9, and perfScore=2.94333]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.2155 secs, and comparison 33.6829 sec, and warnIfPerfScore > 2.9, and perfScore=2.75738]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 10.6475 secs, and comparison 114.064 sec, and warnIfPerfScore > 9.7, and perfScore=10.7128]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.1464 secs, and comparison 14.4076 sec, and warnIfPerfScore > 1.6, and perfScore=1.76859]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 8.17253 secs, and comparison 6.62125 sec, and warnIfPerfScore > 1.5, and perfScore=0.810183]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.16659 secs, and comparison 13.4808 sec, and warnIfPerfScore > 2.1, and perfScore=1.88107]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.92555 secs, and comparison 4.50153 sec, and warnIfPerfScore > 1.3, and perfScore=0.913915]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.0959 secs, and comparison 2.82554 sec, and warnIfPerfScore > 0.23, and perfScore=0.554473]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.64829 secs, and comparison 6.67259 sec, and warnIfPerfScore > 1.3, and perfScore=1.18135]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 4.71123 secs, and comparison 7.09045 sec, and warnIfPerfScore > 1.2, and perfScore=1.50501]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 3.79714 secs, and comparison 1.00789 sec, and warnIfPerfScore > 0.33, and perfScore=0.265433]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.1071 secs, and comparison 45.2236 sec, and warnIfPerfScore > 6, and perfScore=11.0111]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.64829 secs, and comparison 3.97941 sec, and warnIfPerfScore > 0.5, and perfScore=0.598561]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.23642 secs, and comparison 40.2446 sec, and warnIfPerfScore > 4.4, and perfScore=4.35717]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 3.86571 secs, and comparison 3.42307 sec, and warnIfPerfScore > 0.6, and perfScore=0.885496]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.7169 secs, and comparison 19.7075 sec, and warnIfPerfScore > 1.5, and perfScore=1.68197]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.91519 secs, and comparison 3.77276 sec, and warnIfPerfScore > 0.55, and perfScore=0.380504]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 15 secs, and comparison 1.22391 sec, and warnIfPerfScore > 0.25, and perfScore=0.0815941]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.95735 sec, and warnIfPerfScore > 0.5, and perfScore=0.197157]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 5 seconds]]]

Succeeded
