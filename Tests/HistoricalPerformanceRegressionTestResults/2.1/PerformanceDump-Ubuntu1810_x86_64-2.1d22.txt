Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 23 4:9:6 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.99628 secs, and comparison 4.59961 sec, and warnIfPerfScore > 0.62, and perfScore=0.767078]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.91279 secs, and comparison 3.0391 sec, and warnIfPerfScore > 0.5, and perfScore=0.513988]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.38719 secs, and comparison 6.83394 sec, and warnIfPerfScore > 1.05, and perfScore=1.06994]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.55681 secs, and comparison 3.33065 sec, and warnIfPerfScore > 0.48, and perfScore=0.936414]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.08871 secs, and comparison 3.93206 sec, and warnIfPerfScore > 0.55, and perfScore=0.961688]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 2.99636 secs, and comparison 16.7708 sec, and warnIfPerfScore > 2.9, and perfScore=5.59705]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.60173 secs, and comparison 17.7364 sec, and warnIfPerfScore > 2.9, and perfScore=4.92441]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.83749 secs, and comparison 57.7169 sec, and warnIfPerfScore > 9.7, and perfScore=11.9312]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.5421 secs, and comparison 9.50641 sec, and warnIfPerfScore > 1.6, and perfScore=2.09296]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.59683 secs, and comparison 5.2223 sec, and warnIfPerfScore > 1.5, and perfScore=0.933081]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 2.54943 secs, and comparison 10.3031 sec, and warnIfPerfScore > 2.1, and perfScore=4.04133]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 4.05348 secs, and comparison 3.76664 sec, and warnIfPerfScore > 1.3, and perfScore=0.929236]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.28617 secs, and comparison 1.69283 sec, and warnIfPerfScore > 0.18, and perfScore=0.394951]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.72711 secs, and comparison 4.70065 sec, and warnIfPerfScore > 1.3, and perfScore=1.26121]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.31678 secs, and comparison 6.38643 sec, and warnIfPerfScore > 1.2, and perfScore=1.92549]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 13.1161 secs, and comparison 1.2522 sec, and warnIfPerfScore > 0.33, and perfScore=0.0954707]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.18913 secs, and comparison 42.2956 sec, and warnIfPerfScore > 6, and perfScore=13.2624]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.93621 secs, and comparison 3.62334 sec, and warnIfPerfScore > 0.5, and perfScore=0.405467]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 4.24628 secs, and comparison 38.0278 sec, and warnIfPerfScore > 4.4, and perfScore=8.95556]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.5487 secs, and comparison 3.68875 sec, and warnIfPerfScore > 0.6, and perfScore=0.349686]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.83549 secs, and comparison 10.7457 sec, and warnIfPerfScore > 1.5, and perfScore=1.37141]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.70024 secs, and comparison 2.28833 sec, and warnIfPerfScore > 0.55, and perfScore=0.34153]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.876827 sec, and warnIfPerfScore > 0.25, and perfScore=0.0584551]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85337 sec, and warnIfPerfScore > 0.5, and perfScore=0.256892]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 23 seconds]]]

Succeeded
