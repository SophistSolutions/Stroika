Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov  2 20:43:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 41.4726 secs, and comparison 6.72347 sec, and warnIfPerfScore > 0.65, and perfScore=0.162118]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 41.7191 secs, and comparison 6.41101 sec, and warnIfPerfScore > 0.5, and perfScore=0.153671]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 17.219 secs, and comparison 12.4122 sec, and warnIfPerfScore > 1.05, and perfScore=0.720841]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 13.4291 secs, and comparison 12.6529 sec, and warnIfPerfScore > 1.15, and perfScore=0.942195]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 19.4717 secs, and comparison 3.52395 sec, and warnIfPerfScore > 0.48, and perfScore=0.180978]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 19.4814 secs, and comparison 4.11174 sec, and warnIfPerfScore > 0.57, and perfScore=0.21106]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 18.8553 secs, and comparison 32.4811 sec, and warnIfPerfScore > 2.9, and perfScore=1.72264]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.033 secs, and comparison 34.0857 sec, and warnIfPerfScore > 2.9, and perfScore=1.70147]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.6761 secs, and comparison 190.026 sec, and warnIfPerfScore > 24, and perfScore=12.948]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 19.7906 secs, and comparison 13.6545 sec, and warnIfPerfScore > 1.7, and perfScore=0.68995]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 41.0194 secs, and comparison 40.0796 sec, and warnIfPerfScore > 1.5, and perfScore=0.97709]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 17.1454 secs, and comparison 16.7869 sec, and warnIfPerfScore > 2.1, and perfScore=0.979095]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 34.9981 secs, and comparison 10.1335 sec, and warnIfPerfScore > 1.6, and perfScore=0.289544]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 35.9996 secs, and comparison 2.08306 sec, and warnIfPerfScore > 0.23, and perfScore=0.0578634]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.1974 secs, and comparison 22.0228 sec, and warnIfPerfScore > 1.3, and perfScore=1.66873]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.9677 secs, and comparison 20.9334 sec, and warnIfPerfScore > 1.2, and perfScore=1.4987]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 22.1234 secs, and comparison 5.52021 sec, and warnIfPerfScore > 0.33, and perfScore=0.249519]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.6516 secs, and comparison 53.0022 sec, and warnIfPerfScore > 6, and perfScore=3.8825]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.1932 secs, and comparison 19.2094 sec, and warnIfPerfScore > 0.8, and perfScore=1.456]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 12.9361 secs, and comparison 51.1468 sec, and warnIfPerfScore > 1.4, and perfScore=3.9538]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 21.7578 secs, and comparison 5.0757 sec, and warnIfPerfScore > 0.65, and perfScore=0.233282]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 24.6652 secs, and comparison 58.7847 sec, and warnIfPerfScore > 4.4, and perfScore=2.3833]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 22.1568 secs, and comparison 6.05615 sec, and warnIfPerfScore > 0.6, and perfScore=0.273332]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 22.0416 secs, and comparison 6.24194 sec, and warnIfPerfScore > 0.6, and perfScore=0.283189]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 22.3506 secs, and comparison 6.43185 sec, and warnIfPerfScore > 0.6, and perfScore=0.287771]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 22.4491 secs, and comparison 14.0578 sec, and warnIfPerfScore > 1.3, and perfScore=0.626205]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 29.2052 secs, and comparison 21.7471 sec, and warnIfPerfScore > 1.3, and perfScore=0.74463]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 103.579 secs, and comparison 8.54654 sec, and warnIfPerfScore > 0.3, and perfScore=0.0825124]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.6891 secs, and comparison 21.3189 sec, and warnIfPerfScore > 1.5, and perfScore=1.2052]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 19.809 secs, and comparison 6.28674 sec, and warnIfPerfScore > 0.55, and perfScore=0.317368]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.91421 sec, and warnIfPerfScore > 0.1, and perfScore=0.127614]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.91834 sec, and warnIfPerfScore > 0.5, and perfScore=0.327889]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.5605 secs, and comparison 22.3013 sec, and warnIfPerfScore > 2, and perfScore=1.08467]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 23.4892 secs, and comparison 26.9194 sec, and warnIfPerfScore > 3.6, and perfScore=1.14603]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 4 seconds]]]

Succeeded
