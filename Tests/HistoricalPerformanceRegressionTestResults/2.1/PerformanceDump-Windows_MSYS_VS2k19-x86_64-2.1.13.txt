Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr 14 7:10:33 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 43.6649 secs, and comparison 14.5117 sec, and warnIfPerfScore > 0.65, and perfScore=0.332342]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 42.3674 secs, and comparison 13.7232 sec, and warnIfPerfScore > 0.5, and perfScore=0.323911]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 26.2254 secs, and comparison 20.6837 sec, and warnIfPerfScore > 1.05, and perfScore=0.788691]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 21.7776 secs, and comparison 20.8038 sec, and warnIfPerfScore > 1.15, and perfScore=0.955281]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 31.8518 secs, and comparison 3.34914 sec, and warnIfPerfScore > 0.48, and perfScore=0.105148]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 31.7178 secs, and comparison 3.66327 sec, and warnIfPerfScore > 0.57, and perfScore=0.115496]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.9975 secs, and comparison 34.8538 sec, and warnIfPerfScore > 2.9, and perfScore=1.83466]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 19.8235 secs, and comparison 34.728 sec, and warnIfPerfScore > 2.9, and perfScore=1.75186]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 14.5498 secs, and comparison 151.787 sec, and warnIfPerfScore > 24, and perfScore=10.4322]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 17.1194 secs, and comparison 14.2033 sec, and warnIfPerfScore > 1.7, and perfScore=0.82966]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 48.9985 secs, and comparison 47.6054 sec, and warnIfPerfScore > 1.5, and perfScore=0.97157]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.811 secs, and comparison 17.1089 sec, and warnIfPerfScore > 2.1, and perfScore=1.01772]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 39.0062 secs, and comparison 8.53114 sec, and warnIfPerfScore > 1.6, and perfScore=0.218712]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 41.7545 secs, and comparison 2.12178 sec, and warnIfPerfScore > 0.23, and perfScore=0.0508156]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.6613 secs, and comparison 21.0291 sec, and warnIfPerfScore > 1.3, and perfScore=1.6609]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.6667 secs, and comparison 20.9708 sec, and warnIfPerfScore > 1.2, and perfScore=1.65558]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 19.7733 secs, and comparison 4.95258 sec, and warnIfPerfScore > 0.33, and perfScore=0.250469]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 12.6714 secs, and comparison 51.8793 sec, and warnIfPerfScore > 6, and perfScore=4.09419]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.6005 secs, and comparison 20.4031 sec, and warnIfPerfScore > 0.8, and perfScore=1.61924]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 12.5344 secs, and comparison 39.5006 sec, and warnIfPerfScore > 1.4, and perfScore=3.15138]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 19.6085 secs, and comparison 4.60784 sec, and warnIfPerfScore > 0.65, and perfScore=0.234992]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 22.6283 secs, and comparison 55.6409 sec, and warnIfPerfScore > 4.4, and perfScore=2.45891]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 20.9809 secs, and comparison 5.55815 sec, and warnIfPerfScore > 0.6, and perfScore=0.264915]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 20.0003 secs, and comparison 5.57097 sec, and warnIfPerfScore > 0.6, and perfScore=0.278544]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.8576 secs, and comparison 5.38984 sec, and warnIfPerfScore > 0.6, and perfScore=0.271425]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 20.1858 secs, and comparison 13.4147 sec, and warnIfPerfScore > 1.3, and perfScore=0.664559]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 27.4906 secs, and comparison 20.3599 sec, and warnIfPerfScore > 1.3, and perfScore=0.740614]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 97.089 secs, and comparison 12.3163 sec, and warnIfPerfScore > 0.3, and perfScore=0.126856]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.7829 secs, and comparison 21.3515 sec, and warnIfPerfScore > 1.5, and perfScore=1.20068]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.9023 secs, and comparison 5.20744 sec, and warnIfPerfScore > 0.55, and perfScore=0.349439]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 15 secs, and comparison 1.38507 sec, and warnIfPerfScore > 0.1, and perfScore=0.0923382]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.10381 sec, and warnIfPerfScore > 0.5, and perfScore=0.273587]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.0803 secs, and comparison 19.5805 sec, and warnIfPerfScore > 2, and perfScore=1.08297]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 22.2786 secs, and comparison 27.8487 sec, and warnIfPerfScore > 3.6, and perfScore=1.25002]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 8 seconds]]]

Succeeded
