Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 3:41:37 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 45.4555 secs, and comparison 14.8551 sec, and warnIfPerfScore > 0.65, and perfScore=0.326805]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 44.7477 secs, and comparison 14.4484 sec, and warnIfPerfScore > 0.5, and perfScore=0.322886]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 28.2967 secs, and comparison 22.3361 sec, and warnIfPerfScore > 1.05, and perfScore=0.789355]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 23.1273 secs, and comparison 22.5019 sec, and warnIfPerfScore > 1.15, and perfScore=0.972955]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 24.6843 secs, and comparison 3.71158 sec, and warnIfPerfScore > 0.48, and perfScore=0.150362]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 24.4349 secs, and comparison 3.98039 sec, and warnIfPerfScore > 0.57, and perfScore=0.162898]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 24.1385 secs, and comparison 39.4291 sec, and warnIfPerfScore > 2.9, and perfScore=1.63346]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.5814 secs, and comparison 40.5707 sec, and warnIfPerfScore > 2.9, and perfScore=1.65046]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 17.6987 secs, and comparison 172.182 sec, and warnIfPerfScore > 24, and perfScore=9.72851]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 18.0665 secs, and comparison 16.1995 sec, and warnIfPerfScore > 1.7, and perfScore=0.89666]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 54.6582 secs, and comparison 52.7998 sec, and warnIfPerfScore > 1.5, and perfScore=0.966]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 19.1698 secs, and comparison 18.8121 sec, and warnIfPerfScore > 2.1, and perfScore=0.981345]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 43.2127 secs, and comparison 11.268 sec, and warnIfPerfScore > 1.6, and perfScore=0.260756]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 45.9395 secs, and comparison 2.34954 sec, and warnIfPerfScore > 0.23, and perfScore=0.0511442]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.9688 secs, and comparison 26.3621 sec, and warnIfPerfScore > 1.3, and perfScore=1.55356]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.6662 secs, and comparison 22.7804 sec, and warnIfPerfScore > 1.2, and perfScore=1.36686]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 23.2378 secs, and comparison 6.15232 sec, and warnIfPerfScore > 0.33, and perfScore=0.264755]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 12.3328 secs, and comparison 50.2866 sec, and warnIfPerfScore > 6, and perfScore=4.07749]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.505 secs, and comparison 19.9334 sec, and warnIfPerfScore > 0.8, and perfScore=1.59404]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 12.5878 secs, and comparison 41.0724 sec, and warnIfPerfScore > 1.4, and perfScore=3.26288]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 19.2757 secs, and comparison 5.10196 sec, and warnIfPerfScore > 0.65, and perfScore=0.264683]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 22.6399 secs, and comparison 55.0305 sec, and warnIfPerfScore > 4.4, and perfScore=2.43069]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.7165 secs, and comparison 5.36083 sec, and warnIfPerfScore > 0.6, and perfScore=0.271895]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 20.2348 secs, and comparison 5.67653 sec, and warnIfPerfScore > 0.6, and perfScore=0.280532]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.2291 secs, and comparison 5.57091 sec, and warnIfPerfScore > 0.6, and perfScore=0.289713]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 19.5983 secs, and comparison 12.1181 sec, and warnIfPerfScore > 1.3, and perfScore=0.618325]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 27.762 secs, and comparison 21.5726 sec, and warnIfPerfScore > 1.3, and perfScore=0.777054]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 105.514 secs, and comparison 13.1401 sec, and warnIfPerfScore > 0.3, and perfScore=0.124534]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.8936 secs, and comparison 21.0201 sec, and warnIfPerfScore > 1.5, and perfScore=1.11255]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 17.8321 secs, and comparison 6.28334 sec, and warnIfPerfScore > 0.55, and perfScore=0.352362]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.90315 sec, and warnIfPerfScore > 0.1, and perfScore=0.126877]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.32139 sec, and warnIfPerfScore > 0.5, and perfScore=0.288092]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 22.2689 secs, and comparison 23.0794 sec, and warnIfPerfScore > 2, and perfScore=1.03639]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 22.6687 secs, and comparison 34.2876 sec, and warnIfPerfScore > 3.6, and perfScore=1.51255]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 4 seconds]]]

Succeeded
