Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr 10 12:9:56 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.97609 secs, and comparison 4.20513 sec, and warnIfPerfScore > 0.65, and perfScore=0.602792]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.00491 secs, and comparison 2.79776 sec, and warnIfPerfScore > 0.5, and perfScore=0.399399]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.32597 secs, and comparison 7.26572 sec, and warnIfPerfScore > 1.05, and perfScore=0.872657]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.62505 secs, and comparison 7.25187 sec, and warnIfPerfScore > 1.15, and perfScore=1.09461]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.45077 secs, and comparison 2.20063 sec, and warnIfPerfScore > 0.48, and perfScore=0.232852]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.43964 secs, and comparison 2.68555 sec, and warnIfPerfScore > 0.57, and perfScore=0.284497]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.16305 secs, and comparison 20.2412 sec, and warnIfPerfScore > 2.9, and perfScore=2.47961]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.86209 secs, and comparison 20.9685 sec, and warnIfPerfScore > 2.9, and perfScore=2.36609]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.81324 secs, and comparison 154.675 sec, and warnIfPerfScore > 24, and perfScore=19.7965]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.1238 secs, and comparison 10.5903 sec, and warnIfPerfScore > 1.7, and perfScore=1.4866]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.70575 secs, and comparison 7.58813 sec, and warnIfPerfScore > 1.5, and perfScore=0.984736]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.23508 secs, and comparison 12.3441 sec, and warnIfPerfScore > 2.1, and perfScore=1.97979]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.87709 secs, and comparison 6.37818 sec, and warnIfPerfScore > 1.6, and perfScore=0.718499]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.22527 secs, and comparison 1.29482 sec, and warnIfPerfScore > 0.23, and perfScore=0.140356]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.0513 secs, and comparison 12.3838 sec, and warnIfPerfScore > 1.3, and perfScore=1.02759]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.58759 secs, and comparison 5.48953 sec, and warnIfPerfScore > 1.2, and perfScore=0.572566]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.78125 secs, and comparison 2.11588 sec, and warnIfPerfScore > 0.33, and perfScore=0.240955]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.22802 secs, and comparison 39.6183 sec, and warnIfPerfScore > 6, and perfScore=4.29325]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.17948 secs, and comparison 5.23808 sec, and warnIfPerfScore > 0.8, and perfScore=0.570629]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.20639 secs, and comparison 8.88747 sec, and warnIfPerfScore > 1.4, and perfScore=0.965359]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.74035 secs, and comparison 3.43812 sec, and warnIfPerfScore > 0.65, and perfScore=0.393362]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.60784 secs, and comparison 35.8704 sec, and warnIfPerfScore > 4.4, and perfScore=3.73345]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.587 secs, and comparison 3.53663 sec, and warnIfPerfScore > 0.6, and perfScore=0.411858]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.58053 secs, and comparison 3.44771 sec, and warnIfPerfScore > 0.6, and perfScore=0.401806]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.5724 secs, and comparison 3.43403 sec, and warnIfPerfScore > 0.6, and perfScore=0.400591]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 8.57235 secs, and comparison 4.67208 sec, and warnIfPerfScore > 1.3, and perfScore=0.545017]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.29518 secs, and comparison 8.16805 sec, and warnIfPerfScore > 1.3, and perfScore=0.878741]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.1094 secs, and comparison 5.96082 sec, and warnIfPerfScore > 0.3, and perfScore=0.129276]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.35914 secs, and comparison 11.2781 sec, and warnIfPerfScore > 1.5, and perfScore=1.53253]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.53253}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.19432 secs, and comparison 2.79283 sec, and warnIfPerfScore > 0.55, and perfScore=0.388199]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.758822 sec, and warnIfPerfScore > 0.1, and perfScore=0.0505882]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.84579 sec, and warnIfPerfScore > 0.5, and perfScore=0.189719]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.74339 secs, and comparison 12.8604 sec, and warnIfPerfScore > 2, and perfScore=1.66083]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.93811 secs, and comparison 28.2122 sec, and warnIfPerfScore > 3.6, and perfScore=3.1564]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 52 seconds]]]

Succeeded
