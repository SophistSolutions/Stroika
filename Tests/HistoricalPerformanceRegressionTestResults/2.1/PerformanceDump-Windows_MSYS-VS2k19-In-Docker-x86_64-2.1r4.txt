Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  1 6:57:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.69935 secs, and comparison 4.54679 sec, and warnIfPerfScore > 0.65, and perfScore=0.797774]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.6511 secs, and comparison 2.74159 sec, and warnIfPerfScore > 0.5, and perfScore=0.485143]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.02325 secs, and comparison 7.45089 sec, and warnIfPerfScore > 1.05, and perfScore=0.928662]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.696 secs, and comparison 7.37791 sec, and warnIfPerfScore > 1.15, and perfScore=1.10184]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.34827 secs, and comparison 2.65611 sec, and warnIfPerfScore > 0.48, and perfScore=0.318162]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.06519 secs, and comparison 3.2999 sec, and warnIfPerfScore > 0.57, and perfScore=0.409154]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 6.1475 secs, and comparison 19.6145 sec, and warnIfPerfScore > 2.9, and perfScore=3.19064]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.65875 secs, and comparison 19.6887 sec, and warnIfPerfScore > 2.9, and perfScore=2.95682]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.62544 secs, and comparison 137.739 sec, and warnIfPerfScore > 24, and perfScore=24.4851]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.14412 secs, and comparison 10.4944 sec, and warnIfPerfScore > 1.7, and perfScore=1.70803]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.74238 secs, and comparison 5.74405 sec, and warnIfPerfScore > 1.5, and perfScore=1.00029]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.04375 secs, and comparison 12.6126 sec, and warnIfPerfScore > 2.1, and perfScore=2.50063]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.82492 secs, and comparison 4.71747 sec, and warnIfPerfScore > 1.6, and perfScore=0.691212]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 7.14309 secs, and comparison 0.729079 sec, and warnIfPerfScore > 0.23, and perfScore=0.102068]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9733 secs, and comparison 12.49 sec, and warnIfPerfScore > 1.3, and perfScore=1.04315]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.57414 secs, and comparison 5.16243 sec, and warnIfPerfScore > 1.2, and perfScore=0.602092]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.52587 secs, and comparison 1.79468 sec, and warnIfPerfScore > 0.33, and perfScore=0.238468]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.20834 secs, and comparison 40.0864 sec, and warnIfPerfScore > 6, and perfScore=4.88362]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.24133 secs, and comparison 5.16428 sec, and warnIfPerfScore > 0.8, and perfScore=0.626631]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.23901 secs, and comparison 7.81736 sec, and warnIfPerfScore > 1.4, and perfScore=0.948823]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.42 secs, and comparison 3.53337 sec, and warnIfPerfScore > 0.65, and perfScore=0.476195]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.99078 secs, and comparison 37.5225 sec, and warnIfPerfScore > 4.4, and perfScore=4.17344]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.41482 secs, and comparison 3.46233 sec, and warnIfPerfScore > 0.6, and perfScore=0.466947]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.41263 secs, and comparison 3.4332 sec, and warnIfPerfScore > 0.6, and perfScore=0.463156]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.40552 secs, and comparison 3.46758 sec, and warnIfPerfScore > 0.6, and perfScore=0.468243]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.41133 secs, and comparison 4.93505 sec, and warnIfPerfScore > 1.3, and perfScore=0.665879]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.97509 secs, and comparison 8.09552 sec, and warnIfPerfScore > 1.3, and perfScore=1.0151]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 40.3486 secs, and comparison 5.56118 sec, and warnIfPerfScore > 0.3, and perfScore=0.137828]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.86518 secs, and comparison 10.0169 sec, and warnIfPerfScore > 1.5, and perfScore=1.70786]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.76384 secs, and comparison 2.91286 sec, and warnIfPerfScore > 0.55, and perfScore=0.430652]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.739503 sec, and warnIfPerfScore > 0.1, and perfScore=0.0493002]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.92827 sec, and warnIfPerfScore > 0.5, and perfScore=0.195218]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.97473 secs, and comparison 7.53146 sec, and warnIfPerfScore > 2, and perfScore=1.07982]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.32561 secs, and comparison 12.9023 sec, and warnIfPerfScore > 3.6, and perfScore=1.76126]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 25 seconds]]]

Succeeded
