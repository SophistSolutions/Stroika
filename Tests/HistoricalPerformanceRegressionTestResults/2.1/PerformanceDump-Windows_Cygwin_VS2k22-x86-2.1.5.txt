Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 15 23:30:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.71845 secs, and comparison 4.52825 sec, and warnIfPerfScore > 0.65, and perfScore=0.586679]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.57862 secs, and comparison 2.96746 sec, and warnIfPerfScore > 0.5, and perfScore=0.391557]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.57467 secs, and comparison 8.28413 sec, and warnIfPerfScore > 1.05, and perfScore=0.865213]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.16624 secs, and comparison 7.90584 sec, and warnIfPerfScore > 1.15, and perfScore=1.10321]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.86426 secs, and comparison 2.46291 sec, and warnIfPerfScore > 0.48, and perfScore=0.277847]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.58508 secs, and comparison 2.89463 sec, and warnIfPerfScore > 0.57, and perfScore=0.301994]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.97053 secs, and comparison 23.0806 sec, and warnIfPerfScore > 2.9, and perfScore=2.31488]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.0783 secs, and comparison 25.0637 sec, and warnIfPerfScore > 2.9, and perfScore=2.48689]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.8338 secs, and comparison 155.202 sec, and warnIfPerfScore > 24, and perfScore=17.5691]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.42665 secs, and comparison 11.7468 sec, and warnIfPerfScore > 1.7, and perfScore=1.39401]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.01239 secs, and comparison 8.2175 sec, and warnIfPerfScore > 1.5, and perfScore=0.911801]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.37476 secs, and comparison 14.0614 sec, and warnIfPerfScore > 2.1, and perfScore=1.9067]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.71664 secs, and comparison 7.07386 sec, and warnIfPerfScore > 1.6, and perfScore=0.728015]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.1606 secs, and comparison 1.25908 sec, and warnIfPerfScore > 0.23, and perfScore=0.112814]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 13.3824 secs, and comparison 13.2953 sec, and warnIfPerfScore > 1.3, and perfScore=0.993486]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.9324 secs, and comparison 6.2846 sec, and warnIfPerfScore > 1.2, and perfScore=0.574861]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.666 secs, and comparison 2.19733 sec, and warnIfPerfScore > 0.33, and perfScore=0.206013]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.1613 secs, and comparison 40.7143 sec, and warnIfPerfScore > 6, and perfScore=4.00682]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.2919 secs, and comparison 5.72003 sec, and warnIfPerfScore > 0.8, and perfScore=0.555782]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.0892 secs, and comparison 10.3796 sec, and warnIfPerfScore > 1.4, and perfScore=1.02878]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.65 secs, and comparison 3.59409 sec, and warnIfPerfScore > 0.65, and perfScore=0.337473]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.6388 secs, and comparison 38.3508 sec, and warnIfPerfScore > 4.4, and perfScore=3.60481]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.2496 secs, and comparison 3.63744 sec, and warnIfPerfScore > 0.6, and perfScore=0.354885]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.5686 secs, and comparison 3.68076 sec, and warnIfPerfScore > 0.6, and perfScore=0.348273]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.2411 secs, and comparison 3.83546 sec, and warnIfPerfScore > 0.6, and perfScore=0.374516]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.1336 secs, and comparison 5.35809 sec, and warnIfPerfScore > 1.3, and perfScore=0.528743]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 11.3473 secs, and comparison 8.8503 sec, and warnIfPerfScore > 1.3, and perfScore=0.77995]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 48.2858 secs, and comparison 6.18713 sec, and warnIfPerfScore > 0.3, and perfScore=0.128136]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.78146 secs, and comparison 13.4381 sec, and warnIfPerfScore > 1.5, and perfScore=1.37383]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.32994 secs, and comparison 3.04259 sec, and warnIfPerfScore > 0.55, and perfScore=0.365259]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.780868 sec, and warnIfPerfScore > 0.1, and perfScore=0.0520579]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.54119 sec, and warnIfPerfScore > 0.5, and perfScore=0.236079]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.6251 secs, and comparison 13.7613 sec, and warnIfPerfScore > 2, and perfScore=1.42973]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 10.8782 secs, and comparison 30.2928 sec, and warnIfPerfScore > 3.6, and perfScore=2.78472]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 2 seconds]]]

Succeeded
