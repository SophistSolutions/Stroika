Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 22:34:43 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 3.32595 secs, and comparison 1.38395 sec, and warnIfPerfScore > 0.65, and perfScore=0.416108]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 3.33462 secs, and comparison 3.10939 sec, and warnIfPerfScore > 0.5, and perfScore=0.932457]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.92044 secs, and comparison 6.79126 sec, and warnIfPerfScore > 1.05, and perfScore=2.32542]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.56565 secs, and comparison 6.91985 sec, and warnIfPerfScore > 1.15, and perfScore=2.69711]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.88541 secs, and comparison 0.930669 sec, and warnIfPerfScore > 0.48, and perfScore=0.239529]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.61465 secs, and comparison 1.06647 sec, and warnIfPerfScore > 0.57, and perfScore=0.231105]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 3.51809 secs, and comparison 12.3046 sec, and warnIfPerfScore > 2.9, and perfScore=3.49754]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 4.05367 secs, and comparison 12.4331 sec, and warnIfPerfScore > 2.9, and perfScore=3.06712]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 5.2884 secs, and comparison 44.361 sec, and warnIfPerfScore > 24, and perfScore=8.38836]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.55709 secs, and comparison 7.45467 sec, and warnIfPerfScore > 1.7, and perfScore=1.34147]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.89964 secs, and comparison 6.59532 sec, and warnIfPerfScore > 1.5, and perfScore=0.955894]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.83305 secs, and comparison 9.15479 sec, and warnIfPerfScore > 2.1, and perfScore=3.23143]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 4.1823 secs, and comparison 3.55708 sec, and warnIfPerfScore > 1.6, and perfScore=0.850508]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 4.52209 secs, and comparison 1.39851 sec, and warnIfPerfScore > 0.23, and perfScore=0.309262]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.55087 secs, and comparison 4.74867 sec, and warnIfPerfScore > 1.3, and perfScore=1.33733]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.0122 secs, and comparison 6.59657 sec, and warnIfPerfScore > 1.2, and perfScore=2.18995]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 19.5808 secs, and comparison 1.79454 sec, and warnIfPerfScore > 0.33, and perfScore=0.0916481]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.77852 secs, and comparison 41.3528 sec, and warnIfPerfScore > 6, and perfScore=14.8831]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.80064 secs, and comparison 6.25757 sec, and warnIfPerfScore > 0.8, and perfScore=2.23433]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.79683 secs, and comparison 8.13798 sec, and warnIfPerfScore > 1.4, and perfScore=2.90972]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.2632 secs, and comparison 3.70216 sec, and warnIfPerfScore > 0.65, and perfScore=0.192188]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 4.53091 secs, and comparison 37.2515 sec, and warnIfPerfScore > 4.4, and perfScore=8.22164]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.7084 secs, and comparison 3.69498 sec, and warnIfPerfScore > 0.6, and perfScore=0.269541]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.9894 secs, and comparison 3.76252 sec, and warnIfPerfScore > 0.6, and perfScore=0.268954]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.7876 secs, and comparison 3.69196 sec, and warnIfPerfScore > 0.6, and perfScore=0.267774]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.0152 secs, and comparison 4.19211 sec, and warnIfPerfScore > 1.3, and perfScore=0.299112]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 21.9515 secs, and comparison 10.3163 sec, and warnIfPerfScore > 1.3, and perfScore=0.469956]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.5499 secs, and comparison 5.73094 sec, and warnIfPerfScore > 0.3, and perfScore=0.293145]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.72671 secs, and comparison 14.1776 sec, and warnIfPerfScore > 1.5, and perfScore=1.83488]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.52838 secs, and comparison 2.15748 sec, and warnIfPerfScore > 0.55, and perfScore=0.330477]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 15 secs, and comparison 0.954554 sec, and warnIfPerfScore > 0.1, and perfScore=0.0636369]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42007 sec, and warnIfPerfScore > 0.5, and perfScore=0.0946716]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 31 seconds]]]

Succeeded
