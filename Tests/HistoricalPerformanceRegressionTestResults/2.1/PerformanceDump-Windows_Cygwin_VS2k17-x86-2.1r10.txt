Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu May 12 13:44:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 12.1373 secs, and comparison 5.3214 sec, and warnIfPerfScore > 0.65, and perfScore=0.438432]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.8295 secs, and comparison 3.41511 sec, and warnIfPerfScore > 0.5, and perfScore=0.288694]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.8322 secs, and comparison 10.4053 sec, and warnIfPerfScore > 1.05, and perfScore=0.879405]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.41978 secs, and comparison 10.3902 sec, and warnIfPerfScore > 1.15, and perfScore=1.10302]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.3966 secs, and comparison 3.5167 sec, and warnIfPerfScore > 0.48, and perfScore=0.283683]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.1218 secs, and comparison 3.69846 sec, and warnIfPerfScore > 0.57, and perfScore=0.305109]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.6686 secs, and comparison 30.0211 sec, and warnIfPerfScore > 2.9, and perfScore=2.36972]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.0523 secs, and comparison 31.6905 sec, and warnIfPerfScore > 2.9, and perfScore=2.25517]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 13.2582 secs, and comparison 197.025 sec, and warnIfPerfScore > 24, and perfScore=14.8606]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.0369 secs, and comparison 15.5393 sec, and warnIfPerfScore > 1.7, and perfScore=1.19195]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3598 secs, and comparison 13.6791 sec, and warnIfPerfScore > 1.5, and perfScore=1.0239]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.7272 secs, and comparison 18.6323 sec, and warnIfPerfScore > 2.1, and perfScore=1.73691]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 15.2085 secs, and comparison 11.5151 sec, and warnIfPerfScore > 1.6, and perfScore=0.757152]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.2569 secs, and comparison 1.60619 sec, and warnIfPerfScore > 0.23, and perfScore=0.105276]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 16.4517 secs, and comparison 15.2882 sec, and warnIfPerfScore > 1.3, and perfScore=0.929281]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 11.7205 secs, and comparison 8.37726 sec, and warnIfPerfScore > 1.2, and perfScore=0.714755]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.6873 secs, and comparison 2.71273 sec, and warnIfPerfScore > 0.33, and perfScore=0.253828]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 11.308 secs, and comparison 50.676 sec, and warnIfPerfScore > 6, and perfScore=4.48144]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 11.5447 secs, and comparison 7.62909 sec, and warnIfPerfScore > 0.8, and perfScore=0.660828]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.3367 secs, and comparison 16.4612 sec, and warnIfPerfScore > 1.4, and perfScore=1.45204]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.45204}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.447 secs, and comparison 4.74527 sec, and warnIfPerfScore > 0.65, and perfScore=0.454226]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 12.384 secs, and comparison 47.7315 sec, and warnIfPerfScore > 4.4, and perfScore=3.85431]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.6646 secs, and comparison 4.53361 sec, and warnIfPerfScore > 0.6, and perfScore=0.42511]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.4183 secs, and comparison 4.38696 sec, and warnIfPerfScore > 0.6, and perfScore=0.421082]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.7557 secs, and comparison 4.71872 sec, and warnIfPerfScore > 0.6, and perfScore=0.438718]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.875 secs, and comparison 9.09464 sec, and warnIfPerfScore > 1.3, and perfScore=0.83629]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.6043 secs, and comparison 13.6995 sec, and warnIfPerfScore > 1.3, and perfScore=1.18055]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 72.45 secs, and comparison 8.20176 sec, and warnIfPerfScore > 0.3, and perfScore=0.113206]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.3082 secs, and comparison 20.2358 sec, and warnIfPerfScore > 1.5, and perfScore=1.41428]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 16.3552 secs, and comparison 5.51979 sec, and warnIfPerfScore > 0.55, and perfScore=0.337494]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 15 secs, and comparison 1.25036 sec, and warnIfPerfScore > 0.1, and perfScore=0.0833573]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.08547 sec, and warnIfPerfScore > 0.5, and perfScore=0.339031]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.8939 secs, and comparison 22.9196 sec, and warnIfPerfScore > 2, and perfScore=1.53885]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.839 secs, and comparison 37.3229 sec, and warnIfPerfScore > 3.6, and perfScore=2.51519]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 24 seconds]]]

Succeeded
