Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jul 21 22:45:18 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 7.34927 secs, and comparison 4.21329 sec, and warnIfPerfScore > 0.65, and perfScore=0.573294]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.43275 secs, and comparison 2.70912 sec, and warnIfPerfScore > 0.5, and perfScore=0.364484]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 9.22456 secs, and comparison 7.60412 sec, and warnIfPerfScore > 1.05, and perfScore=0.824334]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.98832 secs, and comparison 7.64376 sec, and warnIfPerfScore > 1.15, and perfScore=1.09379]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.152 secs, and comparison 2.29616 sec, and warnIfPerfScore > 0.48, and perfScore=0.0672335]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 31.902 secs, and comparison 2.75612 sec, and warnIfPerfScore > 0.57, and perfScore=0.0863932]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.39148 secs, and comparison 21.7464 sec, and warnIfPerfScore > 2.9, and perfScore=2.31555]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.43307 secs, and comparison 22.9174 sec, and warnIfPerfScore > 2.9, and perfScore=2.42947]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.90897 secs, and comparison 153.528 sec, and warnIfPerfScore > 24, and perfScore=17.233]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.34397 secs, and comparison 10.8887 sec, and warnIfPerfScore > 1.7, and perfScore=1.30498]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.39215 secs, and comparison 9.62931 sec, and warnIfPerfScore > 1.5, and perfScore=1.02525]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.24358 secs, and comparison 12.5509 sec, and warnIfPerfScore > 2.1, and perfScore=1.5225]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.6502 secs, and comparison 7.07193 sec, and warnIfPerfScore > 1.6, and perfScore=0.664017]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.8382 secs, and comparison 1.4889 sec, and warnIfPerfScore > 0.23, and perfScore=0.137376]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9081 secs, and comparison 13.3932 sec, and warnIfPerfScore > 1.3, and perfScore=1.03758]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.3724 secs, and comparison 6.27041 sec, and warnIfPerfScore > 1.2, and perfScore=0.604531]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 6.68324 secs, and comparison 1.83669 sec, and warnIfPerfScore > 0.33, and perfScore=0.274821]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.0928 secs, and comparison 39.1862 sec, and warnIfPerfScore > 6, and perfScore=3.88259]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.0264 secs, and comparison 5.63831 sec, and warnIfPerfScore > 0.8, and perfScore=0.562346]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.0197 secs, and comparison 10.3453 sec, and warnIfPerfScore > 1.4, and perfScore=1.0325]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.51652 secs, and comparison 3.42533 sec, and warnIfPerfScore > 0.65, and perfScore=0.525639]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 10.1833 secs, and comparison 36.0803 sec, and warnIfPerfScore > 4.4, and perfScore=3.54307]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.4778 secs, and comparison 3.45086 sec, and warnIfPerfScore > 0.6, and perfScore=0.532722]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.47696 secs, and comparison 3.32187 sec, and warnIfPerfScore > 0.6, and perfScore=0.512875]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.5995 secs, and comparison 3.30823 sec, and warnIfPerfScore > 0.6, and perfScore=0.501285]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.53868 secs, and comparison 5.02999 sec, and warnIfPerfScore > 1.3, and perfScore=0.769267]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.08083 secs, and comparison 8.73096 sec, and warnIfPerfScore > 1.3, and perfScore=1.23304]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.7527 secs, and comparison 6.4295 sec, and warnIfPerfScore > 0.3, and perfScore=0.134641]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.37392 secs, and comparison 13.109 sec, and warnIfPerfScore > 1.5, and perfScore=1.39846]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.99797 secs, and comparison 3.08158 sec, and warnIfPerfScore > 0.55, and perfScore=0.385296]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.762164 sec, and warnIfPerfScore > 0.1, and perfScore=0.050811]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.18493 sec, and warnIfPerfScore > 0.5, and perfScore=0.212329]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.93609 secs, and comparison 13.8707 sec, and warnIfPerfScore > 2, and perfScore=1.55221]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 10.4468 secs, and comparison 30.4804 sec, and warnIfPerfScore > 3.6, and perfScore=2.91768]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 5 seconds]]]

Succeeded
