Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jun 25 13:2:2 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.19156 secs, and comparison 4.74487 sec, and warnIfPerfScore > 0.65, and perfScore=0.659783]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.659783}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.164 secs, and comparison 2.92865 sec, and warnIfPerfScore > 0.5, and perfScore=0.358728]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.56315 secs, and comparison 7.89202 sec, and warnIfPerfScore > 1.05, and perfScore=0.825254]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.20683 secs, and comparison 8.02966 sec, and warnIfPerfScore > 1.15, and perfScore=1.11417]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 37.9672 secs, and comparison 2.38409 sec, and warnIfPerfScore > 0.48, and perfScore=0.0627933]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 35.1323 secs, and comparison 3.20076 sec, and warnIfPerfScore > 0.57, and perfScore=0.091106]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.0958 secs, and comparison 25.3708 sec, and warnIfPerfScore > 2.9, and perfScore=2.28652]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.1922 secs, and comparison 27.1004 sec, and warnIfPerfScore > 2.9, and perfScore=2.22277]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 9.46281 secs, and comparison 173.985 sec, and warnIfPerfScore > 24, and perfScore=18.3862]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.84789 secs, and comparison 11.8473 sec, and warnIfPerfScore > 1.7, and perfScore=1.20303]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.5813 secs, and comparison 13.5485 sec, and warnIfPerfScore > 1.5, and perfScore=1.16986]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.6916 secs, and comparison 14.1807 sec, and warnIfPerfScore > 2.1, and perfScore=1.2129]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.2101 secs, and comparison 7.30825 sec, and warnIfPerfScore > 1.6, and perfScore=0.553231]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 11.7094 secs, and comparison 1.80269 sec, and warnIfPerfScore > 0.23, and perfScore=0.153952]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.5215 secs, and comparison 14.7923 sec, and warnIfPerfScore > 1.3, and perfScore=1.01865]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.6024 secs, and comparison 7.90864 sec, and warnIfPerfScore > 1.2, and perfScore=0.681637]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.54996 secs, and comparison 2.10582 sec, and warnIfPerfScore > 0.33, and perfScore=0.278918]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.0265 secs, and comparison 42.8891 sec, and warnIfPerfScore > 6, and perfScore=3.88964]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.3458 secs, and comparison 6.6725 sec, and warnIfPerfScore > 0.8, and perfScore=0.644947]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.8816 secs, and comparison 14.7228 sec, and warnIfPerfScore > 1.4, and perfScore=1.23913]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.28016 secs, and comparison 4.02912 sec, and warnIfPerfScore > 0.65, and perfScore=0.434165]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.0087 secs, and comparison 40.5644 sec, and warnIfPerfScore > 4.4, and perfScore=3.3779]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.49443 secs, and comparison 3.85227 sec, and warnIfPerfScore > 0.6, and perfScore=0.453505]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.17342 secs, and comparison 4.06771 sec, and warnIfPerfScore > 0.6, and perfScore=0.443424]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.04554 secs, and comparison 4.09744 sec, and warnIfPerfScore > 0.6, and perfScore=0.452979]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 8.91913 secs, and comparison 6.08895 sec, and warnIfPerfScore > 1.3, and perfScore=0.682685]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.63427 secs, and comparison 10.3178 sec, and warnIfPerfScore > 1.3, and perfScore=1.19498]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 57.61 secs, and comparison 7.03172 sec, and warnIfPerfScore > 0.3, and perfScore=0.122057]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.7353 secs, and comparison 17.9349 sec, and warnIfPerfScore > 1.5, and perfScore=1.30575]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.55271 secs, and comparison 3.66695 sec, and warnIfPerfScore > 0.55, and perfScore=0.383865]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 15 secs, and comparison 0.987737 sec, and warnIfPerfScore > 0.1, and perfScore=0.0658491]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.50478 sec, and warnIfPerfScore > 0.5, and perfScore=0.233652]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.7347 secs, and comparison 16.3595 sec, and warnIfPerfScore > 2, and perfScore=1.52399]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.2685 secs, and comparison 35.7527 sec, and warnIfPerfScore > 3.6, and perfScore=2.50571]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 26 seconds]]]

Succeeded
