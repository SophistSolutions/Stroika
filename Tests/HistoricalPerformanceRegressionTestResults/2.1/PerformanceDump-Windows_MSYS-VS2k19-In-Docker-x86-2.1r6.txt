Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 27 15:42:59 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.6692 secs, and comparison 4.83731 sec, and warnIfPerfScore > 0.65, and perfScore=0.453391]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.17721 secs, and comparison 3.06656 sec, and warnIfPerfScore > 0.5, and perfScore=0.375013]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.85704 secs, and comparison 8.55534 sec, and warnIfPerfScore > 1.05, and perfScore=0.867942]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.72505 secs, and comparison 8.55631 sec, and warnIfPerfScore > 1.15, and perfScore=1.10761]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 9.44738 secs, and comparison 2.55727 sec, and warnIfPerfScore > 0.48, and perfScore=0.270686]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.29945 secs, and comparison 3.02152 sec, and warnIfPerfScore > 0.57, and perfScore=0.324915]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.85326 secs, and comparison 23.4038 sec, and warnIfPerfScore > 2.9, and perfScore=2.37524]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.93148 secs, and comparison 24.1768 sec, and warnIfPerfScore > 2.9, and perfScore=2.43436]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.64359 secs, and comparison 165.733 sec, and warnIfPerfScore > 24, and perfScore=17.1858]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.33107 secs, and comparison 12.0097 sec, and warnIfPerfScore > 1.7, and perfScore=1.44156]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.20049 secs, and comparison 9.2118 sec, and warnIfPerfScore > 1.5, and perfScore=1.00123]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.13504 secs, and comparison 13.7485 sec, and warnIfPerfScore > 2.1, and perfScore=1.69004]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.4013 secs, and comparison 8.72189 sec, and warnIfPerfScore > 1.6, and perfScore=0.838538]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.5252 secs, and comparison 1.41898 sec, and warnIfPerfScore > 0.23, and perfScore=0.134818]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.5083 secs, and comparison 14.412 sec, and warnIfPerfScore > 1.3, and perfScore=0.993365]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.1683 secs, and comparison 6.13378 sec, and warnIfPerfScore > 1.2, and perfScore=0.549214]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.10639 secs, and comparison 1.71687 sec, and warnIfPerfScore > 0.33, and perfScore=0.241596]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.7644 secs, and comparison 42.8965 sec, and warnIfPerfScore > 6, and perfScore=3.98502]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.7466 secs, and comparison 5.85652 sec, and warnIfPerfScore > 0.8, and perfScore=0.544968]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.7476 secs, and comparison 10.8298 sec, and warnIfPerfScore > 1.4, and perfScore=1.00765]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 7.10313 secs, and comparison 3.78833 sec, and warnIfPerfScore > 0.65, and perfScore=0.533333]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.0075 secs, and comparison 39.9762 sec, and warnIfPerfScore > 4.4, and perfScore=3.63172]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.30264 secs, and comparison 3.72997 sec, and warnIfPerfScore > 0.6, and perfScore=0.51077]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.40268 secs, and comparison 3.752 sec, and warnIfPerfScore > 0.6, and perfScore=0.506844]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.31255 secs, and comparison 3.77442 sec, and warnIfPerfScore > 0.6, and perfScore=0.516157]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 7.3226 secs, and comparison 5.50969 sec, and warnIfPerfScore > 1.3, and perfScore=0.752423]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.02891 secs, and comparison 9.52556 sec, and warnIfPerfScore > 1.3, and perfScore=1.18641]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 53.4597 secs, and comparison 6.73283 sec, and warnIfPerfScore > 0.3, and perfScore=0.125942]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.0366 secs, and comparison 13.8103 sec, and warnIfPerfScore > 1.5, and perfScore=1.376]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.32542 secs, and comparison 3.19103 sec, and warnIfPerfScore > 0.55, and perfScore=0.383287]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 15 secs, and comparison 0.926631 sec, and warnIfPerfScore > 0.1, and perfScore=0.0617754]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.26889 sec, and warnIfPerfScore > 0.5, and perfScore=0.217926]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.57834 secs, and comparison 10.0853 sec, and warnIfPerfScore > 2, and perfScore=1.05292]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 11.2091 secs, and comparison 33.3327 sec, and warnIfPerfScore > 3.6, and perfScore=2.97372]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 17 seconds]]]

Succeeded
