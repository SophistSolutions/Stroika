Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 7:42:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.12677 secs, and comparison 4.29405 sec, and warnIfPerfScore > 0.65, and perfScore=0.602523]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.23093 secs, and comparison 2.83126 sec, and warnIfPerfScore > 0.5, and perfScore=0.391549]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.67165 secs, and comparison 7.57708 sec, and warnIfPerfScore > 1.05, and perfScore=0.873775]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.99523 secs, and comparison 7.59348 sec, and warnIfPerfScore > 1.15, and perfScore=1.08552]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.8985 secs, and comparison 2.27927 sec, and warnIfPerfScore > 0.48, and perfScore=0.28857]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.91924 secs, and comparison 2.74106 sec, and warnIfPerfScore > 0.57, and perfScore=0.346127]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.47543 secs, and comparison 20.9304 sec, and warnIfPerfScore > 2.9, and perfScore=2.46954]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.42072 secs, and comparison 21.4012 sec, and warnIfPerfScore > 2.9, and perfScore=2.54149]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.31157 secs, and comparison 141.829 sec, and warnIfPerfScore > 24, and perfScore=17.064]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.40138 secs, and comparison 11.0031 sec, and warnIfPerfScore > 1.7, and perfScore=1.48663]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.2298 secs, and comparison 8.02801 sec, and warnIfPerfScore > 1.5, and perfScore=0.97548]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.072 secs, and comparison 12.7296 sec, and warnIfPerfScore > 2.1, and perfScore=1.79999]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.19282 secs, and comparison 7.723 sec, and warnIfPerfScore > 1.6, and perfScore=0.840112]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.3486 secs, and comparison 1.348 sec, and warnIfPerfScore > 0.23, and perfScore=0.144193]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.9436 secs, and comparison 12.8488 sec, and warnIfPerfScore > 1.3, and perfScore=0.992674]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.1708 secs, and comparison 5.35217 sec, and warnIfPerfScore > 1.2, and perfScore=0.52623]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.18803 secs, and comparison 1.49177 sec, and warnIfPerfScore > 0.33, and perfScore=0.241073]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.71602 secs, and comparison 39.1202 sec, and warnIfPerfScore > 6, and perfScore=4.02636]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.77307 secs, and comparison 5.15888 sec, and warnIfPerfScore > 0.8, and perfScore=0.527867]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.75247 secs, and comparison 9.46313 sec, and warnIfPerfScore > 1.4, and perfScore=0.970331]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.06809 secs, and comparison 3.39916 sec, and warnIfPerfScore > 0.65, and perfScore=0.560169]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.0458 secs, and comparison 36.8166 sec, and warnIfPerfScore > 4.4, and perfScore=3.66486]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.27825 secs, and comparison 3.43353 sec, and warnIfPerfScore > 0.6, and perfScore=0.546893]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.32964 secs, and comparison 3.36631 sec, and warnIfPerfScore > 0.6, and perfScore=0.531833]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.29861 secs, and comparison 3.41435 sec, and warnIfPerfScore > 0.6, and perfScore=0.54208]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.35995 secs, and comparison 4.7539 sec, and warnIfPerfScore > 1.3, and perfScore=0.747475]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.82604 secs, and comparison 8.39191 sec, and warnIfPerfScore > 1.3, and perfScore=1.2294]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.0686 secs, and comparison 5.92789 sec, and warnIfPerfScore > 0.3, and perfScore=0.128675]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.46985 secs, and comparison 12.2349 sec, and warnIfPerfScore > 1.5, and perfScore=1.44453]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.21386 secs, and comparison 2.89027 sec, and warnIfPerfScore > 0.55, and perfScore=0.400655]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.754366 sec, and warnIfPerfScore > 0.1, and perfScore=0.0502911]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.97511 sec, and warnIfPerfScore > 0.5, and perfScore=0.198341]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.17998 secs, and comparison 8.91832 sec, and warnIfPerfScore > 2, and perfScore=1.09026]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.56723 secs, and comparison 29.5901 sec, and warnIfPerfScore > 3.6, and perfScore=3.09286]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 32 seconds]]]

Succeeded
