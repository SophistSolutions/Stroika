Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jun 17 5::21 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.99354 secs, and comparison 4.77712 sec, and warnIfPerfScore > 0.62, and perfScore=0.797046]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.647 secs, and comparison 3.00227 sec, and warnIfPerfScore > 0.5, and perfScore=0.531657]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.58002 secs, and comparison 7.31165 sec, and warnIfPerfScore > 1.05, and perfScore=1.11119]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.77905 secs, and comparison 3.63036 sec, and warnIfPerfScore > 0.48, and perfScore=0.960653]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.84435 secs, and comparison 4.3355 sec, and warnIfPerfScore > 0.57, and perfScore=0.89496]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 6.75317 secs, and comparison 37.2101 sec, and warnIfPerfScore > 2.9, and perfScore=5.51002]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 7.89986 secs, and comparison 40.3817 sec, and warnIfPerfScore > 2.9, and perfScore=5.11169]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	34
	DETAILS:         	[baseline test 11.5294 secs, and comparison 391.05 sec, and warnIfPerfScore > 9.7, and perfScore=33.9175]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.55436 secs, and comparison 11.8072 sec, and warnIfPerfScore > 1.6, and perfScore=2.12575]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 28.9202 secs, and comparison 28.7392 sec, and warnIfPerfScore > 1.5, and perfScore=0.993738]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 3.91811 secs, and comparison 11.4312 sec, and warnIfPerfScore > 2.1, and perfScore=2.91752]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.41484 secs, and comparison 5.14931 sec, and warnIfPerfScore > 1.3, and perfScore=0.611931]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.50852 secs, and comparison 3.3118 sec, and warnIfPerfScore > 0.23, and perfScore=0.441072]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.55649 secs, and comparison 5.92932 sec, and warnIfPerfScore > 1.3, and perfScore=1.30129]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 29.2616 secs, and comparison 12.7089 sec, and warnIfPerfScore > 1.2, and perfScore=0.43432]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.02
	DETAILS:         	[baseline test 118.768 secs, and comparison 2.43032 sec, and warnIfPerfScore > 0.33, and perfScore=0.0204627]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 26.6967 secs, and comparison 45.2197 sec, and warnIfPerfScore > 6, and perfScore=1.69383]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 59.6675 secs, and comparison 4.09589 sec, and warnIfPerfScore > 0.5, and perfScore=0.0686452]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 28.3864 secs, and comparison 41.1941 sec, and warnIfPerfScore > 4.4, and perfScore=1.45119]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 85.1339 secs, and comparison 4.17658 sec, and warnIfPerfScore > 0.6, and perfScore=0.049059]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.26799 secs, and comparison 14.6498 sec, and warnIfPerfScore > 1.5, and perfScore=1.77187]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.2719 secs, and comparison 2.4819 sec, and warnIfPerfScore > 0.55, and perfScore=0.30004]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 15 secs, and comparison 1.29166 sec, and warnIfPerfScore > 0.25, and perfScore=0.0861109]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.31823 sec, and warnIfPerfScore > 0.5, and perfScore=0.287882]
	                 	Test_Optional_ is FASTER

[[[Tests took: 19 minutes, 29 seconds]]]

Succeeded
