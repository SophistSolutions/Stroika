Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 2:14:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.8312 secs, and comparison 6.15421 sec, and warnIfPerfScore > 0.65, and perfScore=0.568191]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.2009 secs, and comparison 3.71015 sec, and warnIfPerfScore > 0.5, and perfScore=0.331238]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 13.8996 secs, and comparison 11.9845 sec, and warnIfPerfScore > 1.05, and perfScore=0.862221]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.3458 secs, and comparison 12.4782 sec, and warnIfPerfScore > 1.15, and perfScore=1.20611]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.3751 secs, and comparison 4.08408 sec, and warnIfPerfScore > 0.48, and perfScore=0.26563]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.6836 secs, and comparison 4.65821 sec, and warnIfPerfScore > 0.57, and perfScore=0.31724]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.8792 secs, and comparison 34.1147 sec, and warnIfPerfScore > 2.9, and perfScore=2.64883]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.2379 secs, and comparison 35.3385 sec, and warnIfPerfScore > 2.9, and perfScore=2.66949]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 11.0395 secs, and comparison 168.13 sec, and warnIfPerfScore > 24, and perfScore=15.2298]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.8253 secs, and comparison 15.9313 sec, and warnIfPerfScore > 1.7, and perfScore=1.34722]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 11.5285 secs, and comparison 10.8997 sec, and warnIfPerfScore > 1.5, and perfScore=0.945453]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 9.90301 secs, and comparison 21.4101 sec, and warnIfPerfScore > 2.1, and perfScore=2.16198]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 13.0122 secs, and comparison 8.35525 sec, and warnIfPerfScore > 1.6, and perfScore=0.64211]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 13.2951 secs, and comparison 1.55731 sec, and warnIfPerfScore > 0.23, and perfScore=0.117134]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.5422 secs, and comparison 16.1052 sec, and warnIfPerfScore > 1.3, and perfScore=1.03622]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 13.5205 secs, and comparison 10.2143 sec, and warnIfPerfScore > 1.2, and perfScore=0.755466]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15.169 secs, and comparison 3.3604 sec, and warnIfPerfScore > 0.33, and perfScore=0.221531]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 11.3939 secs, and comparison 55.7043 sec, and warnIfPerfScore > 6, and perfScore=4.88898]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.5662 secs, and comparison 9.30265 sec, and warnIfPerfScore > 0.8, and perfScore=0.880414]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.8693 secs, and comparison 17.525 sec, and warnIfPerfScore > 1.4, and perfScore=1.61235]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 16.0918 secs, and comparison 4.94352 sec, and warnIfPerfScore > 0.65, and perfScore=0.307206]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 13.0456 secs, and comparison 54.573 sec, and warnIfPerfScore > 4.4, and perfScore=4.18327]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.7451 secs, and comparison 5.48147 sec, and warnIfPerfScore > 0.6, and perfScore=0.348138]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.5987 secs, and comparison 5.03323 sec, and warnIfPerfScore > 0.6, and perfScore=0.370127]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.4812 secs, and comparison 4.71584 sec, and warnIfPerfScore > 0.6, and perfScore=0.325653]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 13.8223 secs, and comparison 10.3924 sec, and warnIfPerfScore > 1.3, and perfScore=0.751856]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 17.2147 secs, and comparison 13.9744 sec, and warnIfPerfScore > 1.3, and perfScore=0.811774]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 71.0488 secs, and comparison 8.32815 sec, and warnIfPerfScore > 0.3, and perfScore=0.117217]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.1291 secs, and comparison 17.384 sec, and warnIfPerfScore > 1.5, and perfScore=1.71624]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 19.0098 secs, and comparison 5.81775 sec, and warnIfPerfScore > 0.55, and perfScore=0.306039]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.12547 sec, and warnIfPerfScore > 0.1, and perfScore=0.0750315]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.99869 sec, and warnIfPerfScore > 0.5, and perfScore=0.333246]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.3819 secs, and comparison 23.4134 sec, and warnIfPerfScore > 2, and perfScore=1.74964]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.1387 secs, and comparison 23.9281 sec, and warnIfPerfScore > 3.6, and perfScore=1.82119]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 41 seconds]]]

Succeeded
