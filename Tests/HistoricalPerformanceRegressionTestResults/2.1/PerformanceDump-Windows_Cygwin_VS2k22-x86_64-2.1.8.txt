Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov  2 19:13:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.45844 secs, and comparison 4.375 sec, and warnIfPerfScore > 0.65, and perfScore=0.801511]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 5.95319 secs, and comparison 2.5736 sec, and warnIfPerfScore > 0.5, and perfScore=0.432306]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.90126 secs, and comparison 7.91176 sec, and warnIfPerfScore > 1.05, and perfScore=0.888836]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.03997 secs, and comparison 7.83233 sec, and warnIfPerfScore > 1.15, and perfScore=1.11255]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.37344 secs, and comparison 2.48948 sec, and warnIfPerfScore > 0.48, and perfScore=0.297307]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.44575 secs, and comparison 3.00909 sec, and warnIfPerfScore > 0.57, and perfScore=0.356284]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.38919 secs, and comparison 21.4901 sec, and warnIfPerfScore > 2.9, and perfScore=2.56164]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.67186 secs, and comparison 22.0695 sec, and warnIfPerfScore > 2.9, and perfScore=2.54496]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.66164 secs, and comparison 146.07 sec, and warnIfPerfScore > 24, and perfScore=19.065]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.26951 secs, and comparison 10.8676 sec, and warnIfPerfScore > 1.7, and perfScore=1.49496]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.71158 secs, and comparison 7.05364 sec, and warnIfPerfScore > 1.5, and perfScore=0.914681]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.86845 secs, and comparison 13.009 sec, and warnIfPerfScore > 2.1, and perfScore=1.89403]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.0845 secs, and comparison 4.64891 sec, and warnIfPerfScore > 1.6, and perfScore=0.330073]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 14.8444 secs, and comparison 0.842017 sec, and warnIfPerfScore > 0.23, and perfScore=0.0567229]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8588 secs, and comparison 13.2118 sec, and warnIfPerfScore > 1.3, and perfScore=1.02745]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 13.2875 secs, and comparison 6.11008 sec, and warnIfPerfScore > 1.2, and perfScore=0.459836]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.1372 secs, and comparison 2.39086 sec, and warnIfPerfScore > 0.33, and perfScore=0.23585]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 12.5623 secs, and comparison 40.9042 sec, and warnIfPerfScore > 6, and perfScore=3.25611]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 12.7438 secs, and comparison 6.0083 sec, and warnIfPerfScore > 0.8, and perfScore=0.47147]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 12.679 secs, and comparison 8.99207 sec, and warnIfPerfScore > 1.4, and perfScore=0.709209]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.2995 secs, and comparison 3.72528 sec, and warnIfPerfScore > 0.65, and perfScore=0.361694]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 12.9276 secs, and comparison 38.4593 sec, and warnIfPerfScore > 4.4, and perfScore=2.97498]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.0055 secs, and comparison 3.60658 sec, and warnIfPerfScore > 0.6, and perfScore=0.360459]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.0536 secs, and comparison 3.59271 sec, and warnIfPerfScore > 0.6, and perfScore=0.357354]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.90468 secs, and comparison 3.61261 sec, and warnIfPerfScore > 0.6, and perfScore=0.364737]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 10.0939 secs, and comparison 6.17818 sec, and warnIfPerfScore > 1.3, and perfScore=0.612069]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.9135 secs, and comparison 9.58226 sec, and warnIfPerfScore > 1.3, and perfScore=0.878022]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 46.3841 secs, and comparison 7.05738 sec, and warnIfPerfScore > 0.3, and perfScore=0.152151]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.27993 secs, and comparison 11.1491 sec, and warnIfPerfScore > 1.5, and perfScore=1.53148]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.07367 secs, and comparison 3.1794 sec, and warnIfPerfScore > 0.55, and perfScore=0.393799]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.733202 sec, and warnIfPerfScore > 0.1, and perfScore=0.0488801]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.95287 sec, and warnIfPerfScore > 0.5, and perfScore=0.196858]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.39551 secs, and comparison 13.7388 sec, and warnIfPerfScore > 2, and perfScore=1.63644]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.86395 secs, and comparison 16.7948 sec, and warnIfPerfScore > 3.6, and perfScore=1.70264]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 25 seconds]]]

Succeeded
