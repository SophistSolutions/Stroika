Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu May 12 1:51:8 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.89668 secs, and comparison 4.54107 sec, and warnIfPerfScore > 0.65, and perfScore=0.57506]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.66934 secs, and comparison 2.99092 sec, and warnIfPerfScore > 0.5, and perfScore=0.389984]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.16946 secs, and comparison 7.91934 sec, and warnIfPerfScore > 1.05, and perfScore=0.863664]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.31104 secs, and comparison 7.92854 sec, and warnIfPerfScore > 1.15, and perfScore=1.08446]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.29813 secs, and comparison 2.42768 sec, and warnIfPerfScore > 0.48, and perfScore=0.292558]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.66713 secs, and comparison 3.03991 sec, and warnIfPerfScore > 0.57, and perfScore=0.35074]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.9017 secs, and comparison 22.1453 sec, and warnIfPerfScore > 2.9, and perfScore=2.48776]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.8663 secs, and comparison 23.4009 sec, and warnIfPerfScore > 2.9, and perfScore=2.63931]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.20592 secs, and comparison 154.893 sec, and warnIfPerfScore > 24, and perfScore=18.8758]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.23794 secs, and comparison 11.6657 sec, and warnIfPerfScore > 1.7, and perfScore=1.4161]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.39546 secs, and comparison 8.35884 sec, and warnIfPerfScore > 1.5, and perfScore=0.995639]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.4084 secs, and comparison 13.7716 sec, and warnIfPerfScore > 2.1, and perfScore=1.85892]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.39387 secs, and comparison 7.23259 sec, and warnIfPerfScore > 1.6, and perfScore=0.769927]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 9.85515 secs, and comparison 1.485 sec, and warnIfPerfScore > 0.23, and perfScore=0.150683]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0908 secs, and comparison 13.6622 sec, and warnIfPerfScore > 1.3, and perfScore=1.04365]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 10.3158 secs, and comparison 5.97364 sec, and warnIfPerfScore > 1.2, and perfScore=0.579079]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.64942 secs, and comparison 1.60193 sec, and warnIfPerfScore > 0.33, and perfScore=0.240913]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.013 secs, and comparison 41.3675 sec, and warnIfPerfScore > 6, and perfScore=4.13137]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 9.83452 secs, and comparison 5.67638 sec, and warnIfPerfScore > 0.8, and perfScore=0.57719]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.99655 secs, and comparison 9.82845 sec, and warnIfPerfScore > 1.4, and perfScore=0.983185]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.60815 secs, and comparison 3.57206 sec, and warnIfPerfScore > 0.65, and perfScore=0.540554]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.259 secs, and comparison 38.9453 sec, and warnIfPerfScore > 4.4, and perfScore=3.79622]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.65838 secs, and comparison 3.72653 sec, and warnIfPerfScore > 0.6, and perfScore=0.559676]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.82152 secs, and comparison 3.71498 sec, and warnIfPerfScore > 0.6, and perfScore=0.544597]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.80638 secs, and comparison 3.69031 sec, and warnIfPerfScore > 0.6, and perfScore=0.542185]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.71423 secs, and comparison 5.237 sec, and warnIfPerfScore > 1.3, and perfScore=0.779986]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.35604 secs, and comparison 8.9972 sec, and warnIfPerfScore > 1.3, and perfScore=1.2231]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 50.3792 secs, and comparison 6.30966 sec, and warnIfPerfScore > 0.3, and perfScore=0.125243]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.01845 secs, and comparison 13.0506 sec, and warnIfPerfScore > 1.5, and perfScore=1.4471]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.00153 secs, and comparison 3.60314 sec, and warnIfPerfScore > 0.55, and perfScore=0.450307]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.857771 sec, and warnIfPerfScore > 0.1, and perfScore=0.0571847]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.3073 sec, and warnIfPerfScore > 0.5, and perfScore=0.220487]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.8495 secs, and comparison 13.6443 sec, and warnIfPerfScore > 2, and perfScore=1.54181]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.64899 secs, and comparison 30.5242 sec, and warnIfPerfScore > 3.6, and perfScore=3.16346]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 24 seconds]]]

Succeeded
