Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb  4 :29:29 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 42.3839 secs, and comparison 6.86322 sec, and warnIfPerfScore > 0.65, and perfScore=0.16193]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 41.9789 secs, and comparison 6.45591 sec, and warnIfPerfScore > 0.5, and perfScore=0.153789]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 18.8115 secs, and comparison 13.2276 sec, and warnIfPerfScore > 1.05, and perfScore=0.703165]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 13.8703 secs, and comparison 12.9572 sec, and warnIfPerfScore > 1.15, and perfScore=0.934172]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.6284 secs, and comparison 3.71073 sec, and warnIfPerfScore > 0.48, and perfScore=0.179885]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.2766 secs, and comparison 4.02562 sec, and warnIfPerfScore > 0.57, and perfScore=0.198535]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 20.3983 secs, and comparison 32.7964 sec, and warnIfPerfScore > 2.9, and perfScore=1.6078]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 19.4298 secs, and comparison 34.4933 sec, and warnIfPerfScore > 2.9, and perfScore=1.77528]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 14.9694 secs, and comparison 184.55 sec, and warnIfPerfScore > 24, and perfScore=12.3285]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 19.7498 secs, and comparison 14.5736 sec, and warnIfPerfScore > 1.7, and perfScore=0.737912]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 40.256 secs, and comparison 40.4306 sec, and warnIfPerfScore > 1.5, and perfScore=1.00434]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 17.6758 secs, and comparison 17.5872 sec, and warnIfPerfScore > 2.1, and perfScore=0.994988]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 34.5063 secs, and comparison 9.99583 sec, and warnIfPerfScore > 1.6, and perfScore=0.289682]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 36.5012 secs, and comparison 2.07154 sec, and warnIfPerfScore > 0.23, and perfScore=0.0567528]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.7482 secs, and comparison 21.6719 sec, and warnIfPerfScore > 1.3, and perfScore=1.7]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.9755 secs, and comparison 20.7961 sec, and warnIfPerfScore > 1.2, and perfScore=1.48804]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.882 secs, and comparison 5.92035 sec, and warnIfPerfScore > 0.33, and perfScore=0.270559]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 14.0342 secs, and comparison 55.2741 sec, and warnIfPerfScore > 6, and perfScore=3.93854]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.4129 secs, and comparison 19.8563 sec, and warnIfPerfScore > 0.8, and perfScore=1.48038]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 13.5832 secs, and comparison 55.2653 sec, and warnIfPerfScore > 1.4, and perfScore=4.06865]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 22.0649 secs, and comparison 5.17612 sec, and warnIfPerfScore > 0.65, and perfScore=0.234586]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 24.2978 secs, and comparison 57.3868 sec, and warnIfPerfScore > 4.4, and perfScore=2.36181]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 21.3638 secs, and comparison 6.00866 sec, and warnIfPerfScore > 0.6, and perfScore=0.281254]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 21.3396 secs, and comparison 6.12638 sec, and warnIfPerfScore > 0.6, and perfScore=0.28709]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 22.156 secs, and comparison 6.27226 sec, and warnIfPerfScore > 0.6, and perfScore=0.283096]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 22.2046 secs, and comparison 14.227 sec, and warnIfPerfScore > 1.3, and perfScore=0.640722]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 28.8957 secs, and comparison 21.375 sec, and warnIfPerfScore > 1.3, and perfScore=0.739728]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 104.317 secs, and comparison 8.72273 sec, and warnIfPerfScore > 0.3, and perfScore=0.0836173]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.801 secs, and comparison 22.7225 sec, and warnIfPerfScore > 1.5, and perfScore=1.20858]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 19.2425 secs, and comparison 6.30814 sec, and warnIfPerfScore > 0.55, and perfScore=0.327824]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.84672 sec, and warnIfPerfScore > 0.1, and perfScore=0.123115]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.82438 sec, and warnIfPerfScore > 0.5, and perfScore=0.321625]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.8851 secs, and comparison 22.5736 sec, and warnIfPerfScore > 2, and perfScore=1.19531]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.9828 secs, and comparison 26.7998 sec, and warnIfPerfScore > 3.6, and perfScore=1.16608]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 14 seconds]]]

Succeeded
