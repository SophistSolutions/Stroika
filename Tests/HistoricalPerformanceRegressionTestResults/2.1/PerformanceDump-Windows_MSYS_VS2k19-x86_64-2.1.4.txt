Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 19:37:49 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.4586 secs, and comparison 5.51527 sec, and warnIfPerfScore > 0.65, and perfScore=0.481323]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.67913 secs, and comparison 3.52924 sec, and warnIfPerfScore > 0.5, and perfScore=0.406635]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 12.1979 secs, and comparison 10.1102 sec, and warnIfPerfScore > 1.05, and perfScore=0.82885]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.6282 secs, and comparison 10.0869 sec, and warnIfPerfScore > 1.15, and perfScore=0.949072]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.4362 secs, and comparison 3.08061 sec, and warnIfPerfScore > 0.48, and perfScore=0.247713]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.0915 secs, and comparison 3.68569 sec, and warnIfPerfScore > 0.57, and perfScore=0.332299]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.4365 secs, and comparison 28.6539 sec, and warnIfPerfScore > 2.9, and perfScore=2.50549]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.2407 secs, and comparison 28.5943 sec, and warnIfPerfScore > 2.9, and perfScore=2.54383]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 9.69592 secs, and comparison 142.029 sec, and warnIfPerfScore > 24, and perfScore=14.6484]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.87252 secs, and comparison 14.06 sec, and warnIfPerfScore > 1.7, and perfScore=1.58466]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.4887 secs, and comparison 9.9501 sec, and warnIfPerfScore > 1.5, and perfScore=0.948648]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.03209 secs, and comparison 16.1459 sec, and warnIfPerfScore > 2.1, and perfScore=2.01017]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.8318 secs, and comparison 6.86736 sec, and warnIfPerfScore > 1.6, and perfScore=0.633999]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.3562 secs, and comparison 1.2477 sec, and warnIfPerfScore > 0.23, and perfScore=0.109869]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.5332 secs, and comparison 13.5652 sec, and warnIfPerfScore > 1.3, and perfScore=1.08234]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.83837 secs, and comparison 8.12833 sec, and warnIfPerfScore > 1.2, and perfScore=0.826186]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.5399 secs, and comparison 3.1267 sec, and warnIfPerfScore > 0.33, and perfScore=0.230925]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 9.14533 secs, and comparison 47.0661 sec, and warnIfPerfScore > 6, and perfScore=5.14646]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 8.96678 secs, and comparison 7.34397 sec, and warnIfPerfScore > 0.8, and perfScore=0.819019]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.03536 secs, and comparison 12.8089 sec, and warnIfPerfScore > 1.4, and perfScore=1.41764]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.231 secs, and comparison 4.03101 sec, and warnIfPerfScore > 0.65, and perfScore=0.304665]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.67702 secs, and comparison 42.467 sec, and warnIfPerfScore > 4.4, and perfScore=4.38844]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4119 secs, and comparison 4.32486 sec, and warnIfPerfScore > 0.6, and perfScore=0.322464]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.1917 secs, and comparison 4.2006 sec, and warnIfPerfScore > 0.6, and perfScore=0.318426]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.7441 secs, and comparison 3.93368 sec, and warnIfPerfScore > 0.6, and perfScore=0.308667]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 12.7446 secs, and comparison 8.20635 sec, and warnIfPerfScore > 1.3, and perfScore=0.643908]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.9522 secs, and comparison 12.0304 sec, and warnIfPerfScore > 1.3, and perfScore=0.804588]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 60.7828 secs, and comparison 11.0609 sec, and warnIfPerfScore > 0.3, and perfScore=0.181974]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.37736 secs, and comparison 14.1819 sec, and warnIfPerfScore > 1.5, and perfScore=1.51235]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.6583 secs, and comparison 4.46591 sec, and warnIfPerfScore > 0.55, and perfScore=0.383066]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.889782 sec, and warnIfPerfScore > 0.1, and perfScore=0.0593188]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.11665 sec, and warnIfPerfScore > 0.5, and perfScore=0.274443]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.974 secs, and comparison 17.205 sec, and warnIfPerfScore > 2, and perfScore=1.5678]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.7326 secs, and comparison 20.9622 sec, and warnIfPerfScore > 3.6, and perfScore=1.78667]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 36 seconds]]]

Succeeded
