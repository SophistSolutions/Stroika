Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 6:19:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 3.17045 secs, and comparison 1.50372 sec, and warnIfPerfScore > 0.65, and perfScore=0.474291]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 3.33143 secs, and comparison 2.96909 sec, and warnIfPerfScore > 0.5, and perfScore=0.891234]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.58356 secs, and comparison 6.67862 sec, and warnIfPerfScore > 1.05, and perfScore=2.58505]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 2.21951 secs, and comparison 6.62716 sec, and warnIfPerfScore > 1.15, and perfScore=2.98586]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 3.88908 secs, and comparison 1.056 sec, and warnIfPerfScore > 0.48, and perfScore=0.271528]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.50575 secs, and comparison 1.06854 sec, and warnIfPerfScore > 0.57, and perfScore=0.23715]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.48675 secs, and comparison 11.9947 sec, and warnIfPerfScore > 2.9, and perfScore=3.44009]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 3.93567 secs, and comparison 12.4352 sec, and warnIfPerfScore > 2.9, and perfScore=3.15961]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 5.41711 secs, and comparison 43.0883 sec, and warnIfPerfScore > 24, and perfScore=7.9541]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.06542 secs, and comparison 7.40036 sec, and warnIfPerfScore > 1.7, and perfScore=1.46096]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.91282 secs, and comparison 5.60103 sec, and warnIfPerfScore > 1.5, and perfScore=0.94727]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 2.71356 secs, and comparison 9.18272 sec, and warnIfPerfScore > 2.1, and perfScore=3.38402]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 3.91646 secs, and comparison 3.54127 sec, and warnIfPerfScore > 1.6, and perfScore=0.904202]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 4.10772 secs, and comparison 1.33312 sec, and warnIfPerfScore > 0.23, and perfScore=0.324539]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.22674 secs, and comparison 4.42967 sec, and warnIfPerfScore > 1.3, and perfScore=1.3728]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.9222 secs, and comparison 7.07456 sec, and warnIfPerfScore > 1.2, and perfScore=2.42097]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 16.54 secs, and comparison 1.99901 sec, and warnIfPerfScore > 0.33, and perfScore=0.120859]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.77128 secs, and comparison 41.056 sec, and warnIfPerfScore > 6, and perfScore=14.8148]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.82889 secs, and comparison 6.37509 sec, and warnIfPerfScore > 0.8, and perfScore=2.25357]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.78403 secs, and comparison 8.10253 sec, and warnIfPerfScore > 1.4, and perfScore=2.91035]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 16.3991 secs, and comparison 3.70393 sec, and warnIfPerfScore > 0.65, and perfScore=0.225861]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.3981 secs, and comparison 37.5905 sec, and warnIfPerfScore > 4.4, and perfScore=8.54699]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.8685 secs, and comparison 3.73525 sec, and warnIfPerfScore > 0.6, and perfScore=0.314719]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.9198 secs, and comparison 3.72793 sec, and warnIfPerfScore > 0.6, and perfScore=0.312751]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.8764 secs, and comparison 3.73575 sec, and warnIfPerfScore > 0.6, and perfScore=0.314553]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.7579 secs, and comparison 4.2147 sec, and warnIfPerfScore > 1.3, and perfScore=0.358457]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 18.2452 secs, and comparison 10.1662 sec, and warnIfPerfScore > 1.3, and perfScore=0.557198]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.4724 secs, and comparison 5.73139 sec, and warnIfPerfScore > 0.3, and perfScore=0.294334]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.22337 secs, and comparison 13.5304 sec, and warnIfPerfScore > 1.5, and perfScore=1.87315]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.49667 secs, and comparison 2.02564 sec, and warnIfPerfScore > 0.55, and perfScore=0.311797]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.770078 sec, and warnIfPerfScore > 0.1, and perfScore=0.0513386]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.4265 sec, and warnIfPerfScore > 0.5, and perfScore=0.0951003]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 1 second]]]

Succeeded
