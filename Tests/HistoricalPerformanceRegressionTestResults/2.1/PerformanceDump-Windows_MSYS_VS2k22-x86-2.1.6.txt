Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 15 11:5:55 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.96174 secs, and comparison 4.31884 sec, and warnIfPerfScore > 0.65, and perfScore=0.620368]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.21777 secs, and comparison 3.06177 sec, and warnIfPerfScore > 0.5, and perfScore=0.4242]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.85628 secs, and comparison 7.58976 sec, and warnIfPerfScore > 1.05, and perfScore=0.856992]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.91052 secs, and comparison 7.54065 sec, and warnIfPerfScore > 1.15, and perfScore=1.09118]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 34.5129 secs, and comparison 2.29019 sec, and warnIfPerfScore > 0.48, and perfScore=0.0663574]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 32.6873 secs, and comparison 2.83285 sec, and warnIfPerfScore > 0.57, and perfScore=0.0866651]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.20988 secs, and comparison 20.8085 sec, and warnIfPerfScore > 2.9, and perfScore=2.53457]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.52715 secs, and comparison 21.5773 sec, and warnIfPerfScore > 2.9, and perfScore=2.53043]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.97723 secs, and comparison 149.331 sec, and warnIfPerfScore > 24, and perfScore=18.7197]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.29138 secs, and comparison 11.0258 sec, and warnIfPerfScore > 1.7, and perfScore=1.51217]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.95751 secs, and comparison 7.76987 sec, and warnIfPerfScore > 1.5, and perfScore=0.97642]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.61256 secs, and comparison 12.8947 sec, and warnIfPerfScore > 2.1, and perfScore=1.95003]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.9323 secs, and comparison 6.7196 sec, and warnIfPerfScore > 1.6, and perfScore=0.752281]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.45117 secs, and comparison 1.30514 sec, and warnIfPerfScore > 0.23, and perfScore=0.138092]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.7777 secs, and comparison 12.9053 sec, and warnIfPerfScore > 1.3, and perfScore=1.00999]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 9.72948 secs, and comparison 5.61518 sec, and warnIfPerfScore > 1.2, and perfScore=0.57713]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.45485 secs, and comparison 2.2244 sec, and warnIfPerfScore > 0.33, and perfScore=0.235265]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.35524 secs, and comparison 39.5278 sec, and warnIfPerfScore > 6, and perfScore=4.2252]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.4213 secs, and comparison 5.35945 sec, and warnIfPerfScore > 0.8, and perfScore=0.568865]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.4372 secs, and comparison 9.53537 sec, and warnIfPerfScore > 1.4, and perfScore=1.0104]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.4206 secs, and comparison 3.58072 sec, and warnIfPerfScore > 0.65, and perfScore=0.380094]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.77131 secs, and comparison 37.1184 sec, and warnIfPerfScore > 4.4, and perfScore=3.79871]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.18231 secs, and comparison 3.58825 sec, and warnIfPerfScore > 0.6, and perfScore=0.390779]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.1784 secs, and comparison 3.57235 sec, and warnIfPerfScore > 0.6, and perfScore=0.389213]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.25127 secs, and comparison 3.61571 sec, and warnIfPerfScore > 0.6, and perfScore=0.390834]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.25029 secs, and comparison 5.09715 sec, and warnIfPerfScore > 1.3, and perfScore=0.551026]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.85624 secs, and comparison 8.66051 sec, and warnIfPerfScore > 1.3, and perfScore=0.878683]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.5642 secs, and comparison 5.71169 sec, and warnIfPerfScore > 0.3, and perfScore=0.125355]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.34146 secs, and comparison 12.4192 sec, and warnIfPerfScore > 1.5, and perfScore=1.48885]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.32314 secs, and comparison 3.80025 sec, and warnIfPerfScore > 0.55, and perfScore=0.518937]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.798591 sec, and warnIfPerfScore > 0.1, and perfScore=0.0532394]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.3868 sec, and warnIfPerfScore > 0.5, and perfScore=0.225787]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.27949 secs, and comparison 13.1247 sec, and warnIfPerfScore > 2, and perfScore=1.5852]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.04406 secs, and comparison 29.681 sec, and warnIfPerfScore > 3.6, and perfScore=3.28182]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes]]]

Succeeded
