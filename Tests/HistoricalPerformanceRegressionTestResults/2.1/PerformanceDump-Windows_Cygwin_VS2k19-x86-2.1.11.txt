Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 15:44:10 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 51.9401 secs, and comparison 15.3734 sec, and warnIfPerfScore > 0.65, and perfScore=0.295983]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 51.8809 secs, and comparison 16.2075 sec, and warnIfPerfScore > 0.5, and perfScore=0.312398]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 30.2453 secs, and comparison 23.1914 sec, and warnIfPerfScore > 1.05, and perfScore=0.766777]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 23.9985 secs, and comparison 23.3488 sec, and warnIfPerfScore > 1.15, and perfScore=0.972931]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.9107 secs, and comparison 4.01717 sec, and warnIfPerfScore > 0.48, and perfScore=0.183343]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.2454 secs, and comparison 3.91571 sec, and warnIfPerfScore > 0.57, and perfScore=0.184308]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 24.0202 secs, and comparison 39.4888 sec, and warnIfPerfScore > 2.9, and perfScore=1.64398]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 25.6413 secs, and comparison 42.8029 sec, and warnIfPerfScore > 2.9, and perfScore=1.66929]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 20.3916 secs, and comparison 258.416 sec, and warnIfPerfScore > 24, and perfScore=12.6727]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 21.5338 secs, and comparison 17.1823 sec, and warnIfPerfScore > 1.7, and perfScore=0.797921]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 53.9476 secs, and comparison 54.0227 sec, and warnIfPerfScore > 1.5, and perfScore=1.00139]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 21.2382 secs, and comparison 19.5672 sec, and warnIfPerfScore > 2.1, and perfScore=0.921317]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 43.9804 secs, and comparison 14.2278 sec, and warnIfPerfScore > 1.6, and perfScore=0.323503]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 47.7157 secs, and comparison 3.74149 sec, and warnIfPerfScore > 0.23, and perfScore=0.0784122]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.9213 secs, and comparison 26.0839 sec, and warnIfPerfScore > 1.3, and perfScore=1.37855]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.37855}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.8522 secs, and comparison 21.3725 sec, and warnIfPerfScore > 1.2, and perfScore=1.26823]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.26823}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.0285 secs, and comparison 4.60586 sec, and warnIfPerfScore > 0.33, and perfScore=0.328322]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 16.1645 secs, and comparison 54.6679 sec, and warnIfPerfScore > 6, and perfScore=3.38196]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.1025 secs, and comparison 20.4622 sec, and warnIfPerfScore > 0.8, and perfScore=1.27075]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.27075}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 16.8504 secs, and comparison 35.2973 sec, and warnIfPerfScore > 1.4, and perfScore=2.09475]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.09475}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.7113 secs, and comparison 5.10079 sec, and warnIfPerfScore > 0.65, and perfScore=0.372014]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 27.1215 secs, and comparison 62.257 sec, and warnIfPerfScore > 4.4, and perfScore=2.29549]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.7923 secs, and comparison 6.51553 sec, and warnIfPerfScore > 0.6, and perfScore=0.440468]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 14.9627 secs, and comparison 6.25141 sec, and warnIfPerfScore > 0.6, and perfScore=0.417799]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 14.8824 secs, and comparison 5.96196 sec, and warnIfPerfScore > 0.6, and perfScore=0.400605]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.6924 secs, and comparison 14.6068 sec, and warnIfPerfScore > 1.3, and perfScore=0.994174]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 21.6891 secs, and comparison 22.3295 sec, and warnIfPerfScore > 1.3, and perfScore=1.02953]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 113.916 secs, and comparison 15.2991 sec, and warnIfPerfScore > 0.3, and perfScore=0.134302]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 29.6135 secs, and comparison 32.7258 sec, and warnIfPerfScore > 1.5, and perfScore=1.1051]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 19.8999 secs, and comparison 5.8889 sec, and warnIfPerfScore > 0.55, and perfScore=0.295925]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.9882 sec, and warnIfPerfScore > 0.1, and perfScore=0.132546]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.132546}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.69051 sec, and warnIfPerfScore > 0.5, and perfScore=0.312701]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 21.601 secs, and comparison 23.029 sec, and warnIfPerfScore > 2, and perfScore=1.06611]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 25.313 secs, and comparison 46.2829 sec, and warnIfPerfScore > 3.6, and perfScore=1.82842]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 30 minutes, 48 seconds]]]

Succeeded
