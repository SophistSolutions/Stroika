Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 10:54:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.99515 secs, and comparison 4.65959 sec, and warnIfPerfScore > 0.65, and perfScore=0.777226]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.11525 secs, and comparison 3.4383 sec, and warnIfPerfScore > 0.5, and perfScore=0.423684]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 12.4544 secs, and comparison 10.3232 sec, and warnIfPerfScore > 1.05, and perfScore=0.828881]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.4615 secs, and comparison 11.3235 sec, and warnIfPerfScore > 1.15, and perfScore=1.08239]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15.1975 secs, and comparison 3.31732 sec, and warnIfPerfScore > 0.48, and perfScore=0.218281]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.073 secs, and comparison 3.545 sec, and warnIfPerfScore > 0.57, and perfScore=0.235188]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 6.79455 secs, and comparison 31.9235 sec, and warnIfPerfScore > 2.9, and perfScore=4.69841]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.6936 secs, and comparison 24.4936 sec, and warnIfPerfScore > 2.9, and perfScore=1.78869]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 15.036 secs, and comparison 223.373 sec, and warnIfPerfScore > 24, and perfScore=14.8559]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.07656 secs, and comparison 10.7335 sec, and warnIfPerfScore > 1.7, and perfScore=1.76638]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.55155 secs, and comparison 6.32506 sec, and warnIfPerfScore > 1.5, and perfScore=0.965429]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.5951 secs, and comparison 12.5238 sec, and warnIfPerfScore > 2.1, and perfScore=2.23836]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.4389 secs, and comparison 4.11941 sec, and warnIfPerfScore > 1.6, and perfScore=0.394621]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.3311 secs, and comparison 1.42017 sec, and warnIfPerfScore > 0.23, and perfScore=0.137466]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.8525 secs, and comparison 15.2139 sec, and warnIfPerfScore > 1.3, and perfScore=1.09829]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 10.716 secs, and comparison 7.12656 sec, and warnIfPerfScore > 1.2, and perfScore=0.665038]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.84116 secs, and comparison 2.29939 sec, and warnIfPerfScore > 0.33, and perfScore=0.23365]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.67721 secs, and comparison 45.7758 sec, and warnIfPerfScore > 6, and perfScore=4.73027]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 20.9133 secs, and comparison 12.8696 sec, and warnIfPerfScore > 0.8, and perfScore=0.61538]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.733 secs, and comparison 23.4025 sec, and warnIfPerfScore > 1.4, and perfScore=1.18596]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 23.7452 secs, and comparison 5.69772 sec, and warnIfPerfScore > 0.65, and perfScore=0.239953]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 13.0251 secs, and comparison 47.0577 sec, and warnIfPerfScore > 4.4, and perfScore=3.61285]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.6966 secs, and comparison 4.19311 sec, and warnIfPerfScore > 0.6, and perfScore=0.392004]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.0611 secs, and comparison 4.27544 sec, and warnIfPerfScore > 0.6, and perfScore=0.386531]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.1397 secs, and comparison 4.00417 sec, and warnIfPerfScore > 0.6, and perfScore=0.394902]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.0875 secs, and comparison 6.68421 sec, and warnIfPerfScore > 1.3, and perfScore=0.662626]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 11.1964 secs, and comparison 10.9652 sec, and warnIfPerfScore > 1.3, and perfScore=0.979352]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 42.6147 secs, and comparison 5.65863 sec, and warnIfPerfScore > 0.3, and perfScore=0.132786]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.63958 secs, and comparison 10.6015 sec, and warnIfPerfScore > 1.5, and perfScore=1.59672]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.05589 secs, and comparison 2.97166 sec, and warnIfPerfScore > 0.55, and perfScore=0.42116]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.64178 sec, and warnIfPerfScore > 0.1, and perfScore=0.0427854]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.02475 sec, and warnIfPerfScore > 0.5, and perfScore=0.20165]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.28895 secs, and comparison 8.07332 sec, and warnIfPerfScore > 2, and perfScore=1.10761]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.09451 secs, and comparison 15.0289 sec, and warnIfPerfScore > 3.6, and perfScore=1.65252]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 11 seconds]]]

Succeeded
