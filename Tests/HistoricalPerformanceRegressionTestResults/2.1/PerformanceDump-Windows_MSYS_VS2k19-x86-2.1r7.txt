Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr  2 2:28:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.2496 secs, and comparison 6.36001 sec, and warnIfPerfScore > 0.65, and perfScore=0.519199]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.0563 secs, and comparison 4.45671 sec, and warnIfPerfScore > 0.5, and perfScore=0.341344]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 13.6892 secs, and comparison 11.6254 sec, and warnIfPerfScore > 1.05, and perfScore=0.849239]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2254 secs, and comparison 11.5142 sec, and warnIfPerfScore > 1.15, and perfScore=1.02572]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.8546 secs, and comparison 3.76337 sec, and warnIfPerfScore > 0.48, and perfScore=0.271633]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.5541 secs, and comparison 4.45161 sec, and warnIfPerfScore > 0.57, and perfScore=0.328432]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 14.7056 secs, and comparison 34.7256 sec, and warnIfPerfScore > 2.9, and perfScore=2.36139]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.0216 secs, and comparison 35.8684 sec, and warnIfPerfScore > 2.9, and perfScore=2.23875]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 13.8036 secs, and comparison 186.421 sec, and warnIfPerfScore > 24, and perfScore=13.5053]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.3277 secs, and comparison 17.6679 sec, and warnIfPerfScore > 1.7, and perfScore=1.43318]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.2587 secs, and comparison 14.0231 sec, and warnIfPerfScore > 1.5, and perfScore=0.983477]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.1042 secs, and comparison 20.2756 sec, and warnIfPerfScore > 2.1, and perfScore=1.54726]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 14.548 secs, and comparison 10.6969 sec, and warnIfPerfScore > 1.6, and perfScore=0.735284]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15.5068 secs, and comparison 2.1452 sec, and warnIfPerfScore > 0.23, and perfScore=0.138339]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.8695 secs, and comparison 17.0826 sec, and warnIfPerfScore > 1.3, and perfScore=1.01263]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.5669 secs, and comparison 8.12972 sec, and warnIfPerfScore > 1.2, and perfScore=0.702845]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.2175 secs, and comparison 3.26421 sec, and warnIfPerfScore > 0.33, and perfScore=0.290994]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 11.6656 secs, and comparison 50.7424 sec, and warnIfPerfScore > 6, and perfScore=4.34976]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 12.2983 secs, and comparison 9.60742 sec, and warnIfPerfScore > 0.8, and perfScore=0.781201]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.7443 secs, and comparison 17.2755 sec, and warnIfPerfScore > 1.4, and perfScore=1.47098]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.47098}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.6226 secs, and comparison 4.70727 sec, and warnIfPerfScore > 0.65, and perfScore=0.405009]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.2151 secs, and comparison 46.2745 sec, and warnIfPerfScore > 4.4, and perfScore=3.7883]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.6765 secs, and comparison 5.2766 sec, and warnIfPerfScore > 0.6, and perfScore=0.4519]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.2429 secs, and comparison 4.85215 sec, and warnIfPerfScore > 0.6, and perfScore=0.396325]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.6748 secs, and comparison 4.80479 sec, and warnIfPerfScore > 0.6, and perfScore=0.411552]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 11.595 secs, and comparison 8.64796 sec, and warnIfPerfScore > 1.3, and perfScore=0.745833]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 14.3396 secs, and comparison 13.4185 sec, and warnIfPerfScore > 1.3, and perfScore=0.935767]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 77.1717 secs, and comparison 12.7078 sec, and warnIfPerfScore > 0.3, and perfScore=0.164669]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.0499 secs, and comparison 23.2713 sec, and warnIfPerfScore > 1.5, and perfScore=1.44993]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.4283 secs, and comparison 5.3497 sec, and warnIfPerfScore > 0.55, and perfScore=0.325638]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 15 secs, and comparison 1.30486 sec, and warnIfPerfScore > 0.1, and perfScore=0.0869904]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.38256 sec, and warnIfPerfScore > 0.5, and perfScore=0.292171]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.1297 secs, and comparison 19.1702 sec, and warnIfPerfScore > 2, and perfScore=1.35673]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 15.5021 secs, and comparison 38.341 sec, and warnIfPerfScore > 3.6, and perfScore=2.47328]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 17 seconds]]]

Succeeded
