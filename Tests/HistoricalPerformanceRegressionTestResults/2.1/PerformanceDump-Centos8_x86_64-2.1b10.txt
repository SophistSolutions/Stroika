Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 20 22:49:47 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.40855 secs, and comparison 5.17005 sec, and warnIfPerfScore > 0.62, and perfScore=0.69785]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.18772 secs, and comparison 4.19119 sec, and warnIfPerfScore > 0.5, and perfScore=0.583105]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.48943 secs, and comparison 7.68127 sec, and warnIfPerfScore > 1.05, and perfScore=1.02562]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.18048 secs, and comparison 4.14089 sec, and warnIfPerfScore > 0.48, and perfScore=0.576687]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.91537 secs, and comparison 5.26976 sec, and warnIfPerfScore > 0.57, and perfScore=1.0721]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 4.12889 secs, and comparison 26.8354 sec, and warnIfPerfScore > 2.9, and perfScore=6.49942]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 6.88399 secs, and comparison 28.3175 sec, and warnIfPerfScore > 2.9, and perfScore=4.11353]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.5895 secs, and comparison 105.047 sec, and warnIfPerfScore > 9.7, and perfScore=12.2297]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.2992 secs, and comparison 13.4049 sec, and warnIfPerfScore > 1.6, and perfScore=1.30154]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.19407 secs, and comparison 9.11264 sec, and warnIfPerfScore > 1.5, and perfScore=0.991143]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 4.72474 secs, and comparison 13.2545 sec, and warnIfPerfScore > 2.1, and perfScore=2.80534]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.21557 secs, and comparison 5.46716 sec, and warnIfPerfScore > 1.3, and perfScore=1.04824]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.23317 secs, and comparison 2.81157 sec, and warnIfPerfScore > 0.23, and perfScore=0.341494]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.57077 secs, and comparison 6.77809 sec, and warnIfPerfScore > 1.3, and perfScore=1.21672]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.64681 secs, and comparison 10.7929 sec, and warnIfPerfScore > 1.2, and perfScore=1.91132]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.081
	DETAILS:         	[baseline test 24.7392 secs, and comparison 2.00951 sec, and warnIfPerfScore > 0.33, and perfScore=0.0812279]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.99733 secs, and comparison 44.862 sec, and warnIfPerfScore > 6, and perfScore=11.223]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.1074 secs, and comparison 4.1515 sec, and warnIfPerfScore > 0.5, and perfScore=0.257739]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 6.81681 secs, and comparison 40.5808 sec, and warnIfPerfScore > 4.4, and perfScore=5.95305]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.9446 secs, and comparison 4.20232 sec, and warnIfPerfScore > 0.6, and perfScore=0.263558]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.6237 secs, and comparison 13.0837 sec, and warnIfPerfScore > 1.5, and perfScore=1.51717]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.98289 secs, and comparison 3.11561 sec, and warnIfPerfScore > 0.55, and perfScore=0.346838]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 15 secs, and comparison 1.35714 sec, and warnIfPerfScore > 0.25, and perfScore=0.090476]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.40167 sec, and warnIfPerfScore > 0.5, and perfScore=0.293445]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 15 seconds]]]

Succeeded
