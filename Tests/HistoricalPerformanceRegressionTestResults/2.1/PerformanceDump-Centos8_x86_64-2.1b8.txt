Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 22 18:27:57 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 14.3094 secs, and comparison 10.4365 sec, and warnIfPerfScore > 0.62, and perfScore=0.729347]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15.2775 secs, and comparison 7.75751 sec, and warnIfPerfScore > 0.5, and perfScore=0.507773]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.7232 secs, and comparison 15.4081 sec, and warnIfPerfScore > 1.05, and perfScore=0.979961]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.9547 secs, and comparison 8.85894 sec, and warnIfPerfScore > 0.48, and perfScore=0.741041]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 15.8038 secs, and comparison 10.0525 sec, and warnIfPerfScore > 0.57, and perfScore=0.636081]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 11.3921 secs, and comparison 50.2449 sec, and warnIfPerfScore > 2.9, and perfScore=4.41049]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 11.7189 secs, and comparison 49.5055 sec, and warnIfPerfScore > 2.9, and perfScore=4.22442]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 12.5986 secs, and comparison 200.355 sec, and warnIfPerfScore > 9.7, and perfScore=15.9029]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 16.9956 secs, and comparison 26.116 sec, and warnIfPerfScore > 1.6, and perfScore=1.53663]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 21.1283 secs, and comparison 19.1151 sec, and warnIfPerfScore > 1.5, and perfScore=0.904714]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 9.06716 secs, and comparison 25.6461 sec, and warnIfPerfScore > 2.1, and perfScore=2.82846]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.49037 secs, and comparison 7.73667 sec, and warnIfPerfScore > 1.3, and perfScore=0.911229]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.10856 secs, and comparison 2.77445 sec, and warnIfPerfScore > 0.23, and perfScore=0.304598]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.6173 secs, and comparison 7.08778 sec, and warnIfPerfScore > 1.3, and perfScore=1.0711]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.9793 secs, and comparison 11.1583 sec, and warnIfPerfScore > 1.2, and perfScore=1.86615]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 25.1193 secs, and comparison 2.6568 sec, and warnIfPerfScore > 0.33, and perfScore=0.105767]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 6.00525 secs, and comparison 44.3351 sec, and warnIfPerfScore > 6, and perfScore=7.38273]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 17.7859 secs, and comparison 4.61296 sec, and warnIfPerfScore > 0.5, and perfScore=0.259361]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.31122 secs, and comparison 39.8884 sec, and warnIfPerfScore > 4.4, and perfScore=4.79934]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 20.0287 secs, and comparison 4.37576 sec, and warnIfPerfScore > 0.6, and perfScore=0.218474]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.3076 secs, and comparison 15.786 sec, and warnIfPerfScore > 1.5, and perfScore=1.28262]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.54559 secs, and comparison 3.15361 sec, and warnIfPerfScore > 0.55, and perfScore=0.330374]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.70445 sec, and warnIfPerfScore > 0.25, and perfScore=0.11363]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.32443 sec, and warnIfPerfScore > 0.5, and perfScore=0.288295]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 11 seconds]]]

Succeeded
