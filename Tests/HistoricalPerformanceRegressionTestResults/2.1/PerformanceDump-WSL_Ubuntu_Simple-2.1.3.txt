Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 9:8:23 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.67983 secs, and comparison 5.34123 sec, and warnIfPerfScore > 0.65, and perfScore=0.799605]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.54095 secs, and comparison 5.15006 sec, and warnIfPerfScore > 0.5, and perfScore=0.787356]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.18236 secs, and comparison 9.03017 sec, and warnIfPerfScore > 1.05, and perfScore=1.46064]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.03275 secs, and comparison 7.60143 sec, and warnIfPerfScore > 1.15, and perfScore=0.841542]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.56851 secs, and comparison 2.17 sec, and warnIfPerfScore > 0.48, and perfScore=0.389691]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.6608 secs, and comparison 5.20803 sec, and warnIfPerfScore > 0.57, and perfScore=1.42265]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 2.70094 secs, and comparison 27.3616 sec, and warnIfPerfScore > 2.9, and perfScore=10.1304]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 4.40283 secs, and comparison 26.7444 sec, and warnIfPerfScore > 2.9, and perfScore=6.07437]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 4.55216 secs, and comparison 78.102 sec, and warnIfPerfScore > 24, and perfScore=17.1571]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.03516 secs, and comparison 15.876 sec, and warnIfPerfScore > 1.7, and perfScore=2.63059]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 4.68974 secs, and comparison 4.35786 sec, and warnIfPerfScore > 1.5, and perfScore=0.929231]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 2.46369 secs, and comparison 18.2988 sec, and warnIfPerfScore > 2.1, and perfScore=7.42741]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 4.2209 secs, and comparison 2.69789 sec, and warnIfPerfScore > 1.6, and perfScore=0.639174]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.63022 secs, and comparison 3.89831 sec, and warnIfPerfScore > 0.23, and perfScore=1.07385]
	                 	StringBuilder is ***SLOWER***

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.86497 secs, and comparison 3.59815 sec, and warnIfPerfScore > 1.3, and perfScore=1.25591]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.95259 secs, and comparison 8.85173 sec, and warnIfPerfScore > 1.2, and perfScore=2.23948]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.3265 secs, and comparison 4.60162 sec, and warnIfPerfScore > 0.33, and perfScore=0.321196]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.623 secs, and comparison 40.3872 sec, and warnIfPerfScore > 6, and perfScore=15.3973]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.49112 secs, and comparison 5.0056 sec, and warnIfPerfScore > 0.8, and perfScore=2.00937]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.54659 secs, and comparison 5.9986 sec, and warnIfPerfScore > 1.4, and perfScore=2.35555]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.5645 secs, and comparison 3.4835 sec, and warnIfPerfScore > 0.65, and perfScore=0.329736]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.60806 secs, and comparison 37.7645 sec, and warnIfPerfScore > 4.4, and perfScore=10.4667]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.6595 secs, and comparison 4.88402 sec, and warnIfPerfScore > 0.6, and perfScore=0.333164]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.4673 secs, and comparison 4.76122 sec, and warnIfPerfScore > 0.6, and perfScore=0.329102]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.4967 secs, and comparison 4.91238 sec, and warnIfPerfScore > 0.6, and perfScore=0.338861]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 14.0203 secs, and comparison 5.5031 sec, and warnIfPerfScore > 1.3, and perfScore=0.39251]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.6755 secs, and comparison 12.8036 sec, and warnIfPerfScore > 1.3, and perfScore=1.01011]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 23.2333 secs, and comparison 5.95747 sec, and warnIfPerfScore > 0.3, and perfScore=0.256419]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 5.19147 secs, and comparison 20.1373 sec, and warnIfPerfScore > 1.5, and perfScore=3.87891]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 17.3337 secs, and comparison 4.09524 sec, and warnIfPerfScore > 0.55, and perfScore=0.236258]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 15 secs, and comparison 1.27206 sec, and warnIfPerfScore > 0.1, and perfScore=0.0848039]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.72201 sec, and warnIfPerfScore > 0.5, and perfScore=0.314801]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 9 seconds]]]

Succeeded
