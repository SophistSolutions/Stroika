Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 31 15:40:45 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.80703 secs, and comparison 5.19137 sec, and warnIfPerfScore > 0.62, and perfScore=0.762648]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.52115 secs, and comparison 3.64294 sec, and warnIfPerfScore > 0.5, and perfScore=0.558634]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.81765 secs, and comparison 7.76371 sec, and warnIfPerfScore > 1.05, and perfScore=0.9931]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.64862 secs, and comparison 3.92137 sec, and warnIfPerfScore > 0.48, and perfScore=0.51269]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.35163 secs, and comparison 4.82091 sec, and warnIfPerfScore > 0.57, and perfScore=0.577242]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.42116 secs, and comparison 17.7028 sec, and warnIfPerfScore > 2.9, and perfScore=2.75694]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 5.89289 secs, and comparison 20.2974 sec, and warnIfPerfScore > 2.9, and perfScore=3.44439]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 5.554 secs, and comparison 67.29 sec, and warnIfPerfScore > 9.7, and perfScore=12.1156]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.28826 secs, and comparison 11.081 sec, and warnIfPerfScore > 1.6, and perfScore=1.76217]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.84936 secs, and comparison 8.47103 sec, and warnIfPerfScore > 1.5, and perfScore=1.0792]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 4.09999 secs, and comparison 11.5645 sec, and warnIfPerfScore > 2.1, and perfScore=2.8206]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.09544 secs, and comparison 5.10125 sec, and warnIfPerfScore > 1.3, and perfScore=0.630139]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 5.17274 secs, and comparison 1.84365 sec, and warnIfPerfScore > 0.23, and perfScore=0.356416]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.24697 secs, and comparison 8.13687 sec, and warnIfPerfScore > 1.3, and perfScore=1.55077]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.96947 secs, and comparison 9.28732 sec, and warnIfPerfScore > 1.2, and perfScore=1.5558]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 18.224 secs, and comparison 1.98031 sec, and warnIfPerfScore > 0.33, and perfScore=0.108665]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.76949 secs, and comparison 43.3579 sec, and warnIfPerfScore > 6, and perfScore=11.5023]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.51 secs, and comparison 4.00425 sec, and warnIfPerfScore > 0.5, and perfScore=0.296392]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 6.45493 secs, and comparison 40.0389 sec, and warnIfPerfScore > 4.4, and perfScore=6.20284]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.9747 secs, and comparison 4.29537 sec, and warnIfPerfScore > 0.6, and perfScore=0.268886]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 8.87516 secs, and comparison 18.5529 sec, and warnIfPerfScore > 1.5, and perfScore=2.09042]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.9785 secs, and comparison 2.96794 sec, and warnIfPerfScore > 0.55, and perfScore=0.247772]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 15 secs, and comparison 1.32262 sec, and warnIfPerfScore > 0.25, and perfScore=0.0881744]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.22417 sec, and warnIfPerfScore > 0.5, and perfScore=0.281611]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 11 seconds]]]

Succeeded
