Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 14 16:56:3 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.85914 secs, and comparison 5.03695 sec, and warnIfPerfScore > 0.65, and perfScore=0.510892]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.73056 secs, and comparison 3.35681 sec, and warnIfPerfScore > 0.5, and perfScore=0.344977]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.0263 secs, and comparison 9.1704 sec, and warnIfPerfScore > 1.05, and perfScore=0.831683]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.39847 secs, and comparison 9.19203 sec, and warnIfPerfScore > 1.15, and perfScore=1.09449]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.8416 secs, and comparison 3.19767 sec, and warnIfPerfScore > 0.48, and perfScore=0.294944]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.871 secs, and comparison 3.68398 sec, and warnIfPerfScore > 0.57, and perfScore=0.338881]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.1117 secs, and comparison 27.602 sec, and warnIfPerfScore > 2.9, and perfScore=2.27895]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.5922 secs, and comparison 29.1924 sec, and warnIfPerfScore > 2.9, and perfScore=2.31829]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 11.9413 secs, and comparison 157.791 sec, and warnIfPerfScore > 24, and perfScore=13.214]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.2749 secs, and comparison 13.9116 sec, and warnIfPerfScore > 1.7, and perfScore=1.35395]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 12.0807 secs, and comparison 11.6935 sec, and warnIfPerfScore > 1.5, and perfScore=0.967947]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.34915 secs, and comparison 16.005 sec, and warnIfPerfScore > 2.1, and perfScore=1.71192]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 12.7384 secs, and comparison 9.67728 sec, and warnIfPerfScore > 1.6, and perfScore=0.759694]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 13.3299 secs, and comparison 1.86165 sec, and warnIfPerfScore > 0.23, and perfScore=0.13966]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.742 secs, and comparison 13.2152 sec, and warnIfPerfScore > 1.3, and perfScore=1.03714]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 10.1279 secs, and comparison 7.74338 sec, and warnIfPerfScore > 1.2, and perfScore=0.764557]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.81405 secs, and comparison 2.40478 sec, and warnIfPerfScore > 0.33, and perfScore=0.245035]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.76542 secs, and comparison 42.3458 sec, and warnIfPerfScore > 6, and perfScore=4.3363]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.70719 secs, and comparison 6.94621 sec, and warnIfPerfScore > 0.8, and perfScore=0.715574]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.6705 secs, and comparison 13.0011 sec, and warnIfPerfScore > 1.4, and perfScore=1.3444]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.66523 secs, and comparison 3.97294 sec, and warnIfPerfScore > 0.65, and perfScore=0.411055]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.7998 secs, and comparison 39.2947 sec, and warnIfPerfScore > 4.4, and perfScore=3.63845]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.8018 secs, and comparison 4.09246 sec, and warnIfPerfScore > 0.6, and perfScore=0.417522]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.88444 secs, and comparison 4.00961 sec, and warnIfPerfScore > 0.6, and perfScore=0.405648]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.79599 secs, and comparison 4.0247 sec, and warnIfPerfScore > 0.6, and perfScore=0.410852]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.99222 secs, and comparison 7.42683 sec, and warnIfPerfScore > 1.3, and perfScore=0.743261]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.9486 secs, and comparison 11.5908 sec, and warnIfPerfScore > 1.3, and perfScore=1.05865]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 60.7705 secs, and comparison 9.91462 sec, and warnIfPerfScore > 0.3, and perfScore=0.163149]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.4708 secs, and comparison 17.2954 sec, and warnIfPerfScore > 1.5, and perfScore=1.38687]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.695 secs, and comparison 4.31111 sec, and warnIfPerfScore > 0.55, and perfScore=0.314796]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 15 secs, and comparison 1.19787 sec, and warnIfPerfScore > 0.1, and perfScore=0.0798581]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.63754 sec, and warnIfPerfScore > 0.5, and perfScore=0.242503]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.1782 secs, and comparison 16.1755 sec, and warnIfPerfScore > 2, and perfScore=1.44706]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.0307 secs, and comparison 32.3182 sec, and warnIfPerfScore > 3.6, and perfScore=2.68631]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 48 seconds]]]

Succeeded
