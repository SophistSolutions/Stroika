Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov  4 20:46:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 3.27633 secs, and comparison 1.51595 sec, and warnIfPerfScore > 0.65, and perfScore=0.462698]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.39279 secs, and comparison 3.47957 sec, and warnIfPerfScore > 0.5, and perfScore=1.02558]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.59175 secs, and comparison 7.10607 sec, and warnIfPerfScore > 1.05, and perfScore=2.7418]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.47729 secs, and comparison 6.71336 sec, and warnIfPerfScore > 1.15, and perfScore=2.70997]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.51062 secs, and comparison 1.1535 sec, and warnIfPerfScore > 0.48, and perfScore=0.25573]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 5.08689 secs, and comparison 1.18434 sec, and warnIfPerfScore > 0.57, and perfScore=0.232823]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.24026 secs, and comparison 12.8231 sec, and warnIfPerfScore > 2.9, and perfScore=3.02414]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 4.72541 secs, and comparison 13.7237 sec, and warnIfPerfScore > 2.9, and perfScore=2.90424]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 6.37452 secs, and comparison 47.9761 sec, and warnIfPerfScore > 24, and perfScore=7.52624]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.55547 secs, and comparison 7.45977 sec, and warnIfPerfScore > 1.7, and perfScore=1.34278]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.8155 secs, and comparison 6.65463 sec, and warnIfPerfScore > 1.5, and perfScore=0.976396]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.17353 secs, and comparison 9.51443 sec, and warnIfPerfScore > 2.1, and perfScore=2.99806]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.44737 secs, and comparison 4.60275 sec, and warnIfPerfScore > 1.6, and perfScore=1.03494]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.67842 secs, and comparison 1.55161 sec, and warnIfPerfScore > 0.23, and perfScore=0.331652]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.48401 secs, and comparison 5.00768 sec, and warnIfPerfScore > 1.3, and perfScore=1.43733]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.2892 secs, and comparison 6.85829 sec, and warnIfPerfScore > 1.2, and perfScore=2.08509]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 21.7839 secs, and comparison 2.21535 sec, and warnIfPerfScore > 0.33, and perfScore=0.101697]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.26408 secs, and comparison 42.1609 sec, and warnIfPerfScore > 6, and perfScore=12.9166]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.24327 secs, and comparison 6.17802 sec, and warnIfPerfScore > 0.8, and perfScore=1.90487]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.1516 secs, and comparison 8.76802 sec, and warnIfPerfScore > 1.4, and perfScore=2.78209]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.556 secs, and comparison 3.9164 sec, and warnIfPerfScore > 0.65, and perfScore=0.181685]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 4.72642 secs, and comparison 38.465 sec, and warnIfPerfScore > 4.4, and perfScore=8.1383]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.5302 secs, and comparison 3.94409 sec, and warnIfPerfScore > 0.6, and perfScore=0.271441]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.545 secs, and comparison 3.89637 sec, and warnIfPerfScore > 0.6, and perfScore=0.267884]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.6843 secs, and comparison 3.92977 sec, and warnIfPerfScore > 0.6, and perfScore=0.267618]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.6436 secs, and comparison 4.33706 sec, and warnIfPerfScore > 1.3, and perfScore=0.296174]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 21.9142 secs, and comparison 10.3088 sec, and warnIfPerfScore > 1.3, and perfScore=0.470415]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 20.2912 secs, and comparison 6.11868 sec, and warnIfPerfScore > 0.3, and perfScore=0.301544]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.77485 secs, and comparison 15.0583 sec, and warnIfPerfScore > 1.5, and perfScore=1.9368]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.72357 secs, and comparison 2.18555 sec, and warnIfPerfScore > 0.55, and perfScore=0.325058]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.789834 sec, and warnIfPerfScore > 0.1, and perfScore=0.0526556]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.5618 sec, and warnIfPerfScore > 0.5, and perfScore=0.10412]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 57 seconds]]]

Succeeded
