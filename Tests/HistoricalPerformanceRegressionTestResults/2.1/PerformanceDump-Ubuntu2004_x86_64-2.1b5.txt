Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 11 23:22:46 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.4596 secs, and comparison 4.70257 sec, and warnIfPerfScore > 0.62, and perfScore=0.86134]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.50851 secs, and comparison 2.99505 sec, and warnIfPerfScore > 0.5, and perfScore=0.543713]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.50017 secs, and comparison 6.94155 sec, and warnIfPerfScore > 1.05, and perfScore=1.0679]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 3.90771 secs, and comparison 3.53724 sec, and warnIfPerfScore > 0.48, and perfScore=0.905196]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.61898 secs, and comparison 4.18418 sec, and warnIfPerfScore > 0.57, and perfScore=0.905866]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 3.30451 secs, and comparison 20.0335 sec, and warnIfPerfScore > 2.9, and perfScore=6.06246]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 4.02284 secs, and comparison 21.3072 sec, and warnIfPerfScore > 2.9, and perfScore=5.29655]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 5.40458 secs, and comparison 63.6831 sec, and warnIfPerfScore > 9.7, and perfScore=11.7832]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.98557 secs, and comparison 10.4945 sec, and warnIfPerfScore > 1.6, and perfScore=2.10498]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.89337 secs, and comparison 5.73788 sec, and warnIfPerfScore > 1.5, and perfScore=0.973616]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.86429 secs, and comparison 10.4876 sec, and warnIfPerfScore > 2.1, and perfScore=3.66151]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 4.24517 secs, and comparison 3.54619 sec, and warnIfPerfScore > 1.3, and perfScore=0.835347]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.37229 secs, and comparison 1.57451 sec, and warnIfPerfScore > 0.23, and perfScore=0.360111]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.96607 secs, and comparison 4.90447 sec, and warnIfPerfScore > 1.3, and perfScore=1.23661]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.18779 secs, and comparison 6.71219 sec, and warnIfPerfScore > 1.2, and perfScore=2.10559]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 16.391 secs, and comparison 1.63266 sec, and warnIfPerfScore > 0.33, and perfScore=0.0996073]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.02541 secs, and comparison 42.9667 sec, and warnIfPerfScore > 6, and perfScore=14.202]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.0656 secs, and comparison 3.8916 sec, and warnIfPerfScore > 0.5, and perfScore=0.351684]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 4.45437 secs, and comparison 38.281 sec, and warnIfPerfScore > 4.4, and perfScore=8.59403]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.8924 secs, and comparison 3.84345 sec, and warnIfPerfScore > 0.6, and perfScore=0.298116]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.31199 secs, and comparison 13.7148 sec, and warnIfPerfScore > 1.5, and perfScore=1.87566]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.27496 secs, and comparison 2.43459 sec, and warnIfPerfScore > 0.55, and perfScore=0.334654]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.076
	DETAILS:         	[baseline test 15 secs, and comparison 1.14196 sec, and warnIfPerfScore > 0.25, and perfScore=0.076131]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.82223 sec, and warnIfPerfScore > 0.5, and perfScore=0.254816]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 54 seconds]]]

Succeeded
