Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 14 23:5:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.79842 secs, and comparison 4.79899 sec, and warnIfPerfScore > 0.65, and perfScore=0.705899]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.14226 secs, and comparison 2.8658 sec, and warnIfPerfScore > 0.5, and perfScore=0.466571]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.59774 secs, and comparison 7.79041 sec, and warnIfPerfScore > 1.05, and perfScore=0.9061]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.35785 secs, and comparison 7.56157 sec, and warnIfPerfScore > 1.15, and perfScore=1.02769]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.24904 secs, and comparison 3.17659 sec, and warnIfPerfScore > 0.48, and perfScore=0.385086]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.19539 secs, and comparison 3.51772 sec, and warnIfPerfScore > 0.57, and perfScore=0.567796]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.11686 secs, and comparison 19.1612 sec, and warnIfPerfScore > 2.9, and perfScore=3.13252]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 6.2551 secs, and comparison 20.7462 sec, and warnIfPerfScore > 2.9, and perfScore=3.31669]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.33509 secs, and comparison 144.365 sec, and warnIfPerfScore > 24, and perfScore=19.6815]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.52147 secs, and comparison 10.3524 sec, and warnIfPerfScore > 1.7, and perfScore=1.87493]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.73976 secs, and comparison 5.99412 sec, and warnIfPerfScore > 1.5, and perfScore=1.04432]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.82845 secs, and comparison 12.8039 sec, and warnIfPerfScore > 2.1, and perfScore=1.63555]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.28055 secs, and comparison 4.50473 sec, and warnIfPerfScore > 1.6, and perfScore=0.717251]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 6.61768 secs, and comparison 0.657054 sec, and warnIfPerfScore > 0.23, and perfScore=0.0992877]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.4505 secs, and comparison 13.7829 sec, and warnIfPerfScore > 1.3, and perfScore=1.02471]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.42029 secs, and comparison 5.26773 sec, and warnIfPerfScore > 1.2, and perfScore=0.6256]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.06988 secs, and comparison 1.82618 sec, and warnIfPerfScore > 0.33, and perfScore=0.226296]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 8.00375 secs, and comparison 41.6375 sec, and warnIfPerfScore > 6, and perfScore=5.20224]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.66157 secs, and comparison 6.1529 sec, and warnIfPerfScore > 0.8, and perfScore=0.803086]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.65643 secs, and comparison 8.33788 sec, and warnIfPerfScore > 1.4, and perfScore=1.089]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.6222 secs, and comparison 3.9324 sec, and warnIfPerfScore > 0.65, and perfScore=0.338352]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.59237 secs, and comparison 37.8611 sec, and warnIfPerfScore > 4.4, and perfScore=4.40636]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.56705 secs, and comparison 3.85728 sec, and warnIfPerfScore > 0.6, and perfScore=0.450246]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.81057 secs, and comparison 3.47299 sec, and warnIfPerfScore > 0.6, and perfScore=0.394184]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.99362 secs, and comparison 3.85473 sec, and warnIfPerfScore > 0.6, and perfScore=0.482226]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.87105 secs, and comparison 5.52145 sec, and warnIfPerfScore > 1.3, and perfScore=0.701489]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.5149 secs, and comparison 9.39697 sec, and warnIfPerfScore > 1.3, and perfScore=0.893684]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 44.2922 secs, and comparison 6.88943 sec, and warnIfPerfScore > 0.3, and perfScore=0.155545]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 6.99555 secs, and comparison 10.0291 sec, and warnIfPerfScore > 1.5, and perfScore=1.43363]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.84652 secs, and comparison 3.13291 sec, and warnIfPerfScore > 0.55, and perfScore=0.457591]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.02221 sec, and warnIfPerfScore > 0.1, and perfScore=0.0681471]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.9199 sec, and warnIfPerfScore > 0.5, and perfScore=0.19466]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.2289 secs, and comparison 8.02437 sec, and warnIfPerfScore > 2, and perfScore=1.28825]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.65239 secs, and comparison 13.5794 sec, and warnIfPerfScore > 3.6, and perfScore=2.04128]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 21 seconds]]]

Succeeded
