Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jun  7 13:18:44 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.81903 secs, and comparison 4.89311 sec, and warnIfPerfScore > 0.62, and perfScore=0.717568]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.31792 secs, and comparison 3.78771 sec, and warnIfPerfScore > 0.5, and perfScore=0.599519]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.73087 secs, and comparison 8.28422 sec, and warnIfPerfScore > 1.05, and perfScore=0.948843]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.06014 secs, and comparison 4.68097 sec, and warnIfPerfScore > 0.48, and perfScore=1.52966]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 2.81993 secs, and comparison 5.37384 sec, and warnIfPerfScore > 0.57, and perfScore=1.90567]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.8801 secs, and comparison 32.2838 sec, and warnIfPerfScore > 2.9, and perfScore=2.50649]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.5779 secs, and comparison 37.0525 sec, and warnIfPerfScore > 2.9, and perfScore=2.5417]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 21.8723 secs, and comparison 229.23 sec, and warnIfPerfScore > 9.7, and perfScore=10.4804]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 20.2648 secs, and comparison 24.8215 sec, and warnIfPerfScore > 1.6, and perfScore=1.22486]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 17.4311 secs, and comparison 13.9366 sec, and warnIfPerfScore > 1.5, and perfScore=0.799527]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.7995 secs, and comparison 25.9889 sec, and warnIfPerfScore > 2.1, and perfScore=2.20254]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 15.5123 secs, and comparison 9.01219 sec, and warnIfPerfScore > 1.3, and perfScore=0.580971]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.8221 secs, and comparison 4.66706 sec, and warnIfPerfScore > 0.23, and perfScore=0.337651]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.75622 secs, and comparison 10.9762 sec, and warnIfPerfScore > 1.3, and perfScore=1.12505]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.01749 secs, and comparison 14.3207 sec, and warnIfPerfScore > 1.2, and perfScore=1.5881]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.38779 secs, and comparison 2.5534 sec, and warnIfPerfScore > 0.33, and perfScore=0.304418]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 8.77254 secs, and comparison 87.3169 sec, and warnIfPerfScore > 6, and perfScore=9.95344]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.7778 secs, and comparison 7.47318 sec, and warnIfPerfScore > 0.5, and perfScore=0.764301]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 12.692 secs, and comparison 78.9648 sec, and warnIfPerfScore > 4.4, and perfScore=6.22164]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.88487 secs, and comparison 7.05002 sec, and warnIfPerfScore > 0.6, and perfScore=0.793485]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 23.2221 secs, and comparison 29.5267 sec, and warnIfPerfScore > 1.5, and perfScore=1.27149]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 18.7892 secs, and comparison 7.80413 sec, and warnIfPerfScore > 0.55, and perfScore=0.415353]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78375 sec, and warnIfPerfScore > 0.25, and perfScore=0.185583]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.37025 sec, and warnIfPerfScore > 0.5, and perfScore=0.424683]
	                 	Test_Optional_ is FASTER

[[[Tests took: 15 minutes, 29 seconds]]]

Succeeded
