Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 12:36:51 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.98 secs, and comparison 5.72094 sec, and warnIfPerfScore > 0.65, and perfScore=0.477541]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.5706 secs, and comparison 4.00327 sec, and warnIfPerfScore > 0.5, and perfScore=0.345986]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 13.7856 secs, and comparison 11.0836 sec, and warnIfPerfScore > 1.05, and perfScore=0.803997]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.86886 secs, and comparison 10.9888 sec, and warnIfPerfScore > 1.15, and perfScore=1.11348]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 12.7061 secs, and comparison 3.28255 sec, and warnIfPerfScore > 0.48, and perfScore=0.258344]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.6411 secs, and comparison 4.07853 sec, and warnIfPerfScore > 0.57, and perfScore=0.322641]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.77 secs, and comparison 34.3585 sec, and warnIfPerfScore > 2.9, and perfScore=2.49516]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.4559 secs, and comparison 36.1703 sec, and warnIfPerfScore > 2.9, and perfScore=2.50211]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 15.5894 secs, and comparison 172.601 sec, and warnIfPerfScore > 24, and perfScore=11.0717]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.4425 secs, and comparison 17.1993 sec, and warnIfPerfScore > 1.7, and perfScore=1.50311]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.9919 secs, and comparison 13.6894 sec, and warnIfPerfScore > 1.5, and perfScore=0.978383]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.6456 secs, and comparison 20.0187 sec, and warnIfPerfScore > 2.1, and perfScore=1.88047]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 14.6252 secs, and comparison 10.2776 sec, and warnIfPerfScore > 1.6, and perfScore=0.702729]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15.2333 secs, and comparison 1.96535 sec, and warnIfPerfScore > 0.23, and perfScore=0.129017]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.8974 secs, and comparison 15.7659 sec, and warnIfPerfScore > 1.3, and perfScore=1.0583]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 12.5511 secs, and comparison 8.59092 sec, and warnIfPerfScore > 1.2, and perfScore=0.684474]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.6103 secs, and comparison 2.617 sec, and warnIfPerfScore > 0.33, and perfScore=0.225403]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 10.9167 secs, and comparison 50.3216 sec, and warnIfPerfScore > 6, and perfScore=4.60959]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.3394 secs, and comparison 7.548 sec, and warnIfPerfScore > 0.8, and perfScore=0.665645]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.1361 secs, and comparison 15.5006 sec, and warnIfPerfScore > 1.4, and perfScore=1.39192]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.8656 secs, and comparison 4.54943 sec, and warnIfPerfScore > 0.65, and perfScore=0.383415]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.2905 secs, and comparison 47.0067 sec, and warnIfPerfScore > 4.4, and perfScore=3.82464]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.0908 secs, and comparison 4.56385 sec, and warnIfPerfScore > 0.6, and perfScore=0.377466]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.5298 secs, and comparison 4.50288 sec, and warnIfPerfScore > 0.6, and perfScore=0.390541]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.2446 secs, and comparison 4.79172 sec, and warnIfPerfScore > 0.6, and perfScore=0.426137]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.6402 secs, and comparison 8.57121 sec, and warnIfPerfScore > 1.3, and perfScore=0.736343]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9753 secs, and comparison 13.4404 sec, and warnIfPerfScore > 1.3, and perfScore=1.03584]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 72.4624 secs, and comparison 12.174 sec, and warnIfPerfScore > 0.3, and perfScore=0.168004]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.237 secs, and comparison 19.7822 sec, and warnIfPerfScore > 1.5, and perfScore=1.38949]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.1481 secs, and comparison 5.21409 sec, and warnIfPerfScore > 0.55, and perfScore=0.322891]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 15 secs, and comparison 1.30069 sec, and warnIfPerfScore > 0.1, and perfScore=0.0867124]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.14411 sec, and warnIfPerfScore > 0.5, and perfScore=0.276274]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.3783 secs, and comparison 24.4468 sec, and warnIfPerfScore > 2, and perfScore=1.82735]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.768 secs, and comparison 37.622 sec, and warnIfPerfScore > 3.6, and perfScore=2.73257]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 34 seconds]]]

Succeeded
