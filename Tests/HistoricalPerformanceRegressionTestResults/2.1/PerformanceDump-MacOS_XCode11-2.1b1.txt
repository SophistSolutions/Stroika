Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jun  7 15:15:48 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.00546 secs, and comparison 6.40915 sec, and warnIfPerfScore > 0.62, and perfScore=0.711697]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 8.90673 secs, and comparison 4.36766 sec, and warnIfPerfScore > 0.5, and perfScore=0.490378]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 17.0526 secs, and comparison 12.5482 sec, and warnIfPerfScore > 1.05, and perfScore=0.735855]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 34.2792 secs, and comparison 6.16481 sec, and warnIfPerfScore > 0.48, and perfScore=0.179841]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 33.6375 secs, and comparison 6.26947 sec, and warnIfPerfScore > 0.57, and perfScore=0.186383]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 23.1146 secs, and comparison 64.6706 sec, and warnIfPerfScore > 2.9, and perfScore=2.79782]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 25.8663 secs, and comparison 64.386 sec, and warnIfPerfScore > 2.9, and perfScore=2.48919]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 18.2823 secs, and comparison 185.543 sec, and warnIfPerfScore > 9.7, and perfScore=10.1487]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 25.1835 secs, and comparison 30.7726 sec, and warnIfPerfScore > 1.6, and perfScore=1.22193]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.40489 secs, and comparison 7.18946 sec, and warnIfPerfScore > 1.5, and perfScore=0.764438]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 16.8119 secs, and comparison 35.484 sec, and warnIfPerfScore > 2.1, and perfScore=2.11065]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 12.8733 secs, and comparison 7.06215 sec, and warnIfPerfScore > 1.3, and perfScore=0.548591]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 13.3028 secs, and comparison 2.04097 sec, and warnIfPerfScore > 0.23, and perfScore=0.153424]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 22.8009 secs, and comparison 22.1768 sec, and warnIfPerfScore > 1.3, and perfScore=0.97263]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.7999 secs, and comparison 13.5236 sec, and warnIfPerfScore > 1.2, and perfScore=1.05654]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.9672 secs, and comparison 2.75669 sec, and warnIfPerfScore > 0.33, and perfScore=0.197368]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 12.6119 secs, and comparison 56.957 sec, and warnIfPerfScore > 6, and perfScore=4.51613]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.8105 secs, and comparison 5.12604 sec, and warnIfPerfScore > 0.5, and perfScore=0.371169]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 15.6916 secs, and comparison 50.724 sec, and warnIfPerfScore > 4.4, and perfScore=3.23256]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 14.2248 secs, and comparison 5.07242 sec, and warnIfPerfScore > 0.6, and perfScore=0.35659]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 35.5806 secs, and comparison 47.2618 sec, and warnIfPerfScore > 1.5, and perfScore=1.32831]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.43057 secs, and comparison 7.60192 sec, and warnIfPerfScore > 0.55, and perfScore=0.90171]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15 secs, and comparison 7.6797 sec, and warnIfPerfScore > 0.25, and perfScore=0.51198]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.16807 sec, and warnIfPerfScore > 0.5, and perfScore=0.277871]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 40 seconds]]]

Succeeded
