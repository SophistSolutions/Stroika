Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 21 2:18:29 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.49729 secs, and comparison 6.61044 sec, and warnIfPerfScore > 0.62, and perfScore=0.696034]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.56426 secs, and comparison 4.33151 sec, and warnIfPerfScore > 0.5, and perfScore=0.452885]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 18.0414 secs, and comparison 13.1598 sec, and warnIfPerfScore > 1.05, and perfScore=0.729422]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8307 secs, and comparison 13.4173 sec, and warnIfPerfScore > 1.15, and perfScore=1.04572]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 34.3309 secs, and comparison 4.88515 sec, and warnIfPerfScore > 0.48, and perfScore=0.142296]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 42.281 secs, and comparison 6.09605 sec, and warnIfPerfScore > 0.57, and perfScore=0.14418]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.3639 secs, and comparison 40.8257 sec, and warnIfPerfScore > 2.9, and perfScore=1.82552]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 27.8564 secs, and comparison 44.1011 sec, and warnIfPerfScore > 2.9, and perfScore=1.58316]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 16.5781 secs, and comparison 150.089 sec, and warnIfPerfScore > 9.7, and perfScore=9.0535]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 26.912 secs, and comparison 17.4607 sec, and warnIfPerfScore > 1.6, and perfScore=0.648805]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.97349 secs, and comparison 6.19167 sec, and warnIfPerfScore > 1.5, and perfScore=0.620813]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.2141 secs, and comparison 20.9392 sec, and warnIfPerfScore > 2.1, and perfScore=1.47313]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.1499 secs, and comparison 6.55004 sec, and warnIfPerfScore > 1.3, and perfScore=0.498105]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 14.2209 secs, and comparison 1.43552 sec, and warnIfPerfScore > 0.23, and perfScore=0.100945]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 19.2313 secs, and comparison 18.5924 sec, and warnIfPerfScore > 1.3, and perfScore=0.966777]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.1814 secs, and comparison 18.6696 sec, and warnIfPerfScore > 1.2, and perfScore=1.41636]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.22049 secs, and comparison 2.37869 sec, and warnIfPerfScore > 0.33, and perfScore=0.257978]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 12.486 secs, and comparison 59.0436 sec, and warnIfPerfScore > 6, and perfScore=4.7288]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.5235 secs, and comparison 18.8031 sec, and warnIfPerfScore > 0.8, and perfScore=1.21126]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.2991 secs, and comparison 17.635 sec, and warnIfPerfScore > 0.9, and perfScore=1.32602]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.38825 secs, and comparison 4.82391 sec, and warnIfPerfScore > 0.5, and perfScore=0.513824]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 18.4347 secs, and comparison 53.4301 sec, and warnIfPerfScore > 4.4, and perfScore=2.89835]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.63472 secs, and comparison 5.79072 sec, and warnIfPerfScore > 0.6, and perfScore=0.601027]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 146.49 secs, and comparison 8.55503 sec, and warnIfPerfScore > 0.2, and perfScore=0.0584003]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 35.8688 secs, and comparison 34.9097 sec, and warnIfPerfScore > 1.5, and perfScore=0.973261]
	                 	String Characters::Format is FASTER

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.91837 secs, and comparison 5.10552 sec, and warnIfPerfScore > 0.55, and perfScore=0.644769]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.35352 sec, and warnIfPerfScore > 0.25, and perfScore=0.423568]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.57725 sec, and warnIfPerfScore > 0.5, and perfScore=0.171817]
	                 	Test_Optional_ is FASTER

[[[Tests took: 19 minutes, 37 seconds]]]

Succeeded
