Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 31 16:4:25 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 6.48657 secs, and comparison 5.23464 sec, and warnIfPerfScore > 0.62, and perfScore=0.806997]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.65188 secs, and comparison 3.62409 sec, and warnIfPerfScore > 0.5, and perfScore=0.544823]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.70982 secs, and comparison 9.91155 sec, and warnIfPerfScore > 1.05, and perfScore=1.28558]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 6.15559 secs, and comparison 3.95962 sec, and warnIfPerfScore > 0.48, and perfScore=0.643257]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 8.39996 secs, and comparison 4.4274 sec, and warnIfPerfScore > 0.57, and perfScore=0.527074]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 5.45383 secs, and comparison 20.9351 sec, and warnIfPerfScore > 2.9, and perfScore=3.8386]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 5.93928 secs, and comparison 22.0733 sec, and warnIfPerfScore > 2.9, and perfScore=3.71649]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 9.12078 secs, and comparison 84.377 sec, and warnIfPerfScore > 9.7, and perfScore=9.25107]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.65923 secs, and comparison 11.1429 sec, and warnIfPerfScore > 1.6, and perfScore=1.45483]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 8.49663 secs, and comparison 7.03298 sec, and warnIfPerfScore > 1.5, and perfScore=0.827738]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.72898 secs, and comparison 12.5275 sec, and warnIfPerfScore > 2.1, and perfScore=3.35949]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 6.42662 secs, and comparison 5.79064 sec, and warnIfPerfScore > 1.3, and perfScore=0.90104]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.95672 secs, and comparison 2.79681 sec, and warnIfPerfScore > 0.23, and perfScore=0.351502]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.52004 secs, and comparison 7.44332 sec, and warnIfPerfScore > 1.3, and perfScore=1.14161]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.63304 secs, and comparison 13.3369 sec, and warnIfPerfScore > 1.2, and perfScore=2.36763]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 23.1801 secs, and comparison 3.15459 sec, and warnIfPerfScore > 0.33, and perfScore=0.136091]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 4.92342 secs, and comparison 45.8976 sec, and warnIfPerfScore > 6, and perfScore=9.32231]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.6172 secs, and comparison 4.11893 sec, and warnIfPerfScore > 0.5, and perfScore=0.263744]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 5.20121 secs, and comparison 40.713 sec, and warnIfPerfScore > 4.4, and perfScore=7.8276]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 19.3839 secs, and comparison 4.44481 sec, and warnIfPerfScore > 0.6, and perfScore=0.229304]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.592 secs, and comparison 19.7883 sec, and warnIfPerfScore > 1.5, and perfScore=1.45588]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.9352 secs, and comparison 3.37455 sec, and warnIfPerfScore > 0.55, and perfScore=0.282738]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.81305 sec, and warnIfPerfScore > 0.25, and perfScore=0.12087]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.47006 sec, and warnIfPerfScore > 0.5, and perfScore=0.298004]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 56 seconds]]]

Succeeded
