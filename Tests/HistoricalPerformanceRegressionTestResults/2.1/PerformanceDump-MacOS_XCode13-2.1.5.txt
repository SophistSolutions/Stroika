Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 14:30:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.13456 secs, and comparison 6.39661 sec, and warnIfPerfScore > 0.65, and perfScore=0.700265]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.03183 secs, and comparison 4.21791 sec, and warnIfPerfScore > 0.5, and perfScore=0.467005]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 16.5482 secs, and comparison 12.3236 sec, and warnIfPerfScore > 1.05, and perfScore=0.744711]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5507 secs, and comparison 12.4834 sec, and warnIfPerfScore > 1.15, and perfScore=1.08074]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 33.5104 secs, and comparison 4.5067 sec, and warnIfPerfScore > 0.48, and perfScore=0.134486]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 35.2113 secs, and comparison 5.08423 sec, and warnIfPerfScore > 0.57, and perfScore=0.144392]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.0026 secs, and comparison 38.8927 sec, and warnIfPerfScore > 2.9, and perfScore=1.76764]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 25.6258 secs, and comparison 44.7294 sec, and warnIfPerfScore > 2.9, and perfScore=1.74548]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 18.4936 secs, and comparison 133.296 sec, and warnIfPerfScore > 24, and perfScore=7.20772]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 25.0937 secs, and comparison 16.3739 sec, and warnIfPerfScore > 1.7, and perfScore=0.652511]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.69726 secs, and comparison 6.76016 sec, and warnIfPerfScore > 1.5, and perfScore=0.697121]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.895 secs, and comparison 21.1468 sec, and warnIfPerfScore > 2.1, and perfScore=1.18172]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15.6311 secs, and comparison 6.86484 sec, and warnIfPerfScore > 1.6, and perfScore=0.439177]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 14.8656 secs, and comparison 1.15761 sec, and warnIfPerfScore > 0.23, and perfScore=0.0778716]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.8993 secs, and comparison 19.3892 sec, and warnIfPerfScore > 1.3, and perfScore=1.02592]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.6199 secs, and comparison 17.6696 sec, and warnIfPerfScore > 1.2, and perfScore=1.2086]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.0121 secs, and comparison 2.61262 sec, and warnIfPerfScore > 0.33, and perfScore=0.260947]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 13.6588 secs, and comparison 56.7791 sec, and warnIfPerfScore > 6, and perfScore=4.15695]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.1978 secs, and comparison 17.8688 sec, and warnIfPerfScore > 0.8, and perfScore=1.35392]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.4788 secs, and comparison 18.1154 sec, and warnIfPerfScore > 1.4, and perfScore=1.17034]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.2044 secs, and comparison 5.22617 sec, and warnIfPerfScore > 0.65, and perfScore=0.512151]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 20.0992 secs, and comparison 54.0671 sec, and warnIfPerfScore > 4.4, and perfScore=2.69001]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.94922 secs, and comparison 4.91245 sec, and warnIfPerfScore > 0.6, and perfScore=0.493752]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.2586 secs, and comparison 4.86825 sec, and warnIfPerfScore > 0.6, and perfScore=0.474551]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.40682 secs, and comparison 5.0891 sec, and warnIfPerfScore > 0.6, and perfScore=0.541]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.60631 secs, and comparison 5.28398 sec, and warnIfPerfScore > 1.3, and perfScore=0.613966]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.05192 secs, and comparison 13.867 sec, and warnIfPerfScore > 1.3, and perfScore=1.53194]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 135.738 secs, and comparison 8.45457 sec, and warnIfPerfScore > 0.3, and perfScore=0.0622861]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 33.3681 secs, and comparison 33.6906 sec, and warnIfPerfScore > 1.5, and perfScore=1.00967]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.21209 secs, and comparison 4.77717 sec, and warnIfPerfScore > 0.55, and perfScore=0.581724]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15 secs, and comparison 5.95438 sec, and warnIfPerfScore > 0.1, and perfScore=0.396958]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.58016 sec, and warnIfPerfScore > 0.5, and perfScore=0.17201]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 2 seconds]]]

Succeeded
