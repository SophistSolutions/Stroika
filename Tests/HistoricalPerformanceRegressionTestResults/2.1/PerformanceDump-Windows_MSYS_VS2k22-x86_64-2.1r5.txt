Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 20:9:34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.31013 secs, and comparison 4.22257 sec, and warnIfPerfScore > 0.65, and perfScore=0.795191]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.41723 secs, and comparison 2.47203 sec, and warnIfPerfScore > 0.5, and perfScore=0.456327]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.75637 secs, and comparison 7.19254 sec, and warnIfPerfScore > 1.05, and perfScore=0.927307]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.48848 secs, and comparison 7.09575 sec, and warnIfPerfScore > 1.15, and perfScore=1.09359]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.51622 secs, and comparison 2.41631 sec, and warnIfPerfScore > 0.48, and perfScore=0.370814]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.89145 secs, and comparison 3.01833 sec, and warnIfPerfScore > 0.57, and perfScore=0.437981]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.60476 secs, and comparison 18.6348 sec, and warnIfPerfScore > 2.9, and perfScore=2.82142]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.18772 secs, and comparison 18.6532 sec, and warnIfPerfScore > 2.9, and perfScore=2.59514]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.93963 secs, and comparison 136.113 sec, and warnIfPerfScore > 24, and perfScore=22.916]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.11859 secs, and comparison 10.2794 sec, and warnIfPerfScore > 1.7, and perfScore=1.68003]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.52158 secs, and comparison 5.46012 sec, and warnIfPerfScore > 1.5, and perfScore=0.988869]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.28025 secs, and comparison 11.8259 sec, and warnIfPerfScore > 2.1, and perfScore=2.23966]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 7.27825 secs, and comparison 4.08638 sec, and warnIfPerfScore > 1.6, and perfScore=0.561451]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 7.50579 secs, and comparison 0.656291 sec, and warnIfPerfScore > 0.23, and perfScore=0.0874379]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.0962 secs, and comparison 12.602 sec, and warnIfPerfScore > 1.3, and perfScore=1.04182]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.7142 secs, and comparison 5.45551 sec, and warnIfPerfScore > 1.2, and perfScore=0.626048]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.6092 secs, and comparison 2.03477 sec, and warnIfPerfScore > 0.33, and perfScore=0.236348]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.2595 secs, and comparison 38.8699 sec, and warnIfPerfScore > 6, and perfScore=4.70609]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.387 secs, and comparison 5.0517 sec, and warnIfPerfScore > 0.8, and perfScore=0.602325]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.31011 secs, and comparison 8.0858 sec, and warnIfPerfScore > 1.4, and perfScore=0.973008]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.68037 secs, and comparison 3.4142 sec, and warnIfPerfScore > 0.65, and perfScore=0.393324]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.91169 secs, and comparison 36.2183 sec, and warnIfPerfScore > 4.4, and perfScore=4.06414]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.57566 secs, and comparison 3.32604 sec, and warnIfPerfScore > 0.6, and perfScore=0.387846]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.65797 secs, and comparison 3.36078 sec, and warnIfPerfScore > 0.6, and perfScore=0.388172]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.51986 secs, and comparison 3.37136 sec, and warnIfPerfScore > 0.6, and perfScore=0.395706]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.5039 secs, and comparison 5.53743 sec, and warnIfPerfScore > 1.3, and perfScore=0.651164]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.25564 secs, and comparison 8.83849 sec, and warnIfPerfScore > 1.3, and perfScore=0.954931]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 40.9292 secs, and comparison 5.16444 sec, and warnIfPerfScore > 0.3, and perfScore=0.12618]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.73486 secs, and comparison 9.85106 sec, and warnIfPerfScore > 1.5, and perfScore=1.4627]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.21066 secs, and comparison 2.67613 sec, and warnIfPerfScore > 0.55, and perfScore=0.430894]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.047
	DETAILS:         	[baseline test 15 secs, and comparison 0.708557 sec, and warnIfPerfScore > 0.1, and perfScore=0.0472371]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.84687 sec, and warnIfPerfScore > 0.5, and perfScore=0.189791]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.29098 secs, and comparison 8.02273 sec, and warnIfPerfScore > 2, and perfScore=1.27527]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.71836 secs, and comparison 14.0108 sec, and warnIfPerfScore > 3.6, and perfScore=1.81525]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 25 seconds]]]

Succeeded
