Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar  6 13:39:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.05905 secs, and comparison 4.12255 sec, and warnIfPerfScore > 0.65, and perfScore=0.814887]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.01464 secs, and comparison 2.35848 sec, and warnIfPerfScore > 0.5, and perfScore=0.470318]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.30892 secs, and comparison 6.66091 sec, and warnIfPerfScore > 1.05, and perfScore=0.91134]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.06484 secs, and comparison 6.66758 sec, and warnIfPerfScore > 1.15, and perfScore=1.09938]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.88745 secs, and comparison 2.26787 sec, and warnIfPerfScore > 0.48, and perfScore=0.385205]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.02176 secs, and comparison 2.80437 sec, and warnIfPerfScore > 0.57, and perfScore=0.465707]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 5.85841 secs, and comparison 17.0539 sec, and warnIfPerfScore > 2.9, and perfScore=2.91101]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.18082 secs, and comparison 17.0146 sec, and warnIfPerfScore > 2.9, and perfScore=2.75281]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.36589 secs, and comparison 129.859 sec, and warnIfPerfScore > 24, and perfScore=24.2008]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.41151 secs, and comparison 9.17833 sec, and warnIfPerfScore > 1.7, and perfScore=1.69607]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.89119 secs, and comparison 4.85788 sec, and warnIfPerfScore > 1.5, and perfScore=0.99319]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.679 secs, and comparison 11.0462 sec, and warnIfPerfScore > 2.1, and perfScore=2.36081]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.2649 secs, and comparison 3.76593 sec, and warnIfPerfScore > 1.6, and perfScore=0.601115]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 6.55184 secs, and comparison 0.646658 sec, and warnIfPerfScore > 0.23, and perfScore=0.0986987]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3127 secs, and comparison 11.7803 sec, and warnIfPerfScore > 1.3, and perfScore=1.04133]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.98128 secs, and comparison 4.8054 sec, and warnIfPerfScore > 1.2, and perfScore=0.602084]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.84345 secs, and comparison 1.93284 sec, and warnIfPerfScore > 0.33, and perfScore=0.246427]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.64493 secs, and comparison 37.1651 sec, and warnIfPerfScore > 6, and perfScore=4.8614]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.62921 secs, and comparison 4.73203 sec, and warnIfPerfScore > 0.8, and perfScore=0.620252]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.64369 secs, and comparison 7.19446 sec, and warnIfPerfScore > 1.4, and perfScore=0.941229]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.81656 secs, and comparison 3.27871 sec, and warnIfPerfScore > 0.65, and perfScore=0.419457]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.17809 secs, and comparison 34.4822 sec, and warnIfPerfScore > 4.4, and perfScore=4.2164]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.69003 secs, and comparison 3.18899 sec, and warnIfPerfScore > 0.6, and perfScore=0.414691]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.69936 secs, and comparison 3.17674 sec, and warnIfPerfScore > 0.6, and perfScore=0.412598]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.70199 secs, and comparison 3.19152 sec, and warnIfPerfScore > 0.6, and perfScore=0.414376]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.69954 secs, and comparison 4.9725 sec, and warnIfPerfScore > 1.3, and perfScore=0.645818]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.23411 secs, and comparison 8.06214 sec, and warnIfPerfScore > 1.3, and perfScore=0.979114]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 37.3583 secs, and comparison 4.7523 sec, and warnIfPerfScore > 0.3, and perfScore=0.127209]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.61368 secs, and comparison 9.11244 sec, and warnIfPerfScore > 1.5, and perfScore=1.62326]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 5.77504 secs, and comparison 2.43996 sec, and warnIfPerfScore > 0.55, and perfScore=0.422501]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 15 secs, and comparison 0.672974 sec, and warnIfPerfScore > 0.1, and perfScore=0.044865]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.71905 sec, and warnIfPerfScore > 0.5, and perfScore=0.18127]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.6867 secs, and comparison 7.33282 sec, and warnIfPerfScore > 2, and perfScore=1.28947]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.92459 secs, and comparison 12.2699 sec, and warnIfPerfScore > 3.6, and perfScore=1.77193]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 33 seconds]]]

Succeeded
