Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 16 23:45:7 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.89662 secs, and comparison 5.24163 sec, and warnIfPerfScore > 0.62, and perfScore=0.760029]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.49857 secs, and comparison 3.53912 sec, and warnIfPerfScore > 0.5, and perfScore=0.5446]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.92927 secs, and comparison 7.58326 sec, and warnIfPerfScore > 1.05, and perfScore=0.956363]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 6.74812 secs, and comparison 4.38516 sec, and warnIfPerfScore > 0.48, and perfScore=0.649834]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.22435 secs, and comparison 4.92937 sec, and warnIfPerfScore > 0.57, and perfScore=0.682327]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 5.44414 secs, and comparison 27.0982 sec, and warnIfPerfScore > 2.9, and perfScore=4.9775]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 7.63773 secs, and comparison 29.8343 sec, and warnIfPerfScore > 2.9, and perfScore=3.90618]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 9.34944 secs, and comparison 105.522 sec, and warnIfPerfScore > 9.7, and perfScore=11.2865]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.27594 secs, and comparison 13.867 sec, and warnIfPerfScore > 1.6, and perfScore=1.49494]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.8523 secs, and comparison 6.92951 sec, and warnIfPerfScore > 1.5, and perfScore=0.882481]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 4.7233 secs, and comparison 11.7128 sec, and warnIfPerfScore > 2.1, and perfScore=2.47978]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.21141 secs, and comparison 4.05144 sec, and warnIfPerfScore > 1.3, and perfScore=0.962014]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.52432 secs, and comparison 1.55726 sec, and warnIfPerfScore > 0.23, and perfScore=0.344198]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.74012 secs, and comparison 5.27501 sec, and warnIfPerfScore > 1.3, and perfScore=1.11284]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 3.60846 secs, and comparison 10.0088 sec, and warnIfPerfScore > 1.2, and perfScore=2.7737]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 21.0629 secs, and comparison 2.21778 sec, and warnIfPerfScore > 0.33, and perfScore=0.105293]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.81967 secs, and comparison 44.0956 sec, and warnIfPerfScore > 6, and perfScore=11.5444]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 16.4428 secs, and comparison 4.39968 sec, and warnIfPerfScore > 0.5, and perfScore=0.267575]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 6.92663 secs, and comparison 41.5275 sec, and warnIfPerfScore > 4.4, and perfScore=5.99534]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 19.0466 secs, and comparison 4.45733 sec, and warnIfPerfScore > 0.6, and perfScore=0.234022]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.4161 secs, and comparison 20.4493 sec, and warnIfPerfScore > 1.5, and perfScore=1.79127]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.2794 secs, and comparison 2.89788 sec, and warnIfPerfScore > 0.55, and perfScore=0.281911]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42795 sec, and warnIfPerfScore > 0.25, and perfScore=0.0951966]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.97554 sec, and warnIfPerfScore > 0.5, and perfScore=0.265036]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 14 seconds]]]

Succeeded
