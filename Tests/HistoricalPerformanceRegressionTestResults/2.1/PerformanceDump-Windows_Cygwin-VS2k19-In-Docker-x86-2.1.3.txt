Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 :14:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.12888 secs, and comparison 4.36875 sec, and warnIfPerfScore > 0.65, and perfScore=0.612824]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.15494 secs, and comparison 2.80329 sec, and warnIfPerfScore > 0.5, and perfScore=0.391798]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.96959 secs, and comparison 7.57045 sec, and warnIfPerfScore > 1.05, and perfScore=0.844012]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.16867 secs, and comparison 7.66998 sec, and warnIfPerfScore > 1.15, and perfScore=1.06993]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.34405 secs, and comparison 2.32665 sec, and warnIfPerfScore > 0.48, and perfScore=0.278839]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.24326 secs, and comparison 2.77498 sec, and warnIfPerfScore > 0.57, and perfScore=0.336636]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.93231 secs, and comparison 20.958 sec, and warnIfPerfScore > 2.9, and perfScore=2.34631]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.89578 secs, and comparison 21.7974 sec, and warnIfPerfScore > 2.9, and perfScore=2.45031]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.3792 secs, and comparison 149.692 sec, and warnIfPerfScore > 24, and perfScore=17.8648]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.7454 secs, and comparison 10.8966 sec, and warnIfPerfScore > 1.7, and perfScore=1.40685]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.39315 secs, and comparison 8.17277 sec, and warnIfPerfScore > 1.5, and perfScore=0.973742]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.49675 secs, and comparison 12.7057 sec, and warnIfPerfScore > 2.1, and perfScore=1.69483]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.03025 secs, and comparison 8.00695 sec, and warnIfPerfScore > 1.6, and perfScore=0.886681]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.42349 secs, and comparison 1.27991 sec, and warnIfPerfScore > 0.23, and perfScore=0.135821]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.9082 secs, and comparison 13.8802 sec, and warnIfPerfScore > 1.3, and perfScore=1.0753]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.2049 secs, and comparison 5.58061 sec, and warnIfPerfScore > 1.2, and perfScore=0.546854]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.38734 secs, and comparison 1.57713 sec, and warnIfPerfScore > 0.33, and perfScore=0.246915]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.95299 secs, and comparison 40.7923 sec, and warnIfPerfScore > 6, and perfScore=4.0985]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.83138 secs, and comparison 5.33684 sec, and warnIfPerfScore > 0.8, and perfScore=0.542837]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.92366 secs, and comparison 9.76496 sec, and warnIfPerfScore > 1.4, and perfScore=0.984008]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.47305 secs, and comparison 3.58106 sec, and warnIfPerfScore > 0.65, and perfScore=0.553227]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.4086 secs, and comparison 37.731 sec, and warnIfPerfScore > 4.4, and perfScore=3.62498]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.57613 secs, and comparison 3.56348 sec, and warnIfPerfScore > 0.6, and perfScore=0.54188]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.59511 secs, and comparison 3.56281 sec, and warnIfPerfScore > 0.6, and perfScore=0.540219]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.58099 secs, and comparison 3.58372 sec, and warnIfPerfScore > 0.6, and perfScore=0.544556]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.55968 secs, and comparison 4.82413 sec, and warnIfPerfScore > 1.3, and perfScore=0.735421]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.18424 secs, and comparison 8.69263 sec, and warnIfPerfScore > 1.3, and perfScore=1.20996]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.6977 secs, and comparison 6.02406 sec, and warnIfPerfScore > 0.3, and perfScore=0.123703]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.4614 secs, and comparison 12.3559 sec, and warnIfPerfScore > 1.5, and perfScore=1.46027]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.36325 secs, and comparison 2.93394 sec, and warnIfPerfScore > 0.55, and perfScore=0.398457]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.806084 sec, and warnIfPerfScore > 0.1, and perfScore=0.053739]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.11031 sec, and warnIfPerfScore > 0.5, and perfScore=0.207354]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.25504 secs, and comparison 13.9286 sec, and warnIfPerfScore > 2, and perfScore=1.68729]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.51399 secs, and comparison 30.1746 sec, and warnIfPerfScore > 3.6, and perfScore=3.17161]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes]]]

Succeeded
