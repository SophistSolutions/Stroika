Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 3:33:47 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.11634 secs, and comparison 4.64056 sec, and warnIfPerfScore > 0.65, and perfScore=0.758715]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.80385 secs, and comparison 2.67784 sec, and warnIfPerfScore > 0.5, and perfScore=0.461391]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.88366 secs, and comparison 7.85749 sec, and warnIfPerfScore > 1.05, and perfScore=0.884488]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.21486 secs, and comparison 7.87691 sec, and warnIfPerfScore > 1.15, and perfScore=1.09176]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.50586 secs, and comparison 2.43342 sec, and warnIfPerfScore > 0.48, and perfScore=0.255992]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.46132 secs, and comparison 3.00624 sec, and warnIfPerfScore > 0.57, and perfScore=0.31774]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.10931 secs, and comparison 21.0146 sec, and warnIfPerfScore > 2.9, and perfScore=2.59142]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.43233 secs, and comparison 20.7612 sec, and warnIfPerfScore > 2.9, and perfScore=2.4621]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 7.26891 secs, and comparison 151.116 sec, and warnIfPerfScore > 24, and perfScore=20.7893]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.3938 secs, and comparison 10.7635 sec, and warnIfPerfScore > 1.7, and perfScore=1.68343]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.76899 secs, and comparison 6.76647 sec, and warnIfPerfScore > 1.5, and perfScore=0.999629]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.08197 secs, and comparison 12.9191 sec, and warnIfPerfScore > 2.1, and perfScore=2.12417]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.96011 secs, and comparison 5.14139 sec, and warnIfPerfScore > 1.6, and perfScore=0.645894]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 8.523 secs, and comparison 0.784191 sec, and warnIfPerfScore > 0.23, and perfScore=0.0920088]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0064 secs, and comparison 13.6909 sec, and warnIfPerfScore > 1.3, and perfScore=1.05263]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.44015 secs, and comparison 5.832 sec, and warnIfPerfScore > 1.2, and perfScore=0.617787]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.79778 secs, and comparison 2.23282 sec, and warnIfPerfScore > 0.33, and perfScore=0.227891]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.18752 secs, and comparison 41.7533 sec, and warnIfPerfScore > 6, and perfScore=4.54457]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.3002 secs, and comparison 5.92995 sec, and warnIfPerfScore > 0.8, and perfScore=0.637615]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.28816 secs, and comparison 9.23052 sec, and warnIfPerfScore > 1.4, and perfScore=0.993794]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.77525 secs, and comparison 3.6916 sec, and warnIfPerfScore > 0.65, and perfScore=0.377648]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.86892 secs, and comparison 39.1512 sec, and warnIfPerfScore > 4.4, and perfScore=3.96712]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.77294 secs, and comparison 3.65786 sec, and warnIfPerfScore > 0.6, and perfScore=0.374285]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.81202 secs, and comparison 3.67258 sec, and warnIfPerfScore > 0.6, and perfScore=0.374294]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.35863 secs, and comparison 3.56959 sec, and warnIfPerfScore > 0.6, and perfScore=0.381422]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.81036 secs, and comparison 5.80311 sec, and warnIfPerfScore > 1.3, and perfScore=0.591528]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 10.5562 secs, and comparison 9.56552 sec, and warnIfPerfScore > 1.3, and perfScore=0.906155]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 46.7246 secs, and comparison 7.12266 sec, and warnIfPerfScore > 0.3, and perfScore=0.152439]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.39773 secs, and comparison 11.6162 sec, and warnIfPerfScore > 1.5, and perfScore=1.57024]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.61638 secs, and comparison 3.1723 sec, and warnIfPerfScore > 0.55, and perfScore=0.41651]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.047
	DETAILS:         	[baseline test 15 secs, and comparison 0.711541 sec, and warnIfPerfScore > 0.1, and perfScore=0.0474361]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.0506 sec, and warnIfPerfScore > 0.5, and perfScore=0.203374]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.5235 secs, and comparison 9.31704 sec, and warnIfPerfScore > 2, and perfScore=1.0931]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.89318 secs, and comparison 15.8411 sec, and warnIfPerfScore > 3.6, and perfScore=1.78127]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 51 seconds]]]

Succeeded
