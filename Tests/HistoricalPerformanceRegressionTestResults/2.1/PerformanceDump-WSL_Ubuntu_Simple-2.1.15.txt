Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Feb  3 14:7:24 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 2.22638 secs, and comparison 1.17663 sec, and warnIfPerfScore > 0.65, and perfScore=0.528498]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 2.24159 secs, and comparison 2.33126 sec, and warnIfPerfScore > 0.5, and perfScore=1.04]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.12579 secs, and comparison 5.87543 sec, and warnIfPerfScore > 1.05, and perfScore=2.76388]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 1.77335 secs, and comparison 5.90931 sec, and warnIfPerfScore > 1.15, and perfScore=3.33229]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 2.92958 secs, and comparison 0.737824 sec, and warnIfPerfScore > 0.48, and perfScore=0.251853]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 3.46374 secs, and comparison 0.800342 sec, and warnIfPerfScore > 0.57, and perfScore=0.231063]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.71709 secs, and comparison 9.67161 sec, and warnIfPerfScore > 2.9, and perfScore=3.55955]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.12862 secs, and comparison 10.1847 sec, and warnIfPerfScore > 2.9, and perfScore=3.25534]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 3.8882 secs, and comparison 32.5184 sec, and warnIfPerfScore > 24, and perfScore=8.36336]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.97991 secs, and comparison 6.39308 sec, and warnIfPerfScore > 1.7, and perfScore=1.60634]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.24112 secs, and comparison 4.07064 sec, and warnIfPerfScore > 1.5, and perfScore=0.959803]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.12465 secs, and comparison 7.67886 sec, and warnIfPerfScore > 2.1, and perfScore=3.61418]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.0536 secs, and comparison 2.92264 sec, and warnIfPerfScore > 1.6, and perfScore=0.957112]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 3.26188 secs, and comparison 1.08172 sec, and warnIfPerfScore > 0.23, and perfScore=0.331625]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.58368 secs, and comparison 3.29609 sec, and warnIfPerfScore > 1.3, and perfScore=1.27573]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.49785 secs, and comparison 4.95424 sec, and warnIfPerfScore > 1.2, and perfScore=1.9834]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.4789 secs, and comparison 1.49939 sec, and warnIfPerfScore > 0.33, and perfScore=0.143086]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.41523 secs, and comparison 37.0249 sec, and warnIfPerfScore > 6, and perfScore=15.3298]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 2.38559 secs, and comparison 4.58494 sec, and warnIfPerfScore > 0.8, and perfScore=1.92193]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.34747 secs, and comparison 5.92871 sec, and warnIfPerfScore > 1.4, and perfScore=2.52558]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.2115 secs, and comparison 3.15967 sec, and warnIfPerfScore > 0.65, and perfScore=0.309423]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.42968 secs, and comparison 34.4132 sec, and warnIfPerfScore > 4.4, and perfScore=10.0339]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.7352 secs, and comparison 3.18545 sec, and warnIfPerfScore > 0.6, and perfScore=0.411812]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.59386 secs, and comparison 3.16035 sec, and warnIfPerfScore > 0.6, and perfScore=0.416172]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.59133 secs, and comparison 3.08612 sec, and warnIfPerfScore > 0.6, and perfScore=0.406533]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.61481 secs, and comparison 3.27048 sec, and warnIfPerfScore > 1.3, and perfScore=0.42949]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.1049 secs, and comparison 8.17237 sec, and warnIfPerfScore > 1.3, and perfScore=0.623614]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.8121 secs, and comparison 4.37863 sec, and warnIfPerfScore > 0.3, and perfScore=0.341758]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.3981 secs, and comparison 9.46371 sec, and warnIfPerfScore > 1.5, and perfScore=1.75316]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.73195 secs, and comparison 1.37462 sec, and warnIfPerfScore > 0.55, and perfScore=0.239818]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.587708 sec, and warnIfPerfScore > 0.1, and perfScore=0.0391805]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.12702 sec, and warnIfPerfScore > 0.5, and perfScore=0.0751344]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 10 seconds]]]

Succeeded
