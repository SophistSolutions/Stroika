Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 3:54:3 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.5113 secs, and comparison 4.33771 sec, and warnIfPerfScore > 0.65, and perfScore=0.577491]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.40549 secs, and comparison 2.92256 sec, and warnIfPerfScore > 0.5, and perfScore=0.394648]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.84137 secs, and comparison 7.58766 sec, and warnIfPerfScore > 1.05, and perfScore=0.8582]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.90201 secs, and comparison 7.59872 sec, and warnIfPerfScore > 1.15, and perfScore=1.10094]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.5752 secs, and comparison 2.30073 sec, and warnIfPerfScore > 0.48, and perfScore=0.0665428]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 33.557 secs, and comparison 2.79253 sec, and warnIfPerfScore > 0.57, and perfScore=0.0832177]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.97511 secs, and comparison 21.2721 sec, and warnIfPerfScore > 2.9, and perfScore=2.37012]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.71741 secs, and comparison 21.9973 sec, and warnIfPerfScore > 2.9, and perfScore=2.2637]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.40425 secs, and comparison 153.365 sec, and warnIfPerfScore > 24, and perfScore=18.2484]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.77542 secs, and comparison 11.0792 sec, and warnIfPerfScore > 1.7, and perfScore=1.4249]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.24742 secs, and comparison 8.10443 sec, and warnIfPerfScore > 1.5, and perfScore=0.982663]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.70269 secs, and comparison 12.8429 sec, and warnIfPerfScore > 2.1, and perfScore=1.91608]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.35861 secs, and comparison 6.7178 sec, and warnIfPerfScore > 1.6, and perfScore=0.71782]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.76421 secs, and comparison 1.41442 sec, and warnIfPerfScore > 0.23, and perfScore=0.144858]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0569 secs, and comparison 13.1476 sec, and warnIfPerfScore > 1.3, and perfScore=1.00695]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.1687 secs, and comparison 5.71635 sec, and warnIfPerfScore > 1.2, and perfScore=0.56215]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.39271 secs, and comparison 2.20941 sec, and warnIfPerfScore > 0.33, and perfScore=0.235226]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.75776 secs, and comparison 39.6153 sec, and warnIfPerfScore > 6, and perfScore=4.05988]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.86254 secs, and comparison 5.64893 sec, and warnIfPerfScore > 0.8, and perfScore=0.572766]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.92226 secs, and comparison 9.46185 sec, and warnIfPerfScore > 1.4, and perfScore=0.953599]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.43152 secs, and comparison 3.58464 sec, and warnIfPerfScore > 0.65, and perfScore=0.380071]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.0857 secs, and comparison 37.0698 sec, and warnIfPerfScore > 4.4, and perfScore=3.67548]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.26335 secs, and comparison 3.61546 sec, and warnIfPerfScore > 0.6, and perfScore=0.390298]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.21151 secs, and comparison 3.6069 sec, and warnIfPerfScore > 0.6, and perfScore=0.391564]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.25353 secs, and comparison 3.60553 sec, and warnIfPerfScore > 0.6, and perfScore=0.389638]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.24819 secs, and comparison 5.00621 sec, and warnIfPerfScore > 1.3, and perfScore=0.541318]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.96341 secs, and comparison 8.74972 sec, and warnIfPerfScore > 1.3, and perfScore=0.878186]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 47.9397 secs, and comparison 5.77557 sec, and warnIfPerfScore > 0.3, and perfScore=0.120476]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.64016 secs, and comparison 11.7389 sec, and warnIfPerfScore > 1.5, and perfScore=1.53647]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.53647}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.40389 secs, and comparison 3.60634 sec, and warnIfPerfScore > 0.55, and perfScore=0.487088]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.799766 sec, and warnIfPerfScore > 0.1, and perfScore=0.0533177]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.89343 sec, and warnIfPerfScore > 0.5, and perfScore=0.192895]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.45924 secs, and comparison 13.7794 sec, and warnIfPerfScore > 2, and perfScore=1.62891]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.91117 secs, and comparison 29.6299 sec, and warnIfPerfScore > 3.6, and perfScore=2.98955]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 10 seconds]]]

Succeeded
