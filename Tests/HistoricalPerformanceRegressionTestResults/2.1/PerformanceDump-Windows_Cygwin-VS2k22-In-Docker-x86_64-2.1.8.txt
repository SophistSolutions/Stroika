Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov  3 2:53:23 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.62616 secs, and comparison 4.39288 sec, and warnIfPerfScore > 0.65, and perfScore=0.662961]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.19407 secs, and comparison 2.55128 sec, and warnIfPerfScore > 0.5, and perfScore=0.49119]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.86749 secs, and comparison 7.25881 sec, and warnIfPerfScore > 1.05, and perfScore=0.922634]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.55961 secs, and comparison 7.19085 sec, and warnIfPerfScore > 1.15, and perfScore=1.09623]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 32.7848 secs, and comparison 2.17539 sec, and warnIfPerfScore > 0.48, and perfScore=0.0663536]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 31.2439 secs, and comparison 2.69207 sec, and warnIfPerfScore > 0.57, and perfScore=0.086163]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.53276 secs, and comparison 18.5123 sec, and warnIfPerfScore > 2.9, and perfScore=2.83377]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.76807 secs, and comparison 18.6333 sec, and warnIfPerfScore > 2.9, and perfScore=2.75313]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.82205 secs, and comparison 134.035 sec, and warnIfPerfScore > 24, and perfScore=23.0219]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.48695 secs, and comparison 9.87408 sec, and warnIfPerfScore > 1.7, and perfScore=1.79956]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.97671 secs, and comparison 5.37698 sec, and warnIfPerfScore > 1.5, and perfScore=0.899656]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.17833 secs, and comparison 11.8609 sec, and warnIfPerfScore > 2.1, and perfScore=2.29049]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.68714 secs, and comparison 4.015 sec, and warnIfPerfScore > 1.6, and perfScore=0.600407]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 7.00054 secs, and comparison 0.671352 sec, and warnIfPerfScore > 0.23, and perfScore=0.0959]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1978 secs, and comparison 12.4319 sec, and warnIfPerfScore > 1.3, and perfScore=1.01919]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.40497 secs, and comparison 5.22971 sec, and warnIfPerfScore > 1.2, and perfScore=0.622216]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 8.4344 secs, and comparison 1.84303 sec, and warnIfPerfScore > 0.33, and perfScore=0.218514]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.04236 secs, and comparison 39.6861 sec, and warnIfPerfScore > 6, and perfScore=4.93463]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.98245 secs, and comparison 5.03676 sec, and warnIfPerfScore > 0.8, and perfScore=0.630979]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.99746 secs, and comparison 7.59377 sec, and warnIfPerfScore > 1.4, and perfScore=0.949523]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.30413 secs, and comparison 3.51705 sec, and warnIfPerfScore > 0.65, and perfScore=0.42353]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.57234 secs, and comparison 37.0702 sec, and warnIfPerfScore > 4.4, and perfScore=4.32439]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.31303 secs, and comparison 3.43434 sec, and warnIfPerfScore > 0.6, and perfScore=0.413127]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.26751 secs, and comparison 3.44543 sec, and warnIfPerfScore > 0.6, and perfScore=0.416743]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.27583 secs, and comparison 3.45917 sec, and warnIfPerfScore > 0.6, and perfScore=0.417984]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.25142 secs, and comparison 5.18669 sec, and warnIfPerfScore > 1.3, and perfScore=0.628582]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.88477 secs, and comparison 8.47205 sec, and warnIfPerfScore > 1.3, and perfScore=0.953548]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 38.6741 secs, and comparison 6.63199 sec, and warnIfPerfScore > 0.3, and perfScore=0.171484]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.57978 secs, and comparison 9.20869 sec, and warnIfPerfScore > 1.5, and perfScore=1.65037]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.25512 secs, and comparison 2.92253 sec, and warnIfPerfScore > 0.55, and perfScore=0.467222]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.606663 sec, and warnIfPerfScore > 0.1, and perfScore=0.0404442]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.66608 sec, and warnIfPerfScore > 0.5, and perfScore=0.177739]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.65467 secs, and comparison 12.8061 sec, and warnIfPerfScore > 2, and perfScore=1.92438]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.24487 secs, and comparison 14.3478 sec, and warnIfPerfScore > 3.6, and perfScore=1.7402]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 13 seconds]]]

Succeeded
