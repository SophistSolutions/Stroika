Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 22 21:13:29 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.90882 secs, and comparison 4.57469 sec, and warnIfPerfScore > 0.65, and perfScore=0.774214]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.78613 secs, and comparison 2.77322 sec, and warnIfPerfScore > 0.5, and perfScore=0.479288]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.11875 secs, and comparison 7.5161 sec, and warnIfPerfScore > 1.05, and perfScore=0.92577]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.78642 secs, and comparison 7.46018 sec, and warnIfPerfScore > 1.15, and perfScore=1.09928]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 32.9647 secs, and comparison 2.32546 sec, and warnIfPerfScore > 0.48, and perfScore=0.070544]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 31.224 secs, and comparison 2.89407 sec, and warnIfPerfScore > 0.57, and perfScore=0.0926873]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.55283 secs, and comparison 19.6048 sec, and warnIfPerfScore > 2.9, and perfScore=2.99181]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.73953 secs, and comparison 19.8669 sec, and warnIfPerfScore > 2.9, and perfScore=2.94781]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.74896 secs, and comparison 145.598 sec, and warnIfPerfScore > 24, and perfScore=25.326]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.46487 secs, and comparison 10.3814 sec, and warnIfPerfScore > 1.7, and perfScore=1.89966]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.90213 secs, and comparison 5.31082 sec, and warnIfPerfScore > 1.5, and perfScore=0.899814]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.05197 secs, and comparison 12.4898 sec, and warnIfPerfScore > 2.1, and perfScore=2.47226]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.62146 secs, and comparison 4.0134 sec, and warnIfPerfScore > 1.6, and perfScore=0.60612]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 6.92245 secs, and comparison 0.676492 sec, and warnIfPerfScore > 0.23, and perfScore=0.0977243]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1239 secs, and comparison 12.3902 sec, and warnIfPerfScore > 1.3, and perfScore=1.02196]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.28975 secs, and comparison 5.25233 sec, and warnIfPerfScore > 1.2, and perfScore=0.633593]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 8.44135 secs, and comparison 1.85353 sec, and warnIfPerfScore > 0.33, and perfScore=0.219577]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 7.9093 secs, and comparison 40.7583 sec, and warnIfPerfScore > 6, and perfScore=5.15321]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.92369 secs, and comparison 5.10026 sec, and warnIfPerfScore > 0.8, and perfScore=0.643673]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.90063 secs, and comparison 7.58561 sec, and warnIfPerfScore > 1.4, and perfScore=0.960128]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.37339 secs, and comparison 3.60093 sec, and warnIfPerfScore > 0.65, and perfScore=0.430044]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 8.41226 secs, and comparison 37.961 sec, and warnIfPerfScore > 4.4, and perfScore=4.51258]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.28593 secs, and comparison 3.51375 sec, and warnIfPerfScore > 0.6, and perfScore=0.424062]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.27845 secs, and comparison 3.51659 sec, and warnIfPerfScore > 0.6, and perfScore=0.424788]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.27623 secs, and comparison 3.5337 sec, and warnIfPerfScore > 0.6, and perfScore=0.42697]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.25769 secs, and comparison 5.23341 sec, and warnIfPerfScore > 1.3, and perfScore=0.633762]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.88847 secs, and comparison 8.50348 sec, and warnIfPerfScore > 1.3, and perfScore=0.956686]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 39.0999 secs, and comparison 6.56057 sec, and warnIfPerfScore > 0.3, and perfScore=0.16779]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.62232 secs, and comparison 9.80324 sec, and warnIfPerfScore > 1.5, and perfScore=1.74363]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.06118 secs, and comparison 2.76805 sec, and warnIfPerfScore > 0.55, and perfScore=0.456685]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.621574 sec, and warnIfPerfScore > 0.1, and perfScore=0.0414382]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.05792 sec, and warnIfPerfScore > 0.5, and perfScore=0.203862]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.75187 secs, and comparison 12.952 sec, and warnIfPerfScore > 2, and perfScore=1.91828]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.06858 secs, and comparison 14.9095 sec, and warnIfPerfScore > 3.6, and perfScore=1.84784]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 33 seconds]]]

Succeeded
