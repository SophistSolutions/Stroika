Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 1::5 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.22054 secs, and comparison 6.84878 sec, and warnIfPerfScore > 0.65, and perfScore=0.742774]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.78989 secs, and comparison 4.38995 sec, and warnIfPerfScore > 0.5, and perfScore=0.448416]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 17.6271 secs, and comparison 13.5553 sec, and warnIfPerfScore > 1.05, and perfScore=0.768999]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6999 secs, and comparison 13.0124 sec, and warnIfPerfScore > 1.15, and perfScore=1.11218]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 35.1816 secs, and comparison 4.25215 sec, and warnIfPerfScore > 0.48, and perfScore=0.120863]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 34.8145 secs, and comparison 5.33209 sec, and warnIfPerfScore > 0.57, and perfScore=0.153157]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 24.4697 secs, and comparison 38.666 sec, and warnIfPerfScore > 2.9, and perfScore=1.58016]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 25.2981 secs, and comparison 40.6808 sec, and warnIfPerfScore > 2.9, and perfScore=1.60806]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 17.8968 secs, and comparison 132.05 sec, and warnIfPerfScore > 24, and perfScore=7.37838]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 24.6444 secs, and comparison 16.6702 sec, and warnIfPerfScore > 1.7, and perfScore=0.676432]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.62429 secs, and comparison 6.8629 sec, and warnIfPerfScore > 1.5, and perfScore=0.713081]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.8697 secs, and comparison 20.2371 sec, and warnIfPerfScore > 2.1, and perfScore=1.19961]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 13.6655 secs, and comparison 7.0454 sec, and warnIfPerfScore > 1.6, and perfScore=0.515562]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 12.9673 secs, and comparison 1.19924 sec, and warnIfPerfScore > 0.23, and perfScore=0.0924821]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.5969 secs, and comparison 19.4046 sec, and warnIfPerfScore > 1.3, and perfScore=1.04343]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0236 secs, and comparison 14.9628 sec, and warnIfPerfScore > 1.2, and perfScore=1.1489]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.23577 secs, and comparison 2.6259 sec, and warnIfPerfScore > 0.33, and perfScore=0.284319]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 12.8772 secs, and comparison 57.401 sec, and warnIfPerfScore > 6, and perfScore=4.45757]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.1726 secs, and comparison 16.4349 sec, and warnIfPerfScore > 0.8, and perfScore=1.0832]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.4606 secs, and comparison 19.3676 sec, and warnIfPerfScore > 1.4, and perfScore=1.33933]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.32661 secs, and comparison 4.91386 sec, and warnIfPerfScore > 0.65, and perfScore=0.526865]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 17.7391 secs, and comparison 52.1998 sec, and warnIfPerfScore > 4.4, and perfScore=2.94264]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.32631 secs, and comparison 4.70047 sec, and warnIfPerfScore > 0.6, and perfScore=0.504001]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.62073 secs, and comparison 4.46499 sec, and warnIfPerfScore > 0.6, and perfScore=0.464101]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 8.90933 secs, and comparison 4.69986 sec, and warnIfPerfScore > 0.6, and perfScore=0.527521]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.27061 secs, and comparison 5.90184 sec, and warnIfPerfScore > 1.3, and perfScore=0.636618]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.1969 secs, and comparison 13.0263 sec, and warnIfPerfScore > 1.3, and perfScore=1.27748]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 139.745 secs, and comparison 9.13411 sec, and warnIfPerfScore > 0.3, and perfScore=0.0653628]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 38.9222 secs, and comparison 39.244 sec, and warnIfPerfScore > 1.5, and perfScore=1.00827]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.44281 secs, and comparison 5.58991 sec, and warnIfPerfScore > 0.55, and perfScore=0.591975]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15 secs, and comparison 6.65591 sec, and warnIfPerfScore > 0.1, and perfScore=0.443728]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.48744 sec, and warnIfPerfScore > 0.5, and perfScore=0.165829]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 6 seconds]]]

Succeeded
