Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 21 10:6:18 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.0151 secs, and comparison 4.63946 sec, and warnIfPerfScore > 0.62, and perfScore=0.771301]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.05611 secs, and comparison 2.85707 sec, and warnIfPerfScore > 0.5, and perfScore=0.471766]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.24125 secs, and comparison 6.87983 sec, and warnIfPerfScore > 1.05, and perfScore=1.10232]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.50925 secs, and comparison 3.3154 sec, and warnIfPerfScore > 0.45, and perfScore=0.944761]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.26856 secs, and comparison 3.83885 sec, and warnIfPerfScore > 0.55, and perfScore=0.899332]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.10782 secs, and comparison 17.225 sec, and warnIfPerfScore > 2.8, and perfScore=5.54248]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.76402 secs, and comparison 18.4467 sec, and warnIfPerfScore > 2.9, and perfScore=4.90081]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.69028 secs, and comparison 55.1475 sec, and warnIfPerfScore > 9.7, and perfScore=11.7578]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 9.08148 secs, and comparison 20.0556 sec, and warnIfPerfScore > 1.6, and perfScore=2.20841]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 10.4491 secs, and comparison 10.2292 sec, and warnIfPerfScore > 1.5, and perfScore=0.978956]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 4.69234 secs, and comparison 21.3278 sec, and warnIfPerfScore > 2.1, and perfScore=4.54524]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.08868 secs, and comparison 8.38557 sec, and warnIfPerfScore > 1.3, and perfScore=1.0367]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.4983 secs, and comparison 3.05559 sec, and warnIfPerfScore > 0.18, and perfScore=0.359553]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.60139 secs, and comparison 6.07653 sec, and warnIfPerfScore > 1.3, and perfScore=1.32058]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.15991 secs, and comparison 15.4418 sec, and warnIfPerfScore > 1.2, and perfScore=2.50682]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 27.4805 secs, and comparison 2.81807 sec, and warnIfPerfScore > 0.33, and perfScore=0.102548]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 5.83899 secs, and comparison 84.7521 sec, and warnIfPerfScore > 6, and perfScore=14.5149]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 19.24 secs, and comparison 8.02551 sec, and warnIfPerfScore > 0.5, and perfScore=0.417127]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 11.7327 secs, and comparison 81.2054 sec, and warnIfPerfScore > 4.4, and perfScore=6.92129]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 21.3249 secs, and comparison 7.60422 sec, and warnIfPerfScore > 0.6, and perfScore=0.356588]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.7339 secs, and comparison 21.9844 sec, and warnIfPerfScore > 1.5, and perfScore=1.39726]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 19.7398 secs, and comparison 5.06172 sec, and warnIfPerfScore > 0.55, and perfScore=0.256422]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.84797 sec, and warnIfPerfScore > 0.25, and perfScore=0.123198]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.23765 sec, and warnIfPerfScore > 0.5, and perfScore=0.48251]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 47 seconds]]]

Succeeded
