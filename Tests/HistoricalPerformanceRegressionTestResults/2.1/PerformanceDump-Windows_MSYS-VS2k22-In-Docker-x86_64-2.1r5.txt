Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 6:58:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 4.83966 secs, and comparison 4.07232 sec, and warnIfPerfScore > 0.65, and perfScore=0.841448]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 4.83532 secs, and comparison 2.18974 sec, and warnIfPerfScore > 0.5, and perfScore=0.452863]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.39362 secs, and comparison 6.67032 sec, and warnIfPerfScore > 1.05, and perfScore=0.902173]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.08259 secs, and comparison 6.68948 sec, and warnIfPerfScore > 1.15, and perfScore=1.09978]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.55088 secs, and comparison 2.27226 sec, and warnIfPerfScore > 0.48, and perfScore=0.300926]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.5443 secs, and comparison 2.84315 sec, and warnIfPerfScore > 0.57, and perfScore=0.376861]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.0098 secs, and comparison 17.3099 sec, and warnIfPerfScore > 2.9, and perfScore=2.88027]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.53758 secs, and comparison 17.201 sec, and warnIfPerfScore > 2.9, and perfScore=2.6311]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.4134 secs, and comparison 132.953 sec, and warnIfPerfScore > 24, and perfScore=24.56]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.39934 secs, and comparison 9.18151 sec, and warnIfPerfScore > 1.7, and perfScore=1.70049]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.1631 secs, and comparison 5.04601 sec, and warnIfPerfScore > 1.5, and perfScore=0.977321]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.69266 secs, and comparison 11.1112 sec, and warnIfPerfScore > 2.1, and perfScore=2.36778]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.37197 secs, and comparison 3.83075 sec, and warnIfPerfScore > 1.6, and perfScore=0.601188]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 6.67038 secs, and comparison 0.653644 sec, and warnIfPerfScore > 0.23, and perfScore=0.0979921]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2925 secs, and comparison 11.7567 sec, and warnIfPerfScore > 1.3, and perfScore=1.04111]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.03078 secs, and comparison 4.90743 sec, and warnIfPerfScore > 1.2, and perfScore=0.611078]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.78185 secs, and comparison 1.87695 sec, and warnIfPerfScore > 0.33, and perfScore=0.241196]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 7.6857 secs, and comparison 36.6567 sec, and warnIfPerfScore > 6, and perfScore=4.76947]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.68593 secs, and comparison 4.7024 sec, and warnIfPerfScore > 0.8, and perfScore=0.611819]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.63041 secs, and comparison 7.21449 sec, and warnIfPerfScore > 1.4, and perfScore=0.945492]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.80472 secs, and comparison 3.24479 sec, and warnIfPerfScore > 0.65, and perfScore=0.415747]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.14125 secs, and comparison 34.1366 sec, and warnIfPerfScore > 4.4, and perfScore=4.19304]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.74954 secs, and comparison 3.16196 sec, and warnIfPerfScore > 0.6, and perfScore=0.40802]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.75122 secs, and comparison 3.14283 sec, and warnIfPerfScore > 0.6, and perfScore=0.405463]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.71507 secs, and comparison 3.15684 sec, and warnIfPerfScore > 0.6, and perfScore=0.409179]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.68834 secs, and comparison 4.9223 sec, and warnIfPerfScore > 1.3, and perfScore=0.64023]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.31011 secs, and comparison 7.94468 sec, and warnIfPerfScore > 1.3, and perfScore=0.956025]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 37.4744 secs, and comparison 4.73232 sec, and warnIfPerfScore > 0.3, and perfScore=0.126282]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.52218 secs, and comparison 8.89191 sec, and warnIfPerfScore > 1.5, and perfScore=1.61022]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.19251 secs, and comparison 2.52468 sec, and warnIfPerfScore > 0.55, and perfScore=0.407698]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 15 secs, and comparison 0.678156 sec, and warnIfPerfScore > 0.1, and perfScore=0.0452104]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.69428 sec, and warnIfPerfScore > 0.5, and perfScore=0.179619]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.71996 secs, and comparison 7.38281 sec, and warnIfPerfScore > 2, and perfScore=1.09864]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.46647 secs, and comparison 12.916 sec, and warnIfPerfScore > 3.6, and perfScore=1.72987]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 43 seconds]]]

Succeeded
