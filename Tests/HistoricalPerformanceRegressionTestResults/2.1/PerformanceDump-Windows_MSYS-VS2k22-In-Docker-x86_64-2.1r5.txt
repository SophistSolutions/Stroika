Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  8 14:30:59 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 5.85681 secs, and comparison 4.4378 sec, and warnIfPerfScore > 0.65, and perfScore=0.757716]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 5.8104 secs, and comparison 2.44638 sec, and warnIfPerfScore > 0.5, and perfScore=0.421035]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.06972 secs, and comparison 7.32912 sec, and warnIfPerfScore > 1.05, and perfScore=0.908225]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.56478 secs, and comparison 7.33541 sec, and warnIfPerfScore > 1.15, and perfScore=1.11739]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.13712 secs, and comparison 2.52454 sec, and warnIfPerfScore > 0.48, and perfScore=0.31025]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.05059 secs, and comparison 3.19538 sec, and warnIfPerfScore > 0.57, and perfScore=0.396913]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.0734 secs, and comparison 19.2667 sec, and warnIfPerfScore > 2.9, and perfScore=2.38645]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.32835 secs, and comparison 19.1483 sec, and warnIfPerfScore > 2.9, and perfScore=2.29917]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.64295 secs, and comparison 138.234 sec, and warnIfPerfScore > 24, and perfScore=20.8091]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.26903 secs, and comparison 10.392 sec, and warnIfPerfScore > 1.7, and perfScore=1.65767]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.36001 secs, and comparison 5.30894 sec, and warnIfPerfScore > 1.5, and perfScore=0.990473]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.75629 secs, and comparison 12.3547 sec, and warnIfPerfScore > 2.1, and perfScore=2.1463]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.06042 secs, and comparison 4.10255 sec, and warnIfPerfScore > 1.6, and perfScore=0.581064]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 7.07505 secs, and comparison 0.658208 sec, and warnIfPerfScore > 0.23, and perfScore=0.0930323]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.7832 secs, and comparison 12.2437 sec, and warnIfPerfScore > 1.3, and perfScore=1.03908]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.65881 secs, and comparison 5.10465 sec, and warnIfPerfScore > 1.2, and perfScore=0.589532]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.15761 secs, and comparison 1.99723 sec, and warnIfPerfScore > 0.33, and perfScore=0.24483]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.30107 secs, and comparison 39.2771 sec, and warnIfPerfScore > 6, and perfScore=4.73157]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.33112 secs, and comparison 4.94814 sec, and warnIfPerfScore > 0.8, and perfScore=0.593934]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.3037 secs, and comparison 7.75969 sec, and warnIfPerfScore > 1.4, and perfScore=0.934486]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.10908 secs, and comparison 3.50256 sec, and warnIfPerfScore > 0.65, and perfScore=0.431931]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.73686 secs, and comparison 36.7391 sec, and warnIfPerfScore > 4.4, and perfScore=4.20508]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.01124 secs, and comparison 3.34933 sec, and warnIfPerfScore > 0.6, and perfScore=0.418079]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.13248 secs, and comparison 3.39372 sec, and warnIfPerfScore > 0.6, and perfScore=0.417305]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.1441 secs, and comparison 3.33621 sec, and warnIfPerfScore > 0.6, and perfScore=0.409647]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.02882 secs, and comparison 5.2372 sec, and warnIfPerfScore > 1.3, and perfScore=0.652301]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.58692 secs, and comparison 8.51188 sec, and warnIfPerfScore > 1.3, and perfScore=0.991261]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 39.5982 secs, and comparison 5.22303 sec, and warnIfPerfScore > 0.3, and perfScore=0.131901]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.01695 secs, and comparison 10.0869 sec, and warnIfPerfScore > 1.5, and perfScore=1.67642]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.12015 secs, and comparison 2.88997 sec, and warnIfPerfScore > 0.55, and perfScore=0.472206]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.737309 sec, and warnIfPerfScore > 0.1, and perfScore=0.0491539]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.87118 sec, and warnIfPerfScore > 0.5, and perfScore=0.191412]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.11976 secs, and comparison 7.61661 sec, and warnIfPerfScore > 2, and perfScore=0.938034]
	                 	codecvt_utf8 is FASTER

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.2218 secs, and comparison 14.6317 sec, and warnIfPerfScore > 3.6, and perfScore=1.10663]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 39 seconds]]]

Succeeded
