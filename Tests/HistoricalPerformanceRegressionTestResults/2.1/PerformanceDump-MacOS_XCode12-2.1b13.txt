Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 12 23:49:30 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.1603 secs, and comparison 7.16178 sec, and warnIfPerfScore > 0.62, and perfScore=0.704876]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.82675 secs, and comparison 4.83637 sec, and warnIfPerfScore > 0.5, and perfScore=0.492164]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 18.2686 secs, and comparison 13.6872 sec, and warnIfPerfScore > 1.05, and perfScore=0.749223]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 36.7593 secs, and comparison 6.51477 sec, and warnIfPerfScore > 0.48, and perfScore=0.177228]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 36.6501 secs, and comparison 6.61785 sec, and warnIfPerfScore > 0.57, and perfScore=0.180568]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 26.3824 secs, and comparison 65.5169 sec, and warnIfPerfScore > 2.9, and perfScore=2.48336]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 28.1554 secs, and comparison 67.4644 sec, and warnIfPerfScore > 2.9, and perfScore=2.39615]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 19.9763 secs, and comparison 199.814 sec, and warnIfPerfScore > 9.7, and perfScore=10.0026]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 24.7446 secs, and comparison 32.5714 sec, and warnIfPerfScore > 1.6, and perfScore=1.31631]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 10.0083 secs, and comparison 7.08362 sec, and warnIfPerfScore > 1.5, and perfScore=0.707776]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.0512 secs, and comparison 39.6575 sec, and warnIfPerfScore > 2.1, and perfScore=2.63484]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 15.0731 secs, and comparison 8.37141 sec, and warnIfPerfScore > 1.3, and perfScore=0.555385]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 14.0567 secs, and comparison 2.17581 sec, and warnIfPerfScore > 0.23, and perfScore=0.154789]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.08 secs, and comparison 19.2784 sec, and warnIfPerfScore > 1.3, and perfScore=1.06629]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.067 secs, and comparison 14.2483 sec, and warnIfPerfScore > 1.2, and perfScore=1.01289]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.0262 secs, and comparison 2.16681 sec, and warnIfPerfScore > 0.33, and perfScore=0.216114]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 13.7328 secs, and comparison 61.0797 sec, and warnIfPerfScore > 6, and perfScore=4.44772]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.2723 secs, and comparison 5.2156 sec, and warnIfPerfScore > 0.5, and perfScore=0.507732]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.966 secs, and comparison 54.4812 sec, and warnIfPerfScore > 4.4, and perfScore=3.2112]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.4236 secs, and comparison 5.04262 sec, and warnIfPerfScore > 0.6, and perfScore=0.483771]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 37.5431 secs, and comparison 51.8842 sec, and warnIfPerfScore > 1.5, and perfScore=1.38199]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.52925 secs, and comparison 6.77085 sec, and warnIfPerfScore > 0.55, and perfScore=0.793839]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 15 secs, and comparison 8.11278 sec, and warnIfPerfScore > 0.25, and perfScore=0.540852]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.71384 sec, and warnIfPerfScore > 0.5, and perfScore=0.247589]
	                 	Test_Optional_ is FASTER

[[[Tests took: 18 minutes, 21 seconds]]]

Succeeded
