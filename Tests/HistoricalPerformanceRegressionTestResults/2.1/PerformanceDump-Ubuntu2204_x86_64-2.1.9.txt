Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 12 10:57:58 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 3.36576 secs, and comparison 1.4352 sec, and warnIfPerfScore > 0.65, and perfScore=0.426413]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.32841 secs, and comparison 3.07569 sec, and warnIfPerfScore > 0.5, and perfScore=0.924072]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.67057 secs, and comparison 6.84147 sec, and warnIfPerfScore > 1.05, and perfScore=2.5618]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 2.31571 secs, and comparison 7.02641 sec, and warnIfPerfScore > 1.15, and perfScore=3.03424]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.9856 secs, and comparison 0.946686 sec, and warnIfPerfScore > 0.48, and perfScore=0.237526]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.64158 secs, and comparison 1.06047 sec, and warnIfPerfScore > 0.57, and perfScore=0.228472]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 3.92959 secs, and comparison 12.7607 sec, and warnIfPerfScore > 2.9, and perfScore=3.24734]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 4.66363 secs, and comparison 12.8985 sec, and warnIfPerfScore > 2.9, and perfScore=2.76576]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 5.5889 secs, and comparison 44.2737 sec, and warnIfPerfScore > 24, and perfScore=7.92171]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.06508 secs, and comparison 7.70472 sec, and warnIfPerfScore > 1.7, and perfScore=1.52114]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.02719 secs, and comparison 6.65093 sec, and warnIfPerfScore > 1.5, and perfScore=0.946457]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 2.70392 secs, and comparison 9.26311 sec, and warnIfPerfScore > 2.1, and perfScore=3.42581]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.08386 secs, and comparison 4.15702 sec, and warnIfPerfScore > 1.6, and perfScore=1.01791]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 4.327 secs, and comparison 1.35169 sec, and warnIfPerfScore > 0.23, and perfScore=0.312385]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.36211 secs, and comparison 4.44141 sec, and warnIfPerfScore > 1.3, and perfScore=1.32102]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.04271 secs, and comparison 6.6746 sec, and warnIfPerfScore > 1.2, and perfScore=2.19364]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 20.1617 secs, and comparison 1.90761 sec, and warnIfPerfScore > 0.33, and perfScore=0.0946157]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.9144 secs, and comparison 41.1908 sec, and warnIfPerfScore > 6, and perfScore=14.1335]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.11163 secs, and comparison 6.01508 sec, and warnIfPerfScore > 0.8, and perfScore=1.93309]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.9108 secs, and comparison 7.72295 sec, and warnIfPerfScore > 1.4, and perfScore=2.65321]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.8914 secs, and comparison 3.70963 sec, and warnIfPerfScore > 0.65, and perfScore=0.186494]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.48218 secs, and comparison 37.6134 sec, and warnIfPerfScore > 4.4, and perfScore=8.39176]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.6045 secs, and comparison 3.74078 sec, and warnIfPerfScore > 0.6, and perfScore=0.274967]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.9203 secs, and comparison 3.82534 sec, and warnIfPerfScore > 0.6, and perfScore=0.274803]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.0163 secs, and comparison 3.83271 sec, and warnIfPerfScore > 0.6, and perfScore=0.273448]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.8422 secs, and comparison 4.21284 sec, and warnIfPerfScore > 1.3, and perfScore=0.304347]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 21.2543 secs, and comparison 9.58291 sec, and warnIfPerfScore > 1.3, and perfScore=0.450869]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 19.5875 secs, and comparison 5.87601 sec, and warnIfPerfScore > 0.3, and perfScore=0.299988]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.68675 secs, and comparison 14.1689 sec, and warnIfPerfScore > 1.5, and perfScore=1.84328]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.78818 secs, and comparison 2.13103 sec, and warnIfPerfScore > 0.55, and perfScore=0.313932]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.779499 sec, and warnIfPerfScore > 0.1, and perfScore=0.0519666]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42585 sec, and warnIfPerfScore > 0.5, and perfScore=0.0950569]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 27 seconds]]]

Succeeded
