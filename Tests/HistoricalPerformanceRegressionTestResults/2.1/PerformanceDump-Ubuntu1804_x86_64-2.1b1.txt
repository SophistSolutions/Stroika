Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jun  7 8:38:10 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.92398 secs, and comparison 4.62081 sec, and warnIfPerfScore > 0.62, and perfScore=0.780018]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.91312 secs, and comparison 2.86385 sec, and warnIfPerfScore > 0.5, and perfScore=0.484322]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.35637 secs, and comparison 6.86871 sec, and warnIfPerfScore > 1.05, and perfScore=1.0806]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.83838 secs, and comparison 3.69605 sec, and warnIfPerfScore > 0.48, and perfScore=0.962917]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.5594 secs, and comparison 4.27576 sec, and warnIfPerfScore > 0.57, and perfScore=0.93779]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.53894 secs, and comparison 17.3657 sec, and warnIfPerfScore > 2.9, and perfScore=4.90703]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.19918 secs, and comparison 18.3805 sec, and warnIfPerfScore > 2.9, and perfScore=4.37716]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.12354 secs, and comparison 55.7915 sec, and warnIfPerfScore > 9.7, and perfScore=10.8893]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.11823 secs, and comparison 10.0639 sec, and warnIfPerfScore > 1.6, and perfScore=1.96628]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.02367 secs, and comparison 5.96189 sec, and warnIfPerfScore > 1.5, and perfScore=0.989743]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.82234 secs, and comparison 10.7271 sec, and warnIfPerfScore > 2.1, and perfScore=3.80077]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.45832 secs, and comparison 4.96787 sec, and warnIfPerfScore > 1.3, and perfScore=1.11429]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.68538 secs, and comparison 1.76597 sec, and warnIfPerfScore > 0.23, and perfScore=0.376911]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.78139 secs, and comparison 4.95074 sec, and warnIfPerfScore > 1.3, and perfScore=1.30924]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 3.24638 secs, and comparison 9.9856 sec, and warnIfPerfScore > 1.2, and perfScore=3.07592]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 16.5324 secs, and comparison 1.57173 sec, and warnIfPerfScore > 0.33, and perfScore=0.0950696]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.13556 secs, and comparison 42.6618 sec, and warnIfPerfScore > 6, and perfScore=13.6058]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.4776 secs, and comparison 3.95161 sec, and warnIfPerfScore > 0.5, and perfScore=0.344289]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 5.56976 secs, and comparison 38.2712 sec, and warnIfPerfScore > 4.4, and perfScore=6.87124]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.8244 secs, and comparison 3.81146 sec, and warnIfPerfScore > 0.6, and perfScore=0.297204]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.97719 secs, and comparison 11.7752 sec, and warnIfPerfScore > 1.5, and perfScore=1.47611]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 7.58481 secs, and comparison 2.04134 sec, and warnIfPerfScore > 0.55, and perfScore=0.269135]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 15 secs, and comparison 1.07976 sec, and warnIfPerfScore > 0.25, and perfScore=0.0719837]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.80043 sec, and warnIfPerfScore > 0.5, and perfScore=0.253362]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 46 seconds]]]

Succeeded
