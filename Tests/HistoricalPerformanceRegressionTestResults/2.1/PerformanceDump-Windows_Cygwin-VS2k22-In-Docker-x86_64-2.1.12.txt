Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 17:53:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.58222 secs, and comparison 4.32315 sec, and warnIfPerfScore > 0.65, and perfScore=0.77445]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.42759 secs, and comparison 2.53442 sec, and warnIfPerfScore > 0.5, and perfScore=0.46695]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.0619 secs, and comparison 7.16487 sec, and warnIfPerfScore > 1.05, and perfScore=0.888733]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.97629 secs, and comparison 7.58609 sec, and warnIfPerfScore > 1.15, and perfScore=1.08741]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.66388 secs, and comparison 2.2181 sec, and warnIfPerfScore > 0.48, and perfScore=0.256017]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.72882 secs, and comparison 2.72065 sec, and warnIfPerfScore > 0.57, and perfScore=0.311686]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.87508 secs, and comparison 18.9146 sec, and warnIfPerfScore > 2.9, and perfScore=2.75118]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.15752 secs, and comparison 18.8991 sec, and warnIfPerfScore > 2.9, and perfScore=2.64045]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.9648 secs, and comparison 137.813 sec, and warnIfPerfScore > 24, and perfScore=23.1044]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.7444 secs, and comparison 9.95137 sec, and warnIfPerfScore > 1.7, and perfScore=1.73236]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.64201 secs, and comparison 5.26129 sec, and warnIfPerfScore > 1.5, and perfScore=0.93252]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.52575 secs, and comparison 11.9786 sec, and warnIfPerfScore > 2.1, and perfScore=2.16777]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.77249 secs, and comparison 4.09407 sec, and warnIfPerfScore > 1.6, and perfScore=0.604514]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 7.1314 secs, and comparison 0.682444 sec, and warnIfPerfScore > 0.23, and perfScore=0.0956957]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9583 secs, and comparison 12.5186 sec, and warnIfPerfScore > 1.3, and perfScore=1.04685]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.37518 secs, and comparison 5.3397 sec, and warnIfPerfScore > 1.2, and perfScore=0.637562]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.4861 secs, and comparison 2.05008 sec, and warnIfPerfScore > 0.33, and perfScore=0.241581]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 8.0276 secs, and comparison 39.9491 sec, and warnIfPerfScore > 6, and perfScore=4.97646]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.14713 secs, and comparison 5.18896 sec, and warnIfPerfScore > 0.8, and perfScore=0.636906]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.99142 secs, and comparison 7.59487 sec, and warnIfPerfScore > 1.4, and perfScore=0.950379]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.4633 secs, and comparison 3.52383 sec, and warnIfPerfScore > 0.65, and perfScore=0.416366]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.4514 secs, and comparison 37.3232 sec, and warnIfPerfScore > 4.4, and perfScore=4.41622]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.3214 secs, and comparison 3.4536 sec, and warnIfPerfScore > 0.6, and perfScore=0.415026]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.31554 secs, and comparison 3.46418 sec, and warnIfPerfScore > 0.6, and perfScore=0.416592]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.54603 secs, and comparison 3.45892 sec, and warnIfPerfScore > 0.6, and perfScore=0.40474]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.31299 secs, and comparison 5.40602 sec, and warnIfPerfScore > 1.3, and perfScore=0.650309]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.96931 secs, and comparison 8.69711 sec, and warnIfPerfScore > 1.3, and perfScore=0.969652]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 38.6051 secs, and comparison 6.09574 sec, and warnIfPerfScore > 0.3, and perfScore=0.1579]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.83334 secs, and comparison 9.60533 sec, and warnIfPerfScore > 1.5, and perfScore=1.64663]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.32779 secs, and comparison 2.72624 sec, and warnIfPerfScore > 0.55, and perfScore=0.430836]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.61788 sec, and warnIfPerfScore > 0.1, and perfScore=0.041192]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.98323 sec, and warnIfPerfScore > 0.5, and perfScore=0.198882]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.87711 secs, and comparison 13.0404 sec, and warnIfPerfScore > 2, and perfScore=1.8962]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.01535 secs, and comparison 14.7603 sec, and warnIfPerfScore > 3.6, and perfScore=1.84151]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 39 seconds]]]

Succeeded
