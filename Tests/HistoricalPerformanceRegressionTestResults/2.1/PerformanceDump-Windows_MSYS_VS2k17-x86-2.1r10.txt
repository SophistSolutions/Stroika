Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri May 13 14:39:34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 12.0226 secs, and comparison 5.25913 sec, and warnIfPerfScore > 0.65, and perfScore=0.437439]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.8279 secs, and comparison 3.33612 sec, and warnIfPerfScore > 0.5, and perfScore=0.282057]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.6919 secs, and comparison 10.4162 sec, and warnIfPerfScore > 1.05, and perfScore=0.89089]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.26843 secs, and comparison 10.413 sec, and warnIfPerfScore > 1.15, and perfScore=1.12349]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.0496 secs, and comparison 3.44089 sec, and warnIfPerfScore > 0.48, and perfScore=0.285561]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.0931 secs, and comparison 4.30895 sec, and warnIfPerfScore > 0.57, and perfScore=0.356314]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.3654 secs, and comparison 30.0681 sec, and warnIfPerfScore > 2.9, and perfScore=2.09309]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.9142 secs, and comparison 31.098 sec, and warnIfPerfScore > 2.9, and perfScore=2.23499]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 13.5679 secs, and comparison 174.669 sec, and warnIfPerfScore > 24, and perfScore=12.8736]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.5811 secs, and comparison 15.5528 sec, and warnIfPerfScore > 1.7, and perfScore=1.14518]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.1355 secs, and comparison 14.0155 sec, and warnIfPerfScore > 1.5, and perfScore=0.991515]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.91935 secs, and comparison 18.8112 sec, and warnIfPerfScore > 2.1, and perfScore=1.89642]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 14.5939 secs, and comparison 12.1728 sec, and warnIfPerfScore > 1.6, and perfScore=0.834105]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15.6931 secs, and comparison 1.49824 sec, and warnIfPerfScore > 0.23, and perfScore=0.0954716]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 16.9145 secs, and comparison 15.3703 sec, and warnIfPerfScore > 1.3, and perfScore=0.908709]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 11.9816 secs, and comparison 8.27312 sec, and warnIfPerfScore > 1.2, and perfScore=0.690484]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.2508 secs, and comparison 2.63264 sec, and warnIfPerfScore > 0.33, and perfScore=0.233996]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 11.2702 secs, and comparison 51.0572 sec, and warnIfPerfScore > 6, and perfScore=4.53027]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.9501 secs, and comparison 7.58777 sec, and warnIfPerfScore > 0.8, and perfScore=0.692941]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.2092 secs, and comparison 16.969 sec, and warnIfPerfScore > 1.4, and perfScore=1.51385]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.51385}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.8414 secs, and comparison 4.35591 sec, and warnIfPerfScore > 0.65, and perfScore=0.401785]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.8474 secs, and comparison 46.3858 sec, and warnIfPerfScore > 4.4, and perfScore=3.91527]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.4575 secs, and comparison 4.37467 sec, and warnIfPerfScore > 0.6, and perfScore=0.418329]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.7027 secs, and comparison 4.84563 sec, and warnIfPerfScore > 0.6, and perfScore=0.452749]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.6978 secs, and comparison 5.09052 sec, and warnIfPerfScore > 0.6, and perfScore=0.475848]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.1289 secs, and comparison 8.97596 sec, and warnIfPerfScore > 1.3, and perfScore=0.88617]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.7392 secs, and comparison 13.5763 sec, and warnIfPerfScore > 1.3, and perfScore=1.15649]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 73.0268 secs, and comparison 8.02603 sec, and warnIfPerfScore > 0.3, and perfScore=0.109905]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.6127 secs, and comparison 20.1849 sec, and warnIfPerfScore > 1.5, and perfScore=1.38133]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 17.3237 secs, and comparison 5.36831 sec, and warnIfPerfScore > 0.55, and perfScore=0.309882]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 15 secs, and comparison 1.26505 sec, and warnIfPerfScore > 0.1, and perfScore=0.0843366]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.88627 sec, and warnIfPerfScore > 0.5, and perfScore=0.325752]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.8447 secs, and comparison 23.2818 sec, and warnIfPerfScore > 2, and perfScore=1.68164]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.3697 secs, and comparison 38.292 sec, and warnIfPerfScore > 3.6, and perfScore=2.66478]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 11 seconds]]]

Succeeded
