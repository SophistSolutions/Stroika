Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 3:38:30 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 9.02252 secs, and comparison 6.222 sec, and warnIfPerfScore > 0.65, and perfScore=0.689608]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.87732 secs, and comparison 3.01257 sec, and warnIfPerfScore > 0.5, and perfScore=0.304999]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.3113 secs, and comparison 10.8073 sec, and warnIfPerfScore > 1.05, and perfScore=0.877837]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.0951 secs, and comparison 11.8444 sec, and warnIfPerfScore > 1.15, and perfScore=1.17329]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.8311 secs, and comparison 3.91471 sec, and warnIfPerfScore > 0.48, and perfScore=0.330884]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.398 secs, and comparison 4.43319 sec, and warnIfPerfScore > 0.57, and perfScore=0.357572]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.165 secs, and comparison 30.8785 sec, and warnIfPerfScore > 2.9, and perfScore=2.5383]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.0135 secs, and comparison 33.0161 sec, and warnIfPerfScore > 2.9, and perfScore=2.53706]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 9.16583 secs, and comparison 161.474 sec, and warnIfPerfScore > 24, and perfScore=17.6169]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.0771 secs, and comparison 16.1877 sec, and warnIfPerfScore > 1.7, and perfScore=1.46137]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 11.7058 secs, and comparison 10.707 sec, and warnIfPerfScore > 1.5, and perfScore=0.914673]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 9.63283 secs, and comparison 19.8356 sec, and warnIfPerfScore > 2.1, and perfScore=2.05917]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.0655 secs, and comparison 7.65671 sec, and warnIfPerfScore > 1.6, and perfScore=0.634598]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 13.7712 secs, and comparison 1.35069 sec, and warnIfPerfScore > 0.23, and perfScore=0.0980805]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.2305 secs, and comparison 15.4524 sec, and warnIfPerfScore > 1.3, and perfScore=1.16794]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 11.1847 secs, and comparison 10.0413 sec, and warnIfPerfScore > 1.2, and perfScore=0.897773]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.879 secs, and comparison 3.23381 sec, and warnIfPerfScore > 0.33, and perfScore=0.217341]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.2356 secs, and comparison 52.9536 sec, and warnIfPerfScore > 6, and perfScore=4.713]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 10.8746 secs, and comparison 10.0025 sec, and warnIfPerfScore > 0.8, and perfScore=0.919802]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.1241 secs, and comparison 16.7029 sec, and warnIfPerfScore > 1.4, and perfScore=1.50151]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.1329 secs, and comparison 4.60985 sec, and warnIfPerfScore > 0.65, and perfScore=0.304625]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 12.2378 secs, and comparison 49.2902 sec, and warnIfPerfScore > 4.4, and perfScore=4.0277]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.4326 secs, and comparison 4.81625 sec, and warnIfPerfScore > 0.6, and perfScore=0.333706]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.1136 secs, and comparison 4.85111 sec, and warnIfPerfScore > 0.6, and perfScore=0.320976]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.4004 secs, and comparison 4.95928 sec, and warnIfPerfScore > 0.6, and perfScore=0.344384]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 14.2668 secs, and comparison 10.3254 sec, and warnIfPerfScore > 1.3, and perfScore=0.723735]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 16.4847 secs, and comparison 14.7251 sec, and warnIfPerfScore > 1.3, and perfScore=0.893257]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 67.7906 secs, and comparison 9.13046 sec, and warnIfPerfScore > 0.3, and perfScore=0.134686]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.88837 secs, and comparison 16.7958 sec, and warnIfPerfScore > 1.5, and perfScore=1.69854]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 17.815 secs, and comparison 5.6347 sec, and warnIfPerfScore > 0.55, and perfScore=0.31629]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42023 sec, and warnIfPerfScore > 0.1, and perfScore=0.0946823]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.20531 sec, and warnIfPerfScore > 0.5, and perfScore=0.34702]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.4416 secs, and comparison 22.9019 sec, and warnIfPerfScore > 2, and perfScore=1.70381]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 12.5915 secs, and comparison 23.7663 sec, and warnIfPerfScore > 3.6, and perfScore=1.88749]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 43 seconds]]]

Succeeded
