Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 14 13:34:58 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 7.33893 secs, and comparison 5.28487 sec, and warnIfPerfScore > 0.65, and perfScore=0.720114]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.720114}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.3063 secs, and comparison 3.57872 sec, and warnIfPerfScore > 0.5, and perfScore=0.347236]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.6517 secs, and comparison 10.0768 sec, and warnIfPerfScore > 1.05, and perfScore=0.796472]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.33139 secs, and comparison 9.99829 sec, and warnIfPerfScore > 1.15, and perfScore=1.07147]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.4062 secs, and comparison 3.38531 sec, and warnIfPerfScore > 0.48, and perfScore=0.252518]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.3343 secs, and comparison 3.79272 sec, and warnIfPerfScore > 0.57, and perfScore=0.284435]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 14.5865 secs, and comparison 29.4743 sec, and warnIfPerfScore > 2.9, and perfScore=2.02066]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.5262 secs, and comparison 31.0901 sec, and warnIfPerfScore > 2.9, and perfScore=2.00242]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 12.923 secs, and comparison 191.59 sec, and warnIfPerfScore > 24, and perfScore=14.8254]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8481 secs, and comparison 13.9335 sec, and warnIfPerfScore > 1.7, and perfScore=1.08448]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 13.6756 secs, and comparison 13.0194 sec, and warnIfPerfScore > 1.5, and perfScore=0.952017]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.4151 secs, and comparison 15.9358 sec, and warnIfPerfScore > 2.1, and perfScore=1.28358]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 15.8328 secs, and comparison 10.4576 sec, and warnIfPerfScore > 1.6, and perfScore=0.660507]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 16.7623 secs, and comparison 2.16063 sec, and warnIfPerfScore > 0.23, and perfScore=0.128898]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 16.5979 secs, and comparison 15.6949 sec, and warnIfPerfScore > 1.3, and perfScore=0.945596]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 13.4652 secs, and comparison 8.84912 sec, and warnIfPerfScore > 1.2, and perfScore=0.657186]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.22166 secs, and comparison 2.32853 sec, and warnIfPerfScore > 0.33, and perfScore=0.252507]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 13.0374 secs, and comparison 45.8274 sec, and warnIfPerfScore > 6, and perfScore=3.51506]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 13.0437 secs, and comparison 8.2301 sec, and warnIfPerfScore > 0.8, and perfScore=0.630964]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 13.044 secs, and comparison 11.7058 sec, and warnIfPerfScore > 1.4, and perfScore=0.897406]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.74043 secs, and comparison 4.18248 sec, and warnIfPerfScore > 0.65, and perfScore=0.429394]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 13.8973 secs, and comparison 43.5269 sec, and warnIfPerfScore > 4.4, and perfScore=3.13203]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.85073 secs, and comparison 4.20514 sec, and warnIfPerfScore > 0.6, and perfScore=0.426886]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.89463 secs, and comparison 4.18363 sec, and warnIfPerfScore > 0.6, and perfScore=0.422819]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.90468 secs, and comparison 4.22116 sec, and warnIfPerfScore > 0.6, and perfScore=0.426178]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 9.85926 secs, and comparison 7.74262 sec, and warnIfPerfScore > 1.3, and perfScore=0.785315]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.144 secs, and comparison 11.8779 sec, and warnIfPerfScore > 1.3, and perfScore=1.06586]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 71.648 secs, and comparison 7.95513 sec, and warnIfPerfScore > 0.3, and perfScore=0.111031]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.9188 secs, and comparison 21.4298 sec, and warnIfPerfScore > 1.5, and perfScore=1.26663]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.7041 secs, and comparison 4.34045 sec, and warnIfPerfScore > 0.55, and perfScore=0.405493]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 15 secs, and comparison 1.36753 sec, and warnIfPerfScore > 0.1, and perfScore=0.0911686]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.6328 sec, and warnIfPerfScore > 0.5, and perfScore=0.242187]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 16.7409 secs, and comparison 14.8739 sec, and warnIfPerfScore > 2, and perfScore=0.888478]
	                 	codecvt_utf8 is FASTER

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 17.8709 secs, and comparison 37.0201 sec, and warnIfPerfScore > 3.6, and perfScore=2.07153]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 56 seconds]]]

Succeeded
