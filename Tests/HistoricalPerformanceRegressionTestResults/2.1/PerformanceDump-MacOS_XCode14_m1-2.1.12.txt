Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec 11 9:53:23 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.19667 secs, and comparison 4.82142 sec, and warnIfPerfScore > 0.65, and perfScore=1.50826]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 3.19547 secs, and comparison 2.29616 sec, and warnIfPerfScore > 0.5, and perfScore=0.718568]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.58922 secs, and comparison 6.94283 sec, and warnIfPerfScore > 1.05, and perfScore=1.05366]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.01197 secs, and comparison 6.94293 sec, and warnIfPerfScore > 1.15, and perfScore=1.15485]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.49006 secs, and comparison 1.18766 sec, and warnIfPerfScore > 0.48, and perfScore=0.26451]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.50546 secs, and comparison 1.79136 sec, and warnIfPerfScore > 0.57, and perfScore=0.397597]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 5.32574 secs, and comparison 14.5132 sec, and warnIfPerfScore > 2.9, and perfScore=2.72511]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.0725 secs, and comparison 15.0874 sec, and warnIfPerfScore > 2.9, and perfScore=2.13324]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 9.1079 secs, and comparison 47.9445 sec, and warnIfPerfScore > 24, and perfScore=5.26406]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.30431 secs, and comparison 7.59893 sec, and warnIfPerfScore > 1.7, and perfScore=2.2997]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 5.12677 secs, and comparison 3.8732 sec, and warnIfPerfScore > 1.5, and perfScore=0.755487]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.76528 secs, and comparison 9.57441 sec, and warnIfPerfScore > 2.1, and perfScore=3.46236]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.10017 secs, and comparison 2.82372 sec, and warnIfPerfScore > 1.6, and perfScore=0.553652]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 5.34075 secs, and comparison 0.567447 sec, and warnIfPerfScore > 0.23, and perfScore=0.106249]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.19777 secs, and comparison 12.9087 sec, and warnIfPerfScore > 1.3, and perfScore=1.40346]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.86219 secs, and comparison 4.90927 sec, and warnIfPerfScore > 1.2, and perfScore=1.27111]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 3.96022 secs, and comparison 1.0081 sec, and warnIfPerfScore > 0.33, and perfScore=0.254557]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.66384 secs, and comparison 38.4053 sec, and warnIfPerfScore > 6, and perfScore=10.4823]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.55457 secs, and comparison 4.69638 sec, and warnIfPerfScore > 0.8, and perfScore=1.32122]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.58212 secs, and comparison 6.87765 sec, and warnIfPerfScore > 1.4, and perfScore=1.91999]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 3.82623 secs, and comparison 3.19199 sec, and warnIfPerfScore > 0.65, and perfScore=0.834238]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.3
	DETAILS:         	[baseline test 4.96021 secs, and comparison 36.1313 sec, and warnIfPerfScore > 4.4, and perfScore=7.28422]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 3.68346 secs, and comparison 3.0824 sec, and warnIfPerfScore > 0.6, and perfScore=0.836824]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 3.86706 secs, and comparison 3.0826 sec, and warnIfPerfScore > 0.6, and perfScore=0.797144]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 3.68584 secs, and comparison 3.08127 sec, and warnIfPerfScore > 0.6, and perfScore=0.835975]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 3.6858 secs, and comparison 2.76424 sec, and warnIfPerfScore > 1.3, and perfScore=0.749971]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.96225 secs, and comparison 8.2359 sec, and warnIfPerfScore > 1.3, and perfScore=2.07859]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 27.9514 secs, and comparison 4.13639 sec, and warnIfPerfScore > 0.3, and perfScore=0.147985]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.79237 secs, and comparison 11.3601 sec, and warnIfPerfScore > 1.5, and perfScore=1.29205]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 2.49827 secs, and comparison 2.34191 sec, and warnIfPerfScore > 0.55, and perfScore=0.937414]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.98202 sec, and warnIfPerfScore > 0.1, and perfScore=0.132135]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.91464 sec, and warnIfPerfScore > 0.5, and perfScore=0.127643]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 22 seconds]]]

Succeeded
