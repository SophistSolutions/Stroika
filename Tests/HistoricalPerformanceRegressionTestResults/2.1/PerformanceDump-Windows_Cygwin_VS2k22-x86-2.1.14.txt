Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Sep  4 21:48:4 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.96654 secs, and comparison 4.15259 sec, and warnIfPerfScore > 0.65, and perfScore=0.596076]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.14508 secs, and comparison 2.73971 sec, and warnIfPerfScore > 0.5, and perfScore=0.38344]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.68492 secs, and comparison 7.29602 sec, and warnIfPerfScore > 1.05, and perfScore=0.84008]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.66536 secs, and comparison 7.3507 sec, and warnIfPerfScore > 1.15, and perfScore=1.10282]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.23012 secs, and comparison 2.12935 sec, and warnIfPerfScore > 0.48, and perfScore=0.258727]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.98977 secs, and comparison 2.66774 sec, and warnIfPerfScore > 0.57, and perfScore=0.333895]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.5989 secs, and comparison 20.3736 sec, and warnIfPerfScore > 2.9, and perfScore=2.36933]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.65483 secs, and comparison 20.9537 sec, and warnIfPerfScore > 2.9, and perfScore=2.42104]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.822 secs, and comparison 141.181 sec, and warnIfPerfScore > 24, and perfScore=18.0492]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.76681 secs, and comparison 10.5002 sec, and warnIfPerfScore > 1.7, and perfScore=1.35193]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.15453 secs, and comparison 8.092 sec, and warnIfPerfScore > 1.5, and perfScore=0.992332]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.54764 secs, and comparison 12.5595 sec, and warnIfPerfScore > 2.1, and perfScore=1.91817]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 8.41235 secs, and comparison 6.53322 sec, and warnIfPerfScore > 1.6, and perfScore=0.776622]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.08353 secs, and comparison 1.26954 sec, and warnIfPerfScore > 0.23, and perfScore=0.139762]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8697 secs, and comparison 12.8209 sec, and warnIfPerfScore > 1.3, and perfScore=0.99621]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.39779 secs, and comparison 5.6392 sec, and warnIfPerfScore > 1.2, and perfScore=0.600056]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.78825 secs, and comparison 1.44849 sec, and warnIfPerfScore > 0.33, and perfScore=0.250247]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.16196 secs, and comparison 37.3517 sec, and warnIfPerfScore > 6, and perfScore=4.07683]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.14321 secs, and comparison 5.39692 sec, and warnIfPerfScore > 0.8, and perfScore=0.590265]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.03631 secs, and comparison 8.91456 sec, and warnIfPerfScore > 1.4, and perfScore=0.986526]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.78861 secs, and comparison 3.24537 sec, and warnIfPerfScore > 0.65, and perfScore=0.560649]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.68829 secs, and comparison 34.8534 sec, and warnIfPerfScore > 4.4, and perfScore=3.59748]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.91892 secs, and comparison 3.20396 sec, and warnIfPerfScore > 0.6, and perfScore=0.541308]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.92911 secs, and comparison 3.20548 sec, and warnIfPerfScore > 0.6, and perfScore=0.540635]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.61693 secs, and comparison 3.2225 sec, and warnIfPerfScore > 0.6, and perfScore=0.573712]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.91639 secs, and comparison 4.73797 sec, and warnIfPerfScore > 1.3, and perfScore=0.800822]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.44707 secs, and comparison 7.90296 sec, and warnIfPerfScore > 1.3, and perfScore=1.22582]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.762 secs, and comparison 5.67594 sec, and warnIfPerfScore > 0.3, and perfScore=0.126803]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.67697 secs, and comparison 11.2051 sec, and warnIfPerfScore > 1.5, and perfScore=1.45957]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.0422 secs, and comparison 2.72507 sec, and warnIfPerfScore > 0.55, and perfScore=0.386963]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.777997 sec, and warnIfPerfScore > 0.1, and perfScore=0.0518665]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.54715 sec, and warnIfPerfScore > 0.5, and perfScore=0.16981]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.8189 secs, and comparison 13.342 sec, and warnIfPerfScore > 2, and perfScore=1.70638]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.0071 secs, and comparison 27.2633 sec, and warnIfPerfScore > 3.6, and perfScore=3.40489]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 10 seconds]]]

Succeeded
