Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 10:57:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.60213 secs, and comparison 4.88412 sec, and warnIfPerfScore > 0.65, and perfScore=0.56778]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.60027 secs, and comparison 3.02346 sec, and warnIfPerfScore > 0.5, and perfScore=0.351554]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.8655 secs, and comparison 8.96533 sec, and warnIfPerfScore > 1.05, and perfScore=0.825118]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.10529 secs, and comparison 8.86079 sec, and warnIfPerfScore > 1.15, and perfScore=1.09321]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 12.6907 secs, and comparison 2.75894 sec, and warnIfPerfScore > 0.48, and perfScore=0.217398]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 12.604 secs, and comparison 3.22681 sec, and warnIfPerfScore > 0.57, and perfScore=0.256014]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.5033 secs, and comparison 25.724 sec, and warnIfPerfScore > 2.9, and perfScore=2.23623]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.3721 secs, and comparison 26.8946 sec, and warnIfPerfScore > 2.9, and perfScore=2.1738]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 10.6308 secs, and comparison 187.893 sec, and warnIfPerfScore > 24, and perfScore=17.6743]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.89492 secs, and comparison 12.8091 sec, and warnIfPerfScore > 1.7, and perfScore=1.29451]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 11.3621 secs, and comparison 10.9008 sec, and warnIfPerfScore > 1.5, and perfScore=0.959405]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.87787 secs, and comparison 14.9284 sec, and warnIfPerfScore > 2.1, and perfScore=1.68153]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 12.5151 secs, and comparison 8.11895 sec, and warnIfPerfScore > 1.6, and perfScore=0.648731]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 13.078 secs, and comparison 1.70097 sec, and warnIfPerfScore > 0.23, and perfScore=0.130063]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.8562 secs, and comparison 14.5176 sec, and warnIfPerfScore > 1.3, and perfScore=0.97721]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 11.8587 secs, and comparison 7.34216 sec, and warnIfPerfScore > 1.2, and perfScore=0.619136]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.8561 secs, and comparison 2.86641 sec, and warnIfPerfScore > 0.33, and perfScore=0.241767]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.3848 secs, and comparison 43.7163 sec, and warnIfPerfScore > 6, and perfScore=3.83989]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.3993 secs, and comparison 6.91244 sec, and warnIfPerfScore > 0.8, and perfScore=0.606391]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.3906 secs, and comparison 12.2028 sec, and warnIfPerfScore > 1.4, and perfScore=1.07131]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.9156 secs, and comparison 4.02864 sec, and warnIfPerfScore > 0.65, and perfScore=0.338097]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.7559 secs, and comparison 40.8957 sec, and warnIfPerfScore > 4.4, and perfScore=3.47874]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.6066 secs, and comparison 3.99707 sec, and warnIfPerfScore > 0.6, and perfScore=0.344378]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.6176 secs, and comparison 4.01775 sec, and warnIfPerfScore > 0.6, and perfScore=0.345833]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.6887 secs, and comparison 4.05359 sec, and warnIfPerfScore > 0.6, and perfScore=0.346796]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.6515 secs, and comparison 6.65786 sec, and warnIfPerfScore > 1.3, and perfScore=0.571419]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 12.8115 secs, and comparison 10.8023 sec, and warnIfPerfScore > 1.3, and perfScore=0.84317]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 57.9373 secs, and comparison 7.12406 sec, and warnIfPerfScore > 0.3, and perfScore=0.122962]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.9221 secs, and comparison 15.3937 sec, and warnIfPerfScore > 1.5, and perfScore=1.4094]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.50903 secs, and comparison 3.44552 sec, and warnIfPerfScore > 0.55, and perfScore=0.404926]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.01612 sec, and warnIfPerfScore > 0.1, and perfScore=0.0677413]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.41474 sec, and warnIfPerfScore > 0.5, and perfScore=0.227649]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.2702 secs, and comparison 14.851 sec, and warnIfPerfScore > 2, and perfScore=1.31773]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.0043 secs, and comparison 33.059 sec, and warnIfPerfScore > 3.6, and perfScore=2.54216]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 6 seconds]]]

Succeeded
