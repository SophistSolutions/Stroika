Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan  3 19:8:46 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.1878 secs, and comparison 4.61667 sec, and warnIfPerfScore > 0.62, and perfScore=0.453157]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.1681 secs, and comparison 2.86826 sec, and warnIfPerfScore > 0.5, and perfScore=0.282083]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.5507 secs, and comparison 8.76434 sec, and warnIfPerfScore > 1.05, and perfScore=0.830692]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.0611 secs, and comparison 4.20957 sec, and warnIfPerfScore > 0.48, and perfScore=0.418399]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.2137 secs, and comparison 4.33592 sec, and warnIfPerfScore > 0.55, and perfScore=0.424518]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.5123 secs, and comparison 24.3539 sec, and warnIfPerfScore > 2.9, and perfScore=2.11547]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.0476 secs, and comparison 26.0354 sec, and warnIfPerfScore > 2.9, and perfScore=2.16104]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 11.5188 secs, and comparison 87.598 sec, and warnIfPerfScore > 9.7, and perfScore=7.6048]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3581 secs, and comparison 11.5767 sec, and warnIfPerfScore > 1.6, and perfScore=1.01924]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4287 secs, and comparison 12.4872 sec, and warnIfPerfScore > 1.5, and perfScore=1.0047]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.65552 secs, and comparison 12.2034 sec, and warnIfPerfScore > 2.1, and perfScore=1.40989]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 12.0061 secs, and comparison 9.76324 sec, and warnIfPerfScore > 1.3, and perfScore=0.813188]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.5782 secs, and comparison 1.42522 sec, and warnIfPerfScore > 0.18, and perfScore=0.113308]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5061 secs, and comparison 12.9842 sec, and warnIfPerfScore > 1.3, and perfScore=1.03823]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 10.0771 secs, and comparison 7.76547 sec, and warnIfPerfScore > 1.2, and perfScore=0.770607]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.21653 secs, and comparison 1.86156 sec, and warnIfPerfScore > 0.33, and perfScore=0.201981]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.72501 secs, and comparison 45.1357 sec, and warnIfPerfScore > 6, and perfScore=4.6412]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.48697 secs, and comparison 4.07678 sec, and warnIfPerfScore > 0.5, and perfScore=0.429724]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.6862 secs, and comparison 40.3269 sec, and warnIfPerfScore > 4.4, and perfScore=3.77372]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.18763 secs, and comparison 4.32961 sec, and warnIfPerfScore > 0.6, and perfScore=0.471243]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.3921 secs, and comparison 18.6058 sec, and warnIfPerfScore > 1.5, and perfScore=1.29278]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.3958 secs, and comparison 4.52927 sec, and warnIfPerfScore > 0.55, and perfScore=0.314624]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 15 secs, and comparison 1.49246 sec, and warnIfPerfScore > 0.25, and perfScore=0.0994976]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 5.0005 sec, and warnIfPerfScore > 0.5, and perfScore=0.333367]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.7286 secs, and comparison 20.1052 sec, and warnIfPerfScore > 1.9, and perfScore=1.7142]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9584 secs, and comparison 32.1197 sec, and warnIfPerfScore > 3.1, and perfScore=2.68596]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 18 seconds]]]

Succeeded
