Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 9:44:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.47583 secs, and comparison 4.33293 sec, and warnIfPerfScore > 0.65, and perfScore=0.791282]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.84111 secs, and comparison 3.22457 sec, and warnIfPerfScore > 0.5, and perfScore=0.552047]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.85429 secs, and comparison 7.16975 sec, and warnIfPerfScore > 1.05, and perfScore=0.912845]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.49399 secs, and comparison 7.12332 sec, and warnIfPerfScore > 1.15, and perfScore=1.09691]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.39536 secs, and comparison 2.15318 sec, and warnIfPerfScore > 0.48, and perfScore=0.229175]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 9.17596 secs, and comparison 2.81118 sec, and warnIfPerfScore > 0.57, and perfScore=0.306364]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.87446 secs, and comparison 18.4936 sec, and warnIfPerfScore > 2.9, and perfScore=3.14814]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.33596 secs, and comparison 19.1706 sec, and warnIfPerfScore > 2.9, and perfScore=3.02569]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.61137 secs, and comparison 139.471 sec, and warnIfPerfScore > 24, and perfScore=24.8551]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.45028 secs, and comparison 10.3675 sec, and warnIfPerfScore > 1.7, and perfScore=1.90219]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.91967 secs, and comparison 5.46999 sec, and warnIfPerfScore > 1.5, and perfScore=0.924036]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.18771 secs, and comparison 12.5817 sec, and warnIfPerfScore > 2.1, and perfScore=2.42528]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.1288 secs, and comparison 4.63989 sec, and warnIfPerfScore > 1.6, and perfScore=0.382552]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 12.7292 secs, and comparison 0.677131 sec, and warnIfPerfScore > 0.23, and perfScore=0.0531952]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1613 secs, and comparison 12.408 sec, and warnIfPerfScore > 1.3, and perfScore=1.02029]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.6497 secs, and comparison 5.14883 sec, and warnIfPerfScore > 1.2, and perfScore=0.441971]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 8.07804 secs, and comparison 1.8026 sec, and warnIfPerfScore > 0.33, and perfScore=0.223148]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.0852 secs, and comparison 39.5952 sec, and warnIfPerfScore > 6, and perfScore=3.5719]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.16037 secs, and comparison 4.8119 sec, and warnIfPerfScore > 0.8, and perfScore=0.589668]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.22382 secs, and comparison 7.67783 sec, and warnIfPerfScore > 1.4, and perfScore=0.933609]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.99673 secs, and comparison 3.53346 sec, and warnIfPerfScore > 0.65, and perfScore=0.441863]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.57059 secs, and comparison 36.6084 sec, and warnIfPerfScore > 4.4, and perfScore=4.2714]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.46995 secs, and comparison 3.21981 sec, and warnIfPerfScore > 0.6, and perfScore=0.431034]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.46325 secs, and comparison 3.27158 sec, and warnIfPerfScore > 0.6, and perfScore=0.438359]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.49002 secs, and comparison 3.33505 sec, and warnIfPerfScore > 0.6, and perfScore=0.445266]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.43949 secs, and comparison 4.84739 sec, and warnIfPerfScore > 1.3, and perfScore=0.651575]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.95568 secs, and comparison 7.73586 sec, and warnIfPerfScore > 1.3, and perfScore=0.972369]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 36.4209 secs, and comparison 4.91212 sec, and warnIfPerfScore > 0.3, and perfScore=0.134871]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.62033 secs, and comparison 9.42485 sec, and warnIfPerfScore > 1.5, and perfScore=1.67692]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.8717 secs, and comparison 2.74169 sec, and warnIfPerfScore > 0.55, and perfScore=0.466933]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.611633 sec, and warnIfPerfScore > 0.1, and perfScore=0.0407755]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79371 sec, and warnIfPerfScore > 0.5, and perfScore=0.186247]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.28398 secs, and comparison 12.9341 sec, and warnIfPerfScore > 2, and perfScore=2.05826]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.87387 secs, and comparison 13.7022 sec, and warnIfPerfScore > 3.6, and perfScore=1.99337]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 38 seconds]]]

Succeeded
