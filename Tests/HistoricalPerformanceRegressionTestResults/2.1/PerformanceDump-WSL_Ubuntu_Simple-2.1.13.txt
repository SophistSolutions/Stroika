Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Apr 12 22:37:40 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 2.06879 secs, and comparison 1.1535 sec, and warnIfPerfScore > 0.65, and perfScore=0.557571]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.02253 secs, and comparison 2.46746 sec, and warnIfPerfScore > 0.5, and perfScore=1.21999]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.26413 secs, and comparison 5.98464 sec, and warnIfPerfScore > 1.05, and perfScore=2.64324]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 1.78552 secs, and comparison 5.97154 sec, and warnIfPerfScore > 1.15, and perfScore=3.34443]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 3.69264 secs, and comparison 1.0363 sec, and warnIfPerfScore > 0.48, and perfScore=0.280638]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 4.32999 secs, and comparison 1.24291 sec, and warnIfPerfScore > 0.57, and perfScore=0.287047]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 3.12666 secs, and comparison 9.76096 sec, and warnIfPerfScore > 2.9, and perfScore=3.12185]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.6765 secs, and comparison 9.954 sec, and warnIfPerfScore > 2.9, and perfScore=2.70747]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.22384 secs, and comparison 33.7873 sec, and warnIfPerfScore > 24, and perfScore=6.4679]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.08815 secs, and comparison 6.03898 sec, and warnIfPerfScore > 1.7, and perfScore=1.18687]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.43482 secs, and comparison 4.48718 sec, and warnIfPerfScore > 1.5, and perfScore=0.825635]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.63193 secs, and comparison 7.56852 sec, and warnIfPerfScore > 2.1, and perfScore=2.87565]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 3.70249 secs, and comparison 3.10836 sec, and warnIfPerfScore > 1.6, and perfScore=0.839534]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 3.82375 secs, and comparison 1.18759 sec, and warnIfPerfScore > 0.23, and perfScore=0.310583]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.54238 secs, and comparison 3.16241 sec, and warnIfPerfScore > 1.3, and perfScore=1.24388]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.4339 secs, and comparison 6.39561 sec, and warnIfPerfScore > 1.2, and perfScore=2.62772]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 14.4236 secs, and comparison 1.74648 sec, and warnIfPerfScore > 0.33, and perfScore=0.121085]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.28546 secs, and comparison 38.3345 sec, and warnIfPerfScore > 6, and perfScore=16.7732]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.29618 secs, and comparison 6.0123 sec, and warnIfPerfScore > 0.8, and perfScore=2.6184]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.28265 secs, and comparison 7.00521 sec, and warnIfPerfScore > 1.4, and perfScore=3.0689]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.6197 secs, and comparison 3.4293 sec, and warnIfPerfScore > 0.65, and perfScore=0.25179]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 5.64429 secs, and comparison 34.944 sec, and warnIfPerfScore > 4.4, and perfScore=6.19104]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.8584 secs, and comparison 3.38059 sec, and warnIfPerfScore > 0.6, and perfScore=0.311334]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.7621 secs, and comparison 3.44468 sec, and warnIfPerfScore > 0.6, and perfScore=0.320074]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.7603 secs, and comparison 3.38907 sec, and warnIfPerfScore > 0.6, and perfScore=0.31496]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.6224 secs, and comparison 4.01763 sec, and warnIfPerfScore > 1.3, and perfScore=0.378222]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 16.3053 secs, and comparison 7.68167 sec, and warnIfPerfScore > 1.3, and perfScore=0.471115]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.177 secs, and comparison 5.32671 sec, and warnIfPerfScore > 0.3, and perfScore=0.329277]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.05302 secs, and comparison 9.0879 sec, and warnIfPerfScore > 1.5, and perfScore=1.79851]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.52383 secs, and comparison 1.61965 sec, and warnIfPerfScore > 0.55, and perfScore=0.248266]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.036
	DETAILS:         	[baseline test 15 secs, and comparison 0.535993 sec, and warnIfPerfScore > 0.1, and perfScore=0.0357329]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 15 secs, and comparison 1.17962 sec, and warnIfPerfScore > 0.5, and perfScore=0.0786414]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 59 seconds]]]

Succeeded
