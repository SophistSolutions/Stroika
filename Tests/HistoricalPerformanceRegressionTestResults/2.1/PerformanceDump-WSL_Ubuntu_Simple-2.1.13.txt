Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr  1 18:56:6 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 1.98098 secs, and comparison 1.11743 sec, and warnIfPerfScore > 0.65, and perfScore=0.56408]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 1.97887 secs, and comparison 2.18874 sec, and warnIfPerfScore > 0.5, and perfScore=1.10606]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 1.81245 secs, and comparison 5.63529 sec, and warnIfPerfScore > 1.05, and perfScore=3.10921]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 1.54645 secs, and comparison 5.65662 sec, and warnIfPerfScore > 1.15, and perfScore=3.65782]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 2.50796 secs, and comparison 0.648639 sec, and warnIfPerfScore > 0.48, and perfScore=0.258632]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.06015 secs, and comparison 0.721199 sec, and warnIfPerfScore > 0.57, and perfScore=0.235675]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.38289 secs, and comparison 8.52589 sec, and warnIfPerfScore > 2.9, and perfScore=3.57796]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.86182 secs, and comparison 8.94133 sec, and warnIfPerfScore > 2.9, and perfScore=3.12435]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 3.35076 secs, and comparison 28.996 sec, and warnIfPerfScore > 24, and perfScore=8.65356]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.57961 secs, and comparison 5.56427 sec, and warnIfPerfScore > 1.7, and perfScore=1.55444]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.85893 secs, and comparison 3.69488 sec, and warnIfPerfScore > 1.5, and perfScore=0.957487]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 1.93264 secs, and comparison 7.18262 sec, and warnIfPerfScore > 2.1, and perfScore=3.71648]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 2.7281 secs, and comparison 2.66876 sec, and warnIfPerfScore > 1.6, and perfScore=0.97825]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 2.82765 secs, and comparison 0.931443 sec, and warnIfPerfScore > 0.23, and perfScore=0.329406]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.5071 secs, and comparison 3.37014 sec, and warnIfPerfScore > 1.3, and perfScore=1.34424]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.24627 secs, and comparison 4.76881 sec, and warnIfPerfScore > 1.2, and perfScore=2.12299]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 9.47462 secs, and comparison 1.10612 sec, and warnIfPerfScore > 0.33, and perfScore=0.116746]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.18459 secs, and comparison 36.4665 sec, and warnIfPerfScore > 6, and perfScore=16.6926]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.13404 secs, and comparison 4.23952 sec, and warnIfPerfScore > 0.8, and perfScore=1.98662]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.10982 secs, and comparison 5.00006 sec, and warnIfPerfScore > 1.4, and perfScore=2.3699]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.30504 secs, and comparison 3.07539 sec, and warnIfPerfScore > 0.65, and perfScore=0.330508]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.08721 secs, and comparison 33.8559 sec, and warnIfPerfScore > 4.4, and perfScore=10.9665]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.15976 secs, and comparison 3.64921 sec, and warnIfPerfScore > 0.6, and perfScore=0.509683]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.9012 secs, and comparison 3.04523 sec, and warnIfPerfScore > 0.6, and perfScore=0.441261]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.93426 secs, and comparison 3.01548 sec, and warnIfPerfScore > 0.6, and perfScore=0.434866]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.87543 secs, and comparison 3.08148 sec, and warnIfPerfScore > 1.3, and perfScore=0.448187]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.6107 secs, and comparison 7.14043 sec, and warnIfPerfScore > 1.3, and perfScore=0.614989]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.8787 secs, and comparison 4.38715 sec, and warnIfPerfScore > 0.3, and perfScore=0.369328]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.74291 secs, and comparison 8.91447 sec, and warnIfPerfScore > 1.5, and perfScore=1.87953]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.21366 secs, and comparison 1.26405 sec, and warnIfPerfScore > 0.55, and perfScore=0.24245]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.033
	DETAILS:         	[baseline test 15 secs, and comparison 0.498818 sec, and warnIfPerfScore > 0.1, and perfScore=0.0332545]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.04301 sec, and warnIfPerfScore > 0.5, and perfScore=0.0695338]
	                 	Test_Optional_ is FASTER

[[[Tests took: 5 minutes, 42 seconds]]]

Succeeded
