Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr  1 16:52:55 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.97414 secs, and comparison 5.32342 sec, and warnIfPerfScore > 0.65, and perfScore=0.763309]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.95472 secs, and comparison 3.09586 sec, and warnIfPerfScore > 0.5, and perfScore=0.445144]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.0362 secs, and comparison 8.96932 sec, and warnIfPerfScore > 1.05, and perfScore=0.893701]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.26146 secs, and comparison 8.9702 sec, and warnIfPerfScore > 1.15, and perfScore=1.08579]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.5735 secs, and comparison 2.76095 sec, and warnIfPerfScore > 0.48, and perfScore=0.261119]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.4101 secs, and comparison 3.48927 sec, and warnIfPerfScore > 0.57, and perfScore=0.335182]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.10284 secs, and comparison 23.921 sec, and warnIfPerfScore > 2.9, and perfScore=2.62786]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.52193 secs, and comparison 24.0322 sec, and warnIfPerfScore > 2.9, and perfScore=2.52388]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 8.05205 secs, and comparison 164.707 sec, and warnIfPerfScore > 24, and perfScore=20.4553]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.27768 secs, and comparison 12.3371 sec, and warnIfPerfScore > 1.7, and perfScore=1.6952]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.98281 secs, and comparison 7.64597 sec, and warnIfPerfScore > 1.5, and perfScore=0.957805]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.39786 secs, and comparison 14.9848 sec, and warnIfPerfScore > 2.1, and perfScore=2.02556]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.06923 secs, and comparison 6.09049 sec, and warnIfPerfScore > 1.6, and perfScore=0.671555]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 9.65349 secs, and comparison 0.926658 sec, and warnIfPerfScore > 0.23, and perfScore=0.095992]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.091 secs, and comparison 15.6426 sec, and warnIfPerfScore > 1.3, and perfScore=1.03655]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.5729 secs, and comparison 6.87915 sec, and warnIfPerfScore > 1.2, and perfScore=0.650642]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.8643 secs, and comparison 2.47275 sec, and warnIfPerfScore > 0.33, and perfScore=0.227604]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 10.1629 secs, and comparison 48.2612 sec, and warnIfPerfScore > 6, and perfScore=4.74877]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.0664 secs, and comparison 6.53839 sec, and warnIfPerfScore > 0.8, and perfScore=0.649529]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 10.054 secs, and comparison 9.87631 sec, and warnIfPerfScore > 1.4, and perfScore=0.982321]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.8281 secs, and comparison 4.29436 sec, and warnIfPerfScore > 0.65, and perfScore=0.396594]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 11.0905 secs, and comparison 45.0489 sec, and warnIfPerfScore > 4.4, and perfScore=4.06193]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.796 secs, and comparison 4.17689 sec, and warnIfPerfScore > 0.6, and perfScore=0.386891]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.7298 secs, and comparison 4.18549 sec, and warnIfPerfScore > 0.6, and perfScore=0.390081]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.9753 secs, and comparison 4.25229 sec, and warnIfPerfScore > 0.6, and perfScore=0.387442]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.8161 secs, and comparison 6.46763 sec, and warnIfPerfScore > 1.3, and perfScore=0.597964]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 11.5757 secs, and comparison 10.6873 sec, and warnIfPerfScore > 1.3, and perfScore=0.92325]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 51.9184 secs, and comparison 7.92683 sec, and warnIfPerfScore > 0.3, and perfScore=0.152679]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.70932 secs, and comparison 12.3487 sec, and warnIfPerfScore > 1.5, and perfScore=1.60179]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.13955 secs, and comparison 3.44253 sec, and warnIfPerfScore > 0.55, and perfScore=0.422939]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.773154 sec, and warnIfPerfScore > 0.1, and perfScore=0.0515436]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.52218 sec, and warnIfPerfScore > 0.5, and perfScore=0.234812]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.02064 secs, and comparison 10.4562 sec, and warnIfPerfScore > 2, and perfScore=1.15914]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.48972 secs, and comparison 18.1422 sec, and warnIfPerfScore > 3.6, and perfScore=1.91177]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 27 seconds]]]

Succeeded
