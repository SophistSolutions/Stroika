Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 19 22:10:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 51.8331 secs, and comparison 7.00784 sec, and warnIfPerfScore > 0.65, and perfScore=0.1352]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 53.6699 secs, and comparison 6.47755 sec, and warnIfPerfScore > 0.5, and perfScore=0.120692]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 19.0755 secs, and comparison 13.2931 sec, and warnIfPerfScore > 1.05, and perfScore=0.696868]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 14.4255 secs, and comparison 13.7429 sec, and warnIfPerfScore > 1.15, and perfScore=0.95268]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.2088 secs, and comparison 4.07685 sec, and warnIfPerfScore > 0.48, and perfScore=0.192224]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 23.412 secs, and comparison 4.03064 sec, and warnIfPerfScore > 0.57, and perfScore=0.172161]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 27.6083 secs, and comparison 39.6266 sec, and warnIfPerfScore > 2.9, and perfScore=1.43532]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.9252 secs, and comparison 43.2786 sec, and warnIfPerfScore > 2.9, and perfScore=1.73634]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 23.8038 secs, and comparison 238.502 sec, and warnIfPerfScore > 24, and perfScore=10.0195]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 23.6652 secs, and comparison 19.988 sec, and warnIfPerfScore > 1.7, and perfScore=0.844617]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 44.9837 secs, and comparison 43.5525 sec, and warnIfPerfScore > 1.5, and perfScore=0.968184]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 21.4476 secs, and comparison 20.5722 sec, and warnIfPerfScore > 2.1, and perfScore=0.95918]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 41.5434 secs, and comparison 13.8829 sec, and warnIfPerfScore > 1.6, and perfScore=0.334179]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 42.6723 secs, and comparison 3.02656 sec, and warnIfPerfScore > 0.23, and perfScore=0.0709256]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.6423 secs, and comparison 26.5641 sec, and warnIfPerfScore > 1.3, and perfScore=1.59618]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.59618}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.1603 secs, and comparison 22.6045 sec, and warnIfPerfScore > 1.2, and perfScore=1.17976]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.8924 secs, and comparison 4.84815 sec, and warnIfPerfScore > 0.33, and perfScore=0.305061]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 17.8907 secs, and comparison 53.6488 sec, and warnIfPerfScore > 6, and perfScore=2.99869]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.6878 secs, and comparison 20.4574 sec, and warnIfPerfScore > 0.8, and perfScore=1.15658]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.15658}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.3539 secs, and comparison 40.8181 sec, and warnIfPerfScore > 1.4, and perfScore=2.65847]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.65847}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.6264 secs, and comparison 4.68903 sec, and warnIfPerfScore > 0.65, and perfScore=0.344114]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 32.1401 secs, and comparison 64.1016 sec, and warnIfPerfScore > 4.4, and perfScore=1.99445]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15.5163 secs, and comparison 6.32885 sec, and warnIfPerfScore > 0.6, and perfScore=0.407885]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 16.5609 secs, and comparison 6.41426 sec, and warnIfPerfScore > 0.6, and perfScore=0.387312]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 16.2237 secs, and comparison 6.56556 sec, and warnIfPerfScore > 0.6, and perfScore=0.404689]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 16.616 secs, and comparison 14.5792 sec, and warnIfPerfScore > 1.3, and perfScore=0.877419]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 23.0584 secs, and comparison 24.5232 sec, and warnIfPerfScore > 1.3, and perfScore=1.06353]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 127.366 secs, and comparison 9.86323 sec, and warnIfPerfScore > 0.3, and perfScore=0.0774403]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 27.9761 secs, and comparison 34.5399 sec, and warnIfPerfScore > 1.5, and perfScore=1.23462]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 21.1452 secs, and comparison 6.14278 sec, and warnIfPerfScore > 0.55, and perfScore=0.290506]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.23638 sec, and warnIfPerfScore > 0.1, and perfScore=0.149092]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.149092}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.27501 sec, and warnIfPerfScore > 0.5, and perfScore=0.351667]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.3332 secs, and comparison 34.8652 sec, and warnIfPerfScore > 2, and perfScore=1.63431]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 26.0786 secs, and comparison 44.5154 sec, and warnIfPerfScore > 3.6, and perfScore=1.70697]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 30 minutes, 12 seconds]]]

Succeeded
