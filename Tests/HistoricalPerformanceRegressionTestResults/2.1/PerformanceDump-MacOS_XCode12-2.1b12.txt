Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 16 12:29:44 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 9.65199 secs, and comparison 6.6761 sec, and warnIfPerfScore > 0.62, and perfScore=0.691681]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 9.6517 secs, and comparison 4.59544 sec, and warnIfPerfScore > 0.5, and perfScore=0.476127]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 17.2941 secs, and comparison 12.9223 sec, and warnIfPerfScore > 1.05, and perfScore=0.747208]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 34.8951 secs, and comparison 6.32383 sec, and warnIfPerfScore > 0.48, and perfScore=0.181224]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 34.0022 secs, and comparison 6.44058 sec, and warnIfPerfScore > 0.57, and perfScore=0.189417]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 24.5213 secs, and comparison 64.5452 sec, and warnIfPerfScore > 2.9, and perfScore=2.63221]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 25.8138 secs, and comparison 68.3051 sec, and warnIfPerfScore > 2.9, and perfScore=2.64607]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 19.4122 secs, and comparison 196.041 sec, and warnIfPerfScore > 9.7, and perfScore=10.0989]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 22.0003 secs, and comparison 32.5562 sec, and warnIfPerfScore > 1.6, and perfScore=1.47981]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.90959 secs, and comparison 7.40989 sec, and warnIfPerfScore > 1.5, and perfScore=0.747749]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.7088 secs, and comparison 36.9325 sec, and warnIfPerfScore > 2.1, and perfScore=2.21036]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.8984 secs, and comparison 7.58414 sec, and warnIfPerfScore > 1.3, and perfScore=0.545684]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 13.9325 secs, and comparison 2.25649 sec, and warnIfPerfScore > 0.23, and perfScore=0.161958]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.421 secs, and comparison 18.9684 sec, and warnIfPerfScore > 1.3, and perfScore=1.02971]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.043 secs, and comparison 13.8373 sec, and warnIfPerfScore > 1.2, and perfScore=0.985348]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.62314 secs, and comparison 2.13284 sec, and warnIfPerfScore > 0.33, and perfScore=0.221636]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 12.9693 secs, and comparison 60.1491 sec, and warnIfPerfScore > 6, and perfScore=4.63781]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.1703 secs, and comparison 5.37967 sec, and warnIfPerfScore > 0.5, and perfScore=0.528961]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.9374 secs, and comparison 53.756 sec, and warnIfPerfScore > 4.4, and perfScore=3.1738]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.5523 secs, and comparison 5.09735 sec, and warnIfPerfScore > 0.6, and perfScore=0.483056]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 37.2809 secs, and comparison 52.5585 sec, and warnIfPerfScore > 1.5, and perfScore=1.4098]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 9.05149 secs, and comparison 7.18852 sec, and warnIfPerfScore > 0.55, and perfScore=0.794181]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 15 secs, and comparison 8.39399 sec, and warnIfPerfScore > 0.25, and perfScore=0.559599]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.65877 sec, and warnIfPerfScore > 0.5, and perfScore=0.243918]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 55 seconds]]]

Succeeded
