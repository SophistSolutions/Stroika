Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 2:30:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.55198 secs, and comparison 5.54391 sec, and warnIfPerfScore > 0.65, and perfScore=0.64826]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.92849 secs, and comparison 3.35247 sec, and warnIfPerfScore > 0.5, and perfScore=0.37548]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 12.6882 secs, and comparison 10.6351 sec, and warnIfPerfScore > 1.05, and perfScore=0.838188]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.78059 secs, and comparison 10.6366 sec, and warnIfPerfScore > 1.15, and perfScore=1.08752]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.5498 secs, and comparison 3.4418 sec, and warnIfPerfScore > 0.48, and perfScore=0.254011]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.8516 secs, and comparison 3.90356 sec, and warnIfPerfScore > 0.57, and perfScore=0.281814]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.861 secs, and comparison 30.6586 sec, and warnIfPerfScore > 2.9, and perfScore=2.21186]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.6117 secs, and comparison 30.852 sec, and warnIfPerfScore > 2.9, and perfScore=2.11147]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 11.7237 secs, and comparison 202.361 sec, and warnIfPerfScore > 24, and perfScore=17.2608]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.12428 secs, and comparison 11.7021 sec, and warnIfPerfScore > 1.7, and perfScore=1.44038]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.24439 secs, and comparison 7.73537 sec, and warnIfPerfScore > 1.5, and perfScore=0.938259]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.65242 secs, and comparison 14.091 sec, and warnIfPerfScore > 2.1, and perfScore=1.84137]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.75397 secs, and comparison 5.26698 sec, and warnIfPerfScore > 1.6, and perfScore=0.539983]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 10.1595 secs, and comparison 0.961731 sec, and warnIfPerfScore > 0.23, and perfScore=0.0946631]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.5548 secs, and comparison 15.3278 sec, and warnIfPerfScore > 1.3, and perfScore=1.05311]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.0405 secs, and comparison 7.44825 sec, and warnIfPerfScore > 1.2, and perfScore=0.674628]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.2566 secs, and comparison 2.62764 sec, and warnIfPerfScore > 0.33, and perfScore=0.23343]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.7367 secs, and comparison 44.8479 sec, and warnIfPerfScore > 6, and perfScore=4.17706]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.2643 secs, and comparison 7.10093 sec, and warnIfPerfScore > 0.8, and perfScore=0.691812]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.3946 secs, and comparison 10.8091 sec, and warnIfPerfScore > 1.4, and perfScore=1.03988]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.8264 secs, and comparison 3.96606 sec, and warnIfPerfScore > 0.65, and perfScore=0.366334]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.9235 secs, and comparison 41.2126 sec, and warnIfPerfScore > 4.4, and perfScore=3.77282]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.4811 secs, and comparison 3.87076 sec, and warnIfPerfScore > 0.6, and perfScore=0.36931]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.4985 secs, and comparison 3.84098 sec, and warnIfPerfScore > 0.6, and perfScore=0.36586]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.6704 secs, and comparison 3.91487 sec, and warnIfPerfScore > 0.6, and perfScore=0.36689]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.6585 secs, and comparison 6.83373 sec, and warnIfPerfScore > 1.3, and perfScore=0.641153]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 11.8113 secs, and comparison 10.7768 sec, and warnIfPerfScore > 1.3, and perfScore=0.912415]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 56.1132 secs, and comparison 6.93363 sec, and warnIfPerfScore > 0.3, and perfScore=0.123565]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.77632 secs, and comparison 13.1241 sec, and warnIfPerfScore > 1.5, and perfScore=1.4954]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.0228 secs, and comparison 3.46465 sec, and warnIfPerfScore > 0.55, and perfScore=0.383988]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.826527 sec, and warnIfPerfScore > 0.1, and perfScore=0.0551018]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.24078 sec, and warnIfPerfScore > 0.5, and perfScore=0.216052]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.02632 secs, and comparison 10.3207 sec, and warnIfPerfScore > 2, and perfScore=1.1434]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.592 secs, and comparison 19.7621 sec, and warnIfPerfScore > 3.6, and perfScore=1.7048]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 46 seconds]]]

Succeeded
