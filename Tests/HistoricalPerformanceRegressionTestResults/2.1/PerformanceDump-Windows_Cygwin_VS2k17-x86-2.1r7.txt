Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 31 17:23:23 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.7005 secs, and comparison 4.99466 sec, and warnIfPerfScore > 0.65, and perfScore=0.426876]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.7881 secs, and comparison 3.35239 sec, and warnIfPerfScore > 0.5, and perfScore=0.284387]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.8334 secs, and comparison 9.76332 sec, and warnIfPerfScore > 1.05, and perfScore=0.825066]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.07974 secs, and comparison 10.4486 sec, and warnIfPerfScore > 1.15, and perfScore=1.15076]
	                 	SharedPtr is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.15 and got 1.15076}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.5251 secs, and comparison 3.50807 sec, and warnIfPerfScore > 0.48, and perfScore=0.304384]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 13.928 secs, and comparison 3.98042 sec, and warnIfPerfScore > 0.57, and perfScore=0.285785]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.5943 secs, and comparison 30.8263 sec, and warnIfPerfScore > 2.9, and perfScore=1.97677]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.8905 secs, and comparison 34.6433 sec, and warnIfPerfScore > 2.9, and perfScore=2.49403]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 17.8285 secs, and comparison 187.696 sec, and warnIfPerfScore > 24, and perfScore=10.5279]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.7575 secs, and comparison 15.8551 sec, and warnIfPerfScore > 1.7, and perfScore=1.2428]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.1424 secs, and comparison 20.9131 sec, and warnIfPerfScore > 1.5, and perfScore=1.0925]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 21.2544 secs, and comparison 25.4468 sec, and warnIfPerfScore > 2.1, and perfScore=1.19725]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 13.9467 secs, and comparison 11.6068 sec, and warnIfPerfScore > 1.6, and perfScore=0.832223]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 14.8321 secs, and comparison 1.52076 sec, and warnIfPerfScore > 0.23, and perfScore=0.102532]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 15.8821 secs, and comparison 15.2313 sec, and warnIfPerfScore > 1.3, and perfScore=0.959026]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 11.3377 secs, and comparison 8.14763 sec, and warnIfPerfScore > 1.2, and perfScore=0.718629]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.6699 secs, and comparison 2.58773 sec, and warnIfPerfScore > 0.33, and perfScore=0.242527]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.7836 secs, and comparison 47.1766 sec, and warnIfPerfScore > 6, and perfScore=4.00359]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.3627 secs, and comparison 7.62115 sec, and warnIfPerfScore > 0.8, and perfScore=0.616462]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.4995 secs, and comparison 22.5169 sec, and warnIfPerfScore > 1.4, and perfScore=1.80142]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.80142}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.9268 secs, and comparison 4.33594 sec, and warnIfPerfScore > 0.65, and perfScore=0.335422]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 14.0228 secs, and comparison 43.8587 sec, and warnIfPerfScore > 4.4, and perfScore=3.12768]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.915 secs, and comparison 4.66366 sec, and warnIfPerfScore > 0.6, and perfScore=0.391412]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.8636 secs, and comparison 4.41736 sec, and warnIfPerfScore > 0.6, and perfScore=0.406621]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.2886 secs, and comparison 4.62182 sec, and warnIfPerfScore > 0.6, and perfScore=0.449219]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 10.5586 secs, and comparison 10.3293 sec, and warnIfPerfScore > 1.3, and perfScore=0.978282]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 14.19 secs, and comparison 13.1336 sec, and warnIfPerfScore > 1.3, and perfScore=0.925555]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 70.1975 secs, and comparison 8.35065 sec, and warnIfPerfScore > 0.3, and perfScore=0.118959]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 17.8984 secs, and comparison 36.0847 sec, and warnIfPerfScore > 1.5, and perfScore=2.01609]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 2.01609}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.8624 secs, and comparison 4.93953 sec, and warnIfPerfScore > 0.55, and perfScore=0.311398]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 15 secs, and comparison 1.30893 sec, and warnIfPerfScore > 0.1, and perfScore=0.087262]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.70048 sec, and warnIfPerfScore > 0.5, and perfScore=0.313365]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.3002 secs, and comparison 21.8572 sec, and warnIfPerfScore > 2, and perfScore=1.64338]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.3264 secs, and comparison 36.1088 sec, and warnIfPerfScore > 3.6, and perfScore=2.52043]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 23 seconds]]]

Succeeded
