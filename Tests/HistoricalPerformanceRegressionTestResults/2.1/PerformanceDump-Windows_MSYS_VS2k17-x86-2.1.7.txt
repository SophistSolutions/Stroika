Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 22 20:6:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 54.4936 secs, and comparison 7.09507 sec, and warnIfPerfScore > 0.65, and perfScore=0.1302]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 53.977 secs, and comparison 6.64686 sec, and warnIfPerfScore > 0.5, and perfScore=0.123142]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 20.7572 secs, and comparison 14.9577 sec, and warnIfPerfScore > 1.05, and perfScore=0.720603]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.1194 secs, and comparison 14.7546 sec, and warnIfPerfScore > 1.15, and perfScore=0.975873]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 24.3155 secs, and comparison 3.89907 sec, and warnIfPerfScore > 0.48, and perfScore=0.160353]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 20.5844 secs, and comparison 3.98473 sec, and warnIfPerfScore > 0.57, and perfScore=0.193581]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.2324 secs, and comparison 36.0685 sec, and warnIfPerfScore > 2.9, and perfScore=1.55251]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.9548 secs, and comparison 38.3456 sec, and warnIfPerfScore > 2.9, and perfScore=1.60075]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 20.3311 secs, and comparison 205.737 sec, and warnIfPerfScore > 24, and perfScore=10.1193]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 21.8214 secs, and comparison 15.5535 sec, and warnIfPerfScore > 1.7, and perfScore=0.712765]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 41.3756 secs, and comparison 40.7266 sec, and warnIfPerfScore > 1.5, and perfScore=0.984315]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.4618 secs, and comparison 18.8055 sec, and warnIfPerfScore > 2.1, and perfScore=1.01862]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 40.325 secs, and comparison 16.145 sec, and warnIfPerfScore > 1.6, and perfScore=0.400372]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 45.1556 secs, and comparison 4.73819 sec, and warnIfPerfScore > 0.23, and perfScore=0.10493]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 25.1011 secs, and comparison 26.2342 sec, and warnIfPerfScore > 1.3, and perfScore=1.04514]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.1568 secs, and comparison 20.7509 sec, and warnIfPerfScore > 1.2, and perfScore=1.36908]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.36908}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.1362 secs, and comparison 4.65363 sec, and warnIfPerfScore > 0.33, and perfScore=0.3292]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.3852 secs, and comparison 52.2189 sec, and warnIfPerfScore > 6, and perfScore=3.18695]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.2505 secs, and comparison 22.1774 sec, and warnIfPerfScore > 0.8, and perfScore=1.21516]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.21516}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 15.0258 secs, and comparison 43.6924 sec, and warnIfPerfScore > 1.4, and perfScore=2.90782]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.90782}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.9928 secs, and comparison 4.66132 sec, and warnIfPerfScore > 0.65, and perfScore=0.358763]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 25.4465 secs, and comparison 60.9301 sec, and warnIfPerfScore > 4.4, and perfScore=2.39444]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 16.0903 secs, and comparison 6.39062 sec, and warnIfPerfScore > 0.6, and perfScore=0.397172]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 16.0178 secs, and comparison 6.37567 sec, and warnIfPerfScore > 0.6, and perfScore=0.398036]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 16.1847 secs, and comparison 6.65663 sec, and warnIfPerfScore > 0.6, and perfScore=0.411291]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 16.2611 secs, and comparison 15.5555 sec, and warnIfPerfScore > 1.3, and perfScore=0.956609]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 23.8487 secs, and comparison 24.4224 sec, and warnIfPerfScore > 1.3, and perfScore=1.02406]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 133.001 secs, and comparison 9.54671 sec, and warnIfPerfScore > 0.3, and perfScore=0.0717794]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 31.6206 secs, and comparison 36.9105 sec, and warnIfPerfScore > 1.5, and perfScore=1.16729]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 24.9889 secs, and comparison 7.5218 sec, and warnIfPerfScore > 0.55, and perfScore=0.301006]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.58943 sec, and warnIfPerfScore > 0.1, and perfScore=0.172628]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.172628}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.57834 sec, and warnIfPerfScore > 0.5, and perfScore=0.37189]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 26.4535 secs, and comparison 32.7669 sec, and warnIfPerfScore > 2, and perfScore=1.23866]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 29.7523 secs, and comparison 47.1647 sec, and warnIfPerfScore > 3.6, and perfScore=1.58524]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 28 seconds]]]

Succeeded
