Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 :17:47 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 6.62049 secs, and comparison 4.1493 sec, and warnIfPerfScore > 0.65, and perfScore=0.626737]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.62942 secs, and comparison 2.63239 sec, and warnIfPerfScore > 0.5, and perfScore=0.397077]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.16354 secs, and comparison 7.2803 sec, and warnIfPerfScore > 1.05, and perfScore=0.891807]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.43286 secs, and comparison 7.1506 sec, and warnIfPerfScore > 1.15, and perfScore=1.11157]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.56876 secs, and comparison 2.12868 sec, and warnIfPerfScore > 0.48, and perfScore=0.281245]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.34911 secs, and comparison 2.56616 sec, and warnIfPerfScore > 0.57, and perfScore=0.34918]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 7.86529 secs, and comparison 19.2561 sec, and warnIfPerfScore > 2.9, and perfScore=2.44824]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.98342 secs, and comparison 19.9998 sec, and warnIfPerfScore > 2.9, and perfScore=2.50516]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.80272 secs, and comparison 138.39 sec, and warnIfPerfScore > 24, and perfScore=17.7361]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.8185 secs, and comparison 10.2141 sec, and warnIfPerfScore > 1.7, and perfScore=1.498]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.5952 secs, and comparison 7.64038 sec, and warnIfPerfScore > 1.5, and perfScore=1.00595]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.40824 secs, and comparison 11.8938 sec, and warnIfPerfScore > 2.1, and perfScore=1.85601]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.37634 secs, and comparison 7.43791 sec, and warnIfPerfScore > 1.6, and perfScore=0.887967]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.73349 secs, and comparison 1.21929 sec, and warnIfPerfScore > 0.23, and perfScore=0.139611]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.7416 secs, and comparison 12.793 sec, and warnIfPerfScore > 1.3, and perfScore=1.00404]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.69313 secs, and comparison 5.16281 sec, and warnIfPerfScore > 1.2, and perfScore=0.532626]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.8797 secs, and comparison 1.44467 sec, and warnIfPerfScore > 0.33, and perfScore=0.245705]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.24173 secs, and comparison 38.1191 sec, and warnIfPerfScore > 6, and perfScore=4.12468]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.30795 secs, and comparison 5.04208 sec, and warnIfPerfScore > 0.8, and perfScore=0.541696]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.31302 secs, and comparison 8.93077 sec, and warnIfPerfScore > 1.4, and perfScore=0.958955]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.88239 secs, and comparison 3.29568 sec, and warnIfPerfScore > 0.65, and perfScore=0.560261]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.46058 secs, and comparison 35.6293 sec, and warnIfPerfScore > 4.4, and perfScore=3.76608]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.10002 secs, and comparison 3.40554 sec, and warnIfPerfScore > 0.6, and perfScore=0.558283]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.08555 secs, and comparison 3.42199 sec, and warnIfPerfScore > 0.6, and perfScore=0.562315]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.09439 secs, and comparison 3.39963 sec, and warnIfPerfScore > 0.6, and perfScore=0.55783]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.06404 secs, and comparison 4.6117 sec, and warnIfPerfScore > 1.3, and perfScore=0.760499]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.59591 secs, and comparison 8.11395 sec, and warnIfPerfScore > 1.3, and perfScore=1.23015]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 43.8169 secs, and comparison 5.75283 sec, and warnIfPerfScore > 0.3, and perfScore=0.131292]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.06809 secs, and comparison 11.5638 sec, and warnIfPerfScore > 1.5, and perfScore=1.43327]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.92532 secs, and comparison 3.33616 sec, and warnIfPerfScore > 0.55, and perfScore=0.481734]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.749927 sec, and warnIfPerfScore > 0.1, and perfScore=0.0499951]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.90806 sec, and warnIfPerfScore > 0.5, and perfScore=0.193871]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.7169 secs, and comparison 8.3865 sec, and warnIfPerfScore > 2, and perfScore=1.08677]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.02528 secs, and comparison 29.0931 sec, and warnIfPerfScore > 3.6, and perfScore=3.22351]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 1 second]]]

Succeeded
