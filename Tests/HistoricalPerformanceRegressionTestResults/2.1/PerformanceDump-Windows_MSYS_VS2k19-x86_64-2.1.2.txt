Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 18:21:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 8.19664 secs, and comparison 5.58643 sec, and warnIfPerfScore > 0.65, and perfScore=0.681552]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.76313 secs, and comparison 3.55558 sec, and warnIfPerfScore > 0.5, and perfScore=0.405743]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.3538 secs, and comparison 10.0274 sec, and warnIfPerfScore > 1.05, and perfScore=0.883179]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.95124 secs, and comparison 9.99897 sec, and warnIfPerfScore > 1.15, and perfScore=1.11705]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.2069 secs, and comparison 2.77685 sec, and warnIfPerfScore > 0.48, and perfScore=0.227481]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.6249 secs, and comparison 4.037 sec, and warnIfPerfScore > 0.57, and perfScore=0.347273]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.7096 secs, and comparison 28.8075 sec, and warnIfPerfScore > 2.9, and perfScore=2.68987]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.6822 secs, and comparison 29.2054 sec, and warnIfPerfScore > 2.9, and perfScore=2.49999]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 9.82167 secs, and comparison 144.261 sec, and warnIfPerfScore > 24, and perfScore=14.6881]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.77004 secs, and comparison 14.3599 sec, and warnIfPerfScore > 1.7, and perfScore=1.63738]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.2043 secs, and comparison 9.92554 sec, and warnIfPerfScore > 1.5, and perfScore=0.972686]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.37235 secs, and comparison 16.3779 sec, and warnIfPerfScore > 2.1, and perfScore=1.95619]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.8797 secs, and comparison 6.49043 sec, and warnIfPerfScore > 1.6, and perfScore=0.596563]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 11.4895 secs, and comparison 1.16582 sec, and warnIfPerfScore > 0.23, and perfScore=0.101468]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1289 secs, and comparison 13.4934 sec, and warnIfPerfScore > 1.3, and perfScore=1.02776]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.18315 secs, and comparison 8.38699 sec, and warnIfPerfScore > 1.2, and perfScore=0.913303]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.8932 secs, and comparison 3.14112 sec, and warnIfPerfScore > 0.33, and perfScore=0.22609]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 9.4961 secs, and comparison 48.3811 sec, and warnIfPerfScore > 6, and perfScore=5.09484]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.55485 secs, and comparison 7.68775 sec, and warnIfPerfScore > 0.8, and perfScore=0.804591]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.24963 secs, and comparison 13.4327 sec, and warnIfPerfScore > 1.4, and perfScore=1.45224]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.5972 secs, and comparison 4.27544 sec, and warnIfPerfScore > 0.65, and perfScore=0.314436]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.99853 secs, and comparison 43.3411 sec, and warnIfPerfScore > 4.4, and perfScore=4.33475]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.0367 secs, and comparison 4.40599 sec, and warnIfPerfScore > 0.6, and perfScore=0.337969]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.558 secs, and comparison 4.46278 sec, and warnIfPerfScore > 0.6, and perfScore=0.329162]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.7462 secs, and comparison 4.23983 sec, and warnIfPerfScore > 0.6, and perfScore=0.332635]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 12.6354 secs, and comparison 8.51181 sec, and warnIfPerfScore > 1.3, and perfScore=0.673648]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 15.0597 secs, and comparison 12.5402 sec, and warnIfPerfScore > 1.3, and perfScore=0.832699]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 60.6322 secs, and comparison 10.6697 sec, and warnIfPerfScore > 0.3, and perfScore=0.175974]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.47388 secs, and comparison 14.5301 sec, and warnIfPerfScore > 1.5, and perfScore=1.5337]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.4803 secs, and comparison 4.39264 sec, and warnIfPerfScore > 0.55, and perfScore=0.382624]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.880635 sec, and warnIfPerfScore > 0.1, and perfScore=0.058709]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.05814 sec, and warnIfPerfScore > 0.5, and perfScore=0.270543]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.879 secs, and comparison 17.3723 sec, and warnIfPerfScore > 2, and perfScore=1.59687]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 11.644 secs, and comparison 21.7898 sec, and warnIfPerfScore > 3.6, and perfScore=1.87134]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 42 seconds]]]

Succeeded
