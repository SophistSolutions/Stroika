Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 :46:23 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.78429 secs, and comparison 4.60604 sec, and warnIfPerfScore > 0.65, and perfScore=0.796302]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.13785 secs, and comparison 2.80482 sec, and warnIfPerfScore > 0.5, and perfScore=0.456971]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.63472 secs, and comparison 7.66804 sec, and warnIfPerfScore > 1.05, and perfScore=0.888048]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.15247 secs, and comparison 7.77927 sec, and warnIfPerfScore > 1.15, and perfScore=1.08763]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.03953 secs, and comparison 2.35276 sec, and warnIfPerfScore > 0.48, and perfScore=0.334221]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.0041 secs, and comparison 2.95307 sec, and warnIfPerfScore > 0.57, and perfScore=0.42162]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.5971 secs, and comparison 19.864 sec, and warnIfPerfScore > 2.9, and perfScore=3.01102]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.14723 secs, and comparison 20.2404 sec, and warnIfPerfScore > 2.9, and perfScore=2.83192]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.97147 secs, and comparison 136.866 sec, and warnIfPerfScore > 24, and perfScore=22.92]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.98186 secs, and comparison 10.7096 sec, and warnIfPerfScore > 1.7, and perfScore=1.79035]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.71398 secs, and comparison 5.38093 sec, and warnIfPerfScore > 1.5, and perfScore=0.941714]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.92143 secs, and comparison 12.8776 sec, and warnIfPerfScore > 2.1, and perfScore=2.17475]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.68554 secs, and comparison 4.03238 sec, and warnIfPerfScore > 1.6, and perfScore=0.603149]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 7.07245 secs, and comparison 0.71922 sec, and warnIfPerfScore > 0.23, and perfScore=0.101693]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4766 secs, and comparison 12.7152 sec, and warnIfPerfScore > 1.3, and perfScore=1.01912]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.68411 secs, and comparison 5.67227 sec, and warnIfPerfScore > 1.2, and perfScore=0.653178]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.75116 secs, and comparison 2.04191 sec, and warnIfPerfScore > 0.33, and perfScore=0.23333]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.37302 secs, and comparison 41.0198 sec, and warnIfPerfScore > 6, and perfScore=4.89904]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.49915 secs, and comparison 5.3544 sec, and warnIfPerfScore > 0.8, and perfScore=0.629993]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.30649 secs, and comparison 8.09474 sec, and warnIfPerfScore > 1.4, and perfScore=0.974508]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.81607 secs, and comparison 3.59532 sec, and warnIfPerfScore > 0.65, and perfScore=0.407814]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.97678 secs, and comparison 38.1937 sec, and warnIfPerfScore > 4.4, and perfScore=4.25472]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.7578 secs, and comparison 3.59775 sec, and warnIfPerfScore > 0.6, and perfScore=0.410805]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.78559 secs, and comparison 3.56877 sec, and warnIfPerfScore > 0.6, and perfScore=0.406207]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.76561 secs, and comparison 3.58687 sec, and warnIfPerfScore > 0.6, and perfScore=0.409199]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.7284 secs, and comparison 5.39363 sec, and warnIfPerfScore > 1.3, and perfScore=0.617941]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.33256 secs, and comparison 9.20383 sec, and warnIfPerfScore > 1.3, and perfScore=0.986207]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 39.5797 secs, and comparison 6.69492 sec, and warnIfPerfScore > 0.3, and perfScore=0.169151]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.47882 secs, and comparison 10.1985 sec, and warnIfPerfScore > 1.5, and perfScore=1.57414]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.32036 secs, and comparison 3.01095 sec, and warnIfPerfScore > 0.55, and perfScore=0.47639]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.645902 sec, and warnIfPerfScore > 0.1, and perfScore=0.0430601]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.34382 sec, and warnIfPerfScore > 0.5, and perfScore=0.222922]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.79665 secs, and comparison 13.4283 sec, and warnIfPerfScore > 2, and perfScore=1.97572]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.58921 secs, and comparison 15.2632 sec, and warnIfPerfScore > 3.6, and perfScore=1.77702]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 51 seconds]]]

Succeeded
