Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 7:42:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.9115 secs, and comparison 5.2635 sec, and warnIfPerfScore > 0.65, and perfScore=0.48238]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.18142 secs, and comparison 3.26162 sec, and warnIfPerfScore > 0.5, and perfScore=0.355241]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.4573 secs, and comparison 9.54665 sec, and warnIfPerfScore > 1.05, and perfScore=0.83324]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.70598 secs, and comparison 9.53485 sec, and warnIfPerfScore > 1.15, and perfScore=1.09521]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.641 secs, and comparison 2.98642 sec, and warnIfPerfScore > 0.48, and perfScore=0.256543]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.4175 secs, and comparison 3.3468 sec, and warnIfPerfScore > 0.57, and perfScore=0.29313]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.8552 secs, and comparison 27.1525 sec, and warnIfPerfScore > 2.9, and perfScore=2.11217]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.2346 secs, and comparison 28.4754 sec, and warnIfPerfScore > 2.9, and perfScore=2.15159]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 12.1022 secs, and comparison 181.186 sec, and warnIfPerfScore > 24, and perfScore=14.9713]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1553 secs, and comparison 13.2777 sec, and warnIfPerfScore > 1.7, and perfScore=1.19026]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 11.8132 secs, and comparison 11.4029 sec, and warnIfPerfScore > 1.5, and perfScore=0.965272]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.4943 secs, and comparison 15.3268 sec, and warnIfPerfScore > 2.1, and perfScore=1.46049]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 12.7873 secs, and comparison 9.49417 sec, and warnIfPerfScore > 1.6, and perfScore=0.742469]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 13.4617 secs, and comparison 1.9095 sec, and warnIfPerfScore > 0.23, and perfScore=0.141846]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.1407 secs, and comparison 15.1393 sec, and warnIfPerfScore > 1.3, and perfScore=1.07062]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 12.1866 secs, and comparison 7.22354 sec, and warnIfPerfScore > 1.2, and perfScore=0.592745]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.69883 secs, and comparison 1.86868 sec, and warnIfPerfScore > 0.33, and perfScore=0.242722]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.8021 secs, and comparison 45.0456 sec, and warnIfPerfScore > 6, and perfScore=3.81673]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 11.885 secs, and comparison 6.96356 sec, and warnIfPerfScore > 0.8, and perfScore=0.58591]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.8911 secs, and comparison 13.4749 sec, and warnIfPerfScore > 1.4, and perfScore=1.1332]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 8.27591 secs, and comparison 4.02994 sec, and warnIfPerfScore > 0.65, and perfScore=0.486948]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.2562 secs, and comparison 41.7512 sec, and warnIfPerfScore > 4.4, and perfScore=3.40654]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.6409 secs, and comparison 4.03873 sec, and warnIfPerfScore > 0.6, and perfScore=0.467396]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.5584 secs, and comparison 4.02152 sec, and warnIfPerfScore > 0.6, and perfScore=0.469891]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.52945 secs, and comparison 4.02806 sec, and warnIfPerfScore > 0.6, and perfScore=0.472253]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 8.54524 secs, and comparison 6.57218 sec, and warnIfPerfScore > 1.3, and perfScore=0.769104]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.51844 secs, and comparison 9.54373 sec, and warnIfPerfScore > 1.3, and perfScore=1.00266]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 53.9603 secs, and comparison 7.63547 sec, and warnIfPerfScore > 0.3, and perfScore=0.141502]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.72828 secs, and comparison 13.5745 sec, and warnIfPerfScore > 1.5, and perfScore=1.39536]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.34476 secs, and comparison 3.28381 sec, and warnIfPerfScore > 0.55, and perfScore=0.393517]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.844151 sec, and warnIfPerfScore > 0.1, and perfScore=0.0562767]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.21802 sec, and warnIfPerfScore > 0.5, and perfScore=0.214535]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.21754 secs, and comparison 13.9928 sec, and warnIfPerfScore > 2, and perfScore=1.51806]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 10.7158 secs, and comparison 30.6186 sec, and warnIfPerfScore > 3.6, and perfScore=2.85733]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 45 seconds]]]

Succeeded
