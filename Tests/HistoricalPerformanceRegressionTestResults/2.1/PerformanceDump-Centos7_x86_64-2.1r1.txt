Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan  7 22:22:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.88387 secs, and comparison 5.18993 sec, and warnIfPerfScore > 0.65, and perfScore=0.753925]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.67014 secs, and comparison 3.79685 sec, and warnIfPerfScore > 0.5, and perfScore=0.56923]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.91503 secs, and comparison 8.16263 sec, and warnIfPerfScore > 1.05, and perfScore=0.915603]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.5454 secs, and comparison 8.19931 sec, and warnIfPerfScore > 1.15, and perfScore=1.08666]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.03862 secs, and comparison 3.62501 sec, and warnIfPerfScore > 0.48, and perfScore=1.19298]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 2.96702 secs, and comparison 4.40745 sec, and warnIfPerfScore > 0.57, and perfScore=1.48548]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.7707 secs, and comparison 23.1867 sec, and warnIfPerfScore > 2.9, and perfScore=1.68377]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 15.5127 secs, and comparison 25.3582 sec, and warnIfPerfScore > 2.9, and perfScore=1.63467]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 14.3191 secs, and comparison 98.7249 sec, and warnIfPerfScore > 24, and perfScore=6.89461]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 13.2574 secs, and comparison 11.5047 sec, and warnIfPerfScore > 1.6, and perfScore=0.867792]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.80625 secs, and comparison 9.49022 sec, and warnIfPerfScore > 1.5, and perfScore=0.967772]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.20034 secs, and comparison 13.5411 sec, and warnIfPerfScore > 2.1, and perfScore=1.4718]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.42907 secs, and comparison 7.04263 sec, and warnIfPerfScore > 1.6, and perfScore=0.835517]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.19823 secs, and comparison 3.25572 sec, and warnIfPerfScore > 0.23, and perfScore=0.353951]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.15024 secs, and comparison 8.00868 sec, and warnIfPerfScore > 1.3, and perfScore=1.12006]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.02296 secs, and comparison 12.9878 sec, and warnIfPerfScore > 1.2, and perfScore=1.84933]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 6.86739 secs, and comparison 2.01893 sec, and warnIfPerfScore > 0.33, and perfScore=0.293988]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 6.50291 secs, and comparison 46.5993 sec, and warnIfPerfScore > 6, and perfScore=7.16592]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 6.36022 secs, and comparison 14.7459 sec, and warnIfPerfScore > 0.8, and perfScore=2.31845]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 6.0331 secs, and comparison 13.5871 sec, and warnIfPerfScore > 1.4, and perfScore=2.2521]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.88292 secs, and comparison 3.96788 sec, and warnIfPerfScore > 0.65, and perfScore=0.576483]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.67935 secs, and comparison 40.4267 sec, and warnIfPerfScore > 4.4, and perfScore=4.6578]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.42052 secs, and comparison 3.85946 sec, and warnIfPerfScore > 0.6, and perfScore=0.601113]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.61552 secs, and comparison 3.8093 sec, and warnIfPerfScore > 0.6, and perfScore=0.575813]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.25728 secs, and comparison 3.74263 sec, and warnIfPerfScore > 0.6, and perfScore=0.598124]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.74121 secs, and comparison 6.69519 sec, and warnIfPerfScore > 1.3, and perfScore=0.993173]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 21.6773 secs, and comparison 13.6174 sec, and warnIfPerfScore > 1.3, and perfScore=0.628189]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 33.967 secs, and comparison 9.25832 sec, and warnIfPerfScore > 0.3, and perfScore=0.272568]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.615 secs, and comparison 19.0123 sec, and warnIfPerfScore > 1.5, and perfScore=1.14428]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 12.0699 secs, and comparison 3.16297 sec, and warnIfPerfScore > 0.55, and perfScore=0.262054]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.52621 sec, and warnIfPerfScore > 0.1, and perfScore=0.101747]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.88127 sec, and warnIfPerfScore > 0.5, and perfScore=0.192085]
	                 	Test_Optional_ is FASTER

[[[Tests took: 12 minutes, 10 seconds]]]

Succeeded
