Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr  1 2::12 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.0548 secs, and comparison 5.53669 sec, and warnIfPerfScore > 0.65, and perfScore=0.611464]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.21878 secs, and comparison 3.50758 sec, and warnIfPerfScore > 0.5, and perfScore=0.380482]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.2871 secs, and comparison 9.879 sec, and warnIfPerfScore > 1.05, and perfScore=0.875244]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.86026 secs, and comparison 9.70878 sec, and warnIfPerfScore > 1.15, and perfScore=1.09577]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 10.765 secs, and comparison 2.92005 sec, and warnIfPerfScore > 0.48, and perfScore=0.271253]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.5911 secs, and comparison 3.48094 sec, and warnIfPerfScore > 0.57, and perfScore=0.328667]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.3075 secs, and comparison 27.0008 sec, and warnIfPerfScore > 2.9, and perfScore=2.38787]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.5077 secs, and comparison 28.4628 sec, and warnIfPerfScore > 2.9, and perfScore=2.47338]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 11.2913 secs, and comparison 186.029 sec, and warnIfPerfScore > 24, and perfScore=16.4754]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.6426 secs, and comparison 13.8332 sec, and warnIfPerfScore > 1.7, and perfScore=1.4346]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 11.0898 secs, and comparison 10.9365 sec, and warnIfPerfScore > 1.5, and perfScore=0.986171]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.49529 secs, and comparison 16.2437 sec, and warnIfPerfScore > 2.1, and perfScore=1.71071]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 12.3567 secs, and comparison 10.2824 sec, and warnIfPerfScore > 1.6, and perfScore=0.832128]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.9137 secs, and comparison 1.77315 sec, and warnIfPerfScore > 0.23, and perfScore=0.137307]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 17.043 secs, and comparison 16.9505 sec, and warnIfPerfScore > 1.3, and perfScore=0.994573]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.6129 secs, and comparison 7.05241 sec, and warnIfPerfScore > 1.2, and perfScore=0.559144]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.51084 secs, and comparison 2.02652 sec, and warnIfPerfScore > 0.33, and perfScore=0.23811]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 12.1919 secs, and comparison 50.1912 sec, and warnIfPerfScore > 6, and perfScore=4.11676]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 12.153 secs, and comparison 6.72965 sec, and warnIfPerfScore > 0.8, and perfScore=0.553745]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1446 secs, and comparison 12.5108 sec, and warnIfPerfScore > 1.4, and perfScore=1.03016]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 8.30686 secs, and comparison 4.40069 sec, and warnIfPerfScore > 0.65, and perfScore=0.529766]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.4394 secs, and comparison 46.7149 sec, and warnIfPerfScore > 4.4, and perfScore=3.75538]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 8.70361 secs, and comparison 4.3738 sec, and warnIfPerfScore > 0.6, and perfScore=0.502527]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 8.70509 secs, and comparison 4.38223 sec, and warnIfPerfScore > 0.6, and perfScore=0.50341]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 8.59906 secs, and comparison 4.40386 sec, and warnIfPerfScore > 0.6, and perfScore=0.512133]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.58964 secs, and comparison 6.35501 sec, and warnIfPerfScore > 1.3, and perfScore=0.739846]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.44423 secs, and comparison 11.1215 sec, and warnIfPerfScore > 1.3, and perfScore=1.1776]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 60.4032 secs, and comparison 8.00789 sec, and warnIfPerfScore > 0.3, and perfScore=0.132574]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.3585 secs, and comparison 15.8085 sec, and warnIfPerfScore > 1.5, and perfScore=1.39179]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.00591 secs, and comparison 3.67937 sec, and warnIfPerfScore > 0.55, and perfScore=0.40855]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.15575 sec, and warnIfPerfScore > 0.1, and perfScore=0.07705]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.83264 sec, and warnIfPerfScore > 0.5, and perfScore=0.255509]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.8962 secs, and comparison 11.5262 sec, and warnIfPerfScore > 2, and perfScore=1.05781]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 12.7926 secs, and comparison 38.4114 sec, and warnIfPerfScore > 3.6, and perfScore=3.00263]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 24 seconds]]]

Succeeded
