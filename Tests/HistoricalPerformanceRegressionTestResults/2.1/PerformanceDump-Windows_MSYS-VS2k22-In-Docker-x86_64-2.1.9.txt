Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 9:59:26 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.75242 secs, and comparison 6.40166 sec, and warnIfPerfScore > 0.65, and perfScore=0.731416]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.65412 secs, and comparison 3.71958 sec, and warnIfPerfScore > 0.5, and perfScore=0.429805]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 14.1688 secs, and comparison 11.8723 sec, and warnIfPerfScore > 1.05, and perfScore=0.837914]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.36641 secs, and comparison 9.00293 sec, and warnIfPerfScore > 1.15, and perfScore=1.22216]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.6639 secs, and comparison 2.44389 sec, and warnIfPerfScore > 0.48, and perfScore=0.229174]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 10.2194 secs, and comparison 3.03961 sec, and warnIfPerfScore > 0.57, and perfScore=0.297434]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.06076 secs, and comparison 19.3976 sec, and warnIfPerfScore > 2.9, and perfScore=2.74723]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.01127 secs, and comparison 19.8939 sec, and warnIfPerfScore > 2.9, and perfScore=2.83741]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.83683 secs, and comparison 143.872 sec, and warnIfPerfScore > 24, and perfScore=24.649]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.696 secs, and comparison 10.615 sec, and warnIfPerfScore > 1.7, and perfScore=1.86359]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.61588 secs, and comparison 5.40962 sec, and warnIfPerfScore > 1.5, and perfScore=0.963272]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.38864 secs, and comparison 12.7861 sec, and warnIfPerfScore > 2.1, and perfScore=2.37279]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.8371 secs, and comparison 4.09893 sec, and warnIfPerfScore > 1.6, and perfScore=0.599513]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 7.13471 secs, and comparison 0.697696 sec, and warnIfPerfScore > 0.23, and perfScore=0.0977889]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4436 secs, and comparison 12.5498 sec, and warnIfPerfScore > 1.3, and perfScore=1.00854]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.52545 secs, and comparison 5.49272 sec, and warnIfPerfScore > 1.2, and perfScore=0.644273]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.4686 secs, and comparison 2.01059 sec, and warnIfPerfScore > 0.33, and perfScore=0.237418]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 8.27976 secs, and comparison 41.0244 sec, and warnIfPerfScore > 6, and perfScore=4.95478]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.28232 secs, and comparison 5.13874 sec, and warnIfPerfScore > 0.8, and perfScore=0.620448]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.18586 secs, and comparison 7.31005 sec, and warnIfPerfScore > 1.4, and perfScore=0.893009]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.42004 secs, and comparison 3.63238 sec, and warnIfPerfScore > 0.65, and perfScore=0.431397]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.77843 secs, and comparison 37.9517 sec, and warnIfPerfScore > 4.4, and perfScore=4.32329]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.19994 secs, and comparison 3.51799 sec, and warnIfPerfScore > 0.6, and perfScore=0.429026]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.2558 secs, and comparison 3.49054 sec, and warnIfPerfScore > 0.6, and perfScore=0.422798]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.46073 secs, and comparison 3.58485 sec, and warnIfPerfScore > 0.6, and perfScore=0.423705]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.09612 secs, and comparison 5.15502 sec, and warnIfPerfScore > 1.3, and perfScore=0.636727]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.42835 secs, and comparison 8.38333 sec, and warnIfPerfScore > 1.3, and perfScore=0.994659]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 37.7331 secs, and comparison 6.71285 sec, and warnIfPerfScore > 0.3, and perfScore=0.177903]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.33076 secs, and comparison 9.21151 sec, and warnIfPerfScore > 1.5, and perfScore=1.72799]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.2295 secs, and comparison 2.73277 sec, and warnIfPerfScore > 0.55, and perfScore=0.438682]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.594107 sec, and warnIfPerfScore > 0.1, and perfScore=0.0396071]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.90771 sec, and warnIfPerfScore > 0.5, and perfScore=0.193848]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.7663 secs, and comparison 12.4746 sec, and warnIfPerfScore > 2, and perfScore=1.84364]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.85159 secs, and comparison 14.3175 sec, and warnIfPerfScore > 3.6, and perfScore=1.82352]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 13 seconds]]]

Succeeded
