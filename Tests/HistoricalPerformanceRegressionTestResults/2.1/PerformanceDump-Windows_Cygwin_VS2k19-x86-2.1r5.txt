Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Mar  9 2:1:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 10.929 secs, and comparison 5.57596 sec, and warnIfPerfScore > 0.65, and perfScore=0.510197]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.9859 secs, and comparison 3.7813 sec, and warnIfPerfScore > 0.5, and perfScore=0.344196]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.3403 secs, and comparison 10.6543 sec, and warnIfPerfScore > 1.05, and perfScore=0.86337]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.79058 secs, and comparison 10.8753 sec, and warnIfPerfScore > 1.15, and perfScore=1.11079]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.8762 secs, and comparison 3.57817 sec, and warnIfPerfScore > 0.48, and perfScore=0.240529]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.0209 secs, and comparison 4.04116 sec, and warnIfPerfScore > 0.57, and perfScore=0.269035]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 16.7543 secs, and comparison 33.7132 sec, and warnIfPerfScore > 2.9, and perfScore=2.01221]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.0139 secs, and comparison 35.0355 sec, and warnIfPerfScore > 2.9, and perfScore=2.69215]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 14.1436 secs, and comparison 196.638 sec, and warnIfPerfScore > 24, and perfScore=13.903]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.632 secs, and comparison 15.4573 sec, and warnIfPerfScore > 1.7, and perfScore=1.45384]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 18.4365 secs, and comparison 13.9271 sec, and warnIfPerfScore > 1.5, and perfScore=0.755407]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.5823 secs, and comparison 17.8473 sec, and warnIfPerfScore > 2.1, and perfScore=1.68653]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 16.6082 secs, and comparison 12.222 sec, and warnIfPerfScore > 1.6, and perfScore=0.735903]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 19.7774 secs, and comparison 3.31382 sec, and warnIfPerfScore > 0.23, and perfScore=0.167556]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 22.2916 secs, and comparison 15.3402 sec, and warnIfPerfScore > 1.3, and perfScore=0.688161]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.9107 secs, and comparison 8.46035 sec, and warnIfPerfScore > 1.2, and perfScore=0.775417]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.9424 secs, and comparison 2.85405 sec, and warnIfPerfScore > 0.33, and perfScore=0.260824]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 11.0509 secs, and comparison 46.7715 sec, and warnIfPerfScore > 6, and perfScore=4.23236]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.2963 secs, and comparison 9.81799 sec, and warnIfPerfScore > 0.8, and perfScore=0.798452]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.0592 secs, and comparison 17.9739 sec, and warnIfPerfScore > 1.4, and perfScore=1.37635]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.5948 secs, and comparison 4.30824 sec, and warnIfPerfScore > 0.65, and perfScore=0.406638]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 13.0815 secs, and comparison 42.6081 sec, and warnIfPerfScore > 4.4, and perfScore=3.25713]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.7674 secs, and comparison 4.3222 sec, and warnIfPerfScore > 0.6, and perfScore=0.367302]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.5715 secs, and comparison 4.48007 sec, and warnIfPerfScore > 0.6, and perfScore=0.356366]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.9353 secs, and comparison 4.58484 sec, and warnIfPerfScore > 0.6, and perfScore=0.38414]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 12.0635 secs, and comparison 9.45243 sec, and warnIfPerfScore > 1.3, and perfScore=0.783559]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2525 secs, and comparison 12.8878 sec, and warnIfPerfScore > 1.3, and perfScore=1.05185]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 75.195 secs, and comparison 11.9769 sec, and warnIfPerfScore > 0.3, and perfScore=0.159277]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.6946 secs, and comparison 27.1297 sec, and warnIfPerfScore > 1.5, and perfScore=1.25053]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.2531 secs, and comparison 5.04173 sec, and warnIfPerfScore > 0.55, and perfScore=0.330538]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 15 secs, and comparison 1.2025 sec, and warnIfPerfScore > 0.1, and perfScore=0.0801665]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.96332 sec, and warnIfPerfScore > 0.5, and perfScore=0.264222]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.8332 secs, and comparison 18.32 sec, and warnIfPerfScore > 2, and perfScore=1.42755]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.3925 secs, and comparison 37.9047 sec, and warnIfPerfScore > 3.6, and perfScore=2.8303]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 12 seconds]]]

Succeeded
