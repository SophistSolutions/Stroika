Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu May 12 2:4:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.79259 secs, and comparison 4.55473 sec, and warnIfPerfScore > 0.65, and perfScore=0.786302]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.80601 secs, and comparison 2.70174 sec, and warnIfPerfScore > 0.5, and perfScore=0.465335]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.36888 secs, and comparison 7.45326 sec, and warnIfPerfScore > 1.05, and perfScore=0.890592]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.85509 secs, and comparison 7.55233 sec, and warnIfPerfScore > 1.15, and perfScore=1.10171]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.5806 secs, and comparison 2.38645 sec, and warnIfPerfScore > 0.48, and perfScore=0.22555]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.1639 secs, and comparison 2.94629 sec, and warnIfPerfScore > 0.57, and perfScore=0.289877]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.09502 secs, and comparison 20.1094 sec, and warnIfPerfScore > 2.9, and perfScore=2.8343]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.05729 secs, and comparison 20.0636 sec, and warnIfPerfScore > 2.9, and perfScore=2.84295]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.06048 secs, and comparison 134.873 sec, and warnIfPerfScore > 24, and perfScore=22.2545]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.92161 secs, and comparison 10.5346 sec, and warnIfPerfScore > 1.7, and perfScore=1.77902]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.93839 secs, and comparison 5.60096 sec, and warnIfPerfScore > 1.5, and perfScore=0.943177]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.88917 secs, and comparison 12.6831 sec, and warnIfPerfScore > 2.1, and perfScore=2.15362]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.364 secs, and comparison 4.17077 sec, and warnIfPerfScore > 1.6, and perfScore=0.337331]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 13.1471 secs, and comparison 0.710868 sec, and warnIfPerfScore > 0.23, and perfScore=0.0540702]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.074 secs, and comparison 12.7045 sec, and warnIfPerfScore > 1.3, and perfScore=1.05222]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.7411 secs, and comparison 5.76639 sec, and warnIfPerfScore > 1.2, and perfScore=0.49113]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.88838 secs, and comparison 1.82852 sec, and warnIfPerfScore > 0.33, and perfScore=0.231799]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.324 secs, and comparison 40.0489 sec, and warnIfPerfScore > 6, and perfScore=4.81126]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.16393 secs, and comparison 5.38877 sec, and warnIfPerfScore > 0.8, and perfScore=0.660071]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.17801 secs, and comparison 7.49424 sec, and warnIfPerfScore > 1.4, and perfScore=0.916389]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.33927 secs, and comparison 3.42916 sec, and warnIfPerfScore > 0.65, and perfScore=0.467234]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.26736 secs, and comparison 35.9747 sec, and warnIfPerfScore > 4.4, and perfScore=4.35141]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.32661 secs, and comparison 3.35047 sec, and warnIfPerfScore > 0.6, and perfScore=0.457302]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.26438 secs, and comparison 3.35387 sec, and warnIfPerfScore > 0.6, and perfScore=0.461687]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.38613 secs, and comparison 3.32283 sec, and warnIfPerfScore > 0.6, and perfScore=0.449875]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.46093 secs, and comparison 5.00779 sec, and warnIfPerfScore > 1.3, and perfScore=0.671201]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.86871 secs, and comparison 8.31746 sec, and warnIfPerfScore > 1.3, and perfScore=1.05703]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 36.9297 secs, and comparison 4.92554 sec, and warnIfPerfScore > 0.3, and perfScore=0.133376]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.84064 secs, and comparison 9.52739 sec, and warnIfPerfScore > 1.5, and perfScore=1.63123]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.14746 secs, and comparison 2.78913 sec, and warnIfPerfScore > 0.55, and perfScore=0.453704]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.621887 sec, and warnIfPerfScore > 0.1, and perfScore=0.0414591]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79275 sec, and warnIfPerfScore > 0.5, and perfScore=0.186183]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.75157 secs, and comparison 12.4061 sec, and warnIfPerfScore > 2, and perfScore=1.83751]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.62714 secs, and comparison 14.099 sec, and warnIfPerfScore > 3.6, and perfScore=1.84853]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 45 seconds]]]

Succeeded
