Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 26 1:23:41 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.08636 secs, and comparison 4.35471 sec, and warnIfPerfScore > 0.65, and perfScore=0.614521]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.11214 secs, and comparison 2.73972 sec, and warnIfPerfScore > 0.5, and perfScore=0.385217]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 9.01698 secs, and comparison 7.70597 sec, and warnIfPerfScore > 1.05, and perfScore=0.854607]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.81909 secs, and comparison 7.41338 sec, and warnIfPerfScore > 1.15, and perfScore=1.08715]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.10088 secs, and comparison 2.23184 sec, and warnIfPerfScore > 0.48, and perfScore=0.275506]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.21964 secs, and comparison 2.79233 sec, and warnIfPerfScore > 0.57, and perfScore=0.339715]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.94796 secs, and comparison 20.7094 sec, and warnIfPerfScore > 2.9, and perfScore=2.31443]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.07432 secs, and comparison 21.7084 sec, and warnIfPerfScore > 2.9, and perfScore=2.39229]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.54674 secs, and comparison 148.242 sec, and warnIfPerfScore > 24, and perfScore=17.3449]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.53346 secs, and comparison 10.6405 sec, and warnIfPerfScore > 1.7, and perfScore=1.41243]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.20447 secs, and comparison 8.61528 sec, and warnIfPerfScore > 1.5, and perfScore=1.05007]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.69638 secs, and comparison 12.4047 sec, and warnIfPerfScore > 2.1, and perfScore=1.61176]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.05695 secs, and comparison 7.89787 sec, and warnIfPerfScore > 1.6, and perfScore=0.872023]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.039 secs, and comparison 1.40722 sec, and warnIfPerfScore > 0.23, and perfScore=0.140176]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8554 secs, and comparison 13.508 sec, and warnIfPerfScore > 1.3, and perfScore=1.05077]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.3351 secs, and comparison 5.70498 sec, and warnIfPerfScore > 1.2, and perfScore=0.552001]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.32313 secs, and comparison 1.5553 sec, and warnIfPerfScore > 0.33, and perfScore=0.24597]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.6241 secs, and comparison 40.0552 sec, and warnIfPerfScore > 6, and perfScore=4.16197]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.65699 secs, and comparison 5.43774 sec, and warnIfPerfScore > 0.8, and perfScore=0.563089]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.96966 secs, and comparison 9.87512 sec, and warnIfPerfScore > 1.4, and perfScore=0.990517]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.2871 secs, and comparison 3.4724 sec, and warnIfPerfScore > 0.65, and perfScore=0.552306]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.0376 secs, and comparison 37.2265 sec, and warnIfPerfScore > 4.4, and perfScore=3.70871]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.61658 secs, and comparison 3.55553 sec, and warnIfPerfScore > 0.6, and perfScore=0.537367]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.72224 secs, and comparison 3.46841 sec, and warnIfPerfScore > 0.6, and perfScore=0.51596]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.51995 secs, and comparison 3.47762 sec, and warnIfPerfScore > 0.6, and perfScore=0.533382]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.5066 secs, and comparison 4.83519 sec, and warnIfPerfScore > 1.3, and perfScore=0.743121]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.27313 secs, and comparison 9.383 sec, and warnIfPerfScore > 1.3, and perfScore=1.29009]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.6035 secs, and comparison 6.04405 sec, and warnIfPerfScore > 0.3, and perfScore=0.124354]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.73533 secs, and comparison 12.3111 sec, and warnIfPerfScore > 1.5, and perfScore=1.40934]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.44796 secs, and comparison 2.90552 sec, and warnIfPerfScore > 0.55, and perfScore=0.39011]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.806057 sec, and warnIfPerfScore > 0.1, and perfScore=0.0537372]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.02132 sec, and warnIfPerfScore > 0.5, and perfScore=0.201421]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 8.30825 secs, and comparison 18.5261 sec, and warnIfPerfScore > 2, and perfScore=2.22984]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2 and got 2.22984}}}

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.61446 secs, and comparison 29.7919 sec, and warnIfPerfScore > 3.6, and perfScore=3.09865]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 2 seconds]]]

Succeeded
