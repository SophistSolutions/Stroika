Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 28 22:27:40 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.44174 secs, and comparison 4.97434 sec, and warnIfPerfScore > 0.65, and perfScore=0.589255]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.62057 secs, and comparison 3.31902 sec, and warnIfPerfScore > 0.5, and perfScore=0.385012]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.8628 secs, and comparison 8.99646 sec, and warnIfPerfScore > 1.05, and perfScore=0.828193]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.49123 secs, and comparison 8.89792 sec, and warnIfPerfScore > 1.15, and perfScore=1.0479]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.4582 secs, and comparison 2.70734 sec, and warnIfPerfScore > 0.48, and perfScore=0.258873]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.4807 secs, and comparison 3.20381 sec, and warnIfPerfScore > 0.57, and perfScore=0.305688]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 10.9936 secs, and comparison 25.6266 sec, and warnIfPerfScore > 2.9, and perfScore=2.33106]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.7046 secs, and comparison 25.5277 sec, and warnIfPerfScore > 2.9, and perfScore=2.38475]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 10.8074 secs, and comparison 189.736 sec, and warnIfPerfScore > 24, and perfScore=17.5562]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.44578 secs, and comparison 12.6979 sec, and warnIfPerfScore > 1.7, and perfScore=1.34429]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.4711 secs, and comparison 10.197 sec, and warnIfPerfScore > 1.5, and perfScore=0.97382]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.48262 secs, and comparison 14.9384 sec, and warnIfPerfScore > 2.1, and perfScore=1.57535]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 12.723 secs, and comparison 9.31934 sec, and warnIfPerfScore > 1.6, and perfScore=0.732478]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 12.6939 secs, and comparison 1.61641 sec, and warnIfPerfScore > 0.23, and perfScore=0.127337]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.4079 secs, and comparison 15.7318 sec, and warnIfPerfScore > 1.3, and perfScore=1.02102]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 12.6269 secs, and comparison 7.32931 sec, and warnIfPerfScore > 1.2, and perfScore=0.580453]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 8.34048 secs, and comparison 2.11373 sec, and warnIfPerfScore > 0.33, and perfScore=0.25343]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.2725 secs, and comparison 46.3868 sec, and warnIfPerfScore > 6, and perfScore=3.77974]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.6802 secs, and comparison 6.64504 sec, and warnIfPerfScore > 0.8, and perfScore=0.568913]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.6667 secs, and comparison 12.2484 sec, and warnIfPerfScore > 1.4, and perfScore=1.04986]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.82587 secs, and comparison 3.9654 sec, and warnIfPerfScore > 0.65, and perfScore=0.506704]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.3934 secs, and comparison 41.7712 sec, and warnIfPerfScore > 4.4, and perfScore=3.37043]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.97831 secs, and comparison 3.87584 sec, and warnIfPerfScore > 0.6, and perfScore=0.485797]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.94807 secs, and comparison 3.88509 sec, and warnIfPerfScore > 0.6, and perfScore=0.488809]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.67443 secs, and comparison 3.98799 sec, and warnIfPerfScore > 0.6, and perfScore=0.45974]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.28615 secs, and comparison 6.29868 sec, and warnIfPerfScore > 1.3, and perfScore=0.760145]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.88741 secs, and comparison 10.6325 sec, and warnIfPerfScore > 1.3, and perfScore=1.19635]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 59.11 secs, and comparison 7.17657 sec, and warnIfPerfScore > 0.3, and perfScore=0.12141]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.865 secs, and comparison 15.3874 sec, and warnIfPerfScore > 1.5, and perfScore=1.41623]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.00135 secs, and comparison 3.55792 sec, and warnIfPerfScore > 0.55, and perfScore=0.395265]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.04402 sec, and warnIfPerfScore > 0.1, and perfScore=0.0696012]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.4873 sec, and warnIfPerfScore > 0.5, and perfScore=0.232487]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.3099 secs, and comparison 15.8236 sec, and warnIfPerfScore > 2, and perfScore=1.5348]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.0446 secs, and comparison 33.9285 sec, and warnIfPerfScore > 3.6, and perfScore=2.8169]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 44 seconds]]]

Succeeded
