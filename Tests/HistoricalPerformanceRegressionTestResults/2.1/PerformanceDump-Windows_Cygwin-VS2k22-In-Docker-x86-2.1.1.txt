Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jun 25 :10:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.97393 secs, and comparison 4.21419 sec, and warnIfPerfScore > 0.65, and perfScore=0.604278]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.01247 secs, and comparison 2.66496 sec, and warnIfPerfScore > 0.5, and perfScore=0.380031]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.69207 secs, and comparison 7.33789 sec, and warnIfPerfScore > 1.05, and perfScore=0.844205]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.85537 secs, and comparison 7.41059 sec, and warnIfPerfScore > 1.15, and perfScore=1.08099]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.67053 secs, and comparison 2.19203 sec, and warnIfPerfScore > 0.48, and perfScore=0.285774]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.86915 secs, and comparison 2.64068 sec, and warnIfPerfScore > 0.57, and perfScore=0.335574]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.90269 secs, and comparison 20.381 sec, and warnIfPerfScore > 2.9, and perfScore=2.579]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.00999 secs, and comparison 20.8971 sec, and warnIfPerfScore > 2.9, and perfScore=2.60888]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.00242 secs, and comparison 146.527 sec, and warnIfPerfScore > 24, and perfScore=18.3104]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.25046 secs, and comparison 10.6264 sec, and warnIfPerfScore > 1.7, and perfScore=1.46562]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.63262 secs, and comparison 7.59709 sec, and warnIfPerfScore > 1.5, and perfScore=0.995344]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.80776 secs, and comparison 12.2742 sec, and warnIfPerfScore > 2.1, and perfScore=1.80297]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 8.59617 secs, and comparison 6.66491 sec, and warnIfPerfScore > 1.6, and perfScore=0.775336]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.84567 secs, and comparison 1.28076 sec, and warnIfPerfScore > 0.23, and perfScore=0.144789]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6457 secs, and comparison 13.4279 sec, and warnIfPerfScore > 1.3, and perfScore=1.06185]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.0278 secs, and comparison 5.47859 sec, and warnIfPerfScore > 1.2, and perfScore=0.546342]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.13743 secs, and comparison 1.49918 sec, and warnIfPerfScore > 0.33, and perfScore=0.244269]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.49938 secs, and comparison 39.3396 sec, and warnIfPerfScore > 6, and perfScore=4.14128]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.46373 secs, and comparison 5.18313 sec, and warnIfPerfScore > 0.8, and perfScore=0.547684]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.58192 secs, and comparison 9.16876 sec, and warnIfPerfScore > 1.4, and perfScore=0.956881]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.09371 secs, and comparison 3.4116 sec, and warnIfPerfScore > 0.65, and perfScore=0.559857]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.81668 secs, and comparison 36.6048 sec, and warnIfPerfScore > 4.4, and perfScore=3.72884]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.25991 secs, and comparison 3.40872 sec, and warnIfPerfScore > 0.6, and perfScore=0.544532]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.28681 secs, and comparison 3.35202 sec, and warnIfPerfScore > 0.6, and perfScore=0.533184]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.30514 secs, and comparison 3.4421 sec, and warnIfPerfScore > 0.6, and perfScore=0.54592]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.38482 secs, and comparison 4.7619 sec, and warnIfPerfScore > 1.3, and perfScore=0.745815]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.71868 secs, and comparison 8.27853 sec, and warnIfPerfScore > 1.3, and perfScore=1.23217]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 46.5102 secs, and comparison 5.79306 sec, and warnIfPerfScore > 0.3, and perfScore=0.124555]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.01622 secs, and comparison 11.9584 sec, and warnIfPerfScore > 1.5, and perfScore=1.49178]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.23055 secs, and comparison 3.17183 sec, and warnIfPerfScore > 0.55, and perfScore=0.438671]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.766793 sec, and warnIfPerfScore > 0.1, and perfScore=0.0511195]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.12112 sec, and warnIfPerfScore > 0.5, and perfScore=0.208074]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.83635 secs, and comparison 13.0106 sec, and warnIfPerfScore > 2, and perfScore=1.66029]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.75838 secs, and comparison 29.4456 sec, and warnIfPerfScore > 3.6, and perfScore=3.36199]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 31 seconds]]]

Succeeded
