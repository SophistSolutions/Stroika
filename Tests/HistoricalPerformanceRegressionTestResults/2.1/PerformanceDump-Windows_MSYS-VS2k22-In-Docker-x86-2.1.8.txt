Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov  3 22:29:24 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.39931 secs, and comparison 4.42316 sec, and warnIfPerfScore > 0.65, and perfScore=0.597781]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.35236 secs, and comparison 2.67487 sec, and warnIfPerfScore > 0.5, and perfScore=0.363811]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.6529 secs, and comparison 7.33434 sec, and warnIfPerfScore > 1.05, and perfScore=0.847616]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.18915 secs, and comparison 7.69944 sec, and warnIfPerfScore > 1.15, and perfScore=1.07098]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.23764 secs, and comparison 2.3037 sec, and warnIfPerfScore > 0.48, and perfScore=0.279655]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.2769 secs, and comparison 2.84245 sec, and warnIfPerfScore > 0.57, and perfScore=0.343419]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.35883 secs, and comparison 21.7712 sec, and warnIfPerfScore > 2.9, and perfScore=2.60458]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.56781 secs, and comparison 21.5326 sec, and warnIfPerfScore > 2.9, and perfScore=2.51319]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.31116 secs, and comparison 151.423 sec, and warnIfPerfScore > 24, and perfScore=18.2193]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.80686 secs, and comparison 10.5276 sec, and warnIfPerfScore > 1.7, and perfScore=1.34851]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.04909 secs, and comparison 7.72719 sec, and warnIfPerfScore > 1.5, and perfScore=0.960007]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.67292 secs, and comparison 12.9193 sec, and warnIfPerfScore > 2.1, and perfScore=1.93608]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.1652 secs, and comparison 6.81785 sec, and warnIfPerfScore > 1.6, and perfScore=0.743885]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.55395 secs, and comparison 1.36904 sec, and warnIfPerfScore > 0.23, and perfScore=0.143296]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 13.6143 secs, and comparison 13.1487 sec, and warnIfPerfScore > 1.3, and perfScore=0.965799]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.9404 secs, and comparison 5.64144 sec, and warnIfPerfScore > 1.2, and perfScore=0.567526]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.78847 secs, and comparison 2.30744 sec, and warnIfPerfScore > 0.33, and perfScore=0.23573]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.67992 secs, and comparison 39.9136 sec, and warnIfPerfScore > 6, and perfScore=4.12334]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.55218 secs, and comparison 5.46689 sec, and warnIfPerfScore > 0.8, and perfScore=0.572318]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.57192 secs, and comparison 10.0222 sec, and warnIfPerfScore > 1.4, and perfScore=1.04704]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.42513 secs, and comparison 3.50659 sec, and warnIfPerfScore > 0.65, and perfScore=0.372047]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.88019 secs, and comparison 37.3225 sec, and warnIfPerfScore > 4.4, and perfScore=3.77751]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.26328 secs, and comparison 3.53341 sec, and warnIfPerfScore > 0.6, and perfScore=0.381442]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.64452 secs, and comparison 3.6288 sec, and warnIfPerfScore > 0.6, and perfScore=0.376255]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.21185 secs, and comparison 3.93466 sec, and warnIfPerfScore > 0.6, and perfScore=0.42713]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.24748 secs, and comparison 5.11814 sec, and warnIfPerfScore > 1.3, and perfScore=0.553464]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.488 secs, and comparison 8.82911 sec, and warnIfPerfScore > 1.3, and perfScore=0.841827]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 47.3429 secs, and comparison 5.68854 sec, and warnIfPerfScore > 0.3, and perfScore=0.120156]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.47867 secs, and comparison 12.8999 sec, and warnIfPerfScore > 1.5, and perfScore=1.52146]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.52146}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.52799 secs, and comparison 2.98673 sec, and warnIfPerfScore > 0.55, and perfScore=0.39675]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.854544 sec, and warnIfPerfScore > 0.1, and perfScore=0.0569696]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.29341 sec, and warnIfPerfScore > 0.5, and perfScore=0.21956]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.1663 secs, and comparison 13.5034 sec, and warnIfPerfScore > 2, and perfScore=1.65355]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.71541 secs, and comparison 30.1353 sec, and warnIfPerfScore > 3.6, and perfScore=3.1018]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 19 seconds]]]

Succeeded
