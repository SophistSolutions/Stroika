Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/1/18 11:54:18]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.90967 secs, and comparison 4.60548 sec, and warnIfPerfScore > 0.62, and perfScore=0.779312]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.89633 secs, and comparison 2.85836 sec, and warnIfPerfScore > 0.65, and perfScore=0.484769]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.24407 secs, and comparison 6.86038 sec, and warnIfPerfScore > 1.05, and perfScore=1.0987]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.43133 secs, and comparison 2.76255 sec, and warnIfPerfScore > 0.5, and perfScore=0.805095]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.12648 secs, and comparison 3.86504 sec, and warnIfPerfScore > 0.68, and perfScore=0.936645]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 6.86169 secs, and comparison 30.033 sec, and warnIfPerfScore > 4.3, and perfScore=4.37691]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 7.72514 secs, and comparison 32.5372 sec, and warnIfPerfScore > 4, and perfScore=4.21186]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	34
	DETAILS:         	[baseline test 10.7612 secs, and comparison 363.673 sec, and warnIfPerfScore > 10.4, and perfScore=33.7947]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.50634 secs, and comparison 9.72318 sec, and warnIfPerfScore > 3.2, and perfScore=2.15767]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.52925 secs, and comparison 8.26901 sec, and warnIfPerfScore > 1.8, and perfScore=0.969488]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 2.27102 secs, and comparison 10.4718 sec, and warnIfPerfScore > 2.8, and perfScore=4.61106]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.02482 secs, and comparison 17.3316 sec, and warnIfPerfScore > 3.3, and perfScore=2.46719]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.49584 secs, and comparison 2.5925 sec, and warnIfPerfScore > 0.25, and perfScore=0.345858]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.45889 secs, and comparison 2.98609 sec, and warnIfPerfScore > 1.4, and perfScore=1.2144]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 24.7781 secs, and comparison 24.5259 sec, and warnIfPerfScore > 7.7, and perfScore=0.989824]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 14.5994 secs, and comparison 2.58843 sec, and warnIfPerfScore > 1.55, and perfScore=0.177297]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 23.1366 secs, and comparison 54.8523 sec, and warnIfPerfScore > 9, and perfScore=2.37081]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.3465 secs, and comparison 5.01237 sec, and warnIfPerfScore > 1, and perfScore=0.48445]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 23.9034 secs, and comparison 50.9886 sec, and warnIfPerfScore > 7.9, and perfScore=2.13312]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.6447 secs, and comparison 5.36889 sec, and warnIfPerfScore > 0.8, and perfScore=0.461057]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.69542 secs, and comparison 11.0458 sec, and warnIfPerfScore > 1.7, and perfScore=1.43537]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.92422 secs, and comparison 2.09658 sec, and warnIfPerfScore > 0.55, and perfScore=0.302789]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.6161 sec, and warnIfPerfScore > 0.4, and perfScore=0.10774]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79885 sec, and warnIfPerfScore > 1.1, and perfScore=0.18659]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 28 seconds]]]

Succeeded
