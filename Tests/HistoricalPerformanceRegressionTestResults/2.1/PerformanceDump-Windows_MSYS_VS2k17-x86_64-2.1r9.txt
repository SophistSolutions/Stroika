Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 6:3:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.04852 secs, and comparison 5.12118 sec, and warnIfPerfScore > 0.65, and perfScore=0.636289]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.35859 secs, and comparison 3.1103 sec, and warnIfPerfScore > 0.5, and perfScore=0.372108]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.6762 secs, and comparison 9.45367 sec, and warnIfPerfScore > 1.05, and perfScore=0.885486]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.17827 secs, and comparison 9.13649 sec, and warnIfPerfScore > 1.15, and perfScore=1.11717]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.42889 secs, and comparison 3.15664 sec, and warnIfPerfScore > 0.48, and perfScore=0.334784]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.69742 secs, and comparison 3.75604 sec, and warnIfPerfScore > 0.57, and perfScore=0.387324]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.472 secs, and comparison 25.4272 sec, and warnIfPerfScore > 2.9, and perfScore=2.68445]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.2108 secs, and comparison 26.9035 sec, and warnIfPerfScore > 2.9, and perfScore=2.63482]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 8.29188 secs, and comparison 162.613 sec, and warnIfPerfScore > 24, and perfScore=19.6111]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.13759 secs, and comparison 13.2365 sec, and warnIfPerfScore > 1.7, and perfScore=1.44858]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.54321 secs, and comparison 9.11455 sec, and warnIfPerfScore > 1.5, and perfScore=0.955083]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.23281 secs, and comparison 16.2697 sec, and warnIfPerfScore > 2.1, and perfScore=1.97621]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 10.5606 secs, and comparison 7.05165 sec, and warnIfPerfScore > 1.6, and perfScore=0.667729]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.4267 secs, and comparison 1.31675 sec, and warnIfPerfScore > 0.23, and perfScore=0.126286]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.98 secs, and comparison 12.4746 sec, and warnIfPerfScore > 1.3, and perfScore=1.04129]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.63856 secs, and comparison 7.03444 sec, and warnIfPerfScore > 1.2, and perfScore=0.729823]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 12.3543 secs, and comparison 2.74288 sec, and warnIfPerfScore > 0.33, and perfScore=0.222019]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.24671 secs, and comparison 46.2454 sec, and warnIfPerfScore > 6, and perfScore=5.00128]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 9.01675 secs, and comparison 7.36596 sec, and warnIfPerfScore > 0.8, and perfScore=0.81692]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.2689 secs, and comparison 16.1084 sec, and warnIfPerfScore > 1.4, and perfScore=1.56867]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.8311 secs, and comparison 4.49941 sec, and warnIfPerfScore > 0.65, and perfScore=0.32531]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.1717 secs, and comparison 45.1545 sec, and warnIfPerfScore > 4.4, and perfScore=4.04188]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.7004 secs, and comparison 4.45711 sec, and warnIfPerfScore > 0.6, and perfScore=0.350941]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.8664 secs, and comparison 4.66545 sec, and warnIfPerfScore > 0.6, and perfScore=0.336458]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 17.2714 secs, and comparison 4.76471 sec, and warnIfPerfScore > 0.6, and perfScore=0.275872]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 18.9596 secs, and comparison 12.4776 sec, and warnIfPerfScore > 1.3, and perfScore=0.658117]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 21.0453 secs, and comparison 19.907 sec, and warnIfPerfScore > 1.3, and perfScore=0.945912]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 111.919 secs, and comparison 7.65544 sec, and warnIfPerfScore > 0.3, and perfScore=0.0684015]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.3319 secs, and comparison 14.5472 sec, and warnIfPerfScore > 1.5, and perfScore=1.55886]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15.9298 secs, and comparison 6.36654 sec, and warnIfPerfScore > 0.55, and perfScore=0.399663]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.61962 sec, and warnIfPerfScore > 0.1, and perfScore=0.107975]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.59811 sec, and warnIfPerfScore > 0.5, and perfScore=0.306541]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 18.7515 secs, and comparison 34.8709 sec, and warnIfPerfScore > 2, and perfScore=1.85964]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 21.7739 secs, and comparison 38.9493 sec, and warnIfPerfScore > 3.6, and perfScore=1.78881]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes]]]

Succeeded
