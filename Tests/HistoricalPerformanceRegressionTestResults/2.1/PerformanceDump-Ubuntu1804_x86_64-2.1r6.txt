Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 26 16:54:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.6332 secs, and comparison 5.03503 sec, and warnIfPerfScore > 0.65, and perfScore=0.759065]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.71404 secs, and comparison 3.16818 sec, and warnIfPerfScore > 0.5, and perfScore=0.471874]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.4297 secs, and comparison 7.42741 sec, and warnIfPerfScore > 1.05, and perfScore=0.8811]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.37905 secs, and comparison 7.38746 sec, and warnIfPerfScore > 1.15, and perfScore=1.15808]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 4.2466 secs, and comparison 2.95575 sec, and warnIfPerfScore > 0.48, and perfScore=0.696026]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 5.37517 secs, and comparison 3.97498 sec, and warnIfPerfScore > 0.57, and perfScore=0.739508]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.71939 secs, and comparison 18.3894 sec, and warnIfPerfScore > 2.9, and perfScore=4.94421]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 5.11981 secs, and comparison 19.8751 sec, and warnIfPerfScore > 2.9, and perfScore=3.882]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.8118 secs, and comparison 65.9208 sec, and warnIfPerfScore > 24, and perfScore=11.3426]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.50172 secs, and comparison 11.0447 sec, and warnIfPerfScore > 1.7, and perfScore=1.69873]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.69084 secs, and comparison 6.36284 sec, and warnIfPerfScore > 1.5, and perfScore=0.827327]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 3.47142 secs, and comparison 13.1918 sec, and warnIfPerfScore > 2.1, and perfScore=3.80011]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.74699 secs, and comparison 5.4006 sec, and warnIfPerfScore > 1.6, and perfScore=0.800446]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 5.93814 secs, and comparison 2.58411 sec, and warnIfPerfScore > 0.23, and perfScore=0.435172]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 4.47667 secs, and comparison 6.21264 sec, and warnIfPerfScore > 1.3, and perfScore=1.38778]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.41742 secs, and comparison 8.9551 sec, and warnIfPerfScore > 1.2, and perfScore=2.02722]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 20.0278 secs, and comparison 2.08674 sec, and warnIfPerfScore > 0.33, and perfScore=0.104192]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.82766 secs, and comparison 45.3204 sec, and warnIfPerfScore > 6, and perfScore=11.8402]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.84404 secs, and comparison 7.7423 sec, and warnIfPerfScore > 0.8, and perfScore=2.01411]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.57114 secs, and comparison 8.29177 sec, and warnIfPerfScore > 1.4, and perfScore=2.32188]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.0249 secs, and comparison 3.87625 sec, and warnIfPerfScore > 0.65, and perfScore=0.297602]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 7.81705 secs, and comparison 41.6037 sec, and warnIfPerfScore > 4.4, and perfScore=5.32217]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.2148 secs, and comparison 4.12824 sec, and warnIfPerfScore > 0.6, and perfScore=0.290418]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 14.6035 secs, and comparison 4.05012 sec, and warnIfPerfScore > 0.6, and perfScore=0.277339]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.9126 secs, and comparison 3.93455 sec, and warnIfPerfScore > 0.6, and perfScore=0.26384]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 14.2502 secs, and comparison 5.75257 sec, and warnIfPerfScore > 1.3, and perfScore=0.403684]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 22.2051 secs, and comparison 12.1537 sec, and warnIfPerfScore > 1.3, and perfScore=0.54734]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 22.951 secs, and comparison 7.98761 sec, and warnIfPerfScore > 0.3, and perfScore=0.348029]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.46868 secs, and comparison 14.4955 sec, and warnIfPerfScore > 1.5, and perfScore=1.53089]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.71178 secs, and comparison 2.86438 sec, and warnIfPerfScore > 0.55, and perfScore=0.328794]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.829642 sec, and warnIfPerfScore > 0.1, and perfScore=0.0553094]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.33169 sec, and warnIfPerfScore > 0.5, and perfScore=0.222113]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 24 seconds]]]

Succeeded
