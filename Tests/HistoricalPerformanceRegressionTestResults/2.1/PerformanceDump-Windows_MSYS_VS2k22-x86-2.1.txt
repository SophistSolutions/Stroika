Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 :59:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.94985 secs, and comparison 4.57753 sec, and warnIfPerfScore > 0.65, and perfScore=0.575801]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.63205 secs, and comparison 3.03507 sec, and warnIfPerfScore > 0.5, and perfScore=0.397675]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 9.23608 secs, and comparison 7.86666 sec, and warnIfPerfScore > 1.05, and perfScore=0.851731]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.20562 secs, and comparison 7.94487 sec, and warnIfPerfScore > 1.15, and perfScore=1.10259]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 33.88 secs, and comparison 2.41892 sec, and warnIfPerfScore > 0.48, and perfScore=0.0713968]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 31.8799 secs, and comparison 2.97722 sec, and warnIfPerfScore > 0.57, and perfScore=0.0933886]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.7777 secs, and comparison 21.8249 sec, and warnIfPerfScore > 2.9, and perfScore=2.4864]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.99752 secs, and comparison 22.5682 sec, and warnIfPerfScore > 2.9, and perfScore=2.50827]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.2707 secs, and comparison 152.963 sec, and warnIfPerfScore > 24, and perfScore=18.4945]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.43651 secs, and comparison 11.3104 sec, and warnIfPerfScore > 1.7, and perfScore=1.52093]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.17905 secs, and comparison 7.98522 sec, and warnIfPerfScore > 1.5, and perfScore=0.976301]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.603 secs, and comparison 13.4949 sec, and warnIfPerfScore > 2.1, and perfScore=1.77494]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.28936 secs, and comparison 7.16577 sec, and warnIfPerfScore > 1.6, and perfScore=0.771395]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.71449 secs, and comparison 1.33292 sec, and warnIfPerfScore > 0.23, and perfScore=0.137209]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1839 secs, and comparison 13.6446 sec, and warnIfPerfScore > 1.3, and perfScore=1.03494]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.5354 secs, and comparison 5.91621 sec, and warnIfPerfScore > 1.2, and perfScore=0.561553]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.42597 secs, and comparison 1.58701 sec, and warnIfPerfScore > 0.33, and perfScore=0.246968]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.205 secs, and comparison 41.6727 sec, and warnIfPerfScore > 6, and perfScore=4.08358]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.0506 secs, and comparison 5.52354 sec, and warnIfPerfScore > 0.8, and perfScore=0.549574]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.0414 secs, and comparison 9.49616 sec, and warnIfPerfScore > 1.4, and perfScore=0.945697]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.32388 secs, and comparison 3.57262 sec, and warnIfPerfScore > 0.65, and perfScore=0.56494]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.1445 secs, and comparison 38.2494 sec, and warnIfPerfScore > 4.4, and perfScore=3.77044]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.52325 secs, and comparison 3.5661 sec, and warnIfPerfScore > 0.6, and perfScore=0.546675]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.47537 secs, and comparison 3.53308 sec, and warnIfPerfScore > 0.6, and perfScore=0.545618]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.54069 secs, and comparison 3.55188 sec, and warnIfPerfScore > 0.6, and perfScore=0.543044]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.4216 secs, and comparison 4.81186 sec, and warnIfPerfScore > 1.3, and perfScore=0.749323]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.96373 secs, and comparison 8.80599 sec, and warnIfPerfScore > 1.3, and perfScore=1.26455]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.4104 secs, and comparison 6.10995 sec, and warnIfPerfScore > 0.3, and perfScore=0.13165]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.60815 secs, and comparison 12.7754 sec, and warnIfPerfScore > 1.5, and perfScore=1.48411]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.40945 secs, and comparison 3.01789 sec, and warnIfPerfScore > 0.55, and perfScore=0.407302]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.81622 sec, and warnIfPerfScore > 0.1, and perfScore=0.0544147]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.32716 sec, and warnIfPerfScore > 0.5, and perfScore=0.22181]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.88703 secs, and comparison 14.1433 sec, and warnIfPerfScore > 2, and perfScore=1.59145]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.54015 secs, and comparison 30.6847 sec, and warnIfPerfScore > 3.6, and perfScore=3.21637]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 58 seconds]]]

Succeeded
