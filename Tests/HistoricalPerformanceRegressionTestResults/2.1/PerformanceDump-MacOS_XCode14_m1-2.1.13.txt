Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 20 14:29:13 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.19622 secs, and comparison 4.82186 sec, and warnIfPerfScore > 0.65, and perfScore=1.50861]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.19593 secs, and comparison 2.27998 sec, and warnIfPerfScore > 0.5, and perfScore=0.7134]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.58954 secs, and comparison 6.94284 sec, and warnIfPerfScore > 1.05, and perfScore=1.05362]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.01204 secs, and comparison 6.97057 sec, and warnIfPerfScore > 1.15, and perfScore=1.15943]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.47473 secs, and comparison 1.17918 sec, and warnIfPerfScore > 0.48, and perfScore=0.263519]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.50403 secs, and comparison 1.79071 sec, and warnIfPerfScore > 0.57, and perfScore=0.397581]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 5.19549 secs, and comparison 14.4876 sec, and warnIfPerfScore > 2.9, and perfScore=2.78849]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 6.86738 secs, and comparison 14.8904 sec, and warnIfPerfScore > 2.9, and perfScore=2.16828]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 9.06054 secs, and comparison 48.1612 sec, and warnIfPerfScore > 24, and perfScore=5.31549]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.33521 secs, and comparison 7.59809 sec, and warnIfPerfScore > 1.7, and perfScore=2.27814]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 5.1055 secs, and comparison 3.85624 sec, and warnIfPerfScore > 1.5, and perfScore=0.755311]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 2.80743 secs, and comparison 9.56944 sec, and warnIfPerfScore > 2.1, and perfScore=3.40861]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.15552 secs, and comparison 2.78641 sec, and warnIfPerfScore > 1.6, and perfScore=0.540471]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 5.40248 secs, and comparison 0.564703 sec, and warnIfPerfScore > 0.23, and perfScore=0.104527]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.19785 secs, and comparison 12.909 sec, and warnIfPerfScore > 1.3, and perfScore=1.40348]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.82414 secs, and comparison 4.92107 sec, and warnIfPerfScore > 1.2, and perfScore=1.28684]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.82763 secs, and comparison 1.00819 sec, and warnIfPerfScore > 0.33, and perfScore=0.263397]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.69111 secs, and comparison 38.4129 sec, and warnIfPerfScore > 6, and perfScore=10.4069]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.61944 secs, and comparison 4.69239 sec, and warnIfPerfScore > 0.8, and perfScore=1.29644]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.64439 secs, and comparison 6.8605 sec, and warnIfPerfScore > 1.4, and perfScore=1.88248]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 3.80725 secs, and comparison 3.18856 sec, and warnIfPerfScore > 0.65, and perfScore=0.837497]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 5.00796 secs, and comparison 36.1332 sec, and warnIfPerfScore > 4.4, and perfScore=7.21516]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.80304 secs, and comparison 3.08942 sec, and warnIfPerfScore > 0.6, and perfScore=0.812357]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.76712 secs, and comparison 3.08887 sec, and warnIfPerfScore > 0.6, and perfScore=0.819957]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 3.76992 secs, and comparison 3.11646 sec, and warnIfPerfScore > 0.6, and perfScore=0.826665]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 3.76195 secs, and comparison 2.78632 sec, and warnIfPerfScore > 1.3, and perfScore=0.740658]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.04551 secs, and comparison 8.22306 sec, and warnIfPerfScore > 1.3, and perfScore=2.03264]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.105 secs, and comparison 4.14994 sec, and warnIfPerfScore > 0.3, and perfScore=0.147658]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.86734 secs, and comparison 11.3234 sec, and warnIfPerfScore > 1.5, and perfScore=1.27698]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 2.51024 secs, and comparison 2.35236 sec, and warnIfPerfScore > 0.55, and perfScore=0.937107]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.95276 sec, and warnIfPerfScore > 0.1, and perfScore=0.130184]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.91458 sec, and warnIfPerfScore > 0.5, and perfScore=0.127639]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 23 seconds]]]

Succeeded
