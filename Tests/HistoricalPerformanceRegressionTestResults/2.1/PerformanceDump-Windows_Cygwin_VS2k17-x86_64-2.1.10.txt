Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 19 22:40:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 43.5002 secs, and comparison 7.40196 sec, and warnIfPerfScore > 0.65, and perfScore=0.170159]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 42.9451 secs, and comparison 6.51375 sec, and warnIfPerfScore > 0.5, and perfScore=0.151676]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 19.5053 secs, and comparison 14.293 sec, and warnIfPerfScore > 1.05, and perfScore=0.732775]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3068 secs, and comparison 13.7923 sec, and warnIfPerfScore > 1.15, and perfScore=1.03648]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 22.7107 secs, and comparison 3.78031 sec, and warnIfPerfScore > 0.48, and perfScore=0.166455]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 22.5646 secs, and comparison 4.00874 sec, and warnIfPerfScore > 0.57, and perfScore=0.177656]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 22.126 secs, and comparison 35.1478 sec, and warnIfPerfScore > 2.9, and perfScore=1.58853]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 22.816 secs, and comparison 36.4915 sec, and warnIfPerfScore > 2.9, and perfScore=1.59938]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.8532 secs, and comparison 196.577 sec, and warnIfPerfScore > 24, and perfScore=13.2347]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 23.1661 secs, and comparison 15.4264 sec, and warnIfPerfScore > 1.7, and perfScore=0.665903]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 44.0009 secs, and comparison 42.4231 sec, and warnIfPerfScore > 1.5, and perfScore=0.964142]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 19.9959 secs, and comparison 18.5723 sec, and warnIfPerfScore > 2.1, and perfScore=0.928809]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 36.1662 secs, and comparison 10.3059 sec, and warnIfPerfScore > 1.6, and perfScore=0.284959]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 39.3723 secs, and comparison 2.8076 sec, and warnIfPerfScore > 0.23, and perfScore=0.071309]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.4948 secs, and comparison 26.2182 sec, and warnIfPerfScore > 1.3, and perfScore=1.58948]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.7723 secs, and comparison 19.6574 sec, and warnIfPerfScore > 1.2, and perfScore=1.24632]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 23.4009 secs, and comparison 6.34613 sec, and warnIfPerfScore > 0.33, and perfScore=0.271192]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 16.1894 secs, and comparison 53.6052 sec, and warnIfPerfScore > 6, and perfScore=3.31112]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.2392 secs, and comparison 20.2562 sec, and warnIfPerfScore > 0.8, and perfScore=1.32922]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 13.2842 secs, and comparison 65.1762 sec, and warnIfPerfScore > 1.4, and perfScore=4.9063]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 23.3222 secs, and comparison 5.0424 sec, and warnIfPerfScore > 0.65, and perfScore=0.216206]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 25.5512 secs, and comparison 57.7886 sec, and warnIfPerfScore > 4.4, and perfScore=2.26168]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 24.9048 secs, and comparison 6.13129 sec, and warnIfPerfScore > 0.6, and perfScore=0.246189]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 22.0669 secs, and comparison 6.14964 sec, and warnIfPerfScore > 0.6, and perfScore=0.278682]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 25.383 secs, and comparison 6.67999 sec, and warnIfPerfScore > 0.6, and perfScore=0.263167]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 23.9408 secs, and comparison 14.0367 sec, and warnIfPerfScore > 1.3, and perfScore=0.586311]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 31.9663 secs, and comparison 23.7176 sec, and warnIfPerfScore > 1.3, and perfScore=0.741957]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 119.278 secs, and comparison 8.8918 sec, and warnIfPerfScore > 0.3, and perfScore=0.074547]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.2152 secs, and comparison 22.9884 sec, and warnIfPerfScore > 1.5, and perfScore=1.19637]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 20.0901 secs, and comparison 6.71018 sec, and warnIfPerfScore > 0.55, and perfScore=0.334004]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.20255 sec, and warnIfPerfScore > 0.1, and perfScore=0.146837]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.83298 sec, and warnIfPerfScore > 0.5, and perfScore=0.322199]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.5732 secs, and comparison 37.044 sec, and warnIfPerfScore > 2, and perfScore=1.57144]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 24.0386 secs, and comparison 28.1954 sec, and warnIfPerfScore > 3.6, and perfScore=1.17292]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 24 seconds]]]

Succeeded
