Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Dec 12 16:24:8 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 53.0425 secs, and comparison 6.50535 sec, and warnIfPerfScore > 0.65, and perfScore=0.122644]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 52.6825 secs, and comparison 6.46836 sec, and warnIfPerfScore > 0.5, and perfScore=0.12278]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 19.4087 secs, and comparison 13.5499 sec, and warnIfPerfScore > 1.05, and perfScore=0.698134]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.3341 secs, and comparison 14.2552 sec, and warnIfPerfScore > 1.15, and perfScore=0.994494]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 20.4349 secs, and comparison 3.94031 sec, and warnIfPerfScore > 0.48, and perfScore=0.192823]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 21.3845 secs, and comparison 4.22788 sec, and warnIfPerfScore > 0.57, and perfScore=0.197707]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 23.7571 secs, and comparison 36.4201 sec, and warnIfPerfScore > 2.9, and perfScore=1.53302]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 25.0782 secs, and comparison 39.3108 sec, and warnIfPerfScore > 2.9, and perfScore=1.56753]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 20.6763 secs, and comparison 247.699 sec, and warnIfPerfScore > 24, and perfScore=11.9798]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 22.8357 secs, and comparison 17.1804 sec, and warnIfPerfScore > 1.7, and perfScore=0.752349]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 44.2035 secs, and comparison 42.9186 sec, and warnIfPerfScore > 1.5, and perfScore=0.970931]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.9157 secs, and comparison 20.1005 sec, and warnIfPerfScore > 2.1, and perfScore=1.06264]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 38.3406 secs, and comparison 15.1548 sec, and warnIfPerfScore > 1.6, and perfScore=0.395267]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 39.2872 secs, and comparison 2.65608 sec, and warnIfPerfScore > 0.23, and perfScore=0.0676069]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 20.4294 secs, and comparison 25.0593 sec, and warnIfPerfScore > 1.3, and perfScore=1.22663]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.9009 secs, and comparison 21.4617 sec, and warnIfPerfScore > 1.2, and perfScore=1.26985]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.26985}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.5115 secs, and comparison 4.94206 sec, and warnIfPerfScore > 0.33, and perfScore=0.365766]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.365766}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 15.4547 secs, and comparison 55.7141 sec, and warnIfPerfScore > 6, and perfScore=3.605]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.662 secs, and comparison 20.8153 sec, and warnIfPerfScore > 0.8, and perfScore=1.32903]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.32903}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 16.0282 secs, and comparison 39.9768 sec, and warnIfPerfScore > 1.4, and perfScore=2.49416]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.49416}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.9724 secs, and comparison 4.89474 sec, and warnIfPerfScore > 0.65, and perfScore=0.350315]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 25.64 secs, and comparison 62.6906 sec, and warnIfPerfScore > 4.4, and perfScore=2.44503]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 13.8453 secs, and comparison 6.05457 sec, and warnIfPerfScore > 0.6, and perfScore=0.4373]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.0772 secs, and comparison 6.47686 sec, and warnIfPerfScore > 0.6, and perfScore=0.460096]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15.0281 secs, and comparison 6.53124 sec, and warnIfPerfScore > 0.6, and perfScore=0.434601]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.9755 secs, and comparison 14.938 sec, and warnIfPerfScore > 1.3, and perfScore=1.06887]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 22.5768 secs, and comparison 23.1815 sec, and warnIfPerfScore > 1.3, and perfScore=1.02678]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 117.451 secs, and comparison 8.5533 sec, and warnIfPerfScore > 0.3, and perfScore=0.0728244]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 27.9628 secs, and comparison 31.8666 sec, and warnIfPerfScore > 1.5, and perfScore=1.13961]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 21.6946 secs, and comparison 6.76348 sec, and warnIfPerfScore > 0.55, and perfScore=0.311759]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.26293 sec, and warnIfPerfScore > 0.1, and perfScore=0.150862]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.150862}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.62986 sec, and warnIfPerfScore > 0.5, and perfScore=0.375324]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 21.173 secs, and comparison 30.0396 sec, and warnIfPerfScore > 2, and perfScore=1.41877]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 25.1517 secs, and comparison 42.1479 sec, and warnIfPerfScore > 3.6, and perfScore=1.67575]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 53 seconds]]]

Succeeded
