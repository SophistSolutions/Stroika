Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 1:50:13 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.60437 secs, and comparison 4.07835 sec, and warnIfPerfScore > 0.65, and perfScore=0.617523]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.59498 secs, and comparison 2.57528 sec, and warnIfPerfScore > 0.5, and perfScore=0.390491]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.07953 secs, and comparison 6.99495 sec, and warnIfPerfScore > 1.05, and perfScore=0.865763]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.35648 secs, and comparison 7.02212 sec, and warnIfPerfScore > 1.15, and perfScore=1.10472]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 7.69244 secs, and comparison 2.11121 sec, and warnIfPerfScore > 0.48, and perfScore=0.274452]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.48285 secs, and comparison 2.53793 sec, and warnIfPerfScore > 0.57, and perfScore=0.339166]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.06771 secs, and comparison 19.5201 sec, and warnIfPerfScore > 2.9, and perfScore=2.41954]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.08107 secs, and comparison 20.3903 sec, and warnIfPerfScore > 2.9, and perfScore=2.52321]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.56187 secs, and comparison 147.284 sec, and warnIfPerfScore > 24, and perfScore=19.4772]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.8735 secs, and comparison 10.2805 sec, and warnIfPerfScore > 1.7, and perfScore=1.49567]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.43988 secs, and comparison 7.21691 sec, and warnIfPerfScore > 1.5, and perfScore=0.97003]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.85377 secs, and comparison 11.7915 sec, and warnIfPerfScore > 2.1, and perfScore=1.72044]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.21531 secs, and comparison 7.31057 sec, and warnIfPerfScore > 1.6, and perfScore=0.889872]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.63587 secs, and comparison 1.18359 sec, and warnIfPerfScore > 0.23, and perfScore=0.137056]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9025 secs, and comparison 12.6916 sec, and warnIfPerfScore > 1.3, and perfScore=1.06629]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.47617 secs, and comparison 5.08792 sec, and warnIfPerfScore > 1.2, and perfScore=0.536917]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.81662 secs, and comparison 1.42764 sec, and warnIfPerfScore > 0.33, and perfScore=0.245442]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.10592 secs, and comparison 37.474 sec, and warnIfPerfScore > 6, and perfScore=4.11534]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.11933 secs, and comparison 4.83772 sec, and warnIfPerfScore > 0.8, and perfScore=0.53049]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.11145 secs, and comparison 8.83857 sec, and warnIfPerfScore > 1.4, and perfScore=0.97005]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.84649 secs, and comparison 3.26034 sec, and warnIfPerfScore > 0.65, and perfScore=0.557659]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.51926 secs, and comparison 34.9 sec, and warnIfPerfScore > 4.4, and perfScore=3.66624]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.02042 secs, and comparison 3.40794 sec, and warnIfPerfScore > 0.6, and perfScore=0.566064]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.04102 secs, and comparison 3.41328 sec, and warnIfPerfScore > 0.6, and perfScore=0.565017]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.03438 secs, and comparison 3.39279 sec, and warnIfPerfScore > 0.6, and perfScore=0.562243]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.03537 secs, and comparison 4.67084 sec, and warnIfPerfScore > 1.3, and perfScore=0.773912]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.52742 secs, and comparison 8.12464 sec, and warnIfPerfScore > 1.3, and perfScore=1.24469]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.0016 secs, and comparison 5.52008 sec, and warnIfPerfScore > 0.3, and perfScore=0.125452]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.76688 secs, and comparison 11.1678 sec, and warnIfPerfScore > 1.5, and perfScore=1.43787]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.81329 secs, and comparison 2.74505 sec, and warnIfPerfScore > 0.55, and perfScore=0.402897]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.733566 sec, and warnIfPerfScore > 0.1, and perfScore=0.0489044]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.8193 sec, and warnIfPerfScore > 0.5, and perfScore=0.187954]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 7.5908 secs, and comparison 17.9847 sec, and warnIfPerfScore > 2, and perfScore=2.36927]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2 and got 2.36927}}}

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.72129 secs, and comparison 28.4594 sec, and warnIfPerfScore > 3.6, and perfScore=3.26321]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 12 seconds]]]

Succeeded
