Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed May 11 15:55:21 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.17121 secs, and comparison 4.46493 sec, and warnIfPerfScore > 0.65, and perfScore=0.622619]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.14006 secs, and comparison 2.94746 sec, and warnIfPerfScore > 0.5, and perfScore=0.412805]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.94976 secs, and comparison 7.65737 sec, and warnIfPerfScore > 1.05, and perfScore=0.855595]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.99764 secs, and comparison 7.69504 sec, and warnIfPerfScore > 1.15, and perfScore=1.09966]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.28536 secs, and comparison 2.3232 sec, and warnIfPerfScore > 0.48, and perfScore=0.280398]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.95313 secs, and comparison 2.81658 sec, and warnIfPerfScore > 0.57, and perfScore=0.354147]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.58917 secs, and comparison 21.4889 sec, and warnIfPerfScore > 2.9, and perfScore=2.50186]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.34287 secs, and comparison 22.2648 sec, and warnIfPerfScore > 2.9, and perfScore=2.66872]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.0769 secs, and comparison 148.99 sec, and warnIfPerfScore > 24, and perfScore=18.4464]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.36047 secs, and comparison 11.7762 sec, and warnIfPerfScore > 1.7, and perfScore=1.59992]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.91421 secs, and comparison 7.76461 sec, and warnIfPerfScore > 1.5, and perfScore=0.981097]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.9878 secs, and comparison 13.122 sec, and warnIfPerfScore > 2.1, and perfScore=1.87784]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.70694 secs, and comparison 7.70023 sec, and warnIfPerfScore > 1.6, and perfScore=0.884378]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.20277 secs, and comparison 1.3296 sec, and warnIfPerfScore > 0.23, and perfScore=0.144478]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6537 secs, and comparison 13.3877 sec, and warnIfPerfScore > 1.3, and perfScore=1.05801]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.98424 secs, and comparison 5.5025 sec, and warnIfPerfScore > 1.2, and perfScore=0.551119]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.30471 secs, and comparison 1.50955 sec, and warnIfPerfScore > 0.33, and perfScore=0.239433]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.61538 secs, and comparison 40.2591 sec, and warnIfPerfScore > 6, and perfScore=4.18695]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.52232 secs, and comparison 5.20874 sec, and warnIfPerfScore > 0.8, and perfScore=0.547003]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.6502 secs, and comparison 9.33124 sec, and warnIfPerfScore > 1.4, and perfScore=0.966948]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.34584 secs, and comparison 3.55823 sec, and warnIfPerfScore > 0.65, and perfScore=0.560718]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.1921 secs, and comparison 37.9907 sec, and warnIfPerfScore > 4.4, and perfScore=3.72747]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.52039 secs, and comparison 3.49144 sec, and warnIfPerfScore > 0.6, and perfScore=0.535465]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.49254 secs, and comparison 3.4691 sec, and warnIfPerfScore > 0.6, and perfScore=0.534321]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.50403 secs, and comparison 3.93106 sec, and warnIfPerfScore > 0.6, and perfScore=0.604404]
	                 	Collection_stdforward_list<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.604404}}}

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.75897 secs, and comparison 4.9675 sec, and warnIfPerfScore > 1.3, and perfScore=0.734949]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.8816 secs, and comparison 8.89204 sec, and warnIfPerfScore > 1.3, and perfScore=1.29215]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.8703 secs, and comparison 5.92291 sec, and warnIfPerfScore > 0.3, and perfScore=0.126368]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.19119 secs, and comparison 12.2466 sec, and warnIfPerfScore > 1.5, and perfScore=1.49509]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.11788 secs, and comparison 2.90769 sec, and warnIfPerfScore > 0.55, and perfScore=0.408504]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.810648 sec, and warnIfPerfScore > 0.1, and perfScore=0.0540432]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.08855 sec, and warnIfPerfScore > 0.5, and perfScore=0.205903]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.22205 secs, and comparison 13.4517 sec, and warnIfPerfScore > 2, and perfScore=1.63605]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.0421 secs, and comparison 29.2008 sec, and warnIfPerfScore > 3.6, and perfScore=3.22943]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 51 seconds]]]

Succeeded
