Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 27 14::32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.9673 secs, and comparison 5.35477 sec, and warnIfPerfScore > 0.65, and perfScore=0.672094]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.59304 secs, and comparison 3.22758 sec, and warnIfPerfScore > 0.5, and perfScore=0.375605]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.2856 secs, and comparison 10.0481 sec, and warnIfPerfScore > 1.05, and perfScore=0.890345]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.23972 secs, and comparison 10.5956 sec, and warnIfPerfScore > 1.15, and perfScore=1.14674]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.9429 secs, and comparison 3.2912 sec, and warnIfPerfScore > 0.48, and perfScore=0.236048]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.7618 secs, and comparison 3.89134 sec, and warnIfPerfScore > 0.57, and perfScore=0.304921]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.151 secs, and comparison 29.4043 sec, and warnIfPerfScore > 2.9, and perfScore=2.07789]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.8044 secs, and comparison 28.6923 sec, and warnIfPerfScore > 2.9, and perfScore=1.9381]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 11.3585 secs, and comparison 159.96 sec, and warnIfPerfScore > 24, and perfScore=14.0829]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.0347 secs, and comparison 13.9017 sec, and warnIfPerfScore > 1.7, and perfScore=1.15514]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.5562 secs, and comparison 25.2371 sec, and warnIfPerfScore > 1.5, and perfScore=1.86166]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.1591 secs, and comparison 16.3477 sec, and warnIfPerfScore > 2.1, and perfScore=1.78486]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 11.2291 secs, and comparison 6.00768 sec, and warnIfPerfScore > 1.6, and perfScore=0.535009]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 10.9015 secs, and comparison 1.06486 sec, and warnIfPerfScore > 0.23, and perfScore=0.0976799]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3453 secs, and comparison 12.5649 sec, and warnIfPerfScore > 1.3, and perfScore=1.01778]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.36172 secs, and comparison 8.42322 sec, and warnIfPerfScore > 1.2, and perfScore=0.899752]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.661 secs, and comparison 3.57572 sec, and warnIfPerfScore > 0.33, and perfScore=0.28242]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 11.0731 secs, and comparison 45.8586 sec, and warnIfPerfScore > 6, and perfScore=4.14143]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 10.6678 secs, and comparison 8.56676 sec, and warnIfPerfScore > 0.8, and perfScore=0.803052]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.99642 secs, and comparison 14.9557 sec, and warnIfPerfScore > 1.4, and perfScore=1.66241]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.9967 secs, and comparison 4.54849 sec, and warnIfPerfScore > 0.65, and perfScore=0.284339]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 12.7229 secs, and comparison 41.8913 sec, and warnIfPerfScore > 4.4, and perfScore=3.29259]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.918 secs, and comparison 4.20167 sec, and warnIfPerfScore > 0.6, and perfScore=0.263957]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.1647 secs, and comparison 4.22838 sec, and warnIfPerfScore > 0.6, and perfScore=0.246341]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.2996 secs, and comparison 4.18723 sec, and warnIfPerfScore > 0.6, and perfScore=0.292822]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 13.6145 secs, and comparison 9.01074 sec, and warnIfPerfScore > 1.3, and perfScore=0.661847]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 17.988 secs, and comparison 14.1327 sec, and warnIfPerfScore > 1.3, and perfScore=0.785676]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 60.6114 secs, and comparison 11.4499 sec, and warnIfPerfScore > 0.3, and perfScore=0.188907]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.4021 secs, and comparison 17.9511 sec, and warnIfPerfScore > 1.5, and perfScore=1.57436]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 21.8502 secs, and comparison 6.83824 sec, and warnIfPerfScore > 0.55, and perfScore=0.312961]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.05528 sec, and warnIfPerfScore > 0.1, and perfScore=0.0703522]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.97785 sec, and warnIfPerfScore > 0.5, and perfScore=0.26519]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.6835 secs, and comparison 16.4185 sec, and warnIfPerfScore > 2, and perfScore=1.5368]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.64 secs, and comparison 20.5621 sec, and warnIfPerfScore > 3.6, and perfScore=1.93253]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 14 seconds]]]

Succeeded
