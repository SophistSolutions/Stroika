Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 15 14:25:34 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.586 secs, and comparison 4.38007 sec, and warnIfPerfScore > 0.65, and perfScore=0.784115]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.68745 secs, and comparison 2.6688 sec, and warnIfPerfScore > 0.5, and perfScore=0.469244]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.17326 secs, and comparison 7.32446 sec, and warnIfPerfScore > 1.05, and perfScore=0.896149]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.74406 secs, and comparison 7.33729 sec, and warnIfPerfScore > 1.15, and perfScore=1.08796]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 33.0553 secs, and comparison 2.25083 sec, and warnIfPerfScore > 0.48, and perfScore=0.068093]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 31.1956 secs, and comparison 2.75465 sec, and warnIfPerfScore > 0.57, and perfScore=0.0883024]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.83092 secs, and comparison 18.9999 sec, and warnIfPerfScore > 2.9, and perfScore=2.78146]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.01638 secs, and comparison 19.7351 sec, and warnIfPerfScore > 2.9, and perfScore=2.81272]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.06706 secs, and comparison 140.044 sec, and warnIfPerfScore > 24, and perfScore=23.0827]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.65597 secs, and comparison 10.0639 sec, and warnIfPerfScore > 1.7, and perfScore=1.77934]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.67031 secs, and comparison 5.52343 sec, and warnIfPerfScore > 1.5, and perfScore=0.974098]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.43024 secs, and comparison 12.0772 sec, and warnIfPerfScore > 2.1, and perfScore=2.22406]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.48879 secs, and comparison 3.97089 sec, and warnIfPerfScore > 1.6, and perfScore=0.611962]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 6.89114 secs, and comparison 0.656655 sec, and warnIfPerfScore > 0.23, and perfScore=0.0952897]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.6053 secs, and comparison 12.1127 sec, and warnIfPerfScore > 1.3, and perfScore=1.04373]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.31496 secs, and comparison 5.3886 sec, and warnIfPerfScore > 1.2, and perfScore=0.648061]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.46029 secs, and comparison 1.70381 sec, and warnIfPerfScore > 0.33, and perfScore=0.228384]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.00039 secs, and comparison 38.8597 sec, and warnIfPerfScore > 6, and perfScore=4.85722]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.14749 secs, and comparison 5.02091 sec, and warnIfPerfScore > 0.8, and perfScore=0.616252]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.09218 secs, and comparison 7.49458 sec, and warnIfPerfScore > 1.4, and perfScore=0.92615]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.85361 secs, and comparison 3.46303 sec, and warnIfPerfScore > 0.65, and perfScore=0.440947]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.62703 secs, and comparison 36.4094 sec, and warnIfPerfScore > 4.4, and perfScore=4.22038]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.49117 secs, and comparison 3.3422 sec, and warnIfPerfScore > 0.6, and perfScore=0.446152]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.45097 secs, and comparison 3.35485 sec, and warnIfPerfScore > 0.6, and perfScore=0.450256]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.57415 secs, and comparison 3.33315 sec, and warnIfPerfScore > 0.6, and perfScore=0.440069]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.66001 secs, and comparison 5.16548 sec, and warnIfPerfScore > 1.3, and perfScore=0.674345]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.97618 secs, and comparison 8.41384 sec, and warnIfPerfScore > 1.3, and perfScore=1.05487]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 37.9286 secs, and comparison 5.13445 sec, and warnIfPerfScore > 0.3, and perfScore=0.135371]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.91259 secs, and comparison 9.38519 sec, and warnIfPerfScore > 1.5, and perfScore=1.58732]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.51813 secs, and comparison 2.78639 sec, and warnIfPerfScore > 0.55, and perfScore=0.427483]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.607037 sec, and warnIfPerfScore > 0.1, and perfScore=0.0404692]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.84032 sec, and warnIfPerfScore > 0.5, and perfScore=0.189354]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.63459 secs, and comparison 12.6253 sec, and warnIfPerfScore > 2, and perfScore=1.90295]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.75979 secs, and comparison 14.5339 sec, and warnIfPerfScore > 3.6, and perfScore=1.87298]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 13 seconds]]]

Succeeded
