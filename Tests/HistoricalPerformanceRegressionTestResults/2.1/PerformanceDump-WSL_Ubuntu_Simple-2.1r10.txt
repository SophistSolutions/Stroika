Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu May 12 23:14:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 4.98573 secs, and comparison 4.33906 sec, and warnIfPerfScore > 0.65, and perfScore=0.870297]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 4.99416 secs, and comparison 2.26904 sec, and warnIfPerfScore > 0.5, and perfScore=0.454339]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.60929 secs, and comparison 6.09118 sec, and warnIfPerfScore > 1.05, and perfScore=1.08591]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.43357 secs, and comparison 6.07513 sec, and warnIfPerfScore > 1.15, and perfScore=1.11807]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 2.45081 secs, and comparison 1.98675 sec, and warnIfPerfScore > 0.48, and perfScore=0.810654]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 3.07889 secs, and comparison 2.58697 sec, and warnIfPerfScore > 0.57, and perfScore=0.840229]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 2.33907 secs, and comparison 13.5196 sec, and warnIfPerfScore > 2.9, and perfScore=5.7799]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 2.7241 secs, and comparison 13.9466 sec, and warnIfPerfScore > 2.9, and perfScore=5.1197]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.61757 secs, and comparison 38.1512 sec, and warnIfPerfScore > 24, and perfScore=10.5461]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.56901 secs, and comparison 8.35835 sec, and warnIfPerfScore > 1.7, and perfScore=2.34192]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.25499 secs, and comparison 3.89969 sec, and warnIfPerfScore > 1.5, and perfScore=0.9165]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 2.01782 secs, and comparison 10.168 sec, and warnIfPerfScore > 2.1, and perfScore=5.0391]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 2.96292 secs, and comparison 2.45242 sec, and warnIfPerfScore > 1.6, and perfScore=0.827703]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 2.9446 secs, and comparison 1.12772 sec, and warnIfPerfScore > 0.23, and perfScore=0.382978]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.60397 secs, and comparison 3.37569 sec, and warnIfPerfScore > 1.3, and perfScore=1.29636]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.27328 secs, and comparison 4.99921 sec, and warnIfPerfScore > 1.2, and perfScore=2.19912]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 9.93594 secs, and comparison 1.19776 sec, and warnIfPerfScore > 0.33, and perfScore=0.120549]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 2.18235 secs, and comparison 38.6321 sec, and warnIfPerfScore > 6, and perfScore=17.7021]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.16833 secs, and comparison 4.69833 sec, and warnIfPerfScore > 0.8, and perfScore=2.16679]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.11962 secs, and comparison 5.79343 sec, and warnIfPerfScore > 1.4, and perfScore=2.73324]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.0935 secs, and comparison 3.30692 sec, and warnIfPerfScore > 0.65, and perfScore=0.327627]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 2.98012 secs, and comparison 35.9421 sec, and warnIfPerfScore > 4.4, and perfScore=12.0606]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.36534 secs, and comparison 3.30339 sec, and warnIfPerfScore > 0.6, and perfScore=0.448505]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.21392 secs, and comparison 3.28473 sec, and warnIfPerfScore > 0.6, and perfScore=0.455331]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.15991 secs, and comparison 3.28335 sec, and warnIfPerfScore > 0.6, and perfScore=0.458575]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.14317 secs, and comparison 3.17959 sec, and warnIfPerfScore > 1.3, and perfScore=0.445123]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 11.9519 secs, and comparison 7.38684 sec, and warnIfPerfScore > 1.3, and perfScore=0.618049]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.4184 secs, and comparison 5.31065 sec, and warnIfPerfScore > 0.3, and perfScore=0.427643]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.09154 secs, and comparison 10.7997 sec, and warnIfPerfScore > 1.5, and perfScore=2.1211]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.46831 secs, and comparison 2.143 sec, and warnIfPerfScore > 0.55, and perfScore=0.391895]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.586056 sec, and warnIfPerfScore > 0.1, and perfScore=0.0390704]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.56411 sec, and warnIfPerfScore > 0.5, and perfScore=0.170941]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 44 seconds]]]

Succeeded
