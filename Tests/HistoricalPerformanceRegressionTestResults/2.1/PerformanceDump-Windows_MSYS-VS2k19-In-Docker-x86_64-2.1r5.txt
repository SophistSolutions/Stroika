Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 4:6:1 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 4.88229 secs, and comparison 4.06825 sec, and warnIfPerfScore > 0.65, and perfScore=0.833266]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.08424 secs, and comparison 2.36367 sec, and warnIfPerfScore > 0.5, and perfScore=0.464901]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.38693 secs, and comparison 6.68322 sec, and warnIfPerfScore > 1.05, and perfScore=0.904737]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.07786 secs, and comparison 6.69881 sec, and warnIfPerfScore > 1.15, and perfScore=1.10217]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.81568 secs, and comparison 2.28353 sec, and warnIfPerfScore > 0.48, and perfScore=0.292173]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.61459 secs, and comparison 2.83289 sec, and warnIfPerfScore > 0.57, and perfScore=0.372035]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 5.94111 secs, and comparison 17.2234 sec, and warnIfPerfScore > 2.9, and perfScore=2.89902]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.28877 secs, and comparison 17.173 sec, and warnIfPerfScore > 2.9, and perfScore=2.73074]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.25368 secs, and comparison 123.017 sec, and warnIfPerfScore > 24, and perfScore=23.4154]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.27109 secs, and comparison 9.093 sec, and warnIfPerfScore > 1.7, and perfScore=1.72507]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.51099 secs, and comparison 5.59406 sec, and warnIfPerfScore > 1.5, and perfScore=1.01507]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.76625 secs, and comparison 11.1684 sec, and warnIfPerfScore > 2.1, and perfScore=2.34323]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.5363 secs, and comparison 4.34331 sec, and warnIfPerfScore > 1.6, and perfScore=0.664491]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 6.91523 secs, and comparison 0.706114 sec, and warnIfPerfScore > 0.23, and perfScore=0.10211]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2707 secs, and comparison 11.7315 sec, and warnIfPerfScore > 1.3, and perfScore=1.04088]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.13348 secs, and comparison 4.95183 sec, and warnIfPerfScore > 1.2, and perfScore=0.60882]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.12186 secs, and comparison 1.754 sec, and warnIfPerfScore > 0.33, and perfScore=0.246283]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 7.88829 secs, and comparison 36.6309 sec, and warnIfPerfScore > 6, and perfScore=4.64371]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.91629 secs, and comparison 4.85595 sec, and warnIfPerfScore > 0.8, and perfScore=0.613413]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.94697 secs, and comparison 7.36202 sec, and warnIfPerfScore > 1.4, and perfScore=0.926393]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.00944 secs, and comparison 3.24177 sec, and warnIfPerfScore > 0.65, and perfScore=0.462487]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.32528 secs, and comparison 34.1583 sec, and warnIfPerfScore > 4.4, and perfScore=4.10296]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.00444 secs, and comparison 3.14823 sec, and warnIfPerfScore > 0.6, and perfScore=0.449462]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.97622 secs, and comparison 3.15057 sec, and warnIfPerfScore > 0.6, and perfScore=0.451615]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.03068 secs, and comparison 3.17191 sec, and warnIfPerfScore > 0.6, and perfScore=0.451153]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.00744 secs, and comparison 4.55744 sec, and warnIfPerfScore > 1.3, and perfScore=0.650371]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.5432 secs, and comparison 7.57506 sec, and warnIfPerfScore > 1.3, and perfScore=1.00422]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 38.1796 secs, and comparison 5.27221 sec, and warnIfPerfScore > 0.3, and perfScore=0.13809]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.58078 secs, and comparison 8.84988 sec, and warnIfPerfScore > 1.5, and perfScore=1.58578]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.75534 secs, and comparison 2.56224 sec, and warnIfPerfScore > 0.55, and perfScore=0.445194]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.044
	DETAILS:         	[baseline test 15 secs, and comparison 0.6557 sec, and warnIfPerfScore > 0.1, and perfScore=0.0437133]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.62037 sec, and warnIfPerfScore > 0.5, and perfScore=0.174691]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.66487 secs, and comparison 7.24879 sec, and warnIfPerfScore > 2, and perfScore=1.08761]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.9821 secs, and comparison 12.1874 sec, and warnIfPerfScore > 3.6, and perfScore=1.74552]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 30 seconds]]]

Succeeded
