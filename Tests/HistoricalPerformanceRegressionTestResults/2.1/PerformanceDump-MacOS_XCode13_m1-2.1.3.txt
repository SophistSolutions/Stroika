Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Aug 10 17:54:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21554 secs, and comparison 4.82084 sec, and warnIfPerfScore > 0.65, and perfScore=1.49923]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 3.21293 secs, and comparison 2.24036 sec, and warnIfPerfScore > 0.5, and perfScore=0.697296]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25238 secs, and comparison 7.17727 sec, and warnIfPerfScore > 1.05, and perfScore=0.989644]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31885 secs, and comparison 7.17859 sec, and warnIfPerfScore > 1.15, and perfScore=1.13606]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 5.9098 secs, and comparison 1.23561 sec, and warnIfPerfScore > 0.48, and perfScore=0.209077]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 5.91346 secs, and comparison 1.78512 sec, and warnIfPerfScore > 0.57, and perfScore=0.301874]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.94328 secs, and comparison 15.4131 sec, and warnIfPerfScore > 2.9, and perfScore=2.59336]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.33361 secs, and comparison 16.0477 sec, and warnIfPerfScore > 2.9, and perfScore=2.18825]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 9.62446 secs, and comparison 54.3186 sec, and warnIfPerfScore > 24, and perfScore=5.64381]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.26607 secs, and comparison 7.59871 sec, and warnIfPerfScore > 1.7, and perfScore=1.7812]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.75198 secs, and comparison 3.88269 sec, and warnIfPerfScore > 1.5, and perfScore=0.817069]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.66261 secs, and comparison 9.5725 sec, and warnIfPerfScore > 2.1, and perfScore=2.61358]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.24935 secs, and comparison 3.00859 sec, and warnIfPerfScore > 1.6, and perfScore=0.573137]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 5.47671 secs, and comparison 0.680217 sec, and warnIfPerfScore > 0.23, and perfScore=0.124202]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4304 secs, and comparison 12.9077 sec, and warnIfPerfScore > 1.3, and perfScore=1.0384]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.65673 secs, and comparison 5.30793 sec, and warnIfPerfScore > 1.2, and perfScore=1.13984]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.49431 secs, and comparison 1.06726 sec, and warnIfPerfScore > 0.33, and perfScore=0.23747]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.32855 secs, and comparison 38.4165 sec, and warnIfPerfScore > 6, and perfScore=8.87513]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.3287 secs, and comparison 5.09241 sec, and warnIfPerfScore > 0.8, and perfScore=1.17643]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.32902 secs, and comparison 7.04862 sec, and warnIfPerfScore > 1.4, and perfScore=1.62822]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.49989 secs, and comparison 3.18571 sec, and warnIfPerfScore > 0.65, and perfScore=0.707953]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.6172 secs, and comparison 36.2889 sec, and warnIfPerfScore > 4.4, and perfScore=6.46032]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50615 secs, and comparison 3.07344 sec, and warnIfPerfScore > 0.6, and perfScore=0.682055]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50628 secs, and comparison 3.07228 sec, and warnIfPerfScore > 0.6, and perfScore=0.681778]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51038 secs, and comparison 3.07756 sec, and warnIfPerfScore > 0.6, and perfScore=0.682328]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.50629 secs, and comparison 2.79577 sec, and warnIfPerfScore > 1.3, and perfScore=0.620414]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.69134 secs, and comparison 8.19066 sec, and warnIfPerfScore > 1.3, and perfScore=1.74591]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.7666 secs, and comparison 4.20348 sec, and warnIfPerfScore > 0.3, and perfScore=0.141215]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.2394 secs, and comparison 11.9262 sec, and warnIfPerfScore > 1.5, and perfScore=1.2908]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 4.63426 secs, and comparison 2.62282 sec, and warnIfPerfScore > 0.55, and perfScore=0.565964]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 2.01954 sec, and warnIfPerfScore > 0.1, and perfScore=0.134636]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94687 sec, and warnIfPerfScore > 0.5, and perfScore=0.129791]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 57 seconds]]]

Succeeded
