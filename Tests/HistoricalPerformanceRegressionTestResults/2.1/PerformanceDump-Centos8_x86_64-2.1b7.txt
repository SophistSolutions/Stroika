Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Dec  4 16:50:39 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 15.1463 secs, and comparison 10.2724 sec, and warnIfPerfScore > 0.62, and perfScore=0.678212]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 14.1074 secs, and comparison 7.2837 sec, and warnIfPerfScore > 0.5, and perfScore=0.516305]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.577 secs, and comparison 15.5828 sec, and warnIfPerfScore > 1.05, and perfScore=1.00037]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 12.2928 secs, and comparison 8.87886 sec, and warnIfPerfScore > 0.48, and perfScore=0.722283]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 14.9763 secs, and comparison 9.98448 sec, and warnIfPerfScore > 0.57, and perfScore=0.666685]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 12.1607 secs, and comparison 50.6074 sec, and warnIfPerfScore > 2.9, and perfScore=4.16156]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 12.332 secs, and comparison 54.9338 sec, and warnIfPerfScore > 2.9, and perfScore=4.45457]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 16.7944 secs, and comparison 207.204 sec, and warnIfPerfScore > 9.7, and perfScore=12.3377]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.6059 secs, and comparison 23.4543 sec, and warnIfPerfScore > 1.6, and perfScore=1.72383]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.6236 secs, and comparison 19.1655 sec, and warnIfPerfScore > 1.5, and perfScore=1.0291]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.3104 secs, and comparison 25.7337 sec, and warnIfPerfScore > 2.1, and perfScore=2.4959]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 15.5132 secs, and comparison 13.3278 sec, and warnIfPerfScore > 1.3, and perfScore=0.859125]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 16.9501 secs, and comparison 6.14917 sec, and warnIfPerfScore > 0.23, and perfScore=0.362781]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.7062 secs, and comparison 16.4922 sec, and warnIfPerfScore > 1.3, and perfScore=1.20327]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 12.2381 secs, and comparison 23.5561 sec, and warnIfPerfScore > 1.2, and perfScore=1.92482]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 48.7169 secs, and comparison 5.47647 sec, and warnIfPerfScore > 0.33, and perfScore=0.112414]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 8.59315 secs, and comparison 88.0935 sec, and warnIfPerfScore > 6, and perfScore=10.2516]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 29.8129 secs, and comparison 8.22794 sec, and warnIfPerfScore > 0.5, and perfScore=0.275986]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 12.342 secs, and comparison 77.9808 sec, and warnIfPerfScore > 4.4, and perfScore=6.31833]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 19.6655 secs, and comparison 4.39572 sec, and warnIfPerfScore > 0.6, and perfScore=0.223524]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.901 secs, and comparison 16.5135 sec, and warnIfPerfScore > 1.5, and perfScore=1.28001]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.97047 secs, and comparison 3.21441 sec, and warnIfPerfScore > 0.55, and perfScore=0.358332]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 15 secs, and comparison 1.27183 sec, and warnIfPerfScore > 0.25, and perfScore=0.0847887]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.56268 sec, and warnIfPerfScore > 0.5, and perfScore=0.304179]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 20 seconds]]]

Succeeded
