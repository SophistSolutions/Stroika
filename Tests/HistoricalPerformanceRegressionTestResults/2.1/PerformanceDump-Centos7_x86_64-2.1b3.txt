Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Aug  9 19:13:4 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 6.64425 secs, and comparison 5.41432 sec, and warnIfPerfScore > 0.62, and perfScore=0.814889]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.89051 secs, and comparison 3.71144 sec, and warnIfPerfScore > 0.5, and perfScore=0.538631]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.75205 secs, and comparison 8.30225 sec, and warnIfPerfScore > 1.05, and perfScore=0.948606]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.98961 secs, and comparison 4.71809 sec, and warnIfPerfScore > 0.48, and perfScore=1.57816]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.97565 secs, and comparison 5.1263 sec, and warnIfPerfScore > 0.57, and perfScore=1.72275]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.6759 secs, and comparison 27.9968 sec, and warnIfPerfScore > 2.9, and perfScore=2.39783]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 10.1458 secs, and comparison 64.9932 sec, and warnIfPerfScore > 2.9, and perfScore=6.40591]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 24.5833 secs, and comparison 247.304 sec, and warnIfPerfScore > 9.7, and perfScore=10.0598]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 17.8809 secs, and comparison 27.3075 sec, and warnIfPerfScore > 1.6, and perfScore=1.52719]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.9451 secs, and comparison 16.0605 sec, and warnIfPerfScore > 1.5, and perfScore=1.00724]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.743 secs, and comparison 27.8772 sec, and warnIfPerfScore > 2.1, and perfScore=1.89087]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.2587 secs, and comparison 9.58912 sec, and warnIfPerfScore > 1.3, and perfScore=0.934727]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.7892 secs, and comparison 4.37419 sec, and warnIfPerfScore > 0.23, and perfScore=0.405422]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.8756 secs, and comparison 15.0323 sec, and warnIfPerfScore > 1.3, and perfScore=1.26581]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.5723 secs, and comparison 20.3268 sec, and warnIfPerfScore > 1.2, and perfScore=1.75651]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.5207 secs, and comparison 3.23349 sec, and warnIfPerfScore > 0.33, and perfScore=0.280667]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 11.5836 secs, and comparison 92.5638 sec, and warnIfPerfScore > 6, and perfScore=7.99095]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.5064 secs, and comparison 8.01554 sec, and warnIfPerfScore > 0.5, and perfScore=0.696615]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 16.6563 secs, and comparison 82.6131 sec, and warnIfPerfScore > 4.4, and perfScore=4.95987]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.38133 secs, and comparison 7.37993 sec, and warnIfPerfScore > 0.6, and perfScore=0.88052]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 28.575 secs, and comparison 33.5589 sec, and warnIfPerfScore > 1.5, and perfScore=1.17442]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 15.3807 secs, and comparison 8.23986 sec, and warnIfPerfScore > 0.55, and perfScore=0.535728]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.03145 sec, and warnIfPerfScore > 0.25, and perfScore=0.202097]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 15 secs, and comparison 6.72489 sec, and warnIfPerfScore > 0.5, and perfScore=0.448326]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 45 seconds]]]

Succeeded
