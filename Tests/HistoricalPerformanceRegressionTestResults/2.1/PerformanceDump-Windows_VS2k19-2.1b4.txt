Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep  6 13:41:8 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.1081 secs, and comparison 5.1798 sec, and warnIfPerfScore > 0.62, and perfScore=0.466307]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.3783 secs, and comparison 3.38848 sec, and warnIfPerfScore > 0.5, and perfScore=0.297802]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.943 secs, and comparison 9.18928 sec, and warnIfPerfScore > 1.05, and perfScore=0.839741]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.4791 secs, and comparison 4.1935 sec, and warnIfPerfScore > 0.48, and perfScore=0.40018]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.5703 secs, and comparison 4.48912 sec, and warnIfPerfScore > 0.57, and perfScore=0.424692]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.2855 secs, and comparison 27.172 sec, and warnIfPerfScore > 2.9, and perfScore=2.40769]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.3551 secs, and comparison 29.1222 sec, and warnIfPerfScore > 2.9, and perfScore=2.3571]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 11.73 secs, and comparison 93.5995 sec, and warnIfPerfScore > 9.7, and perfScore=7.97949]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.95919 secs, and comparison 12.4157 sec, and warnIfPerfScore > 1.6, and perfScore=1.24666]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.6297 secs, and comparison 14.236 sec, and warnIfPerfScore > 1.5, and perfScore=0.973091]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.07382 secs, and comparison 12.4007 sec, and warnIfPerfScore > 2.1, and perfScore=1.36665]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 12.3577 secs, and comparison 9.22862 sec, and warnIfPerfScore > 1.3, and perfScore=0.746793]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 13.0258 secs, and comparison 2.77546 sec, and warnIfPerfScore > 0.23, and perfScore=0.213075]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8561 secs, and comparison 13.1647 sec, and warnIfPerfScore > 1.3, and perfScore=1.024]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.6418 secs, and comparison 7.93934 sec, and warnIfPerfScore > 1.2, and perfScore=0.74605]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.26992 secs, and comparison 1.94244 sec, and warnIfPerfScore > 0.33, and perfScore=0.209542]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.90396 secs, and comparison 45.5286 sec, and warnIfPerfScore > 6, and perfScore=4.59701]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.25401 secs, and comparison 4.3043 sec, and warnIfPerfScore > 0.5, and perfScore=0.465128]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.5977 secs, and comparison 40.484 sec, and warnIfPerfScore > 4.4, and perfScore=3.82008]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.36401 secs, and comparison 4.42213 sec, and warnIfPerfScore > 0.6, and perfScore=0.472247]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.708 secs, and comparison 18.1686 sec, and warnIfPerfScore > 1.5, and perfScore=1.23528]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.626 secs, and comparison 4.22164 sec, and warnIfPerfScore > 0.55, and perfScore=0.309823]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.44277 sec, and warnIfPerfScore > 0.25, and perfScore=0.0961845]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.7381 sec, and warnIfPerfScore > 0.5, and perfScore=0.249207]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.7496 secs, and comparison 19.3923 sec, and warnIfPerfScore > 2, and perfScore=1.65046]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.9034 secs, and comparison 32.905 sec, and warnIfPerfScore > 3.1, and perfScore=2.76435]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 41 seconds]]]

Succeeded
