Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr  1 16:19:42 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 49.5399 secs, and comparison 15.2361 sec, and warnIfPerfScore > 0.65, and perfScore=0.307552]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 49.9128 secs, and comparison 14.4762 sec, and warnIfPerfScore > 0.5, and perfScore=0.290029]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 29.9068 secs, and comparison 22.9305 sec, and warnIfPerfScore > 1.05, and perfScore=0.766732]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 23.3517 secs, and comparison 22.0955 sec, and warnIfPerfScore > 1.15, and perfScore=0.946206]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 20.2737 secs, and comparison 3.43605 sec, and warnIfPerfScore > 0.48, and perfScore=0.169483]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 20.9185 secs, and comparison 4.00896 sec, and warnIfPerfScore > 0.57, and perfScore=0.191647]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 22.5078 secs, and comparison 38.5124 sec, and warnIfPerfScore > 2.9, and perfScore=1.71107]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 23.5137 secs, and comparison 42.171 sec, and warnIfPerfScore > 2.9, and perfScore=1.79347]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 21.4309 secs, and comparison 225.367 sec, and warnIfPerfScore > 24, and perfScore=10.516]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 20.1624 secs, and comparison 17.969 sec, and warnIfPerfScore > 1.7, and perfScore=0.891212]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 52.2203 secs, and comparison 50.6547 sec, and warnIfPerfScore > 1.5, and perfScore=0.970021]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 20.0256 secs, and comparison 19.505 sec, and warnIfPerfScore > 2.1, and perfScore=0.974004]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 44.2131 secs, and comparison 13.3257 sec, and warnIfPerfScore > 1.6, and perfScore=0.301397]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 46.2425 secs, and comparison 3.64306 sec, and warnIfPerfScore > 0.23, and perfScore=0.0787816]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.126 secs, and comparison 25.8163 sec, and warnIfPerfScore > 1.3, and perfScore=1.42427]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.42427}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.2922 secs, and comparison 20.3436 sec, and warnIfPerfScore > 1.2, and perfScore=1.33032]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.33032}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.6815 secs, and comparison 4.78614 sec, and warnIfPerfScore > 0.33, and perfScore=0.349825]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.349825}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 15.2682 secs, and comparison 53.1971 sec, and warnIfPerfScore > 6, and perfScore=3.48417]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.9835 secs, and comparison 19.1871 sec, and warnIfPerfScore > 0.8, and perfScore=1.28055]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.28055}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.7291 secs, and comparison 33.6347 sec, and warnIfPerfScore > 1.4, and perfScore=2.28356]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.28356}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.584 secs, and comparison 5.01671 sec, and warnIfPerfScore > 0.65, and perfScore=0.398657]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 26.0121 secs, and comparison 58.6087 sec, and warnIfPerfScore > 4.4, and perfScore=2.25313]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.0257 secs, and comparison 5.79481 sec, and warnIfPerfScore > 0.6, and perfScore=0.413156]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 14.151 secs, and comparison 5.64766 sec, and warnIfPerfScore > 0.6, and perfScore=0.3991]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 14.3301 secs, and comparison 5.79604 sec, and warnIfPerfScore > 0.6, and perfScore=0.404467]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.5725 secs, and comparison 14.1359 sec, and warnIfPerfScore > 1.3, and perfScore=1.04151]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 21.6858 secs, and comparison 21.2711 sec, and warnIfPerfScore > 1.3, and perfScore=0.980877]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 111.815 secs, and comparison 15.2236 sec, and warnIfPerfScore > 0.3, and perfScore=0.13615]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 26.2721 secs, and comparison 30.1229 sec, and warnIfPerfScore > 1.5, and perfScore=1.14657]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 18.9147 secs, and comparison 5.97946 sec, and warnIfPerfScore > 0.55, and perfScore=0.316128]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.13297 sec, and warnIfPerfScore > 0.1, and perfScore=0.142198]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.142198}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.64282 sec, and warnIfPerfScore > 0.5, and perfScore=0.309521]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 19.2149 secs, and comparison 22.1635 sec, and warnIfPerfScore > 2, and perfScore=1.15345]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 25.4248 secs, and comparison 44.332 sec, and warnIfPerfScore > 3.6, and perfScore=1.74365]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 22 seconds]]]

Succeeded
