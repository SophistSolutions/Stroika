Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jun 17 10:7:39 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.92263 secs, and comparison 4.88425 sec, and warnIfPerfScore > 0.62, and perfScore=0.824676]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.93639 secs, and comparison 2.95361 sec, and warnIfPerfScore > 0.5, and perfScore=0.497544]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.5743 secs, and comparison 6.74227 sec, and warnIfPerfScore > 1.05, and perfScore=1.02555]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.62762 secs, and comparison 3.88038 sec, and warnIfPerfScore > 0.48, and perfScore=1.06968]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.47124 secs, and comparison 4.61778 sec, and warnIfPerfScore > 0.55, and perfScore=1.03277]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.10131 secs, and comparison 16.874 sec, and warnIfPerfScore > 2.9, and perfScore=5.44093]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.51525 secs, and comparison 17.7127 sec, and warnIfPerfScore > 2.9, and perfScore=5.03882]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 4.47425 secs, and comparison 57.0745 sec, and warnIfPerfScore > 9.7, and perfScore=12.7562]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.45773 secs, and comparison 9.3968 sec, and warnIfPerfScore > 1.6, and perfScore=2.10798]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.55152 secs, and comparison 5.24054 sec, and warnIfPerfScore > 1.5, and perfScore=0.943984]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.36395 secs, and comparison 10.4134 sec, and warnIfPerfScore > 2.1, and perfScore=4.40506]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 3.98297 secs, and comparison 3.59794 sec, and warnIfPerfScore > 1.3, and perfScore=0.90333]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.17815 secs, and comparison 1.65365 sec, and warnIfPerfScore > 0.18, and perfScore=0.395785]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.85289 secs, and comparison 4.42752 sec, and warnIfPerfScore > 1.3, and perfScore=1.14914]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.00276 secs, and comparison 6.41127 sec, and warnIfPerfScore > 1.2, and perfScore=2.13512]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 15.0833 secs, and comparison 1.40229 sec, and warnIfPerfScore > 0.33, and perfScore=0.09297]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.91487 secs, and comparison 42.3533 sec, and warnIfPerfScore > 6, and perfScore=14.5301]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.3589 secs, and comparison 3.71141 sec, and warnIfPerfScore > 0.5, and perfScore=0.358283]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 5.77699 secs, and comparison 38.1678 sec, and warnIfPerfScore > 4.4, and perfScore=6.60687]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.9512 secs, and comparison 3.78247 sec, and warnIfPerfScore > 0.6, and perfScore=0.316493]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.98033 secs, and comparison 11.6649 sec, and warnIfPerfScore > 1.5, and perfScore=1.4617]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.00374 secs, and comparison 2.13384 sec, and warnIfPerfScore > 0.55, and perfScore=0.304672]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.05237 sec, and warnIfPerfScore > 0.25, and perfScore=0.0701579]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.78161 sec, and warnIfPerfScore > 0.5, and perfScore=0.252107]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 30 seconds]]]

Succeeded
