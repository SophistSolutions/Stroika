Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 6:28:19 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.65314 secs, and comparison 4.6568 sec, and warnIfPerfScore > 0.65, and perfScore=0.608483]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.83725 secs, and comparison 2.88817 sec, and warnIfPerfScore > 0.5, and perfScore=0.368519]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.4602 secs, and comparison 8.83236 sec, and warnIfPerfScore > 1.05, and perfScore=0.844377]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.12671 secs, and comparison 8.88548 sec, and warnIfPerfScore > 1.15, and perfScore=1.09337]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.37208 secs, and comparison 3.01771 sec, and warnIfPerfScore > 0.48, and perfScore=0.32199]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.34448 secs, and comparison 3.59305 sec, and warnIfPerfScore > 0.57, and perfScore=0.38451]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.37527 secs, and comparison 25.5122 sec, and warnIfPerfScore > 2.9, and perfScore=2.72122]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.4291 secs, and comparison 25.4536 sec, and warnIfPerfScore > 2.9, and perfScore=2.44064]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.87928 secs, and comparison 151.91 sec, and warnIfPerfScore > 24, and perfScore=19.2796]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.75944 secs, and comparison 12.2805 sec, and warnIfPerfScore > 1.7, and perfScore=1.40197]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.58115 secs, and comparison 9.3389 sec, and warnIfPerfScore > 1.5, and perfScore=0.974716]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.96027 secs, and comparison 15.7742 sec, and warnIfPerfScore > 2.1, and perfScore=1.98161]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.6808 secs, and comparison 6.59538 sec, and warnIfPerfScore > 1.6, and perfScore=0.617496]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.2792 secs, and comparison 1.36452 sec, and warnIfPerfScore > 0.23, and perfScore=0.120977]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6533 secs, and comparison 13.6242 sec, and warnIfPerfScore > 1.3, and perfScore=1.07673]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 10.0295 secs, and comparison 7.14457 sec, and warnIfPerfScore > 1.2, and perfScore=0.712354]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 12.9933 secs, and comparison 2.7792 sec, and warnIfPerfScore > 0.33, and perfScore=0.213895]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.42655 secs, and comparison 46.9527 sec, and warnIfPerfScore > 6, and perfScore=4.9809]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 9.09678 secs, and comparison 7.05879 sec, and warnIfPerfScore > 0.8, and perfScore=0.775966]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.72212 secs, and comparison 14.8391 sec, and warnIfPerfScore > 1.4, and perfScore=1.52633]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.341 secs, and comparison 4.06375 sec, and warnIfPerfScore > 0.65, and perfScore=0.329288]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.7244 secs, and comparison 40.5041 sec, and warnIfPerfScore > 4.4, and perfScore=4.1652]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.6234 secs, and comparison 3.92548 sec, and warnIfPerfScore > 0.6, and perfScore=0.337721]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.0504 secs, and comparison 4.32946 sec, and warnIfPerfScore > 0.6, and perfScore=0.359279]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.8969 secs, and comparison 4.12624 sec, and warnIfPerfScore > 0.6, and perfScore=0.346834]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 12.0531 secs, and comparison 7.91036 sec, and warnIfPerfScore > 1.3, and perfScore=0.656292]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 13.2373 secs, and comparison 11.2293 sec, and warnIfPerfScore > 1.3, and perfScore=0.848313]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 57.2541 secs, and comparison 6.77696 sec, and warnIfPerfScore > 0.3, and perfScore=0.118366]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.50703 secs, and comparison 13.5597 sec, and warnIfPerfScore > 1.5, and perfScore=1.59394]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.4771 secs, and comparison 4.94783 sec, and warnIfPerfScore > 0.55, and perfScore=0.34177]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 15 secs, and comparison 0.94462 sec, and warnIfPerfScore > 0.1, and perfScore=0.0629747]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.74886 sec, and warnIfPerfScore > 0.5, and perfScore=0.249924]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.83972 secs, and comparison 17.8752 sec, and warnIfPerfScore > 2, and perfScore=1.81664]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.0023 secs, and comparison 18.1509 sec, and warnIfPerfScore > 3.6, and perfScore=1.81468]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 55 seconds]]]

Succeeded
