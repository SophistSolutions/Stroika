Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Aug  9 23:3:43 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.2906 secs, and comparison 5.06939 sec, and warnIfPerfScore > 0.62, and perfScore=0.448994]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.5496 secs, and comparison 3.47664 sec, and warnIfPerfScore > 0.5, and perfScore=0.301019]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.1755 secs, and comparison 9.3174 sec, and warnIfPerfScore > 1.05, and perfScore=0.833737]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.247 secs, and comparison 4.47617 sec, and warnIfPerfScore > 0.48, and perfScore=0.365491]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.1204 secs, and comparison 4.62776 sec, and warnIfPerfScore > 0.57, and perfScore=0.381816]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 13.0625 secs, and comparison 27.1062 sec, and warnIfPerfScore > 2.9, and perfScore=2.07512]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.9974 secs, and comparison 28.8085 sec, and warnIfPerfScore > 2.9, and perfScore=2.40123]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.7
	DETAILS:         	[baseline test 11.9173 secs, and comparison 91.7102 sec, and warnIfPerfScore > 9.7, and perfScore=7.69552]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.64323 secs, and comparison 12.5847 sec, and warnIfPerfScore > 1.6, and perfScore=1.30503]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.2457 secs, and comparison 14.6191 sec, and warnIfPerfScore > 1.5, and perfScore=1.02621]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.20415 secs, and comparison 12.368 sec, and warnIfPerfScore > 2.1, and perfScore=1.34374]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 12.8672 secs, and comparison 8.84394 sec, and warnIfPerfScore > 1.3, and perfScore=0.687325]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.9111 secs, and comparison 3.42971 sec, and warnIfPerfScore > 0.23, and perfScore=0.246545]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.23 and got 0.246545}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 14.4519 secs, and comparison 13.3327 sec, and warnIfPerfScore > 1.3, and perfScore=0.922553]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 12.0362 secs, and comparison 8.08747 sec, and warnIfPerfScore > 1.2, and perfScore=0.671931]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 9.97973 secs, and comparison 1.93993 sec, and warnIfPerfScore > 0.33, and perfScore=0.194387]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 10.1894 secs, and comparison 46.1342 sec, and warnIfPerfScore > 6, and perfScore=4.52767]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.0539 secs, and comparison 4.20229 sec, and warnIfPerfScore > 0.5, and perfScore=0.417975]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.8346 secs, and comparison 40.4869 sec, and warnIfPerfScore > 4.4, and perfScore=3.73682]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.2854 secs, and comparison 4.83404 sec, and warnIfPerfScore > 0.6, and perfScore=0.46999]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.1159 secs, and comparison 19.4871 sec, and warnIfPerfScore > 1.5, and perfScore=1.28918]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.7849 secs, and comparison 4.31527 sec, and warnIfPerfScore > 0.55, and perfScore=0.313043]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15 secs, and comparison 1.46533 sec, and warnIfPerfScore > 0.25, and perfScore=0.0976884]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.76748 sec, and warnIfPerfScore > 0.5, and perfScore=0.251165]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.6527 secs, and comparison 19.1487 sec, and warnIfPerfScore > 2, and perfScore=1.64329]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.2318 secs, and comparison 32.6522 sec, and warnIfPerfScore > 3.1, and perfScore=2.66945]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 2 seconds]]]

Succeeded
