Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Aug 27 13:18:32 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.86754 secs, and comparison 4.75318 sec, and warnIfPerfScore > 0.62, and perfScore=0.692122]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.07298 secs, and comparison 3.02009 sec, and warnIfPerfScore > 0.5, and perfScore=0.4973]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.49845 secs, and comparison 6.93737 sec, and warnIfPerfScore > 1.05, and perfScore=1.06754]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.49855 secs, and comparison 3.88425 sec, and warnIfPerfScore > 0.48, and perfScore=1.11025]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.19774 secs, and comparison 4.57173 sec, and warnIfPerfScore > 0.55, and perfScore=1.08909]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.20584 secs, and comparison 17.456 sec, and warnIfPerfScore > 2.9, and perfScore=5.44506]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 4.0079 secs, and comparison 18.4764 sec, and warnIfPerfScore > 2.9, and perfScore=4.61]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 4.69994 secs, and comparison 59.6761 sec, and warnIfPerfScore > 9.7, and perfScore=12.6972]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.66376 secs, and comparison 10.0616 sec, and warnIfPerfScore > 1.6, and perfScore=2.15741]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.88147 secs, and comparison 5.49477 sec, and warnIfPerfScore > 1.5, and perfScore=0.93425]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.47594 secs, and comparison 10.6602 sec, and warnIfPerfScore > 2.1, and perfScore=4.30549]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.27859 secs, and comparison 3.80939 sec, and warnIfPerfScore > 1.3, and perfScore=0.890337]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.57901 secs, and comparison 1.7289 sec, and warnIfPerfScore > 0.18, and perfScore=0.377572]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.84823 secs, and comparison 4.72849 sec, and warnIfPerfScore > 1.3, and perfScore=1.22874]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.16188 secs, and comparison 6.79675 sec, and warnIfPerfScore > 1.2, and perfScore=2.1496]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15.6742 secs, and comparison 1.53361 sec, and warnIfPerfScore > 0.33, and perfScore=0.0978431]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.1294 secs, and comparison 43.5661 sec, and warnIfPerfScore > 6, and perfScore=13.9216]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.1692 secs, and comparison 3.85735 sec, and warnIfPerfScore > 0.5, and perfScore=0.345355]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 6.27267 secs, and comparison 38.5498 sec, and warnIfPerfScore > 4.4, and perfScore=6.14568]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.6465 secs, and comparison 3.85575 sec, and warnIfPerfScore > 0.6, and perfScore=0.304885]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.25529 secs, and comparison 11.9924 sec, and warnIfPerfScore > 1.5, and perfScore=1.45269]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.31303 secs, and comparison 2.21812 sec, and warnIfPerfScore > 0.55, and perfScore=0.303311]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.074
	DETAILS:         	[baseline test 15 secs, and comparison 1.10625 sec, and warnIfPerfScore > 0.25, and perfScore=0.0737501]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.8985 sec, and warnIfPerfScore > 0.5, and perfScore=0.2599]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 46 seconds]]]

Succeeded
