Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 25 23:40:1 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.50361 secs, and comparison 4.5202 sec, and warnIfPerfScore > 0.65, and perfScore=0.821316]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.45353 secs, and comparison 2.57659 sec, and warnIfPerfScore > 0.5, and perfScore=0.472463]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.51949 secs, and comparison 7.00683 sec, and warnIfPerfScore > 1.05, and perfScore=0.931822]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.34818 secs, and comparison 6.94755 sec, and warnIfPerfScore > 1.15, and perfScore=1.09442]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.72956 secs, and comparison 2.16089 sec, and warnIfPerfScore > 0.48, and perfScore=0.279562]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.63781 secs, and comparison 3.03007 sec, and warnIfPerfScore > 0.57, and perfScore=0.396719]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.82961 secs, and comparison 18.0412 sec, and warnIfPerfScore > 2.9, and perfScore=3.09476]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.15395 secs, and comparison 18.4592 sec, and warnIfPerfScore > 2.9, and perfScore=2.99956]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.51055 secs, and comparison 129.958 sec, and warnIfPerfScore > 24, and perfScore=23.5835]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.26372 secs, and comparison 11.2017 sec, and warnIfPerfScore > 1.7, and perfScore=1.35553]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.45865 secs, and comparison 7.32199 sec, and warnIfPerfScore > 1.5, and perfScore=0.865623]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.19002 secs, and comparison 13.3483 sec, and warnIfPerfScore > 2.1, and perfScore=1.85651]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 9.76828 secs, and comparison 4.94205 sec, and warnIfPerfScore > 1.6, and perfScore=0.505929]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 9.89695 secs, and comparison 1.03356 sec, and warnIfPerfScore > 0.23, and perfScore=0.104432]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.8632 secs, and comparison 14.5017 sec, and warnIfPerfScore > 1.3, and perfScore=1.04605]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.5631 secs, and comparison 7.32954 sec, and warnIfPerfScore > 1.2, and perfScore=0.693879]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.1501 secs, and comparison 2.53397 sec, and warnIfPerfScore > 0.33, and perfScore=0.227259]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.72135 secs, and comparison 41.2664 sec, and warnIfPerfScore > 6, and perfScore=4.24492]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.94905 secs, and comparison 7.15308 sec, and warnIfPerfScore > 0.8, and perfScore=0.718971]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.69962 secs, and comparison 9.82983 sec, and warnIfPerfScore > 1.4, and perfScore=1.01342]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.7325 secs, and comparison 3.75206 sec, and warnIfPerfScore > 0.65, and perfScore=0.3198]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.2831 secs, and comparison 38.1285 sec, and warnIfPerfScore > 4.4, and perfScore=3.70789]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.967 secs, and comparison 3.64789 sec, and warnIfPerfScore > 0.6, and perfScore=0.332623]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2839 secs, and comparison 3.66548 sec, and warnIfPerfScore > 0.6, and perfScore=0.324843]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.9516 secs, and comparison 3.67452 sec, and warnIfPerfScore > 0.6, and perfScore=0.335523]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.3147 secs, and comparison 6.91163 sec, and warnIfPerfScore > 1.3, and perfScore=0.610854]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 11.142 secs, and comparison 9.97684 sec, and warnIfPerfScore > 1.3, and perfScore=0.895426]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 35.7664 secs, and comparison 4.95424 sec, and warnIfPerfScore > 0.3, and perfScore=0.138516]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.38762 secs, and comparison 8.82866 sec, and warnIfPerfScore > 1.5, and perfScore=1.63869]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.80074 secs, and comparison 2.73937 sec, and warnIfPerfScore > 0.55, and perfScore=0.472245]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.571571 sec, and warnIfPerfScore > 0.1, and perfScore=0.0381047]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.57532 sec, and warnIfPerfScore > 0.5, and perfScore=0.171688]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.04118 secs, and comparison 12.1589 sec, and warnIfPerfScore > 2, and perfScore=2.01266]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.69027 secs, and comparison 14.5326 sec, and warnIfPerfScore > 3.6, and perfScore=1.88975]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 22 seconds]]]

Succeeded
