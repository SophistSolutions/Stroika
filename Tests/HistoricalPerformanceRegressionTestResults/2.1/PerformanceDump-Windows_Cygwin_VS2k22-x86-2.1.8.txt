Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov  2 18:57:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 8.74423 secs, and comparison 4.77737 sec, and warnIfPerfScore > 0.65, and perfScore=0.546346]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.47251 secs, and comparison 3.01243 sec, and warnIfPerfScore > 0.5, and perfScore=0.355554]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.3049 secs, and comparison 8.57085 sec, and warnIfPerfScore > 1.05, and perfScore=0.831728]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.82358 secs, and comparison 8.29374 sec, and warnIfPerfScore > 1.15, and perfScore=1.0601]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.0351 secs, and comparison 2.49683 sec, and warnIfPerfScore > 0.48, and perfScore=0.248809]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.1906 secs, and comparison 3.13211 sec, and warnIfPerfScore > 0.57, and perfScore=0.307354]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.3756 secs, and comparison 27.9078 sec, and warnIfPerfScore > 2.9, and perfScore=2.4533]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.0693 secs, and comparison 25.9659 sec, and warnIfPerfScore > 2.9, and perfScore=2.1514]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 10.042 secs, and comparison 175.03 sec, and warnIfPerfScore > 24, and perfScore=17.4297]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.5093 secs, and comparison 14.1228 sec, and warnIfPerfScore > 1.7, and perfScore=1.34383]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 13.0366 secs, and comparison 12.646 sec, and warnIfPerfScore > 1.5, and perfScore=0.970042]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.5328 secs, and comparison 18.4707 sec, and warnIfPerfScore > 2.1, and perfScore=1.75364]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 12.5586 secs, and comparison 8.28686 sec, and warnIfPerfScore > 1.6, and perfScore=0.659853]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 13.3533 secs, and comparison 1.60695 sec, and warnIfPerfScore > 0.23, and perfScore=0.120341]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.0143 secs, and comparison 14.9781 sec, and warnIfPerfScore > 1.3, and perfScore=0.997588]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.6638 secs, and comparison 7.0547 sec, and warnIfPerfScore > 1.2, and perfScore=0.604835]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.3654 secs, and comparison 2.85937 sec, and warnIfPerfScore > 0.33, and perfScore=0.231239]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.1405 secs, and comparison 43.4989 sec, and warnIfPerfScore > 6, and perfScore=3.90457]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 10.9557 secs, and comparison 6.32189 sec, and warnIfPerfScore > 0.8, and perfScore=0.577042]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.8808 secs, and comparison 11.5079 sec, and warnIfPerfScore > 1.4, and perfScore=1.05764]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.4562 secs, and comparison 3.86132 sec, and warnIfPerfScore > 0.65, and perfScore=0.337052]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.2569 secs, and comparison 39.3631 sec, and warnIfPerfScore > 4.4, and perfScore=3.4968]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.1545 secs, and comparison 3.87144 sec, and warnIfPerfScore > 0.6, and perfScore=0.347075]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.2483 secs, and comparison 3.86074 sec, and warnIfPerfScore > 0.6, and perfScore=0.343229]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.4377 secs, and comparison 3.89527 sec, and warnIfPerfScore > 0.6, and perfScore=0.340563]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 11.2424 secs, and comparison 6.38906 sec, and warnIfPerfScore > 1.3, and perfScore=0.568302]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 12.3609 secs, and comparison 10.1486 sec, and warnIfPerfScore > 1.3, and perfScore=0.821029]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 55.7366 secs, and comparison 6.70043 sec, and warnIfPerfScore > 0.3, and perfScore=0.120216]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.9991 secs, and comparison 15.4957 sec, and warnIfPerfScore > 1.5, and perfScore=1.40882]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.07135 secs, and comparison 3.30563 sec, and warnIfPerfScore > 0.55, and perfScore=0.409551]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.981168 sec, and warnIfPerfScore > 0.1, and perfScore=0.0654112]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.56679 sec, and warnIfPerfScore > 0.5, and perfScore=0.237786]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.3969 secs, and comparison 14.3185 sec, and warnIfPerfScore > 2, and perfScore=1.37718]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.8473 secs, and comparison 32.662 sec, and warnIfPerfScore > 3.6, and perfScore=3.01108]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 49 seconds]]]

Succeeded
