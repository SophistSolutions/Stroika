Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 14:1:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.94144 secs, and comparison 7.63554 sec, and warnIfPerfScore > 0.65, and perfScore=0.768052]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 14.8267 secs, and comparison 3.077 sec, and warnIfPerfScore > 0.5, and perfScore=0.207531]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 12.1039 secs, and comparison 9.8303 sec, and warnIfPerfScore > 1.05, and perfScore=0.812159]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.73784 secs, and comparison 9.81524 sec, and warnIfPerfScore > 1.15, and perfScore=1.1233]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.0203 secs, and comparison 3.31287 sec, and warnIfPerfScore > 0.48, and perfScore=0.330614]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.2477 secs, and comparison 3.91203 sec, and warnIfPerfScore > 0.57, and perfScore=0.381748]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.1878 secs, and comparison 27.8214 sec, and warnIfPerfScore > 2.9, and perfScore=2.73087]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.7463 secs, and comparison 30.7434 sec, and warnIfPerfScore > 2.9, and perfScore=2.08482]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 11.3087 secs, and comparison 185.929 sec, and warnIfPerfScore > 24, and perfScore=16.4412]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.3574 secs, and comparison 12.9535 sec, and warnIfPerfScore > 1.7, and perfScore=1.25065]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.3009 secs, and comparison 11.4908 sec, and warnIfPerfScore > 1.5, and perfScore=0.8035]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.53746 secs, and comparison 17.1453 sec, and warnIfPerfScore > 2.1, and perfScore=2.00824]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.2521 secs, and comparison 7.8235 sec, and warnIfPerfScore > 1.6, and perfScore=0.695292]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15.2045 secs, and comparison 1.89392 sec, and warnIfPerfScore > 0.23, and perfScore=0.124563]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 15.1279 secs, and comparison 24.2231 sec, and warnIfPerfScore > 1.3, and perfScore=1.60122]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 12.5508 secs, and comparison 8.26261 sec, and warnIfPerfScore > 1.2, and perfScore=0.658335]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 12.6717 secs, and comparison 2.53545 sec, and warnIfPerfScore > 0.33, and perfScore=0.200088]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.68124 secs, and comparison 47.0273 sec, and warnIfPerfScore > 6, and perfScore=4.85757]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.1285 secs, and comparison 9.18573 sec, and warnIfPerfScore > 0.8, and perfScore=0.825425]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.2808 secs, and comparison 20.2682 sec, and warnIfPerfScore > 1.4, and perfScore=1.7967]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.6451 secs, and comparison 4.53159 sec, and warnIfPerfScore > 0.65, and perfScore=0.309427]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 12.9417 secs, and comparison 41.8307 sec, and warnIfPerfScore > 4.4, and perfScore=3.23225]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.7731 secs, and comparison 4.36713 sec, and warnIfPerfScore > 0.6, and perfScore=0.317076]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.7115 secs, and comparison 4.28583 sec, and warnIfPerfScore > 0.6, and perfScore=0.337161]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.8491 secs, and comparison 4.52418 sec, and warnIfPerfScore > 0.6, and perfScore=0.326677]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 13.9621 secs, and comparison 9.32208 sec, and warnIfPerfScore > 1.3, and perfScore=0.667668]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 15.9365 secs, and comparison 13.601 sec, and warnIfPerfScore > 1.3, and perfScore=0.853452]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 65.0923 secs, and comparison 7.57347 sec, and warnIfPerfScore > 0.3, and perfScore=0.11635]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.7588 secs, and comparison 16.3284 sec, and warnIfPerfScore > 1.5, and perfScore=1.27977]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.5877 secs, and comparison 5.2932 sec, and warnIfPerfScore > 0.55, and perfScore=0.339575]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.02365 sec, and warnIfPerfScore > 0.1, and perfScore=0.0682436]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.97436 sec, and warnIfPerfScore > 0.5, and perfScore=0.264958]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.4173 secs, and comparison 22.8653 sec, and warnIfPerfScore > 2, and perfScore=1.84141]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 15.4759 secs, and comparison 32.0594 sec, and warnIfPerfScore > 3.6, and perfScore=2.07157]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 56 seconds]]]

Succeeded
