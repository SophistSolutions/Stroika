Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/11/18 19:50:33]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.81804 secs, and comparison 6.16912 sec, and warnIfPerfScore > 0.62, and perfScore=0.699603]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.83651 secs, and comparison 4.15903 sec, and warnIfPerfScore > 0.65, and perfScore=0.470665]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 15.2973 secs, and comparison 11.9477 sec, and warnIfPerfScore > 1.05, and perfScore=0.781033]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.1408 secs, and comparison 4.25656 sec, and warnIfPerfScore > 0.5, and perfScore=0.15126]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 28.3798 secs, and comparison 4.91435 sec, and warnIfPerfScore > 0.68, and perfScore=0.173164]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 19.5484 secs, and comparison 58.0231 sec, and warnIfPerfScore > 4.3, and perfScore=2.96818]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 20.8513 secs, and comparison 59.9032 sec, and warnIfPerfScore > 4, and perfScore=2.87287]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 16.2234 secs, and comparison 152.35 sec, and warnIfPerfScore > 10.4, and perfScore=9.39076]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.9371 secs, and comparison 31.229 sec, and warnIfPerfScore > 3.2, and perfScore=1.49156]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.30094 secs, and comparison 5.94219 sec, and warnIfPerfScore > 1.8, and perfScore=0.715846]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.2722 secs, and comparison 32.5879 sec, and warnIfPerfScore > 2.8, and perfScore=2.28332]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.0402 secs, and comparison 19.6082 sec, and warnIfPerfScore > 3.3, and perfScore=1.77608]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.4123 secs, and comparison 1.90634 sec, and warnIfPerfScore > 0.25, and perfScore=0.167043]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.0899 secs, and comparison 18.9549 sec, and warnIfPerfScore > 1.4, and perfScore=1.10913]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.221 secs, and comparison 34.469 sec, and warnIfPerfScore > 7.7, and perfScore=2.82048]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9625 secs, and comparison 4.2946 sec, and warnIfPerfScore > 1.55, and perfScore=0.33131]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 11.8141 secs, and comparison 75.8684 sec, and warnIfPerfScore > 9, and perfScore=6.42187]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 12.92 secs, and comparison 6.63259 sec, and warnIfPerfScore > 1, and perfScore=0.513357]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.249 secs, and comparison 70.013 sec, and warnIfPerfScore > 7.9, and perfScore=5.28439]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.837 secs, and comparison 7.20798 sec, and warnIfPerfScore > 0.8, and perfScore=0.561501]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 30.9024 secs, and comparison 41.4108 sec, and warnIfPerfScore > 1.7, and perfScore=1.34005]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.49509 secs, and comparison 6.22378 sec, and warnIfPerfScore > 0.55, and perfScore=0.958229]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15 secs, and comparison 6.94508 sec, and warnIfPerfScore > 0.4, and perfScore=0.463005]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78565 sec, and warnIfPerfScore > 1.1, and perfScore=0.18571]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 51 seconds]]]

Succeeded
