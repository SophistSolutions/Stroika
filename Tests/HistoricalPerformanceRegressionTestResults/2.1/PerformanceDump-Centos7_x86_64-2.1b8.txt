Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 22 18:22:20 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.6061 secs, and comparison 5.19156 sec, and warnIfPerfScore > 0.62, and perfScore=0.785873]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.8858 secs, and comparison 3.72672 sec, and warnIfPerfScore > 0.5, and perfScore=0.541218]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.99271 secs, and comparison 8.22246 sec, and warnIfPerfScore > 1.05, and perfScore=0.914348]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.01335 secs, and comparison 4.64065 sec, and warnIfPerfScore > 0.48, and perfScore=1.54003]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 2.8249 secs, and comparison 5.05091 sec, and warnIfPerfScore > 0.57, and perfScore=1.788]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.8372 secs, and comparison 32.1077 sec, and warnIfPerfScore > 2.9, and perfScore=2.96273]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.0873 secs, and comparison 35.6491 sec, and warnIfPerfScore > 2.9, and perfScore=2.94931]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 13.07 secs, and comparison 149.277 sec, and warnIfPerfScore > 9.7, and perfScore=11.4214]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.9636 secs, and comparison 15.1267 sec, and warnIfPerfScore > 1.6, and perfScore=1.16685]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.1747 secs, and comparison 18.3415 sec, and warnIfPerfScore > 1.5, and perfScore=1.06794]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.747 secs, and comparison 31.9576 sec, and warnIfPerfScore > 2.1, and perfScore=1.61835]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.7171 secs, and comparison 16.048 sec, and warnIfPerfScore > 1.3, and perfScore=1.02105]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 17.0352 secs, and comparison 7.22223 sec, and warnIfPerfScore > 0.23, and perfScore=0.423959]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.5531 secs, and comparison 16.9702 sec, and warnIfPerfScore > 1.3, and perfScore=1.25213]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.069 secs, and comparison 20.6126 sec, and warnIfPerfScore > 1.2, and perfScore=1.46511]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.48156 secs, and comparison 2.16743 sec, and warnIfPerfScore > 0.33, and perfScore=0.255546]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 10.4239 secs, and comparison 90.2191 sec, and warnIfPerfScore > 6, and perfScore=8.655]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 11.9224 secs, and comparison 7.85015 sec, and warnIfPerfScore > 0.5, and perfScore=0.65844]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 16.5428 secs, and comparison 83.12 sec, and warnIfPerfScore > 4.4, and perfScore=5.02454]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 12.8992 secs, and comparison 7.48833 sec, and warnIfPerfScore > 0.6, and perfScore=0.580526]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 31.9773 secs, and comparison 38.7574 sec, and warnIfPerfScore > 1.5, and perfScore=1.21203]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 23.1227 secs, and comparison 8.91313 sec, and warnIfPerfScore > 0.55, and perfScore=0.38547]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.19337 sec, and warnIfPerfScore > 0.25, and perfScore=0.212892]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15 secs, and comparison 6.9479 sec, and warnIfPerfScore > 0.5, and perfScore=0.463193]
	                 	Test_Optional_ is FASTER

[[[Tests took: 15 minutes, 7 seconds]]]

Succeeded
