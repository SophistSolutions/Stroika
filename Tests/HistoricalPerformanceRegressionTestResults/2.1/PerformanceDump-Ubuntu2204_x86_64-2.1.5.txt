Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Sep 17 6:49:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 3.7169 secs, and comparison 1.48642 sec, and warnIfPerfScore > 0.65, and perfScore=0.399908]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 3.6565 secs, and comparison 3.18824 sec, and warnIfPerfScore > 0.5, and perfScore=0.871938]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.95172 secs, and comparison 7.58432 sec, and warnIfPerfScore > 1.05, and perfScore=2.56946]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 2.27935 secs, and comparison 7.82408 sec, and warnIfPerfScore > 1.15, and perfScore=3.4326]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 4.89492 secs, and comparison 1.03032 sec, and warnIfPerfScore > 0.48, and perfScore=0.210487]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 5.2669 secs, and comparison 1.13298 sec, and warnIfPerfScore > 0.57, and perfScore=0.215114]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 4.62715 secs, and comparison 12.9975 sec, and warnIfPerfScore > 2.9, and perfScore=2.80896]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 4.85792 secs, and comparison 13.5972 sec, and warnIfPerfScore > 2.9, and perfScore=2.79898]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 6.3302 secs, and comparison 47.4982 sec, and warnIfPerfScore > 24, and perfScore=7.50343]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.06165 secs, and comparison 8.0897 sec, and warnIfPerfScore > 1.7, and perfScore=1.33457]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.39029 secs, and comparison 7.81207 sec, and warnIfPerfScore > 1.5, and perfScore=1.05707]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.30991 secs, and comparison 10.0117 sec, and warnIfPerfScore > 2.1, and perfScore=3.02478]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.98477 secs, and comparison 4.27335 sec, and warnIfPerfScore > 1.6, and perfScore=1.07242]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.72465 secs, and comparison 1.60446 sec, and warnIfPerfScore > 0.23, and perfScore=0.339594]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.87314 secs, and comparison 5.7648 sec, and warnIfPerfScore > 1.3, and perfScore=1.48841]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.20288 secs, and comparison 7.99239 sec, and warnIfPerfScore > 1.2, and perfScore=2.49538]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 21.7202 secs, and comparison 2.30589 sec, and warnIfPerfScore > 0.33, and perfScore=0.106163]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.77742 secs, and comparison 42.6896 sec, and warnIfPerfScore > 6, and perfScore=15.3702]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.83581 secs, and comparison 6.63103 sec, and warnIfPerfScore > 0.8, and perfScore=2.33832]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 2.99551 secs, and comparison 9.0806 sec, and warnIfPerfScore > 1.4, and perfScore=3.0314]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.8687 secs, and comparison 3.65725 sec, and warnIfPerfScore > 0.65, and perfScore=0.17525]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.48704 secs, and comparison 37.7065 sec, and warnIfPerfScore > 4.4, and perfScore=8.40342]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.8498 secs, and comparison 3.7617 sec, and warnIfPerfScore > 0.6, and perfScore=0.271607]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.987 secs, and comparison 3.77685 sec, and warnIfPerfScore > 0.6, and perfScore=0.270026]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.8751 secs, and comparison 3.79305 sec, and warnIfPerfScore > 0.6, and perfScore=0.273371]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.0236 secs, and comparison 4.27441 sec, and warnIfPerfScore > 1.3, and perfScore=0.3048]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 21.2434 secs, and comparison 9.92018 sec, and warnIfPerfScore > 1.3, and perfScore=0.466977]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.8419 secs, and comparison 5.63023 sec, and warnIfPerfScore > 0.3, and perfScore=0.27014]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.52505 secs, and comparison 13.8977 sec, and warnIfPerfScore > 1.5, and perfScore=1.84686]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.50103 secs, and comparison 2.00424 sec, and warnIfPerfScore > 0.55, and perfScore=0.308295]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.777964 sec, and warnIfPerfScore > 0.1, and perfScore=0.0518643]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 15 secs, and comparison 1.45527 sec, and warnIfPerfScore > 0.5, and perfScore=0.097018]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 52 seconds]]]

Succeeded
