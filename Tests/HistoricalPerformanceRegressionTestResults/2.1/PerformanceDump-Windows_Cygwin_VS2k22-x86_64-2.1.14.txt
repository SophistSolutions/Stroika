Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Sep  4 22::14 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.3019 secs, and comparison 4.06594 sec, and warnIfPerfScore > 0.65, and perfScore=0.766884]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.15574 secs, and comparison 2.3591 sec, and warnIfPerfScore > 0.5, and perfScore=0.457567]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.20116 secs, and comparison 6.66459 sec, and warnIfPerfScore > 1.05, and perfScore=0.925488]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.97822 secs, and comparison 6.78631 sec, and warnIfPerfScore > 1.15, and perfScore=1.13517]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.19174 secs, and comparison 2.01481 sec, and warnIfPerfScore > 0.48, and perfScore=0.325402]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.15104 secs, and comparison 2.62673 sec, and warnIfPerfScore > 0.57, and perfScore=0.427039]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.65304 secs, and comparison 17.8434 sec, and warnIfPerfScore > 2.9, and perfScore=2.68199]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.89009 secs, and comparison 18.2093 sec, and warnIfPerfScore > 2.9, and perfScore=2.64283]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 5.91003 secs, and comparison 121.099 sec, and warnIfPerfScore > 24, and perfScore=20.4904]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.3608 secs, and comparison 9.25011 sec, and warnIfPerfScore > 1.7, and perfScore=1.72551]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.79668 secs, and comparison 5.53572 sec, and warnIfPerfScore > 1.5, and perfScore=0.954981]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.12012 secs, and comparison 11.17 sec, and warnIfPerfScore > 2.1, and perfScore=2.1816]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.68757 secs, and comparison 3.84968 sec, and warnIfPerfScore > 1.6, and perfScore=0.575647]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 6.95324 secs, and comparison 0.67297 sec, and warnIfPerfScore > 0.23, and perfScore=0.0967851]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2449 secs, and comparison 11.6178 sec, and warnIfPerfScore > 1.3, and perfScore=1.03317]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.81601 secs, and comparison 5.25507 sec, and warnIfPerfScore > 1.2, and perfScore=0.672347]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.09821 secs, and comparison 1.75441 sec, and warnIfPerfScore > 0.33, and perfScore=0.247163]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.52232 secs, and comparison 36.643 sec, and warnIfPerfScore > 6, and perfScore=4.87124]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.3696 secs, and comparison 5.01744 sec, and warnIfPerfScore > 0.8, and perfScore=0.680829]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.51038 secs, and comparison 7.4289 sec, and warnIfPerfScore > 1.4, and perfScore=0.989151]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.10363 secs, and comparison 3.19782 sec, and warnIfPerfScore > 0.65, and perfScore=0.450167]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.04989 secs, and comparison 33.9702 sec, and warnIfPerfScore > 4.4, and perfScore=4.21996]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.13051 secs, and comparison 3.11271 sec, and warnIfPerfScore > 0.6, and perfScore=0.436533]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.13079 secs, and comparison 3.12316 sec, and warnIfPerfScore > 0.6, and perfScore=0.437982]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.13842 secs, and comparison 3.1801 sec, and warnIfPerfScore > 0.6, and perfScore=0.445491]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 7.25868 secs, and comparison 5.18388 sec, and warnIfPerfScore > 1.3, and perfScore=0.714164]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.46249 secs, and comparison 8.91204 sec, and warnIfPerfScore > 1.3, and perfScore=1.19425]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 36.5689 secs, and comparison 6.56071 sec, and warnIfPerfScore > 0.3, and perfScore=0.179407]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.59183 secs, and comparison 9.07689 sec, and warnIfPerfScore > 1.5, and perfScore=1.62324]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.89623 secs, and comparison 2.79136 sec, and warnIfPerfScore > 0.55, and perfScore=0.473414]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.594508 sec, and warnIfPerfScore > 0.1, and perfScore=0.0396338]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.21144 sec, and warnIfPerfScore > 0.5, and perfScore=0.147429]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.29368 secs, and comparison 12.8435 sec, and warnIfPerfScore > 2, and perfScore=2.0407]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.46182 secs, and comparison 14.7062 sec, and warnIfPerfScore > 3.6, and perfScore=1.73795]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 37 seconds]]]

Succeeded
