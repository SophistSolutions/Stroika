Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 15:4:27 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 5.59108 secs, and comparison 4.97516 sec, and warnIfPerfScore > 0.65, and perfScore=0.889839]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.37435 secs, and comparison 2.78963 sec, and warnIfPerfScore > 0.5, and perfScore=0.437634]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.72786 secs, and comparison 8.69056 sec, and warnIfPerfScore > 1.05, and perfScore=0.893367]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.7229 secs, and comparison 8.45494 sec, and warnIfPerfScore > 1.15, and perfScore=1.09479]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.6804 secs, and comparison 2.65082 sec, and warnIfPerfScore > 0.48, and perfScore=0.248194]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.3983 secs, and comparison 2.86934 sec, and warnIfPerfScore > 0.57, and perfScore=0.275944]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.03367 secs, and comparison 19.9345 sec, and warnIfPerfScore > 2.9, and perfScore=2.83416]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.55701 secs, and comparison 19.3445 sec, and warnIfPerfScore > 2.9, and perfScore=2.5598]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.99048 secs, and comparison 143.446 sec, and warnIfPerfScore > 24, and perfScore=23.9457]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.11585 secs, and comparison 10.489 sec, and warnIfPerfScore > 1.7, and perfScore=1.71505]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 6.27149 secs, and comparison 5.78558 sec, and warnIfPerfScore > 1.5, and perfScore=0.922521]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.68627 secs, and comparison 14.3438 sec, and warnIfPerfScore > 2.1, and perfScore=2.52253]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.13926 secs, and comparison 4.95654 sec, and warnIfPerfScore > 1.6, and perfScore=0.608967]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 8.93001 secs, and comparison 0.8151 sec, and warnIfPerfScore > 0.23, and perfScore=0.0912765]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.665 secs, and comparison 15.0553 sec, and warnIfPerfScore > 1.3, and perfScore=1.02661]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.1703 secs, and comparison 6.50653 sec, and warnIfPerfScore > 1.2, and perfScore=0.639759]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.57111 secs, and comparison 2.24468 sec, and warnIfPerfScore > 0.33, and perfScore=0.234526]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.8431 secs, and comparison 42.0625 sec, and warnIfPerfScore > 6, and perfScore=4.2733]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 9.12765 secs, and comparison 5.62996 sec, and warnIfPerfScore > 0.8, and perfScore=0.616802]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.84915 secs, and comparison 8.06604 sec, and warnIfPerfScore > 1.4, and perfScore=0.911504]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.95587 secs, and comparison 3.62103 sec, and warnIfPerfScore > 0.65, and perfScore=0.45514]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.25044 secs, and comparison 39.2994 sec, and warnIfPerfScore > 4.4, and perfScore=4.24838]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.95199 secs, and comparison 3.60353 sec, and warnIfPerfScore > 0.6, and perfScore=0.453161]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.06534 secs, and comparison 3.58883 sec, and warnIfPerfScore > 0.6, and perfScore=0.44497]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.94763 secs, and comparison 3.56604 sec, and warnIfPerfScore > 0.6, and perfScore=0.448692]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.83549 secs, and comparison 5.29887 sec, and warnIfPerfScore > 1.3, and perfScore=0.676265]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.51124 secs, and comparison 8.97835 sec, and warnIfPerfScore > 1.3, and perfScore=1.05488]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 41.6801 secs, and comparison 5.80658 sec, and warnIfPerfScore > 0.3, and perfScore=0.139313]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.20911 secs, and comparison 9.89512 sec, and warnIfPerfScore > 1.5, and perfScore=1.59365]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.93075 secs, and comparison 2.94849 sec, and warnIfPerfScore > 0.55, and perfScore=0.425421]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.617945 sec, and warnIfPerfScore > 0.1, and perfScore=0.0411963]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.01873 sec, and warnIfPerfScore > 0.5, and perfScore=0.201249]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.33355 secs, and comparison 8.00488 sec, and warnIfPerfScore > 2, and perfScore=1.09154]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.80189 secs, and comparison 16.4239 sec, and warnIfPerfScore > 3.6, and perfScore=1.86595]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 22 seconds]]]

Succeeded
