Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/17/18 9:36:29]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15.2621 secs, and comparison 6.6974 sec, and warnIfPerfScore > 0.62, and perfScore=0.438826]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.2161 secs, and comparison 6.85434 sec, and warnIfPerfScore > 0.65, and perfScore=0.611114]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.7365 secs, and comparison 9.21932 sec, and warnIfPerfScore > 1.05, and perfScore=0.858692]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.66122 secs, and comparison 3.42679 sec, and warnIfPerfScore > 0.5, and perfScore=0.354696]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.57562 secs, and comparison 4.32223 sec, and warnIfPerfScore > 0.68, and perfScore=0.451378]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.0619 secs, and comparison 27.7609 sec, and warnIfPerfScore > 4.3, and perfScore=2.30153]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.42 secs, and comparison 29.6734 sec, and warnIfPerfScore > 4, and perfScore=2.38916]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 12.0322 secs, and comparison 97.4562 sec, and warnIfPerfScore > 10.4, and perfScore=8.09962]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.5735 secs, and comparison 14.8969 sec, and warnIfPerfScore > 3.2, and perfScore=1.28716]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.6332 secs, and comparison 15.3178 sec, and warnIfPerfScore > 1.8, and perfScore=1.2125]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.79787 secs, and comparison 15.0496 sec, and warnIfPerfScore > 2.8, and perfScore=1.7106]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.5417 secs, and comparison 12.093 sec, and warnIfPerfScore > 1.1, and perfScore=1.04776]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 12.1179 secs, and comparison 1.53442 sec, and warnIfPerfScore > 0.25, and perfScore=0.126625]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.4036 secs, and comparison 12.0993 sec, and warnIfPerfScore > 1.4, and perfScore=1.061]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.82134 secs, and comparison 36.1475 sec, and warnIfPerfScore > 7.7, and perfScore=3.6805]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.2076 secs, and comparison 4.30599 sec, and warnIfPerfScore > 1.55, and perfScore=0.421842]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	7.7
	DETAILS:         	[baseline test 9.28333 secs, and comparison 71.8046 sec, and warnIfPerfScore > 9, and perfScore=7.73478]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.2017 secs, and comparison 6.33434 sec, and warnIfPerfScore > 1, and perfScore=0.620911]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 10.6901 secs, and comparison 63.9817 sec, and warnIfPerfScore > 7.9, and perfScore=5.98516]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 10.6705 secs, and comparison 6.84404 sec, and warnIfPerfScore > 0.8, and perfScore=0.641399]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.4171 secs, and comparison 18.7451 sec, and warnIfPerfScore > 1.7, and perfScore=1.3002]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.2979 secs, and comparison 4.36247 sec, and warnIfPerfScore > 0.55, and perfScore=0.328056]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.31195 sec, and warnIfPerfScore > 0.4, and perfScore=0.15413]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.65388 sec, and warnIfPerfScore > 1.1, and perfScore=0.310258]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.9826 secs, and comparison 18.1673 sec, and warnIfPerfScore > 2.4, and perfScore=1.39936]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.3194 secs, and comparison 32.1924 sec, and warnIfPerfScore > 2.9, and perfScore=2.61315]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 24 seconds]]]

Succeeded
