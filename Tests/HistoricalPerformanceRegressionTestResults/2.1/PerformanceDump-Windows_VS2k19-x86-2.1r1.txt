Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 16:59:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.65915 secs, and comparison 5.0119 sec, and warnIfPerfScore > 0.65, and perfScore=0.518875]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.66238 secs, and comparison 3.34063 sec, and warnIfPerfScore > 0.5, and perfScore=0.345735]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.8358 secs, and comparison 9.25313 sec, and warnIfPerfScore > 1.05, and perfScore=0.853942]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.36637 secs, and comparison 9.24336 sec, and warnIfPerfScore > 1.15, and perfScore=1.10482]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.3302 secs, and comparison 3.18862 sec, and warnIfPerfScore > 0.48, and perfScore=0.308668]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.3276 secs, and comparison 3.70859 sec, and warnIfPerfScore > 0.57, and perfScore=0.359095]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.6091 secs, and comparison 27.2404 sec, and warnIfPerfScore > 2.9, and perfScore=2.34646]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.081 secs, and comparison 28.992 sec, and warnIfPerfScore > 2.9, and perfScore=2.39981]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 11.7671 secs, and comparison 145.245 sec, and warnIfPerfScore > 24, and perfScore=12.3433]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.66545 secs, and comparison 13.8265 sec, and warnIfPerfScore > 1.6, and perfScore=1.4305]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 11.6128 secs, and comparison 11.5085 sec, and warnIfPerfScore > 1.5, and perfScore=0.991023]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.595 secs, and comparison 16.105 sec, and warnIfPerfScore > 2.1, and perfScore=1.67848]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 12.2207 secs, and comparison 9.56874 sec, and warnIfPerfScore > 1.6, and perfScore=0.782994]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.5865 secs, and comparison 1.81451 sec, and warnIfPerfScore > 0.23, and perfScore=0.144163]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 14.222 secs, and comparison 12.9313 sec, and warnIfPerfScore > 1.3, and perfScore=0.909246]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.2792 secs, and comparison 6.75655 sec, and warnIfPerfScore > 1.2, and perfScore=0.657301]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.5997 secs, and comparison 2.38789 sec, and warnIfPerfScore > 0.33, and perfScore=0.248746]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.88633 secs, and comparison 44.3779 sec, and warnIfPerfScore > 6, and perfScore=4.48882]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.88407 secs, and comparison 6.73279 sec, and warnIfPerfScore > 0.8, and perfScore=0.681176]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.91804 secs, and comparison 13.0799 sec, and warnIfPerfScore > 1.4, and perfScore=1.3188]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.59075 secs, and comparison 4.04676 sec, and warnIfPerfScore > 0.65, and perfScore=0.421944]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.548 secs, and comparison 38.853 sec, and warnIfPerfScore > 4.4, and perfScore=3.68345]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.7343 secs, and comparison 3.98009 sec, and warnIfPerfScore > 0.6, and perfScore=0.408873]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.72219 secs, and comparison 3.99041 sec, and warnIfPerfScore > 0.6, and perfScore=0.410444]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.71559 secs, and comparison 3.995 sec, and warnIfPerfScore > 0.6, and perfScore=0.411195]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 9.82697 secs, and comparison 7.65507 sec, and warnIfPerfScore > 1.3, and perfScore=0.778986]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.9077 secs, and comparison 11.0505 sec, and warnIfPerfScore > 1.3, and perfScore=1.0131]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 60.886 secs, and comparison 10.3115 sec, and warnIfPerfScore > 0.3, and perfScore=0.169357]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.2401 secs, and comparison 17.3014 sec, and warnIfPerfScore > 1.5, and perfScore=1.4135]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.7504 secs, and comparison 4.30469 sec, and warnIfPerfScore > 0.55, and perfScore=0.313059]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 15 secs, and comparison 1.23309 sec, and warnIfPerfScore > 0.1, and perfScore=0.0822061]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.59727 sec, and warnIfPerfScore > 0.5, and perfScore=0.239818]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.2857 secs, and comparison 16.0279 sec, and warnIfPerfScore > 2, and perfScore=1.4202]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.8876 secs, and comparison 32.0565 sec, and warnIfPerfScore > 3.1, and perfScore=2.69662]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 33 seconds]]]

Succeeded
