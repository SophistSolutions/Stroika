Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat May 14 22:59:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 12.3845 secs, and comparison 5.80282 sec, and warnIfPerfScore > 0.65, and perfScore=0.468555]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.1778 secs, and comparison 3.39267 sec, and warnIfPerfScore > 0.5, and perfScore=0.278595]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 12.3588 secs, and comparison 9.99844 sec, and warnIfPerfScore > 1.05, and perfScore=0.809012]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.22699 secs, and comparison 10.2741 sec, and warnIfPerfScore > 1.15, and perfScore=1.11348]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.0725 secs, and comparison 3.57088 sec, and warnIfPerfScore > 0.48, and perfScore=0.295787]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.3506 secs, and comparison 4.19702 sec, and warnIfPerfScore > 0.57, and perfScore=0.339824]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.6076 secs, and comparison 31.701 sec, and warnIfPerfScore > 2.9, and perfScore=2.17017]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.742 secs, and comparison 32.1314 sec, and warnIfPerfScore > 2.9, and perfScore=2.17957]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 13.2557 secs, and comparison 204.617 sec, and warnIfPerfScore > 24, and perfScore=15.4361]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.848 secs, and comparison 15.7681 sec, and warnIfPerfScore > 1.7, and perfScore=1.13865]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 14.0349 secs, and comparison 12.9474 sec, and warnIfPerfScore > 1.5, and perfScore=0.92251]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.4428 secs, and comparison 18.4901 sec, and warnIfPerfScore > 2.1, and perfScore=1.7706]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.6794 secs, and comparison 11.7965 sec, and warnIfPerfScore > 1.6, and perfScore=0.80361]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.8414 secs, and comparison 1.77375 sec, and warnIfPerfScore > 0.23, and perfScore=0.111969]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 16.6381 secs, and comparison 16.14 sec, and warnIfPerfScore > 1.3, and perfScore=0.970061]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.6762 secs, and comparison 8.5876 sec, and warnIfPerfScore > 1.2, and perfScore=0.735479]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.5795 secs, and comparison 2.41568 sec, and warnIfPerfScore > 0.33, and perfScore=0.228337]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 11.0896 secs, and comparison 51.3363 sec, and warnIfPerfScore > 6, and perfScore=4.62925]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 11.3635 secs, and comparison 7.52898 sec, and warnIfPerfScore > 0.8, and perfScore=0.66256]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.9491 secs, and comparison 17.2807 sec, and warnIfPerfScore > 1.4, and perfScore=1.57827]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.57827}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.1755 secs, and comparison 4.39806 sec, and warnIfPerfScore > 0.65, and perfScore=0.432221]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 13.3749 secs, and comparison 46.6727 sec, and warnIfPerfScore > 4.4, and perfScore=3.48957]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.77 secs, and comparison 4.5634 sec, and warnIfPerfScore > 0.6, and perfScore=0.423715]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.9507 secs, and comparison 4.4365 sec, and warnIfPerfScore > 0.6, and perfScore=0.405133]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.9214 secs, and comparison 4.66726 sec, and warnIfPerfScore > 0.6, and perfScore=0.427349]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.7694 secs, and comparison 9.03228 sec, and warnIfPerfScore > 1.3, and perfScore=0.838701]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.9143 secs, and comparison 13.9292 sec, and warnIfPerfScore > 1.3, and perfScore=1.16912]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 71.8456 secs, and comparison 8.45213 sec, and warnIfPerfScore > 0.3, and perfScore=0.117643]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.8553 secs, and comparison 20.2531 sec, and warnIfPerfScore > 1.5, and perfScore=1.36336]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 17.5306 secs, and comparison 5.44356 sec, and warnIfPerfScore > 0.55, and perfScore=0.310517]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15 secs, and comparison 1.41669 sec, and warnIfPerfScore > 0.1, and perfScore=0.0944462]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.97628 sec, and warnIfPerfScore > 0.5, and perfScore=0.331752]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.291 secs, and comparison 22.8232 sec, and warnIfPerfScore > 2, and perfScore=1.59703]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.5389 secs, and comparison 37.958 sec, and warnIfPerfScore > 3.6, and perfScore=2.61078]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 48 seconds]]]

Succeeded
