Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 31 20:15:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 10.0138 secs, and comparison 5.92954 sec, and warnIfPerfScore > 0.65, and perfScore=0.592138]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.4836 secs, and comparison 3.86357 sec, and warnIfPerfScore > 0.5, and perfScore=0.368536]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 13.0046 secs, and comparison 10.745 sec, and warnIfPerfScore > 1.05, and perfScore=0.826243]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.93787 secs, and comparison 10.8701 sec, and warnIfPerfScore > 1.15, and perfScore=1.0938]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 44.2308 secs, and comparison 3.2236 sec, and warnIfPerfScore > 0.48, and perfScore=0.0728815]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 41.5776 secs, and comparison 3.85248 sec, and warnIfPerfScore > 0.57, and perfScore=0.0926577]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.9907 secs, and comparison 30.9449 sec, and warnIfPerfScore > 2.9, and perfScore=2.21182]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.3383 secs, and comparison 32.6224 sec, and warnIfPerfScore > 2.9, and perfScore=2.2752]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 13.0268 secs, and comparison 218.299 sec, and warnIfPerfScore > 24, and perfScore=16.7577]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.2532 secs, and comparison 15.4415 sec, and warnIfPerfScore > 1.7, and perfScore=1.26021]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 13.8154 secs, and comparison 13.6849 sec, and warnIfPerfScore > 1.5, and perfScore=0.990553]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.8784 secs, and comparison 17.7729 sec, and warnIfPerfScore > 2.1, and perfScore=1.49623]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 16.1611 secs, and comparison 10.1758 sec, and warnIfPerfScore > 1.6, and perfScore=0.629646]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 16.8716 secs, and comparison 2.18757 sec, and warnIfPerfScore > 0.23, and perfScore=0.129661]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.3334 secs, and comparison 18.8171 sec, and warnIfPerfScore > 1.3, and perfScore=1.02639]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 14.658 secs, and comparison 9.04843 sec, and warnIfPerfScore > 1.2, and perfScore=0.617304]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.92839 secs, and comparison 2.45374 sec, and warnIfPerfScore > 0.33, and perfScore=0.247144]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 14.1514 secs, and comparison 53.9509 sec, and warnIfPerfScore > 6, and perfScore=3.81242]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 14.0802 secs, and comparison 8.63826 sec, and warnIfPerfScore > 0.8, and perfScore=0.613506]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.1786 secs, and comparison 15.6272 sec, and warnIfPerfScore > 1.4, and perfScore=1.10217]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.97526 secs, and comparison 4.85297 sec, and warnIfPerfScore > 0.65, and perfScore=0.486501]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 14.4933 secs, and comparison 50.6872 sec, and warnIfPerfScore > 4.4, and perfScore=3.49729]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.1021 secs, and comparison 4.95948 sec, and warnIfPerfScore > 0.6, and perfScore=0.490936]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.4807 secs, and comparison 4.77896 sec, and warnIfPerfScore > 0.6, and perfScore=0.455979]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.6854 secs, and comparison 5.04136 sec, and warnIfPerfScore > 0.6, and perfScore=0.431422]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 11.0278 secs, and comparison 8.25823 sec, and warnIfPerfScore > 1.3, and perfScore=0.748858]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.0714 secs, and comparison 13.5387 sec, and warnIfPerfScore > 1.3, and perfScore=1.12155]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 85.491 secs, and comparison 10.7737 sec, and warnIfPerfScore > 0.3, and perfScore=0.126021]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 16.0991 secs, and comparison 23.709 sec, and warnIfPerfScore > 1.5, and perfScore=1.47269]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.0163 secs, and comparison 4.72233 sec, and warnIfPerfScore > 0.55, and perfScore=0.362802]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.64084 sec, and warnIfPerfScore > 0.1, and perfScore=0.109389]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.109389}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.81925 sec, and warnIfPerfScore > 0.5, and perfScore=0.321283]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.7706 secs, and comparison 16.4693 sec, and warnIfPerfScore > 2, and perfScore=1.04431]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 19.0405 secs, and comparison 49.3483 sec, and warnIfPerfScore > 3.6, and perfScore=2.59176]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 20 minutes, 52 seconds]]]

Succeeded
