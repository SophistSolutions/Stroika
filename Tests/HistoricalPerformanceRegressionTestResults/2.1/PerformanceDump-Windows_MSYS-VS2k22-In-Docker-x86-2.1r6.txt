Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 10:39:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.40935 secs, and comparison 4.34633 sec, and warnIfPerfScore > 0.65, and perfScore=0.586601]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.44103 secs, and comparison 2.9731 sec, and warnIfPerfScore > 0.5, and perfScore=0.399554]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.05224 secs, and comparison 7.8295 sec, and warnIfPerfScore > 1.05, and perfScore=0.864924]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.0728 secs, and comparison 8.15884 sec, and warnIfPerfScore > 1.15, and perfScore=1.15355]
	                 	SharedPtr is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.15 and got 1.15355}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.27798 secs, and comparison 2.47085 sec, and warnIfPerfScore > 0.48, and perfScore=0.298485]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.86028 secs, and comparison 3.35342 sec, and warnIfPerfScore > 0.57, and perfScore=0.378478]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 12.2733 secs, and comparison 23.8037 sec, and warnIfPerfScore > 2.9, and perfScore=1.93946]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.85643 secs, and comparison 23.5903 sec, and warnIfPerfScore > 2.9, and perfScore=2.66363]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.15423 secs, and comparison 152.619 sec, and warnIfPerfScore > 24, and perfScore=18.7165]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.3865 secs, and comparison 13.3331 sec, and warnIfPerfScore > 1.7, and perfScore=1.07642]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.9727 secs, and comparison 11.9808 sec, and warnIfPerfScore > 1.5, and perfScore=1.09187]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.98407 secs, and comparison 15.0035 sec, and warnIfPerfScore > 2.1, and perfScore=1.67002]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.6354 secs, and comparison 8.01195 sec, and warnIfPerfScore > 1.6, and perfScore=0.634089]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.5747 secs, and comparison 1.75415 sec, and warnIfPerfScore > 0.23, and perfScore=0.139498]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.8962 secs, and comparison 28.2602 sec, and warnIfPerfScore > 1.3, and perfScore=1.89715]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.89715}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 22.7413 secs, and comparison 14.5152 sec, and warnIfPerfScore > 1.2, and perfScore=0.638277]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.0411 secs, and comparison 4.25067 sec, and warnIfPerfScore > 0.33, and perfScore=0.249436]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.3794 secs, and comparison 46.5178 sec, and warnIfPerfScore > 6, and perfScore=3.75768]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.2991 secs, and comparison 5.79041 sec, and warnIfPerfScore > 0.8, and perfScore=0.562222]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.1137 secs, and comparison 9.58157 sec, and warnIfPerfScore > 1.4, and perfScore=0.947383]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.4513 secs, and comparison 3.54782 sec, and warnIfPerfScore > 0.65, and perfScore=0.549939]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.2421 secs, and comparison 39.1628 sec, and warnIfPerfScore > 4.4, and perfScore=3.82372]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.89605 secs, and comparison 3.71282 sec, and warnIfPerfScore > 0.6, and perfScore=0.538398]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 7.01545 secs, and comparison 3.73897 sec, and warnIfPerfScore > 0.6, and perfScore=0.532962]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.80642 secs, and comparison 3.70834 sec, and warnIfPerfScore > 0.6, and perfScore=0.54483]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.8384 secs, and comparison 5.04951 sec, and warnIfPerfScore > 1.3, and perfScore=0.738405]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.33388 secs, and comparison 9.0582 sec, and warnIfPerfScore > 1.3, and perfScore=1.23512]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 49.5313 secs, and comparison 6.51405 sec, and warnIfPerfScore > 0.3, and perfScore=0.131514]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.70734 secs, and comparison 13.0102 sec, and warnIfPerfScore > 1.5, and perfScore=1.49416]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.57619 secs, and comparison 3.00081 sec, and warnIfPerfScore > 0.55, and perfScore=0.396085]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.791264 sec, and warnIfPerfScore > 0.1, and perfScore=0.0527509]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.05814 sec, and warnIfPerfScore > 0.5, and perfScore=0.203876]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.49277 secs, and comparison 9.12589 sec, and warnIfPerfScore > 2, and perfScore=1.07455]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.75384 secs, and comparison 30.4403 sec, and warnIfPerfScore > 3.6, and perfScore=3.12085]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 51 seconds]]]

Succeeded
