Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 27 19:1:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.75941 secs, and comparison 4.73291 sec, and warnIfPerfScore > 0.65, and perfScore=0.609958]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.87113 secs, and comparison 2.98918 sec, and warnIfPerfScore > 0.5, and perfScore=0.379765]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.91953 secs, and comparison 8.29765 sec, and warnIfPerfScore > 1.05, and perfScore=0.836496]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.56603 secs, and comparison 8.05188 sec, and warnIfPerfScore > 1.15, and perfScore=1.06421]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.47288 secs, and comparison 2.40252 sec, and warnIfPerfScore > 0.48, and perfScore=0.283554]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.39466 secs, and comparison 2.98635 sec, and warnIfPerfScore > 0.57, and perfScore=0.355745]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.82883 secs, and comparison 22.2292 sec, and warnIfPerfScore > 2.9, and perfScore=2.5178]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.02909 secs, and comparison 22.8933 sec, and warnIfPerfScore > 2.9, and perfScore=2.5355]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.3843 secs, and comparison 160.311 sec, and warnIfPerfScore > 24, and perfScore=19.1204]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.2134 secs, and comparison 11.5726 sec, and warnIfPerfScore > 1.7, and perfScore=1.409]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.3172 secs, and comparison 8.9716 sec, and warnIfPerfScore > 1.5, and perfScore=0.962907]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.16979 secs, and comparison 13.4561 sec, and warnIfPerfScore > 2.1, and perfScore=1.64706]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.7376 secs, and comparison 7.40325 sec, and warnIfPerfScore > 1.6, and perfScore=0.689468]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 11.3326 secs, and comparison 1.45434 sec, and warnIfPerfScore > 0.23, and perfScore=0.128332]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.9954 secs, and comparison 14.3293 sec, and warnIfPerfScore > 1.3, and perfScore=1.02386]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 10.8041 secs, and comparison 6.2183 sec, and warnIfPerfScore > 1.2, and perfScore=0.575552]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.96851 secs, and comparison 1.76113 sec, and warnIfPerfScore > 0.33, and perfScore=0.252727]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.5856 secs, and comparison 42.5758 sec, and warnIfPerfScore > 6, and perfScore=4.02205]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.4066 secs, and comparison 5.88959 sec, and warnIfPerfScore > 0.8, and perfScore=0.56595]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.5322 secs, and comparison 10.1862 sec, and warnIfPerfScore > 1.4, and perfScore=0.967154]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.91296 secs, and comparison 3.72818 sec, and warnIfPerfScore > 0.65, and perfScore=0.539303]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.7061 secs, and comparison 40.1005 sec, and warnIfPerfScore > 4.4, and perfScore=3.74558]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 7.16705 secs, and comparison 3.78076 sec, and warnIfPerfScore > 0.6, and perfScore=0.52752]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 7.13779 secs, and comparison 3.73594 sec, and warnIfPerfScore > 0.6, and perfScore=0.523403]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 7.10287 secs, and comparison 3.73357 sec, and warnIfPerfScore > 0.6, and perfScore=0.525643]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 7.27566 secs, and comparison 5.50683 sec, and warnIfPerfScore > 1.3, and perfScore=0.756884]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.70742 secs, and comparison 9.26162 sec, and warnIfPerfScore > 1.3, and perfScore=1.20165]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 51.4638 secs, and comparison 6.65139 sec, and warnIfPerfScore > 0.3, and perfScore=0.129244]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.50252 secs, and comparison 13.686 sec, and warnIfPerfScore > 1.5, and perfScore=1.44025]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.67263 secs, and comparison 3.08784 sec, and warnIfPerfScore > 0.55, and perfScore=0.402449]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.845658 sec, and warnIfPerfScore > 0.1, and perfScore=0.0563772]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.17363 sec, and warnIfPerfScore > 0.5, and perfScore=0.211575]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.27051 secs, and comparison 9.94864 sec, and warnIfPerfScore > 2, and perfScore=1.07315]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.5277 secs, and comparison 32.0139 sec, and warnIfPerfScore > 3.6, and perfScore=3.04092]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 49 seconds]]]

Succeeded
