Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 10 14:18:8 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.30581 secs, and comparison 4.84794 sec, and warnIfPerfScore > 0.65, and perfScore=1.46649]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 3.20981 secs, and comparison 2.26022 sec, and warnIfPerfScore > 0.5, and perfScore=0.704159]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.66148 secs, and comparison 6.98698 sec, and warnIfPerfScore > 1.05, and perfScore=1.04886]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.0652 secs, and comparison 6.98413 sec, and warnIfPerfScore > 1.15, and perfScore=1.15151]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.51892 secs, and comparison 1.18754 sec, and warnIfPerfScore > 0.48, and perfScore=0.262793]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.53202 secs, and comparison 1.80431 sec, and warnIfPerfScore > 0.57, and perfScore=0.398124]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 5.4632 secs, and comparison 14.8741 sec, and warnIfPerfScore > 2.9, and perfScore=2.7226]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.23755 secs, and comparison 15.0439 sec, and warnIfPerfScore > 2.9, and perfScore=2.07859]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 9.11404 secs, and comparison 49.3215 sec, and warnIfPerfScore > 24, and perfScore=5.41159]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.26031 secs, and comparison 7.65019 sec, and warnIfPerfScore > 1.7, and perfScore=2.34646]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 4.8984 secs, and comparison 3.90082 sec, and warnIfPerfScore > 1.5, and perfScore=0.796345]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.75377 secs, and comparison 9.6338 sec, and warnIfPerfScore > 2.1, and perfScore=3.49841]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.11564 secs, and comparison 2.81035 sec, and warnIfPerfScore > 1.6, and perfScore=0.549364]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 5.3772 secs, and comparison 0.57072 sec, and warnIfPerfScore > 0.23, and perfScore=0.106137]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.35689 secs, and comparison 13.0179 sec, and warnIfPerfScore > 1.3, and perfScore=1.39126]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.86173 secs, and comparison 4.99315 sec, and warnIfPerfScore > 1.2, and perfScore=1.29298]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.91358 secs, and comparison 1.00725 sec, and warnIfPerfScore > 0.33, and perfScore=0.257372]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.59869 secs, and comparison 38.6478 sec, and warnIfPerfScore > 6, and perfScore=10.7394]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.60563 secs, and comparison 4.71369 sec, and warnIfPerfScore > 0.8, and perfScore=1.30731]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.72226 secs, and comparison 6.93143 sec, and warnIfPerfScore > 1.4, and perfScore=1.86215]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 4.04461 secs, and comparison 3.20089 sec, and warnIfPerfScore > 0.65, and perfScore=0.791396]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 4.96127 secs, and comparison 36.5581 sec, and warnIfPerfScore > 4.4, and perfScore=7.36869]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 3.87308 secs, and comparison 3.09731 sec, and warnIfPerfScore > 0.6, and perfScore=0.799703]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 3.92013 secs, and comparison 3.10828 sec, and warnIfPerfScore > 0.6, and perfScore=0.792901]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.86056 secs, and comparison 3.10958 sec, and warnIfPerfScore > 0.6, and perfScore=0.805472]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 3.8646 secs, and comparison 2.7908 sec, and warnIfPerfScore > 1.3, and perfScore=0.722145]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.23989 secs, and comparison 8.30292 sec, and warnIfPerfScore > 1.3, and perfScore=1.95829]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.6702 secs, and comparison 4.17627 sec, and warnIfPerfScore > 0.3, and perfScore=0.145666]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.86537 secs, and comparison 11.4398 sec, and warnIfPerfScore > 1.5, and perfScore=1.29039]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 2.56087 secs, and comparison 2.3337 sec, and warnIfPerfScore > 0.55, and perfScore=0.91129]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.2542 sec, and warnIfPerfScore > 0.1, and perfScore=0.15028]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.91831 sec, and warnIfPerfScore > 0.5, and perfScore=0.127887]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 28 seconds]]]

Succeeded
