Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 21:31:7 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21521 secs, and comparison 4.82038 sec, and warnIfPerfScore > 0.65, and perfScore=1.49924]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.21228 secs, and comparison 2.28864 sec, and warnIfPerfScore > 0.5, and perfScore=0.712465]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25313 secs, and comparison 7.17767 sec, and warnIfPerfScore > 1.05, and perfScore=0.989596]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31896 secs, and comparison 7.17905 sec, and warnIfPerfScore > 1.15, and perfScore=1.13611]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 6.00777 secs, and comparison 1.23064 sec, and warnIfPerfScore > 0.48, and perfScore=0.204842]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.01075 secs, and comparison 1.78612 sec, and warnIfPerfScore > 0.57, and perfScore=0.297154]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.09868 secs, and comparison 15.4368 sec, and warnIfPerfScore > 2.9, and perfScore=2.53118]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.46968 secs, and comparison 16.0674 sec, and warnIfPerfScore > 2.9, and perfScore=2.15102]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 9.53982 secs, and comparison 54.4659 sec, and warnIfPerfScore > 24, and perfScore=5.70932]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.34952 secs, and comparison 7.59833 sec, and warnIfPerfScore > 1.7, and perfScore=1.74693]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 4.81938 secs, and comparison 3.92706 sec, and warnIfPerfScore > 1.5, and perfScore=0.814849]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.73348 secs, and comparison 9.57953 sec, and warnIfPerfScore > 2.1, and perfScore=2.56584]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.21221 secs, and comparison 3.03272 sec, and warnIfPerfScore > 1.6, and perfScore=0.58185]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 5.41971 secs, and comparison 0.680419 sec, and warnIfPerfScore > 0.23, and perfScore=0.125545]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.43 secs, and comparison 12.9075 sec, and warnIfPerfScore > 1.3, and perfScore=1.03842]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.58367 secs, and comparison 5.36942 sec, and warnIfPerfScore > 1.2, and perfScore=1.17142]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.5386 secs, and comparison 1.08559 sec, and warnIfPerfScore > 0.33, and perfScore=0.23919]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 4.39862 secs, and comparison 38.4178 sec, and warnIfPerfScore > 6, and perfScore=8.73405]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.43614 secs, and comparison 5.09368 sec, and warnIfPerfScore > 0.8, and perfScore=1.14822]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.41062 secs, and comparison 7.04713 sec, and warnIfPerfScore > 1.4, and perfScore=1.59776]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.48652 secs, and comparison 3.18364 sec, and warnIfPerfScore > 0.65, and perfScore=0.709601]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.59309 secs, and comparison 36.266 sec, and warnIfPerfScore > 4.4, and perfScore=6.48407]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.503 secs, and comparison 3.07355 sec, and warnIfPerfScore > 0.6, and perfScore=0.682557]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51549 secs, and comparison 3.07289 sec, and warnIfPerfScore > 0.6, and perfScore=0.680522]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51695 secs, and comparison 3.07734 sec, and warnIfPerfScore > 0.6, and perfScore=0.681285]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.50524 secs, and comparison 2.80353 sec, and warnIfPerfScore > 1.3, and perfScore=0.622282]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.69187 secs, and comparison 8.2115 sec, and warnIfPerfScore > 1.3, and perfScore=1.75016]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.727 secs, and comparison 4.19851 sec, and warnIfPerfScore > 0.3, and perfScore=0.141236]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.23376 secs, and comparison 11.9123 sec, and warnIfPerfScore > 1.5, and perfScore=1.29008]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 4.63175 secs, and comparison 2.60599 sec, and warnIfPerfScore > 0.55, and perfScore=0.562636]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 2.01648 sec, and warnIfPerfScore > 0.1, and perfScore=0.134432]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94699 sec, and warnIfPerfScore > 0.5, and perfScore=0.1298]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 58 seconds]]]

Succeeded
