Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 22:18:9 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.31337 secs, and comparison 4.26223 sec, and warnIfPerfScore > 0.65, and perfScore=0.802171]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.22048 secs, and comparison 2.4605 sec, and warnIfPerfScore > 0.5, and perfScore=0.471317]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.70549 secs, and comparison 6.96736 sec, and warnIfPerfScore > 1.05, and perfScore=0.904207]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.32459 secs, and comparison 6.90955 sec, and warnIfPerfScore > 1.15, and perfScore=1.09249]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.89264 secs, and comparison 2.0807 sec, and warnIfPerfScore > 0.48, and perfScore=0.263625]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.70641 secs, and comparison 2.63622 sec, and warnIfPerfScore > 0.57, and perfScore=0.342081]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.22119 secs, and comparison 18.0804 sec, and warnIfPerfScore > 2.9, and perfScore=2.90625]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.6307 secs, and comparison 17.6665 sec, and warnIfPerfScore > 2.9, and perfScore=2.66435]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.6293 secs, and comparison 127.387 sec, and warnIfPerfScore > 24, and perfScore=22.6292]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.30221 secs, and comparison 9.61632 sec, and warnIfPerfScore > 1.7, and perfScore=1.81365]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.59022 secs, and comparison 5.20234 sec, and warnIfPerfScore > 1.5, and perfScore=0.930615]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.0493 secs, and comparison 11.409 sec, and warnIfPerfScore > 2.1, and perfScore=2.25952]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.45651 secs, and comparison 3.8126 sec, and warnIfPerfScore > 1.6, and perfScore=0.590504]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 6.81505 secs, and comparison 0.669913 sec, and warnIfPerfScore > 0.23, and perfScore=0.098299]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.7991 secs, and comparison 12.3879 sec, and warnIfPerfScore > 1.3, and perfScore=1.0499]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.23812 secs, and comparison 5.02262 sec, and warnIfPerfScore > 1.2, and perfScore=0.609681]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.5002 secs, and comparison 1.78409 sec, and warnIfPerfScore > 0.33, and perfScore=0.237872]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.86905 secs, and comparison 38.4315 sec, and warnIfPerfScore > 6, and perfScore=4.88389]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.93248 secs, and comparison 4.86207 sec, and warnIfPerfScore > 0.8, and perfScore=0.612932]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.91531 secs, and comparison 7.39716 sec, and warnIfPerfScore > 1.4, and perfScore=0.934538]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.45161 secs, and comparison 3.38945 sec, and warnIfPerfScore > 0.65, and perfScore=0.454861]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.40908 secs, and comparison 35.6629 sec, and warnIfPerfScore > 4.4, and perfScore=4.241]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.3187 secs, and comparison 3.27899 sec, and warnIfPerfScore > 0.6, and perfScore=0.448029]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.3311 secs, and comparison 3.29557 sec, and warnIfPerfScore > 0.6, and perfScore=0.449533]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.42702 secs, and comparison 3.33934 sec, and warnIfPerfScore > 0.6, and perfScore=0.44962]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.36985 secs, and comparison 4.93377 sec, and warnIfPerfScore > 1.3, and perfScore=0.669453]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.96403 secs, and comparison 8.4252 sec, and warnIfPerfScore > 1.3, and perfScore=1.05791]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 37.6474 secs, and comparison 4.97051 sec, and warnIfPerfScore > 0.3, and perfScore=0.132028]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.65897 secs, and comparison 9.28288 sec, and warnIfPerfScore > 1.5, and perfScore=1.64038]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.81137 secs, and comparison 2.59583 sec, and warnIfPerfScore > 0.55, and perfScore=0.446681]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.573705 sec, and warnIfPerfScore > 0.1, and perfScore=0.038247]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.75411 sec, and warnIfPerfScore > 0.5, and perfScore=0.183608]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.93096 secs, and comparison 7.36155 sec, and warnIfPerfScore > 2, and perfScore=1.24121]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.32384 secs, and comparison 13.5828 sec, and warnIfPerfScore > 3.6, and perfScore=1.8546]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 48 seconds]]]

Succeeded
