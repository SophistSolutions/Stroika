Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 21 16:9:55 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.6958 secs, and comparison 5.71481 sec, and warnIfPerfScore > 0.62, and perfScore=0.488622]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 16.1932 secs, and comparison 4.7495 sec, and warnIfPerfScore > 0.5, and perfScore=0.293302]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 14.3672 secs, and comparison 10.1009 sec, and warnIfPerfScore > 1.05, and perfScore=0.70305]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.34422 secs, and comparison 9.5047 sec, and warnIfPerfScore > 1.15, and perfScore=1.13908]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.6229 secs, and comparison 3.85286 sec, and warnIfPerfScore > 0.48, and perfScore=0.305229]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.5666 secs, and comparison 4.40021 sec, and warnIfPerfScore > 0.57, and perfScore=0.282671]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 20.0485 secs, and comparison 39.9477 sec, and warnIfPerfScore > 2.9, and perfScore=1.99255]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.0759 secs, and comparison 30.1981 sec, and warnIfPerfScore > 2.9, and perfScore=2.00306]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 16.7871 secs, and comparison 137.295 sec, and warnIfPerfScore > 9.7, and perfScore=8.17863]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 17.6486 secs, and comparison 16.8009 sec, and warnIfPerfScore > 1.6, and perfScore=0.951967]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 13.6735 secs, and comparison 13.5529 sec, and warnIfPerfScore > 1.5, and perfScore=0.991177]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 17.0248 secs, and comparison 16.899 sec, and warnIfPerfScore > 2.1, and perfScore=0.992613]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 15.686 secs, and comparison 12.9116 sec, and warnIfPerfScore > 1.3, and perfScore=0.823123]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 22.6651 secs, and comparison 3.18918 sec, and warnIfPerfScore > 0.23, and perfScore=0.140709]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.5265 secs, and comparison 20.6696 sec, and warnIfPerfScore > 1.3, and perfScore=1.00697]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 14.2963 secs, and comparison 11.5487 sec, and warnIfPerfScore > 1.2, and perfScore=0.807812]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.7303 secs, and comparison 2.42178 sec, and warnIfPerfScore > 0.33, and perfScore=0.225695]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 9.55761 secs, and comparison 45.5662 sec, and warnIfPerfScore > 6, and perfScore=4.76753]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 15.8228 secs, and comparison 12.2283 sec, and warnIfPerfScore > 0.8, and perfScore=0.772832]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 18.1006 secs, and comparison 28.7343 sec, and warnIfPerfScore > 0.9, and perfScore=1.58748]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.9 and got 1.58748}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 16.6356 secs, and comparison 5.85796 sec, and warnIfPerfScore > 0.5, and perfScore=0.352135]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 15.7569 secs, and comparison 53.8043 sec, and warnIfPerfScore > 4.4, and perfScore=3.41466]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.77324 secs, and comparison 7.36852 sec, and warnIfPerfScore > 0.6, and perfScore=0.753948]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.753948}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 100.223 secs, and comparison 13.2913 sec, and warnIfPerfScore > 0.2, and perfScore=0.132618]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.5427 secs, and comparison 20.4166 sec, and warnIfPerfScore > 1.5, and perfScore=1.40391]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.8375 secs, and comparison 5.30856 sec, and warnIfPerfScore > 0.55, and perfScore=0.315282]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 15 secs, and comparison 1.27167 sec, and warnIfPerfScore > 0.25, and perfScore=0.084778]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.91336 sec, and warnIfPerfScore > 0.5, and perfScore=0.260891]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.458 secs, and comparison 30.1288 sec, and warnIfPerfScore > 2, and perfScore=2.08388]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2 and got 2.08388}}}

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 16.9802 secs, and comparison 89.1306 sec, and warnIfPerfScore > 3.1, and perfScore=5.24908]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 5.24908}}}

[[[Tests took: 19 minutes, 48 seconds]]]

Succeeded
