Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep  6 11:57:50 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 5.43506 secs, and comparison 4.61986 sec, and warnIfPerfScore > 0.62, and perfScore=0.850012]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.37007 secs, and comparison 2.95451 sec, and warnIfPerfScore > 0.5, and perfScore=0.55018]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.82891 secs, and comparison 7.04062 sec, and warnIfPerfScore > 1.05, and perfScore=1.031]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.76303 secs, and comparison 3.52757 sec, and warnIfPerfScore > 0.48, and perfScore=0.93743]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.00353 secs, and comparison 4.09524 sec, and warnIfPerfScore > 0.57, and perfScore=0.818469]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 3.3805 secs, and comparison 19.3161 sec, and warnIfPerfScore > 2.9, and perfScore=5.71399]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 4.35939 secs, and comparison 21.7739 sec, and warnIfPerfScore > 2.9, and perfScore=4.99472]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.71085 secs, and comparison 64.9875 sec, and warnIfPerfScore > 9.7, and perfScore=11.3797]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.97627 secs, and comparison 10.5848 sec, and warnIfPerfScore > 1.6, and perfScore=2.12705]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 6.12652 secs, and comparison 5.45316 sec, and warnIfPerfScore > 1.5, and perfScore=0.890091]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.94919 secs, and comparison 10.3069 sec, and warnIfPerfScore > 2.1, and perfScore=3.49484]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 5.00761 secs, and comparison 3.50326 sec, and warnIfPerfScore > 1.3, and perfScore=0.699587]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.38313 secs, and comparison 1.57803 sec, and warnIfPerfScore > 0.23, and perfScore=0.360023]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.51551 secs, and comparison 5.07148 sec, and warnIfPerfScore > 1.3, and perfScore=1.12312]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.33908 secs, and comparison 7.91566 sec, and warnIfPerfScore > 1.2, and perfScore=2.37061]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 17.8202 secs, and comparison 2.07925 sec, and warnIfPerfScore > 0.33, and perfScore=0.116679]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.86059 secs, and comparison 42.5154 sec, and warnIfPerfScore > 6, and perfScore=14.8624]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.0102 secs, and comparison 3.85158 sec, and warnIfPerfScore > 0.5, and perfScore=0.349821]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 4.56362 secs, and comparison 37.4348 sec, and warnIfPerfScore > 4.4, and perfScore=8.20287]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.2408 secs, and comparison 3.75574 sec, and warnIfPerfScore > 0.6, and perfScore=0.263731]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.46619 secs, and comparison 14.782 sec, and warnIfPerfScore > 1.5, and perfScore=1.97986]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.75096 secs, and comparison 2.94122 sec, and warnIfPerfScore > 0.55, and perfScore=0.379465]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.074
	DETAILS:         	[baseline test 15 secs, and comparison 1.11262 sec, and warnIfPerfScore > 0.25, and perfScore=0.0741747]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.81433 sec, and warnIfPerfScore > 0.5, and perfScore=0.254289]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 9 seconds]]]

Succeeded
