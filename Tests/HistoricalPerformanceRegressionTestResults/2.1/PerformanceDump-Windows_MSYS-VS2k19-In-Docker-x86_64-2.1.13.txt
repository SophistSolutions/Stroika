Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr 10 7:45:57 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.67371 secs, and comparison 4.61108 sec, and warnIfPerfScore > 0.65, and perfScore=0.81271]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.80295 secs, and comparison 2.72773 sec, and warnIfPerfScore > 0.5, and perfScore=0.47006]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.43549 secs, and comparison 7.38373 sec, and warnIfPerfScore > 1.05, and perfScore=0.875317]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.68842 secs, and comparison 7.66087 sec, and warnIfPerfScore > 1.15, and perfScore=0.996416]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.4324 secs, and comparison 2.2775 sec, and warnIfPerfScore > 0.48, and perfScore=0.21831]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.1745 secs, and comparison 2.91607 sec, and warnIfPerfScore > 0.57, and perfScore=0.286606]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.11193 secs, and comparison 20.295 sec, and warnIfPerfScore > 2.9, and perfScore=2.85365]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.41386 secs, and comparison 19.3516 sec, and warnIfPerfScore > 2.9, and perfScore=2.61019]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 5.95099 secs, and comparison 131.962 sec, and warnIfPerfScore > 24, and perfScore=22.1748]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.35916 secs, and comparison 10.3364 sec, and warnIfPerfScore > 1.7, and perfScore=1.92873]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 6.40784 secs, and comparison 5.78597 sec, and warnIfPerfScore > 1.5, and perfScore=0.902952]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 4.96011 secs, and comparison 12.4011 sec, and warnIfPerfScore > 2.1, and perfScore=2.50017]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.2992 secs, and comparison 4.44679 sec, and warnIfPerfScore > 1.6, and perfScore=0.361552]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 13.0949 secs, and comparison 0.736781 sec, and warnIfPerfScore > 0.23, and perfScore=0.0562646]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 11.9595 secs, and comparison 11.572 sec, and warnIfPerfScore > 1.3, and perfScore=0.967601]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 12.0529 secs, and comparison 5.3875 sec, and warnIfPerfScore > 1.2, and perfScore=0.44699]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.91123 secs, and comparison 2.06288 sec, and warnIfPerfScore > 0.33, and perfScore=0.260754]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.1187 secs, and comparison 38.4626 sec, and warnIfPerfScore > 6, and perfScore=3.80115]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.71135 secs, and comparison 5.28158 sec, and warnIfPerfScore > 0.8, and perfScore=0.684909]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.39217 secs, and comparison 7.94813 sec, and warnIfPerfScore > 1.4, and perfScore=0.947088]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.85373 secs, and comparison 3.44104 sec, and warnIfPerfScore > 0.65, and perfScore=0.438141]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 8.92559 secs, and comparison 35.9349 sec, and warnIfPerfScore > 4.4, and perfScore=4.02605]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.18809 secs, and comparison 3.23773 sec, and warnIfPerfScore > 0.6, and perfScore=0.39542]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.59735 secs, and comparison 3.36218 sec, and warnIfPerfScore > 0.6, and perfScore=0.391072]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.42489 secs, and comparison 3.22599 sec, and warnIfPerfScore > 0.6, and perfScore=0.382912]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.79575 secs, and comparison 5.15678 sec, and warnIfPerfScore > 1.3, and perfScore=0.661486]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.10059 secs, and comparison 8.133 sec, and warnIfPerfScore > 1.3, and perfScore=0.893678]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 38.4911 secs, and comparison 5.33737 sec, and warnIfPerfScore > 0.3, and perfScore=0.138665]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.26871 secs, and comparison 9.80771 sec, and warnIfPerfScore > 1.5, and perfScore=1.56455]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.98847 secs, and comparison 2.92371 sec, and warnIfPerfScore > 0.55, and perfScore=0.488222]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.044
	DETAILS:         	[baseline test 15 secs, and comparison 0.664754 sec, and warnIfPerfScore > 0.1, and perfScore=0.0443169]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.93858 sec, and warnIfPerfScore > 0.5, and perfScore=0.195905]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.76983 secs, and comparison 18.8681 sec, and warnIfPerfScore > 2, and perfScore=2.78708]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.19213 secs, and comparison 14.6294 sec, and warnIfPerfScore > 3.6, and perfScore=1.78578]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 59 seconds]]]

Succeeded
