Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 19 21:50:42 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.34349 secs, and comparison 4.20677 sec, and warnIfPerfScore > 0.65, and perfScore=0.78727]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.33771 secs, and comparison 2.54437 sec, and warnIfPerfScore > 0.5, and perfScore=0.476678]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.65254 secs, and comparison 6.90574 sec, and warnIfPerfScore > 1.05, and perfScore=0.902412]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.27715 secs, and comparison 6.91904 sec, and warnIfPerfScore > 1.15, and perfScore=1.10226]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.35385 secs, and comparison 2.08998 sec, and warnIfPerfScore > 0.48, and perfScore=0.223435]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.14382 secs, and comparison 2.71374 sec, and warnIfPerfScore > 0.57, and perfScore=0.296784]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.19546 secs, and comparison 17.8889 sec, and warnIfPerfScore > 2.9, and perfScore=2.88741]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.97744 secs, and comparison 17.9133 sec, and warnIfPerfScore > 2.9, and perfScore=2.56732]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.67342 secs, and comparison 132.673 sec, and warnIfPerfScore > 24, and perfScore=23.3849]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.46655 secs, and comparison 9.59629 sec, and warnIfPerfScore > 1.7, and perfScore=1.75546]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.86297 secs, and comparison 5.57491 sec, and warnIfPerfScore > 1.5, and perfScore=0.950868]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.91563 secs, and comparison 11.5833 sec, and warnIfPerfScore > 2.1, and perfScore=2.35642]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 6.8285 secs, and comparison 4.45875 sec, and warnIfPerfScore > 1.6, and perfScore=0.652962]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 7.16132 secs, and comparison 0.669787 sec, and warnIfPerfScore > 0.23, and perfScore=0.0935284]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1071 secs, and comparison 11.4833 sec, and warnIfPerfScore > 1.3, and perfScore=1.03387]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.03004 secs, and comparison 4.90115 sec, and warnIfPerfScore > 1.2, and perfScore=0.610352]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.75871 secs, and comparison 1.80338 sec, and warnIfPerfScore > 0.33, and perfScore=0.232433]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.70965 secs, and comparison 37.3948 sec, and warnIfPerfScore > 6, and perfScore=4.85038]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.71805 secs, and comparison 4.70329 sec, and warnIfPerfScore > 0.8, and perfScore=0.609388]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.70545 secs, and comparison 7.34077 sec, and warnIfPerfScore > 1.4, and perfScore=0.952673]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.74911 secs, and comparison 3.27651 sec, and warnIfPerfScore > 0.65, and perfScore=0.422824]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.24954 secs, and comparison 34.8978 sec, and warnIfPerfScore > 4.4, and perfScore=4.23028]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.69437 secs, and comparison 3.22701 sec, and warnIfPerfScore > 0.6, and perfScore=0.419399]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.73853 secs, and comparison 3.22473 sec, and warnIfPerfScore > 0.6, and perfScore=0.416711]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.79139 secs, and comparison 3.24698 sec, and warnIfPerfScore > 0.6, and perfScore=0.416739]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.79867 secs, and comparison 4.83419 sec, and warnIfPerfScore > 1.3, and perfScore=0.619874]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.36058 secs, and comparison 8.05297 sec, and warnIfPerfScore > 1.3, and perfScore=0.963207]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 36.3226 secs, and comparison 5.51964 sec, and warnIfPerfScore > 0.3, and perfScore=0.151962]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.57759 secs, and comparison 9.1859 sec, and warnIfPerfScore > 1.5, and perfScore=1.64693]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.89735 secs, and comparison 2.6843 sec, and warnIfPerfScore > 0.55, and perfScore=0.455171]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.573933 sec, and warnIfPerfScore > 0.1, and perfScore=0.0382622]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.73823 sec, and warnIfPerfScore > 0.5, and perfScore=0.182549]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.1504 secs, and comparison 12.2976 sec, and warnIfPerfScore > 2, and perfScore=1.99948]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.47922 secs, and comparison 13.8346 sec, and warnIfPerfScore > 3.6, and perfScore=1.84974]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 1 second]]]

Succeeded
