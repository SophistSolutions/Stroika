Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 28 14::37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.32019 secs, and comparison 4.43965 sec, and warnIfPerfScore > 0.65, and perfScore=0.834491]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.51176 secs, and comparison 2.55673 sec, and warnIfPerfScore > 0.5, and perfScore=0.463869]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.07979 secs, and comparison 7.33321 sec, and warnIfPerfScore > 1.05, and perfScore=0.907599]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.69622 secs, and comparison 7.31179 sec, and warnIfPerfScore > 1.15, and perfScore=1.09193]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.54058 secs, and comparison 2.26527 sec, and warnIfPerfScore > 0.48, and perfScore=0.265236]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.54303 secs, and comparison 2.82012 sec, and warnIfPerfScore > 0.57, and perfScore=0.330108]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.89854 secs, and comparison 19.686 sec, and warnIfPerfScore > 2.9, and perfScore=2.85365]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.98821 secs, and comparison 19.5911 sec, and warnIfPerfScore > 2.9, and perfScore=2.80345]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.04851 secs, and comparison 132.487 sec, and warnIfPerfScore > 24, and perfScore=21.904]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.82515 secs, and comparison 10.3937 sec, and warnIfPerfScore > 1.7, and perfScore=1.78427]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.29375 secs, and comparison 5.8845 sec, and warnIfPerfScore > 1.5, and perfScore=0.934975]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.86137 secs, and comparison 12.5517 sec, and warnIfPerfScore > 2.1, and perfScore=2.14142]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 7.71183 secs, and comparison 4.3678 sec, and warnIfPerfScore > 1.6, and perfScore=0.566377]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 8.08284 secs, and comparison 0.739532 sec, and warnIfPerfScore > 0.23, and perfScore=0.091494]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.6461 secs, and comparison 13.0486 sec, and warnIfPerfScore > 1.3, and perfScore=1.03183]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.42915 secs, and comparison 5.99276 sec, and warnIfPerfScore > 1.2, and perfScore=0.635557]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.6257 secs, and comparison 2.19851 sec, and warnIfPerfScore > 0.33, and perfScore=0.2284]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.90848 secs, and comparison 41.4162 sec, and warnIfPerfScore > 6, and perfScore=4.64908]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.9057 secs, and comparison 5.67145 sec, and warnIfPerfScore > 0.8, and perfScore=0.636834]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.75661 secs, and comparison 8.19343 sec, and warnIfPerfScore > 1.4, and perfScore=0.935685]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.7475 secs, and comparison 3.65715 sec, and warnIfPerfScore > 0.65, and perfScore=0.375189]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.59074 secs, and comparison 38.4138 sec, and warnIfPerfScore > 4.4, and perfScore=4.0053]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.78449 secs, and comparison 3.61631 sec, and warnIfPerfScore > 0.6, and perfScore=0.369596]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.55224 secs, and comparison 3.58818 sec, and warnIfPerfScore > 0.6, and perfScore=0.375638]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.63037 secs, and comparison 3.6136 sec, and warnIfPerfScore > 0.6, and perfScore=0.375229]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.30874 secs, and comparison 5.92283 sec, and warnIfPerfScore > 1.3, and perfScore=0.636266]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.3709 secs, and comparison 9.60147 sec, and warnIfPerfScore > 1.3, and perfScore=0.925809]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 43.0931 secs, and comparison 6.75543 sec, and warnIfPerfScore > 0.3, and perfScore=0.156764]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.38442 secs, and comparison 10.3949 sec, and warnIfPerfScore > 1.5, and perfScore=1.62817]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.81554 secs, and comparison 3.43122 sec, and warnIfPerfScore > 0.55, and perfScore=0.503441]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.646431 sec, and warnIfPerfScore > 0.1, and perfScore=0.0430954]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.13369 sec, and warnIfPerfScore > 0.5, and perfScore=0.208913]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.91239 secs, and comparison 14.0297 sec, and warnIfPerfScore > 2, and perfScore=2.02964]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.32219 secs, and comparison 16.4227 sec, and warnIfPerfScore > 3.6, and perfScore=1.97337]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 8 seconds]]]

Succeeded
