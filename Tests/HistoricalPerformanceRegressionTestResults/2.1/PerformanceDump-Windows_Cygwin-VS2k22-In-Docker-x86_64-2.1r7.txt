Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr  1 13:19:59 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.09307 secs, and comparison 4.6356 sec, and warnIfPerfScore > 0.65, and perfScore=0.760799]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.08295 secs, and comparison 2.70474 sec, and warnIfPerfScore > 0.5, and perfScore=0.444643]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.07178 secs, and comparison 7.94064 sec, and warnIfPerfScore > 1.05, and perfScore=0.875312]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.24044 secs, and comparison 7.88448 sec, and warnIfPerfScore > 1.15, and perfScore=1.08895]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.5649 secs, and comparison 2.40528 sec, and warnIfPerfScore > 0.48, and perfScore=0.251469]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.43266 secs, and comparison 3.04256 sec, and warnIfPerfScore > 0.57, and perfScore=0.322556]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.70603 secs, and comparison 21.0005 sec, and warnIfPerfScore > 2.9, and perfScore=2.7252]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.60105 secs, and comparison 20.4947 sec, and warnIfPerfScore > 2.9, and perfScore=2.38281]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.62255 secs, and comparison 152.712 sec, and warnIfPerfScore > 24, and perfScore=23.0594]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.73349 secs, and comparison 10.8475 sec, and warnIfPerfScore > 1.7, and perfScore=1.61098]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.04841 secs, and comparison 6.51956 sec, and warnIfPerfScore > 1.5, and perfScore=0.924968]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.25229 secs, and comparison 12.957 sec, and warnIfPerfScore > 2.1, and perfScore=2.07236]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.82215 secs, and comparison 4.53798 sec, and warnIfPerfScore > 1.6, and perfScore=0.580144]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 8.14578 secs, and comparison 0.817945 sec, and warnIfPerfScore > 0.23, and perfScore=0.100413]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.1244 secs, and comparison 13.8056 sec, and warnIfPerfScore > 1.3, and perfScore=1.0519]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.48441 secs, and comparison 5.92832 sec, and warnIfPerfScore > 1.2, and perfScore=0.625059]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.96483 secs, and comparison 2.05676 sec, and warnIfPerfScore > 0.33, and perfScore=0.229426]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.11173 secs, and comparison 42.0843 sec, and warnIfPerfScore > 6, and perfScore=4.6187]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.14062 secs, and comparison 5.76661 sec, and warnIfPerfScore > 0.8, and perfScore=0.630878]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.09146 secs, and comparison 8.90442 sec, and warnIfPerfScore > 1.4, and perfScore=0.979427]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.95031 secs, and comparison 3.75878 sec, and warnIfPerfScore > 0.65, and perfScore=0.419961]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.70229 secs, and comparison 39.2242 sec, and warnIfPerfScore > 4.4, and perfScore=4.04278]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.65373 secs, and comparison 3.67405 sec, and warnIfPerfScore > 0.6, and perfScore=0.424563]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.75765 secs, and comparison 3.65323 sec, and warnIfPerfScore > 0.6, and perfScore=0.417148]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.81709 secs, and comparison 3.65653 sec, and warnIfPerfScore > 0.6, and perfScore=0.414709]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.75092 secs, and comparison 5.8175 sec, and warnIfPerfScore > 1.3, and perfScore=0.664788]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.49415 secs, and comparison 9.71303 sec, and warnIfPerfScore > 1.3, and perfScore=1.02305]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.1184 secs, and comparison 5.81842 sec, and warnIfPerfScore > 0.3, and perfScore=0.128959]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.10171 secs, and comparison 11.2085 sec, and warnIfPerfScore > 1.5, and perfScore=1.57829]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.3407 secs, and comparison 3.25697 sec, and warnIfPerfScore > 0.55, and perfScore=0.390491]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.047
	DETAILS:         	[baseline test 15 secs, and comparison 0.710253 sec, and warnIfPerfScore > 0.1, and perfScore=0.0473502]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.13385 sec, and warnIfPerfScore > 0.5, and perfScore=0.208923]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.33826 secs, and comparison 8.45102 sec, and warnIfPerfScore > 2, and perfScore=1.01352]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.71688 secs, and comparison 15.9494 sec, and warnIfPerfScore > 3.6, and perfScore=1.64141]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 43 seconds]]]

Succeeded
