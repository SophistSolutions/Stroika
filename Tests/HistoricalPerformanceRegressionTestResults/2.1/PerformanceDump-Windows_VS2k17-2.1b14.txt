Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Dec 21 4:28:37 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.4315 secs, and comparison 4.6552 sec, and warnIfPerfScore > 0.62, and perfScore=0.446263]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.4447 secs, and comparison 2.88905 sec, and warnIfPerfScore > 0.5, and perfScore=0.276606]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 10.2698 secs, and comparison 8.92607 sec, and warnIfPerfScore > 1.05, and perfScore=0.869155]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.86409 secs, and comparison 9.03618 sec, and warnIfPerfScore > 1.15, and perfScore=1.14904]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.515 secs, and comparison 3.30971 sec, and warnIfPerfScore > 0.48, and perfScore=0.314761]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.8106 secs, and comparison 3.84596 sec, and warnIfPerfScore > 0.57, and perfScore=0.355759]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.1484 secs, and comparison 28.0584 sec, and warnIfPerfScore > 2.9, and perfScore=2.30964]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.3986 secs, and comparison 28.7898 sec, and warnIfPerfScore > 2.9, and perfScore=2.32203]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 11.432 secs, and comparison 95.2432 sec, and warnIfPerfScore > 9.7, and perfScore=8.33127]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.7272 secs, and comparison 14.8491 sec, and warnIfPerfScore > 1.6, and perfScore=1.26621]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.2126 secs, and comparison 12.9055 sec, and warnIfPerfScore > 1.5, and perfScore=0.976761]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.10999 secs, and comparison 16.1478 sec, and warnIfPerfScore > 2.1, and perfScore=1.77254]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 12.6023 secs, and comparison 9.0614 sec, and warnIfPerfScore > 1.3, and perfScore=0.719026]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 13.177 secs, and comparison 1.51306 sec, and warnIfPerfScore > 0.23, and perfScore=0.114826]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5214 secs, and comparison 13.0428 sec, and warnIfPerfScore > 1.3, and perfScore=1.04164]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 10.2314 secs, and comparison 6.83331 sec, and warnIfPerfScore > 1.2, and perfScore=0.667874]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.19654 secs, and comparison 2.31805 sec, and warnIfPerfScore > 0.33, and perfScore=0.252057]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.85016 secs, and comparison 44.3152 sec, and warnIfPerfScore > 6, and perfScore=4.49893]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.87263 secs, and comparison 6.61721 sec, and warnIfPerfScore > 0.8, and perfScore=0.670258]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.87983 secs, and comparison 14.937 sec, and warnIfPerfScore > 0.9, and perfScore=1.51187]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.9 and got 1.51187}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.20102 secs, and comparison 3.94418 sec, and warnIfPerfScore > 0.5, and perfScore=0.428667]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 10.713 secs, and comparison 64.136 sec, and warnIfPerfScore > 4.4, and perfScore=5.98674]
	                 	Collection<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 4.4 and got 5.98674}}}

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.21023 secs, and comparison 7.96546 sec, and warnIfPerfScore > 0.6, and perfScore=0.86485]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.86485}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 61.7536 secs, and comparison 6.98052 sec, and warnIfPerfScore > 0.2, and perfScore=0.113038]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.2673 secs, and comparison 17.6719 sec, and warnIfPerfScore > 1.5, and perfScore=1.44057]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.0671 secs, and comparison 4.41783 sec, and warnIfPerfScore > 0.55, and perfScore=0.314055]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43459 sec, and warnIfPerfScore > 0.25, and perfScore=0.0956395]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.31346 sec, and warnIfPerfScore > 0.5, and perfScore=0.287564]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.5792 secs, and comparison 18.5302 sec, and warnIfPerfScore > 2, and perfScore=1.6003]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.3113 secs, and comparison 32.1676 sec, and warnIfPerfScore > 3.1, and perfScore=2.61285]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 10 seconds]]]

Succeeded
