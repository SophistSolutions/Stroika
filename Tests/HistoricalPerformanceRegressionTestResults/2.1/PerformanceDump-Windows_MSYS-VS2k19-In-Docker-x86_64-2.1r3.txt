Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb 15 2:30:13 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 5.60818 secs, and comparison 4.98042 sec, and warnIfPerfScore > 0.65, and perfScore=0.888064]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.54902 secs, and comparison 2.86804 sec, and warnIfPerfScore > 0.5, and perfScore=0.437934]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.91717 secs, and comparison 8.37038 sec, and warnIfPerfScore > 1.05, and perfScore=1.05724]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.64761 secs, and comparison 8.15949 sec, and warnIfPerfScore > 1.15, and perfScore=1.22743]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.11258 secs, and comparison 2.53418 sec, and warnIfPerfScore > 0.48, and perfScore=0.312377]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.83767 secs, and comparison 3.45386 sec, and warnIfPerfScore > 0.57, and perfScore=0.505123]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.30961 secs, and comparison 21.0398 sec, and warnIfPerfScore > 2.9, and perfScore=2.87837]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.49191 secs, and comparison 20.1183 sec, and warnIfPerfScore > 2.9, and perfScore=3.09898]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.31728 secs, and comparison 149.163 sec, and warnIfPerfScore > 24, and perfScore=17.934]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.30197 secs, and comparison 10.667 sec, and warnIfPerfScore > 1.7, and perfScore=2.01189]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.38153 secs, and comparison 8.39362 sec, and warnIfPerfScore > 1.5, and perfScore=1.3153]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 4.80431 secs, and comparison 13.193 sec, and warnIfPerfScore > 2.1, and perfScore=2.74607]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 8.69352 secs, and comparison 4.58711 sec, and warnIfPerfScore > 1.6, and perfScore=0.527647]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 8.47985 secs, and comparison 0.66716 sec, and warnIfPerfScore > 0.23, and perfScore=0.078676]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.058 secs, and comparison 12.3163 sec, and warnIfPerfScore > 1.3, and perfScore=1.02142]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.59413 secs, and comparison 7.01785 sec, and warnIfPerfScore > 1.2, and perfScore=0.731473]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.8916 secs, and comparison 1.96471 sec, and warnIfPerfScore > 0.33, and perfScore=0.165219]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.64106 secs, and comparison 41.4444 sec, and warnIfPerfScore > 6, and perfScore=4.29874]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.60932 secs, and comparison 5.07114 sec, and warnIfPerfScore > 0.8, and perfScore=0.527731]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.23997 secs, and comparison 7.93991 sec, and warnIfPerfScore > 1.4, and perfScore=0.963585]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.54885 secs, and comparison 3.44724 sec, and warnIfPerfScore > 0.65, and perfScore=0.456658]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 8.71505 secs, and comparison 38.9253 sec, and warnIfPerfScore > 4.4, and perfScore=4.46645]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.36876 secs, and comparison 3.87008 sec, and warnIfPerfScore > 0.6, and perfScore=0.413084]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.01461 secs, and comparison 3.80948 sec, and warnIfPerfScore > 0.6, and perfScore=0.42259]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.5568 secs, and comparison 3.41109 sec, and warnIfPerfScore > 0.6, and perfScore=0.29516]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.47788 secs, and comparison 4.82157 sec, and warnIfPerfScore > 1.3, and perfScore=0.644777]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 9.1168 secs, and comparison 8.5178 sec, and warnIfPerfScore > 1.3, and perfScore=0.934298]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 40.686 secs, and comparison 7.35985 sec, and warnIfPerfScore > 0.3, and perfScore=0.180894]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.83069 secs, and comparison 10.3625 sec, and warnIfPerfScore > 1.5, and perfScore=1.51705]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.90627 secs, and comparison 3.34995 sec, and warnIfPerfScore > 0.55, and perfScore=0.567185]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.0142 sec, and warnIfPerfScore > 0.1, and perfScore=0.0676132]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.91943 sec, and warnIfPerfScore > 0.5, and perfScore=0.194629]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.08957 secs, and comparison 7.62029 sec, and warnIfPerfScore > 2, and perfScore=1.25137]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.49849 secs, and comparison 13.4142 sec, and warnIfPerfScore > 3.6, and perfScore=1.78892]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 31 seconds]]]

Succeeded
