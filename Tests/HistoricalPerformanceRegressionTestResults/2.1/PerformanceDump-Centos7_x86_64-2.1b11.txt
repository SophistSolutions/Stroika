Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 21 22:35:38 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.6827 secs, and comparison 6.06901 sec, and warnIfPerfScore > 0.62, and perfScore=0.908168]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.84489 secs, and comparison 3.57172 sec, and warnIfPerfScore > 0.5, and perfScore=0.521808]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.69642 secs, and comparison 7.83466 sec, and warnIfPerfScore > 1.05, and perfScore=0.900906]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.9921 secs, and comparison 4.66283 sec, and warnIfPerfScore > 0.48, and perfScore=1.55838]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 3.06645 secs, and comparison 5.03814 sec, and warnIfPerfScore > 0.57, and perfScore=1.64299]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 10.7092 secs, and comparison 31.7432 sec, and warnIfPerfScore > 2.9, and perfScore=2.9641]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.2996 secs, and comparison 35.8671 sec, and warnIfPerfScore > 2.9, and perfScore=2.69686]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.44 secs, and comparison 138.063 sec, and warnIfPerfScore > 9.7, and perfScore=10.2725]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.18319 secs, and comparison 12.9235 sec, and warnIfPerfScore > 1.6, and perfScore=1.57927]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.77782 secs, and comparison 6.71496 sec, and warnIfPerfScore > 1.5, and perfScore=0.990725]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.89884 secs, and comparison 11.4336 sec, and warnIfPerfScore > 2.1, and perfScore=1.93828]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 5.94937 secs, and comparison 5.25131 sec, and warnIfPerfScore > 1.3, and perfScore=0.882667]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.63445 secs, and comparison 3.26049 sec, and warnIfPerfScore > 0.23, and perfScore=0.491449]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.37293 secs, and comparison 8.22006 sec, and warnIfPerfScore > 1.3, and perfScore=1.1149]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.72192 secs, and comparison 8.92539 sec, and warnIfPerfScore > 1.2, and perfScore=1.8902]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.55256 secs, and comparison 1.66472 sec, and warnIfPerfScore > 0.33, and perfScore=0.254056]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.26184 secs, and comparison 44.531 sec, and warnIfPerfScore > 6, and perfScore=10.4488]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.90878 secs, and comparison 3.60037 sec, and warnIfPerfScore > 0.5, and perfScore=0.921099]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 5.83294 secs, and comparison 39.2328 sec, and warnIfPerfScore > 4.4, and perfScore=6.72609]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.33588 secs, and comparison 3.75064 sec, and warnIfPerfScore > 0.6, and perfScore=0.591969]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.0711 secs, and comparison 20.1255 sec, and warnIfPerfScore > 1.5, and perfScore=1.25228]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.2504 secs, and comparison 4.17642 sec, and warnIfPerfScore > 0.55, and perfScore=0.371224]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.61621 sec, and warnIfPerfScore > 0.25, and perfScore=0.107748]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.70317 sec, and warnIfPerfScore > 0.5, and perfScore=0.246878]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 36 seconds]]]

Succeeded
