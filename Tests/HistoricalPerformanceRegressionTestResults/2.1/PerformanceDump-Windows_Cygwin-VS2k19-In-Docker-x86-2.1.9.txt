Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 :53:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.17577 secs, and comparison 4.47822 sec, and warnIfPerfScore > 0.65, and perfScore=0.624075]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.20486 secs, and comparison 2.87192 sec, and warnIfPerfScore > 0.5, and perfScore=0.398608]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.85416 secs, and comparison 7.47979 sec, and warnIfPerfScore > 1.05, and perfScore=0.844777]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.05678 secs, and comparison 7.53523 sec, and warnIfPerfScore > 1.15, and perfScore=1.0678]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.86383 secs, and comparison 2.26451 sec, and warnIfPerfScore > 0.48, and perfScore=0.287965]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.89979 secs, and comparison 2.76777 sec, and warnIfPerfScore > 0.57, and perfScore=0.35036]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.61442 secs, and comparison 20.693 sec, and warnIfPerfScore > 2.9, and perfScore=2.40213]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.66916 secs, and comparison 21.3996 sec, and warnIfPerfScore > 2.9, and perfScore=2.46847]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.13039 secs, and comparison 153.118 sec, and warnIfPerfScore > 24, and perfScore=18.8327]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.43214 secs, and comparison 10.9211 sec, and warnIfPerfScore > 1.7, and perfScore=1.46944]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.98534 secs, and comparison 7.86433 sec, and warnIfPerfScore > 1.5, and perfScore=0.984845]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.18756 secs, and comparison 12.6707 sec, and warnIfPerfScore > 2.1, and perfScore=1.76286]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.94256 secs, and comparison 7.61078 sec, and warnIfPerfScore > 1.6, and perfScore=0.851074]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.38615 secs, and comparison 1.33769 sec, and warnIfPerfScore > 0.23, and perfScore=0.142517]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.367 secs, and comparison 13.0739 sec, and warnIfPerfScore > 1.3, and perfScore=1.05716]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.86619 secs, and comparison 5.37483 sec, and warnIfPerfScore > 1.2, and perfScore=0.544772]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.18681 secs, and comparison 1.5393 sec, and warnIfPerfScore > 0.33, and perfScore=0.248803]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.49305 secs, and comparison 39.3992 sec, and warnIfPerfScore > 6, and perfScore=4.15032]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.50214 secs, and comparison 5.21503 sec, and warnIfPerfScore > 0.8, and perfScore=0.548827]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 9.49188 secs, and comparison 9.43779 sec, and warnIfPerfScore > 1.4, and perfScore=0.994301]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.15494 secs, and comparison 3.44646 sec, and warnIfPerfScore > 0.65, and perfScore=0.55995]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.78943 secs, and comparison 36.9957 sec, and warnIfPerfScore > 4.4, and perfScore=3.77915]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.35453 secs, and comparison 3.40238 sec, and warnIfPerfScore > 0.6, and perfScore=0.535426]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.34368 secs, and comparison 3.41991 sec, and warnIfPerfScore > 0.6, and perfScore=0.539104]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.33682 secs, and comparison 3.4251 sec, and warnIfPerfScore > 0.6, and perfScore=0.540508]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.34831 secs, and comparison 4.85365 sec, and warnIfPerfScore > 1.3, and perfScore=0.764558]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.83572 secs, and comparison 8.4468 sec, and warnIfPerfScore > 1.3, and perfScore=1.23569]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.9712 secs, and comparison 5.79584 sec, and warnIfPerfScore > 0.3, and perfScore=0.126076]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.53754 secs, and comparison 12.242 sec, and warnIfPerfScore > 1.5, and perfScore=1.4339]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.32728 secs, and comparison 2.87484 sec, and warnIfPerfScore > 0.55, and perfScore=0.392347]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.804358 sec, and warnIfPerfScore > 0.1, and perfScore=0.0536239]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.94306 sec, and warnIfPerfScore > 0.5, and perfScore=0.196204]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.2654 secs, and comparison 13.4132 sec, and warnIfPerfScore > 2, and perfScore=1.62281]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.24553 secs, and comparison 28.7158 sec, and warnIfPerfScore > 3.6, and perfScore=3.10592]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 46 seconds]]]

Succeeded
