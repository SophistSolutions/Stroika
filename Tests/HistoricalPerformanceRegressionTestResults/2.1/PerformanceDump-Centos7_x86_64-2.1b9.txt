Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan 16 16:56:55 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.80174 secs, and comparison 5.1646 sec, and warnIfPerfScore > 0.62, and perfScore=0.759306]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.60063 secs, and comparison 3.54001 sec, and warnIfPerfScore > 0.5, and perfScore=0.536314]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.98309 secs, and comparison 8.08071 sec, and warnIfPerfScore > 1.05, and perfScore=0.899547]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.8859 secs, and comparison 4.63757 sec, and warnIfPerfScore > 0.48, and perfScore=1.60697]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.88516 secs, and comparison 4.83683 sec, and warnIfPerfScore > 0.57, and perfScore=1.67645]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 10.0142 secs, and comparison 30.6098 sec, and warnIfPerfScore > 2.9, and perfScore=3.05662]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.3785 secs, and comparison 35.1613 sec, and warnIfPerfScore > 2.9, and perfScore=2.84051]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 13.0154 secs, and comparison 147.264 sec, and warnIfPerfScore > 9.7, and perfScore=11.3146]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.8193 secs, and comparison 27.5469 sec, and warnIfPerfScore > 1.6, and perfScore=1.2625]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 17.6005 secs, and comparison 16.1742 sec, and warnIfPerfScore > 1.5, and perfScore=0.918962]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.9129 secs, and comparison 28.3611 sec, and warnIfPerfScore > 2.1, and perfScore=1.90178]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 11.863 secs, and comparison 11.2894 sec, and warnIfPerfScore > 1.3, and perfScore=0.951648]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.952 secs, and comparison 5.92036 sec, and warnIfPerfScore > 0.23, and perfScore=0.540574]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1815 secs, and comparison 13.2329 sec, and warnIfPerfScore > 1.3, and perfScore=1.18346]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.7695 secs, and comparison 17.5741 sec, and warnIfPerfScore > 1.2, and perfScore=1.63184]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 10.1305 secs, and comparison 2.72676 sec, and warnIfPerfScore > 0.33, and perfScore=0.269163]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 10.0156 secs, and comparison 91.577 sec, and warnIfPerfScore > 6, and perfScore=9.14345]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.60366 secs, and comparison 7.67446 sec, and warnIfPerfScore > 0.5, and perfScore=0.799118]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 14.7221 secs, and comparison 80.4721 sec, and warnIfPerfScore > 4.4, and perfScore=5.46608]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.04289 secs, and comparison 7.14652 sec, and warnIfPerfScore > 0.6, and perfScore=0.888551]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 24.3673 secs, and comparison 32.3494 sec, and warnIfPerfScore > 1.5, and perfScore=1.32758]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 18.2517 secs, and comparison 7.65147 sec, and warnIfPerfScore > 0.55, and perfScore=0.419219]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.05632 sec, and warnIfPerfScore > 0.25, and perfScore=0.203755]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15 secs, and comparison 6.44224 sec, and warnIfPerfScore > 0.5, and perfScore=0.429483]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 58 seconds]]]

Succeeded
