Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 28 12:26:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.715 secs, and comparison 6.47946 sec, and warnIfPerfScore > 0.65, and perfScore=0.604708]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.7761 secs, and comparison 4.23276 sec, and warnIfPerfScore > 0.5, and perfScore=0.359437]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 14.7313 secs, and comparison 12.0309 sec, and warnIfPerfScore > 1.05, and perfScore=0.816688]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.9455 secs, and comparison 12.0311 sec, and warnIfPerfScore > 1.15, and perfScore=1.09918]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.3608 secs, and comparison 3.57032 sec, and warnIfPerfScore > 0.48, and perfScore=0.232431]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.0125 secs, and comparison 4.11786 sec, and warnIfPerfScore > 0.57, and perfScore=0.274295]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 15.9138 secs, and comparison 34.6771 sec, and warnIfPerfScore > 2.9, and perfScore=2.17906]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.7064 secs, and comparison 36.2681 sec, and warnIfPerfScore > 2.9, and perfScore=2.17091]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 14.9251 secs, and comparison 228.802 sec, and warnIfPerfScore > 24, and perfScore=15.33]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.3814 secs, and comparison 16.8062 sec, and warnIfPerfScore > 1.7, and perfScore=1.16861]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.8855 secs, and comparison 15.8829 sec, and warnIfPerfScore > 1.5, and perfScore=0.999832]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.595 secs, and comparison 19.5589 sec, and warnIfPerfScore > 2.1, and perfScore=1.43868]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 18.1764 secs, and comparison 11.2521 sec, and warnIfPerfScore > 1.6, and perfScore=0.619052]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 19.0686 secs, and comparison 2.48621 sec, and warnIfPerfScore > 0.23, and perfScore=0.130382]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.2066 secs, and comparison 20.6361 sec, and warnIfPerfScore > 1.3, and perfScore=1.02125]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 16.0992 secs, and comparison 10.1628 sec, and warnIfPerfScore > 1.2, and perfScore=0.631261]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.0974 secs, and comparison 2.79778 sec, and warnIfPerfScore > 0.33, and perfScore=0.252111]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 15.4452 secs, and comparison 58.1792 sec, and warnIfPerfScore > 6, and perfScore=3.76681]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 15.5101 secs, and comparison 9.89059 sec, and warnIfPerfScore > 0.8, and perfScore=0.637687]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.4068 secs, and comparison 17.4931 sec, and warnIfPerfScore > 1.4, and perfScore=1.13542]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.1036 secs, and comparison 5.17339 sec, and warnIfPerfScore > 0.65, and perfScore=0.465918]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 15.8429 secs, and comparison 53.9164 sec, and warnIfPerfScore > 4.4, and perfScore=3.40319]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.444 secs, and comparison 5.15558 sec, and warnIfPerfScore > 0.6, and perfScore=0.450505]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.1881 secs, and comparison 5.12187 sec, and warnIfPerfScore > 0.6, and perfScore=0.457794]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.1836 secs, and comparison 5.1848 sec, and warnIfPerfScore > 0.6, and perfScore=0.463607]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 11.3345 secs, and comparison 8.46424 sec, and warnIfPerfScore > 1.3, and perfScore=0.746765]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.614 secs, and comparison 14.1699 sec, and warnIfPerfScore > 1.3, and perfScore=1.04084]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 80.8006 secs, and comparison 10.1794 sec, and warnIfPerfScore > 0.3, and perfScore=0.125982]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.4686 secs, and comparison 22.5217 sec, and warnIfPerfScore > 1.5, and perfScore=1.36755]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.8117 secs, and comparison 4.75249 sec, and warnIfPerfScore > 0.55, and perfScore=0.402354]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43966 sec, and warnIfPerfScore > 0.1, and perfScore=0.0959776]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.51365 sec, and warnIfPerfScore > 0.5, and perfScore=0.30091]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.3079 secs, and comparison 15.929 sec, and warnIfPerfScore > 2, and perfScore=1.04058]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 18.5372 secs, and comparison 46.6111 sec, and warnIfPerfScore > 3.6, and perfScore=2.51446]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 21 minutes, 1 second]]]

Succeeded
