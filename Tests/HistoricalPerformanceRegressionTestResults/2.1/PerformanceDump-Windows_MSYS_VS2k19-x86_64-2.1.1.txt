Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jul 23 1:56:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.07391 secs, and comparison 5.8155 sec, and warnIfPerfScore > 0.65, and perfScore=0.640903]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.22768 secs, and comparison 3.30265 sec, and warnIfPerfScore > 0.5, and perfScore=0.357906]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.616 secs, and comparison 9.9503 sec, and warnIfPerfScore > 1.05, and perfScore=0.856602]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.47816 secs, and comparison 10.2363 sec, and warnIfPerfScore > 1.15, and perfScore=1.07999]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.3954 secs, and comparison 2.77312 sec, and warnIfPerfScore > 0.48, and perfScore=0.243355]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.2735 secs, and comparison 4.36276 sec, and warnIfPerfScore > 0.57, and perfScore=0.386992]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.7686 secs, and comparison 28.9321 sec, and warnIfPerfScore > 2.9, and perfScore=2.68672]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.1292 secs, and comparison 29.8094 sec, and warnIfPerfScore > 2.9, and perfScore=2.45766]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 9.12036 secs, and comparison 150.323 sec, and warnIfPerfScore > 24, and perfScore=16.4822]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.49104 secs, and comparison 14.7638 sec, and warnIfPerfScore > 1.7, and perfScore=1.55555]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 10.0098 secs, and comparison 9.76105 sec, and warnIfPerfScore > 1.5, and perfScore=0.975152]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.83598 secs, and comparison 17.5292 sec, and warnIfPerfScore > 2.1, and perfScore=2.23701]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 11.3924 secs, and comparison 7.22059 sec, and warnIfPerfScore > 1.6, and perfScore=0.63381]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 11.7632 secs, and comparison 0.985141 sec, and warnIfPerfScore > 0.23, and perfScore=0.0837475]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.5175 secs, and comparison 13.8862 sec, and warnIfPerfScore > 1.3, and perfScore=1.02727]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.2148 secs, and comparison 8.00181 sec, and warnIfPerfScore > 1.2, and perfScore=0.783354]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 13.4582 secs, and comparison 3.41686 sec, and warnIfPerfScore > 0.33, and perfScore=0.253886]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 9.35797 secs, and comparison 50.2162 sec, and warnIfPerfScore > 6, and perfScore=5.36615]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.48011 secs, and comparison 7.8456 sec, and warnIfPerfScore > 0.8, and perfScore=0.827586]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.33579 secs, and comparison 13.0352 sec, and warnIfPerfScore > 1.4, and perfScore=1.39626]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.6609 secs, and comparison 4.25094 sec, and warnIfPerfScore > 0.65, and perfScore=0.311175]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.2911 secs, and comparison 44.4243 sec, and warnIfPerfScore > 4.4, and perfScore=4.31678]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.5234 secs, and comparison 4.61341 sec, and warnIfPerfScore > 0.6, and perfScore=0.341144]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.1899 secs, and comparison 4.40956 sec, and warnIfPerfScore > 0.6, and perfScore=0.334313]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.9048 secs, and comparison 4.39165 sec, and warnIfPerfScore > 0.6, and perfScore=0.340313]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.598 secs, and comparison 8.40186 sec, and warnIfPerfScore > 1.3, and perfScore=0.617876]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 15.0905 secs, and comparison 13.1761 sec, and warnIfPerfScore > 1.3, and perfScore=0.873139]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 61.3695 secs, and comparison 10.8611 sec, and warnIfPerfScore > 0.3, and perfScore=0.176979]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.1351 secs, and comparison 14.7961 sec, and warnIfPerfScore > 1.5, and perfScore=1.45989]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.3727 secs, and comparison 4.95193 sec, and warnIfPerfScore > 0.55, and perfScore=0.435423]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 15 secs, and comparison 1.03698 sec, and warnIfPerfScore > 0.1, and perfScore=0.069132]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.24913 sec, and warnIfPerfScore > 0.5, and perfScore=0.283276]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.5311 secs, and comparison 17.6591 sec, and warnIfPerfScore > 2, and perfScore=1.53143]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.9562 secs, and comparison 21.8166 sec, and warnIfPerfScore > 3.6, and perfScore=1.82471]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 4 seconds]]]

Succeeded
