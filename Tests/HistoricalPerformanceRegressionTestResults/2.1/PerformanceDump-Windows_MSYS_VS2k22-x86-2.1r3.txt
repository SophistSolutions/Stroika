Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb 13 23:59:58 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.29751 secs, and comparison 4.34445 sec, and warnIfPerfScore > 0.65, and perfScore=0.595334]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.33159 secs, and comparison 2.8438 sec, and warnIfPerfScore > 0.5, and perfScore=0.387883]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.65703 secs, and comparison 7.71533 sec, and warnIfPerfScore > 1.05, and perfScore=0.891222]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.94042 secs, and comparison 7.60839 sec, and warnIfPerfScore > 1.15, and perfScore=1.09624]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 33.6638 secs, and comparison 2.58523 sec, and warnIfPerfScore > 0.48, and perfScore=0.0767954]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 31.3217 secs, and comparison 3.12931 sec, and warnIfPerfScore > 0.57, and perfScore=0.0999088]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.86096 secs, and comparison 20.8027 sec, and warnIfPerfScore > 2.9, and perfScore=2.64632]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.92869 secs, and comparison 21.4919 sec, and warnIfPerfScore > 2.9, and perfScore=2.71066]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.61746 secs, and comparison 148.205 sec, and warnIfPerfScore > 24, and perfScore=19.456]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.91454 secs, and comparison 11.0241 sec, and warnIfPerfScore > 1.7, and perfScore=1.59434]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.71951 secs, and comparison 7.70315 sec, and warnIfPerfScore > 1.5, and perfScore=0.997881]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.8216 secs, and comparison 12.7538 sec, and warnIfPerfScore > 2.1, and perfScore=1.86963]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 9.25233 secs, and comparison 7.54681 sec, and warnIfPerfScore > 1.6, and perfScore=0.815666]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.65771 secs, and comparison 1.2834 sec, and warnIfPerfScore > 0.23, and perfScore=0.132888]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.9703 secs, and comparison 13.0821 sec, and warnIfPerfScore > 1.3, and perfScore=1.00862]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.0707 secs, and comparison 5.64588 sec, and warnIfPerfScore > 1.2, and perfScore=0.560622]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.16905 secs, and comparison 1.47328 sec, and warnIfPerfScore > 0.33, and perfScore=0.238818]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.63317 secs, and comparison 39.5248 sec, and warnIfPerfScore > 6, and perfScore=4.10299]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.69919 secs, and comparison 5.4642 sec, and warnIfPerfScore > 0.8, and perfScore=0.563366]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.76172 secs, and comparison 9.30147 sec, and warnIfPerfScore > 1.4, and perfScore=0.952852]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.03212 secs, and comparison 3.4915 sec, and warnIfPerfScore > 0.65, and perfScore=0.578818]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.67342 secs, and comparison 37.1809 sec, and warnIfPerfScore > 4.4, and perfScore=3.84361]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.24976 secs, and comparison 3.46145 sec, and warnIfPerfScore > 0.6, and perfScore=0.553853]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.26988 secs, and comparison 3.43226 sec, and warnIfPerfScore > 0.6, and perfScore=0.54742]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.29295 secs, and comparison 3.44792 sec, and warnIfPerfScore > 0.6, and perfScore=0.547902]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.29757 secs, and comparison 4.80639 sec, and warnIfPerfScore > 1.3, and perfScore=0.763213]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.7906 secs, and comparison 8.24097 sec, and warnIfPerfScore > 1.3, and perfScore=1.21358]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.2191 secs, and comparison 5.81658 sec, and warnIfPerfScore > 0.3, and perfScore=0.128631]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.36337 secs, and comparison 12.1464 sec, and warnIfPerfScore > 1.5, and perfScore=1.45234]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.0149 secs, and comparison 2.85656 sec, and warnIfPerfScore > 0.55, and perfScore=0.407213]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.891899 sec, and warnIfPerfScore > 0.1, and perfScore=0.0594599]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.96361 sec, and warnIfPerfScore > 0.5, and perfScore=0.197574]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.90279 secs, and comparison 8.64613 sec, and warnIfPerfScore > 2, and perfScore=1.09406]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.95568 secs, and comparison 29.7191 sec, and warnIfPerfScore > 3.6, and perfScore=3.31846]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 25 seconds]]]

Succeeded
