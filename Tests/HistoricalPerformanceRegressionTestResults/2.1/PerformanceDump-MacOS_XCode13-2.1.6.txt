Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 20:9:42 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.2248 secs, and comparison 6.76766 sec, and warnIfPerfScore > 0.65, and perfScore=0.661889]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.57201 secs, and comparison 4.41234 sec, and warnIfPerfScore > 0.5, and perfScore=0.460962]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 17.4963 secs, and comparison 12.596 sec, and warnIfPerfScore > 1.05, and perfScore=0.719921]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6003 secs, and comparison 12.6413 sec, and warnIfPerfScore > 1.15, and perfScore=1.08973]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 35.1265 secs, and comparison 4.32104 sec, and warnIfPerfScore > 0.48, and perfScore=0.123014]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 34.3647 secs, and comparison 5.51635 sec, and warnIfPerfScore > 0.57, and perfScore=0.160524]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.3915 secs, and comparison 39.0158 sec, and warnIfPerfScore > 2.9, and perfScore=1.66795]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.2111 secs, and comparison 42.199 sec, and warnIfPerfScore > 2.9, and perfScore=1.74296]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 18.3729 secs, and comparison 136.008 sec, and warnIfPerfScore > 24, and perfScore=7.40264]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 23.4281 secs, and comparison 15.8444 sec, and warnIfPerfScore > 1.7, and perfScore=0.676301]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.24838 secs, and comparison 6.69911 sec, and warnIfPerfScore > 1.5, and perfScore=0.724355]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.6451 secs, and comparison 20.4576 sec, and warnIfPerfScore > 2.1, and perfScore=1.3076]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 14.4824 secs, and comparison 6.91604 sec, and warnIfPerfScore > 1.6, and perfScore=0.477546]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 14.5235 secs, and comparison 1.25067 sec, and warnIfPerfScore > 0.23, and perfScore=0.0861137]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.5252 secs, and comparison 20.4398 sec, and warnIfPerfScore > 1.3, and perfScore=1.10335]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.2795 secs, and comparison 17.1457 sec, and warnIfPerfScore > 1.2, and perfScore=1.12213]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.0376 secs, and comparison 2.60954 sec, and warnIfPerfScore > 0.33, and perfScore=0.259976]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 12.5301 secs, and comparison 57.1597 sec, and warnIfPerfScore > 6, and perfScore=4.56178]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.5111 secs, and comparison 15.9245 sec, and warnIfPerfScore > 0.8, and perfScore=1.17863]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.8411 secs, and comparison 17.3878 sec, and warnIfPerfScore > 1.4, and perfScore=1.35408]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.37706 secs, and comparison 5.142 sec, and warnIfPerfScore > 0.65, and perfScore=0.548359]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.4655 secs, and comparison 52.5408 sec, and warnIfPerfScore > 4.4, and perfScore=3.19096]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3859 secs, and comparison 4.41874 sec, and warnIfPerfScore > 0.6, and perfScore=0.425456]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.33845 secs, and comparison 4.64042 sec, and warnIfPerfScore > 0.6, and perfScore=0.496916]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.1664 secs, and comparison 4.93728 sec, and warnIfPerfScore > 0.6, and perfScore=0.485648]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.1068 secs, and comparison 6.37147 sec, and warnIfPerfScore > 1.3, and perfScore=0.630416]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.4486 secs, and comparison 15.519 sec, and warnIfPerfScore > 1.3, and perfScore=1.48526]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 142.14 secs, and comparison 8.79932 sec, and warnIfPerfScore > 0.3, and perfScore=0.0619061]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 32.2321 secs, and comparison 34.7536 sec, and warnIfPerfScore > 1.5, and perfScore=1.07823]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 8.63396 secs, and comparison 4.77109 sec, and warnIfPerfScore > 0.55, and perfScore=0.552595]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15 secs, and comparison 6.65707 sec, and warnIfPerfScore > 0.1, and perfScore=0.443805]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.57431 sec, and warnIfPerfScore > 0.5, and perfScore=0.17162]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 4 seconds]]]

Succeeded
