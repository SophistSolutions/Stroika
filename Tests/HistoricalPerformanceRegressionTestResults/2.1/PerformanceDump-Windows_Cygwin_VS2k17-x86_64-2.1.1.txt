Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 17:44:26 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.25522 secs, and comparison 5.42448 sec, and warnIfPerfScore > 0.65, and perfScore=0.5861]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.1795 secs, and comparison 3.20911 sec, and warnIfPerfScore > 0.5, and perfScore=0.349595]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.9014 secs, and comparison 10.2054 sec, and warnIfPerfScore > 1.05, and perfScore=0.857496]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.06002 secs, and comparison 10.4649 sec, and warnIfPerfScore > 1.15, and perfScore=1.15506]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.3252 secs, and comparison 3.72635 sec, and warnIfPerfScore > 0.48, and perfScore=0.329032]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.18 secs, and comparison 4.46816 sec, and warnIfPerfScore > 0.57, and perfScore=0.399658]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.7213 secs, and comparison 28.5693 sec, and warnIfPerfScore > 2.9, and perfScore=2.66474]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 10.6145 secs, and comparison 31.111 sec, and warnIfPerfScore > 2.9, and perfScore=2.93098]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.57043 secs, and comparison 159.891 sec, and warnIfPerfScore > 24, and perfScore=16.7067]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.5697 secs, and comparison 14.8046 sec, and warnIfPerfScore > 1.7, and perfScore=1.40066]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.1932 secs, and comparison 9.67865 sec, and warnIfPerfScore > 1.5, and perfScore=0.949523]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 9.26316 secs, and comparison 18.8886 sec, and warnIfPerfScore > 2.1, and perfScore=2.03911]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.2754 secs, and comparison 7.68686 sec, and warnIfPerfScore > 1.6, and perfScore=0.681738]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 12.5318 secs, and comparison 1.61055 sec, and warnIfPerfScore > 0.23, and perfScore=0.128516]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.608 secs, and comparison 13.6919 sec, and warnIfPerfScore > 1.3, and perfScore=1.08597]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 10.7013 secs, and comparison 8.81071 sec, and warnIfPerfScore > 1.2, and perfScore=0.823334]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.3753 secs, and comparison 3.1679 sec, and warnIfPerfScore > 0.33, and perfScore=0.220371]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 10.9092 secs, and comparison 48.835 sec, and warnIfPerfScore > 6, and perfScore=4.4765]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 10.7654 secs, and comparison 8.53568 sec, and warnIfPerfScore > 0.8, and perfScore=0.792877]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.0858 secs, and comparison 15.5058 sec, and warnIfPerfScore > 1.4, and perfScore=1.5374]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.081 secs, and comparison 4.48353 sec, and warnIfPerfScore > 0.65, and perfScore=0.318409]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 11.0352 secs, and comparison 47.0703 sec, and warnIfPerfScore > 4.4, and perfScore=4.26546]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.4054 secs, and comparison 4.47729 sec, and warnIfPerfScore > 0.6, and perfScore=0.333991]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.4917 secs, and comparison 4.55132 sec, and warnIfPerfScore > 0.6, and perfScore=0.337341]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.0422 secs, and comparison 4.36458 sec, and warnIfPerfScore > 0.6, and perfScore=0.310818]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 13.116 secs, and comparison 8.80134 sec, and warnIfPerfScore > 1.3, and perfScore=0.67104]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 14.99 secs, and comparison 13.5246 sec, and warnIfPerfScore > 1.3, and perfScore=0.902243]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 62.752 secs, and comparison 8.16488 sec, and warnIfPerfScore > 0.3, and perfScore=0.130113]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.24875 secs, and comparison 15.8343 sec, and warnIfPerfScore > 1.5, and perfScore=1.71205]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.6503 secs, and comparison 5.34032 sec, and warnIfPerfScore > 0.55, and perfScore=0.341228]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.06833 sec, and warnIfPerfScore > 0.1, and perfScore=0.0712217]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.08612 sec, and warnIfPerfScore > 0.5, and perfScore=0.272408]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.4531 secs, and comparison 20.4332 sec, and warnIfPerfScore > 2, and perfScore=1.78407]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.3328 secs, and comparison 20.4837 sec, and warnIfPerfScore > 3.6, and perfScore=1.66092]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 35 seconds]]]

Succeeded
