Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 1:6:39 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.5634 secs, and comparison 4.38581 sec, and warnIfPerfScore > 0.65, and perfScore=0.788332]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.5614 secs, and comparison 2.64783 sec, and warnIfPerfScore > 0.5, and perfScore=0.476109]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.99138 secs, and comparison 7.2243 sec, and warnIfPerfScore > 1.05, and perfScore=0.904011]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.57178 secs, and comparison 7.23561 sec, and warnIfPerfScore > 1.15, and perfScore=1.10101]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 31.7992 secs, and comparison 2.19112 sec, and warnIfPerfScore > 0.48, and perfScore=0.0689048]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 30.7165 secs, and comparison 2.82362 sec, and warnIfPerfScore > 0.57, and perfScore=0.0919253]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.59724 secs, and comparison 18.7169 sec, and warnIfPerfScore > 2.9, and perfScore=2.83707]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.89455 secs, and comparison 18.6339 sec, and warnIfPerfScore > 2.9, and perfScore=2.7027]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.80616 secs, and comparison 133.672 sec, and warnIfPerfScore > 24, and perfScore=23.0224]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.87226 secs, and comparison 9.87494 sec, and warnIfPerfScore > 1.7, and perfScore=1.68163]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.9662 secs, and comparison 5.80222 sec, and warnIfPerfScore > 1.5, and perfScore=0.972515]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.22555 secs, and comparison 11.9537 sec, and warnIfPerfScore > 2.1, and perfScore=2.28756]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 6.96451 secs, and comparison 4.69458 sec, and warnIfPerfScore > 1.6, and perfScore=0.674073]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 7.35166 secs, and comparison 0.706695 sec, and warnIfPerfScore > 0.23, and perfScore=0.0961273]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.51 secs, and comparison 11.8459 sec, and warnIfPerfScore > 1.3, and perfScore=1.02918]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.23252 secs, and comparison 5.1827 sec, and warnIfPerfScore > 1.2, and perfScore=0.62954]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.73318 secs, and comparison 1.79906 sec, and warnIfPerfScore > 0.33, and perfScore=0.232641]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.92081 secs, and comparison 38.4652 sec, and warnIfPerfScore > 6, and perfScore=4.85623]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.87863 secs, and comparison 5.0174 sec, and warnIfPerfScore > 0.8, and perfScore=0.636836]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.88539 secs, and comparison 7.61779 sec, and warnIfPerfScore > 1.4, and perfScore=0.966064]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.72405 secs, and comparison 3.39868 sec, and warnIfPerfScore > 0.65, and perfScore=0.440013]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.42313 secs, and comparison 35.8464 sec, and warnIfPerfScore > 4.4, and perfScore=4.25571]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.66394 secs, and comparison 3.30705 sec, and warnIfPerfScore > 0.6, and perfScore=0.431507]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.69354 secs, and comparison 3.31889 sec, and warnIfPerfScore > 0.6, and perfScore=0.431387]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.66518 secs, and comparison 3.29956 sec, and warnIfPerfScore > 0.6, and perfScore=0.430461]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.64861 secs, and comparison 4.8857 sec, and warnIfPerfScore > 1.3, and perfScore=0.63877]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.25201 secs, and comparison 7.93075 sec, and warnIfPerfScore > 1.3, and perfScore=0.961069]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 38.0814 secs, and comparison 6.0727 sec, and warnIfPerfScore > 0.3, and perfScore=0.159466]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.66106 secs, and comparison 9.2597 sec, and warnIfPerfScore > 1.5, and perfScore=1.63568]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.14375 secs, and comparison 2.70462 sec, and warnIfPerfScore > 0.55, and perfScore=0.440223]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.59935 sec, and warnIfPerfScore > 0.1, and perfScore=0.0399567]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80636 sec, and warnIfPerfScore > 0.5, and perfScore=0.18709]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.44695 secs, and comparison 12.6443 sec, and warnIfPerfScore > 2, and perfScore=1.96128]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.1347 secs, and comparison 14.2069 sec, and warnIfPerfScore > 3.6, and perfScore=1.99124]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 1 second]]]

Succeeded
