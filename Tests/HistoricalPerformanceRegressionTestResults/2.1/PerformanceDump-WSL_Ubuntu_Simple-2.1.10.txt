Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 19 21:59:12 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 2.66099 secs, and comparison 1.33633 sec, and warnIfPerfScore > 0.65, and perfScore=0.502194]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 2.66994 secs, and comparison 2.38333 sec, and warnIfPerfScore > 0.5, and perfScore=0.892655]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.32306 secs, and comparison 6.77643 sec, and warnIfPerfScore > 1.05, and perfScore=2.91703]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 2.00346 secs, and comparison 6.77398 sec, and warnIfPerfScore > 1.15, and perfScore=3.38114]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.64005 secs, and comparison 0.935415 sec, and warnIfPerfScore > 0.48, and perfScore=0.256979]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 4.29564 secs, and comparison 0.887456 sec, and warnIfPerfScore > 0.57, and perfScore=0.206595]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 3.03986 secs, and comparison 10.8719 sec, and warnIfPerfScore > 2.9, and perfScore=3.57643]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.67714 secs, and comparison 10.9782 sec, and warnIfPerfScore > 2.9, and perfScore=2.98553]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 4.55137 secs, and comparison 38.2905 sec, and warnIfPerfScore > 24, and perfScore=8.41296]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 4.53354 secs, and comparison 6.8873 sec, and warnIfPerfScore > 1.7, and perfScore=1.51919]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.64411 secs, and comparison 4.48111 sec, and warnIfPerfScore > 1.5, and perfScore=0.964901]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 2.41717 secs, and comparison 8.48189 sec, and warnIfPerfScore > 2.1, and perfScore=3.50902]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 3.63568 secs, and comparison 3.22599 sec, and warnIfPerfScore > 1.6, and perfScore=0.887315]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 3.72089 secs, and comparison 1.17471 sec, and warnIfPerfScore > 0.23, and perfScore=0.315707]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.82006 secs, and comparison 3.63373 sec, and warnIfPerfScore > 1.3, and perfScore=1.28853]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.68551 secs, and comparison 5.6898 sec, and warnIfPerfScore > 1.2, and perfScore=2.11871]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.9499 secs, and comparison 1.44386 sec, and warnIfPerfScore > 0.33, and perfScore=0.120826]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 2.58057 secs, and comparison 42.4027 sec, and warnIfPerfScore > 6, and perfScore=16.4315]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.55718 secs, and comparison 5.33585 sec, and warnIfPerfScore > 0.8, and perfScore=2.08662]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.69977 secs, and comparison 6.54902 sec, and warnIfPerfScore > 1.4, and perfScore=2.42577]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.9605 secs, and comparison 3.57361 sec, and warnIfPerfScore > 0.65, and perfScore=0.298783]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.73978 secs, and comparison 39.084 sec, and warnIfPerfScore > 4.4, and perfScore=10.4509]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.30637 secs, and comparison 3.5683 sec, and warnIfPerfScore > 0.6, and perfScore=0.383426]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.78986 secs, and comparison 3.56181 sec, and warnIfPerfScore > 0.6, and perfScore=0.405218]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.71505 secs, and comparison 3.57433 sec, and warnIfPerfScore > 0.6, and perfScore=0.410133]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.69176 secs, and comparison 3.86348 sec, and warnIfPerfScore > 1.3, and perfScore=0.4445]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 14.7898 secs, and comparison 8.57232 sec, and warnIfPerfScore > 1.3, and perfScore=0.579612]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.2207 secs, and comparison 5.13457 sec, and warnIfPerfScore > 0.3, and perfScore=0.337341]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.39137 secs, and comparison 11.397 sec, and warnIfPerfScore > 1.5, and perfScore=1.78318]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 6.91036 secs, and comparison 1.82271 sec, and warnIfPerfScore > 0.55, and perfScore=0.263765]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.741121 sec, and warnIfPerfScore > 0.1, and perfScore=0.049408]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 15 secs, and comparison 1.23048 sec, and warnIfPerfScore > 0.5, and perfScore=0.082032]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 3 seconds]]]

Succeeded
