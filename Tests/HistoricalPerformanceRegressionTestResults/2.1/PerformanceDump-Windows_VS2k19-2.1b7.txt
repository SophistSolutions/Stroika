Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec  5 14:40:52 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.9079 secs, and comparison 4.95778 sec, and warnIfPerfScore > 0.62, and perfScore=0.454514]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.7383 secs, and comparison 3.31322 sec, and warnIfPerfScore > 0.5, and perfScore=0.308543]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.7022 secs, and comparison 10.2216 sec, and warnIfPerfScore > 1.05, and perfScore=0.955095]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.4674 secs, and comparison 4.01672 sec, and warnIfPerfScore > 0.48, and perfScore=0.383735]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.3548 secs, and comparison 4.3405 sec, and warnIfPerfScore > 0.57, and perfScore=0.419178]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.4405 secs, and comparison 25.9583 sec, and warnIfPerfScore > 2.9, and perfScore=2.26899]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.8059 secs, and comparison 27.8961 sec, and warnIfPerfScore > 2.9, and perfScore=2.3629]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 11.3979 secs, and comparison 90.1459 sec, and warnIfPerfScore > 9.7, and perfScore=7.909]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.64949 secs, and comparison 11.9657 sec, and warnIfPerfScore > 1.6, and perfScore=1.24003]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.5648 secs, and comparison 13.3253 sec, and warnIfPerfScore > 1.5, and perfScore=0.982339]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.64031 secs, and comparison 12.0134 sec, and warnIfPerfScore > 2.1, and perfScore=1.39038]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 12.4804 secs, and comparison 8.73847 sec, and warnIfPerfScore > 1.3, and perfScore=0.700178]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.083 secs, and comparison 2.64475 sec, and warnIfPerfScore > 0.23, and perfScore=0.202151]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5324 secs, and comparison 12.7161 sec, and warnIfPerfScore > 1.3, and perfScore=1.01466]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 10.1854 secs, and comparison 7.70289 sec, and warnIfPerfScore > 1.2, and perfScore=0.756266]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.06263 secs, and comparison 1.89738 sec, and warnIfPerfScore > 0.33, and perfScore=0.209363]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.82517 secs, and comparison 44.9128 sec, and warnIfPerfScore > 6, and perfScore=4.5712]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.04278 secs, and comparison 4.12931 sec, and warnIfPerfScore > 0.5, and perfScore=0.456642]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.4243 secs, and comparison 39.1211 sec, and warnIfPerfScore > 4.4, and perfScore=3.75289]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.12422 secs, and comparison 4.33073 sec, and warnIfPerfScore > 0.6, and perfScore=0.474642]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.468 secs, and comparison 17.6034 sec, and warnIfPerfScore > 1.5, and perfScore=1.21671]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.711 secs, and comparison 4.18437 sec, and warnIfPerfScore > 0.55, and perfScore=0.305182]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 15 secs, and comparison 1.40079 sec, and warnIfPerfScore > 0.25, and perfScore=0.0933861]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.64246 sec, and warnIfPerfScore > 0.5, and perfScore=0.242831]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.2755 secs, and comparison 18.3019 sec, and warnIfPerfScore > 2, and perfScore=1.62315]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.2202 secs, and comparison 31.5396 sec, and warnIfPerfScore > 3.1, and perfScore=2.81096]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 19 seconds]]]

Succeeded
