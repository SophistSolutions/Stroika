Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 7:57:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.48864 secs, and comparison 4.59107 sec, and warnIfPerfScore > 0.65, and perfScore=0.836468]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.50192 secs, and comparison 2.58173 sec, and warnIfPerfScore > 0.5, and perfScore=0.469242]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.6307 secs, and comparison 7.66897 sec, and warnIfPerfScore > 1.05, and perfScore=0.888569]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.96399 secs, and comparison 10.3189 sec, and warnIfPerfScore > 1.15, and perfScore=1.48175]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.9384 secs, and comparison 2.31866 sec, and warnIfPerfScore > 0.48, and perfScore=0.211975]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.5824 secs, and comparison 2.97338 sec, and warnIfPerfScore > 0.57, and perfScore=0.280975]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.51147 secs, and comparison 20.3557 sec, and warnIfPerfScore > 2.9, and perfScore=2.70995]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.99637 secs, and comparison 20.3393 sec, and warnIfPerfScore > 2.9, and perfScore=2.54356]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 6.97459 secs, and comparison 138.266 sec, and warnIfPerfScore > 24, and perfScore=19.8242]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.33574 secs, and comparison 10.6 sec, and warnIfPerfScore > 1.7, and perfScore=1.67305]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.62509 secs, and comparison 6.28396 sec, and warnIfPerfScore > 1.5, and perfScore=0.948509]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.70539 secs, and comparison 12.8867 sec, and warnIfPerfScore > 2.1, and perfScore=2.25868]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.10906 secs, and comparison 5.07375 sec, and warnIfPerfScore > 1.6, and perfScore=0.625689]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 8.40818 secs, and comparison 0.741837 sec, and warnIfPerfScore > 0.23, and perfScore=0.0882281]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.316 secs, and comparison 12.9557 sec, and warnIfPerfScore > 1.3, and perfScore=1.05194]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.81772 secs, and comparison 5.75992 sec, and warnIfPerfScore > 1.2, and perfScore=0.653221]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.68978 secs, and comparison 2.00852 sec, and warnIfPerfScore > 0.33, and perfScore=0.231136]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 8.32977 secs, and comparison 41.293 sec, and warnIfPerfScore > 6, and perfScore=4.95728]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.38898 secs, and comparison 5.56977 sec, and warnIfPerfScore > 0.8, and perfScore=0.663939]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.39253 secs, and comparison 8.5611 sec, and warnIfPerfScore > 1.4, and perfScore=1.02009]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.66441 secs, and comparison 3.66205 sec, and warnIfPerfScore > 0.65, and perfScore=0.422654]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.95612 secs, and comparison 38.5141 sec, and warnIfPerfScore > 4.4, and perfScore=4.30031]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.62959 secs, and comparison 3.59373 sec, and warnIfPerfScore > 0.6, and perfScore=0.416443]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.68241 secs, and comparison 3.59641 sec, and warnIfPerfScore > 0.6, and perfScore=0.414217]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.53892 secs, and comparison 3.58092 sec, and warnIfPerfScore > 0.6, and perfScore=0.419365]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.5451 secs, and comparison 5.47093 sec, and warnIfPerfScore > 1.3, and perfScore=0.640242]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 9.24599 secs, and comparison 8.59143 sec, and warnIfPerfScore > 1.3, and perfScore=0.929205]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 41.8323 secs, and comparison 5.45958 sec, and warnIfPerfScore > 0.3, and perfScore=0.130511]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.71554 secs, and comparison 10.4493 sec, and warnIfPerfScore > 1.5, and perfScore=1.55599]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.82603 secs, and comparison 3.01308 sec, and warnIfPerfScore > 0.55, and perfScore=0.441409]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.619456 sec, and warnIfPerfScore > 0.1, and perfScore=0.0412971]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.01476 sec, and warnIfPerfScore > 0.5, and perfScore=0.200984]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.55777 secs, and comparison 13.5866 sec, and warnIfPerfScore > 2, and perfScore=1.79769]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.43203 secs, and comparison 15.6047 sec, and warnIfPerfScore > 3.6, and perfScore=1.85065]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 14 seconds]]]

Succeeded
