Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Nov 29 11:53:8 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.8282 secs, and comparison 4.61038 sec, and warnIfPerfScore > 0.65, and perfScore=0.588944]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.81483 secs, and comparison 3.01572 sec, and warnIfPerfScore > 0.5, and perfScore=0.385897]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.47153 secs, and comparison 7.96902 sec, and warnIfPerfScore > 1.05, and perfScore=0.841366]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.15904 secs, and comparison 7.9109 sec, and warnIfPerfScore > 1.15, and perfScore=1.10502]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.6075 secs, and comparison 2.39039 sec, and warnIfPerfScore > 0.48, and perfScore=0.225349]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.5438 secs, and comparison 2.96153 sec, and warnIfPerfScore > 0.57, and perfScore=0.280879]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.21261 secs, and comparison 22.8592 sec, and warnIfPerfScore > 2.9, and perfScore=2.48129]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.95968 secs, and comparison 23.4126 sec, and warnIfPerfScore > 2.9, and perfScore=2.35074]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 9.66849 secs, and comparison 249.934 sec, and warnIfPerfScore > 24, and perfScore=25.8503]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 24 and got 25.8503}}}

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.0342 secs, and comparison 12.9612 sec, and warnIfPerfScore > 1.7, and perfScore=1.17463]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.1266 secs, and comparison 10.6541 sec, and warnIfPerfScore > 1.5, and perfScore=0.878571]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.74363 secs, and comparison 13.9924 sec, and warnIfPerfScore > 2.1, and perfScore=1.6003]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 11.0909 secs, and comparison 7.66959 sec, and warnIfPerfScore > 1.6, and perfScore=0.691523]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.1262 secs, and comparison 1.63864 sec, and warnIfPerfScore > 0.23, and perfScore=0.135132]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.9412 secs, and comparison 14.519 sec, and warnIfPerfScore > 1.3, and perfScore=1.04145]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 11.2832 secs, and comparison 6.52274 sec, and warnIfPerfScore > 1.2, and perfScore=0.578092]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.1117 secs, and comparison 2.61898 sec, and warnIfPerfScore > 0.33, and perfScore=0.235695]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.9028 secs, and comparison 42.1055 sec, and warnIfPerfScore > 6, and perfScore=3.86189]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 10.7852 secs, and comparison 6.56505 sec, and warnIfPerfScore > 0.8, and perfScore=0.608712]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.9539 secs, and comparison 11.1207 sec, and warnIfPerfScore > 1.4, and perfScore=1.01523]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.04 secs, and comparison 3.96381 sec, and warnIfPerfScore > 0.65, and perfScore=0.359041]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.4025 secs, and comparison 39.7056 sec, and warnIfPerfScore > 4.4, and perfScore=3.48218]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.0601 secs, and comparison 3.73914 sec, and warnIfPerfScore > 0.6, and perfScore=0.371682]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.1164 secs, and comparison 3.85005 sec, and warnIfPerfScore > 0.6, and perfScore=0.380576]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.73944 secs, and comparison 3.84605 sec, and warnIfPerfScore > 0.6, and perfScore=0.394895]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.70076 secs, and comparison 5.86866 sec, and warnIfPerfScore > 1.3, and perfScore=0.60497]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.4008 secs, and comparison 9.97946 sec, and warnIfPerfScore > 1.3, and perfScore=0.959488]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 52.8085 secs, and comparison 6.18051 sec, and warnIfPerfScore > 0.3, and perfScore=0.117036]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.22794 secs, and comparison 12.7697 sec, and warnIfPerfScore > 1.5, and perfScore=1.55199]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.55199}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.73317 secs, and comparison 3.406 sec, and warnIfPerfScore > 0.55, and perfScore=0.44044]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.855519 sec, and warnIfPerfScore > 0.1, and perfScore=0.0570346]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.08834 sec, and warnIfPerfScore > 0.5, and perfScore=0.205889]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.94373 secs, and comparison 14.3079 sec, and warnIfPerfScore > 2, and perfScore=1.59977]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 10.3387 secs, and comparison 30.4042 sec, and warnIfPerfScore > 3.6, and perfScore=2.94082]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 5 seconds]]]

Succeeded
