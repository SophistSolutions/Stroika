Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jul 23 12:21:27 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.47889 secs, and comparison 5.80834 sec, and warnIfPerfScore > 0.65, and perfScore=0.685035]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.96222 secs, and comparison 3.49871 sec, and warnIfPerfScore > 0.5, and perfScore=0.390385]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.6023 secs, and comparison 10.2451 sec, and warnIfPerfScore > 1.05, and perfScore=0.883018]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.26687 secs, and comparison 9.96329 sec, and warnIfPerfScore > 1.15, and perfScore=1.07515]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.445 secs, and comparison 3.18328 sec, and warnIfPerfScore > 0.48, and perfScore=0.278138]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.5442 secs, and comparison 4.01021 sec, and warnIfPerfScore > 0.57, and perfScore=0.34738]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.3363 secs, and comparison 28.4541 sec, and warnIfPerfScore > 2.9, and perfScore=2.51]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.4902 secs, and comparison 29.498 sec, and warnIfPerfScore > 2.9, and perfScore=2.36169]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 9.95538 secs, and comparison 142.285 sec, and warnIfPerfScore > 24, and perfScore=14.2922]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.2681 secs, and comparison 14.6874 sec, and warnIfPerfScore > 1.7, and perfScore=1.58472]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 11.046 secs, and comparison 10.8101 sec, and warnIfPerfScore > 1.5, and perfScore=0.97864]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.89962 secs, and comparison 16.6397 sec, and warnIfPerfScore > 2.1, and perfScore=1.86971]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.0573 secs, and comparison 7.08292 sec, and warnIfPerfScore > 1.6, and perfScore=0.640563]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.8347 secs, and comparison 1.38216 sec, and warnIfPerfScore > 0.23, and perfScore=0.116788]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1781 secs, and comparison 13.6236 sec, and warnIfPerfScore > 1.3, and perfScore=1.03381]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.0217 secs, and comparison 8.63432 sec, and warnIfPerfScore > 1.2, and perfScore=0.861562]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 13.8229 secs, and comparison 3.03342 sec, and warnIfPerfScore > 0.33, and perfScore=0.219449]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 9.39418 secs, and comparison 50.9889 sec, and warnIfPerfScore > 6, and perfScore=5.42771]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.80728 secs, and comparison 7.97702 sec, and warnIfPerfScore > 0.8, and perfScore=0.813377]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.91928 secs, and comparison 12.7303 sec, and warnIfPerfScore > 1.4, and perfScore=1.28339]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.8506 secs, and comparison 4.48319 sec, and warnIfPerfScore > 0.65, and perfScore=0.323682]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.1668 secs, and comparison 44.2696 sec, and warnIfPerfScore > 4.4, and perfScore=3.96439]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.8559 secs, and comparison 4.48066 sec, and warnIfPerfScore > 0.6, and perfScore=0.323375]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.4416 secs, and comparison 4.78718 sec, and warnIfPerfScore > 0.6, and perfScore=0.356145]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.0893 secs, and comparison 4.23456 sec, and warnIfPerfScore > 0.6, and perfScore=0.300553]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.8086 secs, and comparison 8.53494 sec, and warnIfPerfScore > 1.3, and perfScore=0.618088]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 14.7751 secs, and comparison 13.3154 sec, and warnIfPerfScore > 1.3, and perfScore=0.901205]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 60.7808 secs, and comparison 10.5704 sec, and warnIfPerfScore > 0.3, and perfScore=0.173909]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.67518 secs, and comparison 15.6171 sec, and warnIfPerfScore > 1.5, and perfScore=1.61414]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.1336 secs, and comparison 4.3879 sec, and warnIfPerfScore > 0.55, and perfScore=0.361632]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.979265 sec, and warnIfPerfScore > 0.1, and perfScore=0.0652844]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.29871 sec, and warnIfPerfScore > 0.5, and perfScore=0.286581]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.1861 secs, and comparison 16.9575 sec, and warnIfPerfScore > 2, and perfScore=1.51594]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 11.6421 secs, and comparison 21.6366 sec, and warnIfPerfScore > 3.6, and perfScore=1.85848]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 4 seconds]]]

Succeeded
