Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 12:41:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.6801 secs, and comparison 6.27809 sec, and warnIfPerfScore > 0.65, and perfScore=0.723274]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.54981 secs, and comparison 3.19982 sec, and warnIfPerfScore > 0.5, and perfScore=0.374256]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.6688 secs, and comparison 9.36564 sec, and warnIfPerfScore > 1.05, and perfScore=0.877851]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.51262 secs, and comparison 9.55355 sec, and warnIfPerfScore > 1.15, and perfScore=1.12228]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 11.546 secs, and comparison 3.13459 sec, and warnIfPerfScore > 0.48, and perfScore=0.271488]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.7632 secs, and comparison 4.08743 sec, and warnIfPerfScore > 0.57, and perfScore=0.347475]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.1359 secs, and comparison 27.5607 sec, and warnIfPerfScore > 2.9, and perfScore=1.82089]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.7703 secs, and comparison 27.9029 sec, and warnIfPerfScore > 2.9, and perfScore=2.37063]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 10.6312 secs, and comparison 147.863 sec, and warnIfPerfScore > 24, and perfScore=13.9085]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5346 secs, and comparison 13.0043 sec, and warnIfPerfScore > 1.6, and perfScore=1.12742]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 11.0389 secs, and comparison 10.6387 sec, and warnIfPerfScore > 1.5, and perfScore=0.963749]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.31369 secs, and comparison 15.8432 sec, and warnIfPerfScore > 2.1, and perfScore=1.90568]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 11.1167 secs, and comparison 8.36671 sec, and warnIfPerfScore > 1.6, and perfScore=0.752622]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 11.8658 secs, and comparison 1.01487 sec, and warnIfPerfScore > 0.23, and perfScore=0.0855294]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.5625 secs, and comparison 14.8398 sec, and warnIfPerfScore > 1.3, and perfScore=1.09419]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 10.0593 secs, and comparison 8.23417 sec, and warnIfPerfScore > 1.2, and perfScore=0.818565]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 14.0614 secs, and comparison 2.83567 sec, and warnIfPerfScore > 0.33, and perfScore=0.201664]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 10.0682 secs, and comparison 43.836 sec, and warnIfPerfScore > 6, and perfScore=4.35393]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 11.36 secs, and comparison 9.08966 sec, and warnIfPerfScore > 0.8, and perfScore=0.800144]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.55305 secs, and comparison 11.9397 sec, and warnIfPerfScore > 1.4, and perfScore=1.39596]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.8804 secs, and comparison 3.76309 sec, and warnIfPerfScore > 0.65, and perfScore=0.316749]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.08749 secs, and comparison 37.8222 sec, and warnIfPerfScore > 4.4, and perfScore=4.162]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.4781 secs, and comparison 3.65176 sec, and warnIfPerfScore > 0.6, and perfScore=0.31815]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7557 secs, and comparison 3.70285 sec, and warnIfPerfScore > 0.6, and perfScore=0.314983]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.5686 secs, and comparison 3.63 sec, and warnIfPerfScore > 0.6, and perfScore=0.313782]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.6794 secs, and comparison 7.11152 sec, and warnIfPerfScore > 1.3, and perfScore=0.608893]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 12.8497 secs, and comparison 10.8061 sec, and warnIfPerfScore > 1.3, and perfScore=0.840963]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 52.8692 secs, and comparison 9.36875 sec, and warnIfPerfScore > 0.3, and perfScore=0.177206]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.05667 secs, and comparison 12.8806 sec, and warnIfPerfScore > 1.5, and perfScore=1.59875]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.1974 secs, and comparison 3.78899 sec, and warnIfPerfScore > 0.55, and perfScore=0.371565]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.973952 sec, and warnIfPerfScore > 0.1, and perfScore=0.0649301]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.15541 sec, and warnIfPerfScore > 0.5, and perfScore=0.277027]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.16903 secs, and comparison 14.6114 sec, and warnIfPerfScore > 2, and perfScore=1.59356]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.59815 secs, and comparison 16.9441 sec, and warnIfPerfScore > 3.1, and perfScore=1.76535]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 10 seconds]]]

Succeeded
