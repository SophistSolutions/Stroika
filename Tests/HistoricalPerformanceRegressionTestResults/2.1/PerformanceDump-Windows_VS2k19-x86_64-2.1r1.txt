Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  8 17:15:5 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.51659 secs, and comparison 4.73271 sec, and warnIfPerfScore > 0.65, and perfScore=0.629635]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.51038 secs, and comparison 3.07017 sec, and warnIfPerfScore > 0.5, and perfScore=0.40879]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.6425 secs, and comparison 8.53711 sec, and warnIfPerfScore > 1.05, and perfScore=0.885363]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.72532 secs, and comparison 8.57874 sec, and warnIfPerfScore > 1.15, and perfScore=1.11047]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.73911 secs, and comparison 2.95487 sec, and warnIfPerfScore > 0.48, and perfScore=0.33812]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.75709 secs, and comparison 3.70794 sec, and warnIfPerfScore > 0.57, and perfScore=0.423422]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.2909 secs, and comparison 24.1533 sec, and warnIfPerfScore > 2.9, and perfScore=2.59967]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.0014 secs, and comparison 24.5224 sec, and warnIfPerfScore > 2.9, and perfScore=2.45189]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 8.23705 secs, and comparison 120.437 sec, and warnIfPerfScore > 24, and perfScore=14.6213]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.68182 secs, and comparison 12.2836 sec, and warnIfPerfScore > 1.6, and perfScore=1.59905]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.73493 secs, and comparison 8.45834 sec, and warnIfPerfScore > 1.5, and perfScore=0.968335]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.01853 secs, and comparison 14.6869 sec, and warnIfPerfScore > 2.1, and perfScore=2.0926]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 10.5315 secs, and comparison 5.52486 sec, and warnIfPerfScore > 1.6, and perfScore=0.524602]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 11.0331 secs, and comparison 0.965554 sec, and warnIfPerfScore > 0.23, and perfScore=0.0875142]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.0466 secs, and comparison 11.5454 sec, and warnIfPerfScore > 1.3, and perfScore=1.04516]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.12713 secs, and comparison 7.1789 sec, and warnIfPerfScore > 1.2, and perfScore=0.883324]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.6028 secs, and comparison 2.64112 sec, and warnIfPerfScore > 0.33, and perfScore=0.227627]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 7.80972 secs, and comparison 41.2154 sec, and warnIfPerfScore > 6, and perfScore=5.27745]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.79093 secs, and comparison 7.27839 sec, and warnIfPerfScore > 0.8, and perfScore=0.934213]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.80403 secs, and comparison 10.3096 sec, and warnIfPerfScore > 1.4, and perfScore=1.32106]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.4615 secs, and comparison 3.68136 sec, and warnIfPerfScore > 0.65, and perfScore=0.321195]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.73066 secs, and comparison 37.1524 sec, and warnIfPerfScore > 4.4, and perfScore=4.25539]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.238 secs, and comparison 3.5833 sec, and warnIfPerfScore > 0.6, and perfScore=0.318856]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2338 secs, and comparison 3.61571 sec, and warnIfPerfScore > 0.6, and perfScore=0.321859]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2445 secs, and comparison 3.57978 sec, and warnIfPerfScore > 0.6, and perfScore=0.318358]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 11.2418 secs, and comparison 6.96978 sec, and warnIfPerfScore > 1.3, and perfScore=0.61999]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 12.5982 secs, and comparison 10.6512 sec, and warnIfPerfScore > 1.3, and perfScore=0.845457]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 52.5571 secs, and comparison 9.15095 sec, and warnIfPerfScore > 0.3, and perfScore=0.174115]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.9859 secs, and comparison 12.5972 sec, and warnIfPerfScore > 1.5, and perfScore=1.57743]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.84658 secs, and comparison 3.72854 sec, and warnIfPerfScore > 0.55, and perfScore=0.378663]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.974955 sec, and warnIfPerfScore > 0.1, and perfScore=0.064997]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.49099 sec, and warnIfPerfScore > 0.5, and perfScore=0.232733]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.14425 secs, and comparison 14.5398 sec, and warnIfPerfScore > 2, and perfScore=1.59004]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.58178 secs, and comparison 16.8904 sec, and warnIfPerfScore > 3.1, and perfScore=1.76276]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 19 seconds]]]

Succeeded
