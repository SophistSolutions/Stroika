Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 15 14:41:40 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 39.7677 secs, and comparison 13.2093 sec, and warnIfPerfScore > 0.65, and perfScore=0.332161]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 40.0484 secs, and comparison 13.0019 sec, and warnIfPerfScore > 0.5, and perfScore=0.324655]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 24.3733 secs, and comparison 19.4418 sec, and warnIfPerfScore > 1.05, and perfScore=0.797667]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 19.8847 secs, and comparison 19.0795 sec, and warnIfPerfScore > 1.15, and perfScore=0.959507]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 18.5717 secs, and comparison 3.16978 sec, and warnIfPerfScore > 0.48, and perfScore=0.170678]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 18.6673 secs, and comparison 3.71332 sec, and warnIfPerfScore > 0.57, and perfScore=0.198921]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.1441 secs, and comparison 32.0575 sec, and warnIfPerfScore > 2.9, and perfScore=1.76683]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.4063 secs, and comparison 32.3445 sec, and warnIfPerfScore > 2.9, and perfScore=1.75725]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 13.8666 secs, and comparison 160.773 sec, and warnIfPerfScore > 24, and perfScore=11.5943]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 15.6463 secs, and comparison 13.5441 sec, and warnIfPerfScore > 1.7, and perfScore=0.865638]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 44.0462 secs, and comparison 43.1492 sec, and warnIfPerfScore > 1.5, and perfScore=0.979633]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.3919 secs, and comparison 15.8218 sec, and warnIfPerfScore > 2.1, and perfScore=1.02793]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 36.0206 secs, and comparison 9.04492 sec, and warnIfPerfScore > 1.6, and perfScore=0.251104]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 37.637 secs, and comparison 1.69235 sec, and warnIfPerfScore > 0.23, and perfScore=0.0449652]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.7906 secs, and comparison 20.0903 sec, and warnIfPerfScore > 1.3, and perfScore=1.70393]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.4529 secs, and comparison 18.8392 sec, and warnIfPerfScore > 1.2, and perfScore=1.51284]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 18.418 secs, and comparison 4.96452 sec, and warnIfPerfScore > 0.33, and perfScore=0.269547]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.895 secs, and comparison 48.1162 sec, and warnIfPerfScore > 6, and perfScore=4.04507]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.6253 secs, and comparison 18.1266 sec, and warnIfPerfScore > 0.8, and perfScore=1.55924]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 11.6884 secs, and comparison 39.3628 sec, and warnIfPerfScore > 1.4, and perfScore=3.36767]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 18.4278 secs, and comparison 4.51648 sec, and warnIfPerfScore > 0.65, and perfScore=0.245091]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 21.2728 secs, and comparison 52.1241 sec, and warnIfPerfScore > 4.4, and perfScore=2.45027]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 18.4854 secs, and comparison 5.08689 sec, and warnIfPerfScore > 0.6, and perfScore=0.275184]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 18.2196 secs, and comparison 5.20457 sec, and warnIfPerfScore > 0.6, and perfScore=0.285658]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 18.2737 secs, and comparison 5.11908 sec, and warnIfPerfScore > 0.6, and perfScore=0.280134]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 18.2033 secs, and comparison 11.9478 sec, and warnIfPerfScore > 1.3, and perfScore=0.656358]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 25.2927 secs, and comparison 18.5666 sec, and warnIfPerfScore > 1.3, and perfScore=0.73407]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 89.5498 secs, and comparison 11.1234 sec, and warnIfPerfScore > 0.3, and perfScore=0.124215]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.5482 secs, and comparison 19.672 sec, and warnIfPerfScore > 1.5, and perfScore=1.18877]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.3122 secs, and comparison 4.84486 sec, and warnIfPerfScore > 0.55, and perfScore=0.338513]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 15 secs, and comparison 1.36862 sec, and warnIfPerfScore > 0.1, and perfScore=0.0912417]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.57661 sec, and warnIfPerfScore > 0.5, and perfScore=0.238441]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.9799 secs, and comparison 17.7825 sec, and warnIfPerfScore > 2, and perfScore=1.04727]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.8097 secs, and comparison 26.555 sec, and warnIfPerfScore > 3.6, and perfScore=1.3405]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 24 minutes, 13 seconds]]]

Succeeded
