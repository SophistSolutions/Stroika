Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed May 11 19:11:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.41591 secs, and comparison 4.37832 sec, and warnIfPerfScore > 0.65, and perfScore=0.808418]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.46892 secs, and comparison 2.64249 sec, and warnIfPerfScore > 0.5, and perfScore=0.483184]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.7266 secs, and comparison 7.19541 sec, and warnIfPerfScore > 1.05, and perfScore=0.931251]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.48955 secs, and comparison 7.11064 sec, and warnIfPerfScore > 1.15, and perfScore=1.09571]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 32.1978 secs, and comparison 2.24834 sec, and warnIfPerfScore > 0.48, and perfScore=0.0698289]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 30.5097 secs, and comparison 2.7442 sec, and warnIfPerfScore > 0.57, and perfScore=0.0899452]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.36757 secs, and comparison 18.396 sec, and warnIfPerfScore > 2.9, and perfScore=2.88901]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.9388 secs, and comparison 18.6688 sec, and warnIfPerfScore > 2.9, and perfScore=2.6905]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.7477 secs, and comparison 137.737 sec, and warnIfPerfScore > 24, and perfScore=23.9639]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.69111 secs, and comparison 9.73008 sec, and warnIfPerfScore > 1.7, and perfScore=1.7097]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.63426 secs, and comparison 5.42361 sec, and warnIfPerfScore > 1.5, and perfScore=0.962613]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.53063 secs, and comparison 11.9254 sec, and warnIfPerfScore > 2.1, and perfScore=2.15625]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.64284 secs, and comparison 3.87839 sec, and warnIfPerfScore > 1.6, and perfScore=0.583846]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 6.83435 secs, and comparison 0.654372 sec, and warnIfPerfScore > 0.23, and perfScore=0.0957476]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4814 secs, and comparison 11.914 sec, and warnIfPerfScore > 1.3, and perfScore=1.03768]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.24944 secs, and comparison 5.34431 sec, and warnIfPerfScore > 1.2, and perfScore=0.647839]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.48474 secs, and comparison 1.7108 sec, and warnIfPerfScore > 0.33, and perfScore=0.228571]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.93468 secs, and comparison 38.5951 sec, and warnIfPerfScore > 6, and perfScore=4.8641]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.95095 secs, and comparison 4.97702 sec, and warnIfPerfScore > 0.8, and perfScore=0.625965]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.98916 secs, and comparison 7.71751 sec, and warnIfPerfScore > 1.4, and perfScore=0.965997]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.48298 secs, and comparison 3.40856 sec, and warnIfPerfScore > 0.65, and perfScore=0.455508]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.3037 secs, and comparison 35.9537 sec, and warnIfPerfScore > 4.4, and perfScore=4.32984]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.48795 secs, and comparison 3.34726 sec, and warnIfPerfScore > 0.6, and perfScore=0.44702]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.34073 secs, and comparison 3.32339 sec, and warnIfPerfScore > 0.6, and perfScore=0.452734]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.40087 secs, and comparison 3.2984 sec, and warnIfPerfScore > 0.6, and perfScore=0.445677]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.44618 secs, and comparison 5.02886 sec, and warnIfPerfScore > 1.3, and perfScore=0.675361]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.86498 secs, and comparison 8.46738 sec, and warnIfPerfScore > 1.3, and perfScore=1.07659]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 36.8836 secs, and comparison 5.14303 sec, and warnIfPerfScore > 0.3, and perfScore=0.13944]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.82854 secs, and comparison 9.26012 sec, and warnIfPerfScore > 1.5, and perfScore=1.58876]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.93224 secs, and comparison 2.71625 sec, and warnIfPerfScore > 0.55, and perfScore=0.457879]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.571087 sec, and warnIfPerfScore > 0.1, and perfScore=0.0380725]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.76069 sec, and warnIfPerfScore > 0.5, and perfScore=0.184046]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.57788 secs, and comparison 12.3432 sec, and warnIfPerfScore > 2, and perfScore=1.87647]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.63144 secs, and comparison 13.94 sec, and warnIfPerfScore > 3.6, and perfScore=1.82665]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 58 seconds]]]

Succeeded
