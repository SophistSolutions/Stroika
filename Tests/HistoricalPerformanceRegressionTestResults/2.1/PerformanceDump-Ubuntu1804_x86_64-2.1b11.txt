Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar 23 :43:45 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.24912 secs, and comparison 4.95085 sec, and warnIfPerfScore > 0.62, and perfScore=0.792247]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.51707 secs, and comparison 3.16566 sec, and warnIfPerfScore > 0.5, and perfScore=0.485749]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.89925 secs, and comparison 6.91111 sec, and warnIfPerfScore > 1.05, and perfScore=1.00172]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.90951 secs, and comparison 4.00827 sec, and warnIfPerfScore > 0.48, and perfScore=1.02526]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.78133 secs, and comparison 4.54614 sec, and warnIfPerfScore > 0.57, and perfScore=0.950811]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 3.50604 secs, and comparison 20.347 sec, and warnIfPerfScore > 2.9, and perfScore=5.8034]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 4.10075 secs, and comparison 21.3102 sec, and warnIfPerfScore > 2.9, and perfScore=5.19666]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 5.17593 secs, and comparison 65.3252 sec, and warnIfPerfScore > 9.7, and perfScore=12.6209]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.28678 secs, and comparison 10.9794 sec, and warnIfPerfScore > 1.6, and perfScore=2.07676]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.16018 secs, and comparison 6.166 sec, and warnIfPerfScore > 1.5, and perfScore=1.00094]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.93895 secs, and comparison 10.6993 sec, and warnIfPerfScore > 2.1, and perfScore=3.64053]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.14942 secs, and comparison 4.48091 sec, and warnIfPerfScore > 1.3, and perfScore=1.07989]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.40809 secs, and comparison 1.7153 sec, and warnIfPerfScore > 0.23, and perfScore=0.389126]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.93579 secs, and comparison 4.80587 sec, and warnIfPerfScore > 1.3, and perfScore=1.22107]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.13786 secs, and comparison 7.37659 sec, and warnIfPerfScore > 1.2, and perfScore=2.35084]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 16.1339 secs, and comparison 1.42458 sec, and warnIfPerfScore > 0.33, and perfScore=0.0882973]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.02687 secs, and comparison 43.2449 sec, and warnIfPerfScore > 6, and perfScore=14.287]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.6842 secs, and comparison 3.80908 sec, and warnIfPerfScore > 0.5, and perfScore=0.356515]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 5.75007 secs, and comparison 38.5385 sec, and warnIfPerfScore > 4.4, and perfScore=6.70227]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.2675 secs, and comparison 3.77711 sec, and warnIfPerfScore > 0.6, and perfScore=0.307894]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.86849 secs, and comparison 11.8625 sec, and warnIfPerfScore > 1.5, and perfScore=1.5076]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.0553 secs, and comparison 2.13751 sec, and warnIfPerfScore > 0.55, and perfScore=0.302965]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.11865 sec, and warnIfPerfScore > 0.25, and perfScore=0.0745766]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.74626 sec, and warnIfPerfScore > 0.5, and perfScore=0.249751]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 3 seconds]]]

Succeeded
