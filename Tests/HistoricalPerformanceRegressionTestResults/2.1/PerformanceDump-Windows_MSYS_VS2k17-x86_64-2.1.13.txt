Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 20 19:4:4 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 40.788 secs, and comparison 6.32849 sec, and warnIfPerfScore > 0.65, and perfScore=0.155156]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 40.3228 secs, and comparison 6.13285 sec, and warnIfPerfScore > 0.5, and perfScore=0.152094]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 17.4355 secs, and comparison 12.6437 sec, and warnIfPerfScore > 1.05, and perfScore=0.72517]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 13.4759 secs, and comparison 12.7979 sec, and warnIfPerfScore > 1.15, and perfScore=0.949684]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 20.2333 secs, and comparison 3.53978 sec, and warnIfPerfScore > 0.48, and perfScore=0.174948]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.0962 secs, and comparison 4.10421 sec, and warnIfPerfScore > 0.57, and perfScore=0.204229]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.3595 secs, and comparison 31.5707 sec, and warnIfPerfScore > 2.9, and perfScore=1.63076]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.3874 secs, and comparison 33.913 sec, and warnIfPerfScore > 2.9, and perfScore=1.66343]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 15.5072 secs, and comparison 198.832 sec, and warnIfPerfScore > 24, and perfScore=12.8219]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 20.0531 secs, and comparison 13.7977 sec, and warnIfPerfScore > 1.7, and perfScore=0.688058]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 44.5971 secs, and comparison 43.5861 sec, and warnIfPerfScore > 1.5, and perfScore=0.97733]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 20.2385 secs, and comparison 19.2157 sec, and warnIfPerfScore > 2.1, and perfScore=0.949464]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 38.1916 secs, and comparison 13.232 sec, and warnIfPerfScore > 1.6, and perfScore=0.346463]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 40.4602 secs, and comparison 2.83578 sec, and warnIfPerfScore > 0.23, and perfScore=0.070088]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 17.2519 secs, and comparison 27.2682 sec, and warnIfPerfScore > 1.3, and perfScore=1.5806]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.2053 secs, and comparison 22.8771 sec, and warnIfPerfScore > 1.2, and perfScore=1.32965]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 23.8586 secs, and comparison 6.29475 sec, and warnIfPerfScore > 0.33, and perfScore=0.263836]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.3085 secs, and comparison 52.4949 sec, and warnIfPerfScore > 6, and perfScore=3.21887]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.161 secs, and comparison 21.7453 sec, and warnIfPerfScore > 0.8, and perfScore=1.34554]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 16.3326 secs, and comparison 56.4237 sec, and warnIfPerfScore > 1.4, and perfScore=3.45467]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 24.513 secs, and comparison 5.60015 sec, and warnIfPerfScore > 0.65, and perfScore=0.228456]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 27.3416 secs, and comparison 58.559 sec, and warnIfPerfScore > 4.4, and perfScore=2.14175]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 24.3513 secs, and comparison 6.35649 sec, and warnIfPerfScore > 0.6, and perfScore=0.261033]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 23.7879 secs, and comparison 6.24951 sec, and warnIfPerfScore > 0.6, and perfScore=0.262718]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 24.1037 secs, and comparison 6.59326 sec, and warnIfPerfScore > 0.6, and perfScore=0.273537]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 24.5176 secs, and comparison 15.2557 sec, and warnIfPerfScore > 1.3, and perfScore=0.622235]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 32.3497 secs, and comparison 24.1126 sec, and warnIfPerfScore > 1.3, and perfScore=0.745373]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 123.946 secs, and comparison 8.9478 sec, and warnIfPerfScore > 0.3, and perfScore=0.0721909]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.2699 secs, and comparison 27.0579 sec, and warnIfPerfScore > 1.5, and perfScore=1.27212]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 23.6513 secs, and comparison 7.52937 sec, and warnIfPerfScore > 0.55, and perfScore=0.318349]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.36317 sec, and warnIfPerfScore > 0.1, and perfScore=0.157545]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.05102 sec, and warnIfPerfScore > 0.5, and perfScore=0.336735]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 25.0703 secs, and comparison 27.7057 sec, and warnIfPerfScore > 2, and perfScore=1.10512]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 25.386 secs, and comparison 30.212 sec, and warnIfPerfScore > 3.6, and perfScore=1.1901]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 20 seconds]]]

Succeeded
