Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 11 9:36:5 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 42.524 secs, and comparison 6.8924 sec, and warnIfPerfScore > 0.65, and perfScore=0.162083]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 43.0171 secs, and comparison 6.00536 sec, and warnIfPerfScore > 0.5, and perfScore=0.139604]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 17.5334 secs, and comparison 12.3069 sec, and warnIfPerfScore > 1.05, and perfScore=0.701914]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 13.4427 secs, and comparison 12.5827 sec, and warnIfPerfScore > 1.15, and perfScore=0.936027]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 21.3786 secs, and comparison 4.51977 sec, and warnIfPerfScore > 0.48, and perfScore=0.211416]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.7511 secs, and comparison 4.17013 sec, and warnIfPerfScore > 0.57, and perfScore=0.200959]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.5574 secs, and comparison 32.0297 sec, and warnIfPerfScore > 2.9, and perfScore=1.63773]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.7009 secs, and comparison 34.5507 sec, and warnIfPerfScore > 2.9, and perfScore=1.66905]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.7902 secs, and comparison 192.365 sec, and warnIfPerfScore > 24, and perfScore=13.0063]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 20.2128 secs, and comparison 14.2135 sec, and warnIfPerfScore > 1.7, and perfScore=0.703194]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 40.9047 secs, and comparison 40.208 sec, and warnIfPerfScore > 1.5, and perfScore=0.982967]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.3165 secs, and comparison 17.4851 sec, and warnIfPerfScore > 2.1, and perfScore=1.00973]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 34.1639 secs, and comparison 10.8957 sec, and warnIfPerfScore > 1.6, and perfScore=0.318925]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 36.7389 secs, and comparison 2.26443 sec, and warnIfPerfScore > 0.23, and perfScore=0.0616357]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.2241 secs, and comparison 22.4808 sec, and warnIfPerfScore > 1.3, and perfScore=1.69999]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.2215 secs, and comparison 20.4629 sec, and warnIfPerfScore > 1.2, and perfScore=1.43887]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.7248 secs, and comparison 5.80881 sec, and warnIfPerfScore > 0.33, and perfScore=0.267382]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 14.097 secs, and comparison 55.8322 sec, and warnIfPerfScore > 6, and perfScore=3.96056]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.5724 secs, and comparison 19.9854 sec, and warnIfPerfScore > 0.8, and perfScore=1.4725]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.6877 secs, and comparison 54.4449 sec, and warnIfPerfScore > 1.4, and perfScore=3.97765]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 22.5042 secs, and comparison 5.58858 sec, and warnIfPerfScore > 0.65, and perfScore=0.248335]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 24.7959 secs, and comparison 59.1599 sec, and warnIfPerfScore > 4.4, and perfScore=2.38587]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 22.4742 secs, and comparison 6.07892 sec, and warnIfPerfScore > 0.6, and perfScore=0.270484]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 22.3318 secs, and comparison 6.2643 sec, and warnIfPerfScore > 0.6, and perfScore=0.28051]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 21.9561 secs, and comparison 6.32511 sec, and warnIfPerfScore > 0.6, and perfScore=0.28808]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 22.0861 secs, and comparison 14.1179 sec, and warnIfPerfScore > 1.3, and perfScore=0.63922]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 29.974 secs, and comparison 22.5464 sec, and warnIfPerfScore > 1.3, and perfScore=0.752201]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 108.403 secs, and comparison 8.64898 sec, and warnIfPerfScore > 0.3, and perfScore=0.0797858]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.6324 secs, and comparison 22.5715 sec, and warnIfPerfScore > 1.5, and perfScore=1.28012]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 19.7384 secs, and comparison 6.5272 sec, and warnIfPerfScore > 0.55, and perfScore=0.330686]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.73161 sec, and warnIfPerfScore > 0.1, and perfScore=0.115441]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.69231 sec, and warnIfPerfScore > 0.5, and perfScore=0.312821]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.0914 secs, and comparison 22.6983 sec, and warnIfPerfScore > 2, and perfScore=1.12975]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.6558 secs, and comparison 27.3254 sec, and warnIfPerfScore > 3.6, and perfScore=1.20611]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 34 seconds]]]

Succeeded
