Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 31 17:58:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.27451 secs, and comparison 4.77611 sec, and warnIfPerfScore > 0.65, and perfScore=0.656554]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.78895 secs, and comparison 2.98696 sec, and warnIfPerfScore > 0.5, and perfScore=0.339854]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.86943 secs, and comparison 8.66879 sec, and warnIfPerfScore > 1.05, and perfScore=0.878347]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.15301 secs, and comparison 8.52018 sec, and warnIfPerfScore > 1.15, and perfScore=1.04503]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.7672 secs, and comparison 2.9897 sec, and warnIfPerfScore > 0.48, and perfScore=0.341009]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.8299 secs, and comparison 3.74112 sec, and warnIfPerfScore > 0.57, and perfScore=0.423687]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.33509 secs, and comparison 24.556 sec, and warnIfPerfScore > 2.9, and perfScore=2.63051]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.3334 secs, and comparison 25.2163 sec, and warnIfPerfScore > 2.9, and perfScore=2.44027]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 8.06986 secs, and comparison 128.578 sec, and warnIfPerfScore > 24, and perfScore=15.9331]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.74079 secs, and comparison 12.5306 sec, and warnIfPerfScore > 1.7, and perfScore=1.61878]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.82203 secs, and comparison 8.622 sec, and warnIfPerfScore > 1.5, and perfScore=0.977326]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.28375 secs, and comparison 14.8803 sec, and warnIfPerfScore > 2.1, and perfScore=2.04295]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.59217 secs, and comparison 5.61669 sec, and warnIfPerfScore > 1.6, and perfScore=0.58555]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 10.0488 secs, and comparison 0.974897 sec, and warnIfPerfScore > 0.23, and perfScore=0.0970158]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.026 secs, and comparison 11.5797 sec, and warnIfPerfScore > 1.3, and perfScore=1.05022]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.17608 secs, and comparison 7.3052 sec, and warnIfPerfScore > 1.2, and perfScore=0.893485]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.607 secs, and comparison 2.74116 sec, and warnIfPerfScore > 0.33, and perfScore=0.236164]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 7.85669 secs, and comparison 41.5984 sec, and warnIfPerfScore > 6, and perfScore=5.29465]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 7.88488 secs, and comparison 6.82084 sec, and warnIfPerfScore > 0.8, and perfScore=0.865054]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.92385 secs, and comparison 10.5177 sec, and warnIfPerfScore > 1.4, and perfScore=1.32734]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.6139 secs, and comparison 3.71605 sec, and warnIfPerfScore > 0.65, and perfScore=0.319965]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.69312 secs, and comparison 37.795 sec, and warnIfPerfScore > 4.4, and perfScore=4.34769]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.1723 secs, and comparison 3.6832 sec, and warnIfPerfScore > 0.6, and perfScore=0.329674]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2755 secs, and comparison 3.65307 sec, and warnIfPerfScore > 0.6, and perfScore=0.323982]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.2029 secs, and comparison 3.60187 sec, and warnIfPerfScore > 0.6, and perfScore=0.321512]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.2368 secs, and comparison 7.55063 sec, and warnIfPerfScore > 1.3, and perfScore=0.671953]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 12.5006 secs, and comparison 11.0682 sec, and warnIfPerfScore > 1.3, and perfScore=0.885414]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 51.51 secs, and comparison 9.07838 sec, and warnIfPerfScore > 0.3, and perfScore=0.176245]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.29515 secs, and comparison 12.6734 sec, and warnIfPerfScore > 1.5, and perfScore=1.5278]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.94362 secs, and comparison 3.74613 sec, and warnIfPerfScore > 0.55, and perfScore=0.376737]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 15 secs, and comparison 0.949681 sec, and warnIfPerfScore > 0.1, and perfScore=0.0633121]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.33833 sec, and warnIfPerfScore > 0.5, and perfScore=0.222555]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.27182 secs, and comparison 14.751 sec, and warnIfPerfScore > 2, and perfScore=1.59095]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.67434 secs, and comparison 17.3798 sec, and warnIfPerfScore > 3.6, and perfScore=1.79649]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 34 seconds]]]

Succeeded
