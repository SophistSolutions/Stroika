Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 17:47:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 5.44108 secs, and comparison 4.64002 sec, and warnIfPerfScore > 0.65, and perfScore=0.852775]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.43053 secs, and comparison 2.97049 sec, and warnIfPerfScore > 0.5, and perfScore=0.546997]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.34703 secs, and comparison 7.02984 sec, and warnIfPerfScore > 1.05, and perfScore=1.10758]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.97068 secs, and comparison 7.0635 sec, and warnIfPerfScore > 1.15, and perfScore=1.18303]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 4.00635 secs, and comparison 2.37796 sec, and warnIfPerfScore > 0.48, and perfScore=0.593548]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.52076 secs, and comparison 3.10216 sec, and warnIfPerfScore > 0.57, and perfScore=0.561907]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.49401 secs, and comparison 17.746 sec, and warnIfPerfScore > 2.9, and perfScore=5.07897]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 5.82989 secs, and comparison 18.0111 sec, and warnIfPerfScore > 2.9, and perfScore=3.08944]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 7.74479 secs, and comparison 62.9141 sec, and warnIfPerfScore > 24, and perfScore=8.12341]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.35273 secs, and comparison 10.32 sec, and warnIfPerfScore > 1.7, and perfScore=1.92799]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.07526 secs, and comparison 5.75133 sec, and warnIfPerfScore > 1.5, and perfScore=0.94668]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 3.04594 secs, and comparison 12.3658 sec, and warnIfPerfScore > 2.1, and perfScore=4.05977]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.16155 secs, and comparison 4.13976 sec, and warnIfPerfScore > 1.6, and perfScore=0.994765]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 4.3522 secs, and comparison 1.61495 sec, and warnIfPerfScore > 0.23, and perfScore=0.371064]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.8654 secs, and comparison 4.55804 sec, and warnIfPerfScore > 1.3, and perfScore=1.17919]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.88624 secs, and comparison 7.21 sec, and warnIfPerfScore > 1.2, and perfScore=2.49806]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 16.4228 secs, and comparison 1.74192 sec, and warnIfPerfScore > 0.33, and perfScore=0.106067]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.78353 secs, and comparison 40.8823 sec, and warnIfPerfScore > 6, and perfScore=14.6872]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.88741 secs, and comparison 7.01922 sec, and warnIfPerfScore > 0.8, and perfScore=2.43097]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.91446 secs, and comparison 7.81585 sec, and warnIfPerfScore > 1.4, and perfScore=2.68175]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 16.6189 secs, and comparison 3.80908 sec, and warnIfPerfScore > 0.65, and perfScore=0.229202]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 4.33673 secs, and comparison 38.2509 sec, and warnIfPerfScore > 4.4, and perfScore=8.82021]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.6984 secs, and comparison 3.72042 sec, and warnIfPerfScore > 0.6, and perfScore=0.318028]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.7096 secs, and comparison 3.70682 sec, and warnIfPerfScore > 0.6, and perfScore=0.316561]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.7216 secs, and comparison 3.88464 sec, and warnIfPerfScore > 0.6, and perfScore=0.33141]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 12.284 secs, and comparison 6.66241 sec, and warnIfPerfScore > 1.3, and perfScore=0.542365]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 19.3093 secs, and comparison 9.72329 sec, and warnIfPerfScore > 1.3, and perfScore=0.503555]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 18.6758 secs, and comparison 7.48138 sec, and warnIfPerfScore > 0.3, and perfScore=0.400591]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.19907 secs, and comparison 13.9172 sec, and warnIfPerfScore > 1.5, and perfScore=1.93319]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.57104 secs, and comparison 2.85625 sec, and warnIfPerfScore > 0.55, and perfScore=0.434672]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.842912 sec, and warnIfPerfScore > 0.1, and perfScore=0.0561942]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.14062 sec, and warnIfPerfScore > 0.5, and perfScore=0.209374]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 18 seconds]]]

Succeeded
