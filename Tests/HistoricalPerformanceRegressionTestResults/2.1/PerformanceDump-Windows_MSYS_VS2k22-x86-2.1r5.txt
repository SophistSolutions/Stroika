Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 19:54:51 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.64096 secs, and comparison 4.81165 sec, and warnIfPerfScore > 0.65, and perfScore=0.629718]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.87851 secs, and comparison 2.95703 sec, and warnIfPerfScore > 0.5, and perfScore=0.375328]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.3016 secs, and comparison 8.55669 sec, and warnIfPerfScore > 1.05, and perfScore=0.830619]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.49321 secs, and comparison 8.25242 sec, and warnIfPerfScore > 1.15, and perfScore=1.10132]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 36.5357 secs, and comparison 2.84014 sec, and warnIfPerfScore > 0.48, and perfScore=0.077736]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 34.4635 secs, and comparison 3.32822 sec, and warnIfPerfScore > 0.57, and perfScore=0.0965722]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.32816 secs, and comparison 23.2001 sec, and warnIfPerfScore > 2.9, and perfScore=2.48711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.73787 secs, and comparison 24.593 sec, and warnIfPerfScore > 2.9, and perfScore=2.5255]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.95539 secs, and comparison 171.916 sec, and warnIfPerfScore > 24, and perfScore=19.1969]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.85395 secs, and comparison 12.1829 sec, and warnIfPerfScore > 1.7, and perfScore=1.37599]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.49045 secs, and comparison 9.15476 sec, and warnIfPerfScore > 1.5, and perfScore=0.964628]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.4385 secs, and comparison 14.3799 sec, and warnIfPerfScore > 2.1, and perfScore=1.37758]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.0907 secs, and comparison 9.81622 sec, and warnIfPerfScore > 1.6, and perfScore=0.885086]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.3918 secs, and comparison 1.3078 sec, and warnIfPerfScore > 0.23, and perfScore=0.125849]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0853 secs, and comparison 13.5239 sec, and warnIfPerfScore > 1.3, and perfScore=1.03352]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.5892 secs, and comparison 5.89732 sec, and warnIfPerfScore > 1.2, and perfScore=0.55692]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 6.60813 secs, and comparison 1.55105 sec, and warnIfPerfScore > 0.33, and perfScore=0.234718]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.2079 secs, and comparison 39.981 sec, and warnIfPerfScore > 6, and perfScore=3.91666]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.1604 secs, and comparison 5.60686 sec, and warnIfPerfScore > 0.8, and perfScore=0.551836]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.061 secs, and comparison 9.72645 sec, and warnIfPerfScore > 1.4, and perfScore=0.966743]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.51129 secs, and comparison 3.47341 sec, and warnIfPerfScore > 0.65, and perfScore=0.533445]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.157 secs, and comparison 36.969 sec, and warnIfPerfScore > 4.4, and perfScore=3.63976]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.73916 secs, and comparison 3.47063 sec, and warnIfPerfScore > 0.6, and perfScore=0.514994]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.68084 secs, and comparison 3.43186 sec, and warnIfPerfScore > 0.6, and perfScore=0.513687]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.7764 secs, and comparison 3.41785 sec, and warnIfPerfScore > 0.6, and perfScore=0.504376]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.67574 secs, and comparison 4.93156 sec, and warnIfPerfScore > 1.3, and perfScore=0.738728]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.16556 secs, and comparison 8.55065 sec, and warnIfPerfScore > 1.3, and perfScore=1.1933]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.9433 secs, and comparison 5.9991 sec, and warnIfPerfScore > 0.3, and perfScore=0.125129]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.31506 secs, and comparison 13.0581 sec, and warnIfPerfScore > 1.5, and perfScore=1.40182]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.50826 secs, and comparison 2.9161 sec, and warnIfPerfScore > 0.55, and perfScore=0.388385]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.969204 sec, and warnIfPerfScore > 0.1, and perfScore=0.0646136]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.13021 sec, and warnIfPerfScore > 0.5, and perfScore=0.20868]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.68315 secs, and comparison 9.07403 sec, and warnIfPerfScore > 2, and perfScore=1.04502]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.86461 secs, and comparison 30.8328 sec, and warnIfPerfScore > 3.6, and perfScore=3.1256]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 43 seconds]]]

Succeeded
