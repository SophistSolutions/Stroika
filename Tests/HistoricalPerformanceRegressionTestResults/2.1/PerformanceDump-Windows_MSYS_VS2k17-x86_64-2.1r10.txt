Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri May 13 14:57:45 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.31369 secs, and comparison 5.54427 sec, and warnIfPerfScore > 0.65, and perfScore=0.595282]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.74354 secs, and comparison 3.37427 sec, and warnIfPerfScore > 0.5, and perfScore=0.346309]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 12.58 secs, and comparison 10.2893 sec, and warnIfPerfScore > 1.05, and perfScore=0.817908]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.19416 secs, and comparison 10.2442 sec, and warnIfPerfScore > 1.15, and perfScore=1.11421]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.1655 secs, and comparison 3.53214 sec, and warnIfPerfScore > 0.48, and perfScore=0.290341]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.4891 secs, and comparison 4.38074 sec, and warnIfPerfScore > 0.57, and perfScore=0.350766]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.9828 secs, and comparison 29.3443 sec, and warnIfPerfScore > 2.9, and perfScore=2.67184]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.414 secs, and comparison 30.5853 sec, and warnIfPerfScore > 2.9, and perfScore=2.67962]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.28056 secs, and comparison 159.742 sec, and warnIfPerfScore > 24, and perfScore=17.2126]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.4092 secs, and comparison 14.7836 sec, and warnIfPerfScore > 1.7, and perfScore=1.42024]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.85 secs, and comparison 10.2645 sec, and warnIfPerfScore > 1.5, and perfScore=0.946035]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.65291 secs, and comparison 17.496 sec, and warnIfPerfScore > 2.1, and perfScore=1.81251]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 11.3046 secs, and comparison 7.51591 sec, and warnIfPerfScore > 1.6, and perfScore=0.664853]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.723 secs, and comparison 1.38651 sec, and warnIfPerfScore > 0.23, and perfScore=0.118272]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.6399 secs, and comparison 13.7916 sec, and warnIfPerfScore > 1.3, and perfScore=1.01112]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.7075 secs, and comparison 8.33106 sec, and warnIfPerfScore > 1.2, and perfScore=0.778059]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 13.5492 secs, and comparison 2.82227 sec, and warnIfPerfScore > 0.33, and perfScore=0.208299]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 10.4112 secs, and comparison 51.0406 sec, and warnIfPerfScore > 6, and perfScore=4.90245]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.80355 secs, and comparison 7.54866 sec, and warnIfPerfScore > 0.8, and perfScore=0.769993]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.76495 secs, and comparison 16.3523 sec, and warnIfPerfScore > 1.4, and perfScore=1.67459]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.6591 secs, and comparison 4.36707 sec, and warnIfPerfScore > 0.65, and perfScore=0.319718]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 11.7231 secs, and comparison 47.856 sec, and warnIfPerfScore > 4.4, and perfScore=4.0822]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.2522 secs, and comparison 4.54991 sec, and warnIfPerfScore > 0.6, and perfScore=0.343331]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.6544 secs, and comparison 4.51864 sec, and warnIfPerfScore > 0.6, and perfScore=0.357081]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.439 secs, and comparison 4.46805 sec, and warnIfPerfScore > 0.6, and perfScore=0.33247]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 13.0854 secs, and comparison 9.079 sec, and warnIfPerfScore > 1.3, and perfScore=0.693826]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 15.5837 secs, and comparison 12.9641 sec, and warnIfPerfScore > 1.3, and perfScore=0.831899]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 66.1258 secs, and comparison 8.06689 sec, and warnIfPerfScore > 0.3, and perfScore=0.121993]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.0092 secs, and comparison 15.318 sec, and warnIfPerfScore > 1.5, and perfScore=1.53039]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 16.5992 secs, and comparison 5.05319 sec, and warnIfPerfScore > 0.55, and perfScore=0.304424]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.04569 sec, and warnIfPerfScore > 0.1, and perfScore=0.0697128]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.95263 sec, and warnIfPerfScore > 0.5, and perfScore=0.263509]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.6933 secs, and comparison 20.868 sec, and warnIfPerfScore > 2, and perfScore=1.78461]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.6065 secs, and comparison 21.4251 sec, and warnIfPerfScore > 3.6, and perfScore=1.84595]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 43 seconds]]]

Succeeded
