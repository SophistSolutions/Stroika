Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb 27 21:28:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.47833 secs, and comparison 4.84678 sec, and warnIfPerfScore > 0.65, and perfScore=0.64811]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.52195 secs, and comparison 2.94857 sec, and warnIfPerfScore > 0.5, and perfScore=0.391996]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 10.0695 secs, and comparison 8.74749 sec, and warnIfPerfScore > 1.05, and perfScore=0.868707]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.9271 secs, and comparison 8.95725 sec, and warnIfPerfScore > 1.15, and perfScore=1.12995]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.83727 secs, and comparison 2.93913 sec, and warnIfPerfScore > 0.48, and perfScore=0.332584]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.97006 secs, and comparison 3.73853 sec, and warnIfPerfScore > 0.57, and perfScore=0.416779]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.30295 secs, and comparison 25.0349 sec, and warnIfPerfScore > 2.9, and perfScore=2.69107]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.1052 secs, and comparison 25.0935 sec, and warnIfPerfScore > 2.9, and perfScore=2.48324]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 8.30818 secs, and comparison 129.588 sec, and warnIfPerfScore > 24, and perfScore=15.5977]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.92166 secs, and comparison 12.5316 sec, and warnIfPerfScore > 1.7, and perfScore=1.58194]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.12243 secs, and comparison 9.08928 sec, and warnIfPerfScore > 1.5, and perfScore=0.996367]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.26471 secs, and comparison 14.7029 sec, and warnIfPerfScore > 2.1, and perfScore=2.02388]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.56763 secs, and comparison 6.17074 sec, and warnIfPerfScore > 1.6, and perfScore=0.64496]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 9.98707 secs, and comparison 0.976854 sec, and warnIfPerfScore > 0.23, and perfScore=0.0978118]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1904 secs, and comparison 11.5124 sec, and warnIfPerfScore > 1.3, and perfScore=1.02878]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.01566 secs, and comparison 7.71768 sec, and warnIfPerfScore > 1.2, and perfScore=0.962824]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.3606 secs, and comparison 2.593 sec, and warnIfPerfScore > 0.33, and perfScore=0.228245]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 7.89613 secs, and comparison 43.3475 sec, and warnIfPerfScore > 6, and perfScore=5.48971]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.01878 secs, and comparison 7.80573 sec, and warnIfPerfScore > 0.8, and perfScore=0.973431]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.99873 secs, and comparison 10.7589 sec, and warnIfPerfScore > 1.4, and perfScore=1.34507]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.7043 secs, and comparison 3.82394 sec, and warnIfPerfScore > 0.65, and perfScore=0.326712]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 8.72802 secs, and comparison 39.3086 sec, and warnIfPerfScore > 4.4, and perfScore=4.50373]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.3446 secs, and comparison 3.58127 sec, and warnIfPerfScore > 0.6, and perfScore=0.31568]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.2174 secs, and comparison 3.92483 sec, and warnIfPerfScore > 0.6, and perfScore=0.349889]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.7105 secs, and comparison 3.59688 sec, and warnIfPerfScore > 0.6, and perfScore=0.307149]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.4054 secs, and comparison 7.26962 sec, and warnIfPerfScore > 1.3, and perfScore=0.637386]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.6873 secs, and comparison 10.9439 sec, and warnIfPerfScore > 1.3, and perfScore=0.862582]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 52.7726 secs, and comparison 9.9285 sec, and warnIfPerfScore > 0.3, and perfScore=0.188138]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.03949 secs, and comparison 13.0301 sec, and warnIfPerfScore > 1.5, and perfScore=1.62076]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.1865 secs, and comparison 3.89525 sec, and warnIfPerfScore > 0.55, and perfScore=0.382393]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 15 secs, and comparison 0.90415 sec, and warnIfPerfScore > 0.1, and perfScore=0.0602767]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.39688 sec, and warnIfPerfScore > 0.5, and perfScore=0.226459]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.42719 secs, and comparison 15.0527 sec, and warnIfPerfScore > 2, and perfScore=1.59673]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 9.53393 secs, and comparison 18.8602 sec, and warnIfPerfScore > 3.6, and perfScore=1.97822]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 47 seconds]]]

Succeeded
