Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug  1 1:2:35 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.06412 secs, and comparison 5.82876 sec, and warnIfPerfScore > 0.65, and perfScore=0.643059]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.1936 secs, and comparison 3.51336 sec, and warnIfPerfScore > 0.5, and perfScore=0.344663]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 11.6203 secs, and comparison 10.8042 sec, and warnIfPerfScore > 1.05, and perfScore=0.929767]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.25373 secs, and comparison 10.5351 sec, and warnIfPerfScore > 1.15, and perfScore=1.13847]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.4419 secs, and comparison 3.32485 sec, and warnIfPerfScore > 0.48, and perfScore=0.290586]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.8511 secs, and comparison 4.30734 sec, and warnIfPerfScore > 0.57, and perfScore=0.363454]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.846 secs, and comparison 29.6062 sec, and warnIfPerfScore > 2.9, and perfScore=2.7297]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.0799 secs, and comparison 31.5354 sec, and warnIfPerfScore > 2.9, and perfScore=2.84618]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 9.73654 secs, and comparison 154.942 sec, and warnIfPerfScore > 24, and perfScore=15.9135]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.4434 secs, and comparison 15.1168 sec, and warnIfPerfScore > 1.7, and perfScore=1.4475]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.0115 secs, and comparison 11.2813 sec, and warnIfPerfScore > 1.5, and perfScore=1.0245]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.46021 secs, and comparison 18.3137 sec, and warnIfPerfScore > 2.1, and perfScore=1.93587]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.5255 secs, and comparison 8.0166 sec, and warnIfPerfScore > 1.6, and perfScore=0.695556]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.1117 secs, and comparison 1.49473 sec, and warnIfPerfScore > 0.23, and perfScore=0.123412]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.6582 secs, and comparison 13.8787 sec, and warnIfPerfScore > 1.3, and perfScore=1.01615]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.2727 secs, and comparison 9.3336 sec, and warnIfPerfScore > 1.2, and perfScore=0.827986]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15.4015 secs, and comparison 2.98336 sec, and warnIfPerfScore > 0.33, and perfScore=0.193706]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 10.5328 secs, and comparison 51.6172 sec, and warnIfPerfScore > 6, and perfScore=4.90063]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 10.6652 secs, and comparison 8.68359 sec, and warnIfPerfScore > 0.8, and perfScore=0.814197]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.7825 secs, and comparison 15.3264 sec, and warnIfPerfScore > 1.4, and perfScore=1.56671]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.5585 secs, and comparison 4.46079 sec, and warnIfPerfScore > 0.65, and perfScore=0.306403]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 11.4733 secs, and comparison 48.1952 sec, and warnIfPerfScore > 4.4, and perfScore=4.20066]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.681 secs, and comparison 4.71891 sec, and warnIfPerfScore > 0.6, and perfScore=0.344925]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.2022 secs, and comparison 4.71004 sec, and warnIfPerfScore > 0.6, and perfScore=0.331642]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.7199 secs, and comparison 4.30346 sec, and warnIfPerfScore > 0.6, and perfScore=0.313665]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 14.1597 secs, and comparison 9.91894 sec, and warnIfPerfScore > 1.3, and perfScore=0.700507]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 15.7542 secs, and comparison 14.0702 sec, and warnIfPerfScore > 1.3, and perfScore=0.893108]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 64.874 secs, and comparison 8.42358 sec, and warnIfPerfScore > 0.3, and perfScore=0.129845]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.98008 secs, and comparison 16.4993 sec, and warnIfPerfScore > 1.5, and perfScore=1.65323]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.2122 secs, and comparison 5.39282 sec, and warnIfPerfScore > 0.55, and perfScore=0.332641]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 15 secs, and comparison 0.956479 sec, and warnIfPerfScore > 0.1, and perfScore=0.0637653]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.71338 sec, and warnIfPerfScore > 0.5, and perfScore=0.314225]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.9248 secs, and comparison 21.5567 sec, and warnIfPerfScore > 2, and perfScore=1.80773]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.6671 secs, and comparison 20.571 sec, and warnIfPerfScore > 3.6, and perfScore=1.62397]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 55 seconds]]]

Succeeded
