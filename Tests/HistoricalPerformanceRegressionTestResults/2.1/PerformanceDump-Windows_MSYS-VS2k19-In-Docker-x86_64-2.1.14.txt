Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 20:19:53 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.92318 secs, and comparison 4.05743 sec, and warnIfPerfScore > 0.65, and perfScore=0.824148]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.14683 secs, and comparison 2.33871 sec, and warnIfPerfScore > 0.5, and perfScore=0.454399]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.28548 secs, and comparison 6.62173 sec, and warnIfPerfScore > 1.05, and perfScore=0.908894]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.04762 secs, and comparison 6.63895 sec, and warnIfPerfScore > 1.15, and perfScore=1.09778]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.40672 secs, and comparison 1.99917 sec, and warnIfPerfScore > 0.48, and perfScore=0.212526]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.04419 secs, and comparison 2.493 sec, and warnIfPerfScore > 0.57, and perfScore=0.275647]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.38526 secs, and comparison 17.1957 sec, and warnIfPerfScore > 2.9, and perfScore=2.69303]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.75319 secs, and comparison 17.5735 sec, and warnIfPerfScore > 2.9, and perfScore=2.60225]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 5.65241 secs, and comparison 122.258 sec, and warnIfPerfScore > 24, and perfScore=21.6293]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.32998 secs, and comparison 9.27544 sec, and warnIfPerfScore > 1.7, and perfScore=1.74024]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.82705 secs, and comparison 5.50061 sec, and warnIfPerfScore > 1.5, and perfScore=0.943979]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.92713 secs, and comparison 10.9202 sec, and warnIfPerfScore > 2.1, and perfScore=2.21634]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.77546 secs, and comparison 4.63282 sec, and warnIfPerfScore > 1.6, and perfScore=0.683765]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 7.11311 secs, and comparison 0.665865 sec, and warnIfPerfScore > 0.23, and perfScore=0.093611]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1618 secs, and comparison 11.4945 sec, and warnIfPerfScore > 1.3, and perfScore=1.0298]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.9619 secs, and comparison 5.14792 sec, and warnIfPerfScore > 1.2, and perfScore=0.64657]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.97099 secs, and comparison 1.90745 sec, and warnIfPerfScore > 0.33, and perfScore=0.239299]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 7.66191 secs, and comparison 36.3701 sec, and warnIfPerfScore > 6, and perfScore=4.74688]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.63921 secs, and comparison 4.95619 sec, and warnIfPerfScore > 0.8, and perfScore=0.648783]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.64468 secs, and comparison 7.5742 sec, and warnIfPerfScore > 1.4, and perfScore=0.990781]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.97922 secs, and comparison 3.19443 sec, and warnIfPerfScore > 0.65, and perfScore=0.400344]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.09795 secs, and comparison 33.8898 sec, and warnIfPerfScore > 4.4, and perfScore=4.18498]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.84288 secs, and comparison 3.13315 sec, and warnIfPerfScore > 0.6, and perfScore=0.39949]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.91701 secs, and comparison 3.11805 sec, and warnIfPerfScore > 0.6, and perfScore=0.393842]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.87412 secs, and comparison 3.16937 sec, and warnIfPerfScore > 0.6, and perfScore=0.402504]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.8433 secs, and comparison 4.60627 sec, and warnIfPerfScore > 1.3, and perfScore=0.587287]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.45662 secs, and comparison 7.8738 sec, and warnIfPerfScore > 1.3, and perfScore=0.931082]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 36.4337 secs, and comparison 4.76336 sec, and warnIfPerfScore > 0.3, and perfScore=0.13074]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.73895 secs, and comparison 8.7735 sec, and warnIfPerfScore > 1.5, and perfScore=1.52877]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.83679 secs, and comparison 2.66152 sec, and warnIfPerfScore > 0.55, and perfScore=0.45599]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.58394 sec, and warnIfPerfScore > 0.1, and perfScore=0.0389293]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.67496 sec, and warnIfPerfScore > 0.5, and perfScore=0.178331]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.44544 secs, and comparison 12.495 sec, and warnIfPerfScore > 2, and perfScore=1.93857]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.03309 secs, and comparison 13.6527 sec, and warnIfPerfScore > 3.6, and perfScore=1.94121]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 42 seconds]]]

Succeeded
