Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Oct 23 17:35:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.77113 secs, and comparison 4.72886 sec, and warnIfPerfScore > 0.65, and perfScore=0.819399]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.47779 secs, and comparison 2.89455 sec, and warnIfPerfScore > 0.5, and perfScore=0.446842]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.18147 secs, and comparison 8.28541 sec, and warnIfPerfScore > 1.05, and perfScore=0.902406]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.52794 secs, and comparison 8.27534 sec, and warnIfPerfScore > 1.15, and perfScore=1.09928]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.01432 secs, and comparison 2.62168 sec, and warnIfPerfScore > 0.48, and perfScore=0.327124]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.17509 secs, and comparison 3.15432 sec, and warnIfPerfScore > 0.57, and perfScore=0.385845]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.85391 secs, and comparison 22.5062 sec, and warnIfPerfScore > 2.9, and perfScore=2.8656]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.50708 secs, and comparison 22.8868 sec, and warnIfPerfScore > 2.9, and perfScore=2.69032]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.20684 secs, and comparison 146.455 sec, and warnIfPerfScore > 24, and perfScore=20.3217]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.26054 secs, and comparison 11.495 sec, and warnIfPerfScore > 1.7, and perfScore=1.58322]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.79933 secs, and comparison 7.00703 sec, and warnIfPerfScore > 1.5, and perfScore=0.898414]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.48316 secs, and comparison 13.8351 sec, and warnIfPerfScore > 2.1, and perfScore=2.13401]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.2024 secs, and comparison 4.81389 sec, and warnIfPerfScore > 1.6, and perfScore=0.338948]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 14.7347 secs, and comparison 0.873992 sec, and warnIfPerfScore > 0.23, and perfScore=0.059315]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.2147 secs, and comparison 13.6138 sec, and warnIfPerfScore > 1.3, and perfScore=1.0302]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 13.7463 secs, and comparison 6.6445 sec, and warnIfPerfScore > 1.2, and perfScore=0.483367]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.752 secs, and comparison 2.38034 sec, and warnIfPerfScore > 0.33, and perfScore=0.221385]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 13.0922 secs, and comparison 43.3051 sec, and warnIfPerfScore > 6, and perfScore=3.3077]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 12.9787 secs, and comparison 6.17114 sec, and warnIfPerfScore > 0.8, and perfScore=0.475484]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 12.9535 secs, and comparison 9.49377 sec, and warnIfPerfScore > 1.4, and perfScore=0.732914]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.2688 secs, and comparison 3.91019 sec, and warnIfPerfScore > 0.65, and perfScore=0.380785]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.2427 secs, and comparison 40.2763 sec, and warnIfPerfScore > 4.4, and perfScore=3.04139]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.5923 secs, and comparison 3.53345 sec, and warnIfPerfScore > 0.6, and perfScore=0.411235]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.3027 secs, and comparison 3.72852 sec, and warnIfPerfScore > 0.6, and perfScore=0.361899]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.3649 secs, and comparison 3.84784 sec, and warnIfPerfScore > 0.6, and perfScore=0.371237]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 10.2716 secs, and comparison 6.25711 sec, and warnIfPerfScore > 1.3, and perfScore=0.609164]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 11.2064 secs, and comparison 9.71657 sec, and warnIfPerfScore > 1.3, and perfScore=0.867055]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 46.7372 secs, and comparison 7.08593 sec, and warnIfPerfScore > 0.3, and perfScore=0.151612]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.24049 secs, and comparison 11.5735 sec, and warnIfPerfScore > 1.5, and perfScore=1.59845]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.87572 secs, and comparison 3.27732 sec, and warnIfPerfScore > 0.55, and perfScore=0.41613]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.758611 sec, and warnIfPerfScore > 0.1, and perfScore=0.0505741]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.22044 sec, and warnIfPerfScore > 0.5, and perfScore=0.214696]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.3018 secs, and comparison 14.1519 sec, and warnIfPerfScore > 2, and perfScore=1.70468]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.0883 secs, and comparison 16.6559 sec, and warnIfPerfScore > 3.6, and perfScore=1.65102]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 40 seconds]]]

Succeeded
