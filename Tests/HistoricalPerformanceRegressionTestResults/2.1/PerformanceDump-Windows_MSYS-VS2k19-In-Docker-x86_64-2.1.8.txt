Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov  3 19:29:51 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.32056 secs, and comparison 4.74012 sec, and warnIfPerfScore > 0.65, and perfScore=0.749952]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.12152 secs, and comparison 2.80582 sec, and warnIfPerfScore > 0.5, and perfScore=0.458354]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 9.83001 secs, and comparison 8.44186 sec, and warnIfPerfScore > 1.05, and perfScore=0.858784]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.6206 secs, and comparison 8.2293 sec, and warnIfPerfScore > 1.15, and perfScore=1.07987]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 12.4654 secs, and comparison 2.61434 sec, and warnIfPerfScore > 0.48, and perfScore=0.209728]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 12.1688 secs, and comparison 3.26937 sec, and warnIfPerfScore > 0.57, and perfScore=0.268669]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.84795 secs, and comparison 22.2098 sec, and warnIfPerfScore > 2.9, and perfScore=2.51016]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.29114 secs, and comparison 22.3894 sec, and warnIfPerfScore > 2.9, and perfScore=2.40976]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.7339 secs, and comparison 152.496 sec, and warnIfPerfScore > 24, and perfScore=19.7179]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.73932 secs, and comparison 11.2417 sec, and warnIfPerfScore > 1.7, and perfScore=1.45255]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.72043 secs, and comparison 7.35313 sec, and warnIfPerfScore > 1.5, and perfScore=0.952426]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.08391 secs, and comparison 13.453 sec, and warnIfPerfScore > 2.1, and perfScore=1.89909]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 14.6479 secs, and comparison 5.48475 sec, and warnIfPerfScore > 1.6, and perfScore=0.374439]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15.3255 secs, and comparison 0.85635 sec, and warnIfPerfScore > 0.23, and perfScore=0.0558774]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.0065 secs, and comparison 13.429 sec, and warnIfPerfScore > 1.3, and perfScore=1.03248]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 9.85618 secs, and comparison 6.44289 sec, and warnIfPerfScore > 1.2, and perfScore=0.65369]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.3256 secs, and comparison 2.32617 sec, and warnIfPerfScore > 0.33, and perfScore=0.225282]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.46776 secs, and comparison 41.8672 sec, and warnIfPerfScore > 6, and perfScore=4.42208]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 9.48515 secs, and comparison 6.26327 sec, and warnIfPerfScore > 0.8, and perfScore=0.660323]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.49924 secs, and comparison 9.97153 sec, and warnIfPerfScore > 1.4, and perfScore=1.04972]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.2236 secs, and comparison 3.74882 sec, and warnIfPerfScore > 0.65, and perfScore=0.366683]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.9463 secs, and comparison 39.2874 sec, and warnIfPerfScore > 4.4, and perfScore=3.94995]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.0192 secs, and comparison 3.65727 sec, and warnIfPerfScore > 0.6, and perfScore=0.365025]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.0661 secs, and comparison 3.6639 sec, and warnIfPerfScore > 0.6, and perfScore=0.363984]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.0708 secs, and comparison 3.66737 sec, and warnIfPerfScore > 0.6, and perfScore=0.36416]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.0746 secs, and comparison 6.09266 sec, and warnIfPerfScore > 1.3, and perfScore=0.604756]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 10.961 secs, and comparison 9.53004 sec, and warnIfPerfScore > 1.3, and perfScore=0.869452]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 48.2593 secs, and comparison 5.79596 sec, and warnIfPerfScore > 0.3, and perfScore=0.1201]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.77125 secs, and comparison 11.7679 sec, and warnIfPerfScore > 1.5, and perfScore=1.51429]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.33828 secs, and comparison 3.30111 sec, and warnIfPerfScore > 0.55, and perfScore=0.395897]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.745318 sec, and warnIfPerfScore > 0.1, and perfScore=0.0496879]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.12976 sec, and warnIfPerfScore > 0.5, and perfScore=0.208651]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.73914 secs, and comparison 14.3282 sec, and warnIfPerfScore > 2, and perfScore=1.63954]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.0447 secs, and comparison 17.6205 sec, and warnIfPerfScore > 3.6, and perfScore=1.75421]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 41 seconds]]]

Succeeded
