Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 15 17:45:23 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.51208 secs, and comparison 4.4061 sec, and warnIfPerfScore > 0.65, and perfScore=0.586535]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.22101 secs, and comparison 2.84636 sec, and warnIfPerfScore > 0.5, and perfScore=0.394178]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.60431 secs, and comparison 7.61214 sec, and warnIfPerfScore > 1.05, and perfScore=0.884689]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.81535 secs, and comparison 7.46881 sec, and warnIfPerfScore > 1.15, and perfScore=1.09588]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.037
	DETAILS:         	[baseline test 60.3585 secs, and comparison 2.26017 sec, and warnIfPerfScore > 0.48, and perfScore=0.0374457]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 57.8486 secs, and comparison 2.81972 sec, and warnIfPerfScore > 0.57, and perfScore=0.048743]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.84803 secs, and comparison 20.8549 sec, and warnIfPerfScore > 2.9, and perfScore=2.65734]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.17935 secs, and comparison 21.6186 sec, and warnIfPerfScore > 2.9, and perfScore=2.64307]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.63937 secs, and comparison 150.215 sec, and warnIfPerfScore > 24, and perfScore=19.6633]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.02615 secs, and comparison 11.0336 sec, and warnIfPerfScore > 1.7, and perfScore=1.57037]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.51435 secs, and comparison 7.29238 sec, and warnIfPerfScore > 1.5, and perfScore=0.97046]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.35955 secs, and comparison 12.6778 sec, and warnIfPerfScore > 2.1, and perfScore=1.9935]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 8.46193 secs, and comparison 6.49079 sec, and warnIfPerfScore > 1.6, and perfScore=0.767058]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.92053 secs, and comparison 1.25274 sec, and warnIfPerfScore > 0.23, and perfScore=0.140434]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5332 secs, and comparison 12.7152 sec, and warnIfPerfScore > 1.3, and perfScore=1.01452]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.62834 secs, and comparison 5.42057 sec, and warnIfPerfScore > 1.2, and perfScore=0.56298]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.98652 secs, and comparison 2.11562 sec, and warnIfPerfScore > 0.33, and perfScore=0.235422]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.17856 secs, and comparison 39.3591 sec, and warnIfPerfScore > 6, and perfScore=4.28816]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.20948 secs, and comparison 5.16846 sec, and warnIfPerfScore > 0.8, and perfScore=0.561211]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.30339 secs, and comparison 9.005 sec, and warnIfPerfScore > 1.4, and perfScore=0.967927]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.07456 secs, and comparison 3.5859 sec, and warnIfPerfScore > 0.65, and perfScore=0.39516]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.59091 secs, and comparison 37.0009 sec, and warnIfPerfScore > 4.4, and perfScore=3.85791]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.84688 secs, and comparison 3.54405 sec, and warnIfPerfScore > 0.6, and perfScore=0.400598]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.86871 secs, and comparison 3.53951 sec, and warnIfPerfScore > 0.6, and perfScore=0.399101]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.93816 secs, and comparison 3.56667 sec, and warnIfPerfScore > 0.6, and perfScore=0.399038]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 8.94461 secs, and comparison 4.94384 sec, and warnIfPerfScore > 1.3, and perfScore=0.552717]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.5782 secs, and comparison 8.36808 sec, and warnIfPerfScore > 1.3, and perfScore=0.873659]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.564 secs, and comparison 5.68123 sec, and warnIfPerfScore > 0.3, and perfScore=0.127485]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.9341 secs, and comparison 12.1474 sec, and warnIfPerfScore > 1.5, and perfScore=1.53104]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.53104}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.08508 secs, and comparison 2.85703 sec, and warnIfPerfScore > 0.55, and perfScore=0.403246]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.761237 sec, and warnIfPerfScore > 0.1, and perfScore=0.0507491]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.28336 sec, and warnIfPerfScore > 0.5, and perfScore=0.218891]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.01683 secs, and comparison 11.6908 sec, and warnIfPerfScore > 2, and perfScore=1.45829]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.68871 secs, and comparison 29.262 sec, and warnIfPerfScore > 3.6, and perfScore=3.36782]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 33 seconds]]]

Succeeded
