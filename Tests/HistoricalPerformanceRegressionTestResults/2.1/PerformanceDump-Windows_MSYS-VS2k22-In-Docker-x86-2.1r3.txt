Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb 15 5:43:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.61685 secs, and comparison 4.89633 sec, and warnIfPerfScore > 0.65, and perfScore=0.568228]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.86465 secs, and comparison 3.03249 sec, and warnIfPerfScore > 0.5, and perfScore=0.342088]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.7391 secs, and comparison 8.90967 sec, and warnIfPerfScore > 1.05, and perfScore=0.829645]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.90436 secs, and comparison 9.17166 sec, and warnIfPerfScore > 1.15, and perfScore=1.16033]
	                 	SharedPtr is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.15 and got 1.16033}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15.8411 secs, and comparison 3.14716 sec, and warnIfPerfScore > 0.48, and perfScore=0.198671]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.7255 secs, and comparison 3.96198 sec, and warnIfPerfScore > 0.57, and perfScore=0.269055]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 9.89015 secs, and comparison 26.4226 sec, and warnIfPerfScore > 2.9, and perfScore=2.6716]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.5075 secs, and comparison 26.6405 sec, and warnIfPerfScore > 2.9, and perfScore=2.53538]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 10.2474 secs, and comparison 169.566 sec, and warnIfPerfScore > 24, and perfScore=16.5473]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.22413 secs, and comparison 13.5232 sec, and warnIfPerfScore > 1.7, and perfScore=1.64433]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.8805 secs, and comparison 9.66021 sec, and warnIfPerfScore > 1.5, and perfScore=0.977705]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.8843 secs, and comparison 14.965 sec, and warnIfPerfScore > 2.1, and perfScore=1.37492]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 12.8078 secs, and comparison 8.98932 sec, and warnIfPerfScore > 1.6, and perfScore=0.701864]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.4072 secs, and comparison 1.28729 sec, and warnIfPerfScore > 0.23, and perfScore=0.123693]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.1025 secs, and comparison 14.8687 sec, and warnIfPerfScore > 1.3, and perfScore=0.984517]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 12.2793 secs, and comparison 6.70898 sec, and warnIfPerfScore > 1.2, and perfScore=0.546365]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.71844 secs, and comparison 2.42011 sec, and warnIfPerfScore > 0.33, and perfScore=0.36022]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.36022}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 12.1813 secs, and comparison 43.6919 sec, and warnIfPerfScore > 6, and perfScore=3.58682]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 10.5943 secs, and comparison 7.23649 sec, and warnIfPerfScore > 0.8, and perfScore=0.683057]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.5264 secs, and comparison 12.3021 sec, and warnIfPerfScore > 1.4, and perfScore=1.16869]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 7.44556 secs, and comparison 3.9341 sec, and warnIfPerfScore > 0.65, and perfScore=0.528382]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.2303 secs, and comparison 41.1 sec, and warnIfPerfScore > 4.4, and perfScore=3.36052]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.19795 secs, and comparison 3.63477 sec, and warnIfPerfScore > 0.6, and perfScore=0.443375]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.15392 secs, and comparison 3.96326 sec, and warnIfPerfScore > 0.6, and perfScore=0.432958]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 7.59067 secs, and comparison 4.18068 sec, and warnIfPerfScore > 0.6, and perfScore=0.550766]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.29858 secs, and comparison 6.04833 sec, and warnIfPerfScore > 1.3, and perfScore=0.8287]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.65147 secs, and comparison 9.25097 sec, and warnIfPerfScore > 1.3, and perfScore=1.06929]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 51.8938 secs, and comparison 6.76425 sec, and warnIfPerfScore > 0.3, and perfScore=0.130348]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.4368 secs, and comparison 16.2163 sec, and warnIfPerfScore > 1.5, and perfScore=1.41791]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.4061 secs, and comparison 3.07817 sec, and warnIfPerfScore > 0.55, and perfScore=0.415626]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 15 secs, and comparison 1.01612 sec, and warnIfPerfScore > 0.1, and perfScore=0.0677413]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.57057 sec, and warnIfPerfScore > 0.5, and perfScore=0.238038]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.4719 secs, and comparison 12.4569 sec, and warnIfPerfScore > 2, and perfScore=1.47038]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.0932 secs, and comparison 34.1276 sec, and warnIfPerfScore > 3.6, and perfScore=3.07643]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 11 seconds]]]

Succeeded
