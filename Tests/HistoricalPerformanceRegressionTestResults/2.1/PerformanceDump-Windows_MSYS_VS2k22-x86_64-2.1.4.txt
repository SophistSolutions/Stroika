Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Aug 24 17:44:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 4.87441 secs, and comparison 4.0362 sec, and warnIfPerfScore > 0.65, and perfScore=0.828039]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 4.87824 secs, and comparison 2.30811 sec, and warnIfPerfScore > 0.5, and perfScore=0.473143]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.31558 secs, and comparison 6.60846 sec, and warnIfPerfScore > 1.05, and perfScore=0.903341]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.9647 secs, and comparison 6.52798 sec, and warnIfPerfScore > 1.15, and perfScore=1.09444]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.61924 secs, and comparison 1.97806 sec, and warnIfPerfScore > 0.48, and perfScore=0.259614]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 7.5975 secs, and comparison 2.45044 sec, and warnIfPerfScore > 0.57, and perfScore=0.322533]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 5.72055 secs, and comparison 16.9747 sec, and warnIfPerfScore > 2.9, and perfScore=2.96733]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.24313 secs, and comparison 17.1886 sec, and warnIfPerfScore > 2.9, and perfScore=2.7532]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.18999 secs, and comparison 127.691 sec, and warnIfPerfScore > 24, and perfScore=24.6032]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.01612 secs, and comparison 9.02438 sec, and warnIfPerfScore > 1.7, and perfScore=1.79907]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.31118 secs, and comparison 5.07611 sec, and warnIfPerfScore > 1.5, and perfScore=0.955742]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.69804 secs, and comparison 10.9518 sec, and warnIfPerfScore > 2.1, and perfScore=2.33114]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 5.97647 secs, and comparison 3.59509 sec, and warnIfPerfScore > 1.6, and perfScore=0.601541]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 6.26114 secs, and comparison 0.654052 sec, and warnIfPerfScore > 0.23, and perfScore=0.104462]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1383 secs, and comparison 11.2327 sec, and warnIfPerfScore > 1.3, and perfScore=1.00847]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.76403 secs, and comparison 4.78737 sec, and warnIfPerfScore > 1.2, and perfScore=0.616608]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.47403 secs, and comparison 1.77038 sec, and warnIfPerfScore > 0.33, and perfScore=0.236871]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.47474 secs, and comparison 36.5566 sec, and warnIfPerfScore > 6, and perfScore=4.89068]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.491 secs, and comparison 4.46547 sec, and warnIfPerfScore > 0.8, and perfScore=0.596112]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.48847 secs, and comparison 6.85706 sec, and warnIfPerfScore > 1.4, and perfScore=0.915683]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.47148 secs, and comparison 3.19161 sec, and warnIfPerfScore > 0.65, and perfScore=0.427172]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 7.9306 secs, and comparison 33.7527 sec, and warnIfPerfScore > 4.4, and perfScore=4.256]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.39126 secs, and comparison 3.13505 sec, and warnIfPerfScore > 0.6, and perfScore=0.424156]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.40311 secs, and comparison 3.14747 sec, and warnIfPerfScore > 0.6, and perfScore=0.425156]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.41164 secs, and comparison 3.15537 sec, and warnIfPerfScore > 0.6, and perfScore=0.425731]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.41396 secs, and comparison 4.55616 sec, and warnIfPerfScore > 1.3, and perfScore=0.614538]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.98197 secs, and comparison 7.57392 sec, and warnIfPerfScore > 1.3, and perfScore=0.948879]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 34.2329 secs, and comparison 5.91886 sec, and warnIfPerfScore > 0.3, and perfScore=0.1729]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.1174 secs, and comparison 8.47984 sec, and warnIfPerfScore > 1.5, and perfScore=1.65706]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 5.69684 secs, and comparison 2.49995 sec, and warnIfPerfScore > 0.55, and perfScore=0.43883]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.036
	DETAILS:         	[baseline test 15 secs, and comparison 0.542083 sec, and warnIfPerfScore > 0.1, and perfScore=0.0361389]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.58575 sec, and warnIfPerfScore > 0.5, and perfScore=0.172383]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.83456 secs, and comparison 11.8867 sec, and warnIfPerfScore > 2, and perfScore=2.0373]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.23951 secs, and comparison 13.3521 sec, and warnIfPerfScore > 3.6, and perfScore=1.84434]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 27 seconds]]]

Succeeded
