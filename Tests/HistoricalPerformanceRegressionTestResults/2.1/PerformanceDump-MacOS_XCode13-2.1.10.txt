Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 :40:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.49356 secs, and comparison 6.49523 sec, and warnIfPerfScore > 0.65, and perfScore=0.684172]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.664 secs, and comparison 4.36664 sec, and warnIfPerfScore > 0.5, and perfScore=0.409475]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 17.0467 secs, and comparison 12.5547 sec, and warnIfPerfScore > 1.05, and perfScore=0.736488]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0965 secs, and comparison 14.0684 sec, and warnIfPerfScore > 1.15, and perfScore=1.07421]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 34.3075 secs, and comparison 4.29285 sec, and warnIfPerfScore > 0.48, and perfScore=0.125129]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 37.8321 secs, and comparison 5.17748 sec, and warnIfPerfScore > 0.57, and perfScore=0.136854]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.06 secs, and comparison 38.9217 sec, and warnIfPerfScore > 2.9, and perfScore=1.68784]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 27.1078 secs, and comparison 42.2701 sec, and warnIfPerfScore > 2.9, and perfScore=1.55933]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 22.3641 secs, and comparison 136.869 sec, and warnIfPerfScore > 24, and perfScore=6.12006]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 21.9088 secs, and comparison 16.0551 sec, and warnIfPerfScore > 1.7, and perfScore=0.732813]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.55165 secs, and comparison 6.25347 sec, and warnIfPerfScore > 1.5, and perfScore=0.731259]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.4997 secs, and comparison 20.7852 sec, and warnIfPerfScore > 2.1, and perfScore=1.341]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 13.9191 secs, and comparison 8.46235 sec, and warnIfPerfScore > 1.6, and perfScore=0.607966]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 15.848 secs, and comparison 1.39238 sec, and warnIfPerfScore > 0.23, and perfScore=0.0878579]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.8478 secs, and comparison 18.8892 sec, and warnIfPerfScore > 1.3, and perfScore=1.12117]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.466 secs, and comparison 18.1102 sec, and warnIfPerfScore > 1.2, and perfScore=1.34489]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 10.1938 secs, and comparison 2.55448 sec, and warnIfPerfScore > 0.33, and perfScore=0.250593]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 14.4276 secs, and comparison 59.1539 sec, and warnIfPerfScore > 6, and perfScore=4.10005]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.2773 secs, and comparison 13.3202 sec, and warnIfPerfScore > 0.8, and perfScore=1.18115]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.2295 secs, and comparison 17.0997 sec, and warnIfPerfScore > 1.4, and perfScore=1.52274]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.93254 secs, and comparison 5.14054 sec, and warnIfPerfScore > 0.65, and perfScore=0.517546]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 16.9151 secs, and comparison 50.9846 sec, and warnIfPerfScore > 4.4, and perfScore=3.01414]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 8.99077 secs, and comparison 4.49849 sec, and warnIfPerfScore > 0.6, and perfScore=0.500345]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.47803 secs, and comparison 4.64503 sec, and warnIfPerfScore > 0.6, and perfScore=0.490084]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.64953 secs, and comparison 5.05097 sec, and warnIfPerfScore > 0.6, and perfScore=0.523442]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.60839 secs, and comparison 6.01213 sec, and warnIfPerfScore > 1.3, and perfScore=0.625716]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.0835 secs, and comparison 14.088 sec, and warnIfPerfScore > 1.3, and perfScore=1.39714]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 150.498 secs, and comparison 9.06572 sec, and warnIfPerfScore > 0.3, and perfScore=0.0602381]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 34.0118 secs, and comparison 37.2864 sec, and warnIfPerfScore > 1.5, and perfScore=1.09628]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.14889 secs, and comparison 4.8038 sec, and warnIfPerfScore > 0.55, and perfScore=0.525069]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.23015 sec, and warnIfPerfScore > 0.1, and perfScore=0.415343]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.73659 sec, and warnIfPerfScore > 0.5, and perfScore=0.182439]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 19 seconds]]]

Succeeded
