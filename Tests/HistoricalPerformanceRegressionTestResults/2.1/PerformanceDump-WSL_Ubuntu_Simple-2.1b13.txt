Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Aug 14 3:21:32 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.50235 secs, and comparison 4.72098 sec, and warnIfPerfScore > 0.62, and perfScore=0.857992]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.60405 secs, and comparison 2.97876 sec, and warnIfPerfScore > 0.5, and perfScore=0.531537]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.35309 secs, and comparison 7.10097 sec, and warnIfPerfScore > 1.05, and perfScore=1.11772]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.07028 secs, and comparison 3.57753 sec, and warnIfPerfScore > 0.48, and perfScore=0.878938]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 4.41842 secs, and comparison 4.10769 sec, and warnIfPerfScore > 0.57, and perfScore=0.929672]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.37476 secs, and comparison 34.1716 sec, and warnIfPerfScore > 2.9, and perfScore=4.08031]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.89894 secs, and comparison 37.5683 sec, and warnIfPerfScore > 2.9, and perfScore=3.79518]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	32
	DETAILS:         	[baseline test 11.825 secs, and comparison 381.687 sec, and warnIfPerfScore > 9.7, and perfScore=32.2779]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.87944 secs, and comparison 10.5502 sec, and warnIfPerfScore > 1.6, and perfScore=2.16217]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 23.3063 secs, and comparison 23.0794 sec, and warnIfPerfScore > 1.5, and perfScore=0.990267]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.77864 secs, and comparison 10.5917 sec, and warnIfPerfScore > 2.1, and perfScore=3.81183]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 6.4253 secs, and comparison 4.51254 sec, and warnIfPerfScore > 1.3, and perfScore=0.702308]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.92036 secs, and comparison 2.89715 sec, and warnIfPerfScore > 0.23, and perfScore=0.418642]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.0743 secs, and comparison 4.96074 sec, and warnIfPerfScore > 1.3, and perfScore=1.21757]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 22.2159 secs, and comparison 10.2499 sec, and warnIfPerfScore > 1.2, and perfScore=0.461376]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.015
	DETAILS:         	[baseline test 102.78 secs, and comparison 1.55575 sec, and warnIfPerfScore > 0.33, and perfScore=0.0151366]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 20.9414 secs, and comparison 43.1113 sec, and warnIfPerfScore > 6, and perfScore=2.05866]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 51.188 secs, and comparison 3.74581 sec, and warnIfPerfScore > 0.5, and perfScore=0.0731774]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 21.7561 secs, and comparison 40.6648 sec, and warnIfPerfScore > 4.4, and perfScore=1.86912]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 68.9166 secs, and comparison 3.99532 sec, and warnIfPerfScore > 0.6, and perfScore=0.0579733]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.27592 secs, and comparison 13.7341 sec, and warnIfPerfScore > 1.5, and perfScore=1.88761]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.30716 secs, and comparison 2.13169 sec, and warnIfPerfScore > 0.55, and perfScore=0.291727]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 15 secs, and comparison 1.16264 sec, and warnIfPerfScore > 0.25, and perfScore=0.0775095]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.89611 sec, and warnIfPerfScore > 0.5, and perfScore=0.259741]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 47 seconds]]]

Succeeded
