Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 8:13:7 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21571 secs, and comparison 4.82068 sec, and warnIfPerfScore > 0.65, and perfScore=1.4991]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.21213 secs, and comparison 2.27928 sec, and warnIfPerfScore > 0.5, and perfScore=0.709585]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.2526 secs, and comparison 7.17739 sec, and warnIfPerfScore > 1.05, and perfScore=0.989629]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31874 secs, and comparison 7.17832 sec, and warnIfPerfScore > 1.15, and perfScore=1.13604]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 5.9148 secs, and comparison 1.23045 sec, and warnIfPerfScore > 0.48, and perfScore=0.208029]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 5.90558 secs, and comparison 1.78431 sec, and warnIfPerfScore > 0.57, and perfScore=0.302139]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.08477 secs, and comparison 15.4406 sec, and warnIfPerfScore > 2.9, and perfScore=2.53758]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.4604 secs, and comparison 16.0631 sec, and warnIfPerfScore > 2.9, and perfScore=2.15311]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 9.53722 secs, and comparison 54.2328 sec, and warnIfPerfScore > 24, and perfScore=5.68644]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.30696 secs, and comparison 7.59741 sec, and warnIfPerfScore > 1.7, and perfScore=1.76398]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.73541 secs, and comparison 3.87627 sec, and warnIfPerfScore > 1.5, and perfScore=0.818571]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.7239 secs, and comparison 9.57576 sec, and warnIfPerfScore > 2.1, and perfScore=2.57143]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.16227 secs, and comparison 3.00975 sec, and warnIfPerfScore > 1.6, and perfScore=0.583027]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 5.35185 secs, and comparison 0.678491 sec, and warnIfPerfScore > 0.23, and perfScore=0.126777]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.43 secs, and comparison 12.9071 sec, and warnIfPerfScore > 1.3, and perfScore=1.03838]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.50081 secs, and comparison 5.26495 sec, and warnIfPerfScore > 1.2, and perfScore=1.16978]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.48669 secs, and comparison 1.0649 sec, and warnIfPerfScore > 0.33, and perfScore=0.237347]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.31225 secs, and comparison 38.4239 sec, and warnIfPerfScore > 6, and perfScore=8.9104]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.19758 secs, and comparison 5.07984 sec, and warnIfPerfScore > 0.8, and perfScore=1.21018]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.22801 secs, and comparison 7.01755 sec, and warnIfPerfScore > 1.4, and perfScore=1.65978]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.49902 secs, and comparison 3.18235 sec, and warnIfPerfScore > 0.65, and perfScore=0.707342]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.60745 secs, and comparison 36.2647 sec, and warnIfPerfScore > 4.4, and perfScore=6.46724]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51282 secs, and comparison 3.07387 sec, and warnIfPerfScore > 0.6, and perfScore=0.68114]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51742 secs, and comparison 3.0723 sec, and warnIfPerfScore > 0.6, and perfScore=0.6801]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50776 secs, and comparison 3.07741 sec, and warnIfPerfScore > 0.6, and perfScore=0.682692]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 4.51062 secs, and comparison 2.84437 sec, and warnIfPerfScore > 1.3, and perfScore=0.630594]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.69778 secs, and comparison 8.15371 sec, and warnIfPerfScore > 1.3, and perfScore=1.73565]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 29.7202 secs, and comparison 4.35868 sec, and warnIfPerfScore > 0.3, and perfScore=0.146657]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.19067 secs, and comparison 11.9471 sec, and warnIfPerfScore > 1.5, and perfScore=1.29992]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 4.64029 secs, and comparison 2.70122 sec, and warnIfPerfScore > 0.55, and perfScore=0.582123]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.89047 sec, and warnIfPerfScore > 0.1, and perfScore=0.126031]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94673 sec, and warnIfPerfScore > 0.5, and perfScore=0.129782]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 56 seconds]]]

Succeeded
