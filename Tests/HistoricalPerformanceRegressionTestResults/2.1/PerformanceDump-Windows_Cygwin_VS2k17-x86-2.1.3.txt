Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 1:41:10 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.7244 secs, and comparison 5.42687 sec, and warnIfPerfScore > 0.65, and perfScore=0.426491]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.5157 secs, and comparison 3.58648 sec, and warnIfPerfScore > 0.5, and perfScore=0.286559]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 12.1859 secs, and comparison 10.2637 sec, and warnIfPerfScore > 1.05, and perfScore=0.842257]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.39465 secs, and comparison 10.8462 sec, and warnIfPerfScore > 1.15, and perfScore=1.15451]
	                 	SharedPtr is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.15 and got 1.15451}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.858 secs, and comparison 3.46437 sec, and warnIfPerfScore > 0.48, and perfScore=0.292156]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.8162 secs, and comparison 3.93393 sec, and warnIfPerfScore > 0.57, and perfScore=0.306949]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 14.4515 secs, and comparison 30.8086 sec, and warnIfPerfScore > 2.9, and perfScore=2.13186]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.4438 secs, and comparison 32.7612 sec, and warnIfPerfScore > 2.9, and perfScore=2.26818]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 13.299 secs, and comparison 179.617 sec, and warnIfPerfScore > 24, and perfScore=13.5061]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.3845 secs, and comparison 16.2149 sec, and warnIfPerfScore > 1.7, and perfScore=1.21147]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.9642 secs, and comparison 14.678 sec, and warnIfPerfScore > 1.5, and perfScore=0.980877]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.3748 secs, and comparison 18.8223 sec, and warnIfPerfScore > 2.1, and perfScore=1.81424]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 15.5021 secs, and comparison 10.6837 sec, and warnIfPerfScore > 1.6, and perfScore=0.689177]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 16.1471 secs, and comparison 1.88628 sec, and warnIfPerfScore > 0.23, and perfScore=0.116819]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 18.3805 secs, and comparison 14.9472 sec, and warnIfPerfScore > 1.3, and perfScore=0.813212]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 11.9521 secs, and comparison 9.14019 sec, and warnIfPerfScore > 1.2, and perfScore=0.764733]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.0739 secs, and comparison 2.73113 sec, and warnIfPerfScore > 0.33, and perfScore=0.246626]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.2253 secs, and comparison 53.015 sec, and warnIfPerfScore > 6, and perfScore=4.72283]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 11.5671 secs, and comparison 7.79423 sec, and warnIfPerfScore > 0.8, and perfScore=0.67383]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.417 secs, and comparison 17.6267 sec, and warnIfPerfScore > 1.4, and perfScore=1.54389]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.54389}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.946 secs, and comparison 4.61496 sec, and warnIfPerfScore > 0.65, and perfScore=0.421613]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 12.6631 secs, and comparison 47.4774 sec, and warnIfPerfScore > 4.4, and perfScore=3.74927]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.251 secs, and comparison 4.60194 sec, and warnIfPerfScore > 0.6, and perfScore=0.409024]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.1229 secs, and comparison 4.77478 sec, and warnIfPerfScore > 0.6, and perfScore=0.429275]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.4849 secs, and comparison 4.92166 sec, and warnIfPerfScore > 0.6, and perfScore=0.428534]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.181 secs, and comparison 9.95269 sec, and warnIfPerfScore > 1.3, and perfScore=0.890142]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.3298 secs, and comparison 14.4975 sec, and warnIfPerfScore > 1.3, and perfScore=1.17581]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 75.7608 secs, and comparison 8.49386 sec, and warnIfPerfScore > 0.3, and perfScore=0.112114]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.4606 secs, and comparison 20.5974 sec, and warnIfPerfScore > 1.5, and perfScore=1.42438]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 17.776 secs, and comparison 5.52173 sec, and warnIfPerfScore > 0.55, and perfScore=0.310628]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.49521 sec, and warnIfPerfScore > 0.1, and perfScore=0.0996806]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.42989 sec, and warnIfPerfScore > 0.5, and perfScore=0.361993]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.3298 secs, and comparison 22.3006 sec, and warnIfPerfScore > 2, and perfScore=1.55624]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.4844 secs, and comparison 37.8488 sec, and warnIfPerfScore > 3.6, and perfScore=2.61308]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 43 seconds]]]

Succeeded
