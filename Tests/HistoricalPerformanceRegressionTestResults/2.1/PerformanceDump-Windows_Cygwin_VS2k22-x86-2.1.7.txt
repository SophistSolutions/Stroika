Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Oct 23 17:19:49 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.57904 secs, and comparison 5.02928 sec, and warnIfPerfScore > 0.65, and perfScore=0.663577]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.663577}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.87709 secs, and comparison 3.35842 sec, and warnIfPerfScore > 0.5, and perfScore=0.378324]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.1046 secs, and comparison 9.13848 sec, and warnIfPerfScore > 1.05, and perfScore=0.822944]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.40076 secs, and comparison 9.0004 sec, and warnIfPerfScore > 1.15, and perfScore=1.07138]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.8577 secs, and comparison 2.77303 sec, and warnIfPerfScore > 0.48, and perfScore=0.255398]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.3262 secs, and comparison 3.31667 sec, and warnIfPerfScore > 0.57, and perfScore=0.292833]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.8163 secs, and comparison 25.974 sec, and warnIfPerfScore > 2.9, and perfScore=2.40139]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.5529 secs, and comparison 26.716 sec, and warnIfPerfScore > 2.9, and perfScore=2.31249]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 10.2179 secs, and comparison 167.512 sec, and warnIfPerfScore > 24, and perfScore=16.394]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.75037 secs, and comparison 13.0291 sec, and warnIfPerfScore > 1.7, and perfScore=1.33627]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.8614 secs, and comparison 10.0562 sec, and warnIfPerfScore > 1.5, and perfScore=0.925865]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.54559 secs, and comparison 14.8713 sec, and warnIfPerfScore > 2.1, and perfScore=1.74023]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 11.6249 secs, and comparison 8.08342 sec, and warnIfPerfScore > 1.6, and perfScore=0.695354]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 12.4683 secs, and comparison 1.60583 sec, and warnIfPerfScore > 0.23, and perfScore=0.128793]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.05 secs, and comparison 14.8047 sec, and warnIfPerfScore > 1.3, and perfScore=0.983698]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.5345 secs, and comparison 7.04918 sec, and warnIfPerfScore > 1.2, and perfScore=0.611136]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.7542 secs, and comparison 2.77726 sec, and warnIfPerfScore > 0.33, and perfScore=0.236279]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.2333 secs, and comparison 44.4213 sec, and warnIfPerfScore > 6, and perfScore=3.95444]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 11.164 secs, and comparison 6.63419 sec, and warnIfPerfScore > 0.8, and perfScore=0.594247]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.985 secs, and comparison 11.7744 sec, and warnIfPerfScore > 1.4, and perfScore=1.07187]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.5106 secs, and comparison 4.11249 sec, and warnIfPerfScore > 0.65, and perfScore=0.357279]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.4085 secs, and comparison 41.4341 sec, and warnIfPerfScore > 4.4, and perfScore=3.63188]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.1905 secs, and comparison 4.07722 sec, and warnIfPerfScore > 0.6, and perfScore=0.364349]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.3864 secs, and comparison 4.0555 sec, and warnIfPerfScore > 0.6, and perfScore=0.356171]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.3009 secs, and comparison 4.06563 sec, and warnIfPerfScore > 0.6, and perfScore=0.359762]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.4263 secs, and comparison 6.42396 sec, and warnIfPerfScore > 1.3, and perfScore=0.562206]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 12.0386 secs, and comparison 9.8842 sec, and warnIfPerfScore > 1.3, and perfScore=0.821041]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 54.9675 secs, and comparison 7.06292 sec, and warnIfPerfScore > 0.3, and perfScore=0.128493]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.5519 secs, and comparison 15.3445 sec, and warnIfPerfScore > 1.5, and perfScore=1.45419]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.49207 secs, and comparison 3.34952 sec, and warnIfPerfScore > 0.55, and perfScore=0.394428]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.891606 sec, and warnIfPerfScore > 0.1, and perfScore=0.0594404]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.79703 sec, and warnIfPerfScore > 0.5, and perfScore=0.253136]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.2373 secs, and comparison 14.9843 sec, and warnIfPerfScore > 2, and perfScore=1.46369]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.3813 secs, and comparison 33.4178 sec, and warnIfPerfScore > 3.6, and perfScore=2.93621]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 33 seconds]]]

Succeeded
