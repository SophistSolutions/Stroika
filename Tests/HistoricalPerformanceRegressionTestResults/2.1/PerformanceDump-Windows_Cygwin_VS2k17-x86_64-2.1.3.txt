Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 1:59:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 8.9878 secs, and comparison 5.9833 sec, and warnIfPerfScore > 0.65, and perfScore=0.665713]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.43283 secs, and comparison 3.22551 sec, and warnIfPerfScore > 0.5, and perfScore=0.341945]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 12.0118 secs, and comparison 10.4906 sec, and warnIfPerfScore > 1.05, and perfScore=0.873354]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.35153 secs, and comparison 10.3007 sec, and warnIfPerfScore > 1.15, and perfScore=1.1015]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.4508 secs, and comparison 3.48621 sec, and warnIfPerfScore > 0.48, and perfScore=0.304452]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.2956 secs, and comparison 4.05218 sec, and warnIfPerfScore > 0.57, and perfScore=0.358741]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.0479 secs, and comparison 28.574 sec, and warnIfPerfScore > 2.9, and perfScore=2.58637]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.7196 secs, and comparison 30.3959 sec, and warnIfPerfScore > 2.9, and perfScore=2.59359]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 10.0128 secs, and comparison 156.087 sec, and warnIfPerfScore > 24, and perfScore=15.5887]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.3573 secs, and comparison 15.0331 sec, and warnIfPerfScore > 1.7, and perfScore=1.45145]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.5008 secs, and comparison 10.4791 sec, and warnIfPerfScore > 1.5, and perfScore=0.997931]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.36655 secs, and comparison 17.7838 sec, and warnIfPerfScore > 2.1, and perfScore=1.89865]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.8718 secs, and comparison 7.5959 sec, and warnIfPerfScore > 1.6, and perfScore=0.639828]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 12.2942 secs, and comparison 1.56795 sec, and warnIfPerfScore > 0.23, and perfScore=0.127536]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.2367 secs, and comparison 13.3977 sec, and warnIfPerfScore > 1.3, and perfScore=1.01216]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.7299 secs, and comparison 9.13317 sec, and warnIfPerfScore > 1.2, and perfScore=0.851192]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 13.9993 secs, and comparison 3.05303 sec, and warnIfPerfScore > 0.33, and perfScore=0.218083]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.88234 secs, and comparison 48.1827 sec, and warnIfPerfScore > 6, and perfScore=4.87564]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.2821 secs, and comparison 8.65756 sec, and warnIfPerfScore > 0.8, and perfScore=0.842001]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.79137 secs, and comparison 15.8179 sec, and warnIfPerfScore > 1.4, and perfScore=1.6155]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.3629 secs, and comparison 4.56859 sec, and warnIfPerfScore > 0.65, and perfScore=0.318083]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.951 secs, and comparison 46.9886 sec, and warnIfPerfScore > 4.4, and perfScore=4.29081]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.5811 secs, and comparison 4.64311 sec, and warnIfPerfScore > 0.6, and perfScore=0.34188]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.7588 secs, and comparison 4.51467 sec, and warnIfPerfScore > 0.6, and perfScore=0.32813]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.6253 secs, and comparison 4.64928 sec, and warnIfPerfScore > 0.6, and perfScore=0.341223]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 13.9215 secs, and comparison 9.31851 sec, and warnIfPerfScore > 1.3, and perfScore=0.669359]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 15.2332 secs, and comparison 13.3369 sec, and warnIfPerfScore > 1.3, and perfScore=0.875513]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 62.7756 secs, and comparison 8.18234 sec, and warnIfPerfScore > 0.3, and perfScore=0.130343]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.1011 secs, and comparison 15.892 sec, and warnIfPerfScore > 1.5, and perfScore=1.57329]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 16.4098 secs, and comparison 5.81054 sec, and warnIfPerfScore > 0.55, and perfScore=0.354091]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.076
	DETAILS:         	[baseline test 15 secs, and comparison 1.14533 sec, and warnIfPerfScore > 0.1, and perfScore=0.0763551]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.49623 sec, and warnIfPerfScore > 0.5, and perfScore=0.299749]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.6143 secs, and comparison 21.2346 sec, and warnIfPerfScore > 2, and perfScore=1.82831]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.2162 secs, and comparison 20.8072 sec, and warnIfPerfScore > 3.6, and perfScore=1.70324]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 36 seconds]]]

Succeeded
