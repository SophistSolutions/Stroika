Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Sep  6 3:51:42 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 12.2456 secs, and comparison 5.47506 sec, and warnIfPerfScore > 0.62, and perfScore=0.447105]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.9402 secs, and comparison 3.78004 sec, and warnIfPerfScore > 0.5, and perfScore=0.316582]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 14.2839 secs, and comparison 10.625 sec, and warnIfPerfScore > 1.05, and perfScore=0.743844]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.8962 secs, and comparison 5.30591 sec, and warnIfPerfScore > 0.48, and perfScore=0.333784]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 20.0063 secs, and comparison 5.64296 sec, and warnIfPerfScore > 0.57, and perfScore=0.282059]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.7295 secs, and comparison 37.3581 sec, and warnIfPerfScore > 2.9, and perfScore=2.93476]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2.9 and got 2.93476}}}

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 14.3183 secs, and comparison 49.8358 sec, and warnIfPerfScore > 2.9, and perfScore=3.48056]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2.9 and got 3.48056}}}

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 24.3256 secs, and comparison 113.771 sec, and warnIfPerfScore > 9.7, and perfScore=4.67698]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.4158 secs, and comparison 12.5726 sec, and warnIfPerfScore > 1.6, and perfScore=1.10133]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.9571 secs, and comparison 15.5233 sec, and warnIfPerfScore > 1.5, and perfScore=1.03785]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.93288 secs, and comparison 12.8906 sec, and warnIfPerfScore > 2.1, and perfScore=1.29777]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 15.9155 secs, and comparison 11.3742 sec, and warnIfPerfScore > 1.3, and perfScore=0.714664]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15.3259 secs, and comparison 3.24523 sec, and warnIfPerfScore > 0.23, and perfScore=0.211748]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 15.2239 secs, and comparison 14.0439 sec, and warnIfPerfScore > 1.3, and perfScore=0.92249]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.8556 secs, and comparison 13.602 sec, and warnIfPerfScore > 1.2, and perfScore=1.25299]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.25299}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.3192 secs, and comparison 3.36754 sec, and warnIfPerfScore > 0.33, and perfScore=0.235176]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 10.9182 secs, and comparison 49.3744 sec, and warnIfPerfScore > 6, and perfScore=4.52223]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.8167 secs, and comparison 4.34979 sec, and warnIfPerfScore > 0.5, and perfScore=0.402138]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.3097 secs, and comparison 44.3856 sec, and warnIfPerfScore > 4.4, and perfScore=3.92456]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.3059 secs, and comparison 5.09092 sec, and warnIfPerfScore > 0.6, and perfScore=0.382606]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.5969 secs, and comparison 21.0376 sec, and warnIfPerfScore > 1.5, and perfScore=1.13124]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.9934 secs, and comparison 5.06729 sec, and warnIfPerfScore > 0.55, and perfScore=0.337969]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.65695 sec, and warnIfPerfScore > 0.25, and perfScore=0.110463]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.87639 sec, and warnIfPerfScore > 0.5, and perfScore=0.258426]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.5534 secs, and comparison 31.6156 sec, and warnIfPerfScore > 2, and perfScore=2.33267]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2 and got 2.33267}}}

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 27.6415 secs, and comparison 60.2309 sec, and warnIfPerfScore > 3.1, and perfScore=2.179]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 16 seconds]]]

Succeeded
