Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 31 14:53:46 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.9311 secs, and comparison 5.28174 sec, and warnIfPerfScore > 0.62, and perfScore=0.483184]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.8528 secs, and comparison 3.41312 sec, and warnIfPerfScore > 0.5, and perfScore=0.314491]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.9724 secs, and comparison 9.25177 sec, and warnIfPerfScore > 1.05, and perfScore=0.843185]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.5604 secs, and comparison 4.13729 sec, and warnIfPerfScore > 0.48, and perfScore=0.391773]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.3691 secs, and comparison 4.24574 sec, and warnIfPerfScore > 0.57, and perfScore=0.409461]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.5263 secs, and comparison 24.5004 sec, and warnIfPerfScore > 2.9, and perfScore=2.12562]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.9009 secs, and comparison 26.4948 sec, and warnIfPerfScore > 2.9, and perfScore=2.22629]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 11.7523 secs, and comparison 87.3536 sec, and warnIfPerfScore > 9.7, and perfScore=7.43287]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.87798 secs, and comparison 11.2948 sec, and warnIfPerfScore > 1.6, and perfScore=1.14344]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.2633 secs, and comparison 14.024 sec, and warnIfPerfScore > 1.5, and perfScore=0.983219]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.73625 secs, and comparison 12.5585 sec, and warnIfPerfScore > 2.1, and perfScore=1.43752]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 12.4062 secs, and comparison 9.01879 sec, and warnIfPerfScore > 1.3, and perfScore=0.726957]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 12.7062 secs, and comparison 2.54899 sec, and warnIfPerfScore > 0.23, and perfScore=0.20061]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.989 secs, and comparison 13.1257 sec, and warnIfPerfScore > 1.3, and perfScore=1.01053]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 10.4506 secs, and comparison 8.0644 sec, and warnIfPerfScore > 1.2, and perfScore=0.771667]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.39288 secs, and comparison 1.91421 sec, and warnIfPerfScore > 0.33, and perfScore=0.203794]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.94323 secs, and comparison 44.6279 sec, and warnIfPerfScore > 6, and perfScore=4.48827]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.08949 secs, and comparison 4.17195 sec, and warnIfPerfScore > 0.5, and perfScore=0.458986]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.641 secs, and comparison 40.4571 sec, and warnIfPerfScore > 4.4, and perfScore=3.802]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.19903 secs, and comparison 4.35265 sec, and warnIfPerfScore > 0.6, and perfScore=0.473164]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.7043 secs, and comparison 18.3131 sec, and warnIfPerfScore > 1.5, and perfScore=1.24543]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.8358 secs, and comparison 4.4122 sec, and warnIfPerfScore > 0.55, and perfScore=0.318896]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43817 sec, and warnIfPerfScore > 0.25, and perfScore=0.0958781]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.53823 sec, and warnIfPerfScore > 0.5, and perfScore=0.235882]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.3468 secs, and comparison 18.7075 sec, and warnIfPerfScore > 2, and perfScore=1.64871]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.4339 secs, and comparison 32.4399 sec, and warnIfPerfScore > 3.1, and perfScore=2.83715]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 23 seconds]]]

Succeeded
