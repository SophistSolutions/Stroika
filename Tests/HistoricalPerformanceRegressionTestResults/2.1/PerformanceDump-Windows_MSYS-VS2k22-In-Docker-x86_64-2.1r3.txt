Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb 15 5:58:42 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.4617 secs, and comparison 4.72815 sec, and warnIfPerfScore > 0.65, and perfScore=0.73172]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.05232 secs, and comparison 3.00816 sec, and warnIfPerfScore > 0.5, and perfScore=0.426549]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.0483 secs, and comparison 8.47074 sec, and warnIfPerfScore > 1.05, and perfScore=0.842999]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.67941 secs, and comparison 7.83545 sec, and warnIfPerfScore > 1.15, and perfScore=1.02032]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.05028 secs, and comparison 2.68225 sec, and warnIfPerfScore > 0.48, and perfScore=0.380446]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.20167 secs, and comparison 3.55451 sec, and warnIfPerfScore > 0.57, and perfScore=0.433389]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.52395 secs, and comparison 23.3504 sec, and warnIfPerfScore > 2.9, and perfScore=3.57919]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 7.06835 secs, and comparison 23.3017 sec, and warnIfPerfScore > 2.9, and perfScore=3.29662]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.07216 secs, and comparison 155.153 sec, and warnIfPerfScore > 24, and perfScore=17.1021]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.44152 secs, and comparison 12.0335 sec, and warnIfPerfScore > 1.7, and perfScore=1.86811]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.83415 secs, and comparison 6.52641 sec, and warnIfPerfScore > 1.5, and perfScore=1.11866]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.25352 secs, and comparison 14.9413 sec, and warnIfPerfScore > 2.1, and perfScore=2.05987]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.1952 secs, and comparison 5.60627 sec, and warnIfPerfScore > 1.6, and perfScore=0.549895]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 9.30434 secs, and comparison 0.664964 sec, and warnIfPerfScore > 0.23, and perfScore=0.0714682]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.5592 secs, and comparison 14.3731 sec, and warnIfPerfScore > 1.3, and perfScore=1.06002]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.44148 secs, and comparison 7.1876 sec, and warnIfPerfScore > 1.2, and perfScore=0.761279]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.804 secs, and comparison 2.57664 sec, and warnIfPerfScore > 0.33, and perfScore=0.238489]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.34666 secs, and comparison 42.5557 sec, and warnIfPerfScore > 6, and perfScore=4.55304]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.44042 secs, and comparison 6.0264 sec, and warnIfPerfScore > 0.8, and perfScore=0.638361]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.38185 secs, and comparison 10.6155 sec, and warnIfPerfScore > 1.4, and perfScore=1.13149]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.75072 secs, and comparison 3.96983 sec, and warnIfPerfScore > 0.65, and perfScore=0.453657]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.1119 secs, and comparison 39.6831 sec, and warnIfPerfScore > 4.4, and perfScore=3.9244]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.55904 secs, and comparison 3.87194 sec, and warnIfPerfScore > 0.6, and perfScore=0.405056]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.46791 secs, and comparison 3.77962 sec, and warnIfPerfScore > 0.6, and perfScore=0.399203]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.05499 secs, and comparison 3.64681 sec, and warnIfPerfScore > 0.6, and perfScore=0.40274]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 8.94072 secs, and comparison 6.89938 sec, and warnIfPerfScore > 1.3, and perfScore=0.77168]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.94947 secs, and comparison 10.4276 sec, and warnIfPerfScore > 1.3, and perfScore=1.16517]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 44.8227 secs, and comparison 8.01867 sec, and warnIfPerfScore > 0.3, and perfScore=0.178897]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.67696 secs, and comparison 11.4879 sec, and warnIfPerfScore > 1.5, and perfScore=1.72053]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.25303 secs, and comparison 3.07618 sec, and warnIfPerfScore > 0.55, and perfScore=0.49195]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.869134 sec, and warnIfPerfScore > 0.1, and perfScore=0.0579423]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.26897 sec, and warnIfPerfScore > 0.5, and perfScore=0.217931]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.54863 secs, and comparison 10.7473 sec, and warnIfPerfScore > 2, and perfScore=1.42375]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.5971 secs, and comparison 17.219 sec, and warnIfPerfScore > 3.6, and perfScore=1.48477]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 25 seconds]]]

Succeeded
