Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 15 14:2:27 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.6848 secs, and comparison 9.60882 sec, and warnIfPerfScore > 0.65, and perfScore=0.822336]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.822336}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.4514 secs, and comparison 3.79885 sec, and warnIfPerfScore > 0.5, and perfScore=0.331736]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 13.2926 secs, and comparison 10.8425 sec, and warnIfPerfScore > 1.05, and perfScore=0.81568]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.69871 secs, and comparison 10.8607 sec, and warnIfPerfScore > 1.15, and perfScore=1.11981]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 12.8634 secs, and comparison 3.36417 sec, and warnIfPerfScore > 0.48, and perfScore=0.261531]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.0726 secs, and comparison 4.36769 sec, and warnIfPerfScore > 0.57, and perfScore=0.361787]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.8623 secs, and comparison 32.3775 sec, and warnIfPerfScore > 2.9, and perfScore=2.33566]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 14.4064 secs, and comparison 34.7795 sec, and warnIfPerfScore > 2.9, and perfScore=2.41417]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 13.7501 secs, and comparison 176.237 sec, and warnIfPerfScore > 24, and perfScore=12.8171]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.9977 secs, and comparison 16.4093 sec, and warnIfPerfScore > 1.7, and perfScore=1.49206]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.456 secs, and comparison 14.5755 sec, and warnIfPerfScore > 1.5, and perfScore=1.00827]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.2814 secs, and comparison 19.3849 sec, and warnIfPerfScore > 2.1, and perfScore=1.71831]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 14.9255 secs, and comparison 10.3418 sec, and warnIfPerfScore > 1.6, and perfScore=0.692896]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 16.2213 secs, and comparison 2.30299 sec, and warnIfPerfScore > 0.23, and perfScore=0.141973]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.2623 secs, and comparison 18.4609 sec, and warnIfPerfScore > 1.3, and perfScore=1.06943]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 12.2984 secs, and comparison 8.41132 sec, and warnIfPerfScore > 1.2, and perfScore=0.683936]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.8375 secs, and comparison 2.9212 sec, and warnIfPerfScore > 0.33, and perfScore=0.246774]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 11.9911 secs, and comparison 49.6432 sec, and warnIfPerfScore > 6, and perfScore=4.14001]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 11.5999 secs, and comparison 8.66777 sec, and warnIfPerfScore > 0.8, and perfScore=0.747229]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.7817 secs, and comparison 16.2388 sec, and warnIfPerfScore > 1.4, and perfScore=1.3783]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.703 secs, and comparison 4.91994 sec, and warnIfPerfScore > 0.65, and perfScore=0.420401]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 12.4622 secs, and comparison 45.9778 sec, and warnIfPerfScore > 4.4, and perfScore=3.68939]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.5548 secs, and comparison 4.60736 sec, and warnIfPerfScore > 0.6, and perfScore=0.398738]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.9163 secs, and comparison 4.77836 sec, and warnIfPerfScore > 0.6, and perfScore=0.400995]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.7622 secs, and comparison 4.82199 sec, and warnIfPerfScore > 0.6, and perfScore=0.409956]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 12.1718 secs, and comparison 8.7407 sec, and warnIfPerfScore > 1.3, and perfScore=0.718111]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.4655 secs, and comparison 13.4261 sec, and warnIfPerfScore > 1.3, and perfScore=0.997069]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 73.3707 secs, and comparison 12.9468 sec, and warnIfPerfScore > 0.3, and perfScore=0.176457]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.849 secs, and comparison 20.9333 sec, and warnIfPerfScore > 1.5, and perfScore=1.40974]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.5634 secs, and comparison 5.49644 sec, and warnIfPerfScore > 0.55, and perfScore=0.331842]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15 secs, and comparison 1.4031 sec, and warnIfPerfScore > 0.1, and perfScore=0.0935397]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.39409 sec, and warnIfPerfScore > 0.5, and perfScore=0.292939]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.0587 secs, and comparison 19.2432 sec, and warnIfPerfScore > 2, and perfScore=1.36877]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.5668 secs, and comparison 39.075 sec, and warnIfPerfScore > 3.6, and perfScore=2.68247]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 47 seconds]]]

Succeeded
