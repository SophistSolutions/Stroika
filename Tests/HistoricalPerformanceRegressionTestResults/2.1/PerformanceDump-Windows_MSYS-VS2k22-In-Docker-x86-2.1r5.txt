Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 6:46:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.80239 secs, and comparison 4.10569 sec, and warnIfPerfScore > 0.65, and perfScore=0.603566]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.93936 secs, and comparison 2.57251 sec, and warnIfPerfScore > 0.5, and perfScore=0.370713]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 8.36769 secs, and comparison 7.13467 sec, and warnIfPerfScore > 1.05, and perfScore=0.852646]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.51834 secs, and comparison 7.08355 sec, and warnIfPerfScore > 1.15, and perfScore=1.08671]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.7358 secs, and comparison 2.35756 sec, and warnIfPerfScore > 0.48, and perfScore=0.304759]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.73318 secs, and comparison 2.9081 sec, and warnIfPerfScore > 0.57, and perfScore=0.376055]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.00585 secs, and comparison 19.5603 sec, and warnIfPerfScore > 2.9, and perfScore=2.44325]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.93473 secs, and comparison 20.0178 sec, and warnIfPerfScore > 2.9, and perfScore=2.52281]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.40606 secs, and comparison 137.483 sec, and warnIfPerfScore > 24, and perfScore=18.5637]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.17188 secs, and comparison 10.041 sec, and warnIfPerfScore > 1.7, and perfScore=1.40005]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.81504 secs, and comparison 7.68649 sec, and warnIfPerfScore > 1.5, and perfScore=0.983551]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.24066 secs, and comparison 11.7751 sec, and warnIfPerfScore > 2.1, and perfScore=1.62624]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.97419 secs, and comparison 6.4764 sec, and warnIfPerfScore > 1.6, and perfScore=0.721669]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 9.45761 secs, and comparison 1.23734 sec, and warnIfPerfScore > 0.23, and perfScore=0.13083]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2013 secs, and comparison 12.6583 sec, and warnIfPerfScore > 1.3, and perfScore=1.03745]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.74153 secs, and comparison 5.47872 sec, and warnIfPerfScore > 1.2, and perfScore=0.562408]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.93706 secs, and comparison 1.43265 sec, and warnIfPerfScore > 0.33, and perfScore=0.241306]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.47132 secs, and comparison 37.6342 sec, and warnIfPerfScore > 6, and perfScore=3.97349]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.42932 secs, and comparison 5.20228 sec, and warnIfPerfScore > 0.8, and perfScore=0.551713]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.41006 secs, and comparison 8.90416 sec, and warnIfPerfScore > 1.4, and perfScore=0.946239]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 5.9444 secs, and comparison 3.27403 sec, and warnIfPerfScore > 0.65, and perfScore=0.550776]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.53825 secs, and comparison 34.9617 sec, and warnIfPerfScore > 4.4, and perfScore=3.66542]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.10165 secs, and comparison 3.2358 sec, and warnIfPerfScore > 0.6, and perfScore=0.530315]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.12824 secs, and comparison 3.28058 sec, and warnIfPerfScore > 0.6, and perfScore=0.535322]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.09188 secs, and comparison 3.24006 sec, and warnIfPerfScore > 0.6, and perfScore=0.531866]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.0797 secs, and comparison 4.62983 sec, and warnIfPerfScore > 1.3, and perfScore=0.761522]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.56595 secs, and comparison 7.9133 sec, and warnIfPerfScore > 1.3, and perfScore=1.2052]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.0133 secs, and comparison 5.58102 sec, and warnIfPerfScore > 0.3, and perfScore=0.123986]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.38578 secs, and comparison 11.7869 sec, and warnIfPerfScore > 1.5, and perfScore=1.40559]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.77277 secs, and comparison 2.67855 sec, and warnIfPerfScore > 0.55, and perfScore=0.395487]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.857005 sec, and warnIfPerfScore > 0.1, and perfScore=0.0571336]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80367 sec, and warnIfPerfScore > 0.5, and perfScore=0.186911]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.35874 secs, and comparison 8.35961 sec, and warnIfPerfScore > 2, and perfScore=1.0001]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.23854 secs, and comparison 28.5594 sec, and warnIfPerfScore > 3.6, and perfScore=3.09133]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 2 seconds]]]

Succeeded
