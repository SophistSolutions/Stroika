Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Dec 22 12:40:34 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.45802 secs, and comparison 4.51097 sec, and warnIfPerfScore > 0.62, and perfScore=0.826484]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.46463 secs, and comparison 2.95502 sec, and warnIfPerfScore > 0.5, and perfScore=0.540753]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.27281 secs, and comparison 7.04244 sec, and warnIfPerfScore > 1.05, and perfScore=1.12269]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.01074 secs, and comparison 7.17128 sec, and warnIfPerfScore > 1.15, and perfScore=1.19308]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 3.85164 secs, and comparison 2.80313 sec, and warnIfPerfScore > 0.48, and perfScore=0.727776]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 4.53096 secs, and comparison 3.55358 sec, and warnIfPerfScore > 0.57, and perfScore=0.784288]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.54995 secs, and comparison 31.5097 sec, and warnIfPerfScore > 2.9, and perfScore=3.68537]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.0225 secs, and comparison 32.9804 sec, and warnIfPerfScore > 2.9, and perfScore=3.29064]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	29
	DETAILS:         	[baseline test 12.579 secs, and comparison 362.502 sec, and warnIfPerfScore > 9.7, and perfScore=28.818]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.90954 secs, and comparison 9.98854 sec, and warnIfPerfScore > 1.6, and perfScore=2.03452]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 22.8475 secs, and comparison 22.6933 sec, and warnIfPerfScore > 1.5, and perfScore=0.993251]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.81494 secs, and comparison 12.2781 sec, and warnIfPerfScore > 2.1, and perfScore=4.36175]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 6.36641 secs, and comparison 4.4276 sec, and warnIfPerfScore > 1.3, and perfScore=0.695463]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.6427 secs, and comparison 2.94904 sec, and warnIfPerfScore > 0.23, and perfScore=0.443952]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.67195 secs, and comparison 4.33873 sec, and warnIfPerfScore > 1.3, and perfScore=1.18159]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 21.9323 secs, and comparison 11.4578 sec, and warnIfPerfScore > 1.2, and perfScore=0.522416]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.019
	DETAILS:         	[baseline test 95.552 secs, and comparison 1.78252 sec, and warnIfPerfScore > 0.33, and perfScore=0.018655]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.0685 secs, and comparison 40.4058 sec, and warnIfPerfScore > 6, and perfScore=1.83092]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 23.5722 secs, and comparison 11.1824 sec, and warnIfPerfScore > 0.8, and perfScore=0.474389]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 23.2973 secs, and comparison 11.9868 sec, and warnIfPerfScore > 0.9, and perfScore=0.514515]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 94.4374 secs, and comparison 3.6631 sec, and warnIfPerfScore > 0.5, and perfScore=0.0387887]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.666 secs, and comparison 38.6438 sec, and warnIfPerfScore > 4.4, and perfScore=1.63288]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 51.2308 secs, and comparison 4.33356 sec, and warnIfPerfScore > 0.6, and perfScore=0.0845891]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 18.2991 secs, and comparison 7.28669 sec, and warnIfPerfScore > 0.2, and perfScore=0.398199]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.15965 secs, and comparison 13.9381 sec, and warnIfPerfScore > 1.5, and perfScore=1.94676]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.29857 secs, and comparison 2.45644 sec, and warnIfPerfScore > 0.55, and perfScore=0.39]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.07049 sec, and warnIfPerfScore > 0.25, and perfScore=0.0713661]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.12339 sec, and warnIfPerfScore > 0.5, and perfScore=0.208226]
	                 	Test_Optional_ is FASTER

[[[Tests took: 19 minutes, 23 seconds]]]

Succeeded
