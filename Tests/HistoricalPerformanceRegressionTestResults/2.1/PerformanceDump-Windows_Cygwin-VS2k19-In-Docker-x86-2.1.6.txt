Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 9:1:19 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.78608 secs, and comparison 4.20632 sec, and warnIfPerfScore > 0.65, and perfScore=0.619846]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.79951 secs, and comparison 2.77007 sec, and warnIfPerfScore > 0.5, and perfScore=0.407392]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.4107 secs, and comparison 7.29526 sec, and warnIfPerfScore > 1.05, and perfScore=0.867378]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.58816 secs, and comparison 7.32871 sec, and warnIfPerfScore > 1.15, and perfScore=1.11241]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.49473 secs, and comparison 2.20945 sec, and warnIfPerfScore > 0.48, and perfScore=0.294801]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.49143 secs, and comparison 2.68215 sec, and warnIfPerfScore > 0.57, and perfScore=0.358028]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.19653 secs, and comparison 19.9491 sec, and warnIfPerfScore > 2.9, and perfScore=2.43385]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.22504 secs, and comparison 20.617 sec, and warnIfPerfScore > 2.9, and perfScore=2.50662]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.66237 secs, and comparison 149.831 sec, and warnIfPerfScore > 24, and perfScore=19.5541]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.07944 secs, and comparison 10.6212 sec, and warnIfPerfScore > 1.7, and perfScore=1.50029]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.36822 secs, and comparison 7.26641 sec, and warnIfPerfScore > 1.5, and perfScore=0.986183]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.87401 secs, and comparison 12.3826 sec, and warnIfPerfScore > 2.1, and perfScore=1.80136]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.3966 secs, and comparison 7.35499 sec, and warnIfPerfScore > 1.6, and perfScore=0.875949]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.77046 secs, and comparison 1.26485 sec, and warnIfPerfScore > 0.23, and perfScore=0.144217]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.933 secs, and comparison 12.6829 sec, and warnIfPerfScore > 1.3, and perfScore=1.06284]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.79361 secs, and comparison 5.10183 sec, and warnIfPerfScore > 1.2, and perfScore=0.520935]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 5.88595 secs, and comparison 1.43372 sec, and warnIfPerfScore > 0.33, and perfScore=0.243583]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.39261 secs, and comparison 38.5311 sec, and warnIfPerfScore > 6, and perfScore=4.10228]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.43022 secs, and comparison 4.92771 sec, and warnIfPerfScore > 0.8, and perfScore=0.522544]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.42533 secs, and comparison 8.88786 sec, and warnIfPerfScore > 1.4, and perfScore=0.942975]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.87691 secs, and comparison 3.35151 sec, and warnIfPerfScore > 0.65, and perfScore=0.570284]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.63058 secs, and comparison 36.1205 sec, and warnIfPerfScore > 4.4, and perfScore=3.7506]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.06051 secs, and comparison 3.3503 sec, and warnIfPerfScore > 0.6, and perfScore=0.552807]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.05234 secs, and comparison 3.33042 sec, and warnIfPerfScore > 0.6, and perfScore=0.55027]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.06804 secs, and comparison 3.34216 sec, and warnIfPerfScore > 0.6, and perfScore=0.55078]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.06475 secs, and comparison 4.55301 sec, and warnIfPerfScore > 1.3, and perfScore=0.750734]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.5381 secs, and comparison 8.09316 sec, and warnIfPerfScore > 1.3, and perfScore=1.23785]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.2039 secs, and comparison 5.58494 sec, and warnIfPerfScore > 0.3, and perfScore=0.126345]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.1062 secs, and comparison 11.6521 sec, and warnIfPerfScore > 1.5, and perfScore=1.43743]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.89494 secs, and comparison 2.82041 sec, and warnIfPerfScore > 0.55, and perfScore=0.409055]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.744984 sec, and warnIfPerfScore > 0.1, and perfScore=0.0496656]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.92159 sec, and warnIfPerfScore > 0.5, and perfScore=0.194772]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.73394 secs, and comparison 12.8448 sec, and warnIfPerfScore > 2, and perfScore=1.66083]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.77512 secs, and comparison 27.8706 sec, and warnIfPerfScore > 3.6, and perfScore=3.17609]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 19 seconds]]]

Succeeded
