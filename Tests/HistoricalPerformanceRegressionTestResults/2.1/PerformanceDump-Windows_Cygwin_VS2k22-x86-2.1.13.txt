Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 25 15:12:31 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.59554 secs, and comparison 4.9875 sec, and warnIfPerfScore > 0.65, and perfScore=0.656635]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.656635}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.82655 secs, and comparison 2.9961 sec, and warnIfPerfScore > 0.5, and perfScore=0.382812]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.87754 secs, and comparison 7.86682 sec, and warnIfPerfScore > 1.05, and perfScore=0.886148]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.47739 secs, and comparison 8.61378 sec, and warnIfPerfScore > 1.15, and perfScore=1.15198]
	                 	SharedPtr is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.15 and got 1.15198}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 12.2269 secs, and comparison 2.41604 sec, and warnIfPerfScore > 0.48, and perfScore=0.1976]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 12.0811 secs, and comparison 3.16563 sec, and warnIfPerfScore > 0.57, and perfScore=0.262032]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.66068 secs, and comparison 22.158 sec, and warnIfPerfScore > 2.9, and perfScore=2.29362]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 10.8183 secs, and comparison 25.2793 sec, and warnIfPerfScore > 2.9, and perfScore=2.33671]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 9.01224 secs, and comparison 163.666 sec, and warnIfPerfScore > 24, and perfScore=18.1605]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.74024 secs, and comparison 12.1163 sec, and warnIfPerfScore > 1.7, and perfScore=1.56537]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.5593 secs, and comparison 9.85078 sec, and warnIfPerfScore > 1.5, and perfScore=1.15089]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 127.235 secs, and comparison 13.5504 sec, and warnIfPerfScore > 2.1, and perfScore=0.106499]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 10.2972 secs, and comparison 7.29454 sec, and warnIfPerfScore > 1.6, and perfScore=0.708398]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.0357 secs, and comparison 1.29498 sec, and warnIfPerfScore > 0.23, and perfScore=0.117345]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0415 secs, and comparison 14.0643 sec, and warnIfPerfScore > 1.3, and perfScore=1.07843]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.9103 secs, and comparison 6.59771 sec, and warnIfPerfScore > 1.2, and perfScore=0.604723]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.94524 secs, and comparison 2.3913 sec, and warnIfPerfScore > 0.33, and perfScore=0.240447]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.66452 secs, and comparison 43.9684 sec, and warnIfPerfScore > 6, and perfScore=4.54946]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 10.0285 secs, and comparison 7.3677 sec, and warnIfPerfScore > 0.8, and perfScore=0.734673]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.8291 secs, and comparison 9.78784 sec, and warnIfPerfScore > 1.4, and perfScore=0.995802]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.2025 secs, and comparison 3.75012 sec, and warnIfPerfScore > 0.65, and perfScore=0.367567]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.1123 secs, and comparison 40.8704 sec, and warnIfPerfScore > 4.4, and perfScore=4.04166]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.6832 secs, and comparison 3.92127 sec, and warnIfPerfScore > 0.6, and perfScore=0.367051]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.3983 secs, and comparison 3.93304 sec, and warnIfPerfScore > 0.6, and perfScore=0.378239]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.0438 secs, and comparison 3.97498 sec, and warnIfPerfScore > 0.6, and perfScore=0.359929]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.9942 secs, and comparison 5.94434 sec, and warnIfPerfScore > 1.3, and perfScore=0.540682]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 12.1926 secs, and comparison 9.52737 sec, and warnIfPerfScore > 1.3, and perfScore=0.781408]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 50.9143 secs, and comparison 6.2177 sec, and warnIfPerfScore > 0.3, and perfScore=0.122121]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.64057 secs, and comparison 12.8775 sec, and warnIfPerfScore > 1.5, and perfScore=1.49035]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.43153 secs, and comparison 3.23447 sec, and warnIfPerfScore > 0.55, and perfScore=0.435237]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.851009 sec, and warnIfPerfScore > 0.1, and perfScore=0.0567339]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.01864 sec, and warnIfPerfScore > 0.5, and perfScore=0.201243]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.84708 secs, and comparison 14.0887 sec, and warnIfPerfScore > 2, and perfScore=1.59247]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.21949 secs, and comparison 30.1791 sec, and warnIfPerfScore > 3.6, and perfScore=3.2734]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 38 seconds]]]

Succeeded
