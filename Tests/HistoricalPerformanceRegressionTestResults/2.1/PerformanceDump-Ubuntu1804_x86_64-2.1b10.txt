Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 20 21:34:29 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.1172 secs, and comparison 4.82268 sec, and warnIfPerfScore > 0.62, and perfScore=0.788381]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.32457 secs, and comparison 3.07554 sec, and warnIfPerfScore > 0.5, and perfScore=0.486284]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.65759 secs, and comparison 7.06062 sec, and warnIfPerfScore > 1.05, and perfScore=1.06054]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.94847 secs, and comparison 4.00072 sec, and warnIfPerfScore > 0.48, and perfScore=1.01323]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.77116 secs, and comparison 4.93685 sec, and warnIfPerfScore > 0.57, and perfScore=1.03473]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 3.5259 secs, and comparison 20.644 sec, and warnIfPerfScore > 2.9, and perfScore=5.85495]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 4.28036 secs, and comparison 21.767 sec, and warnIfPerfScore > 2.9, and perfScore=5.08532]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 5.27155 secs, and comparison 67.6355 sec, and warnIfPerfScore > 9.7, and perfScore=12.8303]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.47509 secs, and comparison 10.9654 sec, and warnIfPerfScore > 1.6, and perfScore=2.00278]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.12441 secs, and comparison 5.71262 sec, and warnIfPerfScore > 1.5, and perfScore=0.932763]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.96298 secs, and comparison 11.1436 sec, and warnIfPerfScore > 2.1, and perfScore=3.76095]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.38147 secs, and comparison 4.52628 sec, and warnIfPerfScore > 1.3, and perfScore=1.03305]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.58249 secs, and comparison 1.78153 sec, and warnIfPerfScore > 0.23, and perfScore=0.388769]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.13928 secs, and comparison 4.69099 sec, and warnIfPerfScore > 1.3, and perfScore=1.13328]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.33773 secs, and comparison 7.50974 sec, and warnIfPerfScore > 1.2, and perfScore=2.24995]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 17.0384 secs, and comparison 1.49416 sec, and warnIfPerfScore > 0.33, and perfScore=0.0876934]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.2076 secs, and comparison 43.928 sec, and warnIfPerfScore > 6, and perfScore=13.695]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.088 secs, and comparison 4.26114 sec, and warnIfPerfScore > 0.5, and perfScore=0.35251]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 6.23183 secs, and comparison 39.4802 sec, and warnIfPerfScore > 4.4, and perfScore=6.33526]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.2041 secs, and comparison 4.46099 sec, and warnIfPerfScore > 0.6, and perfScore=0.314064]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.29299 secs, and comparison 12.4287 sec, and warnIfPerfScore > 1.5, and perfScore=1.4987]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.39405 secs, and comparison 2.22769 sec, and warnIfPerfScore > 0.55, and perfScore=0.301281]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 15 secs, and comparison 1.19695 sec, and warnIfPerfScore > 0.25, and perfScore=0.0797969]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.90221 sec, and warnIfPerfScore > 0.5, and perfScore=0.260148]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 23 seconds]]]

Succeeded
