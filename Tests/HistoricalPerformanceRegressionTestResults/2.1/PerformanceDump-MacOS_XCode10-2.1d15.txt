Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 15 21:55:55 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.23668 secs, and comparison 6.91489 sec, and warnIfPerfScore > 0.62, and perfScore=0.748634]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.0879 secs, and comparison 5.04451 sec, and warnIfPerfScore > 0.5, and perfScore=0.500055]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 17.538 secs, and comparison 13.9416 sec, and warnIfPerfScore > 1.05, and perfScore=0.794936]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 39.7541 secs, and comparison 5.93338 sec, and warnIfPerfScore > 0.45, and perfScore=0.149252]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 37.4476 secs, and comparison 5.32333 sec, and warnIfPerfScore > 0.55, and perfScore=0.142154]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 19.3197 secs, and comparison 55.8158 sec, and warnIfPerfScore > 2.8, and perfScore=2.88906]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 25.3244 secs, and comparison 62.3746 sec, and warnIfPerfScore > 2.9, and perfScore=2.46303]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 22.83 secs, and comparison 152.081 sec, and warnIfPerfScore > 9.7, and perfScore=6.66147]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.5944 secs, and comparison 26.6732 sec, and warnIfPerfScore > 1.6, and perfScore=1.36126]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.55408 secs, and comparison 5.94869 sec, and warnIfPerfScore > 1.5, and perfScore=0.69542]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.8756 secs, and comparison 31.868 sec, and warnIfPerfScore > 2.1, and perfScore=2.29669]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 11.3833 secs, and comparison 6.14459 sec, and warnIfPerfScore > 1.3, and perfScore=0.53979]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 12.0257 secs, and comparison 1.90117 sec, and warnIfPerfScore > 0.18, and perfScore=0.158093]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.7209 secs, and comparison 16.7575 sec, and warnIfPerfScore > 1.3, and perfScore=1.00219]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1878 secs, and comparison 13.1473 sec, and warnIfPerfScore > 1.2, and perfScore=1.07872]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 12.9117 secs, and comparison 2.36744 sec, and warnIfPerfScore > 0.33, and perfScore=0.183355]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.7221 secs, and comparison 54.8591 sec, and warnIfPerfScore > 6, and perfScore=4.67995]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.9059 secs, and comparison 5.07589 sec, and warnIfPerfScore > 0.5, and perfScore=0.393301]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.1795 secs, and comparison 50.4186 sec, and warnIfPerfScore > 4.4, and perfScore=3.82553]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.8744 secs, and comparison 4.93225 sec, and warnIfPerfScore > 0.6, and perfScore=0.383106]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.2887 secs, and comparison 40.6118 sec, and warnIfPerfScore > 1.5, and perfScore=1.3866]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.9693 secs, and comparison 5.77974 sec, and warnIfPerfScore > 0.55, and perfScore=0.144604]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.28193 sec, and warnIfPerfScore > 0.25, and perfScore=0.418796]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85795 sec, and warnIfPerfScore > 0.5, and perfScore=0.257197]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 37 seconds]]]

Succeeded
