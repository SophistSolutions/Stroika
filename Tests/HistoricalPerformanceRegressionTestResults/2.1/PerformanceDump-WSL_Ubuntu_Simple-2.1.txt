Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 12:41:55 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 5.1356 secs, and comparison 4.49714 sec, and warnIfPerfScore > 0.65, and perfScore=0.875679]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.14063 secs, and comparison 2.34241 sec, and warnIfPerfScore > 0.5, and perfScore=0.455666]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.81087 secs, and comparison 6.26003 sec, and warnIfPerfScore > 1.05, and perfScore=1.0773]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.64696 secs, and comparison 6.23748 sec, and warnIfPerfScore > 1.15, and perfScore=1.10457]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 2.55034 secs, and comparison 2.03018 sec, and warnIfPerfScore > 0.48, and perfScore=0.796042]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 3.1466 secs, and comparison 2.73065 sec, and warnIfPerfScore > 0.57, and perfScore=0.867812]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 2.40509 secs, and comparison 14.1116 sec, and warnIfPerfScore > 2.9, and perfScore=5.86739]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 2.95438 secs, and comparison 14.8543 sec, and warnIfPerfScore > 2.9, and perfScore=5.02791]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.873 secs, and comparison 40.5553 sec, and warnIfPerfScore > 24, and perfScore=10.4713]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.50962 secs, and comparison 8.66933 sec, and warnIfPerfScore > 1.7, and perfScore=2.47016]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.16952 secs, and comparison 3.90088 sec, and warnIfPerfScore > 1.5, and perfScore=0.935571]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 2.07487 secs, and comparison 10.5239 sec, and warnIfPerfScore > 2.1, and perfScore=5.07208]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 2.97746 secs, and comparison 2.48923 sec, and warnIfPerfScore > 1.6, and perfScore=0.836025]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 3.067 secs, and comparison 1.12161 sec, and warnIfPerfScore > 0.23, and perfScore=0.365703]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.71318 secs, and comparison 3.471 sec, and warnIfPerfScore > 1.3, and perfScore=1.27931]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.21515 secs, and comparison 4.98009 sec, and warnIfPerfScore > 1.2, and perfScore=2.24819]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.1485 secs, and comparison 1.19842 sec, and warnIfPerfScore > 0.33, and perfScore=0.118088]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 2.20618 secs, and comparison 39.7846 sec, and warnIfPerfScore > 6, and perfScore=18.0333]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.22413 secs, and comparison 4.68183 sec, and warnIfPerfScore > 0.8, and perfScore=2.10502]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.31203 secs, and comparison 5.90017 sec, and warnIfPerfScore > 1.4, and perfScore=2.55194]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.46 secs, and comparison 3.48527 sec, and warnIfPerfScore > 0.65, and perfScore=0.3332]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.21274 secs, and comparison 37.6841 sec, and warnIfPerfScore > 4.4, and perfScore=11.7296]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.95157 secs, and comparison 3.48813 sec, and warnIfPerfScore > 0.6, and perfScore=0.438673]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.67245 secs, and comparison 3.42601 sec, and warnIfPerfScore > 0.6, and perfScore=0.446534]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.42574 secs, and comparison 3.45232 sec, and warnIfPerfScore > 0.6, and perfScore=0.464913]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.67111 secs, and comparison 3.37906 sec, and warnIfPerfScore > 1.3, and perfScore=0.440492]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.6563 secs, and comparison 8.00427 sec, and warnIfPerfScore > 1.3, and perfScore=0.632436]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 12.6324 secs, and comparison 5.5711 sec, and warnIfPerfScore > 0.3, and perfScore=0.441018]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.47411 secs, and comparison 11.5263 sec, and warnIfPerfScore > 1.5, and perfScore=2.1056]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 5.04009 secs, and comparison 2.09231 sec, and warnIfPerfScore > 0.55, and perfScore=0.415133]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.602507 sec, and warnIfPerfScore > 0.1, and perfScore=0.0401671]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.70547 sec, and warnIfPerfScore > 0.5, and perfScore=0.180365]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 1 second]]]

Succeeded
