Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 18:1:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.715 secs, and comparison 5.83389 sec, and warnIfPerfScore > 0.65, and perfScore=0.425364]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.7743 secs, and comparison 4.85464 sec, and warnIfPerfScore > 0.5, and perfScore=0.328588]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 16.5048 secs, and comparison 10.7576 sec, and warnIfPerfScore > 1.05, and perfScore=0.651786]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.623 secs, and comparison 11.4395 sec, and warnIfPerfScore > 1.15, and perfScore=1.07686]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 13.4205 secs, and comparison 3.52823 sec, and warnIfPerfScore > 0.48, and perfScore=0.262898]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.1013 secs, and comparison 4.21615 sec, and warnIfPerfScore > 0.57, and perfScore=0.321813]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.4436 secs, and comparison 35.6591 sec, and warnIfPerfScore > 2.9, and perfScore=2.46886]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 20.3377 secs, and comparison 37.1543 sec, and warnIfPerfScore > 2.9, and perfScore=1.82686]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 16.0481 secs, and comparison 203.707 sec, and warnIfPerfScore > 24, and perfScore=12.6936]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.2616 secs, and comparison 16.1408 sec, and warnIfPerfScore > 1.7, and perfScore=1.31637]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 14.9086 secs, and comparison 14.1823 sec, and warnIfPerfScore > 1.5, and perfScore=0.951287]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.2536 secs, and comparison 19.8404 sec, and warnIfPerfScore > 2.1, and perfScore=1.76303]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 14.8215 secs, and comparison 10.4074 sec, and warnIfPerfScore > 1.6, and perfScore=0.702183]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 16.0066 secs, and comparison 2.19893 sec, and warnIfPerfScore > 0.23, and perfScore=0.137376]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.8099 secs, and comparison 17.1839 sec, and warnIfPerfScore > 1.3, and perfScore=1.08691]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 12.5138 secs, and comparison 9.41044 sec, and warnIfPerfScore > 1.2, and perfScore=0.752007]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 11.9354 secs, and comparison 2.92166 sec, and warnIfPerfScore > 0.33, and perfScore=0.244789]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 12.5425 secs, and comparison 52.6348 sec, and warnIfPerfScore > 6, and perfScore=4.1965]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 11.574 secs, and comparison 8.1646 sec, and warnIfPerfScore > 0.8, and perfScore=0.705426]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.1074 secs, and comparison 16.0823 sec, and warnIfPerfScore > 1.4, and perfScore=1.3283]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.4491 secs, and comparison 5.03275 sec, and warnIfPerfScore > 0.65, and perfScore=0.404265]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.9641 secs, and comparison 49.4475 sec, and warnIfPerfScore > 4.4, and perfScore=3.81419]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.7934 secs, and comparison 5.06828 sec, and warnIfPerfScore > 0.6, and perfScore=0.429755]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.8082 secs, and comparison 5.15421 sec, and warnIfPerfScore > 0.6, and perfScore=0.436495]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.9516 secs, and comparison 5.20594 sec, and warnIfPerfScore > 0.6, and perfScore=0.435585]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 12.3283 secs, and comparison 9.25717 sec, and warnIfPerfScore > 1.3, and perfScore=0.750886]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.8189 secs, and comparison 14.1814 sec, and warnIfPerfScore > 1.3, and perfScore=1.02623]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 75.7497 secs, and comparison 12.1964 sec, and warnIfPerfScore > 0.3, and perfScore=0.161009]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.6057 secs, and comparison 21.843 sec, and warnIfPerfScore > 1.5, and perfScore=1.31539]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 17.2158 secs, and comparison 5.47236 sec, and warnIfPerfScore > 0.55, and perfScore=0.317868]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 15 secs, and comparison 1.0952 sec, and warnIfPerfScore > 0.1, and perfScore=0.0730131]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.27141 sec, and warnIfPerfScore > 0.5, and perfScore=0.284761]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 14.4787 secs, and comparison 24.4682 sec, and warnIfPerfScore > 2, and perfScore=1.68994]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.6072 secs, and comparison 40.0997 sec, and warnIfPerfScore > 3.6, and perfScore=2.74521]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 56 seconds]]]

Succeeded
