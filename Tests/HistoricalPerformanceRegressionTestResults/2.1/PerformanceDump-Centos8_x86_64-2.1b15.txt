Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Dec 23 12:31:22 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.22567 secs, and comparison 4.64203 sec, and warnIfPerfScore > 0.62, and perfScore=0.745628]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.23548 secs, and comparison 2.9713 sec, and warnIfPerfScore > 0.5, and perfScore=0.476515]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.39874 secs, and comparison 6.80317 sec, and warnIfPerfScore > 1.05, and perfScore=1.06321]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.00116 secs, and comparison 6.93387 sec, and warnIfPerfScore > 1.15, and perfScore=1.15542]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 3.99534 secs, and comparison 3.0241 sec, and warnIfPerfScore > 0.48, and perfScore=0.756906]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.84241 secs, and comparison 4.40399 sec, and warnIfPerfScore > 0.57, and perfScore=0.909462]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 5.46141 secs, and comparison 18.6061 sec, and warnIfPerfScore > 2.9, and perfScore=3.40683]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.78936 secs, and comparison 19.3531 sec, and warnIfPerfScore > 2.9, and perfScore=5.10723]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 4.71786 secs, and comparison 82.1283 sec, and warnIfPerfScore > 9.7, and perfScore=17.4079]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.96784 secs, and comparison 10.5894 sec, and warnIfPerfScore > 1.6, and perfScore=1.18082]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.1739 secs, and comparison 6.57383 sec, and warnIfPerfScore > 1.5, and perfScore=1.06478]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 3.83098 secs, and comparison 13.7497 sec, and warnIfPerfScore > 2.1, and perfScore=3.58909]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.80925 secs, and comparison 6.89185 sec, and warnIfPerfScore > 1.3, and perfScore=0.882525]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.85093 secs, and comparison 2.92035 sec, and warnIfPerfScore > 0.23, and perfScore=0.371975]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.02405 secs, and comparison 7.746 sec, and warnIfPerfScore > 1.3, and perfScore=1.10278]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.26557 secs, and comparison 13.8643 sec, and warnIfPerfScore > 1.2, and perfScore=2.633]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 24.4624 secs, and comparison 2.91786 sec, and warnIfPerfScore > 0.33, and perfScore=0.11928]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 5.7693 secs, and comparison 46.3917 sec, and warnIfPerfScore > 6, and perfScore=8.04114]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.64233 secs, and comparison 13.0647 sec, and warnIfPerfScore > 0.8, and perfScore=2.31549]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 5.75866 secs, and comparison 14.2279 sec, and warnIfPerfScore > 0.9, and perfScore=2.47069]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.125 secs, and comparison 3.76687 sec, and warnIfPerfScore > 0.5, and perfScore=0.31067]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 5.45159 secs, and comparison 44.2525 sec, and warnIfPerfScore > 4.4, and perfScore=8.11734]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.6516 secs, and comparison 4.65882 sec, and warnIfPerfScore > 0.6, and perfScore=0.317974]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 19.8533 secs, and comparison 7.08568 sec, and warnIfPerfScore > 0.2, and perfScore=0.356903]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.35092 secs, and comparison 12.0118 sec, and warnIfPerfScore > 1.5, and perfScore=1.63405]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.08189 secs, and comparison 3.07258 sec, and warnIfPerfScore > 0.55, and perfScore=0.433865]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 15 secs, and comparison 1.28241 sec, and warnIfPerfScore > 0.25, and perfScore=0.0854937]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.41101 sec, and warnIfPerfScore > 0.5, and perfScore=0.2274]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 28 seconds]]]

Succeeded
