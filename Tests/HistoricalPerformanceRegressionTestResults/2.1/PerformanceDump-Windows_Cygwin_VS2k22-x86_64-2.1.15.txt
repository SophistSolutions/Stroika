Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 31 14:30:49 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.93781 secs, and comparison 6.94523 sec, and warnIfPerfScore > 0.65, and perfScore=1.16966]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.76665 secs, and comparison 2.6994 sec, and warnIfPerfScore > 0.5, and perfScore=0.276389]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.7366 secs, and comparison 7.90738 sec, and warnIfPerfScore > 1.05, and perfScore=0.620842]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.02506 secs, and comparison 7.70334 sec, and warnIfPerfScore > 1.15, and perfScore=1.09655]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.00644 secs, and comparison 2.9536 sec, and warnIfPerfScore > 0.48, and perfScore=0.327943]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.92644 secs, and comparison 3.57606 sec, and warnIfPerfScore > 0.57, and perfScore=0.400615]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.42099 secs, and comparison 24.4477 sec, and warnIfPerfScore > 2.9, and perfScore=2.59503]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 10.6697 secs, and comparison 24.8898 sec, and warnIfPerfScore > 2.9, and perfScore=2.33275]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.54769 secs, and comparison 160.341 sec, and warnIfPerfScore > 24, and perfScore=18.7584]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.34759 secs, and comparison 12.2381 sec, and warnIfPerfScore > 1.7, and perfScore=1.66559]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.99758 secs, and comparison 7.40138 sec, and warnIfPerfScore > 1.5, and perfScore=0.925452]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.20834 secs, and comparison 14.5511 sec, and warnIfPerfScore > 2.1, and perfScore=1.77272]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.26332 secs, and comparison 5.42062 sec, and warnIfPerfScore > 1.6, and perfScore=0.585171]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 10.0268 secs, and comparison 0.873995 sec, and warnIfPerfScore > 0.23, and perfScore=0.0871663]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.0592 secs, and comparison 16.0448 sec, and warnIfPerfScore > 1.3, and perfScore=1.06545]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.6806 secs, and comparison 7.07469 sec, and warnIfPerfScore > 1.2, and perfScore=0.662386]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.79955 secs, and comparison 2.52748 sec, and warnIfPerfScore > 0.33, and perfScore=0.287228]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.94221 secs, and comparison 41.1671 sec, and warnIfPerfScore > 6, and perfScore=4.14064]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15.0809 secs, and comparison 6.12579 sec, and warnIfPerfScore > 0.8, and perfScore=0.406197]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.70251 secs, and comparison 14.2613 sec, and warnIfPerfScore > 1.4, and perfScore=1.63876]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.59208 secs, and comparison 3.39883 sec, and warnIfPerfScore > 0.65, and perfScore=0.395577]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.80636 secs, and comparison 46.2118 sec, and warnIfPerfScore > 4.4, and perfScore=4.71243]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.9919 secs, and comparison 4.29664 sec, and warnIfPerfScore > 0.6, and perfScore=0.390892]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.1698 secs, and comparison 4.28769 sec, and warnIfPerfScore > 0.6, and perfScore=0.383862]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.9442 secs, and comparison 4.3232 sec, and warnIfPerfScore > 0.6, and perfScore=0.395023]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 10.8079 secs, and comparison 7.70094 sec, and warnIfPerfScore > 1.3, and perfScore=0.712532]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 11.5237 secs, and comparison 11.2131 sec, and warnIfPerfScore > 1.3, and perfScore=0.97305]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 53.7992 secs, and comparison 9.02702 sec, and warnIfPerfScore > 0.3, and perfScore=0.167791]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.82154 secs, and comparison 13.8665 sec, and warnIfPerfScore > 1.5, and perfScore=1.57189]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.15201 secs, and comparison 4.7331 sec, and warnIfPerfScore > 0.55, and perfScore=0.517165]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.065
	DETAILS:         	[baseline test 15 secs, and comparison 0.978866 sec, and warnIfPerfScore > 0.1, and perfScore=0.0652577]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.01792 sec, and warnIfPerfScore > 0.5, and perfScore=0.201195]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.3566 secs, and comparison 16.4838 sec, and warnIfPerfScore > 2, and perfScore=1.59163]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.9332 secs, and comparison 21.3357 sec, and warnIfPerfScore > 3.6, and perfScore=1.64968]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 44 seconds]]]

Succeeded
