Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan 10 8:34:15 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.93011 secs, and comparison 4.61583 sec, and warnIfPerfScore > 0.62, and perfScore=0.778372]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.90915 secs, and comparison 2.87986 sec, and warnIfPerfScore > 0.5, and perfScore=0.487356]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.43446 secs, and comparison 6.90263 sec, and warnIfPerfScore > 1.05, and perfScore=1.07276]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 3.79487 secs, and comparison 3.7052 sec, and warnIfPerfScore > 0.48, and perfScore=0.97637]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.45805 secs, and comparison 4.40355 sec, and warnIfPerfScore > 0.55, and perfScore=0.987773]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.43901 secs, and comparison 17.4414 sec, and warnIfPerfScore > 2.9, and perfScore=5.07163]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 4.135 secs, and comparison 18.5096 sec, and warnIfPerfScore > 2.9, and perfScore=4.47633]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.09016 secs, and comparison 54.1215 sec, and warnIfPerfScore > 9.7, and perfScore=10.6326]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.12251 secs, and comparison 10.2 sec, and warnIfPerfScore > 1.6, and perfScore=1.99121]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.77274 secs, and comparison 5.79439 sec, and warnIfPerfScore > 1.5, and perfScore=1.00375]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 2.66461 secs, and comparison 10.6353 sec, and warnIfPerfScore > 2.1, and perfScore=3.9913]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.41308 secs, and comparison 4.9454 sec, and warnIfPerfScore > 1.3, and perfScore=1.12062]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.63423 secs, and comparison 1.60708 sec, and warnIfPerfScore > 0.18, and perfScore=0.346784]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.91232 secs, and comparison 4.94548 sec, and warnIfPerfScore > 1.3, and perfScore=1.26408]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.53646 secs, and comparison 8.64475 sec, and warnIfPerfScore > 1.2, and perfScore=2.44446]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 14.8905 secs, and comparison 1.48714 sec, and warnIfPerfScore > 0.33, and perfScore=0.0998714]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.35871 secs, and comparison 42.8662 sec, and warnIfPerfScore > 6, and perfScore=12.7627]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.0801 secs, and comparison 3.82977 sec, and warnIfPerfScore > 0.5, and perfScore=0.379935]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 5.84335 secs, and comparison 39.677 sec, and warnIfPerfScore > 4.4, and perfScore=6.79011]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.7233 secs, and comparison 3.80194 sec, and warnIfPerfScore > 0.6, and perfScore=0.324306]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.05004 secs, and comparison 12.3727 sec, and warnIfPerfScore > 1.5, and perfScore=1.53697]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.9668 secs, and comparison 2.05636 sec, and warnIfPerfScore > 0.55, and perfScore=0.295165]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.05332 sec, and warnIfPerfScore > 0.25, and perfScore=0.0702214]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.74698 sec, and warnIfPerfScore > 0.5, and perfScore=0.249799]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 42 seconds]]]

Succeeded
