Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr 26 8:58:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.54814 secs, and comparison 4.61073 sec, and warnIfPerfScore > 0.65, and perfScore=0.610844]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.60744 secs, and comparison 3.06227 sec, and warnIfPerfScore > 0.5, and perfScore=0.402536]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.47272 secs, and comparison 7.94678 sec, and warnIfPerfScore > 1.05, and perfScore=0.838913]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.34097 secs, and comparison 8.07901 sec, and warnIfPerfScore > 1.15, and perfScore=1.10054]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.26643 secs, and comparison 2.45971 sec, and warnIfPerfScore > 0.48, and perfScore=0.297554]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.26361 secs, and comparison 3.00313 sec, and warnIfPerfScore > 0.57, and perfScore=0.363417]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.97705 secs, and comparison 22.2133 sec, and warnIfPerfScore > 2.9, and perfScore=2.47445]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.86611 secs, and comparison 23.1366 sec, and warnIfPerfScore > 2.9, and perfScore=2.60955]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.13085 secs, and comparison 157.646 sec, and warnIfPerfScore > 24, and perfScore=19.3886]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.1599 secs, and comparison 11.7456 sec, and warnIfPerfScore > 1.7, and perfScore=1.43942]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.33041 secs, and comparison 8.24211 sec, and warnIfPerfScore > 1.5, and perfScore=0.989401]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.76097 secs, and comparison 13.686 sec, and warnIfPerfScore > 2.1, and perfScore=1.76344]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.72846 secs, and comparison 7.08586 sec, and warnIfPerfScore > 1.6, and perfScore=0.728364]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.0268 secs, and comparison 1.36695 sec, and warnIfPerfScore > 0.23, and perfScore=0.13633]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.3777 secs, and comparison 13.8137 sec, and warnIfPerfScore > 1.3, and perfScore=1.03259]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.4668 secs, and comparison 5.82621 sec, and warnIfPerfScore > 1.2, and perfScore=0.556638]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.49248 secs, and comparison 1.54616 sec, and warnIfPerfScore > 0.33, and perfScore=0.238146]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.95221 secs, and comparison 41.5815 sec, and warnIfPerfScore > 6, and perfScore=4.17812]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.1586 secs, and comparison 5.62937 sec, and warnIfPerfScore > 0.8, and perfScore=0.55415]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.0972 secs, and comparison 9.34899 sec, and warnIfPerfScore > 1.4, and perfScore=0.925899]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.51607 secs, and comparison 3.66922 sec, and warnIfPerfScore > 0.65, and perfScore=0.563103]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.2595 secs, and comparison 38.5676 sec, and warnIfPerfScore > 4.4, and perfScore=3.7592]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.55918 secs, and comparison 3.58145 sec, and warnIfPerfScore > 0.6, and perfScore=0.546021]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.48518 secs, and comparison 3.63149 sec, and warnIfPerfScore > 0.6, and perfScore=0.559968]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.49265 secs, and comparison 3.66577 sec, and warnIfPerfScore > 0.6, and perfScore=0.564604]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.69963 secs, and comparison 4.91164 sec, and warnIfPerfScore > 1.3, and perfScore=0.733121]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.07596 secs, and comparison 8.73368 sec, and warnIfPerfScore > 1.3, and perfScore=1.23428]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 48.8535 secs, and comparison 6.44818 sec, and warnIfPerfScore > 0.3, and perfScore=0.13199]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.65811 secs, and comparison 12.8912 sec, and warnIfPerfScore > 1.5, and perfScore=1.48892]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.8463 secs, and comparison 3.01422 sec, and warnIfPerfScore > 0.55, and perfScore=0.384158]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.803985 sec, and warnIfPerfScore > 0.1, and perfScore=0.053599]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.20984 sec, and warnIfPerfScore > 0.5, and perfScore=0.213989]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.85336 secs, and comparison 9.17764 sec, and warnIfPerfScore > 2, and perfScore=1.03663]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.80157 secs, and comparison 30.8333 sec, and warnIfPerfScore > 3.6, and perfScore=3.14575]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 18 seconds]]]

Succeeded
