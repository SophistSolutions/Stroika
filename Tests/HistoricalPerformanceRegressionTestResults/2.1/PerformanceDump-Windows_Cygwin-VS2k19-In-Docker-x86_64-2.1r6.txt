Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 28 1:21:47 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.40577 secs, and comparison 4.3502 sec, and warnIfPerfScore > 0.65, and perfScore=0.804733]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.3124 secs, and comparison 2.49559 sec, and warnIfPerfScore > 0.5, and perfScore=0.469767]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.38042 secs, and comparison 7.24754 sec, and warnIfPerfScore > 1.05, and perfScore=0.864818]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.67962 secs, and comparison 7.29184 sec, and warnIfPerfScore > 1.15, and perfScore=1.09166]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.49682 secs, and comparison 2.18179 sec, and warnIfPerfScore > 0.48, and perfScore=0.256777]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.44409 secs, and comparison 2.73502 sec, and warnIfPerfScore > 0.57, and perfScore=0.323898]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.16506 secs, and comparison 19.1064 sec, and warnIfPerfScore > 2.9, and perfScore=2.6666]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.42302 secs, and comparison 19.0059 sec, and warnIfPerfScore > 2.9, and perfScore=2.56039]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.48122 secs, and comparison 138.52 sec, and warnIfPerfScore > 24, and perfScore=21.3725]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.0798 secs, and comparison 10.0467 sec, and warnIfPerfScore > 1.7, and perfScore=1.65247]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.36681 secs, and comparison 6.16999 sec, and warnIfPerfScore > 1.5, and perfScore=0.969086]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.58679 secs, and comparison 12.1035 sec, and warnIfPerfScore > 2.1, and perfScore=2.16645]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.42768 secs, and comparison 4.86125 sec, and warnIfPerfScore > 1.6, and perfScore=0.654478]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 7.75877 secs, and comparison 0.69873 sec, and warnIfPerfScore > 0.23, and perfScore=0.0900568]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3165 secs, and comparison 12.7959 sec, and warnIfPerfScore > 1.3, and perfScore=1.03892]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.7812 secs, and comparison 5.5531 sec, and warnIfPerfScore > 1.2, and perfScore=0.632385]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 8.83667 secs, and comparison 1.98137 sec, and warnIfPerfScore > 0.33, and perfScore=0.224222]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.46202 secs, and comparison 39.2347 sec, and warnIfPerfScore > 6, and perfScore=4.63657]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.42892 secs, and comparison 5.32157 sec, and warnIfPerfScore > 0.8, and perfScore=0.631346]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.45807 secs, and comparison 7.94805 sec, and warnIfPerfScore > 1.4, and perfScore=0.939701]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.80072 secs, and comparison 3.46396 sec, and warnIfPerfScore > 0.65, and perfScore=0.3936]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.07085 secs, and comparison 36.4749 sec, and warnIfPerfScore > 4.4, and perfScore=4.02111]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.56185 secs, and comparison 3.38395 sec, and warnIfPerfScore > 0.6, and perfScore=0.395236]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.75293 secs, and comparison 3.37324 sec, and warnIfPerfScore > 0.6, and perfScore=0.385384]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.97118 secs, and comparison 3.55708 sec, and warnIfPerfScore > 0.6, and perfScore=0.396501]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.70445 secs, and comparison 5.30902 sec, and warnIfPerfScore > 1.3, and perfScore=0.609921]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 9.5007 secs, and comparison 8.70201 sec, and warnIfPerfScore > 1.3, and perfScore=0.915933]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 42.584 secs, and comparison 6.87421 sec, and warnIfPerfScore > 0.3, and perfScore=0.161427]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.52366 secs, and comparison 10.5828 sec, and warnIfPerfScore > 1.5, and perfScore=1.62222]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.83686 secs, and comparison 2.82618 sec, and warnIfPerfScore > 0.55, and perfScore=0.413374]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.638117 sec, and warnIfPerfScore > 0.1, and perfScore=0.0425411]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.99092 sec, and warnIfPerfScore > 0.5, and perfScore=0.199395]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.66739 secs, and comparison 8.51626 sec, and warnIfPerfScore > 2, and perfScore=1.11071]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.77702 secs, and comparison 14.5072 sec, and warnIfPerfScore > 3.6, and perfScore=1.8654]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 47 seconds]]]

Succeeded
