Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 1:8:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.7179 secs, and comparison 4.28397 sec, and warnIfPerfScore > 0.65, and perfScore=0.749221]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.76587 secs, and comparison 2.61985 sec, and warnIfPerfScore > 0.5, and perfScore=0.454372]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.9998 secs, and comparison 7.10808 sec, and warnIfPerfScore > 1.05, and perfScore=0.888532]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.49795 secs, and comparison 7.11403 sec, and warnIfPerfScore > 1.15, and perfScore=1.09481]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.12599 secs, and comparison 2.17315 sec, and warnIfPerfScore > 0.48, and perfScore=0.267432]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.94921 secs, and comparison 2.77092 sec, and warnIfPerfScore > 0.57, and perfScore=0.348578]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.54765 secs, and comparison 18.7851 sec, and warnIfPerfScore > 2.9, and perfScore=2.86899]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.03736 secs, and comparison 18.8241 sec, and warnIfPerfScore > 2.9, and perfScore=2.67488]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.0016 secs, and comparison 137.238 sec, and warnIfPerfScore > 24, and perfScore=22.867]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.51769 secs, and comparison 9.92266 sec, and warnIfPerfScore > 1.7, and perfScore=1.79834]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.00998 secs, and comparison 5.8509 sec, and warnIfPerfScore > 1.5, and perfScore=0.97353]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.24266 secs, and comparison 11.9591 sec, and warnIfPerfScore > 2.1, and perfScore=2.28111]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.92785 secs, and comparison 4.60613 sec, and warnIfPerfScore > 1.6, and perfScore=0.664872]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 7.11947 secs, and comparison 0.700941 sec, and warnIfPerfScore > 0.23, and perfScore=0.098454]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.5953 secs, and comparison 12.0826 sec, and warnIfPerfScore > 1.3, and perfScore=1.04203]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.29384 secs, and comparison 5.22162 sec, and warnIfPerfScore > 1.2, and perfScore=0.629578]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.49326 secs, and comparison 2.01581 sec, and warnIfPerfScore > 0.33, and perfScore=0.237343]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.16025 secs, and comparison 37.9894 sec, and warnIfPerfScore > 6, and perfScore=4.65542]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.01123 secs, and comparison 4.97516 sec, and warnIfPerfScore > 0.8, and perfScore=0.621023]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.05982 secs, and comparison 7.61688 sec, and warnIfPerfScore > 1.4, and perfScore=0.945043]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.14119 secs, and comparison 3.38466 sec, and warnIfPerfScore > 0.65, and perfScore=0.415745]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.58948 secs, and comparison 35.5898 sec, and warnIfPerfScore > 4.4, and perfScore=4.14342]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.93287 secs, and comparison 3.24326 sec, and warnIfPerfScore > 0.6, and perfScore=0.408838]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.00598 secs, and comparison 3.26266 sec, and warnIfPerfScore > 0.6, and perfScore=0.407527]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.07131 secs, and comparison 3.2692 sec, and warnIfPerfScore > 0.6, and perfScore=0.40504]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.94167 secs, and comparison 4.95978 sec, and warnIfPerfScore > 1.3, and perfScore=0.624526]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.78192 secs, and comparison 8.16216 sec, and warnIfPerfScore > 1.3, and perfScore=0.929428]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 38.9825 secs, and comparison 6.30055 sec, and warnIfPerfScore > 0.3, and perfScore=0.161625]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.06839 secs, and comparison 9.70477 sec, and warnIfPerfScore > 1.5, and perfScore=1.59923]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.59385 secs, and comparison 2.78683 sec, and warnIfPerfScore > 0.55, and perfScore=0.422641]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.618067 sec, and warnIfPerfScore > 0.1, and perfScore=0.0412045]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.81754 sec, and warnIfPerfScore > 0.5, and perfScore=0.187836]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.02297 secs, and comparison 8.23837 sec, and warnIfPerfScore > 2, and perfScore=1.17306]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.98937 secs, and comparison 13.9359 sec, and warnIfPerfScore > 3.6, and perfScore=1.99387]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 20 seconds]]]

Succeeded
