Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 2:9:7 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 11.3649 secs, and comparison 6.06978 sec, and warnIfPerfScore > 0.65, and perfScore=0.534082]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.4728 secs, and comparison 4.16368 sec, and warnIfPerfScore > 0.5, and perfScore=0.362916]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.4562 secs, and comparison 11.5106 sec, and warnIfPerfScore > 1.05, and perfScore=0.796239]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.6393 secs, and comparison 11.5 sec, and warnIfPerfScore > 1.15, and perfScore=1.0809]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 48.0607 secs, and comparison 3.25261 sec, and warnIfPerfScore > 0.48, and perfScore=0.0676772]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 45.8531 secs, and comparison 3.36397 sec, and warnIfPerfScore > 0.57, and perfScore=0.073364]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 17.0635 secs, and comparison 33.9056 sec, and warnIfPerfScore > 2.9, and perfScore=1.98702]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 17.6587 secs, and comparison 35.732 sec, and warnIfPerfScore > 2.9, and perfScore=2.02348]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 14.7198 secs, and comparison 232.289 sec, and warnIfPerfScore > 24, and perfScore=15.7806]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.9021 secs, and comparison 15.9804 sec, and warnIfPerfScore > 1.7, and perfScore=1.07236]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.8452 secs, and comparison 17.134 sec, and warnIfPerfScore > 1.5, and perfScore=1.08134]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.911 secs, and comparison 17.1767 sec, and warnIfPerfScore > 2.1, and perfScore=1.15195]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 19.5824 secs, and comparison 11.3583 sec, and warnIfPerfScore > 1.6, and perfScore=0.580026]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 20.3083 secs, and comparison 2.47817 sec, and warnIfPerfScore > 0.23, and perfScore=0.122028]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.3103 secs, and comparison 19.7923 sec, and warnIfPerfScore > 1.3, and perfScore=1.02496]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 16.1075 secs, and comparison 10.9128 sec, and warnIfPerfScore > 1.2, and perfScore=0.6775]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.3855 secs, and comparison 2.97185 sec, and warnIfPerfScore > 0.33, and perfScore=0.26102]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 14.6671 secs, and comparison 52.3473 sec, and warnIfPerfScore > 6, and perfScore=3.56904]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 15.1432 secs, and comparison 10.5913 sec, and warnIfPerfScore > 0.8, and perfScore=0.699411]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.4653 secs, and comparison 18.6927 sec, and warnIfPerfScore > 1.4, and perfScore=1.20868]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.92896 secs, and comparison 4.13256 sec, and warnIfPerfScore > 0.65, and perfScore=0.462826]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 12.9824 secs, and comparison 43.1329 sec, and warnIfPerfScore > 4.4, and perfScore=3.32241]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.9879 secs, and comparison 4.15438 sec, and warnIfPerfScore > 0.6, and perfScore=0.462219]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.95484 secs, and comparison 4.15174 sec, and warnIfPerfScore > 0.6, and perfScore=0.463631]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.08493 secs, and comparison 4.17161 sec, and warnIfPerfScore > 0.6, and perfScore=0.459179]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 9.07003 secs, and comparison 6.59048 sec, and warnIfPerfScore > 1.3, and perfScore=0.726622]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.8987 secs, and comparison 13.2831 sec, and warnIfPerfScore > 1.3, and perfScore=1.11636]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 80.8428 secs, and comparison 8.55613 sec, and warnIfPerfScore > 0.3, and perfScore=0.105837]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.6333 secs, and comparison 22.1126 sec, and warnIfPerfScore > 1.5, and perfScore=1.25403]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.9891 secs, and comparison 3.73184 sec, and warnIfPerfScore > 0.55, and perfScore=0.339594]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.12808 sec, and warnIfPerfScore > 0.1, and perfScore=0.0752054]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.55178 sec, and warnIfPerfScore > 0.5, and perfScore=0.236785]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.5627 secs, and comparison 17.0991 sec, and warnIfPerfScore > 2, and perfScore=1.17418]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 18.9921 secs, and comparison 45.2417 sec, and warnIfPerfScore > 3.6, and perfScore=2.38213]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 21 minutes, 4 seconds]]]

Succeeded
