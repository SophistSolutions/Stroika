Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Apr 27 15:50:42 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.49699 secs, and comparison 4.25984 sec, and warnIfPerfScore > 0.65, and perfScore=0.947265]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 4.47628 secs, and comparison 1.99562 sec, and warnIfPerfScore > 0.5, and perfScore=0.445822]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.54473 secs, and comparison 6.02717 sec, and warnIfPerfScore > 1.05, and perfScore=1.08701]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.81438 secs, and comparison 5.95182 sec, and warnIfPerfScore > 1.15, and perfScore=1.23626]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 2.46344 secs, and comparison 1.87408 sec, and warnIfPerfScore > 0.48, and perfScore=0.760758]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 3.18887 secs, and comparison 2.54035 sec, and warnIfPerfScore > 0.57, and perfScore=0.796631]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 2.49412 secs, and comparison 12.8254 sec, and warnIfPerfScore > 2.9, and perfScore=5.14224]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 2.91097 secs, and comparison 13.4653 sec, and warnIfPerfScore > 2.9, and perfScore=4.62573]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.9
	DETAILS:         	[baseline test 3.77901 secs, and comparison 37.4729 sec, and warnIfPerfScore > 24, and perfScore=9.91606]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.55621 secs, and comparison 8.00516 sec, and warnIfPerfScore > 1.7, and perfScore=2.25104]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.18049 secs, and comparison 3.9117 sec, and warnIfPerfScore > 1.5, and perfScore=0.935703]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 2.01609 secs, and comparison 9.60001 sec, and warnIfPerfScore > 2.1, and perfScore=4.7617]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 2.91488 secs, and comparison 2.51593 sec, and warnIfPerfScore > 1.6, and perfScore=0.863133]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 3.1073 secs, and comparison 1.12922 sec, and warnIfPerfScore > 0.23, and perfScore=0.363411]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.6764 secs, and comparison 3.33101 sec, and warnIfPerfScore > 1.3, and perfScore=1.24458]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.35726 secs, and comparison 4.89308 sec, and warnIfPerfScore > 1.2, and perfScore=2.07575]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.2683 secs, and comparison 1.21951 sec, and warnIfPerfScore > 0.33, and perfScore=0.118765]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.23282 secs, and comparison 38.5274 sec, and warnIfPerfScore > 6, and perfScore=17.2551]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.20074 secs, and comparison 4.66229 sec, and warnIfPerfScore > 0.8, and perfScore=2.11851]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.20146 secs, and comparison 5.84835 sec, and warnIfPerfScore > 1.4, and perfScore=2.65658]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.1153 secs, and comparison 3.33122 sec, and warnIfPerfScore > 0.65, and perfScore=0.329326]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 2.97423 secs, and comparison 35.7621 sec, and warnIfPerfScore > 4.4, and perfScore=12.024]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.65924 secs, and comparison 3.28038 sec, and warnIfPerfScore > 0.6, and perfScore=0.42829]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.32276 secs, and comparison 3.37741 sec, and warnIfPerfScore > 0.6, and perfScore=0.461222]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.41244 secs, and comparison 3.23989 sec, and warnIfPerfScore > 0.6, and perfScore=0.437088]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.34292 secs, and comparison 3.23381 sec, and warnIfPerfScore > 1.3, and perfScore=0.440398]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.2654 secs, and comparison 7.63168 sec, and warnIfPerfScore > 1.3, and perfScore=0.62221]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 12.3765 secs, and comparison 5.45729 sec, and warnIfPerfScore > 0.3, and perfScore=0.440938]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.34904 secs, and comparison 10.9434 sec, and warnIfPerfScore > 1.5, and perfScore=2.04586]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 4.99593 secs, and comparison 2.22661 sec, and warnIfPerfScore > 0.55, and perfScore=0.445685]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.648586 sec, and warnIfPerfScore > 0.1, and perfScore=0.0432391]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.62428 sec, and warnIfPerfScore > 0.5, and perfScore=0.174952]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 42 seconds]]]

Succeeded
