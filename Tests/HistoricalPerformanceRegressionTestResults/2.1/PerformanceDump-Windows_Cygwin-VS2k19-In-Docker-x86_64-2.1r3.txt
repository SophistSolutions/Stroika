Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 14 19:43:9 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.79377 secs, and comparison 4.4906 sec, and warnIfPerfScore > 0.65, and perfScore=0.775075]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.90742 secs, and comparison 2.7304 sec, and warnIfPerfScore > 0.5, and perfScore=0.345296]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.82803 secs, and comparison 7.28059 sec, and warnIfPerfScore > 1.05, and perfScore=0.930067]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.62274 secs, and comparison 7.22607 sec, and warnIfPerfScore > 1.15, and perfScore=1.0911]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.15902 secs, and comparison 2.67566 sec, and warnIfPerfScore > 0.48, and perfScore=0.434429]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.2499 secs, and comparison 3.25395 sec, and warnIfPerfScore > 0.57, and perfScore=0.52064]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 5.72068 secs, and comparison 19.1119 sec, and warnIfPerfScore > 2.9, and perfScore=3.34084]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.23629 secs, and comparison 19.0598 sec, and warnIfPerfScore > 2.9, and perfScore=3.05627]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 5.3457 secs, and comparison 138.726 sec, and warnIfPerfScore > 24, and perfScore=25.9509]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.24224 secs, and comparison 10.4073 sec, and warnIfPerfScore > 1.7, and perfScore=1.98527]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.43697 secs, and comparison 5.46758 sec, and warnIfPerfScore > 1.5, and perfScore=1.00563]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 4.65126 secs, and comparison 12.7311 sec, and warnIfPerfScore > 2.1, and perfScore=2.73712]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.43002 secs, and comparison 4.57452 sec, and warnIfPerfScore > 1.6, and perfScore=0.711432]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 6.75378 secs, and comparison 0.662959 sec, and warnIfPerfScore > 0.23, and perfScore=0.098161]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.8921 secs, and comparison 12.7619 sec, and warnIfPerfScore > 1.3, and perfScore=1.07314]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.28184 secs, and comparison 5.06809 sec, and warnIfPerfScore > 1.2, and perfScore=0.611953]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.45388 secs, and comparison 1.78379 sec, and warnIfPerfScore > 0.33, and perfScore=0.23931]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 7.89347 secs, and comparison 39.9932 sec, and warnIfPerfScore > 6, and perfScore=5.06662]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.94744 secs, and comparison 4.90536 sec, and warnIfPerfScore > 0.8, and perfScore=0.617226]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.89297 secs, and comparison 7.68823 sec, and warnIfPerfScore > 1.4, and perfScore=0.974061]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.36516 secs, and comparison 3.47991 sec, and warnIfPerfScore > 0.65, and perfScore=0.472482]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.59194 secs, and comparison 37.2695 sec, and warnIfPerfScore > 4.4, and perfScore=4.33773]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.38506 secs, and comparison 3.41014 sec, and warnIfPerfScore > 0.6, and perfScore=0.461763]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.38493 secs, and comparison 3.41083 sec, and warnIfPerfScore > 0.6, and perfScore=0.461863]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.39227 secs, and comparison 3.42613 sec, and warnIfPerfScore > 0.6, and perfScore=0.463474]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.3504 secs, and comparison 4.89332 sec, and warnIfPerfScore > 1.3, and perfScore=0.665722]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.79085 secs, and comparison 8.09839 sec, and warnIfPerfScore > 1.3, and perfScore=1.03947]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 36.6301 secs, and comparison 5.81365 sec, and warnIfPerfScore > 0.3, and perfScore=0.158712]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.58567 secs, and comparison 9.63169 sec, and warnIfPerfScore > 1.5, and perfScore=1.72436]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.81762 secs, and comparison 2.75359 sec, and warnIfPerfScore > 0.55, and perfScore=0.473318]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.735992 sec, and warnIfPerfScore > 0.1, and perfScore=0.0490662]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.93072 sec, and warnIfPerfScore > 0.5, and perfScore=0.195381]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.13432 secs, and comparison 7.63487 sec, and warnIfPerfScore > 2, and perfScore=1.24462]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.29874 secs, and comparison 12.6826 sec, and warnIfPerfScore > 3.6, and perfScore=2.01352]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 10 seconds]]]

Succeeded
