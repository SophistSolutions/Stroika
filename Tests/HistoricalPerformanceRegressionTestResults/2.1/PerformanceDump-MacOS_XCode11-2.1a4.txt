Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jan  9 23:30:48 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 9.01422 secs, and comparison 6.41841 sec, and warnIfPerfScore > 0.62, and perfScore=0.712031]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.73812 secs, and comparison 4.23135 sec, and warnIfPerfScore > 0.5, and perfScore=0.48424]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 16.4998 secs, and comparison 12.2499 sec, and warnIfPerfScore > 1.05, and perfScore=0.742426]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 33.565 secs, and comparison 5.9679 sec, and warnIfPerfScore > 0.48, and perfScore=0.177801]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 32.0945 secs, and comparison 5.92385 sec, and warnIfPerfScore > 0.55, and perfScore=0.184575]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 22.6386 secs, and comparison 57.5661 sec, and warnIfPerfScore > 2.9, and perfScore=2.54283]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 23.3925 secs, and comparison 58.5296 sec, and warnIfPerfScore > 2.9, and perfScore=2.50207]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 17.8303 secs, and comparison 170.217 sec, and warnIfPerfScore > 9.7, and perfScore=9.54647]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 22.743 secs, and comparison 28.6644 sec, and warnIfPerfScore > 1.6, and perfScore=1.26036]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 9.58319 secs, and comparison 7.27033 sec, and warnIfPerfScore > 1.5, and perfScore=0.758654]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 15.0778 secs, and comparison 35.4737 sec, and warnIfPerfScore > 2.1, and perfScore=2.35271]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 12.8709 secs, and comparison 7.05671 sec, and warnIfPerfScore > 1.3, and perfScore=0.548267]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 13.398 secs, and comparison 2.07098 sec, and warnIfPerfScore > 0.18, and perfScore=0.154573]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.9425 secs, and comparison 19.2321 sec, and warnIfPerfScore > 1.3, and perfScore=1.01529]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.7622 secs, and comparison 13.774 sec, and warnIfPerfScore > 1.2, and perfScore=1.07928]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 14.0245 secs, and comparison 2.6239 sec, and warnIfPerfScore > 0.33, and perfScore=0.187095]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 11.9358 secs, and comparison 57.014 sec, and warnIfPerfScore > 6, and perfScore=4.77673]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.9257 secs, and comparison 5.22357 sec, and warnIfPerfScore > 0.5, and perfScore=0.375102]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 15.5119 secs, and comparison 50.2361 sec, and warnIfPerfScore > 4.4, and perfScore=3.23854]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 14.3159 secs, and comparison 5.06775 sec, and warnIfPerfScore > 0.6, and perfScore=0.353995]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 34.6842 secs, and comparison 52.1502 sec, and warnIfPerfScore > 1.5, and perfScore=1.50357]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.31424 secs, and comparison 6.26299 sec, and warnIfPerfScore > 0.55, and perfScore=0.753285]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15 secs, and comparison 6.88102 sec, and warnIfPerfScore > 0.25, and perfScore=0.458734]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.92406 sec, and warnIfPerfScore > 0.5, and perfScore=0.261604]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 52 seconds]]]

Succeeded
