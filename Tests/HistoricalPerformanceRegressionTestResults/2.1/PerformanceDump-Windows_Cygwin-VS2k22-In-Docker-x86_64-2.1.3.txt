Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 3:35:5 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.39657 secs, and comparison 4.41416 sec, and warnIfPerfScore > 0.65, and perfScore=0.817957]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.22586 secs, and comparison 2.50555 sec, and warnIfPerfScore > 0.5, and perfScore=0.479453]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.96373 secs, and comparison 7.30418 sec, and warnIfPerfScore > 1.05, and perfScore=0.917181]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.71344 secs, and comparison 7.38623 sec, and warnIfPerfScore > 1.15, and perfScore=1.10022]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 33.1826 secs, and comparison 2.20037 sec, and warnIfPerfScore > 0.48, and perfScore=0.066311]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 31.356 secs, and comparison 2.73907 sec, and warnIfPerfScore > 0.57, and perfScore=0.087354]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.51878 secs, and comparison 18.8737 sec, and warnIfPerfScore > 2.9, and perfScore=2.89528]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.89754 secs, and comparison 19.1339 sec, and warnIfPerfScore > 2.9, and perfScore=2.77402]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.9339 secs, and comparison 135.135 sec, and warnIfPerfScore > 24, and perfScore=22.7733]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.54865 secs, and comparison 9.84051 sec, and warnIfPerfScore > 1.7, and perfScore=1.7735]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.47222 secs, and comparison 5.21531 sec, and warnIfPerfScore > 1.5, and perfScore=0.953052]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.21072 secs, and comparison 12.5175 sec, and warnIfPerfScore > 2.1, and perfScore=2.40227]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.68599 secs, and comparison 4.05197 sec, and warnIfPerfScore > 1.6, and perfScore=0.60604]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 6.89687 secs, and comparison 0.678026 sec, and warnIfPerfScore > 0.23, and perfScore=0.0983092]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4591 secs, and comparison 12.5706 sec, and warnIfPerfScore > 1.3, and perfScore=1.00895]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.43189 secs, and comparison 5.14664 sec, and warnIfPerfScore > 1.2, and perfScore=0.610378]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.69111 secs, and comparison 1.96127 sec, and warnIfPerfScore > 0.33, and perfScore=0.225664]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.1933 secs, and comparison 39.6653 sec, and warnIfPerfScore > 6, and perfScore=4.84119]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.10533 secs, and comparison 5.00456 sec, and warnIfPerfScore > 0.8, and perfScore=0.61744]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.24503 secs, and comparison 7.62358 sec, and warnIfPerfScore > 1.4, and perfScore=0.924626]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.54788 secs, and comparison 3.52938 sec, and warnIfPerfScore > 0.65, and perfScore=0.412895]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.68878 secs, and comparison 36.9633 sec, and warnIfPerfScore > 4.4, and perfScore=4.25414]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.50611 secs, and comparison 3.47357 sec, and warnIfPerfScore > 0.6, and perfScore=0.408362]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.45851 secs, and comparison 3.43201 sec, and warnIfPerfScore > 0.6, and perfScore=0.405747]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.4628 secs, and comparison 3.44412 sec, and warnIfPerfScore > 0.6, and perfScore=0.406971]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.51947 secs, and comparison 5.15207 sec, and warnIfPerfScore > 1.3, and perfScore=0.604741]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.97595 secs, and comparison 8.31599 sec, and warnIfPerfScore > 1.3, and perfScore=0.926475]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 39.1438 secs, and comparison 6.31726 sec, and warnIfPerfScore > 0.3, and perfScore=0.161386]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.23247 secs, and comparison 9.68684 sec, and warnIfPerfScore > 1.5, and perfScore=1.55425]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.08755 secs, and comparison 2.82335 sec, and warnIfPerfScore > 0.55, and perfScore=0.463792]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.604318 sec, and warnIfPerfScore > 0.1, and perfScore=0.0402879]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.85843 sec, and warnIfPerfScore > 0.5, and perfScore=0.190562]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.31566 secs, and comparison 13.2685 sec, and warnIfPerfScore > 2, and perfScore=1.81371]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.5779 secs, and comparison 14.4441 sec, and warnIfPerfScore > 3.6, and perfScore=1.90609]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 18 seconds]]]

Succeeded
