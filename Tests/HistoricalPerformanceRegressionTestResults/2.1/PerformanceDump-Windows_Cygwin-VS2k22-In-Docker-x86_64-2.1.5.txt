Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 6:43:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.76326 secs, and comparison 4.32355 sec, and warnIfPerfScore > 0.65, and perfScore=0.75019]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.56354 secs, and comparison 2.62033 sec, and warnIfPerfScore > 0.5, and perfScore=0.470983]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.84938 secs, and comparison 7.08256 sec, and warnIfPerfScore > 1.05, and perfScore=0.902308]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.59063 secs, and comparison 7.10666 sec, and warnIfPerfScore > 1.15, and perfScore=1.0783]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 32.5972 secs, and comparison 2.32883 sec, and warnIfPerfScore > 0.48, and perfScore=0.0714424]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 31.1049 secs, and comparison 2.72663 sec, and warnIfPerfScore > 0.57, and perfScore=0.0876593]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.14909 secs, and comparison 18.4684 sec, and warnIfPerfScore > 2.9, and perfScore=3.00343]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.38497 secs, and comparison 18.5349 sec, and warnIfPerfScore > 2.9, and perfScore=2.90289]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.52006 secs, and comparison 133.803 sec, and warnIfPerfScore > 24, and perfScore=24.2395]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.29312 secs, and comparison 9.72134 sec, and warnIfPerfScore > 1.7, and perfScore=1.8366]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.57069 secs, and comparison 5.32375 sec, and warnIfPerfScore > 1.5, and perfScore=0.955671]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.84638 secs, and comparison 11.7958 sec, and warnIfPerfScore > 2.1, and perfScore=2.43395]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.17714 secs, and comparison 3.82933 sec, and warnIfPerfScore > 1.6, and perfScore=0.619919]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 6.51907 secs, and comparison 0.634743 sec, and warnIfPerfScore > 0.23, and perfScore=0.0973673]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5501 secs, and comparison 12.1519 sec, and warnIfPerfScore > 1.3, and perfScore=1.0521]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.22767 secs, and comparison 4.97618 sec, and warnIfPerfScore > 1.2, and perfScore=0.604811]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.89461 secs, and comparison 1.79237 sec, and warnIfPerfScore > 0.33, and perfScore=0.227037]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 7.99779 secs, and comparison 38.5211 sec, and warnIfPerfScore > 6, and perfScore=4.81646]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.94523 secs, and comparison 4.7698 sec, and warnIfPerfScore > 0.8, and perfScore=0.600334]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.96698 secs, and comparison 7.1843 sec, and warnIfPerfScore > 1.4, and perfScore=0.901759]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.78872 secs, and comparison 3.40098 sec, and warnIfPerfScore > 0.65, and perfScore=0.436655]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.51655 secs, and comparison 36.2452 sec, and warnIfPerfScore > 4.4, and perfScore=4.25585]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.70436 secs, and comparison 3.34495 sec, and warnIfPerfScore > 0.6, and perfScore=0.434163]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.61992 secs, and comparison 3.34186 sec, and warnIfPerfScore > 0.6, and perfScore=0.438569]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.61294 secs, and comparison 3.35862 sec, and warnIfPerfScore > 0.6, and perfScore=0.441172]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.65026 secs, and comparison 4.80776 sec, and warnIfPerfScore > 1.3, and perfScore=0.628444]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.22271 secs, and comparison 8.16717 sec, and warnIfPerfScore > 1.3, and perfScore=0.993245]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 36.9253 secs, and comparison 6.25684 sec, and warnIfPerfScore > 0.3, and perfScore=0.169446]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.41307 secs, and comparison 9.20911 sec, and warnIfPerfScore > 1.5, and perfScore=1.70127]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.93089 secs, and comparison 2.66703 sec, and warnIfPerfScore > 0.55, and perfScore=0.449684]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.593776 sec, and warnIfPerfScore > 0.1, and perfScore=0.039585]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.88084 sec, and warnIfPerfScore > 0.5, and perfScore=0.192056]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.66911 secs, and comparison 12.4191 sec, and warnIfPerfScore > 2, and perfScore=1.86218]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.51595 secs, and comparison 13.979 sec, and warnIfPerfScore > 3.6, and perfScore=1.85991]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 55 seconds]]]

Succeeded
