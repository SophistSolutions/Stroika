Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Dec 24 23:57:31 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.21009 secs, and comparison 4.47977 sec, and warnIfPerfScore > 0.62, and perfScore=0.62132]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.62 and got 0.62132}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.2914 secs, and comparison 2.88556 sec, and warnIfPerfScore > 0.5, and perfScore=0.395749]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.74847 secs, and comparison 7.79239 sec, and warnIfPerfScore > 1.05, and perfScore=0.890714]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.96236 secs, and comparison 7.71147 sec, and warnIfPerfScore > 1.15, and perfScore=1.10759]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.046
	DETAILS:         	[baseline test 59.675 secs, and comparison 2.76011 sec, and warnIfPerfScore > 0.48, and perfScore=0.0462525]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 56.9661 secs, and comparison 3.05862 sec, and warnIfPerfScore > 0.57, and perfScore=0.0536919]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 41.4874 secs, and comparison 19.7082 sec, and warnIfPerfScore > 2.9, and perfScore=0.475041]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 42.4579 secs, and comparison 20.3845 sec, and warnIfPerfScore > 2.9, and perfScore=0.48011]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 17.3855 secs, and comparison 64.5227 sec, and warnIfPerfScore > 9.7, and perfScore=3.71128]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 53.1815 secs, and comparison 10.3135 sec, and warnIfPerfScore > 1.6, and perfScore=0.193931]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.86578 secs, and comparison 7.83287 sec, and warnIfPerfScore > 1.5, and perfScore=0.995816]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 61.3839 secs, and comparison 13.5699 sec, and warnIfPerfScore > 2.1, and perfScore=0.221065]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.92256 secs, and comparison 12.9771 sec, and warnIfPerfScore > 1.3, and perfScore=1.45442]
	                 	MemoryStream<Characters::Character> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.45442}}}

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.29923 secs, and comparison 1.25821 sec, and warnIfPerfScore > 0.23, and perfScore=0.135303]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3644 secs, and comparison 12.6723 sec, and warnIfPerfScore > 1.3, and perfScore=1.0249]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.05201 secs, and comparison 5.34946 sec, and warnIfPerfScore > 1.2, and perfScore=0.590969]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 6.62344 secs, and comparison 1.44046 sec, and warnIfPerfScore > 0.33, and perfScore=0.217479]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 8.69428 secs, and comparison 38.8196 sec, and warnIfPerfScore > 6, and perfScore=4.46496]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.72544 secs, and comparison 5.14315 sec, and warnIfPerfScore > 0.8, and perfScore=0.589443]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.68453 secs, and comparison 8.80748 sec, and warnIfPerfScore > 0.9, and perfScore=1.01416]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.9 and got 1.01416}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.18113 secs, and comparison 3.42754 sec, and warnIfPerfScore > 0.5, and perfScore=0.554516]
	                 	Sequence_DoublyLinkedList<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.5 and got 0.554516}}}

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 8.83641 secs, and comparison 35.3132 sec, and warnIfPerfScore > 4.4, and perfScore=3.99633]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.29121 secs, and comparison 4.54876 sec, and warnIfPerfScore > 0.6, and perfScore=0.723034]
	                 	Collection<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.723034}}}

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 40.4195 secs, and comparison 5.74324 sec, and warnIfPerfScore > 0.2, and perfScore=0.142091]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.93562 secs, and comparison 12.0654 sec, and warnIfPerfScore > 1.5, and perfScore=1.52042]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.52042}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.49243 secs, and comparison 2.69467 sec, and warnIfPerfScore > 0.55, and perfScore=0.415049]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 15 secs, and comparison 0.901381 sec, and warnIfPerfScore > 0.25, and perfScore=0.0600921]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.85929 sec, and warnIfPerfScore > 0.5, and perfScore=0.190619]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.22397 secs, and comparison 8.64433 sec, and warnIfPerfScore > 2, and perfScore=1.19662]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 8.41784 secs, and comparison 95.3909 sec, and warnIfPerfScore > 3.1, and perfScore=11.332]
	                 	codecvt_utf8 is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 3.1 and got 11.332}}}

[[[Tests took: 15 minutes, 59 seconds]]]

Succeeded
