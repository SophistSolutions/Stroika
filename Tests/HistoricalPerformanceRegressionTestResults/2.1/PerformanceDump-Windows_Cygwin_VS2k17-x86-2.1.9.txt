Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 13:19:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 54.2073 secs, and comparison 7.14917 sec, and warnIfPerfScore > 0.65, and perfScore=0.131886]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 54.5212 secs, and comparison 6.74905 sec, and warnIfPerfScore > 0.5, and perfScore=0.123788]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 20.9909 secs, and comparison 14.781 sec, and warnIfPerfScore > 1.05, and perfScore=0.70416]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.9603 secs, and comparison 14.6986 sec, and warnIfPerfScore > 1.15, and perfScore=0.982505]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 24.2471 secs, and comparison 4.02955 sec, and warnIfPerfScore > 0.48, and perfScore=0.166187]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 24.4702 secs, and comparison 4.16154 sec, and warnIfPerfScore > 0.57, and perfScore=0.170066]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 27.9559 secs, and comparison 41.9303 sec, and warnIfPerfScore > 2.9, and perfScore=1.49988]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 28.9462 secs, and comparison 45.3009 sec, and warnIfPerfScore > 2.9, and perfScore=1.565]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 24.3792 secs, and comparison 200.706 sec, and warnIfPerfScore > 24, and perfScore=8.23269]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 26.1019 secs, and comparison 18.2924 sec, and warnIfPerfScore > 1.7, and perfScore=0.700806]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 46.4359 secs, and comparison 45.425 sec, and warnIfPerfScore > 1.5, and perfScore=0.97823]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.6931 secs, and comparison 20.0267 sec, and warnIfPerfScore > 2.1, and perfScore=1.07134]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 36.9166 secs, and comparison 13.325 sec, and warnIfPerfScore > 1.6, and perfScore=0.360949]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 38.9657 secs, and comparison 2.61217 sec, and warnIfPerfScore > 0.23, and perfScore=0.0670377]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.2156 secs, and comparison 27.3389 sec, and warnIfPerfScore > 1.3, and perfScore=1.42274]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.42274}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.7481 secs, and comparison 19.8842 sec, and warnIfPerfScore > 1.2, and perfScore=1.34825]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.34825}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9965 secs, and comparison 4.24642 sec, and warnIfPerfScore > 0.33, and perfScore=0.326737]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 14.6003 secs, and comparison 52.9174 sec, and warnIfPerfScore > 6, and perfScore=3.62441]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.1006 secs, and comparison 19.0775 sec, and warnIfPerfScore > 0.8, and perfScore=1.35295]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.35295}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.4442 secs, and comparison 38.5532 sec, and warnIfPerfScore > 1.4, and perfScore=2.66912]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.66912}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.6471 secs, and comparison 4.77659 sec, and warnIfPerfScore > 0.65, and perfScore=0.377683]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 24.7262 secs, and comparison 59.7084 sec, and warnIfPerfScore > 4.4, and perfScore=2.41479]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 12.5747 secs, and comparison 5.65267 sec, and warnIfPerfScore > 0.6, and perfScore=0.449526]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 13.13 secs, and comparison 5.8187 sec, and warnIfPerfScore > 0.6, and perfScore=0.443162]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 13.1796 secs, and comparison 6.25897 sec, and warnIfPerfScore > 0.6, and perfScore=0.474897]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.086 secs, and comparison 13.7267 sec, and warnIfPerfScore > 1.3, and perfScore=1.04896]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.5543 secs, and comparison 21.4542 sec, and warnIfPerfScore > 1.3, and perfScore=1.09716]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 110.113 secs, and comparison 8.78707 sec, and warnIfPerfScore > 0.3, and perfScore=0.0798002]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 26.3767 secs, and comparison 30.1492 sec, and warnIfPerfScore > 1.5, and perfScore=1.14302]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 19.4653 secs, and comparison 5.89167 sec, and warnIfPerfScore > 0.55, and perfScore=0.302675]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.10132 sec, and warnIfPerfScore > 0.1, and perfScore=0.140088]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.140088}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.0601 sec, and warnIfPerfScore > 0.5, and perfScore=0.33734]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.6572 secs, and comparison 23.73 sec, and warnIfPerfScore > 2, and perfScore=1.14875]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 23.4457 secs, and comparison 41.0683 sec, and warnIfPerfScore > 3.6, and perfScore=1.75163]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 11 seconds]]]

Succeeded
