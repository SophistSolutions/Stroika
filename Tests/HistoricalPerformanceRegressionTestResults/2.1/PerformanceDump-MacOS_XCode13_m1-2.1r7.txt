Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 31 13:12:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21594 secs, and comparison 4.82083 sec, and warnIfPerfScore > 0.65, and perfScore=1.49904]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.2126 secs, and comparison 2.28305 sec, and warnIfPerfScore > 0.5, and perfScore=0.710654]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25337 secs, and comparison 7.17679 sec, and warnIfPerfScore > 1.05, and perfScore=0.989443]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31928 secs, and comparison 7.17934 sec, and warnIfPerfScore > 1.15, and perfScore=1.1361]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 6.03147 secs, and comparison 1.23081 sec, and warnIfPerfScore > 0.48, and perfScore=0.204065]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.01408 secs, and comparison 1.78459 sec, and warnIfPerfScore > 0.57, and perfScore=0.296735]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.04855 secs, and comparison 15.4217 sec, and warnIfPerfScore > 2.9, and perfScore=2.54966]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.43869 secs, and comparison 15.8893 sec, and warnIfPerfScore > 2.9, and perfScore=2.13603]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 9.46643 secs, and comparison 55.1274 sec, and warnIfPerfScore > 24, and perfScore=5.82346]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.34957 secs, and comparison 7.59786 sec, and warnIfPerfScore > 1.7, and perfScore=1.74681]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.84209 secs, and comparison 3.96478 sec, and warnIfPerfScore > 1.5, and perfScore=0.818817]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.73365 secs, and comparison 9.57707 sec, and warnIfPerfScore > 2.1, and perfScore=2.56507]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.26406 secs, and comparison 3.06583 sec, and warnIfPerfScore > 1.6, and perfScore=0.582408]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 5.45897 secs, and comparison 0.68875 sec, and warnIfPerfScore > 0.23, and perfScore=0.126168]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4277 secs, and comparison 12.8056 sec, and warnIfPerfScore > 1.3, and perfScore=1.03041]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.58672 secs, and comparison 5.29195 sec, and warnIfPerfScore > 1.2, and perfScore=1.15375]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.4808 secs, and comparison 1.06716 sec, and warnIfPerfScore > 0.33, and perfScore=0.238164]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.33021 secs, and comparison 38.3993 sec, and warnIfPerfScore > 6, and perfScore=8.86777]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.3303 secs, and comparison 5.07725 sec, and warnIfPerfScore > 0.8, and perfScore=1.17249]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.32929 secs, and comparison 7.02252 sec, and warnIfPerfScore > 1.4, and perfScore=1.6221]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.48727 secs, and comparison 3.18239 sec, and warnIfPerfScore > 0.65, and perfScore=0.709204]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.5965 secs, and comparison 36.2705 sec, and warnIfPerfScore > 4.4, and perfScore=6.48094]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.49702 secs, and comparison 3.07248 sec, and warnIfPerfScore > 0.6, and perfScore=0.683226]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.5007 secs, and comparison 3.07366 sec, and warnIfPerfScore > 0.6, and perfScore=0.682929]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.49209 secs, and comparison 3.07607 sec, and warnIfPerfScore > 0.6, and perfScore=0.684774]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.49475 secs, and comparison 2.80704 sec, and warnIfPerfScore > 1.3, and perfScore=0.624515]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.67865 secs, and comparison 8.15722 sec, and warnIfPerfScore > 1.3, and perfScore=1.7435]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 29.996 secs, and comparison 4.35559 sec, and warnIfPerfScore > 0.3, and perfScore=0.145206]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.2294 secs, and comparison 11.906 sec, and warnIfPerfScore > 1.5, and perfScore=1.29001]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 4.63889 secs, and comparison 2.71197 sec, and warnIfPerfScore > 0.55, and perfScore=0.584617]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.11005 sec, and warnIfPerfScore > 0.1, and perfScore=0.14067]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94609 sec, and warnIfPerfScore > 0.5, and perfScore=0.129739]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 58 seconds]]]

Succeeded
