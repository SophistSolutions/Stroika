Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec 11 7:22:15 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 51.9067 secs, and comparison 15.5756 sec, and warnIfPerfScore > 0.65, and perfScore=0.300069]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 50.7525 secs, and comparison 14.7722 sec, and warnIfPerfScore > 0.5, and perfScore=0.291063]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 30.3643 secs, and comparison 23.3595 sec, and warnIfPerfScore > 1.05, and perfScore=0.76931]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 23.7827 secs, and comparison 23.897 sec, and warnIfPerfScore > 1.15, and perfScore=1.00481]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 21.8226 secs, and comparison 4.06828 sec, and warnIfPerfScore > 0.48, and perfScore=0.186425]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.886 secs, and comparison 3.95631 sec, and warnIfPerfScore > 0.57, and perfScore=0.180769]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.5243 secs, and comparison 39.7257 sec, and warnIfPerfScore > 2.9, and perfScore=1.68871]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.6335 secs, and comparison 42.5039 sec, and warnIfPerfScore > 2.9, and perfScore=1.72545]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 20.4023 secs, and comparison 219.433 sec, and warnIfPerfScore > 24, and perfScore=10.7554]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 20.573 secs, and comparison 17.0928 sec, and warnIfPerfScore > 1.7, and perfScore=0.83084]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 52.6663 secs, and comparison 52.2892 sec, and warnIfPerfScore > 1.5, and perfScore=0.992839]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 19.668 secs, and comparison 19.1594 sec, and warnIfPerfScore > 2.1, and perfScore=0.974144]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 45.0195 secs, and comparison 13.4333 sec, and warnIfPerfScore > 1.6, and perfScore=0.298388]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 46.6729 secs, and comparison 3.67175 sec, and warnIfPerfScore > 0.23, and perfScore=0.0786698]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.0219 secs, and comparison 25.729 sec, and warnIfPerfScore > 1.3, and perfScore=1.3526]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.3526}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.9105 secs, and comparison 21.0737 sec, and warnIfPerfScore > 1.2, and perfScore=1.32452]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.32452}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.3673 secs, and comparison 4.75909 sec, and warnIfPerfScore > 0.33, and perfScore=0.356025]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.356025}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 15.6828 secs, and comparison 53.1024 sec, and warnIfPerfScore > 6, and perfScore=3.38602]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.9205 secs, and comparison 20.422 sec, and warnIfPerfScore > 0.8, and perfScore=1.28275]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.28275}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 16.0463 secs, and comparison 33.3067 sec, and warnIfPerfScore > 1.4, and perfScore=2.07566]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.07566}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.7493 secs, and comparison 4.89114 sec, and warnIfPerfScore > 0.65, and perfScore=0.355736]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 25.6432 secs, and comparison 59.7783 sec, and warnIfPerfScore > 4.4, and perfScore=2.33116]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 14.3493 secs, and comparison 6.17875 sec, and warnIfPerfScore > 0.6, and perfScore=0.430596]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 14.7682 secs, and comparison 6.57191 sec, and warnIfPerfScore > 0.6, and perfScore=0.445005]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.2843 secs, and comparison 5.8978 sec, and warnIfPerfScore > 0.6, and perfScore=0.412887]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.2665 secs, and comparison 13.8501 sec, and warnIfPerfScore > 1.3, and perfScore=0.970813]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 21.9388 secs, and comparison 22.165 sec, and warnIfPerfScore > 1.3, and perfScore=1.01031]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 112.416 secs, and comparison 15.0225 sec, and warnIfPerfScore > 0.3, and perfScore=0.133633]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 28.109 secs, and comparison 31.514 sec, and warnIfPerfScore > 1.5, and perfScore=1.12114]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 20.4656 secs, and comparison 6.45843 sec, and warnIfPerfScore > 0.55, and perfScore=0.315575]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.10875 sec, and warnIfPerfScore > 0.1, and perfScore=0.140583]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.140583}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.94732 sec, and warnIfPerfScore > 0.5, and perfScore=0.329821]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.6286 secs, and comparison 21.9232 sec, and warnIfPerfScore > 2, and perfScore=1.06276]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 24.7634 secs, and comparison 44.6043 sec, and warnIfPerfScore > 3.6, and perfScore=1.80122]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 37 seconds]]]

Succeeded
