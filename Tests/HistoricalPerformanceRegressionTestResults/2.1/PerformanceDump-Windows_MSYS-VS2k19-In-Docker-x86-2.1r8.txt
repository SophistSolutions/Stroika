Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 11:4:54 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 10.5473 secs, and comparison 5.59977 sec, and warnIfPerfScore > 0.65, and perfScore=0.530919]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.38865 secs, and comparison 3.55656 sec, and warnIfPerfScore > 0.5, and perfScore=0.378815]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 11.5426 secs, and comparison 10.0378 sec, and warnIfPerfScore > 1.05, and perfScore=0.869625]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.1043 secs, and comparison 9.99587 sec, and warnIfPerfScore > 1.15, and perfScore=1.09793]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 11.1307 secs, and comparison 3.01209 sec, and warnIfPerfScore > 0.48, and perfScore=0.270611]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.7032 secs, and comparison 3.54613 sec, and warnIfPerfScore > 0.57, and perfScore=0.331314]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.6245 secs, and comparison 27.6069 sec, and warnIfPerfScore > 2.9, and perfScore=2.37488]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.9228 secs, and comparison 28.4373 sec, and warnIfPerfScore > 2.9, and perfScore=2.38513]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 11.4628 secs, and comparison 183.285 sec, and warnIfPerfScore > 24, and perfScore=15.9896]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.1623 secs, and comparison 14.6082 sec, and warnIfPerfScore > 1.7, and perfScore=1.43749]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.84725 secs, and comparison 8.6481 sec, and warnIfPerfScore > 1.5, and perfScore=0.97749]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.18761 secs, and comparison 13.0816 sec, and warnIfPerfScore > 2.1, and perfScore=1.82003]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.27451 secs, and comparison 8.28922 sec, and warnIfPerfScore > 1.6, and perfScore=0.893764]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.90576 secs, and comparison 1.41775 sec, and warnIfPerfScore > 0.23, and perfScore=0.143124]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.3897 secs, and comparison 14.6169 sec, and warnIfPerfScore > 1.3, and perfScore=1.01579]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 11.1931 secs, and comparison 6.03331 sec, and warnIfPerfScore > 1.2, and perfScore=0.539019]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.97916 secs, and comparison 1.71996 sec, and warnIfPerfScore > 0.33, and perfScore=0.246442]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.6512 secs, and comparison 44.3708 sec, and warnIfPerfScore > 6, and perfScore=4.16581]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.8731 secs, and comparison 5.81986 sec, and warnIfPerfScore > 0.8, and perfScore=0.535255]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.7131 secs, and comparison 10.1258 sec, and warnIfPerfScore > 1.4, and perfScore=0.945178]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.73126 secs, and comparison 3.66522 sec, and warnIfPerfScore > 0.65, and perfScore=0.544508]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 11.008 secs, and comparison 40.9636 sec, and warnIfPerfScore > 4.4, and perfScore=3.72127]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 7.38434 secs, and comparison 4.13168 sec, and warnIfPerfScore > 0.6, and perfScore=0.559519]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 7.26671 secs, and comparison 3.91509 sec, and warnIfPerfScore > 0.6, and perfScore=0.538771]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 7.20932 secs, and comparison 3.9806 sec, and warnIfPerfScore > 0.6, and perfScore=0.552147]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.23534 secs, and comparison 5.37875 sec, and warnIfPerfScore > 1.3, and perfScore=0.743399]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.89209 secs, and comparison 9.53614 sec, and warnIfPerfScore > 1.3, and perfScore=1.20832]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 51.7846 secs, and comparison 6.43621 sec, and warnIfPerfScore > 0.3, and perfScore=0.124288]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.03284 secs, and comparison 12.8002 sec, and warnIfPerfScore > 1.5, and perfScore=1.41707]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.93737 secs, and comparison 3.08291 sec, and warnIfPerfScore > 0.55, and perfScore=0.388404]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.854814 sec, and warnIfPerfScore > 0.1, and perfScore=0.0569876]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.22311 sec, and warnIfPerfScore > 0.5, and perfScore=0.214874]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.86085 secs, and comparison 9.6007 sec, and warnIfPerfScore > 2, and perfScore=1.0835]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.1305 secs, and comparison 34.4166 sec, and warnIfPerfScore > 3.6, and perfScore=3.0921]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 58 seconds]]]

Succeeded
