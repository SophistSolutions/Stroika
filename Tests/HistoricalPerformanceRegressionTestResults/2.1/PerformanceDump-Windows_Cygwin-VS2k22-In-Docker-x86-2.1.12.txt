Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 17:39:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 8.15612 secs, and comparison 4.73204 sec, and warnIfPerfScore > 0.65, and perfScore=0.580183]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.49476 secs, and comparison 3.06036 sec, and warnIfPerfScore > 0.5, and perfScore=0.32232]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 9.62964 secs, and comparison 7.60225 sec, and warnIfPerfScore > 1.05, and perfScore=0.789463]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.94502 secs, and comparison 7.56631 sec, and warnIfPerfScore > 1.15, and perfScore=1.08946]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 35.8459 secs, and comparison 2.20931 sec, and warnIfPerfScore > 0.48, and perfScore=0.0616337]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.081
	DETAILS:         	[baseline test 34.3265 secs, and comparison 2.76698 sec, and warnIfPerfScore > 0.57, and perfScore=0.0806077]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.14948 secs, and comparison 20.976 sec, and warnIfPerfScore > 2.9, and perfScore=2.29259]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 9.63518 secs, and comparison 21.6609 sec, and warnIfPerfScore > 2.9, and perfScore=2.2481]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.63289 secs, and comparison 161.274 sec, and warnIfPerfScore > 24, and perfScore=18.6813]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.00945 secs, and comparison 10.7724 sec, and warnIfPerfScore > 1.7, and perfScore=1.34496]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.60046 secs, and comparison 8.34081 sec, and warnIfPerfScore > 1.5, and perfScore=0.969809]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.09632 secs, and comparison 12.6481 sec, and warnIfPerfScore > 2.1, and perfScore=1.78235]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.6897 secs, and comparison 6.94327 sec, and warnIfPerfScore > 1.6, and perfScore=0.716562]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 10.0686 secs, and comparison 1.38088 sec, and warnIfPerfScore > 0.23, and perfScore=0.137147]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.318 secs, and comparison 13.9299 sec, and warnIfPerfScore > 1.3, and perfScore=1.04594]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.4089 secs, and comparison 5.82162 sec, and warnIfPerfScore > 1.2, and perfScore=0.559295]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.57102 secs, and comparison 2.22214 sec, and warnIfPerfScore > 0.33, and perfScore=0.232174]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.99861 secs, and comparison 41.2989 sec, and warnIfPerfScore > 6, and perfScore=4.13047]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.0167 secs, and comparison 5.69588 sec, and warnIfPerfScore > 0.8, and perfScore=0.568638]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 10.0122 secs, and comparison 9.9348 sec, and warnIfPerfScore > 1.4, and perfScore=0.992274]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.52145 secs, and comparison 3.63394 sec, and warnIfPerfScore > 0.65, and perfScore=0.381659]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.5225 secs, and comparison 37.4231 sec, and warnIfPerfScore > 4.4, and perfScore=3.55649]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.39894 secs, and comparison 3.60329 sec, and warnIfPerfScore > 0.6, and perfScore=0.383372]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.42414 secs, and comparison 3.72089 sec, and warnIfPerfScore > 0.6, and perfScore=0.394825]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.41822 secs, and comparison 3.62168 sec, and warnIfPerfScore > 0.6, and perfScore=0.38454]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.39081 secs, and comparison 5.59209 sec, and warnIfPerfScore > 1.3, and perfScore=0.595485]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 10.2227 secs, and comparison 9.05295 sec, and warnIfPerfScore > 1.3, and perfScore=0.88557]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 48.7043 secs, and comparison 6.12127 sec, and warnIfPerfScore > 0.3, and perfScore=0.125682]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.92201 secs, and comparison 12.1602 sec, and warnIfPerfScore > 1.5, and perfScore=1.53498]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.53498}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 7.59782 secs, and comparison 3.69685 sec, and warnIfPerfScore > 0.55, and perfScore=0.486567]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.837646 sec, and warnIfPerfScore > 0.1, and perfScore=0.0558431]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.9296 sec, and warnIfPerfScore > 0.5, and perfScore=0.195307]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.93451 secs, and comparison 14.0128 sec, and warnIfPerfScore > 2, and perfScore=1.56839]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.91658 secs, and comparison 30.3773 sec, and warnIfPerfScore > 3.6, and perfScore=3.06328]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 39 seconds]]]

Succeeded
