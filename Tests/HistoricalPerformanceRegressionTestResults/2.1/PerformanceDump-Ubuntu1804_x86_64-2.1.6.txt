Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 20:39:1 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.72712 secs, and comparison 4.9062 sec, and warnIfPerfScore > 0.65, and perfScore=0.729316]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.32882 secs, and comparison 3.53646 sec, and warnIfPerfScore > 0.5, and perfScore=0.558786]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.49434 secs, and comparison 6.82037 sec, and warnIfPerfScore > 1.05, and perfScore=1.0502]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 6.16087 secs, and comparison 8.90946 sec, and warnIfPerfScore > 1.15, and perfScore=1.44614]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 4.3092 secs, and comparison 2.55425 sec, and warnIfPerfScore > 0.48, and perfScore=0.592744]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.90881 secs, and comparison 3.50927 sec, and warnIfPerfScore > 0.57, and perfScore=0.714893]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.42801 secs, and comparison 17.5908 sec, and warnIfPerfScore > 2.9, and perfScore=5.13149]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 3.98826 secs, and comparison 18.4038 sec, and warnIfPerfScore > 2.9, and perfScore=4.61451]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.94683 secs, and comparison 56.3106 sec, and warnIfPerfScore > 24, and perfScore=11.3832]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.81055 secs, and comparison 10.6606 sec, and warnIfPerfScore > 1.7, and perfScore=1.83469]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.05466 secs, and comparison 6.58949 sec, and warnIfPerfScore > 1.5, and perfScore=0.934061]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 3.0484 secs, and comparison 12.1657 sec, and warnIfPerfScore > 2.1, and perfScore=3.99085]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.70008 secs, and comparison 4.73134 sec, and warnIfPerfScore > 1.6, and perfScore=0.830048]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 4.82553 secs, and comparison 1.97716 sec, and warnIfPerfScore > 0.23, and perfScore=0.409728]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 3.82141 secs, and comparison 5.37041 sec, and warnIfPerfScore > 1.3, and perfScore=1.40535]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.39963 secs, and comparison 7.5535 sec, and warnIfPerfScore > 1.2, and perfScore=2.22186]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 19.5756 secs, and comparison 1.72156 sec, and warnIfPerfScore > 0.33, and perfScore=0.0879441]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.35632 secs, and comparison 43.1717 sec, and warnIfPerfScore > 6, and perfScore=12.8628]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.34412 secs, and comparison 7.10548 sec, and warnIfPerfScore > 0.8, and perfScore=1.63566]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.24055 secs, and comparison 7.22774 sec, and warnIfPerfScore > 1.4, and perfScore=2.23041]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.6635 secs, and comparison 3.6947 sec, and warnIfPerfScore > 0.65, and perfScore=0.291759]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 6.08446 secs, and comparison 38.122 sec, and warnIfPerfScore > 4.4, and perfScore=6.26548]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.2575 secs, and comparison 3.68203 sec, and warnIfPerfScore > 0.6, and perfScore=0.258253]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.8403 secs, and comparison 3.82051 sec, and warnIfPerfScore > 0.6, and perfScore=0.257441]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.542 secs, and comparison 3.75221 sec, and warnIfPerfScore > 0.6, and perfScore=0.241423]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.6521 secs, and comparison 4.45155 sec, and warnIfPerfScore > 1.3, and perfScore=0.303817]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 22.7091 secs, and comparison 11.0366 sec, and warnIfPerfScore > 1.3, and perfScore=0.485997]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.3485 secs, and comparison 7.39335 sec, and warnIfPerfScore > 0.3, and perfScore=0.382114]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.15504 secs, and comparison 12.3274 sec, and warnIfPerfScore > 1.5, and perfScore=1.51163]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.13432 secs, and comparison 2.98369 sec, and warnIfPerfScore > 0.55, and perfScore=0.418216]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.812429 sec, and warnIfPerfScore > 0.1, and perfScore=0.0541619]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.49061 sec, and warnIfPerfScore > 0.5, and perfScore=0.232707]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 45 seconds]]]

Succeeded
