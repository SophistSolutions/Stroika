Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  1 :29:33 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.66013 secs, and comparison 4.51459 sec, and warnIfPerfScore > 0.65, and perfScore=0.797614]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.65525 secs, and comparison 2.74361 sec, and warnIfPerfScore > 0.5, and perfScore=0.485143]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.03157 secs, and comparison 7.47897 sec, and warnIfPerfScore > 1.05, and perfScore=0.931196]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.71259 secs, and comparison 7.40855 sec, and warnIfPerfScore > 1.15, and perfScore=1.10368]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.42476 secs, and comparison 2.61635 sec, and warnIfPerfScore > 0.48, and perfScore=0.310554]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.1064 secs, and comparison 3.2834 sec, and warnIfPerfScore > 0.57, and perfScore=0.405038]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.20922 secs, and comparison 19.306 sec, and warnIfPerfScore > 2.9, and perfScore=3.10926]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.6876 secs, and comparison 19.4462 sec, and warnIfPerfScore > 2.9, and perfScore=2.90781]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 5.70552 secs, and comparison 150.828 sec, and warnIfPerfScore > 24, and perfScore=26.4355]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.05046 secs, and comparison 10.5247 sec, and warnIfPerfScore > 1.7, and perfScore=1.7395]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.74302 secs, and comparison 5.79673 sec, and warnIfPerfScore > 1.5, and perfScore=1.00935]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.08644 secs, and comparison 12.4018 sec, and warnIfPerfScore > 2.1, and perfScore=2.4382]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.88057 secs, and comparison 4.70494 sec, and warnIfPerfScore > 1.6, and perfScore=0.683801]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 7.22771 secs, and comparison 0.713598 sec, and warnIfPerfScore > 0.23, and perfScore=0.098731]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9584 secs, and comparison 12.4902 sec, and warnIfPerfScore > 1.3, and perfScore=1.04447]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.54976 secs, and comparison 5.11631 sec, and warnIfPerfScore > 1.2, and perfScore=0.598415]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.48464 secs, and comparison 1.94416 sec, and warnIfPerfScore > 0.33, and perfScore=0.259753]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.21039 secs, and comparison 40.0395 sec, and warnIfPerfScore > 6, and perfScore=4.87669]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.18809 secs, and comparison 5.08501 sec, and warnIfPerfScore > 0.8, and perfScore=0.621026]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.18469 secs, and comparison 7.69859 sec, and warnIfPerfScore > 1.4, and perfScore=0.940609]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.40549 secs, and comparison 3.52404 sec, and warnIfPerfScore > 0.65, and perfScore=0.475869]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.90543 secs, and comparison 37.0565 sec, and warnIfPerfScore > 4.4, and perfScore=4.16111]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.40781 secs, and comparison 3.44433 sec, and warnIfPerfScore > 0.6, and perfScore=0.464959]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.42851 secs, and comparison 3.41885 sec, and warnIfPerfScore > 0.6, and perfScore=0.460233]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.41121 secs, and comparison 3.41234 sec, and warnIfPerfScore > 0.6, and perfScore=0.46043]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.42287 secs, and comparison 4.92336 sec, and warnIfPerfScore > 1.3, and perfScore=0.663269]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.98881 secs, and comparison 8.39229 sec, and warnIfPerfScore > 1.3, and perfScore=1.05051]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 40.0313 secs, and comparison 5.51977 sec, and warnIfPerfScore > 0.3, and perfScore=0.137886]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.97022 secs, and comparison 9.75472 sec, and warnIfPerfScore > 1.5, and perfScore=1.6339]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.96759 secs, and comparison 2.83377 sec, and warnIfPerfScore > 0.55, and perfScore=0.47486]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 15 secs, and comparison 0.742564 sec, and warnIfPerfScore > 0.1, and perfScore=0.0495043]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.93367 sec, and warnIfPerfScore > 0.5, and perfScore=0.195578]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.9904 secs, and comparison 7.50327 sec, and warnIfPerfScore > 2, and perfScore=1.07337]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.2662 secs, and comparison 12.7914 sec, and warnIfPerfScore > 3.6, and perfScore=1.7604]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 36 seconds]]]

Succeeded
