Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Nov 20 21:16:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 47.2141 secs, and comparison 15.7392 sec, and warnIfPerfScore > 0.65, and perfScore=0.333358]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 48.0403 secs, and comparison 14.7591 sec, and warnIfPerfScore > 0.5, and perfScore=0.307224]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 27.8417 secs, and comparison 22.8586 sec, and warnIfPerfScore > 1.05, and perfScore=0.821019]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 24.0595 secs, and comparison 22.6215 sec, and warnIfPerfScore > 1.15, and perfScore=0.940231]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 33.0765 secs, and comparison 3.41445 sec, and warnIfPerfScore > 0.48, and perfScore=0.103229]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 31.6285 secs, and comparison 4.02995 sec, and warnIfPerfScore > 0.57, and perfScore=0.127415]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 20.8108 secs, and comparison 37.6075 sec, and warnIfPerfScore > 2.9, and perfScore=1.80711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 21.4551 secs, and comparison 37.2798 sec, and warnIfPerfScore > 2.9, and perfScore=1.73757]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 15.4468 secs, and comparison 263.902 sec, and warnIfPerfScore > 24, and perfScore=17.0845]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 18.426 secs, and comparison 15.6115 sec, and warnIfPerfScore > 1.7, and perfScore=0.847254]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 50.5178 secs, and comparison 50.6422 sec, and warnIfPerfScore > 1.5, and perfScore=1.00246]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.4049 secs, and comparison 18.693 sec, and warnIfPerfScore > 2.1, and perfScore=1.01566]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 43.0598 secs, and comparison 9.73071 sec, and warnIfPerfScore > 1.6, and perfScore=0.225981]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.05
	DETAILS:         	[baseline test 43.1547 secs, and comparison 2.15027 sec, and warnIfPerfScore > 0.23, and perfScore=0.049827]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.8658 secs, and comparison 23.2846 sec, and warnIfPerfScore > 1.3, and perfScore=1.67928]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 14.0639 secs, and comparison 23.4968 sec, and warnIfPerfScore > 1.2, and perfScore=1.67073]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 22.0781 secs, and comparison 5.81015 sec, and warnIfPerfScore > 0.33, and perfScore=0.263164]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 13.3941 secs, and comparison 56.6496 sec, and warnIfPerfScore > 6, and perfScore=4.22944]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.2572 secs, and comparison 21.9208 sec, and warnIfPerfScore > 0.8, and perfScore=1.6535]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 13.5892 secs, and comparison 43.4598 sec, and warnIfPerfScore > 1.4, and perfScore=3.19812]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 22.4027 secs, and comparison 5.75669 sec, and warnIfPerfScore > 0.65, and perfScore=0.256964]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 24.6646 secs, and comparison 61.7358 sec, and warnIfPerfScore > 4.4, and perfScore=2.50301]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 22.0162 secs, and comparison 5.71263 sec, and warnIfPerfScore > 0.6, and perfScore=0.259474]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 22.0502 secs, and comparison 6.17616 sec, and warnIfPerfScore > 0.6, and perfScore=0.280095]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 22.4785 secs, and comparison 6.0392 sec, and warnIfPerfScore > 0.6, and perfScore=0.268666]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 22.2911 secs, and comparison 13.4835 sec, and warnIfPerfScore > 1.3, and perfScore=0.604882]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 29.6654 secs, and comparison 21.0546 sec, and warnIfPerfScore > 1.3, and perfScore=0.709736]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 103.659 secs, and comparison 13.5453 sec, and warnIfPerfScore > 0.3, and perfScore=0.130671]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 18.9508 secs, and comparison 23.7443 sec, and warnIfPerfScore > 1.5, and perfScore=1.25294]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15.7629 secs, and comparison 5.56818 sec, and warnIfPerfScore > 0.55, and perfScore=0.353246]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.82693 sec, and warnIfPerfScore > 0.1, and perfScore=0.121796]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.8685 sec, and warnIfPerfScore > 0.5, and perfScore=0.2579]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.0566 secs, and comparison 21.7089 sec, and warnIfPerfScore > 2, and perfScore=1.08238]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 23.1968 secs, and comparison 31.116 sec, and warnIfPerfScore > 3.6, and perfScore=1.34139]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 57 seconds]]]

Succeeded
