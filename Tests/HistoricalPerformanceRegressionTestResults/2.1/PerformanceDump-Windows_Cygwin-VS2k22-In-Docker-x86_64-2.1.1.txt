Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 5:20:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 5.83815 secs, and comparison 4.18878 sec, and warnIfPerfScore > 0.65, and perfScore=0.717485]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.55577 secs, and comparison 2.49629 sec, and warnIfPerfScore > 0.5, and perfScore=0.449314]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.21897 secs, and comparison 7.17245 sec, and warnIfPerfScore > 1.05, and perfScore=0.87267]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.79999 secs, and comparison 7.22077 sec, and warnIfPerfScore > 1.15, and perfScore=1.06188]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 33.7969 secs, and comparison 2.26752 sec, and warnIfPerfScore > 0.48, and perfScore=0.0670925]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 32.0843 secs, and comparison 2.62739 sec, and warnIfPerfScore > 0.57, and perfScore=0.0818901]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.10947 secs, and comparison 18.9927 sec, and warnIfPerfScore > 2.9, and perfScore=2.67146]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 7.90587 secs, and comparison 19.2911 sec, and warnIfPerfScore > 2.9, and perfScore=2.4401]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.54231 secs, and comparison 144.533 sec, and warnIfPerfScore > 24, and perfScore=22.092]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.77078 secs, and comparison 9.57579 sec, and warnIfPerfScore > 1.7, and perfScore=1.65936]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.839 secs, and comparison 5.64815 sec, and warnIfPerfScore > 1.5, and perfScore=0.967314]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.35509 secs, and comparison 11.8246 sec, and warnIfPerfScore > 2.1, and perfScore=2.2081]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.9643 secs, and comparison 4.09009 sec, and warnIfPerfScore > 1.6, and perfScore=0.587293]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 7.26268 secs, and comparison 0.717982 sec, and warnIfPerfScore > 0.23, and perfScore=0.098859]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3596 secs, and comparison 12.6161 sec, and warnIfPerfScore > 1.3, and perfScore=1.02075]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.64586 secs, and comparison 6.00874 sec, and warnIfPerfScore > 1.2, and perfScore=0.694985]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.88608 secs, and comparison 2.01348 sec, and warnIfPerfScore > 0.33, and perfScore=0.226588]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.24404 secs, and comparison 38.03 sec, and warnIfPerfScore > 6, and perfScore=4.61303]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 8.20056 secs, and comparison 5.84689 sec, and warnIfPerfScore > 0.8, and perfScore=0.712987]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.24597 secs, and comparison 8.30632 sec, and warnIfPerfScore > 1.4, and perfScore=1.00732]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.86957 secs, and comparison 3.40014 sec, and warnIfPerfScore > 0.65, and perfScore=0.383349]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 9.00629 secs, and comparison 35.489 sec, and warnIfPerfScore > 4.4, and perfScore=3.94047]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.03788 secs, and comparison 3.25962 sec, and warnIfPerfScore > 0.6, and perfScore=0.360662]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.80897 secs, and comparison 3.33155 sec, and warnIfPerfScore > 0.6, and perfScore=0.3782]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.92198 secs, and comparison 3.36122 sec, and warnIfPerfScore > 0.6, and perfScore=0.376735]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 9.03695 secs, and comparison 5.28663 sec, and warnIfPerfScore > 1.3, and perfScore=0.585001]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.44519 secs, and comparison 8.63038 sec, and warnIfPerfScore > 1.3, and perfScore=0.913733]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 41.9924 secs, and comparison 6.3441 sec, and warnIfPerfScore > 0.3, and perfScore=0.151077]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.77755 secs, and comparison 9.97692 sec, and warnIfPerfScore > 1.5, and perfScore=1.47205]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.04941 secs, and comparison 2.80028 sec, and warnIfPerfScore > 0.55, and perfScore=0.397236]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.58574 sec, and warnIfPerfScore > 0.1, and perfScore=0.0390494]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78981 sec, and warnIfPerfScore > 0.5, and perfScore=0.185987]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.99804 secs, and comparison 12.8719 sec, and warnIfPerfScore > 2, and perfScore=1.60938]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.38362 secs, and comparison 15.0142 sec, and warnIfPerfScore > 3.6, and perfScore=1.7909]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 42 seconds]]]

Succeeded
