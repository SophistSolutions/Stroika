Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Mar 25 13:13:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.64521 secs, and comparison 5.213 sec, and warnIfPerfScore > 0.65, and perfScore=0.602993]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.55333 secs, and comparison 2.91355 sec, and warnIfPerfScore > 0.5, and perfScore=0.340633]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 10.7582 secs, and comparison 9.85236 sec, and warnIfPerfScore > 1.05, and perfScore=0.915801]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.74382 secs, and comparison 10.0362 sec, and warnIfPerfScore > 1.15, and perfScore=1.14781]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.5827 secs, and comparison 3.55425 sec, and warnIfPerfScore > 0.48, and perfScore=0.335855]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.1117 secs, and comparison 3.80733 sec, and warnIfPerfScore > 0.57, and perfScore=0.376528]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.4859 secs, and comparison 27.7531 sec, and warnIfPerfScore > 2.9, and perfScore=2.64671]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.6152 secs, and comparison 27.5519 sec, and warnIfPerfScore > 2.9, and perfScore=2.59552]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 9.12723 secs, and comparison 163.973 sec, and warnIfPerfScore > 24, and perfScore=17.9653]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.1125 secs, and comparison 13.6806 sec, and warnIfPerfScore > 1.7, and perfScore=1.35284]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.9504 secs, and comparison 10.043 sec, and warnIfPerfScore > 1.5, and perfScore=1.00931]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 9.16562 secs, and comparison 17.0831 sec, and warnIfPerfScore > 2.1, and perfScore=1.86383]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.7162 secs, and comparison 7.41346 sec, and warnIfPerfScore > 1.6, and perfScore=0.691799]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.4399 secs, and comparison 1.39541 sec, and warnIfPerfScore > 0.23, and perfScore=0.121977]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 12.9211 secs, and comparison 12.5362 sec, and warnIfPerfScore > 1.3, and perfScore=0.970208]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 10.1199 secs, and comparison 7.9234 sec, and warnIfPerfScore > 1.2, and perfScore=0.78295]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 12.9206 secs, and comparison 2.70304 sec, and warnIfPerfScore > 0.33, and perfScore=0.209204]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 10.0235 secs, and comparison 49.5129 sec, and warnIfPerfScore > 6, and perfScore=4.93966]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 9.4663 secs, and comparison 7.4606 sec, and warnIfPerfScore > 0.8, and perfScore=0.788122]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.5463 secs, and comparison 15.3276 sec, and warnIfPerfScore > 1.4, and perfScore=1.60561]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.3593 secs, and comparison 4.14253 sec, and warnIfPerfScore > 0.65, and perfScore=0.310085]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.11 secs, and comparison 43.5879 sec, and warnIfPerfScore > 4.4, and perfScore=4.31136]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.8553 secs, and comparison 4.35868 sec, and warnIfPerfScore > 0.6, and perfScore=0.339057]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.6871 secs, and comparison 4.80107 sec, and warnIfPerfScore > 0.6, and perfScore=0.378421]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.7472 secs, and comparison 4.58848 sec, and warnIfPerfScore > 0.6, and perfScore=0.35996]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.927 secs, and comparison 8.6653 sec, and warnIfPerfScore > 1.3, and perfScore=0.622193]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 14.2072 secs, and comparison 12.1023 sec, and warnIfPerfScore > 1.3, and perfScore=0.851848]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 62.3688 secs, and comparison 7.73086 sec, and warnIfPerfScore > 0.3, and perfScore=0.123954]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.27326 secs, and comparison 14.9334 sec, and warnIfPerfScore > 1.5, and perfScore=1.61037]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.3925 secs, and comparison 5.01402 sec, and warnIfPerfScore > 0.55, and perfScore=0.325744]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 15 secs, and comparison 0.941533 sec, and warnIfPerfScore > 0.1, and perfScore=0.0627689]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.17949 sec, and warnIfPerfScore > 0.5, and perfScore=0.278633]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.8096 secs, and comparison 28.8171 sec, and warnIfPerfScore > 2, and perfScore=2.66587]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.3647 secs, and comparison 19.61 sec, and warnIfPerfScore > 3.6, and perfScore=1.19831]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 13 seconds]]]

Succeeded
