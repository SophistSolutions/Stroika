Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 4:20:10 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.53442 secs, and comparison 5.07509 sec, and warnIfPerfScore > 0.65, and perfScore=0.594661]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.56391 secs, and comparison 2.98967 sec, and warnIfPerfScore > 0.5, and perfScore=0.349101]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 11.09 secs, and comparison 9.78172 sec, and warnIfPerfScore > 1.05, and perfScore=0.882029]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.54331 secs, and comparison 9.78052 sec, and warnIfPerfScore > 1.15, and perfScore=1.14482]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 12.2629 secs, and comparison 3.31668 sec, and warnIfPerfScore > 0.48, and perfScore=0.270465]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.3005 secs, and comparison 3.9769 sec, and warnIfPerfScore > 0.57, and perfScore=0.351923]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.2488 secs, and comparison 25.5731 sec, and warnIfPerfScore > 2.9, and perfScore=2.49523]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.6118 secs, and comparison 28.3659 sec, and warnIfPerfScore > 2.9, and perfScore=2.67306]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.64277 secs, and comparison 150.644 sec, and warnIfPerfScore > 24, and perfScore=17.4301]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.3215 secs, and comparison 12.8784 sec, and warnIfPerfScore > 1.7, and perfScore=1.24772]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 10.1512 secs, and comparison 10.0705 sec, and warnIfPerfScore > 1.5, and perfScore=0.992048]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.65269 secs, and comparison 16.0224 sec, and warnIfPerfScore > 2.1, and perfScore=1.85173]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.0023 secs, and comparison 7.43438 sec, and warnIfPerfScore > 1.6, and perfScore=0.675713]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 11.4975 secs, and comparison 1.42233 sec, and warnIfPerfScore > 0.23, and perfScore=0.123708]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1469 secs, and comparison 13.2483 sec, and warnIfPerfScore > 1.3, and perfScore=1.09068]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.0502 secs, and comparison 7.50515 sec, and warnIfPerfScore > 1.2, and perfScore=0.746769]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 13.1361 secs, and comparison 2.92885 sec, and warnIfPerfScore > 0.33, and perfScore=0.222962]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.68741 secs, and comparison 48.6268 sec, and warnIfPerfScore > 6, and perfScore=5.01959]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.63559 secs, and comparison 7.68723 sec, and warnIfPerfScore > 0.8, and perfScore=0.797796]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.81312 secs, and comparison 15.0402 sec, and warnIfPerfScore > 1.4, and perfScore=1.53266]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9543 secs, and comparison 4.23883 sec, and warnIfPerfScore > 0.65, and perfScore=0.327215]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.5402 secs, and comparison 42.8518 sec, and warnIfPerfScore > 4.4, and perfScore=4.06554]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.4625 secs, and comparison 4.21148 sec, and warnIfPerfScore > 0.6, and perfScore=0.337932]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.1648 secs, and comparison 4.30278 sec, and warnIfPerfScore > 0.6, and perfScore=0.32684]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.3378 secs, and comparison 4.21494 sec, and warnIfPerfScore > 0.6, and perfScore=0.341627]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 12.591 secs, and comparison 8.28341 sec, and warnIfPerfScore > 1.3, and perfScore=0.657882]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 13.9253 secs, and comparison 12.2686 sec, and warnIfPerfScore > 1.3, and perfScore=0.881027]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 61.0822 secs, and comparison 7.3989 sec, and warnIfPerfScore > 0.3, and perfScore=0.12113]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.67433 secs, and comparison 15.1422 sec, and warnIfPerfScore > 1.5, and perfScore=1.5652]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.3253 secs, and comparison 5.1698 sec, and warnIfPerfScore > 0.55, and perfScore=0.316674]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 15 secs, and comparison 1.25109 sec, and warnIfPerfScore > 0.1, and perfScore=0.0834059]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.96111 sec, and warnIfPerfScore > 0.5, and perfScore=0.264074]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.865 secs, and comparison 18.8703 sec, and warnIfPerfScore > 2, and perfScore=1.73679]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 10.6768 secs, and comparison 21.063 sec, and warnIfPerfScore > 3.6, and perfScore=1.97278]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 39 seconds]]]

Succeeded
