Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug  3 11:11:15 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.61904 secs, and comparison 4.65541 sec, and warnIfPerfScore > 0.62, and perfScore=0.828507]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.70369 secs, and comparison 2.94548 sec, and warnIfPerfScore > 0.5, and perfScore=0.516416]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.27036 secs, and comparison 6.76838 sec, and warnIfPerfScore > 1.05, and perfScore=1.07943]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.81218 secs, and comparison 3.49484 sec, and warnIfPerfScore > 0.48, and perfScore=0.916757]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.70078 secs, and comparison 4.1415 sec, and warnIfPerfScore > 0.57, and perfScore=0.881024]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 3.36986 secs, and comparison 17.447 sec, and warnIfPerfScore > 2.9, and perfScore=5.17738]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.03291 secs, and comparison 17.8877 sec, and warnIfPerfScore > 2.9, and perfScore=4.43544]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.60271 secs, and comparison 57.4122 sec, and warnIfPerfScore > 9.7, and perfScore=10.2472]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.01786 secs, and comparison 9.72209 sec, and warnIfPerfScore > 1.6, and perfScore=1.9375]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.68103 secs, and comparison 5.63545 sec, and warnIfPerfScore > 1.5, and perfScore=0.991978]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.87789 secs, and comparison 10.7344 sec, and warnIfPerfScore > 2.1, and perfScore=3.72997]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 4.11593 secs, and comparison 3.31879 sec, and warnIfPerfScore > 1.3, and perfScore=0.806328]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.30506 secs, and comparison 1.55068 sec, and warnIfPerfScore > 0.23, and perfScore=0.3602]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.30803 secs, and comparison 5.05603 sec, and warnIfPerfScore > 1.3, and perfScore=1.17363]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.24113 secs, and comparison 6.63766 sec, and warnIfPerfScore > 1.2, and perfScore=2.04795]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 16.0376 secs, and comparison 1.6656 sec, and warnIfPerfScore > 0.33, and perfScore=0.103856]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.02785 secs, and comparison 40.71 sec, and warnIfPerfScore > 6, and perfScore=13.4452]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.0232 secs, and comparison 3.81156 sec, and warnIfPerfScore > 0.5, and perfScore=0.345777]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.35191 secs, and comparison 37.0174 sec, and warnIfPerfScore > 4.4, and perfScore=8.50601]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.5459 secs, and comparison 3.74311 sec, and warnIfPerfScore > 0.6, and perfScore=0.298353]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.23239 secs, and comparison 13.4859 sec, and warnIfPerfScore > 1.5, and perfScore=1.86465]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.14931 secs, and comparison 2.14423 sec, and warnIfPerfScore > 0.55, and perfScore=0.299921]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.076
	DETAILS:         	[baseline test 15 secs, and comparison 1.14541 sec, and warnIfPerfScore > 0.25, and perfScore=0.0763604]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.79148 sec, and warnIfPerfScore > 0.5, and perfScore=0.252766]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 36 seconds]]]

Succeeded
