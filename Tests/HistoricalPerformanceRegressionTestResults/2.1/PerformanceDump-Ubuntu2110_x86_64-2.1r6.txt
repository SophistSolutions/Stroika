Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Mar 25 9:16:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 3.59197 secs, and comparison 2.17448 sec, and warnIfPerfScore > 0.65, and perfScore=0.605372]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 4.2665 secs, and comparison 2.95607 sec, and warnIfPerfScore > 0.5, and perfScore=0.692856]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 2.48296 secs, and comparison 6.95852 sec, and warnIfPerfScore > 1.05, and perfScore=2.8025]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.44658 secs, and comparison 8.15986 sec, and warnIfPerfScore > 1.15, and perfScore=2.36752]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 4.67022 secs, and comparison 0.945146 sec, and warnIfPerfScore > 0.48, and perfScore=0.202377]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 8.22055 secs, and comparison 1.50982 sec, and warnIfPerfScore > 0.57, and perfScore=0.183664]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.83233 secs, and comparison 14.6571 sec, and warnIfPerfScore > 2.9, and perfScore=3.03313]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.86706 secs, and comparison 17.1584 sec, and warnIfPerfScore > 2.9, and perfScore=2.49866]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 6.22567 secs, and comparison 48.8555 sec, and warnIfPerfScore > 24, and perfScore=7.84743]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.59152 secs, and comparison 9.11195 sec, and warnIfPerfScore > 1.7, and perfScore=1.06057]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 6.85887 secs, and comparison 6.15012 sec, and warnIfPerfScore > 1.5, and perfScore=0.896666]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.09167 secs, and comparison 9.17176 sec, and warnIfPerfScore > 2.1, and perfScore=2.9666]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.17698 secs, and comparison 3.98595 sec, and warnIfPerfScore > 1.6, and perfScore=0.954266]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.38974 secs, and comparison 2.12029 sec, and warnIfPerfScore > 0.23, and perfScore=0.393393]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.50563 secs, and comparison 5.14719 sec, and warnIfPerfScore > 1.3, and perfScore=1.14239]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.87079 secs, and comparison 8.85709 sec, and warnIfPerfScore > 1.2, and perfScore=2.28819]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 19.0849 secs, and comparison 2.12861 sec, and warnIfPerfScore > 0.33, and perfScore=0.111534]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.43686 secs, and comparison 44.4845 sec, and warnIfPerfScore > 6, and perfScore=12.9434]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.52516 secs, and comparison 7.96873 sec, and warnIfPerfScore > 0.8, and perfScore=2.26053]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.62549 secs, and comparison 9.39068 sec, and warnIfPerfScore > 1.4, and perfScore=2.59019]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 19.325 secs, and comparison 3.92829 sec, and warnIfPerfScore > 0.65, and perfScore=0.203276]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 5.48016 secs, and comparison 39.2678 sec, and warnIfPerfScore > 4.4, and perfScore=7.16544]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.0437 secs, and comparison 4.1335 sec, and warnIfPerfScore > 0.6, and perfScore=0.294332]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.1122 secs, and comparison 3.73807 sec, and warnIfPerfScore > 0.6, and perfScore=0.308621]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.1072 secs, and comparison 3.66316 sec, and warnIfPerfScore > 0.6, and perfScore=0.30256]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.5762 secs, and comparison 4.22947 sec, and warnIfPerfScore > 1.3, and perfScore=0.311536]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 25.7883 secs, and comparison 12.2711 sec, and warnIfPerfScore > 1.3, and perfScore=0.475839]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 25.1013 secs, and comparison 6.35573 sec, and warnIfPerfScore > 0.3, and perfScore=0.253203]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.09794 secs, and comparison 15.127 sec, and warnIfPerfScore > 1.5, and perfScore=1.66269]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 9.05169 secs, and comparison 2.47641 sec, and warnIfPerfScore > 0.55, and perfScore=0.273585]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.816684 sec, and warnIfPerfScore > 0.1, and perfScore=0.0544456]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.77467 sec, and warnIfPerfScore > 0.5, and perfScore=0.118312]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 31 seconds]]]

Succeeded
