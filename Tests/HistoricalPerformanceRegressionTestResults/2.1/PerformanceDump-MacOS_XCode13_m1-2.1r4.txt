Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 28 16:58:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21102 secs, and comparison 4.81849 sec, and warnIfPerfScore > 0.65, and perfScore=1.50061]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.20971 secs, and comparison 2.28073 sec, and warnIfPerfScore > 0.5, and perfScore=0.710574]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25139 secs, and comparison 7.1807 sec, and warnIfPerfScore > 1.05, and perfScore=0.990251]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31697 secs, and comparison 7.18136 sec, and warnIfPerfScore > 1.15, and perfScore=1.13684]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.9023 secs, and comparison 1.50027 sec, and warnIfPerfScore > 0.48, and perfScore=0.254183]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 5.9047 secs, and comparison 2.00725 sec, and warnIfPerfScore > 0.57, and perfScore=0.339942]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.04915 secs, and comparison 15.3817 sec, and warnIfPerfScore > 2.9, and perfScore=2.5428]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.42267 secs, and comparison 16.0626 sec, and warnIfPerfScore > 2.9, and perfScore=2.16399]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 9.499 secs, and comparison 55.6255 sec, and warnIfPerfScore > 24, and perfScore=5.85594]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.25607 secs, and comparison 7.59598 sec, and warnIfPerfScore > 1.7, and perfScore=1.78474]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.72579 secs, and comparison 3.86903 sec, and warnIfPerfScore > 1.5, and perfScore=0.818704]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.65968 secs, and comparison 9.56965 sec, and warnIfPerfScore > 2.1, and perfScore=2.61489]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.1612 secs, and comparison 3.00297 sec, and warnIfPerfScore > 1.6, and perfScore=0.581835]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 5.35412 secs, and comparison 0.677759 sec, and warnIfPerfScore > 0.23, and perfScore=0.126586]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4242 secs, and comparison 12.9013 sec, and warnIfPerfScore > 1.3, and perfScore=1.0384]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.5075 secs, and comparison 5.28055 sec, and warnIfPerfScore > 1.2, and perfScore=1.1715]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.47808 secs, and comparison 1.0689 sec, and warnIfPerfScore > 0.33, and perfScore=0.238695]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 4.37482 secs, and comparison 38.4404 sec, and warnIfPerfScore > 6, and perfScore=8.78675]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.32438 secs, and comparison 5.11378 sec, and warnIfPerfScore > 0.8, and perfScore=1.18255]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.35483 secs, and comparison 7.0667 sec, and warnIfPerfScore > 1.4, and perfScore=1.62273]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.47937 secs, and comparison 3.1827 sec, and warnIfPerfScore > 0.65, and perfScore=0.710523]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.59793 secs, and comparison 36.2646 sec, and warnIfPerfScore > 4.4, and perfScore=6.47822]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50613 secs, and comparison 3.07769 sec, and warnIfPerfScore > 0.6, and perfScore=0.683]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50142 secs, and comparison 3.07976 sec, and warnIfPerfScore > 0.6, and perfScore=0.684177]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50128 secs, and comparison 3.07747 sec, and warnIfPerfScore > 0.6, and perfScore=0.683688]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.49962 secs, and comparison 2.81175 sec, and warnIfPerfScore > 1.3, and perfScore=0.624885]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.69363 secs, and comparison 8.21604 sec, and warnIfPerfScore > 1.3, and perfScore=1.75047]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.6248 secs, and comparison 4.1991 sec, and warnIfPerfScore > 0.3, and perfScore=0.141743]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.17332 secs, and comparison 11.9154 sec, and warnIfPerfScore > 1.5, and perfScore=1.29892]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 4.63786 secs, and comparison 2.58216 sec, and warnIfPerfScore > 0.55, and perfScore=0.556756]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.06195 sec, and warnIfPerfScore > 0.1, and perfScore=0.137464]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94675 sec, and warnIfPerfScore > 0.5, and perfScore=0.129783]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 58 seconds]]]

Succeeded
