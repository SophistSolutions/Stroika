Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr 10 3:4:47 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.12199 secs, and comparison 4.24626 sec, and warnIfPerfScore > 0.65, and perfScore=0.596218]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.76696 secs, and comparison 2.81159 sec, and warnIfPerfScore > 0.5, and perfScore=0.361994]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.59332 secs, and comparison 7.3473 sec, and warnIfPerfScore > 1.05, and perfScore=0.855]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.82626 secs, and comparison 7.53649 sec, and warnIfPerfScore > 1.15, and perfScore=1.10404]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.3082 secs, and comparison 2.30433 sec, and warnIfPerfScore > 0.48, and perfScore=0.0671655]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 32.9037 secs, and comparison 2.70582 sec, and warnIfPerfScore > 0.57, and perfScore=0.0822344]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.29927 secs, and comparison 21.1204 sec, and warnIfPerfScore > 2.9, and perfScore=2.54485]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.00078 secs, and comparison 21.3556 sec, and warnIfPerfScore > 2.9, and perfScore=2.37264]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.89338 secs, and comparison 147.427 sec, and warnIfPerfScore > 24, and perfScore=18.6773]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.87367 secs, and comparison 10.6713 sec, and warnIfPerfScore > 1.7, and perfScore=1.35531]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.82913 secs, and comparison 7.81562 sec, and warnIfPerfScore > 1.5, and perfScore=0.998275]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.56579 secs, and comparison 12.2779 sec, and warnIfPerfScore > 2.1, and perfScore=1.86997]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.01391 secs, and comparison 6.95598 sec, and warnIfPerfScore > 1.6, and perfScore=0.771694]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.38775 secs, and comparison 1.29828 sec, and warnIfPerfScore > 0.23, and perfScore=0.138295]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.1149 secs, and comparison 12.5004 sec, and warnIfPerfScore > 1.3, and perfScore=1.03182]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.75893 secs, and comparison 5.55837 sec, and warnIfPerfScore > 1.2, and perfScore=0.569567]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.42058 secs, and comparison 2.11692 sec, and warnIfPerfScore > 0.33, and perfScore=0.224713]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.34038 secs, and comparison 38.6519 sec, and warnIfPerfScore > 6, and perfScore=4.13815]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.81408 secs, and comparison 5.31843 sec, and warnIfPerfScore > 0.8, and perfScore=0.541918]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.33902 secs, and comparison 9.11272 sec, and warnIfPerfScore > 1.4, and perfScore=0.975768]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.90407 secs, and comparison 3.66339 sec, and warnIfPerfScore > 0.65, and perfScore=0.411429]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.70084 secs, and comparison 36.2211 sec, and warnIfPerfScore > 4.4, and perfScore=3.73381]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.78763 secs, and comparison 3.48157 sec, and warnIfPerfScore > 0.6, and perfScore=0.39619]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.79538 secs, and comparison 3.47434 sec, and warnIfPerfScore > 0.6, and perfScore=0.395019]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.47496 secs, and comparison 3.49578 sec, and warnIfPerfScore > 0.6, and perfScore=0.368949]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 8.81059 secs, and comparison 4.8505 sec, and warnIfPerfScore > 1.3, and perfScore=0.550531]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.61741 secs, and comparison 8.38339 sec, and warnIfPerfScore > 1.3, and perfScore=0.87169]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 46.1543 secs, and comparison 6.42924 sec, and warnIfPerfScore > 0.3, and perfScore=0.139299]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.73453 secs, and comparison 11.4628 sec, and warnIfPerfScore > 1.5, and perfScore=1.48203]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.00992 secs, and comparison 3.08981 sec, and warnIfPerfScore > 0.55, and perfScore=0.440776]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.810698 sec, and warnIfPerfScore > 0.1, and perfScore=0.0540465]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.75811 sec, and warnIfPerfScore > 0.5, and perfScore=0.183874]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.88535 secs, and comparison 13.0416 sec, and warnIfPerfScore > 2, and perfScore=1.6539]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 9.83936 secs, and comparison 28.4352 sec, and warnIfPerfScore > 3.6, and perfScore=2.88995]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 51 seconds]]]

Succeeded
