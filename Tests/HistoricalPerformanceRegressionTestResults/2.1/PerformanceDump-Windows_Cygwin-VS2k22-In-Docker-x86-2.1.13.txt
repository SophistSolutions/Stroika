Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 26 21:13:50 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.58693 secs, and comparison 4.43164 sec, and warnIfPerfScore > 0.65, and perfScore=0.584114]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.819 secs, and comparison 2.96151 sec, and warnIfPerfScore > 0.5, and perfScore=0.378758]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.54401 secs, and comparison 7.80697 sec, and warnIfPerfScore > 1.05, and perfScore=0.913736]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.43971 secs, and comparison 7.90876 sec, and warnIfPerfScore > 1.15, and perfScore=1.06305]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 36.4863 secs, and comparison 2.31059 sec, and warnIfPerfScore > 0.48, and perfScore=0.0633276]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 33.5785 secs, and comparison 2.88331 sec, and warnIfPerfScore > 0.57, and perfScore=0.0858676]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.70237 secs, and comparison 20.8878 sec, and warnIfPerfScore > 2.9, and perfScore=2.40024]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.2959 secs, and comparison 21.4529 sec, and warnIfPerfScore > 2.9, and perfScore=2.30779]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.27793 secs, and comparison 154.681 sec, and warnIfPerfScore > 24, and perfScore=18.686]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.39204 secs, and comparison 10.7247 sec, and warnIfPerfScore > 1.7, and perfScore=1.45085]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.58503 secs, and comparison 7.48578 sec, and warnIfPerfScore > 1.5, and perfScore=0.986915]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.52534 secs, and comparison 12.591 sec, and warnIfPerfScore > 2.1, and perfScore=1.92955]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.81172 secs, and comparison 6.44654 sec, and warnIfPerfScore > 1.6, and perfScore=0.731587]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.2032 secs, and comparison 1.24928 sec, and warnIfPerfScore > 0.23, and perfScore=0.135744]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2229 secs, and comparison 12.6245 sec, and warnIfPerfScore > 1.3, and perfScore=1.03286]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.71812 secs, and comparison 5.49214 sec, and warnIfPerfScore > 1.2, and perfScore=0.565144]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.94651 secs, and comparison 2.10907 sec, and warnIfPerfScore > 0.33, and perfScore=0.235742]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.33953 secs, and comparison 39.7649 sec, and warnIfPerfScore > 6, and perfScore=4.25769]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.46057 secs, and comparison 5.37383 sec, and warnIfPerfScore > 0.8, and perfScore=0.568024]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.46161 secs, and comparison 8.99826 sec, and warnIfPerfScore > 1.4, and perfScore=0.951028]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.07334 secs, and comparison 3.50837 sec, and warnIfPerfScore > 0.65, and perfScore=0.386668]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.69602 secs, and comparison 36.3153 sec, and warnIfPerfScore > 4.4, and perfScore=3.74539]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.83073 secs, and comparison 3.55736 sec, and warnIfPerfScore > 0.6, and perfScore=0.402838]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.89959 secs, and comparison 3.54453 sec, and warnIfPerfScore > 0.6, and perfScore=0.39828]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.87269 secs, and comparison 3.54557 sec, and warnIfPerfScore > 0.6, and perfScore=0.399605]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.1191 secs, and comparison 4.99271 sec, and warnIfPerfScore > 1.3, and perfScore=0.5475]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 9.66032 secs, and comparison 8.44173 sec, and warnIfPerfScore > 1.3, and perfScore=0.873857]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 45.5828 secs, and comparison 7.80188 sec, and warnIfPerfScore > 0.3, and perfScore=0.171159]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.50711 secs, and comparison 11.282 sec, and warnIfPerfScore > 1.5, and perfScore=1.50284]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.50284}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.26568 secs, and comparison 3.44744 sec, and warnIfPerfScore > 0.55, and perfScore=0.474483]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.758014 sec, and warnIfPerfScore > 0.1, and perfScore=0.0505343]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79053 sec, and warnIfPerfScore > 0.5, and perfScore=0.186035]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.78943 secs, and comparison 13.004 sec, and warnIfPerfScore > 2, and perfScore=1.66945]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.22286 secs, and comparison 28.505 sec, and warnIfPerfScore > 3.6, and perfScore=3.09069]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 1 second]]]

Succeeded
