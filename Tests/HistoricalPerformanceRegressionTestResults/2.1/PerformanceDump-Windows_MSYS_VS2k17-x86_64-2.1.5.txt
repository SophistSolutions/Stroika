Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 17:39:1 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 43.169 secs, and comparison 6.71413 sec, and warnIfPerfScore > 0.65, and perfScore=0.155531]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 42.043 secs, and comparison 6.83836 sec, and warnIfPerfScore > 0.5, and perfScore=0.162652]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 17.7706 secs, and comparison 13.4657 sec, and warnIfPerfScore > 1.05, and perfScore=0.75775]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 14.082 secs, and comparison 12.4098 sec, and warnIfPerfScore > 1.15, and perfScore=0.881255]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.2671 secs, and comparison 3.72896 sec, and warnIfPerfScore > 0.48, and perfScore=0.18399]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.4304 secs, and comparison 4.17513 sec, and warnIfPerfScore > 0.57, and perfScore=0.204359]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.9674 secs, and comparison 34.1239 sec, and warnIfPerfScore > 2.9, and perfScore=1.79908]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 20.0741 secs, and comparison 35.8504 sec, and warnIfPerfScore > 2.9, and perfScore=1.7859]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.5703 secs, and comparison 194.773 sec, and warnIfPerfScore > 24, and perfScore=13.3678]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 19.7038 secs, and comparison 15.3631 sec, and warnIfPerfScore > 1.7, and perfScore=0.7797]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 42.1492 secs, and comparison 44.7581 sec, and warnIfPerfScore > 1.5, and perfScore=1.0619]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.2034 secs, and comparison 17.3643 sec, and warnIfPerfScore > 2.1, and perfScore=1.00935]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 36.0317 secs, and comparison 10.5926 sec, and warnIfPerfScore > 1.6, and perfScore=0.293981]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 36.908 secs, and comparison 2.21049 sec, and warnIfPerfScore > 0.23, and perfScore=0.0598918]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.406 secs, and comparison 23.5306 sec, and warnIfPerfScore > 1.3, and perfScore=1.75523]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.9107 secs, and comparison 20.8369 sec, and warnIfPerfScore > 1.2, and perfScore=1.4979]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 22.956 secs, and comparison 6.00981 sec, and warnIfPerfScore > 0.33, and perfScore=0.261797]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 13.4365 secs, and comparison 55.9659 sec, and warnIfPerfScore > 6, and perfScore=4.16522]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.3941 secs, and comparison 19.3642 sec, and warnIfPerfScore > 0.8, and perfScore=1.44572]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.6113 secs, and comparison 53.5108 sec, and warnIfPerfScore > 1.4, and perfScore=3.93134]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 23.0895 secs, and comparison 5.09797 sec, and warnIfPerfScore > 0.65, and perfScore=0.220791]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 25.7389 secs, and comparison 61.6474 sec, and warnIfPerfScore > 4.4, and perfScore=2.39511]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 23.1953 secs, and comparison 6.06933 sec, and warnIfPerfScore > 0.6, and perfScore=0.261662]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 23.1092 secs, and comparison 6.32118 sec, and warnIfPerfScore > 0.6, and perfScore=0.273535]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 22.82 secs, and comparison 6.53553 sec, and warnIfPerfScore > 0.6, and perfScore=0.286395]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 22.076 secs, and comparison 14.3235 sec, and warnIfPerfScore > 1.3, and perfScore=0.648826]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 30.1913 secs, and comparison 22.2505 sec, and warnIfPerfScore > 1.3, and perfScore=0.736984]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 106.507 secs, and comparison 8.23072 sec, and warnIfPerfScore > 0.3, and perfScore=0.0772789]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 18.2111 secs, and comparison 23.6069 sec, and warnIfPerfScore > 1.5, and perfScore=1.29629]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 20.9837 secs, and comparison 6.0183 sec, and warnIfPerfScore > 0.55, and perfScore=0.286808]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.66342 sec, and warnIfPerfScore > 0.1, and perfScore=0.110894]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.74862 sec, and warnIfPerfScore > 0.5, and perfScore=0.316575]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.5153 secs, and comparison 22.7414 sec, and warnIfPerfScore > 2, and perfScore=1.10851]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 23.1603 secs, and comparison 28.0364 sec, and warnIfPerfScore > 3.6, and perfScore=1.21054]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes]]]

Succeeded
