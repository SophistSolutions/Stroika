Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 11 8:22:43 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 5.42534 secs, and comparison 4.68075 sec, and warnIfPerfScore > 0.62, and perfScore=0.862757]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.44635 secs, and comparison 3.04511 sec, and warnIfPerfScore > 0.5, and perfScore=0.559111]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.42242 secs, and comparison 6.91046 sec, and warnIfPerfScore > 1.05, and perfScore=1.07599]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.78799 secs, and comparison 3.61532 sec, and warnIfPerfScore > 0.48, and perfScore=0.954415]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.66648 secs, and comparison 4.17244 sec, and warnIfPerfScore > 0.57, and perfScore=0.89413]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 8.77989 secs, and comparison 34.6833 sec, and warnIfPerfScore > 2.9, and perfScore=3.95031]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.92305 secs, and comparison 37.5165 sec, and warnIfPerfScore > 2.9, and perfScore=3.78075]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	31
	DETAILS:         	[baseline test 11.8445 secs, and comparison 364.349 sec, and warnIfPerfScore > 9.7, and perfScore=30.7609]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.13067 secs, and comparison 10.4424 sec, and warnIfPerfScore > 1.6, and perfScore=2.0353]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 24.8387 secs, and comparison 24.6037 sec, and warnIfPerfScore > 1.5, and perfScore=0.990541]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.8815 secs, and comparison 10.9988 sec, and warnIfPerfScore > 2.1, and perfScore=3.81703]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.25998 secs, and comparison 4.67465 sec, and warnIfPerfScore > 1.3, and perfScore=0.746752]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.89122 secs, and comparison 2.83952 sec, and warnIfPerfScore > 0.23, and perfScore=0.412049]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.80397 secs, and comparison 4.6176 sec, and warnIfPerfScore > 1.3, and perfScore=1.21389]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 22.2307 secs, and comparison 10.0575 sec, and warnIfPerfScore > 1.2, and perfScore=0.452418]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.016
	DETAILS:         	[baseline test 101.825 secs, and comparison 1.61846 sec, and warnIfPerfScore > 0.33, and perfScore=0.0158946]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 20.7392 secs, and comparison 43.1034 sec, and warnIfPerfScore > 6, and perfScore=2.07836]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 51.1457 secs, and comparison 3.86149 sec, and warnIfPerfScore > 0.5, and perfScore=0.0754997]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 21.2937 secs, and comparison 37.9065 sec, and warnIfPerfScore > 4.4, and perfScore=1.78018]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 70.7843 secs, and comparison 3.81108 sec, and warnIfPerfScore > 0.6, and perfScore=0.0538408]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.38787 secs, and comparison 13.3953 sec, and warnIfPerfScore > 1.5, and perfScore=1.81314]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 7.14303 secs, and comparison 2.17528 sec, and warnIfPerfScore > 0.55, and perfScore=0.304531]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 15 secs, and comparison 1.17295 sec, and warnIfPerfScore > 0.25, and perfScore=0.0781964]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.89257 sec, and warnIfPerfScore > 0.5, and perfScore=0.259504]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 29 seconds]]]

Succeeded
