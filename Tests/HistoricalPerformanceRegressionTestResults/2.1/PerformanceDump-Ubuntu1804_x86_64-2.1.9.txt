Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 :46:29 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.32698 secs, and comparison 4.79867 sec, and warnIfPerfScore > 0.65, and perfScore=0.758446]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.54223 secs, and comparison 3.00121 sec, and warnIfPerfScore > 0.5, and perfScore=0.458744]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.55575 secs, and comparison 6.75068 sec, and warnIfPerfScore > 1.05, and perfScore=1.02973]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.11006 secs, and comparison 6.92029 sec, and warnIfPerfScore > 1.15, and perfScore=1.13261]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 3.92448 secs, and comparison 2.53732 sec, and warnIfPerfScore > 0.48, and perfScore=0.646536]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 4.81461 secs, and comparison 3.59104 sec, and warnIfPerfScore > 0.57, and perfScore=0.745863]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 3.5319 secs, and comparison 17.0154 sec, and warnIfPerfScore > 2.9, and perfScore=4.81762]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 4.15731 secs, and comparison 17.7279 sec, and warnIfPerfScore > 2.9, and perfScore=4.26426]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.12198 secs, and comparison 54.6561 sec, and warnIfPerfScore > 24, and perfScore=10.6709]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.20668 secs, and comparison 10.3602 sec, and warnIfPerfScore > 1.7, and perfScore=1.98979]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.86434 secs, and comparison 6.48793 sec, and warnIfPerfScore > 1.5, and perfScore=0.945164]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.78696 secs, and comparison 12.1487 sec, and warnIfPerfScore > 2.1, and perfScore=4.35912]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 4.62999 secs, and comparison 3.76729 sec, and warnIfPerfScore > 1.6, and perfScore=0.813671]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.68377 secs, and comparison 1.88539 sec, and warnIfPerfScore > 0.23, and perfScore=0.402537]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.29957 secs, and comparison 5.16713 sec, and warnIfPerfScore > 1.3, and perfScore=1.20178]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.10332 secs, and comparison 7.57267 sec, and warnIfPerfScore > 1.2, and perfScore=2.44018]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.085
	DETAILS:         	[baseline test 19.3323 secs, and comparison 1.64055 sec, and warnIfPerfScore > 0.33, and perfScore=0.0848604]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.07669 secs, and comparison 42.3858 sec, and warnIfPerfScore > 6, and perfScore=13.7764]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.09223 secs, and comparison 7.21616 sec, and warnIfPerfScore > 0.8, and perfScore=2.33364]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.02918 secs, and comparison 8.07705 sec, and warnIfPerfScore > 1.4, and perfScore=2.66641]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.4102 secs, and comparison 3.71483 sec, and warnIfPerfScore > 0.65, and perfScore=0.299336]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 5.90628 secs, and comparison 37.8249 sec, and warnIfPerfScore > 4.4, and perfScore=6.40417]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.6425 secs, and comparison 3.69704 sec, and warnIfPerfScore > 0.6, and perfScore=0.270994]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.8066 secs, and comparison 3.69412 sec, and warnIfPerfScore > 0.6, and perfScore=0.249492]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.7955 secs, and comparison 3.65788 sec, and warnIfPerfScore > 0.6, and perfScore=0.247229]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.9479 secs, and comparison 4.70634 sec, and warnIfPerfScore > 1.3, and perfScore=0.314849]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 21.625 secs, and comparison 10.3583 sec, and warnIfPerfScore > 1.3, and perfScore=0.478997]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.2511 secs, and comparison 7.37646 sec, and warnIfPerfScore > 0.3, and perfScore=0.383172]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.29234 secs, and comparison 13.0132 sec, and warnIfPerfScore > 1.5, and perfScore=1.56931]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.0158 secs, and comparison 2.92855 sec, and warnIfPerfScore > 0.55, and perfScore=0.417423]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.810582 sec, and warnIfPerfScore > 0.1, and perfScore=0.0540388]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.3523 sec, and warnIfPerfScore > 0.5, and perfScore=0.223487]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 20 seconds]]]

Succeeded
