Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr  2 7:21:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 3.20988 secs, and comparison 1.31194 sec, and warnIfPerfScore > 0.65, and perfScore=0.40872]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 2.95872 secs, and comparison 2.98545 sec, and warnIfPerfScore > 0.5, and perfScore=1.00904]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.4942 secs, and comparison 6.77022 sec, and warnIfPerfScore > 1.05, and perfScore=2.71439]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.09181 secs, and comparison 6.69865 sec, and warnIfPerfScore > 1.15, and perfScore=3.20232]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 3.98953 secs, and comparison 0.963678 sec, and warnIfPerfScore > 0.48, and perfScore=0.241552]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.82835 secs, and comparison 1.11782 sec, and warnIfPerfScore > 0.57, and perfScore=0.231512]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.66944 secs, and comparison 11.9995 sec, and warnIfPerfScore > 2.9, and perfScore=3.2701]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 4.14379 secs, and comparison 12.4771 sec, and warnIfPerfScore > 2.9, and perfScore=3.01104]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 5.48281 secs, and comparison 43.9998 sec, and warnIfPerfScore > 24, and perfScore=8.02505]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.42985 secs, and comparison 7.50254 sec, and warnIfPerfScore > 1.7, and perfScore=1.38172]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.63447 secs, and comparison 5.3995 sec, and warnIfPerfScore > 1.5, and perfScore=0.958298]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 2.93319 secs, and comparison 9.12047 sec, and warnIfPerfScore > 2.1, and perfScore=3.1094]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.93197 secs, and comparison 3.69152 sec, and warnIfPerfScore > 1.6, and perfScore=0.938845]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.06288 secs, and comparison 1.35732 sec, and warnIfPerfScore > 0.23, and perfScore=0.334077]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.511 secs, and comparison 4.13417 sec, and warnIfPerfScore > 1.3, and perfScore=1.17749]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.07644 secs, and comparison 7.42243 sec, and warnIfPerfScore > 1.2, and perfScore=2.41267]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 17.1795 secs, and comparison 1.88094 sec, and warnIfPerfScore > 0.33, and perfScore=0.109488]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.01922 secs, and comparison 41.3515 sec, and warnIfPerfScore > 6, and perfScore=13.6961]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.00716 secs, and comparison 6.70277 sec, and warnIfPerfScore > 0.8, and perfScore=2.22894]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.98399 secs, and comparison 7.64794 sec, and warnIfPerfScore > 1.4, and perfScore=2.56299]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.9123 secs, and comparison 3.73667 sec, and warnIfPerfScore > 0.65, and perfScore=0.220944]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.44626 secs, and comparison 37.6742 sec, and warnIfPerfScore > 4.4, and perfScore=8.47325]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.1321 secs, and comparison 3.75294 sec, and warnIfPerfScore > 0.6, and perfScore=0.309339]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.2391 secs, and comparison 3.7713 sec, and warnIfPerfScore > 0.6, and perfScore=0.308136]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.22 secs, and comparison 3.65458 sec, and warnIfPerfScore > 0.6, and perfScore=0.299065]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.238 secs, and comparison 4.2826 sec, and warnIfPerfScore > 1.3, and perfScore=0.349942]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 19.1188 secs, and comparison 9.47633 sec, and warnIfPerfScore > 1.3, and perfScore=0.495656]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 19.4377 secs, and comparison 5.74371 sec, and warnIfPerfScore > 0.3, and perfScore=0.295493]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.46701 secs, and comparison 13.7537 sec, and warnIfPerfScore > 1.5, and perfScore=1.84193]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.54607 secs, and comparison 2.37644 sec, and warnIfPerfScore > 0.55, and perfScore=0.363034]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.786535 sec, and warnIfPerfScore > 0.1, and perfScore=0.0524357]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.44029 sec, and warnIfPerfScore > 0.5, and perfScore=0.0960193]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 7 seconds]]]

Succeeded
