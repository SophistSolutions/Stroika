Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 28 11:46:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.19635 secs, and comparison 4.82169 sec, and warnIfPerfScore > 0.65, and perfScore=1.5085]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.19573 secs, and comparison 2.27622 sec, and warnIfPerfScore > 0.5, and perfScore=0.712268]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.58908 secs, and comparison 6.94316 sec, and warnIfPerfScore > 1.05, and perfScore=1.05374]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.01282 secs, and comparison 6.94309 sec, and warnIfPerfScore > 1.15, and perfScore=1.15471]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 4.48183 secs, and comparison 1.18583 sec, and warnIfPerfScore > 0.48, and perfScore=0.264585]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.50376 secs, and comparison 1.79315 sec, and warnIfPerfScore > 0.57, and perfScore=0.398146]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 5.32696 secs, and comparison 14.5144 sec, and warnIfPerfScore > 2.9, and perfScore=2.72471]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.09223 secs, and comparison 15.0755 sec, and warnIfPerfScore > 2.9, and perfScore=2.12564]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 9.21436 secs, and comparison 48.3115 sec, and warnIfPerfScore > 24, and perfScore=5.24306]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.33643 secs, and comparison 7.59902 sec, and warnIfPerfScore > 1.7, and perfScore=2.27759]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 5.13247 secs, and comparison 3.87461 sec, and warnIfPerfScore > 1.5, and perfScore=0.75492]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 2.81069 secs, and comparison 9.57056 sec, and warnIfPerfScore > 2.1, and perfScore=3.40505]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.21483 secs, and comparison 2.81882 sec, and warnIfPerfScore > 1.6, and perfScore=0.540539]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 5.46475 secs, and comparison 0.56539 sec, and warnIfPerfScore > 0.23, and perfScore=0.103461]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.19786 secs, and comparison 12.9086 sec, and warnIfPerfScore > 1.3, and perfScore=1.40343]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.85915 secs, and comparison 4.92731 sec, and warnIfPerfScore > 1.2, and perfScore=1.27678]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 3.80385 secs, and comparison 1.01426 sec, and warnIfPerfScore > 0.33, and perfScore=0.26664]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.57046 secs, and comparison 38.4074 sec, and warnIfPerfScore > 6, and perfScore=10.757]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.55348 secs, and comparison 4.72595 sec, and warnIfPerfScore > 0.8, and perfScore=1.32995]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 3.55781 secs, and comparison 6.90157 sec, and warnIfPerfScore > 1.4, and perfScore=1.93984]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.88232 secs, and comparison 3.19016 sec, and warnIfPerfScore > 0.65, and perfScore=0.821714]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 5.01826 secs, and comparison 36.1321 sec, and warnIfPerfScore > 4.4, and perfScore=7.20012]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.75469 secs, and comparison 3.089 sec, and warnIfPerfScore > 0.6, and perfScore=0.822704]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.78085 secs, and comparison 3.08892 sec, and warnIfPerfScore > 0.6, and perfScore=0.816991]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.79281 secs, and comparison 3.11275 sec, and warnIfPerfScore > 0.6, and perfScore=0.820696]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 3.73711 secs, and comparison 2.74261 sec, and warnIfPerfScore > 1.3, and perfScore=0.733886]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.10137 secs, and comparison 8.22664 sec, and warnIfPerfScore > 1.3, and perfScore=2.00583]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 27.9973 secs, and comparison 4.14638 sec, and warnIfPerfScore > 0.3, and perfScore=0.148099]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.84363 secs, and comparison 11.3415 sec, and warnIfPerfScore > 1.5, and perfScore=1.28245]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 2.49697 secs, and comparison 2.3494 sec, and warnIfPerfScore > 0.55, and perfScore=0.940902]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.97088 sec, and warnIfPerfScore > 0.1, and perfScore=0.131392]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.91459 sec, and warnIfPerfScore > 0.5, and perfScore=0.127639]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 23 seconds]]]

Succeeded
