Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 7:16:58 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 41.9104 secs, and comparison 14.3741 sec, and warnIfPerfScore > 0.65, and perfScore=0.342971]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 42.5046 secs, and comparison 13.2956 sec, and warnIfPerfScore > 0.5, and perfScore=0.312803]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 25.3106 secs, and comparison 20.6901 sec, and warnIfPerfScore > 1.05, and perfScore=0.817449]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 20.5908 secs, and comparison 20.3594 sec, and warnIfPerfScore > 1.15, and perfScore=0.988764]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 19.6216 secs, and comparison 3.15831 sec, and warnIfPerfScore > 0.48, and perfScore=0.160961]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.3348 secs, and comparison 3.69269 sec, and warnIfPerfScore > 0.57, and perfScore=0.190987]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.8624 secs, and comparison 33.6482 sec, and warnIfPerfScore > 2.9, and perfScore=1.78388]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 19.1815 secs, and comparison 33.8414 sec, and warnIfPerfScore > 2.9, and perfScore=1.76427]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 13.911 secs, and comparison 168.177 sec, and warnIfPerfScore > 24, and perfScore=12.0894]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 16.0459 secs, and comparison 14.3776 sec, and warnIfPerfScore > 1.7, and perfScore=0.89603]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 46.1052 secs, and comparison 44.9551 sec, and warnIfPerfScore > 1.5, and perfScore=0.975055]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.0983 secs, and comparison 16.4965 sec, and warnIfPerfScore > 2.1, and perfScore=1.02474]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 37.6011 secs, and comparison 8.99962 sec, and warnIfPerfScore > 1.6, and perfScore=0.239345]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.048
	DETAILS:         	[baseline test 39.362 secs, and comparison 1.88342 sec, and warnIfPerfScore > 0.23, and perfScore=0.0478488]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.2959 secs, and comparison 20.7679 sec, and warnIfPerfScore > 1.3, and perfScore=1.689]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.9056 secs, and comparison 20.0815 sec, and warnIfPerfScore > 1.2, and perfScore=1.55603]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.537 secs, and comparison 5.29268 sec, and warnIfPerfScore > 0.33, and perfScore=0.270905]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 12.1253 secs, and comparison 50.3149 sec, and warnIfPerfScore > 6, and perfScore=4.1496]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.1606 secs, and comparison 19.1407 sec, and warnIfPerfScore > 0.8, and perfScore=1.574]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.087 secs, and comparison 41.1518 sec, and warnIfPerfScore > 1.4, and perfScore=3.40462]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 19.5766 secs, and comparison 4.60705 sec, and warnIfPerfScore > 0.65, and perfScore=0.235334]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 21.7854 secs, and comparison 54.4944 sec, and warnIfPerfScore > 4.4, and perfScore=2.50142]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 18.9789 secs, and comparison 5.56463 sec, and warnIfPerfScore > 0.6, and perfScore=0.293201]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.2982 secs, and comparison 5.27048 sec, and warnIfPerfScore > 0.6, and perfScore=0.273107]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.5453 secs, and comparison 5.3413 sec, and warnIfPerfScore > 0.6, and perfScore=0.273278]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 19.6747 secs, and comparison 12.6879 sec, and warnIfPerfScore > 1.3, and perfScore=0.644883]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 26.5987 secs, and comparison 19.2257 sec, and warnIfPerfScore > 1.3, and perfScore=0.722808]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 92.202 secs, and comparison 11.288 sec, and warnIfPerfScore > 0.3, and perfScore=0.122426]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.2691 secs, and comparison 20.6408 sec, and warnIfPerfScore > 1.5, and perfScore=1.19525]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 14.7374 secs, and comparison 5.32789 sec, and warnIfPerfScore > 0.55, and perfScore=0.36152]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.49612 sec, and warnIfPerfScore > 0.1, and perfScore=0.0997412]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.65318 sec, and warnIfPerfScore > 0.5, and perfScore=0.243545]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.8418 secs, and comparison 19.2107 sec, and warnIfPerfScore > 2, and perfScore=1.07672]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.7003 secs, and comparison 28.1693 sec, and warnIfPerfScore > 3.6, and perfScore=1.29811]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 25 minutes, 21 seconds]]]

Succeeded
