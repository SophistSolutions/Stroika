Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Dec 23 17:19:45 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.92895 secs, and comparison 4.82431 sec, and warnIfPerfScore > 0.62, and perfScore=0.813687]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.04295 secs, and comparison 3.33007 sec, and warnIfPerfScore > 0.5, and perfScore=0.551068]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.7527 secs, and comparison 7.05822 sec, and warnIfPerfScore > 1.05, and perfScore=1.04524]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 3.71743 secs, and comparison 3.5913 sec, and warnIfPerfScore > 0.48, and perfScore=0.966071]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.61645 secs, and comparison 4.20408 sec, and warnIfPerfScore > 0.57, and perfScore=0.910674]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.23786 secs, and comparison 36.0078 sec, and warnIfPerfScore > 2.9, and perfScore=4.97492]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.23877 secs, and comparison 39.1806 sec, and warnIfPerfScore > 2.9, and perfScore=4.75563]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	40
	DETAILS:         	[baseline test 11.1727 secs, and comparison 447.346 sec, and warnIfPerfScore > 9.7, and perfScore=40.0392]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.0412 secs, and comparison 18.9283 sec, and warnIfPerfScore > 1.6, and perfScore=1.88507]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 54.3319 secs, and comparison 54.943 sec, and warnIfPerfScore > 1.5, and perfScore=1.01125]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 5.12755 secs, and comparison 17.0826 sec, and warnIfPerfScore > 2.1, and perfScore=3.33153]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15.601 secs, and comparison 5.85808 sec, and warnIfPerfScore > 1.3, and perfScore=0.375493]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.77008 secs, and comparison 4.06696 sec, and warnIfPerfScore > 0.23, and perfScore=0.416267]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.10043 secs, and comparison 6.52122 sec, and warnIfPerfScore > 1.3, and perfScore=1.06898]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 36.4117 secs, and comparison 13.9791 sec, and warnIfPerfScore > 1.2, and perfScore=0.383917]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.013
	DETAILS:         	[baseline test 175.733 secs, and comparison 2.32441 sec, and warnIfPerfScore > 0.33, and perfScore=0.0132269]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 32.1168 secs, and comparison 48.1654 sec, and warnIfPerfScore > 6, and perfScore=1.49969]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 72.1405 secs, and comparison 4.46834 sec, and warnIfPerfScore > 0.5, and perfScore=0.0619395]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 29.2208 secs, and comparison 43.0038 sec, and warnIfPerfScore > 4.4, and perfScore=1.47168]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 100.063 secs, and comparison 4.91134 sec, and warnIfPerfScore > 0.6, and perfScore=0.0490824]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.06462 secs, and comparison 21.1654 sec, and warnIfPerfScore > 1.5, and perfScore=2.33495]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 13.5643 secs, and comparison 3.99374 sec, and warnIfPerfScore > 0.55, and perfScore=0.294429]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 2.01497 sec, and warnIfPerfScore > 0.25, and perfScore=0.134331]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.49751 sec, and warnIfPerfScore > 0.5, and perfScore=0.299834]
	                 	Test_Optional_ is FASTER

[[[Tests took: 24 minutes, 5 seconds]]]

Succeeded
