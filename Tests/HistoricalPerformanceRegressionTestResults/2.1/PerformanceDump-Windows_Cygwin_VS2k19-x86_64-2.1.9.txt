Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 12 3:3:56 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 45.3564 secs, and comparison 16.1647 sec, and warnIfPerfScore > 0.65, and perfScore=0.356393]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 44.1034 secs, and comparison 14.2701 sec, and warnIfPerfScore > 0.5, and perfScore=0.323559]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 28.8883 secs, and comparison 22.3014 sec, and warnIfPerfScore > 1.05, and perfScore=0.771986]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 22.5937 secs, and comparison 22.365 sec, and warnIfPerfScore > 1.15, and perfScore=0.989879]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 34.9517 secs, and comparison 3.75838 sec, and warnIfPerfScore > 0.48, and perfScore=0.107531]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 34.992 secs, and comparison 4.05663 sec, and warnIfPerfScore > 0.57, and perfScore=0.11593]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.2368 secs, and comparison 36.9831 sec, and warnIfPerfScore > 2.9, and perfScore=1.59158]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 21.7693 secs, and comparison 40.4623 sec, and warnIfPerfScore > 2.9, and perfScore=1.85869]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 18.3811 secs, and comparison 287.173 sec, and warnIfPerfScore > 24, and perfScore=15.6233]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 21.6247 secs, and comparison 16.6422 sec, and warnIfPerfScore > 1.7, and perfScore=0.769593]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 49.5471 secs, and comparison 49.3771 sec, and warnIfPerfScore > 1.5, and perfScore=0.99657]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 17.5913 secs, and comparison 17.251 sec, and warnIfPerfScore > 2.1, and perfScore=0.980656]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 40.3211 secs, and comparison 8.93371 sec, and warnIfPerfScore > 1.6, and perfScore=0.221564]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.045
	DETAILS:         	[baseline test 42.2538 secs, and comparison 1.88531 sec, and warnIfPerfScore > 0.23, and perfScore=0.0446186]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.3886 secs, and comparison 21.3848 sec, and warnIfPerfScore > 1.3, and perfScore=1.72616]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.4491 secs, and comparison 19.8355 sec, and warnIfPerfScore > 1.2, and perfScore=1.37278]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 21.1243 secs, and comparison 5.32576 sec, and warnIfPerfScore > 0.33, and perfScore=0.252115]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 14.1227 secs, and comparison 54.5615 sec, and warnIfPerfScore > 6, and perfScore=3.8634]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.8707 secs, and comparison 19.8792 sec, and warnIfPerfScore > 0.8, and perfScore=1.43318]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 13.2541 secs, and comparison 43.1206 sec, and warnIfPerfScore > 1.4, and perfScore=3.25337]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 20.537 secs, and comparison 4.92156 sec, and warnIfPerfScore > 0.65, and perfScore=0.239644]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 23.337 secs, and comparison 57.1331 sec, and warnIfPerfScore > 4.4, and perfScore=2.44818]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 20.4583 secs, and comparison 5.87818 sec, and warnIfPerfScore > 0.6, and perfScore=0.287325]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 20.3078 secs, and comparison 5.17238 sec, and warnIfPerfScore > 0.6, and perfScore=0.254699]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.889 secs, and comparison 5.33841 sec, and warnIfPerfScore > 0.6, and perfScore=0.268411]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 20.082 secs, and comparison 12.9733 sec, and warnIfPerfScore > 1.3, and perfScore=0.646019]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 27.4281 secs, and comparison 20.6895 sec, and warnIfPerfScore > 1.3, and perfScore=0.754318]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 99.3028 secs, and comparison 11.7627 sec, and warnIfPerfScore > 0.3, and perfScore=0.118453]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.9949 secs, and comparison 20.7362 sec, and warnIfPerfScore > 1.5, and perfScore=1.15234]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.0346 secs, and comparison 5.51976 sec, and warnIfPerfScore > 0.55, and perfScore=0.367139]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.6602 sec, and warnIfPerfScore > 0.1, and perfScore=0.11068]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.76561 sec, and warnIfPerfScore > 0.5, and perfScore=0.25104]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.5945 secs, and comparison 19.3715 sec, and warnIfPerfScore > 2, and perfScore=1.04178]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.9845 secs, and comparison 29.012 sec, and warnIfPerfScore > 3.6, and perfScore=1.31966]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 24 seconds]]]

Succeeded
