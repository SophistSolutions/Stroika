Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 15 20:7:13 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.11479 secs, and comparison 4.36239 sec, and warnIfPerfScore > 0.65, and perfScore=0.613144]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.11731 secs, and comparison 2.84457 sec, and warnIfPerfScore > 0.5, and perfScore=0.399669]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.55317 secs, and comparison 7.51652 sec, and warnIfPerfScore > 1.05, and perfScore=0.878799]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.83248 secs, and comparison 7.52124 sec, and warnIfPerfScore > 1.15, and perfScore=1.10081]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.1358 secs, and comparison 2.27433 sec, and warnIfPerfScore > 0.48, and perfScore=0.0666261]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 32.2972 secs, and comparison 2.77864 sec, and warnIfPerfScore > 0.57, and perfScore=0.0860334]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.96371 secs, and comparison 20.9746 sec, and warnIfPerfScore > 2.9, and perfScore=2.63377]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 8.14642 secs, and comparison 21.7707 sec, and warnIfPerfScore > 2.9, and perfScore=2.67243]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 7.55276 secs, and comparison 148.176 sec, and warnIfPerfScore > 24, and perfScore=19.6188]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.93653 secs, and comparison 10.9756 sec, and warnIfPerfScore > 1.7, and perfScore=1.5823]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.71796 secs, and comparison 7.48036 sec, and warnIfPerfScore > 1.5, and perfScore=0.969215]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.35888 secs, and comparison 12.8093 sec, and warnIfPerfScore > 2.1, and perfScore=2.01439]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 8.61848 secs, and comparison 6.59043 sec, and warnIfPerfScore > 1.6, and perfScore=0.764686]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 8.9371 secs, and comparison 1.22256 sec, and warnIfPerfScore > 0.23, and perfScore=0.136795]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.7172 secs, and comparison 12.9205 sec, and warnIfPerfScore > 1.3, and perfScore=1.01599]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.80211 secs, and comparison 5.42145 sec, and warnIfPerfScore > 1.2, and perfScore=0.55309]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.2249 secs, and comparison 2.10634 sec, and warnIfPerfScore > 0.33, and perfScore=0.228332]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.45604 secs, and comparison 39.6798 sec, and warnIfPerfScore > 6, and perfScore=4.19623]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.44271 secs, and comparison 5.20015 sec, and warnIfPerfScore > 0.8, and perfScore=0.550705]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.3773 secs, and comparison 8.98184 sec, and warnIfPerfScore > 1.4, and perfScore=0.957827]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.13577 secs, and comparison 3.55965 sec, and warnIfPerfScore > 0.65, and perfScore=0.389639]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 9.86706 secs, and comparison 37.1766 sec, and warnIfPerfScore > 4.4, and perfScore=3.76775]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.06064 secs, and comparison 3.56395 sec, and warnIfPerfScore > 0.6, and perfScore=0.393344]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.02694 secs, and comparison 3.56301 sec, and warnIfPerfScore > 0.6, and perfScore=0.394709]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.10146 secs, and comparison 3.56894 sec, and warnIfPerfScore > 0.6, and perfScore=0.392128]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.12892 secs, and comparison 4.95638 sec, and warnIfPerfScore > 1.3, and perfScore=0.542932]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.62072 secs, and comparison 8.7545 sec, and warnIfPerfScore > 1.3, and perfScore=0.909963]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 44.2691 secs, and comparison 5.70393 sec, and warnIfPerfScore > 0.3, and perfScore=0.128847]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.85869 secs, and comparison 11.917 sec, and warnIfPerfScore > 1.5, and perfScore=1.51641]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.51641}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.09436 secs, and comparison 2.9288 sec, and warnIfPerfScore > 0.55, and perfScore=0.412835]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.775834 sec, and warnIfPerfScore > 0.1, and perfScore=0.0517223]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.38055 sec, and warnIfPerfScore > 0.5, and perfScore=0.22537]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.96951 secs, and comparison 13.0942 sec, and warnIfPerfScore > 2, and perfScore=1.64304]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.2326 secs, and comparison 28.7433 sec, and warnIfPerfScore > 3.6, and perfScore=3.11324]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 42 seconds]]]

Succeeded
