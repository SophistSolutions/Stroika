Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr  1 6:38:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 14.615 secs, and comparison 5.64117 sec, and warnIfPerfScore > 0.65, and perfScore=0.385984]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.6549 secs, and comparison 3.57407 sec, and warnIfPerfScore > 0.5, and perfScore=0.282425]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 12.8611 secs, and comparison 10.7681 sec, and warnIfPerfScore > 1.05, and perfScore=0.837262]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.94571 secs, and comparison 10.9665 sec, and warnIfPerfScore > 1.15, and perfScore=1.10264]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.7859 secs, and comparison 3.6051 sec, and warnIfPerfScore > 0.48, and perfScore=0.281959]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.9424 secs, and comparison 4.62128 sec, and warnIfPerfScore > 0.57, and perfScore=0.357065]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 14.6795 secs, and comparison 32.8152 sec, and warnIfPerfScore > 2.9, and perfScore=2.23543]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.451 secs, and comparison 32.7851 sec, and warnIfPerfScore > 2.9, and perfScore=2.26872]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.3835 secs, and comparison 182.272 sec, and warnIfPerfScore > 24, and perfScore=12.6723]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.3558 secs, and comparison 16.3317 sec, and warnIfPerfScore > 1.7, and perfScore=1.13764]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.4626 secs, and comparison 14.6384 sec, and warnIfPerfScore > 1.5, and perfScore=1.01216]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.0237 secs, and comparison 19.2751 sec, and warnIfPerfScore > 2.1, and perfScore=1.74851]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 15.7176 secs, and comparison 12.1402 sec, and warnIfPerfScore > 1.6, and perfScore=0.772391]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 17.6049 secs, and comparison 1.76253 sec, and warnIfPerfScore > 0.23, and perfScore=0.100116]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 17.376 secs, and comparison 16.2734 sec, and warnIfPerfScore > 1.3, and perfScore=0.936545]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 12.055 secs, and comparison 9.25066 sec, and warnIfPerfScore > 1.2, and perfScore=0.767374]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.1616 secs, and comparison 2.94095 sec, and warnIfPerfScore > 0.33, and perfScore=0.263489]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 11.8132 secs, and comparison 53.8688 sec, and warnIfPerfScore > 6, and perfScore=4.56007]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 11.7168 secs, and comparison 8.79782 sec, and warnIfPerfScore > 0.8, and perfScore=0.750873]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.7441 secs, and comparison 18.595 sec, and warnIfPerfScore > 1.4, and perfScore=1.58335]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.58335}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.4768 secs, and comparison 5.13352 sec, and warnIfPerfScore > 0.65, and perfScore=0.447296]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 13.4058 secs, and comparison 48.9553 sec, and warnIfPerfScore > 4.4, and perfScore=3.6518]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.0925 secs, and comparison 4.86459 sec, and warnIfPerfScore > 0.6, and perfScore=0.438548]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.5249 secs, and comparison 4.89091 sec, and warnIfPerfScore > 0.6, and perfScore=0.424379]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.2805 secs, and comparison 5.24766 sec, and warnIfPerfScore > 0.6, and perfScore=0.465196]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 11.1637 secs, and comparison 10.0724 sec, and warnIfPerfScore > 1.3, and perfScore=0.902244]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.3192 secs, and comparison 14.9646 sec, and warnIfPerfScore > 1.3, and perfScore=1.12354]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 77.0126 secs, and comparison 8.60214 sec, and warnIfPerfScore > 0.3, and perfScore=0.111698]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.5345 secs, and comparison 21.6218 sec, and warnIfPerfScore > 1.5, and perfScore=1.39186]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 17.4189 secs, and comparison 5.68281 sec, and warnIfPerfScore > 0.55, and perfScore=0.326245]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15 secs, and comparison 1.40381 sec, and warnIfPerfScore > 0.1, and perfScore=0.0935875]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.27639 sec, and warnIfPerfScore > 0.5, and perfScore=0.351759]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.6093 secs, and comparison 24.0016 sec, and warnIfPerfScore > 2, and perfScore=1.6429]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 15.4685 secs, and comparison 39.3098 sec, and warnIfPerfScore > 3.6, and perfScore=2.54128]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 13 seconds]]]

Succeeded
