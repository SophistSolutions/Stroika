Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jul 31 22:39:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.87957 secs, and comparison 4.6262 sec, and warnIfPerfScore > 0.65, and perfScore=0.786826]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.48447 secs, and comparison 3.1627 sec, and warnIfPerfScore > 0.5, and perfScore=0.576665]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.36657 secs, and comparison 7.00688 sec, and warnIfPerfScore > 1.05, and perfScore=1.10057]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.94108 secs, and comparison 7.0083 sec, and warnIfPerfScore > 1.15, and perfScore=1.17964]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 3.662 secs, and comparison 2.40215 sec, and warnIfPerfScore > 0.48, and perfScore=0.655965]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 4.4282 secs, and comparison 2.95173 sec, and warnIfPerfScore > 0.57, and perfScore=0.666576]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.2629 secs, and comparison 16.6253 sec, and warnIfPerfScore > 2.9, and perfScore=5.09526]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 4.01509 secs, and comparison 17.4256 sec, and warnIfPerfScore > 2.9, and perfScore=4.34002]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.3491 secs, and comparison 57.5921 sec, and warnIfPerfScore > 24, and perfScore=10.7667]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.83209 secs, and comparison 10.0327 sec, and warnIfPerfScore > 1.7, and perfScore=2.07627]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 6.15697 secs, and comparison 5.57744 sec, and warnIfPerfScore > 1.5, and perfScore=0.905875]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 2.7059 secs, and comparison 12.307 sec, and warnIfPerfScore > 2.1, and perfScore=4.54823]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.2082 secs, and comparison 3.45359 sec, and warnIfPerfScore > 1.6, and perfScore=0.820682]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 4.43175 secs, and comparison 1.74745 sec, and warnIfPerfScore > 0.23, and perfScore=0.394302]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.0269 secs, and comparison 4.93855 sec, and warnIfPerfScore > 1.3, and perfScore=1.22639]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.01852 secs, and comparison 7.4325 sec, and warnIfPerfScore > 1.2, and perfScore=2.4623]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 17.4651 secs, and comparison 1.79764 sec, and warnIfPerfScore > 0.33, and perfScore=0.102927]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.93757 secs, and comparison 41.9951 sec, and warnIfPerfScore > 6, and perfScore=14.2959]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.97916 secs, and comparison 7.13349 sec, and warnIfPerfScore > 0.8, and perfScore=2.39447]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 3.00872 secs, and comparison 8.64245 sec, and warnIfPerfScore > 1.4, and perfScore=2.87246]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.934 secs, and comparison 3.74307 sec, and warnIfPerfScore > 0.65, and perfScore=0.221039]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 4.36249 secs, and comparison 38.3057 sec, and warnIfPerfScore > 4.4, and perfScore=8.78069]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.7457 secs, and comparison 3.77003 sec, and warnIfPerfScore > 0.6, and perfScore=0.320971]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.8133 secs, and comparison 3.68918 sec, and warnIfPerfScore > 0.6, and perfScore=0.312291]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.5558 secs, and comparison 3.65839 sec, and warnIfPerfScore > 0.6, and perfScore=0.316585]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.149 secs, and comparison 4.33812 sec, and warnIfPerfScore > 1.3, and perfScore=0.357077]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 18.6966 secs, and comparison 10.4629 sec, and warnIfPerfScore > 1.3, and perfScore=0.559615]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 19.3175 secs, and comparison 7.17617 sec, and warnIfPerfScore > 0.3, and perfScore=0.371484]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.08456 secs, and comparison 14.5141 sec, and warnIfPerfScore > 1.5, and perfScore=2.0487]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.38454 secs, and comparison 2.80286 sec, and warnIfPerfScore > 0.55, and perfScore=0.439007]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.849359 sec, and warnIfPerfScore > 0.1, and perfScore=0.0566239]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.13197 sec, and warnIfPerfScore > 0.5, and perfScore=0.208798]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 8 seconds]]]

Succeeded
