Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Aug  9 19:14:54 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 12.9078 secs, and comparison 9.4589 sec, and warnIfPerfScore > 0.62, and perfScore=0.732808]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 14.4253 secs, and comparison 7.05907 sec, and warnIfPerfScore > 0.5, and perfScore=0.489353]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.1369 secs, and comparison 16.3471 sec, and warnIfPerfScore > 1.05, and perfScore=1.01303]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 10.9685 secs, and comparison 8.75527 sec, and warnIfPerfScore > 0.48, and perfScore=0.798219]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 11.7585 secs, and comparison 9.73729 sec, and warnIfPerfScore > 0.57, and perfScore=0.828105]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 7.22426 secs, and comparison 45.2705 sec, and warnIfPerfScore > 2.9, and perfScore=6.26645]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 10.2351 secs, and comparison 49.3707 sec, and warnIfPerfScore > 2.9, and perfScore=4.82368]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 12.017 secs, and comparison 179.787 sec, and warnIfPerfScore > 9.7, and perfScore=14.9611]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.1698 secs, and comparison 25.6558 sec, and warnIfPerfScore > 1.6, and perfScore=1.94809]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.7473 secs, and comparison 13.4607 sec, and warnIfPerfScore > 1.5, and perfScore=0.979154]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 5.71185 secs, and comparison 25.3688 sec, and warnIfPerfScore > 2.1, and perfScore=4.44144]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 14.178 secs, and comparison 11.877 sec, and warnIfPerfScore > 1.3, and perfScore=0.837703]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.8652 secs, and comparison 4.83202 sec, and warnIfPerfScore > 0.23, and perfScore=0.325057]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.9649 secs, and comparison 13.5354 sec, and warnIfPerfScore > 1.3, and perfScore=1.23444]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 10.6811 secs, and comparison 19.1202 sec, and warnIfPerfScore > 1.2, and perfScore=1.7901]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 45.7686 secs, and comparison 4.57883 sec, and warnIfPerfScore > 0.33, and perfScore=0.100043]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 9.54387 secs, and comparison 91.2693 sec, and warnIfPerfScore > 6, and perfScore=9.56313]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 29.6337 secs, and comparison 7.60533 sec, and warnIfPerfScore > 0.5, and perfScore=0.256644]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 14.9028 secs, and comparison 80.4564 sec, and warnIfPerfScore > 4.4, and perfScore=5.39875]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 17.6358 secs, and comparison 4.25102 sec, and warnIfPerfScore > 0.6, and perfScore=0.241045]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.83945 secs, and comparison 14.5032 sec, and warnIfPerfScore > 1.5, and perfScore=1.64074]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.22421 secs, and comparison 2.37263 sec, and warnIfPerfScore > 0.55, and perfScore=0.257218]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 15 secs, and comparison 1.1903 sec, and warnIfPerfScore > 0.25, and perfScore=0.0793531]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.2356 sec, and warnIfPerfScore > 0.5, and perfScore=0.282374]
	                 	Test_Optional_ is FASTER

[[[Tests took: 15 minutes, 56 seconds]]]

Succeeded
