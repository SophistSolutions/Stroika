Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jun 24 21:5:16 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.09489 secs, and comparison 4.32866 sec, and warnIfPerfScore > 0.65, and perfScore=0.61011]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.04255 secs, and comparison 2.77024 sec, and warnIfPerfScore > 0.5, and perfScore=0.393358]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.89358 secs, and comparison 7.48492 sec, and warnIfPerfScore > 1.05, and perfScore=0.84161]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.82625 secs, and comparison 7.45364 sec, and warnIfPerfScore > 1.15, and perfScore=1.09191]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.36826 secs, and comparison 2.32634 sec, and warnIfPerfScore > 0.48, and perfScore=0.277995]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.04792 secs, and comparison 2.70784 sec, and warnIfPerfScore > 0.57, and perfScore=0.336465]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.53031 secs, and comparison 20.7961 sec, and warnIfPerfScore > 2.9, and perfScore=2.43791]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.56422 secs, and comparison 21.1939 sec, and warnIfPerfScore > 2.9, and perfScore=2.47471]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.39869 secs, and comparison 159.349 sec, and warnIfPerfScore > 24, and perfScore=18.9731]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.71055 secs, and comparison 11.0095 sec, and warnIfPerfScore > 1.7, and perfScore=1.42785]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.93748 secs, and comparison 7.96963 sec, and warnIfPerfScore > 1.5, and perfScore=1.00405]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.63176 secs, and comparison 12.7468 sec, and warnIfPerfScore > 2.1, and perfScore=1.67023]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.93587 secs, and comparison 7.98307 sec, and warnIfPerfScore > 1.6, and perfScore=0.893374]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 9.66764 secs, and comparison 1.41464 sec, and warnIfPerfScore > 0.23, and perfScore=0.146327]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.1099 secs, and comparison 13.7907 sec, and warnIfPerfScore > 1.3, and perfScore=1.05193]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.4542 secs, and comparison 5.60878 sec, and warnIfPerfScore > 1.2, and perfScore=0.536511]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.3926 secs, and comparison 1.58021 sec, and warnIfPerfScore > 0.33, and perfScore=0.247193]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.78016 secs, and comparison 40.9398 sec, and warnIfPerfScore > 6, and perfScore=4.186]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.75398 secs, and comparison 5.46838 sec, and warnIfPerfScore > 0.8, and perfScore=0.56063]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.85277 secs, and comparison 9.52789 sec, and warnIfPerfScore > 1.4, and perfScore=0.967026]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.40697 secs, and comparison 3.56407 sec, and warnIfPerfScore > 0.65, and perfScore=0.55628]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.4305 secs, and comparison 38.0259 sec, and warnIfPerfScore > 4.4, and perfScore=3.64565]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.70179 secs, and comparison 3.51635 sec, and warnIfPerfScore > 0.6, and perfScore=0.524689]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.57377 secs, and comparison 3.51622 sec, and warnIfPerfScore > 0.6, and perfScore=0.534886]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.55258 secs, and comparison 3.5151 sec, and warnIfPerfScore > 0.6, and perfScore=0.536446]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.69327 secs, and comparison 5.02554 sec, and warnIfPerfScore > 1.3, and perfScore=0.750834]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.09759 secs, and comparison 9.17318 sec, and warnIfPerfScore > 1.3, and perfScore=1.29244]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.6525 secs, and comparison 6.10994 sec, and warnIfPerfScore > 0.3, and perfScore=0.128219]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.89419 secs, and comparison 12.3457 sec, and warnIfPerfScore > 1.5, and perfScore=1.38806]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.66992 secs, and comparison 2.95215 sec, and warnIfPerfScore > 0.55, and perfScore=0.384899]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.832152 sec, and warnIfPerfScore > 0.1, and perfScore=0.0554768]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.08381 sec, and warnIfPerfScore > 0.5, and perfScore=0.205587]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.60176 secs, and comparison 14.0648 sec, and warnIfPerfScore > 2, and perfScore=1.63511]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.33372 secs, and comparison 30.1218 sec, and warnIfPerfScore > 3.6, and perfScore=3.22721]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 11 seconds]]]

Succeeded
