Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  8 18:35:10 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.66566 secs, and comparison 4.37663 sec, and warnIfPerfScore > 0.65, and perfScore=0.772483]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.72653 secs, and comparison 2.67772 sec, and warnIfPerfScore > 0.5, and perfScore=0.467599]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.99836 secs, and comparison 7.21927 sec, and warnIfPerfScore > 1.05, and perfScore=0.902593]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.26709 secs, and comparison 7.2426 sec, and warnIfPerfScore > 1.15, and perfScore=0.996631]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.03508 secs, and comparison 2.55876 sec, and warnIfPerfScore > 0.48, and perfScore=0.318449]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.81189 secs, and comparison 3.27378 sec, and warnIfPerfScore > 0.57, and perfScore=0.419076]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.16937 secs, and comparison 19.1689 sec, and warnIfPerfScore > 2.9, and perfScore=3.1071]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.65987 secs, and comparison 19.2147 sec, and warnIfPerfScore > 2.9, and perfScore=2.88514]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 5.65744 secs, and comparison 145.855 sec, and warnIfPerfScore > 24, and perfScore=25.781]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.31106 secs, and comparison 11.5733 sec, and warnIfPerfScore > 1.7, and perfScore=1.83381]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.94282 secs, and comparison 5.92429 sec, and warnIfPerfScore > 1.5, and perfScore=0.996882]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.39326 secs, and comparison 13.9076 sec, and warnIfPerfScore > 2.1, and perfScore=2.57871]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.44394 secs, and comparison 4.49386 sec, and warnIfPerfScore > 1.6, and perfScore=0.603693]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 7.68168 secs, and comparison 0.782966 sec, and warnIfPerfScore > 0.23, and perfScore=0.101926]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.1154 secs, and comparison 13.8582 sec, and warnIfPerfScore > 1.3, and perfScore=1.05663]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 9.14353 secs, and comparison 5.86892 sec, and warnIfPerfScore > 1.2, and perfScore=0.641866]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.42529 secs, and comparison 2.1555 sec, and warnIfPerfScore > 0.33, and perfScore=0.228693]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.67833 secs, and comparison 42.8376 sec, and warnIfPerfScore > 6, and perfScore=4.93616]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.91046 secs, and comparison 5.53057 sec, and warnIfPerfScore > 0.8, and perfScore=0.620683]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.85484 secs, and comparison 8.40737 sec, and warnIfPerfScore > 1.4, and perfScore=0.949466]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.15321 secs, and comparison 3.86614 sec, and warnIfPerfScore > 0.65, and perfScore=0.422381]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.62289 secs, and comparison 41.0245 sec, and warnIfPerfScore > 4.4, and perfScore=4.26322]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.96746 secs, and comparison 3.72896 sec, and warnIfPerfScore > 0.6, and perfScore=0.415833]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.96664 secs, and comparison 3.74652 sec, and warnIfPerfScore > 0.6, and perfScore=0.417829]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.94104 secs, and comparison 3.79001 sec, and warnIfPerfScore > 0.6, and perfScore=0.423889]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 9.06244 secs, and comparison 5.94775 sec, and warnIfPerfScore > 1.3, and perfScore=0.656308]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.76255 secs, and comparison 10.2666 sec, and warnIfPerfScore > 1.3, and perfScore=1.05163]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 44.4148 secs, and comparison 5.45305 sec, and warnIfPerfScore > 0.3, and perfScore=0.122775]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.33957 secs, and comparison 10.5023 sec, and warnIfPerfScore > 1.5, and perfScore=1.65662]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.08169 secs, and comparison 3.2104 sec, and warnIfPerfScore > 0.55, and perfScore=0.453338]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.809883 sec, and warnIfPerfScore > 0.1, and perfScore=0.0539922]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.30822 sec, and warnIfPerfScore > 0.5, and perfScore=0.220548]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.17788 secs, and comparison 8.7757 sec, and warnIfPerfScore > 2, and perfScore=1.0731]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.91617 secs, and comparison 15.7031 sec, and warnIfPerfScore > 3.6, and perfScore=1.76119]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 18 seconds]]]

Succeeded
