Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 20:7:37 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.84891 secs, and comparison 4.0359 sec, and warnIfPerfScore > 0.65, and perfScore=0.589276]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.94481 secs, and comparison 2.60613 sec, and warnIfPerfScore > 0.5, and perfScore=0.375263]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.38069 secs, and comparison 7.04936 sec, and warnIfPerfScore > 1.05, and perfScore=0.841144]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.42409 secs, and comparison 7.32611 sec, and warnIfPerfScore > 1.15, and perfScore=1.14041]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 8.24844 secs, and comparison 2.09017 sec, and warnIfPerfScore > 0.48, and perfScore=0.253402]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.13568 secs, and comparison 2.52466 sec, and warnIfPerfScore > 0.57, and perfScore=0.310319]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 8.87044 secs, and comparison 19.7427 sec, and warnIfPerfScore > 2.9, and perfScore=2.22568]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 8.80194 secs, and comparison 20.4555 sec, and warnIfPerfScore > 2.9, and perfScore=2.32398]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 8.5075 secs, and comparison 138.699 sec, and warnIfPerfScore > 24, and perfScore=16.3032]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.62939 secs, and comparison 10.0687 sec, and warnIfPerfScore > 1.7, and perfScore=1.31973]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.04714 secs, and comparison 7.80093 sec, and warnIfPerfScore > 1.5, and perfScore=0.969404]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.28141 secs, and comparison 11.6385 sec, and warnIfPerfScore > 2.1, and perfScore=1.59838]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 9.11298 secs, and comparison 7.43845 sec, and warnIfPerfScore > 1.6, and perfScore=0.816247]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.57381 secs, and comparison 1.35947 sec, and warnIfPerfScore > 0.23, and perfScore=0.141999]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4302 secs, and comparison 12.5052 sec, and warnIfPerfScore > 1.3, and perfScore=1.00603]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.69632 secs, and comparison 5.34593 sec, and warnIfPerfScore > 1.2, and perfScore=0.551336]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.0664 secs, and comparison 1.53163 sec, and warnIfPerfScore > 0.33, and perfScore=0.252478]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.38343 secs, and comparison 37.3363 sec, and warnIfPerfScore > 6, and perfScore=3.97896]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.37985 secs, and comparison 5.23493 sec, and warnIfPerfScore > 0.8, and perfScore=0.558103]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.31935 secs, and comparison 9.51478 sec, and warnIfPerfScore > 1.4, and perfScore=1.02097]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.06773 secs, and comparison 3.24628 sec, and warnIfPerfScore > 0.65, and perfScore=0.535007]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.65066 secs, and comparison 34.6674 sec, and warnIfPerfScore > 4.4, and perfScore=3.59223]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.25987 secs, and comparison 3.22831 sec, and warnIfPerfScore > 0.6, and perfScore=0.515715]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.23484 secs, and comparison 3.23781 sec, and warnIfPerfScore > 0.6, and perfScore=0.519309]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 6.25567 secs, and comparison 3.23037 sec, and warnIfPerfScore > 0.6, and perfScore=0.516391]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 6.23426 secs, and comparison 4.76349 sec, and warnIfPerfScore > 1.3, and perfScore=0.764082]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.80561 secs, and comparison 8.37183 sec, and warnIfPerfScore > 1.3, and perfScore=1.23014]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 45.4231 secs, and comparison 5.61483 sec, and warnIfPerfScore > 0.3, and perfScore=0.123612]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.50298 secs, and comparison 11.6654 sec, and warnIfPerfScore > 1.5, and perfScore=1.37192]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.20584 secs, and comparison 3.21063 sec, and warnIfPerfScore > 0.55, and perfScore=0.445559]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.775448 sec, and warnIfPerfScore > 0.1, and perfScore=0.0516965]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.82446 sec, and warnIfPerfScore > 0.5, and perfScore=0.188297]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.19661 secs, and comparison 13.3655 sec, and warnIfPerfScore > 2, and perfScore=1.63062]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 9.09028 secs, and comparison 27.6847 sec, and warnIfPerfScore > 3.6, and perfScore=3.04553]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 16 seconds]]]

Succeeded
