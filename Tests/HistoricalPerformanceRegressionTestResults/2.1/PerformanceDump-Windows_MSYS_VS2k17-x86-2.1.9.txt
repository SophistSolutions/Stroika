Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 10 20:47:42 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 52.6666 secs, and comparison 6.61083 sec, and warnIfPerfScore > 0.65, and perfScore=0.125522]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 51.8667 secs, and comparison 6.05762 sec, and warnIfPerfScore > 0.5, and perfScore=0.116792]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 18.0575 secs, and comparison 12.4786 sec, and warnIfPerfScore > 1.05, and perfScore=0.691051]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 13.7968 secs, and comparison 12.9066 sec, and warnIfPerfScore > 1.15, and perfScore=0.935475]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 20.4814 secs, and comparison 3.57396 sec, and warnIfPerfScore > 0.48, and perfScore=0.174497]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.2195 secs, and comparison 4.032 sec, and warnIfPerfScore > 0.57, and perfScore=0.199411]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.6097 secs, and comparison 36.8268 sec, and warnIfPerfScore > 2.9, and perfScore=1.55982]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 23.395 secs, and comparison 39.4374 sec, and warnIfPerfScore > 2.9, and perfScore=1.68572]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 19.6073 secs, and comparison 209.695 sec, and warnIfPerfScore > 24, and perfScore=10.6947]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 23.2092 secs, and comparison 16.7537 sec, and warnIfPerfScore > 1.7, and perfScore=0.721856]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 42.8107 secs, and comparison 41.5623 sec, and warnIfPerfScore > 1.5, and perfScore=0.97084]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.0633 secs, and comparison 19.1322 sec, and warnIfPerfScore > 2.1, and perfScore=1.05917]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 37.5598 secs, and comparison 13.5933 sec, and warnIfPerfScore > 1.6, and perfScore=0.361912]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.068
	DETAILS:         	[baseline test 39.5973 secs, and comparison 2.67502 sec, and warnIfPerfScore > 0.23, and perfScore=0.0675557]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.2176 secs, and comparison 25.4967 sec, and warnIfPerfScore > 1.3, and perfScore=1.26112]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.7856 secs, and comparison 20.9103 sec, and warnIfPerfScore > 1.2, and perfScore=1.32464]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.32464}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.224 secs, and comparison 4.48647 sec, and warnIfPerfScore > 0.33, and perfScore=0.339268]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.339268}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 14.8661 secs, and comparison 55.1141 sec, and warnIfPerfScore > 6, and perfScore=3.70736]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.8507 secs, and comparison 19.4347 sec, and warnIfPerfScore > 0.8, and perfScore=1.30867]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.30867}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.9313 secs, and comparison 39.8716 sec, and warnIfPerfScore > 1.4, and perfScore=2.67033]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.67033}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.8827 secs, and comparison 5.00531 sec, and warnIfPerfScore > 0.65, and perfScore=0.360543]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 25.1196 secs, and comparison 62.6044 sec, and warnIfPerfScore > 4.4, and perfScore=2.49226]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.2452 secs, and comparison 5.91066 sec, and warnIfPerfScore > 0.6, and perfScore=0.446248]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 14.0064 secs, and comparison 6.0392 sec, and warnIfPerfScore > 0.6, and perfScore=0.431175]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 13.8015 secs, and comparison 6.41883 sec, and warnIfPerfScore > 0.6, and perfScore=0.465082]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.8806 secs, and comparison 14.3969 sec, and warnIfPerfScore > 1.3, and perfScore=1.03719]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 21.1364 secs, and comparison 22.6191 sec, and warnIfPerfScore > 1.3, and perfScore=1.07015]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 116.271 secs, and comparison 9.14396 sec, and warnIfPerfScore > 0.3, and perfScore=0.0786437]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 27.3192 secs, and comparison 32.2612 sec, and warnIfPerfScore > 1.5, and perfScore=1.1809]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 19.9256 secs, and comparison 6.74601 sec, and warnIfPerfScore > 0.55, and perfScore=0.33856]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.11167 sec, and warnIfPerfScore > 0.1, and perfScore=0.140778]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.140778}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.42346 sec, and warnIfPerfScore > 0.5, and perfScore=0.361564]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 20.5173 secs, and comparison 24.5641 sec, and warnIfPerfScore > 2, and perfScore=1.19724]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.7511 secs, and comparison 43.1044 sec, and warnIfPerfScore > 3.6, and perfScore=1.74152]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes, 47 seconds]]]

Succeeded
