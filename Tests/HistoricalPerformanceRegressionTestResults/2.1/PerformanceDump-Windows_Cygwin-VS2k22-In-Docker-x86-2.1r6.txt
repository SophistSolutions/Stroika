Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 4:51:35 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.31381 secs, and comparison 4.30383 sec, and warnIfPerfScore > 0.65, and perfScore=0.588453]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.30917 secs, and comparison 2.89792 sec, and warnIfPerfScore > 0.5, and perfScore=0.396477]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.95608 secs, and comparison 7.6807 sec, and warnIfPerfScore > 1.05, and perfScore=0.857597]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.95198 secs, and comparison 7.73054 sec, and warnIfPerfScore > 1.15, and perfScore=1.11199]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.75269 secs, and comparison 2.28141 sec, and warnIfPerfScore > 0.48, and perfScore=0.294273]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.16335 secs, and comparison 2.79409 sec, and warnIfPerfScore > 0.57, and perfScore=0.342272]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.33469 secs, and comparison 20.9224 sec, and warnIfPerfScore > 2.9, and perfScore=2.51028]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.5951 secs, and comparison 21.7709 sec, and warnIfPerfScore > 2.9, and perfScore=2.53294]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.81823 secs, and comparison 147.785 sec, and warnIfPerfScore > 24, and perfScore=18.9026]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.59026 secs, and comparison 10.9776 sec, and warnIfPerfScore > 1.7, and perfScore=1.44627]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.50811 secs, and comparison 8.31095 sec, and warnIfPerfScore > 1.5, and perfScore=0.976828]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.07114 secs, and comparison 12.6799 sec, and warnIfPerfScore > 2.1, and perfScore=1.79319]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.64289 secs, and comparison 6.70207 sec, and warnIfPerfScore > 1.6, and perfScore=0.695027]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.86582 secs, and comparison 1.33845 sec, and warnIfPerfScore > 0.23, and perfScore=0.135665]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.6412 secs, and comparison 12.832 sec, and warnIfPerfScore > 1.3, and perfScore=1.01509]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.0477 secs, and comparison 5.54217 sec, and warnIfPerfScore > 1.2, and perfScore=0.551588]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.2405 secs, and comparison 1.48432 sec, and warnIfPerfScore > 0.33, and perfScore=0.237852]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.66724 secs, and comparison 39.2187 sec, and warnIfPerfScore > 6, and perfScore=4.05687]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.56754 secs, and comparison 5.37275 sec, and warnIfPerfScore > 0.8, and perfScore=0.56156]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.64068 secs, and comparison 9.1022 sec, and warnIfPerfScore > 1.4, and perfScore=0.944145]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.19381 secs, and comparison 3.44527 sec, and warnIfPerfScore > 0.65, and perfScore=0.556244]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.9024 secs, and comparison 36.754 sec, and warnIfPerfScore > 4.4, and perfScore=3.71163]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.36754 secs, and comparison 3.43157 sec, and warnIfPerfScore > 0.6, and perfScore=0.538916]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.50135 secs, and comparison 3.44591 sec, and warnIfPerfScore > 0.6, and perfScore=0.530029]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.30963 secs, and comparison 3.40638 sec, and warnIfPerfScore > 0.6, and perfScore=0.53987]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.49343 secs, and comparison 4.90202 sec, and warnIfPerfScore > 1.3, and perfScore=0.75492]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.76461 secs, and comparison 8.1515 sec, and warnIfPerfScore > 1.3, and perfScore=1.20502]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 45.2698 secs, and comparison 5.93703 sec, and warnIfPerfScore > 0.3, and perfScore=0.131148]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.42976 secs, and comparison 12.0982 sec, and warnIfPerfScore > 1.5, and perfScore=1.43518]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 7.76301 secs, and comparison 2.8468 sec, and warnIfPerfScore > 0.55, and perfScore=0.366714]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.770206 sec, and warnIfPerfScore > 0.1, and perfScore=0.0513471]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.9606 sec, and warnIfPerfScore > 0.5, and perfScore=0.197373]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.11681 secs, and comparison 8.89937 sec, and warnIfPerfScore > 2, and perfScore=1.09641]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.37425 secs, and comparison 29.1091 sec, and warnIfPerfScore > 3.6, and perfScore=3.10522]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 38 seconds]]]

Succeeded
