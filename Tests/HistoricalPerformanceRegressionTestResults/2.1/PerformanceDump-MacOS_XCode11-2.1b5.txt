Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 10 23:25:50 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.65991 secs, and comparison 6.80368 sec, and warnIfPerfScore > 0.62, and perfScore=0.704321]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.39879 secs, and comparison 4.55958 sec, and warnIfPerfScore > 0.5, and perfScore=0.485124]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 19.2269 secs, and comparison 13.4504 sec, and warnIfPerfScore > 1.05, and perfScore=0.699562]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 41.8956 secs, and comparison 6.682 sec, and warnIfPerfScore > 0.48, and perfScore=0.159492]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 40.9623 secs, and comparison 6.30558 sec, and warnIfPerfScore > 0.57, and perfScore=0.153936]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 28.8319 secs, and comparison 70.5548 sec, and warnIfPerfScore > 2.9, and perfScore=2.44711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 31.0322 secs, and comparison 74.7925 sec, and warnIfPerfScore > 2.9, and perfScore=2.41016]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 23.5219 secs, and comparison 218.165 sec, and warnIfPerfScore > 9.7, and perfScore=9.275]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 28.2972 secs, and comparison 36.2232 sec, and warnIfPerfScore > 1.6, and perfScore=1.2801]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.8867 secs, and comparison 7.17409 sec, and warnIfPerfScore > 1.5, and perfScore=0.658979]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 18.5259 secs, and comparison 41.9983 sec, and warnIfPerfScore > 2.1, and perfScore=2.267]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 14.2576 secs, and comparison 7.80385 sec, and warnIfPerfScore > 1.3, and perfScore=0.547347]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15.9449 secs, and comparison 2.32759 sec, and warnIfPerfScore > 0.23, and perfScore=0.145977]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 24.3909 secs, and comparison 24.8711 sec, and warnIfPerfScore > 1.3, and perfScore=1.01968]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.1193 secs, and comparison 15.5518 sec, and warnIfPerfScore > 1.2, and perfScore=1.10146]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15.1553 secs, and comparison 2.91294 sec, and warnIfPerfScore > 0.33, and perfScore=0.192206]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 14.0864 secs, and comparison 60.6202 sec, and warnIfPerfScore > 6, and perfScore=4.30346]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.0403 secs, and comparison 5.3505 sec, and warnIfPerfScore > 0.5, and perfScore=0.333565]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.9326 secs, and comparison 54.5339 sec, and warnIfPerfScore > 4.4, and perfScore=3.22065]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 16.0583 secs, and comparison 5.47527 sec, and warnIfPerfScore > 0.6, and perfScore=0.340963]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 40.4126 secs, and comparison 53.5908 sec, and warnIfPerfScore > 1.5, and perfScore=1.32609]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.65571 secs, and comparison 6.79593 sec, and warnIfPerfScore > 0.55, and perfScore=0.785139]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 15 secs, and comparison 7.34494 sec, and warnIfPerfScore > 0.25, and perfScore=0.489663]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.0508 sec, and warnIfPerfScore > 0.5, and perfScore=0.270053]
	                 	Test_Optional_ is FASTER

[[[Tests took: 20 minutes, 10 seconds]]]

Succeeded
