Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 :44:29 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.31521 secs, and comparison 4.36203 sec, and warnIfPerfScore > 0.65, and perfScore=0.820669]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 5.86665 secs, and comparison 2.56157 sec, and warnIfPerfScore > 0.5, and perfScore=0.436633]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.69788 secs, and comparison 7.68456 sec, and warnIfPerfScore > 1.05, and perfScore=0.883498]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.97465 secs, and comparison 7.7274 sec, and warnIfPerfScore > 1.15, and perfScore=1.10793]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.64865 secs, and comparison 2.40516 sec, and warnIfPerfScore > 0.48, and perfScore=0.249275]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 9.44628 secs, and comparison 2.90205 sec, and warnIfPerfScore > 0.57, and perfScore=0.307216]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.8199 secs, and comparison 20.9231 sec, and warnIfPerfScore > 2.9, and perfScore=2.67563]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.36618 secs, and comparison 21.2136 sec, and warnIfPerfScore > 2.9, and perfScore=2.53564]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 6.90018 secs, and comparison 140.014 sec, and warnIfPerfScore > 24, and perfScore=20.2913]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.52263 secs, and comparison 10.6686 sec, and warnIfPerfScore > 1.7, and perfScore=1.63563]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 6.72426 secs, and comparison 6.21843 sec, and warnIfPerfScore > 1.5, and perfScore=0.924776]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.30356 secs, and comparison 12.7958 sec, and warnIfPerfScore > 2.1, and perfScore=2.02993]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.20665 secs, and comparison 4.55614 sec, and warnIfPerfScore > 1.6, and perfScore=0.555177]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 8.5833 secs, and comparison 0.832858 sec, and warnIfPerfScore > 0.23, and perfScore=0.0970324]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.795 secs, and comparison 13.3355 sec, and warnIfPerfScore > 1.3, and perfScore=1.04224]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 9.56321 secs, and comparison 6.18332 sec, and warnIfPerfScore > 1.2, and perfScore=0.646574]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 10.2578 secs, and comparison 2.34758 sec, and warnIfPerfScore > 0.33, and perfScore=0.228859]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.18146 secs, and comparison 41.4 sec, and warnIfPerfScore > 6, and perfScore=4.50908]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 9.10649 secs, and comparison 5.98888 sec, and warnIfPerfScore > 0.8, and perfScore=0.65765]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.16599 secs, and comparison 8.85018 sec, and warnIfPerfScore > 1.4, and perfScore=0.965545]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.5005 secs, and comparison 3.74833 sec, and warnIfPerfScore > 0.65, and perfScore=0.356966]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.72683 secs, and comparison 39.0675 sec, and warnIfPerfScore > 4.4, and perfScore=4.01647]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.1991 secs, and comparison 3.60653 sec, and warnIfPerfScore > 0.6, and perfScore=0.353612]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.1214 secs, and comparison 3.6338 sec, and warnIfPerfScore > 0.6, and perfScore=0.359023]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.1856 secs, and comparison 3.59648 sec, and warnIfPerfScore > 0.6, and perfScore=0.353094]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.0872 secs, and comparison 6.24663 sec, and warnIfPerfScore > 1.3, and perfScore=0.619261]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.0637 secs, and comparison 9.81287 sec, and warnIfPerfScore > 1.3, and perfScore=0.886943]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 45.272 secs, and comparison 7.55886 sec, and warnIfPerfScore > 0.3, and perfScore=0.166965]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.14158 secs, and comparison 11.0091 sec, and warnIfPerfScore > 1.5, and perfScore=1.54155]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.8972 secs, and comparison 3.38713 sec, and warnIfPerfScore > 0.55, and perfScore=0.428903]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.047
	DETAILS:         	[baseline test 15 secs, and comparison 0.703895 sec, and warnIfPerfScore > 0.1, and perfScore=0.0469263]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.09143 sec, and warnIfPerfScore > 0.5, and perfScore=0.206095]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.94189 secs, and comparison 14.0416 sec, and warnIfPerfScore > 2, and perfScore=1.76804]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.40731 secs, and comparison 16.7641 sec, and warnIfPerfScore > 3.6, and perfScore=1.78203]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 47 seconds]]]

Succeeded
