Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jan 10 4:44:37 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.17 secs, and comparison 4.60907 sec, and warnIfPerfScore > 0.62, and perfScore=0.453203]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.155 secs, and comparison 2.86016 sec, and warnIfPerfScore > 0.5, and perfScore=0.28165]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.1963 secs, and comparison 8.76563 sec, and warnIfPerfScore > 1.05, and perfScore=0.85969]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.1348 secs, and comparison 4.2208 sec, and warnIfPerfScore > 0.48, and perfScore=0.416466]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.2994 secs, and comparison 4.34439 sec, and warnIfPerfScore > 0.55, and perfScore=0.421809]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.6609 secs, and comparison 24.5353 sec, and warnIfPerfScore > 2.9, and perfScore=2.10407]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.1794 secs, and comparison 26.2172 sec, and warnIfPerfScore > 2.9, and perfScore=2.15258]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 12.1387 secs, and comparison 87.079 sec, and warnIfPerfScore > 9.7, and perfScore=7.17367]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1776 secs, and comparison 11.551 sec, and warnIfPerfScore > 1.6, and perfScore=1.03341]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4035 secs, and comparison 12.5102 sec, and warnIfPerfScore > 1.5, and perfScore=1.0086]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.7743 secs, and comparison 12.1918 sec, and warnIfPerfScore > 2.1, and perfScore=1.38949]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 12.0108 secs, and comparison 9.75501 sec, and warnIfPerfScore > 1.3, and perfScore=0.812186]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 12.5724 secs, and comparison 1.419 sec, and warnIfPerfScore > 0.18, and perfScore=0.112867]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4923 secs, and comparison 12.9257 sec, and warnIfPerfScore > 1.3, and perfScore=1.03469]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.93787 secs, and comparison 7.64815 sec, and warnIfPerfScore > 1.2, and perfScore=0.769597]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.50162 secs, and comparison 1.90903 sec, and warnIfPerfScore > 0.33, and perfScore=0.200916]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 9.72954 secs, and comparison 44.9312 sec, and warnIfPerfScore > 6, and perfScore=4.61802]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.17104 secs, and comparison 4.08748 sec, and warnIfPerfScore > 0.5, and perfScore=0.445694]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.5948 secs, and comparison 40.1616 sec, and warnIfPerfScore > 4.4, and perfScore=3.79069]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.14745 secs, and comparison 4.33239 sec, and warnIfPerfScore > 0.6, and perfScore=0.473618]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.3372 secs, and comparison 18.3016 sec, and warnIfPerfScore > 1.5, and perfScore=1.27651]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.2003 secs, and comparison 4.45059 sec, and warnIfPerfScore > 0.55, and perfScore=0.313415]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 15 secs, and comparison 1.49015 sec, and warnIfPerfScore > 0.25, and perfScore=0.0993435]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 5.01573 sec, and warnIfPerfScore > 0.5, and perfScore=0.334382]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.6891 secs, and comparison 19.8731 sec, and warnIfPerfScore > 1.9, and perfScore=1.70014]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.829 secs, and comparison 31.6954 sec, and warnIfPerfScore > 3.1, and perfScore=2.67947]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 15 seconds]]]

Succeeded
