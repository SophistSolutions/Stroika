Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Apr  5 11:24:15 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.82577 secs, and comparison 5.52078 sec, and warnIfPerfScore > 0.65, and perfScore=0.947647]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.90886 secs, and comparison 2.6838 sec, and warnIfPerfScore > 0.5, and perfScore=0.454198]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.19934 secs, and comparison 7.93818 sec, and warnIfPerfScore > 1.05, and perfScore=1.10263]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.26687 secs, and comparison 7.80738 sec, and warnIfPerfScore > 1.15, and perfScore=1.24582]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 3.53442 secs, and comparison 2.57185 sec, and warnIfPerfScore > 0.48, and perfScore=0.727658]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 4.39869 secs, and comparison 3.34515 sec, and warnIfPerfScore > 0.57, and perfScore=0.760488]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.20592 secs, and comparison 17.338 sec, and warnIfPerfScore > 2.9, and perfScore=5.40811]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 3.78984 secs, and comparison 17.7956 sec, and warnIfPerfScore > 2.9, and perfScore=4.69562]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.03755 secs, and comparison 52.2353 sec, and warnIfPerfScore > 24, and perfScore=10.3692]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.90739 secs, and comparison 10.7238 sec, and warnIfPerfScore > 1.7, and perfScore=2.18524]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.53165 secs, and comparison 5.19167 sec, and warnIfPerfScore > 1.5, and perfScore=0.938539]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 2.66488 secs, and comparison 12.8446 sec, and warnIfPerfScore > 2.1, and perfScore=4.81996]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.32031 secs, and comparison 3.52115 sec, and warnIfPerfScore > 1.6, and perfScore=0.815024]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.32836 secs, and comparison 1.65083 sec, and warnIfPerfScore > 0.23, and perfScore=0.3814]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.63679 secs, and comparison 4.37257 sec, and warnIfPerfScore > 1.3, and perfScore=1.20232]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.15244 secs, and comparison 6.709 sec, and warnIfPerfScore > 1.2, and perfScore=2.12819]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 13.8545 secs, and comparison 1.72535 sec, and warnIfPerfScore > 0.33, and perfScore=0.124533]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 3.05745 secs, and comparison 49.2932 sec, and warnIfPerfScore > 6, and perfScore=16.1223]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.96362 secs, and comparison 6.41339 sec, and warnIfPerfScore > 0.8, and perfScore=2.16404]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.00352 secs, and comparison 8.08733 sec, and warnIfPerfScore > 1.4, and perfScore=2.69262]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.8298 secs, and comparison 4.3106 sec, and warnIfPerfScore > 0.65, and perfScore=0.311689]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.33969 secs, and comparison 46.2119 sec, and warnIfPerfScore > 4.4, and perfScore=10.6487]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.5794 secs, and comparison 4.26223 sec, and warnIfPerfScore > 0.6, and perfScore=0.40288]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.4085 secs, and comparison 4.22893 sec, and warnIfPerfScore > 0.6, and perfScore=0.406295]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.4084 secs, and comparison 4.20816 sec, and warnIfPerfScore > 0.6, and perfScore=0.404303]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3437 secs, and comparison 4.43214 sec, and warnIfPerfScore > 1.3, and perfScore=0.428486]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 16.9198 secs, and comparison 10.2514 sec, and warnIfPerfScore > 1.3, and perfScore=0.60588]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 17.0282 secs, and comparison 6.92578 sec, and warnIfPerfScore > 0.3, and perfScore=0.406725]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.25405 secs, and comparison 14.2553 sec, and warnIfPerfScore > 1.5, and perfScore=1.96516]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.73657 secs, and comparison 2.76867 sec, and warnIfPerfScore > 0.55, and perfScore=0.410992]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.86659 sec, and warnIfPerfScore > 0.1, and perfScore=0.0577727]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.35063 sec, and warnIfPerfScore > 0.5, and perfScore=0.223376]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 58 seconds]]]

Succeeded
