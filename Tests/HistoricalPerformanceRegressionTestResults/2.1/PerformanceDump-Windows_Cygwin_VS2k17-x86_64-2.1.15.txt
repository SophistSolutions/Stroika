Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb  4 13:44:45 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 43.1324 secs, and comparison 7.39345 sec, and warnIfPerfScore > 0.65, and perfScore=0.171413]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 42.676 secs, and comparison 6.50602 sec, and warnIfPerfScore > 0.5, and perfScore=0.152452]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 18.6993 secs, and comparison 12.91 sec, and warnIfPerfScore > 1.05, and perfScore=0.6904]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.6195 secs, and comparison 13.9219 sec, and warnIfPerfScore > 1.15, and perfScore=1.0222]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 38.1037 secs, and comparison 3.90935 sec, and warnIfPerfScore > 0.48, and perfScore=0.102598]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 35.9657 secs, and comparison 4.01444 sec, and warnIfPerfScore > 0.57, and perfScore=0.111618]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 24.2587 secs, and comparison 37.9296 sec, and warnIfPerfScore > 2.9, and perfScore=1.56355]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 25.2659 secs, and comparison 40.8268 sec, and warnIfPerfScore > 2.9, and perfScore=1.61588]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 18.3724 secs, and comparison 220.263 sec, and warnIfPerfScore > 24, and perfScore=11.9888]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 24.1026 secs, and comparison 15.92 sec, and warnIfPerfScore > 1.7, and perfScore=0.660511]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 43.7648 secs, and comparison 40.2227 sec, and warnIfPerfScore > 1.5, and perfScore=0.919066]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 18.216 secs, and comparison 20.2193 sec, and warnIfPerfScore > 2.1, and perfScore=1.10998]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 35.6257 secs, and comparison 10.9114 sec, and warnIfPerfScore > 1.6, and perfScore=0.30628]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 39.0052 secs, and comparison 2.76522 sec, and warnIfPerfScore > 0.23, and perfScore=0.0708936]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 16.9769 secs, and comparison 26.9097 sec, and warnIfPerfScore > 1.3, and perfScore=1.58507]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.3075 secs, and comparison 22.305 sec, and warnIfPerfScore > 1.2, and perfScore=1.28875]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 22.8774 secs, and comparison 5.8707 sec, and warnIfPerfScore > 0.33, and perfScore=0.256615]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.7442 secs, and comparison 54.8951 sec, and warnIfPerfScore > 6, and perfScore=3.99406]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.0037 secs, and comparison 20.7663 sec, and warnIfPerfScore > 0.8, and perfScore=1.48291]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.6106 secs, and comparison 54.2567 sec, and warnIfPerfScore > 1.4, and perfScore=3.98635]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 23.2668 secs, and comparison 5.32403 sec, and warnIfPerfScore > 0.65, and perfScore=0.228825]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 26.1016 secs, and comparison 61.4803 sec, and warnIfPerfScore > 4.4, and perfScore=2.35542]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 22.0316 secs, and comparison 6.66401 sec, and warnIfPerfScore > 0.6, and perfScore=0.302475]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 23.5985 secs, and comparison 6.00299 sec, and warnIfPerfScore > 0.6, and perfScore=0.25438]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 21.3274 secs, and comparison 6.36342 sec, and warnIfPerfScore > 0.6, and perfScore=0.298368]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 21.3421 secs, and comparison 13.8812 sec, and warnIfPerfScore > 1.3, and perfScore=0.650415]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 28.785 secs, and comparison 22.2469 sec, and warnIfPerfScore > 1.3, and perfScore=0.772865]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 105.22 secs, and comparison 9.08861 sec, and warnIfPerfScore > 0.3, and perfScore=0.0863773]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.6194 secs, and comparison 23.1514 sec, and warnIfPerfScore > 1.5, and perfScore=1.2434]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 19.7199 secs, and comparison 5.95401 sec, and warnIfPerfScore > 0.55, and perfScore=0.301929]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.76006 sec, and warnIfPerfScore > 0.1, and perfScore=0.117337]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.58311 sec, and warnIfPerfScore > 0.5, and perfScore=0.305541]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.3972 secs, and comparison 21.7031 sec, and warnIfPerfScore > 2, and perfScore=1.11887]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.4616 secs, and comparison 27.808 sec, and warnIfPerfScore > 3.6, and perfScore=1.23802]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 28 minutes, 30 seconds]]]

Succeeded
