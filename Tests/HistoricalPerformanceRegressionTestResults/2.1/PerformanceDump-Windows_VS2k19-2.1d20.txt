Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar  9 4:10:2 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.9659 secs, and comparison 5.43959 sec, and warnIfPerfScore > 0.62, and perfScore=0.496046]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.0766 secs, and comparison 3.5305 sec, and warnIfPerfScore > 0.5, and perfScore=0.318734]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 10.5891 secs, and comparison 9.77588 sec, and warnIfPerfScore > 1.05, and perfScore=0.9232]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.81474 secs, and comparison 3.82069 sec, and warnIfPerfScore > 0.48, and perfScore=0.389281]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.68822 secs, and comparison 4.254 sec, and warnIfPerfScore > 0.55, and perfScore=0.43909]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.7763 secs, and comparison 26.691 sec, and warnIfPerfScore > 2.9, and perfScore=2.47681]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.0996 secs, and comparison 28.0054 sec, and warnIfPerfScore > 2.9, and perfScore=2.5231]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 10.5966 secs, and comparison 94.2364 sec, and warnIfPerfScore > 9.7, and perfScore=8.8931]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.8435 secs, and comparison 13.3 sec, and warnIfPerfScore > 1.6, and perfScore=1.22654]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.5732 secs, and comparison 13.6138 sec, and warnIfPerfScore > 1.5, and perfScore=1.08276]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.77233 secs, and comparison 13.625 sec, and warnIfPerfScore > 2.1, and perfScore=1.55318]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.6267 secs, and comparison 9.57246 sec, and warnIfPerfScore > 1.3, and perfScore=0.823319]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.1907 secs, and comparison 1.71721 sec, and warnIfPerfScore > 0.18, and perfScore=0.140863]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 13.3244 secs, and comparison 12.2839 sec, and warnIfPerfScore > 1.3, and perfScore=0.921912]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 9.6602 secs, and comparison 8.8876 sec, and warnIfPerfScore > 1.2, and perfScore=0.920022]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.3658 secs, and comparison 2.22164 sec, and warnIfPerfScore > 0.33, and perfScore=0.214324]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.4342 secs, and comparison 46.1256 sec, and warnIfPerfScore > 6, and perfScore=4.88919]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.2037 secs, and comparison 4.15284 sec, and warnIfPerfScore > 0.5, and perfScore=0.406992]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.8586 secs, and comparison 41.2224 sec, and warnIfPerfScore > 4.4, and perfScore=3.79629]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.2537 secs, and comparison 4.76851 sec, and warnIfPerfScore > 0.6, and perfScore=0.465051]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.6876 secs, and comparison 18.0557 sec, and warnIfPerfScore > 1.5, and perfScore=1.22932]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4662 secs, and comparison 4.36296 sec, and warnIfPerfScore > 0.55, and perfScore=0.323993]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15 secs, and comparison 1.40272 sec, and warnIfPerfScore > 0.25, and perfScore=0.0935145]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.94814 sec, and warnIfPerfScore > 0.5, and perfScore=0.329876]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.7675 secs, and comparison 17.6064 sec, and warnIfPerfScore > 1.9, and perfScore=1.63515]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9266 secs, and comparison 32.3369 sec, and warnIfPerfScore > 3, and perfScore=2.71133]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 37 seconds]]]

Succeeded
