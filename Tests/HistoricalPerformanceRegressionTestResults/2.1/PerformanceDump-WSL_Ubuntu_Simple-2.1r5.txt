Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Mar  8 10:4:48 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.10802 secs, and comparison 4.66732 sec, and warnIfPerfScore > 0.65, and perfScore=0.913725]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.10512 secs, and comparison 2.27439 sec, and warnIfPerfScore > 0.5, and perfScore=0.445512]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.96943 secs, and comparison 6.67666 sec, and warnIfPerfScore > 1.05, and perfScore=1.11847]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.65776 secs, and comparison 6.23977 sec, and warnIfPerfScore > 1.15, and perfScore=1.10287]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 2.68253 secs, and comparison 2.46168 sec, and warnIfPerfScore > 0.48, and perfScore=0.917671]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 3.2993 secs, and comparison 3.0416 sec, and warnIfPerfScore > 0.57, and perfScore=0.921892]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 2.40169 secs, and comparison 14.3187 sec, and warnIfPerfScore > 2.9, and perfScore=5.96192]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.00784 secs, and comparison 16.5727 sec, and warnIfPerfScore > 2.9, and perfScore=5.50984]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.2
	DETAILS:         	[baseline test 6.45114 secs, and comparison 46.3454 sec, and warnIfPerfScore > 24, and perfScore=7.18407]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.41287 secs, and comparison 9.99139 sec, and warnIfPerfScore > 1.7, and perfScore=2.26415]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 4.94408 secs, and comparison 4.8476 sec, and warnIfPerfScore > 1.5, and perfScore=0.980485]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.74081 secs, and comparison 11.7986 sec, and warnIfPerfScore > 2.1, and perfScore=4.30476]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 3.64022 secs, and comparison 2.91493 sec, and warnIfPerfScore > 1.6, and perfScore=0.800758]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 4.09379 secs, and comparison 1.40932 sec, and warnIfPerfScore > 0.23, and perfScore=0.344257]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.24556 secs, and comparison 4.02364 sec, and warnIfPerfScore > 1.3, and perfScore=1.23973]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.62412 secs, and comparison 6.01453 sec, and warnIfPerfScore > 1.2, and perfScore=2.29202]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 11.7603 secs, and comparison 1.2212 sec, and warnIfPerfScore > 0.33, and perfScore=0.103841]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	20
	DETAILS:         	[baseline test 2.1506 secs, and comparison 42.2335 sec, and warnIfPerfScore > 6, and perfScore=19.638]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.45671 secs, and comparison 5.25154 sec, and warnIfPerfScore > 0.8, and perfScore=2.13763]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.4944 secs, and comparison 6.7167 sec, and warnIfPerfScore > 1.4, and perfScore=2.69271]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.6451 secs, and comparison 3.60852 sec, and warnIfPerfScore > 0.65, and perfScore=0.309874]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.49924 secs, and comparison 39.1437 sec, and warnIfPerfScore > 4.4, and perfScore=11.1863]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.79568 secs, and comparison 3.57725 sec, and warnIfPerfScore > 0.6, and perfScore=0.406705]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.46519 secs, and comparison 4.0504 sec, and warnIfPerfScore > 0.6, and perfScore=0.478477]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.58774 secs, and comparison 3.60944 sec, and warnIfPerfScore > 0.6, and perfScore=0.420302]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.61958 secs, and comparison 3.65784 sec, and warnIfPerfScore > 1.3, and perfScore=0.424364]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 13.7179 secs, and comparison 8.19598 sec, and warnIfPerfScore > 1.3, and perfScore=0.597464]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.2717 secs, and comparison 5.72906 sec, and warnIfPerfScore > 0.3, and perfScore=0.431676]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.59165 secs, and comparison 11.5174 sec, and warnIfPerfScore > 1.5, and perfScore=2.05975]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.1592 secs, and comparison 2.46908 sec, and warnIfPerfScore > 0.55, and perfScore=0.400876]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 15 secs, and comparison 0.908609 sec, and warnIfPerfScore > 0.1, and perfScore=0.0605739]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80061 sec, and warnIfPerfScore > 0.5, and perfScore=0.186707]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 44 seconds]]]

Succeeded
