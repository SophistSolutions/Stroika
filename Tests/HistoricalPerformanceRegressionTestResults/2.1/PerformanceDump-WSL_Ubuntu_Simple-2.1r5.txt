Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar  6 12:25:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.73678 secs, and comparison 6.00583 sec, and warnIfPerfScore > 0.65, and perfScore=0.77627]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.0548 secs, and comparison 2.14874 sec, and warnIfPerfScore > 0.5, and perfScore=0.354882]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.9461 secs, and comparison 7.8989 sec, and warnIfPerfScore > 1.05, and perfScore=0.882943]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.41165 secs, and comparison 8.91753 sec, and warnIfPerfScore > 1.15, and perfScore=1.64784]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.84042 secs, and comparison 4.62827 sec, and warnIfPerfScore > 0.48, and perfScore=1.62943]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 3.86906 secs, and comparison 3.04696 sec, and warnIfPerfScore > 0.57, and perfScore=0.787519]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 3.84146 secs, and comparison 20.2046 sec, and warnIfPerfScore > 2.9, and perfScore=5.2596]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 4.02951 secs, and comparison 25.0227 sec, and warnIfPerfScore > 2.9, and perfScore=6.20985]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.94257 secs, and comparison 66.0628 sec, and warnIfPerfScore > 24, and perfScore=11.1169]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.96666 secs, and comparison 11.4591 sec, and warnIfPerfScore > 1.7, and perfScore=2.3072]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.48419 secs, and comparison 4.50219 sec, and warnIfPerfScore > 1.5, and perfScore=0.60156]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 2.70497 secs, and comparison 15.5867 sec, and warnIfPerfScore > 2.1, and perfScore=5.76224]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.99937 secs, and comparison 2.68294 sec, and warnIfPerfScore > 1.6, and perfScore=0.447204]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.03729 secs, and comparison 2.73231 sec, and warnIfPerfScore > 0.23, and perfScore=0.676769]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.22553 secs, and comparison 6.85996 sec, and warnIfPerfScore > 1.3, and perfScore=2.12677]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.48268 secs, and comparison 10.7339 sec, and warnIfPerfScore > 1.2, and perfScore=4.32353]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 17.0414 secs, and comparison 3.17466 sec, and warnIfPerfScore > 0.33, and perfScore=0.186291]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	27
	DETAILS:         	[baseline test 2.31897 secs, and comparison 61.7533 sec, and warnIfPerfScore > 6, and perfScore=26.6296]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 2.34057 secs, and comparison 9.46068 sec, and warnIfPerfScore > 0.8, and perfScore=4.04205]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 2.40523 secs, and comparison 10.2203 sec, and warnIfPerfScore > 1.4, and perfScore=4.24917]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 17.8742 secs, and comparison 3.79059 sec, and warnIfPerfScore > 0.65, and perfScore=0.21207]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 3.22711 secs, and comparison 55.6133 sec, and warnIfPerfScore > 4.4, and perfScore=17.2332]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 14.3709 secs, and comparison 4.89768 sec, and warnIfPerfScore > 0.6, and perfScore=0.340805]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.0866 secs, and comparison 5.12911 sec, and warnIfPerfScore > 0.6, and perfScore=0.634273]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.73645 secs, and comparison 3.48198 sec, and warnIfPerfScore > 0.6, and perfScore=0.398558]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.3901 secs, and comparison 3.5505 sec, and warnIfPerfScore > 1.3, and perfScore=0.265159]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 18.0828 secs, and comparison 7.97201 sec, and warnIfPerfScore > 1.3, and perfScore=0.440861]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.5107 secs, and comparison 5.16033 sec, and warnIfPerfScore > 0.3, and perfScore=0.381944]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.42406 secs, and comparison 10.9954 sec, and warnIfPerfScore > 1.5, and perfScore=2.02716]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.13798 secs, and comparison 2.2381 sec, and warnIfPerfScore > 0.55, and perfScore=0.364631]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 15 secs, and comparison 0.809274 sec, and warnIfPerfScore > 0.1, and perfScore=0.0539516]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.73089 sec, and warnIfPerfScore > 0.5, and perfScore=0.182059]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 55 seconds]]]

Succeeded
