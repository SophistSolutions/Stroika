Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Mar  9 14:53:44 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 7.41276 secs, and comparison 5.05185 sec, and warnIfPerfScore > 0.65, and perfScore=0.681507]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.69699 secs, and comparison 3.0367 sec, and warnIfPerfScore > 0.5, and perfScore=0.394531]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 10.0044 secs, and comparison 8.80417 sec, and warnIfPerfScore > 1.05, and perfScore=0.880034]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.50438 secs, and comparison 8.932 sec, and warnIfPerfScore > 1.15, and perfScore=1.05028]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.00987 secs, and comparison 2.96256 sec, and warnIfPerfScore > 0.48, and perfScore=0.328813]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.10758 secs, and comparison 3.76518 sec, and warnIfPerfScore > 0.57, and perfScore=0.413412]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.0454 secs, and comparison 25.2565 sec, and warnIfPerfScore > 2.9, and perfScore=2.51424]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.8533 secs, and comparison 26.2389 sec, and warnIfPerfScore > 2.9, and perfScore=2.4176]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 8.42591 secs, and comparison 132.291 sec, and warnIfPerfScore > 24, and perfScore=15.7005]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.10755 secs, and comparison 12.6559 sec, and warnIfPerfScore > 1.7, and perfScore=1.561]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 9.69784 secs, and comparison 9.01579 sec, and warnIfPerfScore > 1.5, and perfScore=0.929669]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.62218 secs, and comparison 14.884 sec, and warnIfPerfScore > 2.1, and perfScore=1.95272]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.66619 secs, and comparison 6.45135 sec, and warnIfPerfScore > 1.6, and perfScore=0.667414]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 10.4678 secs, and comparison 0.995209 sec, and warnIfPerfScore > 0.23, and perfScore=0.0950732]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3207 secs, and comparison 11.6924 sec, and warnIfPerfScore > 1.3, and perfScore=1.03283]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.83929 secs, and comparison 8.00969 sec, and warnIfPerfScore > 1.2, and perfScore=0.906147]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.7848 secs, and comparison 2.6233 sec, and warnIfPerfScore > 0.33, and perfScore=0.222599]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 8.16794 secs, and comparison 44.6463 sec, and warnIfPerfScore > 6, and perfScore=5.46604]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.24072 secs, and comparison 7.69302 sec, and warnIfPerfScore > 0.8, and perfScore=0.933536]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.19685 secs, and comparison 11.4786 sec, and warnIfPerfScore > 1.4, and perfScore=1.40037]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.915 secs, and comparison 3.85256 sec, and warnIfPerfScore > 0.65, and perfScore=0.323338]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.52297 secs, and comparison 40.0212 sec, and warnIfPerfScore > 4.4, and perfScore=4.20259]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.859 secs, and comparison 3.63516 sec, and warnIfPerfScore > 0.6, and perfScore=0.306532]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.5142 secs, and comparison 3.64441 sec, and warnIfPerfScore > 0.6, and perfScore=0.316514]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.8543 secs, and comparison 3.68742 sec, and warnIfPerfScore > 0.6, and perfScore=0.311062]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.7279 secs, and comparison 7.4904 sec, and warnIfPerfScore > 1.3, and perfScore=0.63868]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 13.0036 secs, and comparison 11.1252 sec, and warnIfPerfScore > 1.3, and perfScore=0.855553]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 52.7667 secs, and comparison 10.1058 sec, and warnIfPerfScore > 0.3, and perfScore=0.191518]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.57661 secs, and comparison 13.2413 sec, and warnIfPerfScore > 1.5, and perfScore=1.54388]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.2632 secs, and comparison 3.99156 sec, and warnIfPerfScore > 0.55, and perfScore=0.38892]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.062
	DETAILS:         	[baseline test 15 secs, and comparison 0.928163 sec, and warnIfPerfScore > 0.1, and perfScore=0.0618775]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.5833 sec, and warnIfPerfScore > 0.5, and perfScore=0.238886]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.91014 secs, and comparison 15.4014 sec, and warnIfPerfScore > 2, and perfScore=1.55411]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.1461 secs, and comparison 18.8816 sec, and warnIfPerfScore > 3.6, and perfScore=1.86096]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 8 seconds]]]

Succeeded
