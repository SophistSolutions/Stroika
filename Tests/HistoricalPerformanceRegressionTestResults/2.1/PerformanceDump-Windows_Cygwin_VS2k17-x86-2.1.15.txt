Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb  4 13:15:41 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 52.9576 secs, and comparison 7.13298 sec, and warnIfPerfScore > 0.65, and perfScore=0.134692]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 53.2344 secs, and comparison 6.35332 sec, and warnIfPerfScore > 0.5, and perfScore=0.119346]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 20.8223 secs, and comparison 14.8021 sec, and warnIfPerfScore > 1.05, and perfScore=0.710874]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.1161 secs, and comparison 15.1022 sec, and warnIfPerfScore > 1.15, and perfScore=0.999081]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 24.642 secs, and comparison 3.97052 sec, and warnIfPerfScore > 0.48, and perfScore=0.161128]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 24.9221 secs, and comparison 4.06915 sec, and warnIfPerfScore > 0.57, and perfScore=0.163275]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 27.8812 secs, and comparison 41.2581 sec, and warnIfPerfScore > 2.9, and perfScore=1.47978]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 28.8516 secs, and comparison 44.8341 sec, and warnIfPerfScore > 2.9, and perfScore=1.55396]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 23.4015 secs, and comparison 206.421 sec, and warnIfPerfScore > 24, and perfScore=8.82085]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 26.8431 secs, and comparison 16.5756 sec, and warnIfPerfScore > 1.7, and perfScore=0.6175]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 42.4357 secs, and comparison 41.2282 sec, and warnIfPerfScore > 1.5, and perfScore=0.971545]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 19.3619 secs, and comparison 18.8245 sec, and warnIfPerfScore > 2.1, and perfScore=0.972243]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 37.2995 secs, and comparison 13.7761 sec, and warnIfPerfScore > 1.6, and perfScore=0.369338]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 39.2769 secs, and comparison 2.46614 sec, and warnIfPerfScore > 0.23, and perfScore=0.0627887]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.7767 secs, and comparison 25.6827 sec, and warnIfPerfScore > 1.3, and perfScore=1.36779]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.36779}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.745 secs, and comparison 21.7115 sec, and warnIfPerfScore > 1.2, and perfScore=1.37895]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.37895}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.4634 secs, and comparison 5.01244 sec, and warnIfPerfScore > 0.33, and perfScore=0.324149]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 18.9069 secs, and comparison 52.9782 sec, and warnIfPerfScore > 6, and perfScore=2.80206]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.1836 secs, and comparison 19.8875 sec, and warnIfPerfScore > 0.8, and perfScore=1.3098]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.3098}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.9498 secs, and comparison 43.8521 sec, and warnIfPerfScore > 1.4, and perfScore=2.58718]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.58718}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 16.1292 secs, and comparison 4.95814 sec, and warnIfPerfScore > 0.65, and perfScore=0.307401]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 26.1306 secs, and comparison 59.949 sec, and warnIfPerfScore > 4.4, and perfScore=2.29421]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.7463 secs, and comparison 6.14168 sec, and warnIfPerfScore > 0.6, and perfScore=0.446788]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.3926 secs, and comparison 5.98986 sec, and warnIfPerfScore > 0.6, and perfScore=0.447251]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 15.0714 secs, and comparison 6.62713 sec, and warnIfPerfScore > 0.6, and perfScore=0.439715]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 16.4818 secs, and comparison 14.6524 sec, and warnIfPerfScore > 1.3, and perfScore=0.889006]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 23.3939 secs, and comparison 23.1271 sec, and warnIfPerfScore > 1.3, and perfScore=0.988597]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 116.755 secs, and comparison 8.76701 sec, and warnIfPerfScore > 0.3, and perfScore=0.0750892]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 26.8649 secs, and comparison 36.4299 sec, and warnIfPerfScore > 1.5, and perfScore=1.35604]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 24.5556 secs, and comparison 6.08477 sec, and warnIfPerfScore > 0.55, and perfScore=0.247796]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.08231 sec, and warnIfPerfScore > 0.1, and perfScore=0.138821]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.138821}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.08211 sec, and warnIfPerfScore > 0.5, and perfScore=0.338807]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 21.6665 secs, and comparison 27.7894 sec, and warnIfPerfScore > 2, and perfScore=1.2826]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.6297 secs, and comparison 42.5289 sec, and warnIfPerfScore > 3.6, and perfScore=1.72673]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 29 minutes, 4 seconds]]]

Succeeded
