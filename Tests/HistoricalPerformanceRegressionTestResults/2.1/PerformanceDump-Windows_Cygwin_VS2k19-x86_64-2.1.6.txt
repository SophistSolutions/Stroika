Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Oct 18 4:10:1 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 40.1639 secs, and comparison 13.6585 sec, and warnIfPerfScore > 0.65, and perfScore=0.34007]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 39.8499 secs, and comparison 12.8144 sec, and warnIfPerfScore > 0.5, and perfScore=0.321567]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 24.4299 secs, and comparison 18.8548 sec, and warnIfPerfScore > 1.05, and perfScore=0.771793]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 19.8664 secs, and comparison 19.4029 sec, and warnIfPerfScore > 1.15, and perfScore=0.976669]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 28.5145 secs, and comparison 3.0268 sec, and warnIfPerfScore > 0.48, and perfScore=0.106149]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 27.2658 secs, and comparison 3.58065 sec, and warnIfPerfScore > 0.57, and perfScore=0.131324]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.0275 secs, and comparison 32.6044 sec, and warnIfPerfScore > 2.9, and perfScore=1.80859]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 18.6595 secs, and comparison 31.8592 sec, and warnIfPerfScore > 2.9, and perfScore=1.70739]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 13.6951 secs, and comparison 220.813 sec, and warnIfPerfScore > 24, and perfScore=16.1235]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 15.7766 secs, and comparison 13.6454 sec, and warnIfPerfScore > 1.7, and perfScore=0.864916]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 42.8787 secs, and comparison 42.5693 sec, and warnIfPerfScore > 1.5, and perfScore=0.992784]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.2517 secs, and comparison 15.7537 sec, and warnIfPerfScore > 2.1, and perfScore=1.03292]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 36.4315 secs, and comparison 8.63199 sec, and warnIfPerfScore > 1.6, and perfScore=0.236938]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.046
	DETAILS:         	[baseline test 38.1373 secs, and comparison 1.74646 sec, and warnIfPerfScore > 0.23, and perfScore=0.0457939]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.4176 secs, and comparison 20.3067 sec, and warnIfPerfScore > 1.3, and perfScore=1.77855]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.1098 secs, and comparison 18.7077 sec, and warnIfPerfScore > 1.2, and perfScore=1.54484]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 19.0894 secs, and comparison 4.91184 sec, and warnIfPerfScore > 0.33, and perfScore=0.257307]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 11.9491 secs, and comparison 49.2245 sec, and warnIfPerfScore > 6, and perfScore=4.1195]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.9393 secs, and comparison 18.2473 sec, and warnIfPerfScore > 0.8, and perfScore=1.52833]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 12.0595 secs, and comparison 38.9904 sec, and warnIfPerfScore > 1.4, and perfScore=3.23317]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 18.4064 secs, and comparison 4.65298 sec, and warnIfPerfScore > 0.65, and perfScore=0.252791]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 20.8503 secs, and comparison 53.1433 sec, and warnIfPerfScore > 4.4, and perfScore=2.5488]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 18.0277 secs, and comparison 4.88569 sec, and warnIfPerfScore > 0.6, and perfScore=0.271009]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 18.2679 secs, and comparison 5.03339 sec, and warnIfPerfScore > 0.6, and perfScore=0.275532]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 18.3553 secs, and comparison 5.08025 sec, and warnIfPerfScore > 0.6, and perfScore=0.276773]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 18.7163 secs, and comparison 12.1538 sec, and warnIfPerfScore > 1.3, and perfScore=0.649368]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 25.0295 secs, and comparison 18.6185 sec, and warnIfPerfScore > 1.3, and perfScore=0.743861]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 91.5755 secs, and comparison 10.7203 sec, and warnIfPerfScore > 0.3, and perfScore=0.117066]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.7549 secs, and comparison 19.1041 sec, and warnIfPerfScore > 1.5, and perfScore=1.21258]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.8295 secs, and comparison 4.92613 sec, and warnIfPerfScore > 0.55, and perfScore=0.356204]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56197 sec, and warnIfPerfScore > 0.1, and perfScore=0.104131]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.58849 sec, and warnIfPerfScore > 0.5, and perfScore=0.239233]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.2024 secs, and comparison 18.1862 sec, and warnIfPerfScore > 2, and perfScore=1.05719]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.2048 secs, and comparison 26.8861 sec, and warnIfPerfScore > 3.6, and perfScore=1.33068]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 25 minutes, 35 seconds]]]

Succeeded
