Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 4:8:13 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.66325 secs, and comparison 4.36621 sec, and warnIfPerfScore > 0.65, and perfScore=0.770973]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.76959 secs, and comparison 2.64887 sec, and warnIfPerfScore > 0.5, and perfScore=0.459109]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.86486 secs, and comparison 7.13107 sec, and warnIfPerfScore > 1.05, and perfScore=0.9067]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.55031 secs, and comparison 7.20325 sec, and warnIfPerfScore > 1.15, and perfScore=1.09968]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.06547 secs, and comparison 2.22525 sec, and warnIfPerfScore > 0.48, and perfScore=0.275899]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.1283 secs, and comparison 2.75711 sec, and warnIfPerfScore > 0.57, and perfScore=0.339199]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.26359 secs, and comparison 18.9648 sec, and warnIfPerfScore > 2.9, and perfScore=3.02779]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.02357 secs, and comparison 19.2226 sec, and warnIfPerfScore > 2.9, and perfScore=2.73687]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.72728 secs, and comparison 141.588 sec, and warnIfPerfScore > 24, and perfScore=24.7217]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.70277 secs, and comparison 10.2802 sec, and warnIfPerfScore > 1.7, and perfScore=1.80267]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.65882 secs, and comparison 5.39468 sec, and warnIfPerfScore > 1.5, and perfScore=0.953323]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.36699 secs, and comparison 12.1653 sec, and warnIfPerfScore > 2.1, and perfScore=2.26669]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.65443 secs, and comparison 3.96318 sec, and warnIfPerfScore > 1.6, and perfScore=0.595571]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 6.98598 secs, and comparison 0.713618 sec, and warnIfPerfScore > 0.23, and perfScore=0.10215]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.8591 secs, and comparison 11.9471 sec, and warnIfPerfScore > 1.3, and perfScore=1.00742]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.20561 secs, and comparison 5.3115 sec, and warnIfPerfScore > 1.2, and perfScore=0.647301]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.24955 secs, and comparison 1.94072 sec, and warnIfPerfScore > 0.33, and perfScore=0.235252]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.89787 secs, and comparison 38.5165 sec, and warnIfPerfScore > 6, and perfScore=4.87682]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.87475 secs, and comparison 5.10966 sec, and warnIfPerfScore > 0.8, and perfScore=0.648866]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.8587 secs, and comparison 7.16268 sec, and warnIfPerfScore > 1.4, and perfScore=0.911433]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.25856 secs, and comparison 3.44555 sec, and warnIfPerfScore > 0.65, and perfScore=0.417209]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.38314 secs, and comparison 36.1196 sec, and warnIfPerfScore > 4.4, and perfScore=4.3086]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.11237 secs, and comparison 3.37314 sec, and warnIfPerfScore > 0.6, and perfScore=0.415802]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.069 secs, and comparison 3.3066 sec, and warnIfPerfScore > 0.6, and perfScore=0.409791]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.12738 secs, and comparison 3.3592 sec, and warnIfPerfScore > 0.6, and perfScore=0.413319]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.06076 secs, and comparison 5.19043 sec, and warnIfPerfScore > 1.3, and perfScore=0.643913]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.63178 secs, and comparison 8.49792 sec, and warnIfPerfScore > 1.3, and perfScore=0.984492]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 38.2431 secs, and comparison 6.65739 sec, and warnIfPerfScore > 0.3, and perfScore=0.174081]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.45415 secs, and comparison 9.25522 sec, and warnIfPerfScore > 1.5, and perfScore=1.69691]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.43759 secs, and comparison 3.11165 sec, and warnIfPerfScore > 0.55, and perfScore=0.483357]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.606153 sec, and warnIfPerfScore > 0.1, and perfScore=0.0404102]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.96911 sec, and warnIfPerfScore > 0.5, and perfScore=0.19794]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.71519 secs, and comparison 12.5994 sec, and warnIfPerfScore > 2, and perfScore=1.87626]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.04579 secs, and comparison 14.269 sec, and warnIfPerfScore > 3.6, and perfScore=1.77348]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 28 seconds]]]

Succeeded
