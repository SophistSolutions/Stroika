Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Jan 28 11:24:27 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.94978 secs, and comparison 4.61048 sec, and warnIfPerfScore > 0.62, and perfScore=0.7749]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.90368 secs, and comparison 3.043 sec, and warnIfPerfScore > 0.5, and perfScore=0.515441]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.47815 secs, and comparison 6.77722 sec, and warnIfPerfScore > 1.05, and perfScore=1.04617]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 3.43038 secs, and comparison 3.33117 sec, and warnIfPerfScore > 0.45, and perfScore=0.97108]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 4.04267 secs, and comparison 3.96214 sec, and warnIfPerfScore > 0.55, and perfScore=0.980081]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 2.99986 secs, and comparison 16.9219 sec, and warnIfPerfScore > 2.8, and perfScore=5.64091]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.5793 secs, and comparison 17.7512 sec, and warnIfPerfScore > 2.9, and perfScore=4.95942]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 5.00004 secs, and comparison 58.6274 sec, and warnIfPerfScore > 9.7, and perfScore=11.7254]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.48596 secs, and comparison 9.73485 sec, and warnIfPerfScore > 1.6, and perfScore=2.17007]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 5.65731 secs, and comparison 5.20781 sec, and warnIfPerfScore > 1.5, and perfScore=0.920545]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 2.22543 secs, and comparison 10.7046 sec, and warnIfPerfScore > 2.1, and perfScore=4.81016]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.0558 secs, and comparison 4.13834 sec, and warnIfPerfScore > 1.3, and perfScore=1.02035]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 4.26436 secs, and comparison 1.69059 sec, and warnIfPerfScore > 0.18, and perfScore=0.396447]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.45996 secs, and comparison 2.98956 sec, and warnIfPerfScore > 1.3, and perfScore=1.21529]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 3.33874 secs, and comparison 6.17294 sec, and warnIfPerfScore > 1.2, and perfScore=1.84888]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 13.0309 secs, and comparison 1.18402 sec, and warnIfPerfScore > 0.33, and perfScore=0.0908625]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.09657 secs, and comparison 42.6707 sec, and warnIfPerfScore > 6, and perfScore=13.78]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.85591 secs, and comparison 3.63924 sec, and warnIfPerfScore > 0.5, and perfScore=0.410939]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 4.138 secs, and comparison 38.1005 sec, and warnIfPerfScore > 4.4, and perfScore=9.20747]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.0998 secs, and comparison 3.68204 sec, and warnIfPerfScore > 0.6, and perfScore=0.364564]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.64991 secs, and comparison 10.8653 sec, and warnIfPerfScore > 1.5, and perfScore=1.42032]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.54214 secs, and comparison 2.29122 sec, and warnIfPerfScore > 0.55, and perfScore=0.350225]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.86547 sec, and warnIfPerfScore > 0.25, and perfScore=0.057698]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85205 sec, and warnIfPerfScore > 0.5, and perfScore=0.256804]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 22 seconds]]]

Succeeded
