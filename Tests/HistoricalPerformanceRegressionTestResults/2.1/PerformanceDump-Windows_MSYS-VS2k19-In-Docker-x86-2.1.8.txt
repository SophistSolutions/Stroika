Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov  3 19:14:38 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.3477 secs, and comparison 4.91901 sec, and warnIfPerfScore > 0.65, and perfScore=0.589266]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.41949 secs, and comparison 3.2517 sec, and warnIfPerfScore > 0.5, and perfScore=0.386211]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.6046 secs, and comparison 8.80835 sec, and warnIfPerfScore > 1.05, and perfScore=0.830617]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.05933 secs, and comparison 8.77909 sec, and warnIfPerfScore > 1.15, and perfScore=1.08931]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 10.2704 secs, and comparison 2.72839 sec, and warnIfPerfScore > 0.48, and perfScore=0.265655]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.1371 secs, and comparison 3.15028 sec, and warnIfPerfScore > 0.57, and perfScore=0.310767]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.1414 secs, and comparison 24.9651 sec, and warnIfPerfScore > 2.9, and perfScore=2.24076]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.5336 secs, and comparison 26.3482 sec, and warnIfPerfScore > 2.9, and perfScore=2.28448]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 10.6728 secs, and comparison 177.366 sec, and warnIfPerfScore > 24, and perfScore=16.6185]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.65149 secs, and comparison 12.5367 sec, and warnIfPerfScore > 1.7, and perfScore=1.29894]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.4246 secs, and comparison 10.1439 sec, and warnIfPerfScore > 1.5, and perfScore=0.973073]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.48343 secs, and comparison 14.5654 sec, and warnIfPerfScore > 2.1, and perfScore=1.53588]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 11.8977 secs, and comparison 9.03827 sec, and warnIfPerfScore > 1.6, and perfScore=0.759668]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.4079 secs, and comparison 1.70376 sec, and warnIfPerfScore > 0.23, and perfScore=0.137313]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.9642 secs, and comparison 14.5058 sec, and warnIfPerfScore > 1.3, and perfScore=1.03879]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.6322 secs, and comparison 6.54872 sec, and warnIfPerfScore > 1.2, and perfScore=0.562983]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.86542 secs, and comparison 1.94285 sec, and warnIfPerfScore > 0.33, and perfScore=0.247012]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.2724 secs, and comparison 43.3538 sec, and warnIfPerfScore > 6, and perfScore=3.84601]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 11.25 secs, and comparison 6.32732 sec, and warnIfPerfScore > 0.8, and perfScore=0.562431]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.2573 secs, and comparison 12.2317 sec, and warnIfPerfScore > 1.4, and perfScore=1.08655]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.79247 secs, and comparison 3.8941 sec, and warnIfPerfScore > 0.65, and perfScore=0.499726]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 11.8489 secs, and comparison 40.611 sec, and warnIfPerfScore > 4.4, and perfScore=3.4274]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.08391 secs, and comparison 3.90326 sec, and warnIfPerfScore > 0.6, and perfScore=0.482843]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.08384 secs, and comparison 3.89028 sec, and warnIfPerfScore > 0.6, and perfScore=0.481242]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.05781 secs, and comparison 3.88131 sec, and warnIfPerfScore > 0.6, and perfScore=0.481683]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.05701 secs, and comparison 6.07055 sec, and warnIfPerfScore > 1.3, and perfScore=0.753449]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.78436 secs, and comparison 9.8519 sec, and warnIfPerfScore > 1.3, and perfScore=1.12153]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 57.9656 secs, and comparison 6.92802 sec, and warnIfPerfScore > 0.3, and perfScore=0.11952]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.3886 secs, and comparison 15.6595 sec, and warnIfPerfScore > 1.5, and perfScore=1.37502]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.41544 secs, and comparison 3.43173 sec, and warnIfPerfScore > 0.55, and perfScore=0.40779]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 15 secs, and comparison 1.00395 sec, and warnIfPerfScore > 0.1, and perfScore=0.0669298]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.4092 sec, and warnIfPerfScore > 0.5, and perfScore=0.22728]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.7712 secs, and comparison 14.8065 sec, and warnIfPerfScore > 2, and perfScore=1.37465]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.286 secs, and comparison 33.1746 sec, and warnIfPerfScore > 3.6, and perfScore=2.7002]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 13 seconds]]]

Succeeded
