Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 8:3:9 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.75153 secs, and comparison 5.15541 sec, and warnIfPerfScore > 0.65, and perfScore=0.589087]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.61227 secs, and comparison 3.52229 sec, and warnIfPerfScore > 0.5, and perfScore=0.53269]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.65278 secs, and comparison 7.86695 sec, and warnIfPerfScore > 1.05, and perfScore=1.02799]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.0831 secs, and comparison 8.48349 sec, and warnIfPerfScore > 1.15, and perfScore=1.19771]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.59999 secs, and comparison 2.51336 sec, and warnIfPerfScore > 0.48, and perfScore=0.448816]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 5.67237 secs, and comparison 3.69474 sec, and warnIfPerfScore > 0.57, and perfScore=0.651357]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 5.45095 secs, and comparison 20.3879 sec, and warnIfPerfScore > 2.9, and perfScore=3.74025]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.96733 secs, and comparison 21.2533 sec, and warnIfPerfScore > 2.9, and perfScore=3.05042]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 8.99509 secs, and comparison 82.6608 sec, and warnIfPerfScore > 24, and perfScore=9.18955]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.71911 secs, and comparison 11.0843 sec, and warnIfPerfScore > 1.7, and perfScore=1.27126]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.69689 secs, and comparison 8.58647 sec, and warnIfPerfScore > 1.5, and perfScore=0.885487]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.82105 secs, and comparison 13.0537 sec, and warnIfPerfScore > 2.1, and perfScore=3.41628]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 4.49521 secs, and comparison 3.81726 sec, and warnIfPerfScore > 1.6, and perfScore=0.849182]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 5.14055 secs, and comparison 1.76212 sec, and warnIfPerfScore > 0.23, and perfScore=0.342789]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.76069 secs, and comparison 6.25653 sec, and warnIfPerfScore > 1.3, and perfScore=1.31421]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.02356 secs, and comparison 9.01276 sec, and warnIfPerfScore > 1.2, and perfScore=2.24]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 24.5138 secs, and comparison 2.65443 sec, and warnIfPerfScore > 0.33, and perfScore=0.108283]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.37448 secs, and comparison 45.0389 sec, and warnIfPerfScore > 6, and perfScore=10.2958]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.2783 secs, and comparison 12.2931 sec, and warnIfPerfScore > 0.8, and perfScore=2.32899]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 5.2816 secs, and comparison 15.0096 sec, and warnIfPerfScore > 1.4, and perfScore=2.84187]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 25.2056 secs, and comparison 4.55195 sec, and warnIfPerfScore > 0.65, and perfScore=0.180593]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 7.21433 secs, and comparison 40.3058 sec, and warnIfPerfScore > 4.4, and perfScore=5.58691]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 18.5127 secs, and comparison 4.29484 sec, and warnIfPerfScore > 0.6, and perfScore=0.231994]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 18.8575 secs, and comparison 4.15337 sec, and warnIfPerfScore > 0.6, and perfScore=0.220251]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 18.6813 secs, and comparison 4.19515 sec, and warnIfPerfScore > 0.6, and perfScore=0.224564]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 19.0787 secs, and comparison 6.6076 sec, and warnIfPerfScore > 1.3, and perfScore=0.346333]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 28.9108 secs, and comparison 10.772 sec, and warnIfPerfScore > 1.3, and perfScore=0.372596]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 29.4418 secs, and comparison 9.35217 sec, and warnIfPerfScore > 0.3, and perfScore=0.31765]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.201 secs, and comparison 20.0359 sec, and warnIfPerfScore > 1.5, and perfScore=1.51776]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.1424 secs, and comparison 3.9722 sec, and warnIfPerfScore > 0.55, and perfScore=0.356495]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 15 secs, and comparison 1.32527 sec, and warnIfPerfScore > 0.1, and perfScore=0.0883516]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.92382 sec, and warnIfPerfScore > 0.5, and perfScore=0.261588]
	                 	Test_Optional_ is FASTER

[[[Tests took: 12 minutes, 7 seconds]]]

Succeeded
