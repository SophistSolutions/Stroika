Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 26 4:47:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.11749 secs, and comparison 4.24032 sec, and warnIfPerfScore > 0.65, and perfScore=0.828593]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.21688 secs, and comparison 2.44693 sec, and warnIfPerfScore > 0.5, and perfScore=0.46904]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.75919 secs, and comparison 6.94893 sec, and warnIfPerfScore > 1.05, and perfScore=0.895574]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.64002 secs, and comparison 7.24616 sec, and warnIfPerfScore > 1.15, and perfScore=1.09128]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.68003 secs, and comparison 2.21227 sec, and warnIfPerfScore > 0.48, and perfScore=0.228539]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 9.47858 secs, and comparison 2.60567 sec, and warnIfPerfScore > 0.57, and perfScore=0.274901]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.72956 secs, and comparison 18.738 sec, and warnIfPerfScore > 2.9, and perfScore=2.78444]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.88817 secs, and comparison 18.5174 sec, and warnIfPerfScore > 2.9, and perfScore=2.68828]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.25242 secs, and comparison 133.101 sec, and warnIfPerfScore > 24, and perfScore=21.288]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.56799 secs, and comparison 9.60369 sec, and warnIfPerfScore > 1.7, and perfScore=1.72481]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.61233 secs, and comparison 5.37731 sec, and warnIfPerfScore > 1.5, and perfScore=0.958124]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.51412 secs, and comparison 12.2362 sec, and warnIfPerfScore > 2.1, and perfScore=2.21907]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.72354 secs, and comparison 4.04017 sec, and warnIfPerfScore > 1.6, and perfScore=0.600899]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 7.0357 secs, and comparison 0.698452 sec, and warnIfPerfScore > 0.23, and perfScore=0.0992725]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6688 secs, and comparison 12.7672 sec, and warnIfPerfScore > 1.3, and perfScore=1.09413]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.1299 secs, and comparison 5.26219 sec, and warnIfPerfScore > 1.2, and perfScore=0.647263]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.05012 secs, and comparison 1.97824 sec, and warnIfPerfScore > 0.33, and perfScore=0.218587]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.88155 secs, and comparison 38.5212 sec, and warnIfPerfScore > 6, and perfScore=4.88752]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.10344 secs, and comparison 5.23649 sec, and warnIfPerfScore > 0.8, and perfScore=0.646205]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.82027 secs, and comparison 7.34012 sec, and warnIfPerfScore > 1.4, and perfScore=0.938602]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.00723 secs, and comparison 3.35209 sec, and warnIfPerfScore > 0.65, and perfScore=0.372156]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 8.74935 secs, and comparison 35.3644 sec, and warnIfPerfScore > 4.4, and perfScore=4.04194]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.97055 secs, and comparison 3.29822 sec, and warnIfPerfScore > 0.6, and perfScore=0.367672]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.29907 secs, and comparison 3.44753 sec, and warnIfPerfScore > 0.6, and perfScore=0.370739]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.99087 secs, and comparison 3.3176 sec, and warnIfPerfScore > 0.6, and perfScore=0.368996]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.93832 secs, and comparison 5.40646 sec, and warnIfPerfScore > 1.3, and perfScore=0.604863]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.87725 secs, and comparison 9.03641 sec, and warnIfPerfScore > 1.3, and perfScore=0.914871]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 39.2414 secs, and comparison 5.14012 sec, and warnIfPerfScore > 0.3, and perfScore=0.130987]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 6.04268 secs, and comparison 9.35911 sec, and warnIfPerfScore > 1.5, and perfScore=1.54883]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.3035 secs, and comparison 2.74043 sec, and warnIfPerfScore > 0.55, and perfScore=0.434748]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.044
	DETAILS:         	[baseline test 15 secs, and comparison 0.657818 sec, and warnIfPerfScore > 0.1, and perfScore=0.0438545]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.83358 sec, and warnIfPerfScore > 0.5, and perfScore=0.188905]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.49451 secs, and comparison 13.3268 sec, and warnIfPerfScore > 2, and perfScore=2.05201]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.47533 secs, and comparison 14.6214 sec, and warnIfPerfScore > 3.6, and perfScore=1.72517]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 30 seconds]]]

Succeeded
