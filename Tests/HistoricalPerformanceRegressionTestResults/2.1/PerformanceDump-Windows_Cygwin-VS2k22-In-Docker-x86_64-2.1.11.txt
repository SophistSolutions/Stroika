Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 24 5:40:36 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 6.41767 secs, and comparison 4.51265 sec, and warnIfPerfScore > 0.65, and perfScore=0.70316]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.50936 secs, and comparison 2.51201 sec, and warnIfPerfScore > 0.5, and perfScore=0.455953]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.2699 secs, and comparison 7.2972 sec, and warnIfPerfScore > 1.05, and perfScore=0.88238]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.68477 secs, and comparison 7.68592 sec, and warnIfPerfScore > 1.15, and perfScore=1.14977]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.24716 secs, and comparison 2.31352 sec, and warnIfPerfScore > 0.48, and perfScore=0.250187]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 8.86301 secs, and comparison 2.76606 sec, and warnIfPerfScore > 0.57, and perfScore=0.31209]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.34955 secs, and comparison 20.4618 sec, and warnIfPerfScore > 2.9, and perfScore=2.78409]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.76531 secs, and comparison 20.0814 sec, and warnIfPerfScore > 2.9, and perfScore=2.58604]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.63718 secs, and comparison 155.659 sec, and warnIfPerfScore > 24, and perfScore=23.4526]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.09698 secs, and comparison 11.1577 sec, and warnIfPerfScore > 1.7, and perfScore=1.57217]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.03177 secs, and comparison 6.37802 sec, and warnIfPerfScore > 1.5, and perfScore=0.907029]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.23396 secs, and comparison 12.3316 sec, and warnIfPerfScore > 2.1, and perfScore=1.97813]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.55625 secs, and comparison 4.41959 sec, and warnIfPerfScore > 1.6, and perfScore=0.584892]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 8.03337 secs, and comparison 0.83672 sec, and warnIfPerfScore > 0.23, and perfScore=0.104156]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.3482 secs, and comparison 12.9515 sec, and warnIfPerfScore > 1.3, and perfScore=1.04886]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 9.28029 secs, and comparison 6.26096 sec, and warnIfPerfScore > 1.2, and perfScore=0.674651]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.537 secs, and comparison 2.22056 sec, and warnIfPerfScore > 0.33, and perfScore=0.210739]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.75558 secs, and comparison 40.1416 sec, and warnIfPerfScore > 6, and perfScore=4.58469]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.66248 secs, and comparison 6.00898 sec, and warnIfPerfScore > 0.8, and perfScore=0.69368]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.55454 secs, and comparison 8.89113 sec, and warnIfPerfScore > 1.4, and perfScore=1.03935]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.76415 secs, and comparison 3.53459 sec, and warnIfPerfScore > 0.65, and perfScore=0.361997]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.11125 secs, and comparison 37.39 sec, and warnIfPerfScore > 4.4, and perfScore=4.10371]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.0045 secs, and comparison 3.45885 sec, and warnIfPerfScore > 0.6, and perfScore=0.34573]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.3253 secs, and comparison 3.68504 sec, and warnIfPerfScore > 0.6, and perfScore=0.356894]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.3505 secs, and comparison 3.47655 sec, and warnIfPerfScore > 0.6, and perfScore=0.335882]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.98314 secs, and comparison 5.71345 sec, and warnIfPerfScore > 1.3, and perfScore=0.57231]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.2068 secs, and comparison 9.17811 sec, and warnIfPerfScore > 1.3, and perfScore=0.818974]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 43.076 secs, and comparison 5.32631 sec, and warnIfPerfScore > 0.3, and perfScore=0.123649]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.25363 secs, and comparison 10.1396 sec, and warnIfPerfScore > 1.5, and perfScore=1.6214]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.37275 secs, and comparison 3.46831 sec, and warnIfPerfScore > 0.55, and perfScore=0.470423]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.046
	DETAILS:         	[baseline test 15 secs, and comparison 0.693269 sec, and warnIfPerfScore > 0.1, and perfScore=0.0462179]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.13019 sec, and warnIfPerfScore > 0.5, and perfScore=0.208679]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.53336 secs, and comparison 13.6325 sec, and warnIfPerfScore > 2, and perfScore=1.80962]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.35053 secs, and comparison 15.9621 sec, and warnIfPerfScore > 3.6, and perfScore=1.70707]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 41 seconds]]]

Succeeded
