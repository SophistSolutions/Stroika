Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 11 16:38:34 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.4377 secs, and comparison 5.41962 sec, and warnIfPerfScore > 0.62, and perfScore=0.47384]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.8674 secs, and comparison 4.06795 sec, and warnIfPerfScore > 0.5, and perfScore=0.316144]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 13.0683 secs, and comparison 10.4422 sec, and warnIfPerfScore > 1.05, and perfScore=0.799043]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.063 secs, and comparison 4.42403 sec, and warnIfPerfScore > 0.48, and perfScore=0.338668]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 18.3539 secs, and comparison 5.30731 sec, and warnIfPerfScore > 0.57, and perfScore=0.289166]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.433 secs, and comparison 30.5834 sec, and warnIfPerfScore > 2.9, and perfScore=2.45985]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 17.9029 secs, and comparison 31.0117 sec, and warnIfPerfScore > 2.9, and perfScore=1.73222]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 17.134 secs, and comparison 119.342 sec, and warnIfPerfScore > 9.7, and perfScore=6.96523]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.36 secs, and comparison 13.6296 sec, and warnIfPerfScore > 1.6, and perfScore=1.3156]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 20.3141 secs, and comparison 16.1924 sec, and warnIfPerfScore > 1.5, and perfScore=0.797102]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.2899 secs, and comparison 12.8096 sec, and warnIfPerfScore > 2.1, and perfScore=1.37888]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 14.2383 secs, and comparison 9.77271 sec, and warnIfPerfScore > 1.3, and perfScore=0.686367]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 14.4514 secs, and comparison 2.75643 sec, and warnIfPerfScore > 0.23, and perfScore=0.190738]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.2011 secs, and comparison 13.8798 sec, and warnIfPerfScore > 1.3, and perfScore=1.05141]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 10.7727 secs, and comparison 7.92196 sec, and warnIfPerfScore > 1.2, and perfScore=0.735371]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.98997 secs, and comparison 2.21174 sec, and warnIfPerfScore > 0.33, and perfScore=0.221396]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 11.9678 secs, and comparison 50.7622 sec, and warnIfPerfScore > 6, and perfScore=4.24158]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.2973 secs, and comparison 4.35519 sec, and warnIfPerfScore > 0.5, and perfScore=0.422945]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 12.3719 secs, and comparison 43.5065 sec, and warnIfPerfScore > 4.4, and perfScore=3.51656]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.318 secs, and comparison 5.28463 sec, and warnIfPerfScore > 0.6, and perfScore=0.429017]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 21.3949 secs, and comparison 19.2046 sec, and warnIfPerfScore > 1.5, and perfScore=0.897626]
	                 	String Characters::Format is FASTER

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.8192 secs, and comparison 4.9606 sec, and warnIfPerfScore > 0.55, and perfScore=0.334742]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.62276 sec, and warnIfPerfScore > 0.25, and perfScore=0.108184]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.76823 sec, and warnIfPerfScore > 0.5, and perfScore=0.251215]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.9526 secs, and comparison 20.7343 sec, and warnIfPerfScore > 2, and perfScore=1.73472]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 21.6173 secs, and comparison 51.3927 sec, and warnIfPerfScore > 3.1, and perfScore=2.37739]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 11 seconds]]]

Succeeded
