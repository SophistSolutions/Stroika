Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Nov 24 8:45:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.05855 secs, and comparison 4.41118 sec, and warnIfPerfScore > 0.65, and perfScore=0.728091]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.56765 secs, and comparison 2.72906 sec, and warnIfPerfScore > 0.5, and perfScore=0.415531]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.72375 secs, and comparison 8.51031 sec, and warnIfPerfScore > 1.05, and perfScore=0.875209]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.61773 secs, and comparison 8.28549 sec, and warnIfPerfScore > 1.15, and perfScore=1.08766]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 12.5951 secs, and comparison 2.51236 sec, and warnIfPerfScore > 0.48, and perfScore=0.199471]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.3031 secs, and comparison 3.08669 sec, and warnIfPerfScore > 0.57, and perfScore=0.250888]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.94769 secs, and comparison 21.8333 sec, and warnIfPerfScore > 2.9, and perfScore=2.44011]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.42566 secs, and comparison 21.9949 sec, and warnIfPerfScore > 2.9, and perfScore=2.33351]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.95587 secs, and comparison 152.591 sec, and warnIfPerfScore > 24, and perfScore=19.1797]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.71532 secs, and comparison 11.1735 sec, and warnIfPerfScore > 1.7, and perfScore=1.44822]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.22837 secs, and comparison 7.61152 sec, and warnIfPerfScore > 1.5, and perfScore=0.925034]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.18811 secs, and comparison 13.1737 sec, and warnIfPerfScore > 2.1, and perfScore=1.8327]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15.1535 secs, and comparison 5.69887 sec, and warnIfPerfScore > 1.6, and perfScore=0.376075]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15.7768 secs, and comparison 0.904547 sec, and warnIfPerfScore > 0.23, and perfScore=0.057334]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.2102 secs, and comparison 14.1037 sec, and warnIfPerfScore > 1.3, and perfScore=1.06764]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 10.1638 secs, and comparison 6.79849 sec, and warnIfPerfScore > 1.2, and perfScore=0.668892]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 10.7097 secs, and comparison 2.54359 sec, and warnIfPerfScore > 0.33, and perfScore=0.237504]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.64036 secs, and comparison 42.0791 sec, and warnIfPerfScore > 6, and perfScore=4.36489]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 9.65702 secs, and comparison 6.72308 sec, and warnIfPerfScore > 0.8, and perfScore=0.696185]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.7135 secs, and comparison 10.0885 sec, and warnIfPerfScore > 1.4, and perfScore=1.0386]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.5766 secs, and comparison 3.76002 sec, and warnIfPerfScore > 0.65, and perfScore=0.355503]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.2669 secs, and comparison 38.935 sec, and warnIfPerfScore > 4.4, and perfScore=3.79228]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.4407 secs, and comparison 3.70425 sec, and warnIfPerfScore > 0.6, and perfScore=0.35479]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.4923 secs, and comparison 3.64066 sec, and warnIfPerfScore > 0.6, and perfScore=0.346984]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.4188 secs, and comparison 3.58779 sec, and warnIfPerfScore > 0.6, and perfScore=0.344356]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.4006 secs, and comparison 6.24452 sec, and warnIfPerfScore > 1.3, and perfScore=0.6004]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.4596 secs, and comparison 9.67242 sec, and warnIfPerfScore > 1.3, and perfScore=0.844045]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 49.633 secs, and comparison 6.01277 sec, and warnIfPerfScore > 0.3, and perfScore=0.121144]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.20621 secs, and comparison 12.0473 sec, and warnIfPerfScore > 1.5, and perfScore=1.46807]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.1782 secs, and comparison 3.39611 sec, and warnIfPerfScore > 0.55, and perfScore=0.415264]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.759672 sec, and warnIfPerfScore > 0.1, and perfScore=0.0506448]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.02296 sec, and warnIfPerfScore > 0.5, and perfScore=0.201531]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.94179 secs, and comparison 14.8172 sec, and warnIfPerfScore > 2, and perfScore=1.65707]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.274 secs, and comparison 17.5712 sec, and warnIfPerfScore > 3.6, and perfScore=1.71026]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 52 seconds]]]

Succeeded
