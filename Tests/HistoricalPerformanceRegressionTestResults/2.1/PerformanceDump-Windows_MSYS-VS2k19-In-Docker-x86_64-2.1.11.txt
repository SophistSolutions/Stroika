Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 26 7:40:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.11959 secs, and comparison 4.25673 sec, and warnIfPerfScore > 0.65, and perfScore=0.831459]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.30669 secs, and comparison 2.46392 sec, and warnIfPerfScore > 0.5, and perfScore=0.464304]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.85322 secs, and comparison 6.98481 sec, and warnIfPerfScore > 1.05, and perfScore=0.88942]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.70872 secs, and comparison 7.02492 sec, and warnIfPerfScore > 1.15, and perfScore=1.04713]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.76355 secs, and comparison 2.10768 sec, and warnIfPerfScore > 0.48, and perfScore=0.215873]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.53356 secs, and comparison 2.65412 sec, and warnIfPerfScore > 0.57, and perfScore=0.278398]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.66944 secs, and comparison 18.562 sec, and warnIfPerfScore > 2.9, and perfScore=2.78314]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.07831 secs, and comparison 17.9626 sec, and warnIfPerfScore > 2.9, and perfScore=2.53769]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.15546 secs, and comparison 128.987 sec, and warnIfPerfScore > 24, and perfScore=20.9548]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.83375 secs, and comparison 9.53811 sec, and warnIfPerfScore > 1.7, and perfScore=1.63499]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.97793 secs, and comparison 5.69661 sec, and warnIfPerfScore > 1.5, and perfScore=0.952939]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.24293 secs, and comparison 11.9983 sec, and warnIfPerfScore > 2.1, and perfScore=2.28846]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.1625 secs, and comparison 4.63202 sec, and warnIfPerfScore > 1.6, and perfScore=0.380844]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.054
	DETAILS:         	[baseline test 12.4747 secs, and comparison 0.670792 sec, and warnIfPerfScore > 0.23, and perfScore=0.053772]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6652 secs, and comparison 12.3529 sec, and warnIfPerfScore > 1.3, and perfScore=1.05896]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.5352 secs, and comparison 5.23152 sec, and warnIfPerfScore > 1.2, and perfScore=0.453525]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 7.8488 secs, and comparison 2.01492 sec, and warnIfPerfScore > 0.33, and perfScore=0.256717]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 11.4324 secs, and comparison 38.0823 sec, and warnIfPerfScore > 6, and perfScore=3.33109]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 7.95647 secs, and comparison 5.21637 sec, and warnIfPerfScore > 0.8, and perfScore=0.655613]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.80747 secs, and comparison 7.82697 sec, and warnIfPerfScore > 1.4, and perfScore=1.0025]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.85703 secs, and comparison 3.37175 sec, and warnIfPerfScore > 0.65, and perfScore=0.429138]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 8.79791 secs, and comparison 35.6161 sec, and warnIfPerfScore > 4.4, and perfScore=4.04824]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.19595 secs, and comparison 3.39791 sec, and warnIfPerfScore > 0.6, and perfScore=0.414584]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.88963 secs, and comparison 3.24951 sec, and warnIfPerfScore > 0.6, and perfScore=0.411871]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.79881 secs, and comparison 3.29745 sec, and warnIfPerfScore > 0.6, and perfScore=0.422814]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.79104 secs, and comparison 4.90876 sec, and warnIfPerfScore > 1.3, and perfScore=0.630052]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.89809 secs, and comparison 8.11654 sec, and warnIfPerfScore > 1.3, and perfScore=0.912167]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 39.0462 secs, and comparison 5.07956 sec, and warnIfPerfScore > 0.3, and perfScore=0.130091]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.99249 secs, and comparison 9.2169 sec, and warnIfPerfScore > 1.5, and perfScore=1.53807]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.16679 secs, and comparison 2.73753 sec, and warnIfPerfScore > 0.55, and perfScore=0.443915]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.585261 sec, and warnIfPerfScore > 0.1, and perfScore=0.0390174]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.80235 sec, and warnIfPerfScore > 0.5, and perfScore=0.186823]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.98063 secs, and comparison 13.2581 sec, and warnIfPerfScore > 2, and perfScore=1.89928]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.53625 secs, and comparison 14.4168 sec, and warnIfPerfScore > 3.6, and perfScore=1.91299]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 34 seconds]]]

Succeeded
