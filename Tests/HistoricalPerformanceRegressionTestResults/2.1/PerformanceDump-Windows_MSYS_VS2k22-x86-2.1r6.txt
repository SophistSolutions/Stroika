Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 13 13:14:14 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.50245 secs, and comparison 4.3919 sec, and warnIfPerfScore > 0.65, and perfScore=0.585395]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.61658 secs, and comparison 3.00996 sec, and warnIfPerfScore > 0.5, and perfScore=0.395186]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 9.08723 secs, and comparison 7.70618 sec, and warnIfPerfScore > 1.05, and perfScore=0.848023]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.98974 secs, and comparison 7.8359 sec, and warnIfPerfScore > 1.15, and perfScore=1.12106]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 34.8739 secs, and comparison 2.31979 sec, and warnIfPerfScore > 0.48, and perfScore=0.0665195]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 32.936 secs, and comparison 2.87635 sec, and warnIfPerfScore > 0.57, and perfScore=0.0873316]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.664 secs, and comparison 21.3528 sec, and warnIfPerfScore > 2.9, and perfScore=2.46454]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.89417 secs, and comparison 22.4292 sec, and warnIfPerfScore > 2.9, and perfScore=2.52179]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.96012 secs, and comparison 154.187 sec, and warnIfPerfScore > 24, and perfScore=19.3699]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.36983 secs, and comparison 11.2053 sec, and warnIfPerfScore > 1.7, and perfScore=1.52042]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.27781 secs, and comparison 8.26422 sec, and warnIfPerfScore > 1.5, and perfScore=0.998358]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.8173 secs, and comparison 13.0323 sec, and warnIfPerfScore > 2.1, and perfScore=1.66711]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.95573 secs, and comparison 6.77286 sec, and warnIfPerfScore > 1.6, and perfScore=0.680298]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.439 secs, and comparison 1.35283 sec, and warnIfPerfScore > 0.23, and perfScore=0.129594]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8264 secs, and comparison 13.1926 sec, and warnIfPerfScore > 1.3, and perfScore=1.02856]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.5579 secs, and comparison 5.81168 sec, and warnIfPerfScore > 1.2, and perfScore=0.55046]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 6.46557 secs, and comparison 1.50965 sec, and warnIfPerfScore > 0.33, and perfScore=0.233491]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.247 secs, and comparison 40.9089 sec, and warnIfPerfScore > 6, and perfScore=3.99228]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.0951 secs, and comparison 5.62298 sec, and warnIfPerfScore > 0.8, and perfScore=0.557]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 10.2201 secs, and comparison 9.52142 sec, and warnIfPerfScore > 1.4, and perfScore=0.931634]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.21202 secs, and comparison 3.50073 sec, and warnIfPerfScore > 0.65, and perfScore=0.563541]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.176 secs, and comparison 37.4338 sec, and warnIfPerfScore > 4.4, and perfScore=3.67862]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.59828 secs, and comparison 3.49112 sec, and warnIfPerfScore > 0.6, and perfScore=0.529095]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.52501 secs, and comparison 3.45445 sec, and warnIfPerfScore > 0.6, and perfScore=0.529418]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.56872 secs, and comparison 3.52368 sec, and warnIfPerfScore > 0.6, and perfScore=0.536432]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.70524 secs, and comparison 4.9492 sec, and warnIfPerfScore > 1.3, and perfScore=0.738109]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.04084 secs, and comparison 8.52892 sec, and warnIfPerfScore > 1.3, and perfScore=1.21135]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.2618 secs, and comparison 6.06407 sec, and warnIfPerfScore > 0.3, and perfScore=0.128308]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.78473 secs, and comparison 13.0316 sec, and warnIfPerfScore > 1.5, and perfScore=1.48344]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.14154 secs, and comparison 2.81059 sec, and warnIfPerfScore > 0.55, and perfScore=0.393556]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.799138 sec, and warnIfPerfScore > 0.1, and perfScore=0.0532759]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.9764 sec, and warnIfPerfScore > 0.5, and perfScore=0.198427]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.59066 secs, and comparison 9.0305 sec, and warnIfPerfScore > 2, and perfScore=1.0512]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 10.5229 secs, and comparison 29.7599 sec, and warnIfPerfScore > 3.6, and perfScore=2.8281]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 57 seconds]]]

Succeeded
