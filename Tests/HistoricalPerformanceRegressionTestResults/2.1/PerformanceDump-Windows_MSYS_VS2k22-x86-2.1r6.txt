Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Mar 27 15:16:27 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.84117 secs, and comparison 5.19214 sec, and warnIfPerfScore > 0.65, and perfScore=0.587269]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.52678 secs, and comparison 3.37725 sec, and warnIfPerfScore > 0.5, and perfScore=0.354501]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.6955 secs, and comparison 9.58403 sec, and warnIfPerfScore > 1.05, and perfScore=0.819462]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.77939 secs, and comparison 9.5945 sec, and warnIfPerfScore > 1.15, and perfScore=1.09284]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 41.2589 secs, and comparison 2.84623 sec, and warnIfPerfScore > 0.48, and perfScore=0.0689847]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 38.9471 secs, and comparison 3.28765 sec, and warnIfPerfScore > 0.57, and perfScore=0.0844131]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.9818 secs, and comparison 27.5677 sec, and warnIfPerfScore > 2.9, and perfScore=2.12357]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.4508 secs, and comparison 29.564 sec, and warnIfPerfScore > 2.9, and perfScore=2.19793]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 12.0669 secs, and comparison 202.97 sec, and warnIfPerfScore > 24, and perfScore=16.8205]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.5639 secs, and comparison 13.5385 sec, and warnIfPerfScore > 1.7, and perfScore=1.17075]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4958 secs, and comparison 12.713 sec, and warnIfPerfScore > 1.5, and perfScore=1.01739]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.1898 secs, and comparison 15.4193 sec, and warnIfPerfScore > 2.1, and perfScore=1.37798]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 14.4828 secs, and comparison 8.91447 sec, and warnIfPerfScore > 1.6, and perfScore=0.615521]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15.1082 secs, and comparison 1.98337 sec, and warnIfPerfScore > 0.23, and perfScore=0.131278]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.7166 secs, and comparison 16.2636 sec, and warnIfPerfScore > 1.3, and perfScore=1.03481]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 13.2378 secs, and comparison 8.05217 sec, and warnIfPerfScore > 1.2, and perfScore=0.60827]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 8.87458 secs, and comparison 2.18168 sec, and warnIfPerfScore > 0.33, and perfScore=0.245835]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 12.7102 secs, and comparison 45.8555 sec, and warnIfPerfScore > 6, and perfScore=3.60777]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.6789 secs, and comparison 7.82147 sec, and warnIfPerfScore > 0.8, and perfScore=0.616888]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6902 secs, and comparison 14.2741 sec, and warnIfPerfScore > 1.4, and perfScore=1.12482]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.88826 secs, and comparison 4.2011 sec, and warnIfPerfScore > 0.65, and perfScore=0.472657]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 13.1195 secs, and comparison 43.4339 sec, and warnIfPerfScore > 4.4, and perfScore=3.31065]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.05782 secs, and comparison 4.14211 sec, and warnIfPerfScore > 0.6, and perfScore=0.457296]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.0795 secs, and comparison 4.12598 sec, and warnIfPerfScore > 0.6, and perfScore=0.454428]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.07316 secs, and comparison 4.1582 sec, and warnIfPerfScore > 0.6, and perfScore=0.458297]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.10836 secs, and comparison 6.84316 sec, and warnIfPerfScore > 1.3, and perfScore=0.751306]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.92316 secs, and comparison 10.9459 sec, and warnIfPerfScore > 1.3, and perfScore=1.10306]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 65.5616 secs, and comparison 8.10529 sec, and warnIfPerfScore > 0.3, and perfScore=0.123629]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.4999 secs, and comparison 18.4558 sec, and warnIfPerfScore > 1.5, and perfScore=1.36711]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.5555 secs, and comparison 3.78042 sec, and warnIfPerfScore > 0.55, and perfScore=0.395627]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.077
	DETAILS:         	[baseline test 15 secs, and comparison 1.16006 sec, and warnIfPerfScore > 0.1, and perfScore=0.0773371]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.61181 sec, and warnIfPerfScore > 0.5, and perfScore=0.240787]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8759 secs, and comparison 12.8956 sec, and warnIfPerfScore > 2, and perfScore=1.00153]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 15.3524 secs, and comparison 36.7337 sec, and warnIfPerfScore > 3.6, and perfScore=2.39271]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 7 seconds]]]

Succeeded
