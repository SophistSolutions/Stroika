Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 22 14:19:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21517 secs, and comparison 4.82005 sec, and warnIfPerfScore > 0.65, and perfScore=1.49916]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 3.21268 secs, and comparison 2.30993 sec, and warnIfPerfScore > 0.5, and perfScore=0.719005]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25276 secs, and comparison 7.17775 sec, and warnIfPerfScore > 1.05, and perfScore=0.989657]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.3192 secs, and comparison 7.17984 sec, and warnIfPerfScore > 1.15, and perfScore=1.13619]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 5.90827 secs, and comparison 1.23234 sec, and warnIfPerfScore > 0.48, and perfScore=0.208579]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 5.90353 secs, and comparison 1.78438 sec, and warnIfPerfScore > 0.57, and perfScore=0.302257]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.92769 secs, and comparison 15.4233 sec, and warnIfPerfScore > 2.9, and perfScore=2.60191]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.30886 secs, and comparison 15.8823 sec, and warnIfPerfScore > 2.9, and perfScore=2.17302]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 9.46479 secs, and comparison 54.2828 sec, and warnIfPerfScore > 24, and perfScore=5.73524]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.29721 secs, and comparison 7.59782 sec, and warnIfPerfScore > 1.7, and perfScore=1.76808]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.76344 secs, and comparison 3.92243 sec, and warnIfPerfScore > 1.5, and perfScore=0.823446]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.71347 secs, and comparison 9.58064 sec, and warnIfPerfScore > 2.1, and perfScore=2.57997]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.16643 secs, and comparison 3.00642 sec, and warnIfPerfScore > 1.6, and perfScore=0.581914]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 5.35585 secs, and comparison 0.680166 sec, and warnIfPerfScore > 0.23, and perfScore=0.126995]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4305 secs, and comparison 12.9077 sec, and warnIfPerfScore > 1.3, and perfScore=1.03839]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.48737 secs, and comparison 5.25893 sec, and warnIfPerfScore > 1.2, and perfScore=1.17194]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.48894 secs, and comparison 1.06567 sec, and warnIfPerfScore > 0.33, and perfScore=0.2374]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.31406 secs, and comparison 38.4225 sec, and warnIfPerfScore > 6, and perfScore=8.90636]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.1969 secs, and comparison 5.07387 sec, and warnIfPerfScore > 0.8, and perfScore=1.20896]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.22806 secs, and comparison 7.01332 sec, and warnIfPerfScore > 1.4, and perfScore=1.65875]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.48965 secs, and comparison 3.18353 sec, and warnIfPerfScore > 0.65, and perfScore=0.709082]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.62235 secs, and comparison 36.2875 sec, and warnIfPerfScore > 4.4, and perfScore=6.45415]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50679 secs, and comparison 3.07341 sec, and warnIfPerfScore > 0.6, and perfScore=0.681952]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50958 secs, and comparison 3.07251 sec, and warnIfPerfScore > 0.6, and perfScore=0.68133]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51211 secs, and comparison 3.07744 sec, and warnIfPerfScore > 0.6, and perfScore=0.682039]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.50643 secs, and comparison 2.81329 sec, and warnIfPerfScore > 1.3, and perfScore=0.624283]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.69112 secs, and comparison 8.14428 sec, and warnIfPerfScore > 1.3, and perfScore=1.73611]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.8812 secs, and comparison 4.18695 sec, and warnIfPerfScore > 0.3, and perfScore=0.14012]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.17178 secs, and comparison 11.9239 sec, and warnIfPerfScore > 1.5, and perfScore=1.30006]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 4.63319 secs, and comparison 2.61458 sec, and warnIfPerfScore > 0.55, and perfScore=0.564315]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.89428 sec, and warnIfPerfScore > 0.1, and perfScore=0.126285]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94688 sec, and warnIfPerfScore > 0.5, and perfScore=0.129792]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 56 seconds]]]

Succeeded
