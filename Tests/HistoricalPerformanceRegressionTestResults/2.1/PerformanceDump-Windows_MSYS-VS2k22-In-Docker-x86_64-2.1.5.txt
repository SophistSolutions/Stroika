Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 12:58:57 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.50342 secs, and comparison 4.34812 sec, and warnIfPerfScore > 0.65, and perfScore=0.790077]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.54074 secs, and comparison 2.79601 sec, and warnIfPerfScore > 0.5, and perfScore=0.504627]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.93478 secs, and comparison 7.21204 sec, and warnIfPerfScore > 1.05, and perfScore=0.908914]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.52317 secs, and comparison 7.14004 sec, and warnIfPerfScore > 1.15, and perfScore=1.09457]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.80527 secs, and comparison 2.20371 sec, and warnIfPerfScore > 0.48, and perfScore=0.224747]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.75132 secs, and comparison 2.79177 sec, and warnIfPerfScore > 0.57, and perfScore=0.286297]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.37346 secs, and comparison 19.0211 sec, and warnIfPerfScore > 2.9, and perfScore=2.98442]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.67763 secs, and comparison 19.2053 sec, and warnIfPerfScore > 2.9, and perfScore=2.87607]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.7489 secs, and comparison 134.32 sec, and warnIfPerfScore > 24, and perfScore=23.3645]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.50191 secs, and comparison 10.1248 sec, and warnIfPerfScore > 1.7, and perfScore=1.84024]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.66223 secs, and comparison 5.41935 sec, and warnIfPerfScore > 1.5, and perfScore=0.957106]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.15506 secs, and comparison 12.2826 sec, and warnIfPerfScore > 2.1, and perfScore=2.38262]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.7946 secs, and comparison 3.96297 sec, and warnIfPerfScore > 1.6, and perfScore=0.335997]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 12.2268 secs, and comparison 0.682869 sec, and warnIfPerfScore > 0.23, and perfScore=0.0558501]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.6715 secs, and comparison 11.9822 sec, and warnIfPerfScore > 1.3, and perfScore=1.02662]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.6309 secs, and comparison 5.1085 sec, and warnIfPerfScore > 1.2, and perfScore=0.439217]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.96746 secs, and comparison 1.85816 sec, and warnIfPerfScore > 0.33, and perfScore=0.233218]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.1812 secs, and comparison 38.9278 sec, and warnIfPerfScore > 6, and perfScore=3.48154]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.91885 secs, and comparison 4.88996 sec, and warnIfPerfScore > 0.8, and perfScore=0.617509]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.9194 secs, and comparison 7.54929 sec, and warnIfPerfScore > 1.4, and perfScore=0.953266]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.22901 secs, and comparison 3.633 sec, and warnIfPerfScore > 0.65, and perfScore=0.441487]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 8.73918 secs, and comparison 36.4882 sec, and warnIfPerfScore > 4.4, and perfScore=4.17524]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.89143 secs, and comparison 3.39521 sec, and warnIfPerfScore > 0.6, and perfScore=0.43024]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.86996 secs, and comparison 3.36111 sec, and warnIfPerfScore > 0.6, and perfScore=0.427081]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.93221 secs, and comparison 3.43307 sec, and warnIfPerfScore > 0.6, and perfScore=0.432802]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.88315 secs, and comparison 4.91784 sec, and warnIfPerfScore > 1.3, and perfScore=0.623841]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.55536 secs, and comparison 8.24817 sec, and warnIfPerfScore > 1.3, and perfScore=0.964093]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 38.9088 secs, and comparison 6.17246 sec, and warnIfPerfScore > 0.3, and perfScore=0.158639]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.58751 secs, and comparison 9.39149 sec, and warnIfPerfScore > 1.5, and perfScore=1.6808]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.8799 secs, and comparison 2.71172 sec, and warnIfPerfScore > 0.55, and perfScore=0.461185]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.611265 sec, and warnIfPerfScore > 0.1, and perfScore=0.040751]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.95761 sec, and warnIfPerfScore > 0.5, and perfScore=0.197174]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.84575 secs, and comparison 12.5518 sec, and warnIfPerfScore > 2, and perfScore=1.83351]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.67228 secs, and comparison 14.1686 sec, and warnIfPerfScore > 3.6, and perfScore=1.84672]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 40 seconds]]]

Succeeded
