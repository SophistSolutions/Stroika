Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 12:15:6 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 5.5308 secs, and comparison 4.21827 sec, and warnIfPerfScore > 0.65, and perfScore=0.762689]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.34981 secs, and comparison 2.5494 sec, and warnIfPerfScore > 0.5, and perfScore=0.47654]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.46016 secs, and comparison 6.93455 sec, and warnIfPerfScore > 1.05, and perfScore=0.929545]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.33162 secs, and comparison 6.88714 sec, and warnIfPerfScore > 1.15, and perfScore=1.08774]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 31.9977 secs, and comparison 2.14246 sec, and warnIfPerfScore > 0.48, and perfScore=0.0669568]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 30.3265 secs, and comparison 2.65323 sec, and warnIfPerfScore > 0.57, and perfScore=0.0874889]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.02013 secs, and comparison 18.0072 sec, and warnIfPerfScore > 2.9, and perfScore=2.99117]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.21556 secs, and comparison 18.2107 sec, and warnIfPerfScore > 2.9, and perfScore=2.92986]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.50119 secs, and comparison 132.788 sec, and warnIfPerfScore > 24, and perfScore=24.1381]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.01846 secs, and comparison 9.62783 sec, and warnIfPerfScore > 1.7, and perfScore=1.91848]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 5.46124 secs, and comparison 4.91524 sec, and warnIfPerfScore > 1.5, and perfScore=0.900024]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 4.67387 secs, and comparison 11.6009 sec, and warnIfPerfScore > 2.1, and perfScore=2.48208]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 6.08937 secs, and comparison 3.76202 sec, and warnIfPerfScore > 1.6, and perfScore=0.617801]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 6.41594 secs, and comparison 0.618011 sec, and warnIfPerfScore > 0.23, and perfScore=0.0963244]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2512 secs, and comparison 11.4093 sec, and warnIfPerfScore > 1.3, and perfScore=1.01406]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.97199 secs, and comparison 4.89773 sec, and warnIfPerfScore > 1.2, and perfScore=0.614366]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 7.62109 secs, and comparison 1.70074 sec, and warnIfPerfScore > 0.33, and perfScore=0.223162]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 7.64452 secs, and comparison 37.5928 sec, and warnIfPerfScore > 6, and perfScore=4.91762]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.69609 secs, and comparison 4.69845 sec, and warnIfPerfScore > 0.8, and perfScore=0.610498]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.66786 secs, and comparison 7.02084 sec, and warnIfPerfScore > 1.4, and perfScore=0.915619]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.64772 secs, and comparison 3.30986 sec, and warnIfPerfScore > 0.65, and perfScore=0.432791]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.1412 secs, and comparison 35.1842 sec, and warnIfPerfScore > 4.4, and perfScore=4.32174]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.64883 secs, and comparison 3.25009 sec, and warnIfPerfScore > 0.6, and perfScore=0.424913]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.62737 secs, and comparison 3.27461 sec, and warnIfPerfScore > 0.6, and perfScore=0.429324]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.58655 secs, and comparison 3.2657 sec, and warnIfPerfScore > 0.6, and perfScore=0.430459]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.61076 secs, and comparison 4.81697 sec, and warnIfPerfScore > 1.3, and perfScore=0.632916]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.15964 secs, and comparison 7.93809 sec, and warnIfPerfScore > 1.3, and perfScore=0.972848]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 35.2461 secs, and comparison 5.97738 sec, and warnIfPerfScore > 0.3, and perfScore=0.16959]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.12604 secs, and comparison 8.98448 sec, and warnIfPerfScore > 1.5, and perfScore=1.75272]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.60041 secs, and comparison 2.8414 sec, and warnIfPerfScore > 0.55, and perfScore=0.507355]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.571823 sec, and warnIfPerfScore > 0.1, and perfScore=0.0381216]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.84567 sec, and warnIfPerfScore > 0.5, and perfScore=0.189711]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.13909 secs, and comparison 12.1239 sec, and warnIfPerfScore > 2, and perfScore=1.97488]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.6407 secs, and comparison 13.1497 sec, and warnIfPerfScore > 3.6, and perfScore=1.72101]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 38 seconds]]]

Succeeded
