Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 28 20:39:59 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 51.8679 secs, and comparison 6.34376 sec, and warnIfPerfScore > 0.65, and perfScore=0.122306]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 51.0511 secs, and comparison 5.98979 sec, and warnIfPerfScore > 0.5, and perfScore=0.117329]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 18.9834 secs, and comparison 13.2118 sec, and warnIfPerfScore > 1.05, and perfScore=0.695968]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.3347 secs, and comparison 13.0276 sec, and warnIfPerfScore > 1.15, and perfScore=0.976967]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 20.462 secs, and comparison 3.84399 sec, and warnIfPerfScore > 0.48, and perfScore=0.18786]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 20.1976 secs, and comparison 4.05124 sec, and warnIfPerfScore > 0.57, and perfScore=0.20058]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 23.3797 secs, and comparison 36.3987 sec, and warnIfPerfScore > 2.9, and perfScore=1.55685]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 24.2709 secs, and comparison 37.8105 sec, and warnIfPerfScore > 2.9, and perfScore=1.55785]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 19.6054 secs, and comparison 209.092 sec, and warnIfPerfScore > 24, and perfScore=10.6651]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 23.1415 secs, and comparison 16.7659 sec, and warnIfPerfScore > 1.7, and perfScore=0.724496]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 43.2796 secs, and comparison 43.3435 sec, and warnIfPerfScore > 1.5, and perfScore=1.00148]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.878 secs, and comparison 19.3451 sec, and warnIfPerfScore > 2.1, and perfScore=1.02474]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 37.9408 secs, and comparison 15.048 sec, and warnIfPerfScore > 1.6, and perfScore=0.396617]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 39.6947 secs, and comparison 2.801 sec, and warnIfPerfScore > 0.23, and perfScore=0.0705635]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.4117 secs, and comparison 25.2809 sec, and warnIfPerfScore > 1.3, and perfScore=1.30236]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.30236}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.2268 secs, and comparison 21.057 sec, and warnIfPerfScore > 1.2, and perfScore=1.29767]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.29767}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.5565 secs, and comparison 4.55279 sec, and warnIfPerfScore > 0.33, and perfScore=0.335838]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.335838}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 15.5533 secs, and comparison 54.4387 sec, and warnIfPerfScore > 6, and perfScore=3.50014]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.4151 secs, and comparison 19.801 sec, and warnIfPerfScore > 0.8, and perfScore=1.28452]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.28452}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 15.8899 secs, and comparison 39.4209 sec, and warnIfPerfScore > 1.4, and perfScore=2.48087]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.48087}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.3647 secs, and comparison 5.07799 sec, and warnIfPerfScore > 0.65, and perfScore=0.379954]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 25.2488 secs, and comparison 62.2766 sec, and warnIfPerfScore > 4.4, and perfScore=2.46652]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.0108 secs, and comparison 6.13342 sec, and warnIfPerfScore > 0.6, and perfScore=0.437765]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.0933 secs, and comparison 6.14434 sec, and warnIfPerfScore > 0.6, and perfScore=0.435975]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 13.9171 secs, and comparison 6.7576 sec, and warnIfPerfScore > 0.6, and perfScore=0.485562]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.4519 secs, and comparison 14.5935 sec, and warnIfPerfScore > 1.3, and perfScore=1.0098]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.9455 secs, and comparison 22.4839 sec, and warnIfPerfScore > 1.3, and perfScore=1.07345]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.081
	DETAILS:         	[baseline test 114.759 secs, and comparison 9.24732 sec, and warnIfPerfScore > 0.3, and perfScore=0.0805803]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 27.6889 secs, and comparison 31.0131 sec, and warnIfPerfScore > 1.5, and perfScore=1.12005]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 20.5257 secs, and comparison 6.22713 sec, and warnIfPerfScore > 0.55, and perfScore=0.303382]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.24276 sec, and warnIfPerfScore > 0.1, and perfScore=0.149517]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.149517}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.52922 sec, and warnIfPerfScore > 0.5, and perfScore=0.368615]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 21.3198 secs, and comparison 26.0321 sec, and warnIfPerfScore > 2, and perfScore=1.22103]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 24.5087 secs, and comparison 42.6531 sec, and warnIfPerfScore > 3.6, and perfScore=1.74033]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 27 minutes, 47 seconds]]]

Succeeded
