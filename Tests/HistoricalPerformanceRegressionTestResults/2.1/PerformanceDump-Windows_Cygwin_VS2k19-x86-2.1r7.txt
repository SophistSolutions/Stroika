Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Apr  1 14:31:42 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 11.4762 secs, and comparison 5.71573 sec, and warnIfPerfScore > 0.65, and perfScore=0.498049]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.8217 secs, and comparison 3.89134 sec, and warnIfPerfScore > 0.5, and perfScore=0.32917]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.711 secs, and comparison 10.1791 sec, and warnIfPerfScore > 1.05, and perfScore=0.800809]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.82947 secs, and comparison 10.6204 sec, and warnIfPerfScore > 1.15, and perfScore=1.08047]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.9879 secs, and comparison 3.30385 sec, and warnIfPerfScore > 0.48, and perfScore=0.254379]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.2596 secs, and comparison 3.9068 sec, and warnIfPerfScore > 0.57, and perfScore=0.318672]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.9344 secs, and comparison 32.2658 sec, and warnIfPerfScore > 2.9, and perfScore=2.31554]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.7497 secs, and comparison 34.0722 sec, and warnIfPerfScore > 2.9, and perfScore=2.31003]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.361 secs, and comparison 189.288 sec, and warnIfPerfScore > 24, and perfScore=13.1807]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.5305 secs, and comparison 16.2151 sec, and warnIfPerfScore > 1.7, and perfScore=1.40628]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.0515 secs, and comparison 14.0602 sec, and warnIfPerfScore > 1.5, and perfScore=1.00062]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.121 secs, and comparison 18.8319 sec, and warnIfPerfScore > 2.1, and perfScore=1.69337]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 14.6791 secs, and comparison 10.55 sec, and warnIfPerfScore > 1.6, and perfScore=0.718707]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15.8015 secs, and comparison 2.01079 sec, and warnIfPerfScore > 0.23, and perfScore=0.127253]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 17.9553 secs, and comparison 15.6151 sec, and warnIfPerfScore > 1.3, and perfScore=0.869666]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 12.25 secs, and comparison 8.06458 sec, and warnIfPerfScore > 1.2, and perfScore=0.658335]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.2824 secs, and comparison 2.83473 sec, and warnIfPerfScore > 0.33, and perfScore=0.251252]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 12.0347 secs, and comparison 49.664 sec, and warnIfPerfScore > 6, and perfScore=4.12672]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 11.9397 secs, and comparison 9.55196 sec, and warnIfPerfScore > 0.8, and perfScore=0.800019]
	                 	Sequence_Array<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.8 and got 0.800019}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.8999 secs, and comparison 15.9192 sec, and warnIfPerfScore > 1.4, and perfScore=1.33776]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.3909 secs, and comparison 4.37957 sec, and warnIfPerfScore > 0.65, and perfScore=0.384481]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 12.517 secs, and comparison 47.881 sec, and warnIfPerfScore > 4.4, and perfScore=3.82527]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.1357 secs, and comparison 4.69222 sec, and warnIfPerfScore > 0.6, and perfScore=0.386646]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.4547 secs, and comparison 4.8193 sec, and warnIfPerfScore > 0.6, and perfScore=0.420728]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.5207 secs, and comparison 4.53935 sec, and warnIfPerfScore > 0.6, and perfScore=0.394017]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 11.8719 secs, and comparison 9.01491 sec, and warnIfPerfScore > 1.3, and perfScore=0.759349]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 13.5259 secs, and comparison 13.3813 sec, and warnIfPerfScore > 1.3, and perfScore=0.989309]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 72.4899 secs, and comparison 12.6555 sec, and warnIfPerfScore > 0.3, and perfScore=0.174583]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.5035 secs, and comparison 21.2088 sec, and warnIfPerfScore > 1.5, and perfScore=1.46232]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 16.9017 secs, and comparison 5.25338 sec, and warnIfPerfScore > 0.55, and perfScore=0.310819]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 15 secs, and comparison 1.26269 sec, and warnIfPerfScore > 0.1, and perfScore=0.0841793]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.3132 sec, and warnIfPerfScore > 0.5, and perfScore=0.287547]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.5745 secs, and comparison 18.8774 sec, and warnIfPerfScore > 2, and perfScore=1.39065]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.4291 secs, and comparison 39.1429 sec, and warnIfPerfScore > 3.6, and perfScore=2.71277]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 52 seconds]]]

Succeeded
