Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Apr 27 2:18:29 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.19765 secs, and comparison 5.40783 sec, and warnIfPerfScore > 0.65, and perfScore=0.659681]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 8.68083 secs, and comparison 3.25229 sec, and warnIfPerfScore > 0.5, and perfScore=0.374652]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 11.1183 secs, and comparison 9.69566 sec, and warnIfPerfScore > 1.05, and perfScore=0.872049]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.58179 secs, and comparison 9.55771 sec, and warnIfPerfScore > 1.15, and perfScore=1.11372]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.95513 secs, and comparison 2.78137 sec, and warnIfPerfScore > 0.48, and perfScore=0.27939]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.34447 secs, and comparison 3.69387 sec, and warnIfPerfScore > 0.57, and perfScore=0.3953]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 10.0385 secs, and comparison 27.2349 sec, and warnIfPerfScore > 2.9, and perfScore=2.71303]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 10.6387 secs, and comparison 27.5213 sec, and warnIfPerfScore > 2.9, and perfScore=2.58691]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 8.5446 secs, and comparison 139.961 sec, and warnIfPerfScore > 24, and perfScore=16.3801]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.65922 secs, and comparison 13.9552 sec, and warnIfPerfScore > 1.7, and perfScore=1.6116]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.96311 secs, and comparison 9.62923 sec, and warnIfPerfScore > 1.5, and perfScore=0.966489]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.84132 secs, and comparison 16.5076 sec, and warnIfPerfScore > 2.1, and perfScore=2.10521]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.4454 secs, and comparison 5.99272 sec, and warnIfPerfScore > 1.6, and perfScore=0.573718]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 10.8035 secs, and comparison 0.992867 sec, and warnIfPerfScore > 0.23, and perfScore=0.0919027]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1785 secs, and comparison 12.8503 sec, and warnIfPerfScore > 1.3, and perfScore=1.05516]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.17442 secs, and comparison 8.25607 sec, and warnIfPerfScore > 1.2, and perfScore=0.899901]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 13.0961 secs, and comparison 3.04953 sec, and warnIfPerfScore > 0.33, and perfScore=0.232858]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 8.84226 secs, and comparison 46.8105 sec, and warnIfPerfScore > 6, and perfScore=5.29395]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 9.02649 secs, and comparison 8.01482 sec, and warnIfPerfScore > 0.8, and perfScore=0.887923]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.06934 secs, and comparison 11.2211 sec, and warnIfPerfScore > 1.4, and perfScore=1.23726]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.8275 secs, and comparison 4.16843 sec, and warnIfPerfScore > 0.65, and perfScore=0.324962]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.9035 secs, and comparison 41.7912 sec, and warnIfPerfScore > 4.4, and perfScore=4.21984]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.6973 secs, and comparison 4.07155 sec, and warnIfPerfScore > 0.6, and perfScore=0.320662]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.0763 secs, and comparison 4.18154 sec, and warnIfPerfScore > 0.6, and perfScore=0.319779]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.9285 secs, and comparison 3.95956 sec, and warnIfPerfScore > 0.6, and perfScore=0.306265]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 12.8345 secs, and comparison 8.73438 sec, and warnIfPerfScore > 1.3, and perfScore=0.680539]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 14.7557 secs, and comparison 12.0715 sec, and warnIfPerfScore > 1.3, and perfScore=0.818087]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 58.2809 secs, and comparison 10.9217 sec, and warnIfPerfScore > 0.3, and perfScore=0.187398]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.87062 secs, and comparison 14.1368 sec, and warnIfPerfScore > 1.5, and perfScore=1.59367]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.3931 secs, and comparison 4.15828 sec, and warnIfPerfScore > 0.55, and perfScore=0.364983]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.818007 sec, and warnIfPerfScore > 0.1, and perfScore=0.0545338]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.94847 sec, and warnIfPerfScore > 0.5, and perfScore=0.263231]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.3093 secs, and comparison 16.508 sec, and warnIfPerfScore > 2, and perfScore=1.60127]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 10.6368 secs, and comparison 20.1555 sec, and warnIfPerfScore > 3.6, and perfScore=1.89488]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 1 second]]]

Succeeded
