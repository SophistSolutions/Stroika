Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr 10 3:18:38 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.46215 secs, and comparison 4.2447 sec, and warnIfPerfScore > 0.65, and perfScore=0.777113]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.45663 secs, and comparison 2.56354 sec, and warnIfPerfScore > 0.5, and perfScore=0.469803]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.99269 secs, and comparison 7.05711 sec, and warnIfPerfScore > 1.05, and perfScore=0.882945]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.39305 secs, and comparison 6.91635 sec, and warnIfPerfScore > 1.15, and perfScore=1.08185]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.865 secs, and comparison 2.28549 sec, and warnIfPerfScore > 0.48, and perfScore=0.29059]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.81257 secs, and comparison 2.65926 sec, and warnIfPerfScore > 0.57, and perfScore=0.340382]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.18431 secs, and comparison 18.0856 sec, and warnIfPerfScore > 2.9, and perfScore=2.92444]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.7471 secs, and comparison 18.8777 sec, and warnIfPerfScore > 2.9, and perfScore=2.7979]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.52211 secs, and comparison 139.82 sec, and warnIfPerfScore > 24, and perfScore=25.32]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.72909 secs, and comparison 9.74486 sec, and warnIfPerfScore > 1.7, and perfScore=1.70094]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.49681 secs, and comparison 5.17948 sec, and warnIfPerfScore > 1.5, and perfScore=0.942271]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.34531 secs, and comparison 11.6188 sec, and warnIfPerfScore > 2.1, and perfScore=2.17365]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.51604 secs, and comparison 3.80594 sec, and warnIfPerfScore > 1.6, and perfScore=0.584087]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 7.02599 secs, and comparison 0.714781 sec, and warnIfPerfScore > 0.23, and perfScore=0.101734]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4129 secs, and comparison 11.6872 sec, and warnIfPerfScore > 1.3, and perfScore=1.02404]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 8.34133 secs, and comparison 5.6636 sec, and warnIfPerfScore > 1.2, and perfScore=0.678981]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.97141 secs, and comparison 1.81805 sec, and warnIfPerfScore > 0.33, and perfScore=0.228071]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.47803 secs, and comparison 37.6091 sec, and warnIfPerfScore > 6, and perfScore=5.02928]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.49401 secs, and comparison 4.85056 sec, and warnIfPerfScore > 0.8, and perfScore=0.647258]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.4931 secs, and comparison 7.35003 sec, and warnIfPerfScore > 1.4, and perfScore=0.980907]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.01072 secs, and comparison 3.33801 sec, and warnIfPerfScore > 0.65, and perfScore=0.416693]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.05787 secs, and comparison 35.1631 sec, and warnIfPerfScore > 4.4, and perfScore=4.36382]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.20231 secs, and comparison 3.24001 sec, and warnIfPerfScore > 0.6, and perfScore=0.395012]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.80356 secs, and comparison 3.25234 sec, and warnIfPerfScore > 0.6, and perfScore=0.416777]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.74868 secs, and comparison 3.51296 sec, and warnIfPerfScore > 0.6, and perfScore=0.453362]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.80046 secs, and comparison 5.21418 sec, and warnIfPerfScore > 1.3, and perfScore=0.668445]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.31545 secs, and comparison 8.08538 sec, and warnIfPerfScore > 1.3, and perfScore=0.972332]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 36.9653 secs, and comparison 4.9317 sec, and warnIfPerfScore > 0.3, and perfScore=0.133414]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.35561 secs, and comparison 9.53917 sec, and warnIfPerfScore > 1.5, and perfScore=1.78116]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.46993 secs, and comparison 2.6954 sec, and warnIfPerfScore > 0.55, and perfScore=0.416604]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.574964 sec, and warnIfPerfScore > 0.1, and perfScore=0.0383309]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.58802 sec, and warnIfPerfScore > 0.5, and perfScore=0.172535]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.20539 secs, and comparison 12.254 sec, and warnIfPerfScore > 2, and perfScore=1.97474]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.14645 secs, and comparison 13.7403 sec, and warnIfPerfScore > 3.6, and perfScore=1.68666]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 17 seconds]]]

Succeeded
