Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec 11 3:1:35 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 5.20134 secs, and comparison 4.24086 sec, and warnIfPerfScore > 0.65, and perfScore=0.815339]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.35353 secs, and comparison 2.44834 sec, and warnIfPerfScore > 0.5, and perfScore=0.457333]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.01014 secs, and comparison 7.06716 sec, and warnIfPerfScore > 1.05, and perfScore=0.882277]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.49205 secs, and comparison 7.03148 sec, and warnIfPerfScore > 1.15, and perfScore=1.08309]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.0844 secs, and comparison 2.20893 sec, and warnIfPerfScore > 0.48, and perfScore=0.219045]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 9.77749 secs, and comparison 2.6803 sec, and warnIfPerfScore > 0.57, and perfScore=0.274129]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.99636 secs, and comparison 18.4197 sec, and warnIfPerfScore > 2.9, and perfScore=2.63275]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.31497 secs, and comparison 18.9754 sec, and warnIfPerfScore > 2.9, and perfScore=2.59404]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.967 secs, and comparison 144.824 sec, and warnIfPerfScore > 24, and perfScore=24.2709]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.9131 secs, and comparison 9.88947 sec, and warnIfPerfScore > 1.7, and perfScore=1.67247]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.67242 secs, and comparison 5.28663 sec, and warnIfPerfScore > 1.5, and perfScore=0.931988]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.54382 secs, and comparison 11.725 sec, and warnIfPerfScore > 2.1, and perfScore=2.11497]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.90673 secs, and comparison 4.07469 sec, and warnIfPerfScore > 1.6, and perfScore=0.589959]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 7.27309 secs, and comparison 0.709056 sec, and warnIfPerfScore > 0.23, and perfScore=0.0974903]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.7117 secs, and comparison 12.2929 sec, and warnIfPerfScore > 1.3, and perfScore=1.04962]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.62828 secs, and comparison 5.33375 sec, and warnIfPerfScore > 1.2, and perfScore=0.618171]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.60445 secs, and comparison 2.09946 sec, and warnIfPerfScore > 0.33, and perfScore=0.243996]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.34347 secs, and comparison 38.8465 sec, and warnIfPerfScore > 6, and perfScore=4.65591]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.26943 secs, and comparison 5.14564 sec, and warnIfPerfScore > 0.8, and perfScore=0.622248]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.25942 secs, and comparison 7.29283 sec, and warnIfPerfScore > 1.4, and perfScore=0.882971]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.47952 secs, and comparison 3.48684 sec, and warnIfPerfScore > 0.65, and perfScore=0.411207]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.90464 secs, and comparison 36.2841 sec, and warnIfPerfScore > 4.4, and perfScore=4.07474]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.54804 secs, and comparison 3.41712 sec, and warnIfPerfScore > 0.6, and perfScore=0.399755]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.5294 secs, and comparison 3.36896 sec, and warnIfPerfScore > 0.6, and perfScore=0.394982]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.51429 secs, and comparison 3.39254 sec, and warnIfPerfScore > 0.6, and perfScore=0.398452]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.46016 secs, and comparison 5.4669 sec, and warnIfPerfScore > 1.3, and perfScore=0.646193]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.14723 secs, and comparison 8.70837 sec, and warnIfPerfScore > 1.3, and perfScore=0.952023]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 39.8582 secs, and comparison 5.96962 sec, and warnIfPerfScore > 0.3, and perfScore=0.149771]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.81296 secs, and comparison 10.1188 sec, and warnIfPerfScore > 1.5, and perfScore=1.74073]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.50515 secs, and comparison 2.73474 sec, and warnIfPerfScore > 0.55, and perfScore=0.420396]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.610907 sec, and warnIfPerfScore > 0.1, and perfScore=0.0407271]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.96269 sec, and warnIfPerfScore > 0.5, and perfScore=0.197513]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.96457 secs, and comparison 12.9054 sec, and warnIfPerfScore > 2, and perfScore=1.853]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.19991 secs, and comparison 14.7005 sec, and warnIfPerfScore > 3.6, and perfScore=1.79277]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 44 seconds]]]

Succeeded
