Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Nov 25 20:9:15 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.95015 secs, and comparison 4.5862 sec, and warnIfPerfScore > 0.62, and perfScore=0.57687]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.06275 secs, and comparison 3.01171 sec, and warnIfPerfScore > 0.5, and perfScore=0.496757]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.37515 secs, and comparison 6.73048 sec, and warnIfPerfScore > 1.05, and perfScore=1.05574]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.553 secs, and comparison 4.01554 sec, and warnIfPerfScore > 0.48, and perfScore=1.13018]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.09572 secs, and comparison 4.69528 sec, and warnIfPerfScore > 0.55, and perfScore=1.14639]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 2.79357 secs, and comparison 17.4409 sec, and warnIfPerfScore > 2.9, and perfScore=6.24322]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.5779 secs, and comparison 18.1597 sec, and warnIfPerfScore > 2.9, and perfScore=5.07552]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 4.79408 secs, and comparison 62.2635 sec, and warnIfPerfScore > 9.7, and perfScore=12.9876]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.43839 secs, and comparison 9.76734 sec, and warnIfPerfScore > 1.6, and perfScore=2.20065]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.00153 secs, and comparison 6.15288 sec, and warnIfPerfScore > 1.5, and perfScore=1.02522]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 2.57211 secs, and comparison 10.8967 sec, and warnIfPerfScore > 2.1, and perfScore=4.23646]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.61727 secs, and comparison 4.35801 sec, and warnIfPerfScore > 1.3, and perfScore=0.943849]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.84112 secs, and comparison 1.84498 sec, and warnIfPerfScore > 0.18, and perfScore=0.381106]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.67611 secs, and comparison 4.92141 sec, and warnIfPerfScore > 1.3, and perfScore=1.33876]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.37999 secs, and comparison 7.59159 sec, and warnIfPerfScore > 1.2, and perfScore=2.24604]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 14.9283 secs, and comparison 1.25015 sec, and warnIfPerfScore > 0.33, and perfScore=0.0837438]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.27118 secs, and comparison 41.7004 sec, and warnIfPerfScore > 6, and perfScore=12.7478]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 9.92541 secs, and comparison 3.57835 sec, and warnIfPerfScore > 0.5, and perfScore=0.360524]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 4.92622 secs, and comparison 37.3194 sec, and warnIfPerfScore > 4.4, and perfScore=7.57567]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.6354 secs, and comparison 3.58909 sec, and warnIfPerfScore > 0.6, and perfScore=0.308462]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.33822 secs, and comparison 11.5915 sec, and warnIfPerfScore > 1.5, and perfScore=1.57961]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.39242 secs, and comparison 2.58668 sec, and warnIfPerfScore > 0.55, and perfScore=0.34991]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 15 secs, and comparison 1.0526 sec, and warnIfPerfScore > 0.25, and perfScore=0.0701733]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15 secs, and comparison 4.17936 sec, and warnIfPerfScore > 0.5, and perfScore=0.278624]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 42 seconds]]]

Succeeded
