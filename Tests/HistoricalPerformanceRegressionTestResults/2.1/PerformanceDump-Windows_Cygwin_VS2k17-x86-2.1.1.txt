Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 17:24:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.5813 secs, and comparison 5.87125 sec, and warnIfPerfScore > 0.65, and perfScore=0.432304]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.8057 secs, and comparison 3.63455 sec, and warnIfPerfScore > 0.5, and perfScore=0.283822]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 12.9517 secs, and comparison 11.3544 sec, and warnIfPerfScore > 1.05, and perfScore=0.876673]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.1175 secs, and comparison 11.1764 sec, and warnIfPerfScore > 1.15, and perfScore=1.10466]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 12.6117 secs, and comparison 3.78934 sec, and warnIfPerfScore > 0.48, and perfScore=0.300462]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.121 secs, and comparison 4.17651 sec, and warnIfPerfScore > 0.57, and perfScore=0.318307]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.774 secs, and comparison 33.4914 sec, and warnIfPerfScore > 2.9, and perfScore=2.26691]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 16.1256 secs, and comparison 34.6547 sec, and warnIfPerfScore > 2.9, and perfScore=2.14905]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 15.2978 secs, and comparison 194.709 sec, and warnIfPerfScore > 24, and perfScore=12.7279]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.9242 secs, and comparison 16.7724 sec, and warnIfPerfScore > 1.7, and perfScore=1.20454]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.8691 secs, and comparison 14.6328 sec, and warnIfPerfScore > 1.5, and perfScore=0.984106]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.372 secs, and comparison 19.9395 sec, and warnIfPerfScore > 2.1, and perfScore=1.75339]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 15.7914 secs, and comparison 11.1177 sec, and warnIfPerfScore > 1.6, and perfScore=0.704035]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 16.4549 secs, and comparison 1.62658 sec, and warnIfPerfScore > 0.23, and perfScore=0.0988506]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 18.5739 secs, and comparison 15.7964 sec, and warnIfPerfScore > 1.3, and perfScore=0.850463]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 12.6351 secs, and comparison 9.24376 sec, and warnIfPerfScore > 1.2, and perfScore=0.731595]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 11.808 secs, and comparison 3.14371 sec, and warnIfPerfScore > 0.33, and perfScore=0.266237]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 11.8446 secs, and comparison 54.8943 sec, and warnIfPerfScore > 6, and perfScore=4.63454]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 11.9462 secs, and comparison 8.24317 sec, and warnIfPerfScore > 0.8, and perfScore=0.690026]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.1949 secs, and comparison 17.9874 sec, and warnIfPerfScore > 1.4, and perfScore=1.475]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.475}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.6369 secs, and comparison 4.64378 sec, and warnIfPerfScore > 0.65, and perfScore=0.399057]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.0314 secs, and comparison 49.5735 sec, and warnIfPerfScore > 4.4, and perfScore=3.80415]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.4333 secs, and comparison 4.99554 sec, and warnIfPerfScore > 0.6, and perfScore=0.43693]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.4612 secs, and comparison 4.82169 sec, and warnIfPerfScore > 0.6, and perfScore=0.420698]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.5051 secs, and comparison 5.03663 sec, and warnIfPerfScore > 0.6, and perfScore=0.437772]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 11.5799 secs, and comparison 9.87652 sec, and warnIfPerfScore > 1.3, and perfScore=0.852902]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.4665 secs, and comparison 14.5769 sec, and warnIfPerfScore > 1.3, and perfScore=1.08245]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 77.8259 secs, and comparison 9.2541 sec, and warnIfPerfScore > 0.3, and perfScore=0.118908]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.2201 secs, and comparison 22.1158 sec, and warnIfPerfScore > 1.5, and perfScore=1.45306]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 17.8191 secs, and comparison 5.77419 sec, and warnIfPerfScore > 0.55, and perfScore=0.324044]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 15 secs, and comparison 1.46198 sec, and warnIfPerfScore > 0.1, and perfScore=0.0974655]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.51564 sec, and warnIfPerfScore > 0.5, and perfScore=0.367709]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.187 secs, and comparison 23.1903 sec, and warnIfPerfScore > 2, and perfScore=1.63461]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.0522 secs, and comparison 39.1656 sec, and warnIfPerfScore > 3.6, and perfScore=2.60199]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 36 seconds]]]

Succeeded
