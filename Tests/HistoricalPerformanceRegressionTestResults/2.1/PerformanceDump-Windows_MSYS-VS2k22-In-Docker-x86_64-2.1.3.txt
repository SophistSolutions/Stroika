Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 11 16:37:33 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 5.79184 secs, and comparison 4.31368 sec, and warnIfPerfScore > 0.65, and perfScore=0.744787]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.45146 secs, and comparison 2.6477 sec, and warnIfPerfScore > 0.5, and perfScore=0.485686]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.73291 secs, and comparison 7.09047 sec, and warnIfPerfScore > 1.05, and perfScore=0.916921]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.42412 secs, and comparison 7.23566 sec, and warnIfPerfScore > 1.15, and perfScore=1.12633]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.39712 secs, and comparison 2.24256 sec, and warnIfPerfScore > 0.48, and perfScore=0.238643]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.18095 secs, and comparison 2.71365 sec, and warnIfPerfScore > 0.57, and perfScore=0.295574]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.27589 secs, and comparison 18.735 sec, and warnIfPerfScore > 2.9, and perfScore=2.98524]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.50464 secs, and comparison 18.9149 sec, and warnIfPerfScore > 2.9, and perfScore=2.90791]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.6598 secs, and comparison 131.917 sec, and warnIfPerfScore > 24, and perfScore=23.3077]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.62239 secs, and comparison 9.94957 sec, and warnIfPerfScore > 1.7, and perfScore=1.76963]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.16192 secs, and comparison 5.05367 sec, and warnIfPerfScore > 1.5, and perfScore=0.979028]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.20036 secs, and comparison 11.92 sec, and warnIfPerfScore > 2.1, and perfScore=2.29214]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.3619 secs, and comparison 3.8426 sec, and warnIfPerfScore > 1.6, and perfScore=0.338202]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 11.8868 secs, and comparison 0.662396 sec, and warnIfPerfScore > 0.23, and perfScore=0.0557252]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.7393 secs, and comparison 11.9819 sec, and warnIfPerfScore > 1.3, and perfScore=1.02067]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.154 secs, and comparison 5.15668 sec, and warnIfPerfScore > 1.2, and perfScore=0.462316]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 8.06309 secs, and comparison 1.86878 sec, and warnIfPerfScore > 0.33, and perfScore=0.23177]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.7255 secs, and comparison 38.2914 sec, and warnIfPerfScore > 6, and perfScore=3.57013]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.63705 secs, and comparison 4.9148 sec, and warnIfPerfScore > 0.8, and perfScore=0.643547]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.60512 secs, and comparison 7.47446 sec, and warnIfPerfScore > 1.4, and perfScore=0.98282]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.1006 secs, and comparison 3.44934 sec, and warnIfPerfScore > 0.65, and perfScore=0.425813]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.13765 secs, and comparison 35.8416 sec, and warnIfPerfScore > 4.4, and perfScore=4.40442]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.01907 secs, and comparison 3.32449 sec, and warnIfPerfScore > 0.6, and perfScore=0.414573]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.02046 secs, and comparison 3.32118 sec, and warnIfPerfScore > 0.6, and perfScore=0.414088]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.02059 secs, and comparison 3.33822 sec, and warnIfPerfScore > 0.6, and perfScore=0.416207]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.03247 secs, and comparison 4.90693 sec, and warnIfPerfScore > 1.3, and perfScore=0.610886]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.63336 secs, and comparison 8.24555 sec, and warnIfPerfScore > 1.3, and perfScore=0.955081]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 37.4669 secs, and comparison 6.07088 sec, and warnIfPerfScore > 0.3, and perfScore=0.162033]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.99581 secs, and comparison 9.46406 sec, and warnIfPerfScore > 1.5, and perfScore=1.57845]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.22923 secs, and comparison 2.67851 sec, and warnIfPerfScore > 0.55, and perfScore=0.429991]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.610678 sec, and warnIfPerfScore > 0.1, and perfScore=0.0407119]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.85085 sec, and warnIfPerfScore > 0.5, and perfScore=0.190057]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.85698 secs, and comparison 12.6998 sec, and warnIfPerfScore > 2, and perfScore=1.85209]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.21042 secs, and comparison 14.0643 sec, and warnIfPerfScore > 3.6, and perfScore=1.95056]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 28 seconds]]]

Succeeded
