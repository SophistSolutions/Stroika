Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jan  4 1:2:39 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.3303 secs, and comparison 4.67091 sec, and warnIfPerfScore > 0.62, and perfScore=0.452157]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.3242 secs, and comparison 2.9002 sec, and warnIfPerfScore > 0.5, and perfScore=0.280913]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.4831 secs, and comparison 8.84317 sec, and warnIfPerfScore > 1.05, and perfScore=0.843564]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.3815 secs, and comparison 4.08062 sec, and warnIfPerfScore > 0.48, and perfScore=0.393067]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.4506 secs, and comparison 4.27751 sec, and warnIfPerfScore > 0.55, and perfScore=0.409309]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.2587 secs, and comparison 24.359 sec, and warnIfPerfScore > 2.9, and perfScore=2.16357]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.9253 secs, and comparison 26.597 sec, and warnIfPerfScore > 2.9, and perfScore=2.2303]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 11.5422 secs, and comparison 87.0328 sec, and warnIfPerfScore > 9.7, and perfScore=7.54043]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 11.3232 secs, and comparison 11.2285 sec, and warnIfPerfScore > 1.6, and perfScore=0.991638]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.5233 secs, and comparison 12.4516 sec, and warnIfPerfScore > 1.5, and perfScore=0.994282]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.99235 secs, and comparison 12.0773 sec, and warnIfPerfScore > 2.1, and perfScore=1.34306]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 12.5022 secs, and comparison 8.85312 sec, and warnIfPerfScore > 1.3, and perfScore=0.708123]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.086 secs, and comparison 2.61883 sec, and warnIfPerfScore > 0.18, and perfScore=0.200125]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.18 and got 0.200125}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.7893 secs, and comparison 12.9238 sec, and warnIfPerfScore > 1.3, and perfScore=1.01051]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 10.26 secs, and comparison 7.64799 sec, and warnIfPerfScore > 1.2, and perfScore=0.745417]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.5307 secs, and comparison 2.02329 sec, and warnIfPerfScore > 0.33, and perfScore=0.212292]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 10.1101 secs, and comparison 43.9761 sec, and warnIfPerfScore > 6, and perfScore=4.34973]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.31846 secs, and comparison 4.05977 sec, and warnIfPerfScore > 0.5, and perfScore=0.43567]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.7663 secs, and comparison 38.8517 sec, and warnIfPerfScore > 4.4, and perfScore=3.97814]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.2377 secs, and comparison 4.65685 sec, and warnIfPerfScore > 0.6, and perfScore=0.504114]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.3014 secs, and comparison 19.1775 sec, and warnIfPerfScore > 1.5, and perfScore=1.10844]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.6228 secs, and comparison 4.42806 sec, and warnIfPerfScore > 0.55, and perfScore=0.302818]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.52961 sec, and warnIfPerfScore > 0.25, and perfScore=0.101974]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.70462 sec, and warnIfPerfScore > 0.5, and perfScore=0.246975]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.6311 secs, and comparison 18.8309 sec, and warnIfPerfScore > 1.9, and perfScore=1.61901]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.906 secs, and comparison 31.8976 sec, and warnIfPerfScore > 3.1, and perfScore=2.67911]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 18 seconds]]]

Succeeded
