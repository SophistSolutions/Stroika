Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Oct 23 3:42:15 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.08559 secs, and comparison 4.66377 sec, and warnIfPerfScore > 0.65, and perfScore=0.766364]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.07792 secs, and comparison 2.79421 sec, and warnIfPerfScore > 0.5, and perfScore=0.459732]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.29619 secs, and comparison 7.85274 sec, and warnIfPerfScore > 1.05, and perfScore=0.844727]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.06193 secs, and comparison 7.81662 sec, and warnIfPerfScore > 1.15, and perfScore=0.969571]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.8546 secs, and comparison 2.42784 sec, and warnIfPerfScore > 0.48, and perfScore=0.22367]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 10.367 secs, and comparison 3.04274 sec, and warnIfPerfScore > 0.57, and perfScore=0.293501]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.29756 secs, and comparison 20.5931 sec, and warnIfPerfScore > 2.9, and perfScore=2.82192]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 7.53854 secs, and comparison 20.7537 sec, and warnIfPerfScore > 2.9, and perfScore=2.75302]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 6.35267 secs, and comparison 142.648 sec, and warnIfPerfScore > 24, and perfScore=22.4548]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.3411 secs, and comparison 10.761 sec, and warnIfPerfScore > 1.7, and perfScore=1.69702]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 6.62317 secs, and comparison 6.06466 sec, and warnIfPerfScore > 1.5, and perfScore=0.915674]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.88651 secs, and comparison 12.9987 sec, and warnIfPerfScore > 2.1, and perfScore=2.20822]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.956 secs, and comparison 4.34494 sec, and warnIfPerfScore > 1.6, and perfScore=0.335362]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 13.57 secs, and comparison 0.786847 sec, and warnIfPerfScore > 0.23, and perfScore=0.0579843]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.557 secs, and comparison 13.0333 sec, and warnIfPerfScore > 1.3, and perfScore=1.03792]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 12.4185 secs, and comparison 5.76211 sec, and warnIfPerfScore > 1.2, and perfScore=0.463995]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.31055 secs, and comparison 2.05584 sec, and warnIfPerfScore > 0.33, and perfScore=0.220807]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.88375 secs, and comparison 41.6092 sec, and warnIfPerfScore > 6, and perfScore=4.68375]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.7125 secs, and comparison 5.61274 sec, and warnIfPerfScore > 0.8, and perfScore=0.644216]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.53561 secs, and comparison 8.42128 sec, and warnIfPerfScore > 1.4, and perfScore=0.986606]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.14144 secs, and comparison 3.68803 sec, and warnIfPerfScore > 0.65, and perfScore=0.403441]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 9.13974 secs, and comparison 38.391 sec, and warnIfPerfScore > 4.4, and perfScore=4.20045]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.31235 secs, and comparison 3.58982 sec, and warnIfPerfScore > 0.6, and perfScore=0.385491]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.21961 secs, and comparison 3.63157 sec, and warnIfPerfScore > 0.6, and perfScore=0.393897]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.24503 secs, and comparison 3.58281 sec, and warnIfPerfScore > 0.6, and perfScore=0.38754]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 9.1321 secs, and comparison 5.77528 sec, and warnIfPerfScore > 1.3, and perfScore=0.632416]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 9.77004 secs, and comparison 9.22792 sec, and warnIfPerfScore > 1.3, and perfScore=0.944512]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 41.7482 secs, and comparison 6.55865 sec, and warnIfPerfScore > 0.3, and perfScore=0.1571]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.25735 secs, and comparison 10.2683 sec, and warnIfPerfScore > 1.5, and perfScore=1.641]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.86502 secs, and comparison 3.1031 sec, and warnIfPerfScore > 0.55, and perfScore=0.452017]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.64594 sec, and warnIfPerfScore > 0.1, and perfScore=0.0430627]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.10954 sec, and warnIfPerfScore > 0.5, and perfScore=0.207303]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.4229 secs, and comparison 13.4432 sec, and warnIfPerfScore > 2, and perfScore=1.81104]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.33486 secs, and comparison 15.5166 sec, and warnIfPerfScore > 3.6, and perfScore=1.66222]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 39 seconds]]]

Succeeded
