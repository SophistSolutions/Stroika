Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec 11 10:12:18 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 2.44967 secs, and comparison 1.42483 sec, and warnIfPerfScore > 0.65, and perfScore=0.581641]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 2.5756 secs, and comparison 2.7479 sec, and warnIfPerfScore > 0.5, and perfScore=1.0669]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 2.18551 secs, and comparison 6.59838 sec, and warnIfPerfScore > 1.05, and perfScore=3.01916]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 1.91594 secs, and comparison 6.57123 sec, and warnIfPerfScore > 1.15, and perfScore=3.42976]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.20003 secs, and comparison 0.838883 sec, and warnIfPerfScore > 0.48, and perfScore=0.262149]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 3.80218 secs, and comparison 0.993485 sec, and warnIfPerfScore > 0.57, and perfScore=0.261294]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.88617 secs, and comparison 10.7503 sec, and warnIfPerfScore > 2.9, and perfScore=3.72478]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 3.39612 secs, and comparison 10.6498 sec, and warnIfPerfScore > 2.9, and perfScore=3.13588]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 4.34451 secs, and comparison 35.6301 sec, and warnIfPerfScore > 24, and perfScore=8.20119]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.29883 secs, and comparison 6.70265 sec, and warnIfPerfScore > 1.7, and perfScore=1.55918]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.70742 secs, and comparison 4.45792 sec, and warnIfPerfScore > 1.5, and perfScore=0.946999]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 2.37218 secs, and comparison 8.53311 sec, and warnIfPerfScore > 2.1, and perfScore=3.59717]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.33262 secs, and comparison 3.38445 sec, and warnIfPerfScore > 1.6, and perfScore=1.01555]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 3.63571 secs, and comparison 1.12118 sec, and warnIfPerfScore > 0.23, and perfScore=0.308379]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.00296 secs, and comparison 3.85562 sec, and warnIfPerfScore > 1.3, and perfScore=1.28394]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.75135 secs, and comparison 5.99518 sec, and warnIfPerfScore > 1.2, and perfScore=2.179]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.6842 secs, and comparison 1.3153 sec, and warnIfPerfScore > 0.33, and perfScore=0.112571]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 2.74626 secs, and comparison 42.0374 sec, and warnIfPerfScore > 6, and perfScore=15.3071]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.71017 secs, and comparison 5.35659 sec, and warnIfPerfScore > 0.8, and perfScore=1.97648]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.66092 secs, and comparison 6.14013 sec, and warnIfPerfScore > 1.4, and perfScore=2.30752]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.6392 secs, and comparison 3.55594 sec, and warnIfPerfScore > 0.65, and perfScore=0.305513]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.69848 secs, and comparison 38.7091 sec, and warnIfPerfScore > 4.4, and perfScore=10.4662]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.93333 secs, and comparison 3.55935 sec, and warnIfPerfScore > 0.6, and perfScore=0.398435]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.66659 secs, and comparison 3.52765 sec, and warnIfPerfScore > 0.6, and perfScore=0.40704]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.58441 secs, and comparison 3.49404 sec, and warnIfPerfScore > 0.6, and perfScore=0.407022]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 8.49185 secs, and comparison 3.70227 sec, and warnIfPerfScore > 1.3, and perfScore=0.435979]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 14.5752 secs, and comparison 8.14125 sec, and warnIfPerfScore > 1.3, and perfScore=0.558568]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.7719 secs, and comparison 4.90063 sec, and warnIfPerfScore > 0.3, and perfScore=0.355842]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.58859 secs, and comparison 10.4456 sec, and warnIfPerfScore > 1.5, and perfScore=1.8691]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.63749 secs, and comparison 1.59356 sec, and warnIfPerfScore > 0.55, and perfScore=0.240085]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.570825 sec, and warnIfPerfScore > 0.1, and perfScore=0.038055]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 15 secs, and comparison 1.17788 sec, and warnIfPerfScore > 0.5, and perfScore=0.0785254]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 51 seconds]]]

Succeeded
