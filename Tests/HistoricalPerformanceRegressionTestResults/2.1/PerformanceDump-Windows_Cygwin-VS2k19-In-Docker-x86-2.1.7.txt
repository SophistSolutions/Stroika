Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 22 17:39:22 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.35974 secs, and comparison 4.5752 sec, and warnIfPerfScore > 0.65, and perfScore=0.621653]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.31466 secs, and comparison 3.00967 sec, and warnIfPerfScore > 0.5, and perfScore=0.411458]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 8.99399 secs, and comparison 7.82287 sec, and warnIfPerfScore > 1.05, and perfScore=0.869789]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.10071 secs, and comparison 7.83191 sec, and warnIfPerfScore > 1.15, and perfScore=1.10298]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.20364 secs, and comparison 2.4062 sec, and warnIfPerfScore > 0.48, and perfScore=0.293309]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.0214 secs, and comparison 2.92665 sec, and warnIfPerfScore > 0.57, and perfScore=0.364855]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.66521 secs, and comparison 21.638 sec, and warnIfPerfScore > 2.9, and perfScore=2.49711]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.75444 secs, and comparison 22.4334 sec, and warnIfPerfScore > 2.9, and perfScore=2.56251]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.31319 secs, and comparison 158.522 sec, and warnIfPerfScore > 24, and perfScore=19.0687]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.32584 secs, and comparison 11.4233 sec, and warnIfPerfScore > 1.7, and perfScore=1.55931]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.91257 secs, and comparison 7.83428 sec, and warnIfPerfScore > 1.5, and perfScore=0.990105]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.21231 secs, and comparison 13.5327 sec, and warnIfPerfScore > 2.1, and perfScore=1.87634]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.93784 secs, and comparison 7.9049 sec, and warnIfPerfScore > 1.6, and perfScore=0.88443]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 9.36163 secs, and comparison 1.36146 sec, and warnIfPerfScore > 0.23, and perfScore=0.14543]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.956 secs, and comparison 13.7938 sec, and warnIfPerfScore > 1.3, and perfScore=1.06466]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.1045 secs, and comparison 5.41988 sec, and warnIfPerfScore > 1.2, and perfScore=0.536383]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.32939 secs, and comparison 1.59632 sec, and warnIfPerfScore > 0.33, and perfScore=0.252208]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.71568 secs, and comparison 41.7308 sec, and warnIfPerfScore > 6, and perfScore=4.2952]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 9.74614 secs, and comparison 5.91484 sec, and warnIfPerfScore > 0.8, and perfScore=0.60689]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 9.71851 secs, and comparison 9.54873 sec, and warnIfPerfScore > 1.4, and perfScore=0.98253]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.35022 secs, and comparison 3.66056 sec, and warnIfPerfScore > 0.65, and perfScore=0.576446]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.1307 secs, and comparison 39.1243 sec, and warnIfPerfScore > 4.4, and perfScore=3.86195]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.53513 secs, and comparison 3.62096 sec, and warnIfPerfScore > 0.6, and perfScore=0.554076]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.53597 secs, and comparison 3.62555 sec, and warnIfPerfScore > 0.6, and perfScore=0.554708]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.50366 secs, and comparison 3.62612 sec, and warnIfPerfScore > 0.6, and perfScore=0.55755]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.50332 secs, and comparison 4.88014 sec, and warnIfPerfScore > 1.3, and perfScore=0.750408]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.97697 secs, and comparison 8.7569 sec, and warnIfPerfScore > 1.3, and perfScore=1.25511]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 47.2044 secs, and comparison 6.16233 sec, and warnIfPerfScore > 0.3, and perfScore=0.130546]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.73299 secs, and comparison 12.5099 sec, and warnIfPerfScore > 1.5, and perfScore=1.43249]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.25738 secs, and comparison 3.05381 sec, and warnIfPerfScore > 0.55, and perfScore=0.420787]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.818155 sec, and warnIfPerfScore > 0.1, and perfScore=0.0545436]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.14965 sec, and warnIfPerfScore > 0.5, and perfScore=0.209977]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.27337 secs, and comparison 13.4752 sec, and warnIfPerfScore > 2, and perfScore=1.62874]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.1525 secs, and comparison 28.9523 sec, and warnIfPerfScore > 3.6, and perfScore=3.16333]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 10 seconds]]]

Succeeded
