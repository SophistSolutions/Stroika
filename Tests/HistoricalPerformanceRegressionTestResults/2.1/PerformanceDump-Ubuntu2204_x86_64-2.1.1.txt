Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 23:12:7 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 3.98947 secs, and comparison 1.3941 sec, and warnIfPerfScore > 0.65, and perfScore=0.349444]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.13629 secs, and comparison 3.14341 sec, and warnIfPerfScore > 0.5, and perfScore=1.00227]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 2.51234 secs, and comparison 6.74859 sec, and warnIfPerfScore > 1.05, and perfScore=2.68618]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 2.11669 secs, and comparison 6.75735 sec, and warnIfPerfScore > 1.15, and perfScore=3.19241]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 3.85415 secs, and comparison 0.959427 sec, and warnIfPerfScore > 0.48, and perfScore=0.248933]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.54112 secs, and comparison 1.04037 sec, and warnIfPerfScore > 0.57, and perfScore=0.229099]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 3.44638 secs, and comparison 12.5433 sec, and warnIfPerfScore > 2.9, and perfScore=3.63957]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 4.01544 secs, and comparison 12.8758 sec, and warnIfPerfScore > 2.9, and perfScore=3.20656]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 5.62513 secs, and comparison 46.3278 sec, and warnIfPerfScore > 24, and perfScore=8.23586]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 8.7167 secs, and comparison 7.36521 sec, and warnIfPerfScore > 1.7, and perfScore=0.844954]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 6.1991 secs, and comparison 5.84496 sec, and warnIfPerfScore > 1.5, and perfScore=0.942873]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 2.76762 secs, and comparison 9.20753 sec, and warnIfPerfScore > 2.1, and perfScore=3.32688]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 4.1386 secs, and comparison 3.45533 sec, and warnIfPerfScore > 1.6, and perfScore=0.834904]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 4.31792 secs, and comparison 1.36346 sec, and warnIfPerfScore > 0.23, and perfScore=0.315767]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.16773 secs, and comparison 4.10346 sec, and warnIfPerfScore > 1.3, and perfScore=1.2954]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 4.42683 secs, and comparison 7.24371 sec, and warnIfPerfScore > 1.2, and perfScore=1.63632]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 19.0928 secs, and comparison 3.04334 sec, and warnIfPerfScore > 0.33, and perfScore=0.159397]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.8339 secs, and comparison 41.0616 sec, and warnIfPerfScore > 6, and perfScore=14.4894]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 2.83747 secs, and comparison 6.43927 sec, and warnIfPerfScore > 0.8, and perfScore=2.26937]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 2.84561 secs, and comparison 8.28106 sec, and warnIfPerfScore > 1.4, and perfScore=2.91011]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 18.931 secs, and comparison 3.69378 sec, and warnIfPerfScore > 0.65, and perfScore=0.195118]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 4.48199 secs, and comparison 39.1144 sec, and warnIfPerfScore > 4.4, and perfScore=8.72703]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.4944 secs, and comparison 3.7311 sec, and warnIfPerfScore > 0.6, and perfScore=0.324601]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.0036 secs, and comparison 3.73098 sec, and warnIfPerfScore > 0.6, and perfScore=0.310821]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.4695 secs, and comparison 3.66003 sec, and warnIfPerfScore > 0.6, and perfScore=0.293518]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.5762 secs, and comparison 4.20749 sec, and warnIfPerfScore > 1.3, and perfScore=0.363461]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 18.858 secs, and comparison 11.9129 sec, and warnIfPerfScore > 1.3, and perfScore=0.631715]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 22.934 secs, and comparison 7.04207 sec, and warnIfPerfScore > 0.3, and perfScore=0.307059]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.61374 secs, and comparison 17.0615 sec, and warnIfPerfScore > 1.5, and perfScore=1.98072]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.56757 secs, and comparison 2.26854 sec, and warnIfPerfScore > 0.55, and perfScore=0.345415]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.051
	DETAILS:         	[baseline test 15 secs, and comparison 0.769088 sec, and warnIfPerfScore > 0.1, and perfScore=0.0512725]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43497 sec, and warnIfPerfScore > 0.5, and perfScore=0.0956644]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 48 seconds]]]

Succeeded
