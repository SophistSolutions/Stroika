Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jan  6 15:36:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.88473 secs, and comparison 4.95164 sec, and warnIfPerfScore > 0.65, and perfScore=0.841439]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.83091 secs, and comparison 2.72849 sec, and warnIfPerfScore > 0.5, and perfScore=0.467936]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.81326 secs, and comparison 8.32233 sec, and warnIfPerfScore > 1.05, and perfScore=0.944296]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.18684 secs, and comparison 7.92912 sec, and warnIfPerfScore > 1.15, and perfScore=1.10328]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.01419 secs, and comparison 2.92577 sec, and warnIfPerfScore > 0.48, and perfScore=0.417121]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.03175 secs, and comparison 3.54597 sec, and warnIfPerfScore > 0.57, and perfScore=0.504281]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.52524 secs, and comparison 20.5538 sec, and warnIfPerfScore > 2.9, and perfScore=3.14989]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.86373 secs, and comparison 20.4023 sec, and warnIfPerfScore > 2.9, and perfScore=2.97248]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	26
	DETAILS:         	[baseline test 6.18136 secs, and comparison 158.399 sec, and warnIfPerfScore > 24, and perfScore=25.6252]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.28484 secs, and comparison 11.0226 sec, and warnIfPerfScore > 1.6, and perfScore=1.75384]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.16795 secs, and comparison 6.44713 sec, and warnIfPerfScore > 1.5, and perfScore=0.899439]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.6193 secs, and comparison 13.7109 sec, and warnIfPerfScore > 2.1, and perfScore=2.43997]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 7.50295 secs, and comparison 5.47784 sec, and warnIfPerfScore > 1.6, and perfScore=0.730091]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 8.28405 secs, and comparison 0.749973 sec, and warnIfPerfScore > 0.23, and perfScore=0.0905322]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.4003 secs, and comparison 14.0599 sec, and warnIfPerfScore > 1.3, and perfScore=1.04922]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 9.48923 secs, and comparison 5.72761 sec, and warnIfPerfScore > 1.2, and perfScore=0.60359]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 9.50864 secs, and comparison 2.26678 sec, and warnIfPerfScore > 0.33, and perfScore=0.238392]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 8.90419 secs, and comparison 45.2768 sec, and warnIfPerfScore > 6, and perfScore=5.08489]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.82378 secs, and comparison 5.4623 sec, and warnIfPerfScore > 0.8, and perfScore=0.619043]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.82826 secs, and comparison 8.56312 sec, and warnIfPerfScore > 1.3, and perfScore=0.969967]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.47614 secs, and comparison 3.86334 sec, and warnIfPerfScore > 0.65, and perfScore=0.407691]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.69978 secs, and comparison 41.6434 sec, and warnIfPerfScore > 4.4, and perfScore=4.29323]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.84596 secs, and comparison 3.56543 sec, and warnIfPerfScore > 0.6, and perfScore=0.403057]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.22228 secs, and comparison 3.28794 sec, and warnIfPerfScore > 0.6, and perfScore=0.399882]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.89475 secs, and comparison 3.28138 sec, and warnIfPerfScore > 0.6, and perfScore=0.415641]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.95031 secs, and comparison 4.91074 sec, and warnIfPerfScore > 1.3, and perfScore=0.617679]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.34525 secs, and comparison 7.6774 sec, and warnIfPerfScore > 1.3, and perfScore=0.919972]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 33.6816 secs, and comparison 6.18793 sec, and warnIfPerfScore > 0.3, and perfScore=0.183718]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.51858 secs, and comparison 8.83414 sec, and warnIfPerfScore > 1.5, and perfScore=1.6008]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.75894 secs, and comparison 2.57001 sec, and warnIfPerfScore > 0.55, and perfScore=0.446264]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.047
	DETAILS:         	[baseline test 15 secs, and comparison 0.706935 sec, and warnIfPerfScore > 0.1, and perfScore=0.047129]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.7119 sec, and warnIfPerfScore > 0.5, and perfScore=0.180793]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 5.73959 secs, and comparison 7.65589 sec, and warnIfPerfScore > 2, and perfScore=1.33387]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.75051 secs, and comparison 13.0197 sec, and warnIfPerfScore > 3.1, and perfScore=1.9287]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 15 seconds]]]

Succeeded
