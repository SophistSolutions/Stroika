Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 12:45:53 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.23385 secs, and comparison 4.39797 sec, and warnIfPerfScore > 0.65, and perfScore=0.607971]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.22031 secs, and comparison 2.86663 sec, and warnIfPerfScore > 0.5, and perfScore=0.397023]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.60208 secs, and comparison 7.54306 sec, and warnIfPerfScore > 1.05, and perfScore=0.876888]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.89463 secs, and comparison 7.51594 sec, and warnIfPerfScore > 1.15, and perfScore=1.09012]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 8.13287 secs, and comparison 2.28735 sec, and warnIfPerfScore > 0.48, and perfScore=0.281247]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.15665 secs, and comparison 2.77118 sec, and warnIfPerfScore > 0.57, and perfScore=0.339746]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.20623 secs, and comparison 20.8898 sec, and warnIfPerfScore > 2.9, and perfScore=2.5456]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.30533 secs, and comparison 21.7627 sec, and warnIfPerfScore > 2.9, and perfScore=2.62033]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.74704 secs, and comparison 149.452 sec, and warnIfPerfScore > 24, and perfScore=19.2915]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.46256 secs, and comparison 10.9596 sec, and warnIfPerfScore > 1.7, and perfScore=1.46861]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 7.85485 secs, and comparison 7.6027 sec, and warnIfPerfScore > 1.5, and perfScore=0.9679]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.12834 secs, and comparison 12.8594 sec, and warnIfPerfScore > 2.1, and perfScore=1.80398]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 8.95631 secs, and comparison 6.63421 sec, and warnIfPerfScore > 1.6, and perfScore=0.74073]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.36517 secs, and comparison 1.28635 sec, and warnIfPerfScore > 0.23, and perfScore=0.137354]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8286 secs, and comparison 13.0065 sec, and warnIfPerfScore > 1.3, and perfScore=1.01387]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.94455 secs, and comparison 5.55317 sec, and warnIfPerfScore > 1.2, and perfScore=0.558414]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.36273 secs, and comparison 2.19422 sec, and warnIfPerfScore > 0.33, and perfScore=0.234356]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.59382 secs, and comparison 39.7711 sec, and warnIfPerfScore > 6, and perfScore=4.14549]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 9.54979 secs, and comparison 5.30192 sec, and warnIfPerfScore > 0.8, and perfScore=0.555187]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.53894 secs, and comparison 9.60828 sec, and warnIfPerfScore > 1.4, and perfScore=1.00727]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 9.26285 secs, and comparison 3.54372 sec, and warnIfPerfScore > 0.65, and perfScore=0.382573]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.99761 secs, and comparison 37.2731 sec, and warnIfPerfScore > 4.4, and perfScore=3.7282]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.19091 secs, and comparison 3.57629 sec, and warnIfPerfScore > 0.6, and perfScore=0.389112]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.18348 secs, and comparison 3.62046 sec, and warnIfPerfScore > 0.6, and perfScore=0.394235]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.11766 secs, and comparison 3.60893 sec, and warnIfPerfScore > 0.6, and perfScore=0.395818]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.11094 secs, and comparison 5.01759 sec, and warnIfPerfScore > 1.3, and perfScore=0.550722]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.88135 secs, and comparison 8.67603 sec, and warnIfPerfScore > 1.3, and perfScore=0.878021]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.0334 secs, and comparison 5.7967 sec, and warnIfPerfScore > 0.3, and perfScore=0.125924]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.94904 secs, and comparison 12.0521 sec, and warnIfPerfScore > 1.5, and perfScore=1.51618]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.51618}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.52584 secs, and comparison 3.51752 sec, and warnIfPerfScore > 0.55, and perfScore=0.467392]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.774867 sec, and warnIfPerfScore > 0.1, and perfScore=0.0516578]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.38148 sec, and warnIfPerfScore > 0.5, and perfScore=0.225432]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.94279 secs, and comparison 12.879 sec, and warnIfPerfScore > 2, and perfScore=1.62147]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.81223 secs, and comparison 29.2866 sec, and warnIfPerfScore > 3.6, and perfScore=3.3234]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 4 seconds]]]

Succeeded
