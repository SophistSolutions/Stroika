Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 19:52:19 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.63096 secs, and comparison 4.59334 sec, and warnIfPerfScore > 0.65, and perfScore=0.69271]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.25139 secs, and comparison 3.01905 sec, and warnIfPerfScore > 0.5, and perfScore=0.482941]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.53479 secs, and comparison 7.26021 sec, and warnIfPerfScore > 1.05, and perfScore=1.11101]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.18579 secs, and comparison 6.82008 sec, and warnIfPerfScore > 1.15, and perfScore=1.10254]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.18872 secs, and comparison 2.60604 sec, and warnIfPerfScore > 0.48, and perfScore=0.622156]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 5.01372 secs, and comparison 3.539 sec, and warnIfPerfScore > 0.57, and perfScore=0.705864]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 3.57669 secs, and comparison 17.3151 sec, and warnIfPerfScore > 2.9, and perfScore=4.84109]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 4.37874 secs, and comparison 17.9144 sec, and warnIfPerfScore > 2.9, and perfScore=4.09123]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.92086 secs, and comparison 55.5936 sec, and warnIfPerfScore > 24, and perfScore=11.2975]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.68145 secs, and comparison 10.551 sec, and warnIfPerfScore > 1.7, and perfScore=1.85709]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.77962 secs, and comparison 6.47022 sec, and warnIfPerfScore > 1.5, and perfScore=0.954363]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 3.06241 secs, and comparison 12.3853 sec, and warnIfPerfScore > 2.1, and perfScore=4.04431]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 4.60084 secs, and comparison 4.50602 sec, and warnIfPerfScore > 1.6, and perfScore=0.979391]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 5.28058 secs, and comparison 1.87452 sec, and warnIfPerfScore > 0.23, and perfScore=0.354983]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.0742 secs, and comparison 4.78164 sec, and warnIfPerfScore > 1.3, and perfScore=1.17364]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.31054 secs, and comparison 7.69703 sec, and warnIfPerfScore > 1.2, and perfScore=2.32501]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 21.0179 secs, and comparison 2.0564 sec, and warnIfPerfScore > 0.33, and perfScore=0.0978405]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.50407 secs, and comparison 42.3979 sec, and warnIfPerfScore > 6, and perfScore=12.0996]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.20839 secs, and comparison 7.00441 sec, and warnIfPerfScore > 0.8, and perfScore=2.18316]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.17785 secs, and comparison 7.42807 sec, and warnIfPerfScore > 1.4, and perfScore=2.33745]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.5753 secs, and comparison 3.66583 sec, and warnIfPerfScore > 0.65, and perfScore=0.270037]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 6.20917 secs, and comparison 39.7156 sec, and warnIfPerfScore > 4.4, and perfScore=6.39628]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 14.1583 secs, and comparison 3.73316 sec, and warnIfPerfScore > 0.6, and perfScore=0.263673]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.8587 secs, and comparison 3.68527 sec, and warnIfPerfScore > 0.6, and perfScore=0.232381]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.701 secs, and comparison 3.58419 sec, and warnIfPerfScore > 0.6, and perfScore=0.228278]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.5522 secs, and comparison 4.68161 sec, and warnIfPerfScore > 1.3, and perfScore=0.301026]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 23.5622 secs, and comparison 10.7467 sec, and warnIfPerfScore > 1.3, and perfScore=0.456098]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 18.8437 secs, and comparison 7.17454 sec, and warnIfPerfScore > 0.3, and perfScore=0.380739]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.67457 secs, and comparison 12.8939 sec, and warnIfPerfScore > 1.5, and perfScore=1.4864]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 7.19477 secs, and comparison 2.59657 sec, and warnIfPerfScore > 0.55, and perfScore=0.360897]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.05889 sec, and warnIfPerfScore > 0.1, and perfScore=0.0705925]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.21972 sec, and warnIfPerfScore > 0.5, and perfScore=0.214648]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 40 seconds]]]

Succeeded
