Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Aug 24 14:6:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21587 secs, and comparison 4.821 sec, and warnIfPerfScore > 0.65, and perfScore=1.49913]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.21214 secs, and comparison 2.29071 sec, and warnIfPerfScore > 0.5, and perfScore=0.713143]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25263 secs, and comparison 7.177 sec, and warnIfPerfScore > 1.05, and perfScore=0.989572]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31926 secs, and comparison 7.17896 sec, and warnIfPerfScore > 1.15, and perfScore=1.13604]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 5.89088 secs, and comparison 1.23088 sec, and warnIfPerfScore > 0.48, and perfScore=0.208946]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 5.89949 secs, and comparison 1.78457 sec, and warnIfPerfScore > 0.57, and perfScore=0.302495]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.91919 secs, and comparison 15.3815 sec, and warnIfPerfScore > 2.9, and perfScore=2.59858]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 7.11736 secs, and comparison 15.9644 sec, and warnIfPerfScore > 2.9, and perfScore=2.24303]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 9.36826 secs, and comparison 54.1202 sec, and warnIfPerfScore > 24, and perfScore=5.77697]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.26649 secs, and comparison 7.59748 sec, and warnIfPerfScore > 1.7, and perfScore=1.78073]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.74536 secs, and comparison 3.87006 sec, and warnIfPerfScore > 1.5, and perfScore=0.815546]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.66319 secs, and comparison 9.57377 sec, and warnIfPerfScore > 2.1, and perfScore=2.61351]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 5.17241 secs, and comparison 3.01451 sec, and warnIfPerfScore > 1.6, and perfScore=0.582807]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 5.41446 secs, and comparison 0.680272 sec, and warnIfPerfScore > 0.23, and perfScore=0.12564]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4301 secs, and comparison 12.9074 sec, and warnIfPerfScore > 1.3, and perfScore=1.0384]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.5367 secs, and comparison 5.29641 sec, and warnIfPerfScore > 1.2, and perfScore=1.16746]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.48816 secs, and comparison 1.06479 sec, and warnIfPerfScore > 0.33, and perfScore=0.237244]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 4.20209 secs, and comparison 38.4405 sec, and warnIfPerfScore > 6, and perfScore=9.14794]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.20258 secs, and comparison 5.08377 sec, and warnIfPerfScore > 0.8, and perfScore=1.20968]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.20138 secs, and comparison 7.04869 sec, and warnIfPerfScore > 1.4, and perfScore=1.67771]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.50181 secs, and comparison 3.17999 sec, and warnIfPerfScore > 0.65, and perfScore=0.706381]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 5.61191 secs, and comparison 36.2884 sec, and warnIfPerfScore > 4.4, and perfScore=6.46633]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51357 secs, and comparison 3.07363 sec, and warnIfPerfScore > 0.6, and perfScore=0.680975]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51209 secs, and comparison 3.07419 sec, and warnIfPerfScore > 0.6, and perfScore=0.681323]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.51978 secs, and comparison 3.07735 sec, and warnIfPerfScore > 0.6, and perfScore=0.680864]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.51338 secs, and comparison 2.79597 sec, and warnIfPerfScore > 1.3, and perfScore=0.619483]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.69809 secs, and comparison 8.19015 sec, and warnIfPerfScore > 1.3, and perfScore=1.74329]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.721 secs, and comparison 4.21925 sec, and warnIfPerfScore > 0.3, and perfScore=0.141962]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.16302 secs, and comparison 11.9395 sec, and warnIfPerfScore > 1.5, and perfScore=1.30301]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 4.63108 secs, and comparison 2.608 sec, and warnIfPerfScore > 0.55, and perfScore=0.563153]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.9864 sec, and warnIfPerfScore > 0.1, and perfScore=0.132427]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94681 sec, and warnIfPerfScore > 0.5, and perfScore=0.129788]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 55 seconds]]]

Succeeded
