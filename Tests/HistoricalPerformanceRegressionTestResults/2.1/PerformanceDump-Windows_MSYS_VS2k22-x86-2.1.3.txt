Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Aug 10 20::55 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.08062 secs, and comparison 4.39601 sec, and warnIfPerfScore > 0.65, and perfScore=0.620851]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.36943 secs, and comparison 2.76445 sec, and warnIfPerfScore > 0.5, and perfScore=0.375124]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 9.0908 secs, and comparison 7.49585 sec, and warnIfPerfScore > 1.05, and perfScore=0.824554]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.8429 secs, and comparison 7.44618 sec, and warnIfPerfScore > 1.15, and perfScore=1.08816]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.067
	DETAILS:         	[baseline test 35.9578 secs, and comparison 2.4004 sec, and warnIfPerfScore > 0.48, and perfScore=0.0667562]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 35.1067 secs, and comparison 2.87089 sec, and warnIfPerfScore > 0.57, and perfScore=0.0817761]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 13.0945 secs, and comparison 25.0161 sec, and warnIfPerfScore > 2.9, and perfScore=1.91043]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.1201 secs, and comparison 26.2097 sec, and warnIfPerfScore > 2.9, and perfScore=2.35697]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 10.3562 secs, and comparison 175.181 sec, and warnIfPerfScore > 24, and perfScore=16.9155]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.62062 secs, and comparison 13.0454 sec, and warnIfPerfScore > 1.7, and perfScore=1.35599]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 12.5301 secs, and comparison 12.1517 sec, and warnIfPerfScore > 1.5, and perfScore=0.969802]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.0503 secs, and comparison 14.5881 sec, and warnIfPerfScore > 2.1, and perfScore=1.32015]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 11.9963 secs, and comparison 8.14572 sec, and warnIfPerfScore > 1.6, and perfScore=0.679022]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 12.5867 secs, and comparison 2.13913 sec, and warnIfPerfScore > 0.23, and perfScore=0.169952]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.7893 secs, and comparison 15.5343 sec, and warnIfPerfScore > 1.3, and perfScore=1.05037]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 12.1325 secs, and comparison 8.20796 sec, and warnIfPerfScore > 1.2, and perfScore=0.676526]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 8.9812 secs, and comparison 2.00913 sec, and warnIfPerfScore > 0.33, and perfScore=0.223704]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 12.1013 secs, and comparison 43.7307 sec, and warnIfPerfScore > 6, and perfScore=3.61372]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 12.0017 secs, and comparison 7.33031 sec, and warnIfPerfScore > 0.8, and perfScore=0.610771]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9722 secs, and comparison 13.3504 sec, and warnIfPerfScore > 1.4, and perfScore=1.11511]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.25574 secs, and comparison 3.83518 sec, and warnIfPerfScore > 0.65, and perfScore=0.464547]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 12.5402 secs, and comparison 40.7675 sec, and warnIfPerfScore > 4.4, and perfScore=3.25094]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.1616 secs, and comparison 3.81622 sec, and warnIfPerfScore > 0.6, and perfScore=0.467582]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.15946 secs, and comparison 3.82957 sec, and warnIfPerfScore > 0.6, and perfScore=0.469341]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.38266 secs, and comparison 3.97132 sec, and warnIfPerfScore > 0.6, and perfScore=0.473754]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 8.49224 secs, and comparison 6.60879 sec, and warnIfPerfScore > 1.3, and perfScore=0.778214]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.00509 secs, and comparison 8.57459 sec, and warnIfPerfScore > 1.3, and perfScore=0.952193]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 52.7623 secs, and comparison 7.33829 sec, and warnIfPerfScore > 0.3, and perfScore=0.139082]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.4333 secs, and comparison 17.2654 sec, and warnIfPerfScore > 1.5, and perfScore=1.38865]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.09321 secs, and comparison 3.1444 sec, and warnIfPerfScore > 0.55, and perfScore=0.345797]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 15 secs, and comparison 0.944039 sec, and warnIfPerfScore > 0.1, and perfScore=0.062936]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.5302 sec, and warnIfPerfScore > 0.5, and perfScore=0.235347]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.0935 secs, and comparison 14.4144 sec, and warnIfPerfScore > 2, and perfScore=1.29936]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.888 secs, and comparison 32.5149 sec, and warnIfPerfScore > 3.6, and perfScore=2.52288]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 17 seconds]]]

Succeeded
