Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu May 23 17:29:23 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 9.63425 secs, and comparison 6.64133 sec, and warnIfPerfScore > 0.62, and perfScore=0.689346]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 9.68323 secs, and comparison 4.74171 sec, and warnIfPerfScore > 0.5, and perfScore=0.489683]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 18.1653 secs, and comparison 14.8284 sec, and warnIfPerfScore > 1.05, and perfScore=0.816302]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 38.243 secs, and comparison 5.72753 sec, and warnIfPerfScore > 0.48, and perfScore=0.149767]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 38.0802 secs, and comparison 6.21051 sec, and warnIfPerfScore > 0.55, and perfScore=0.163091]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 26.0873 secs, and comparison 67.3036 sec, and warnIfPerfScore > 2.9, and perfScore=2.57994]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 30.1511 secs, and comparison 57.9169 sec, and warnIfPerfScore > 2.9, and perfScore=1.92089]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 16.4206 secs, and comparison 165.682 sec, and warnIfPerfScore > 9.7, and perfScore=10.0899]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.3909 secs, and comparison 26.854 sec, and warnIfPerfScore > 1.6, and perfScore=1.38488]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 8.53247 secs, and comparison 6.41042 sec, and warnIfPerfScore > 1.5, and perfScore=0.751298]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.6785 secs, and comparison 32.6411 sec, and warnIfPerfScore > 2.1, and perfScore=2.3863]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.1555 secs, and comparison 6.08024 sec, and warnIfPerfScore > 1.3, and perfScore=0.545045]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.8448 secs, and comparison 1.88859 sec, and warnIfPerfScore > 0.18, and perfScore=0.159445]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.8224 secs, and comparison 16.8456 sec, and warnIfPerfScore > 1.3, and perfScore=1.06467]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.1854 secs, and comparison 12.2504 sec, and warnIfPerfScore > 1.2, and perfScore=1.09521]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.8905 secs, and comparison 2.39369 sec, and warnIfPerfScore > 0.33, and perfScore=0.185694]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 10.8718 secs, and comparison 56.3005 sec, and warnIfPerfScore > 6, and perfScore=5.17857]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.9052 secs, and comparison 4.92359 sec, and warnIfPerfScore > 0.5, and perfScore=0.381518]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 14.278 secs, and comparison 50.431 sec, and warnIfPerfScore > 4.4, and perfScore=3.53209]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.8809 secs, and comparison 4.90885 sec, and warnIfPerfScore > 0.6, and perfScore=0.381095]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.1025 secs, and comparison 40.6432 sec, and warnIfPerfScore > 1.5, and perfScore=1.39655]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.84173 secs, and comparison 5.50425 sec, and warnIfPerfScore > 0.55, and perfScore=0.804511]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15 secs, and comparison 6.38094 sec, and warnIfPerfScore > 0.25, and perfScore=0.425396]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.49167 sec, and warnIfPerfScore > 0.5, and perfScore=0.232778]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 32 seconds]]]

Succeeded
