Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr 27 11:6:8 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 11.8296 secs, and comparison 9.18861 sec, and warnIfPerfScore > 0.62, and perfScore=0.77675]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.8705 secs, and comparison 5.85162 sec, and warnIfPerfScore > 0.5, and perfScore=0.492956]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.7708 secs, and comparison 13.4722 sec, and warnIfPerfScore > 1.05, and perfScore=1.05492]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.99197 secs, and comparison 6.79181 sec, and warnIfPerfScore > 0.48, and perfScore=0.971373]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.25937 secs, and comparison 7.84456 sec, and warnIfPerfScore > 0.55, and perfScore=0.949777]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 6.09449 secs, and comparison 33.8071 sec, and warnIfPerfScore > 2.9, and perfScore=5.54715]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 7.96798 secs, and comparison 36.6599 sec, and warnIfPerfScore > 2.9, and perfScore=4.6009]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 9.27849 secs, and comparison 118.344 sec, and warnIfPerfScore > 9.7, and perfScore=12.7547]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 8.89001 secs, and comparison 18.9067 sec, and warnIfPerfScore > 1.6, and perfScore=2.12673]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.6406 secs, and comparison 9.97303 sec, and warnIfPerfScore > 1.5, and perfScore=0.937265]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 4.73506 secs, and comparison 20.9042 sec, and warnIfPerfScore > 2.1, and perfScore=4.41476]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 7.96594 secs, and comparison 7.11242 sec, and warnIfPerfScore > 1.3, and perfScore=0.892853]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.31793 secs, and comparison 3.19569 sec, and warnIfPerfScore > 0.18, and perfScore=0.384192]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.67989 secs, and comparison 8.93654 sec, and warnIfPerfScore > 1.3, and perfScore=1.16363]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.72784 secs, and comparison 12.7805 sec, and warnIfPerfScore > 1.2, and perfScore=2.2313]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 28.506 secs, and comparison 2.87017 sec, and warnIfPerfScore > 0.33, and perfScore=0.100687]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 5.27645 secs, and comparison 84.5119 sec, and warnIfPerfScore > 6, and perfScore=16.0168]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 29.4663 secs, and comparison 11.0787 sec, and warnIfPerfScore > 0.5, and perfScore=0.375979]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 16.5312 secs, and comparison 113.565 sec, and warnIfPerfScore > 4.4, and perfScore=6.86975]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 33.1761 secs, and comparison 11.2629 sec, and warnIfPerfScore > 0.6, and perfScore=0.339487]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 23.1266 secs, and comparison 32.2387 sec, and warnIfPerfScore > 1.5, and perfScore=1.39401]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.8326 secs, and comparison 4.19559 sec, and warnIfPerfScore > 0.55, and perfScore=0.303312]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.77105 sec, and warnIfPerfScore > 0.25, and perfScore=0.11807]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.24892 sec, and warnIfPerfScore > 0.5, and perfScore=0.483261]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 31 seconds]]]

Succeeded
