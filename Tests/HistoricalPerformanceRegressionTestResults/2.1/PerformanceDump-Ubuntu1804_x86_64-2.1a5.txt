Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 31 15:6:48 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 6.56911 secs, and comparison 5.20436 sec, and warnIfPerfScore > 0.62, and perfScore=0.792247]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.66559 secs, and comparison 3.33673 sec, and warnIfPerfScore > 0.5, and perfScore=0.50059]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.72576 secs, and comparison 7.21191 sec, and warnIfPerfScore > 1.05, and perfScore=1.07228]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 4.1576 secs, and comparison 4.05974 sec, and warnIfPerfScore > 0.48, and perfScore=0.976462]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.66957 secs, and comparison 4.75525 sec, and warnIfPerfScore > 0.57, and perfScore=0.838733]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 4.97671 secs, and comparison 19.6028 sec, and warnIfPerfScore > 2.9, and perfScore=3.93891]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 5.91416 secs, and comparison 21.2532 sec, and warnIfPerfScore > 2.9, and perfScore=3.59361]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 6.55391 secs, and comparison 66.924 sec, and warnIfPerfScore > 9.7, and perfScore=10.2113]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.06484 secs, and comparison 12.0445 sec, and warnIfPerfScore > 1.6, and perfScore=1.70485]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.16233 secs, and comparison 6.98143 sec, and warnIfPerfScore > 1.5, and perfScore=1.13292]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.46593 secs, and comparison 11.9415 sec, and warnIfPerfScore > 2.1, and perfScore=3.44539]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.5945 secs, and comparison 5.09749 sec, and warnIfPerfScore > 1.3, and perfScore=0.911161]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.32001 secs, and comparison 1.9681 sec, and warnIfPerfScore > 0.23, and perfScore=0.311408]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.97176 secs, and comparison 5.82124 sec, and warnIfPerfScore > 1.3, and perfScore=1.17086]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 3.97114 secs, and comparison 13.7005 sec, and warnIfPerfScore > 1.2, and perfScore=3.45003]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 20.1449 secs, and comparison 2.7155 sec, and warnIfPerfScore > 0.33, and perfScore=0.134798]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 4.22026 secs, and comparison 44.8302 sec, and warnIfPerfScore > 6, and perfScore=10.6226]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.0576 secs, and comparison 4.53493 sec, and warnIfPerfScore > 0.5, and perfScore=0.301173]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.6
	DETAILS:         	[baseline test 7.1333 secs, and comparison 39.9733 sec, and warnIfPerfScore > 4.4, and perfScore=5.60376]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 14.5543 secs, and comparison 4.28455 sec, and warnIfPerfScore > 0.6, and perfScore=0.294383]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.97949 secs, and comparison 13.7688 sec, and warnIfPerfScore > 1.5, and perfScore=1.53336]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 7.71031 secs, and comparison 2.17211 sec, and warnIfPerfScore > 0.55, and perfScore=0.281715]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.12447 sec, and warnIfPerfScore > 0.25, and perfScore=0.0749646]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.07442 sec, and warnIfPerfScore > 0.5, and perfScore=0.271628]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 52 seconds]]]

Succeeded
