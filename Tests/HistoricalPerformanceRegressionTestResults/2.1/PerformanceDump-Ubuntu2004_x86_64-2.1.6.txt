Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 15 7:57:57 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 5.6589 secs, and comparison 4.72727 sec, and warnIfPerfScore > 0.65, and perfScore=0.835368]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.76746 secs, and comparison 3.04457 sec, and warnIfPerfScore > 0.5, and perfScore=0.527888]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 6.66537 secs, and comparison 9.12498 sec, and warnIfPerfScore > 1.05, and perfScore=1.36901]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.11166 secs, and comparison 9.39494 sec, and warnIfPerfScore > 1.15, and perfScore=1.32106]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 3.73715 secs, and comparison 2.44949 sec, and warnIfPerfScore > 0.48, and perfScore=0.655443]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 4.4881 secs, and comparison 3.00934 sec, and warnIfPerfScore > 0.57, and perfScore=0.670516]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 3.37926 secs, and comparison 17.1214 sec, and warnIfPerfScore > 2.9, and perfScore=5.06661]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 4.16569 secs, and comparison 17.9105 sec, and warnIfPerfScore > 2.9, and perfScore=4.29952]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 5.65134 secs, and comparison 56.4303 sec, and warnIfPerfScore > 24, and perfScore=9.98528]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.95242 secs, and comparison 10.1268 sec, and warnIfPerfScore > 1.7, and perfScore=2.04481]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.82996 secs, and comparison 6.3819 sec, and warnIfPerfScore > 1.5, and perfScore=0.934398]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 2.83561 secs, and comparison 12.2368 sec, and warnIfPerfScore > 2.1, and perfScore=4.31541]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 4.44256 secs, and comparison 3.96151 sec, and warnIfPerfScore > 1.6, and perfScore=0.891718]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.67263 secs, and comparison 1.63489 sec, and warnIfPerfScore > 0.23, and perfScore=0.349886]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.23081 secs, and comparison 4.99475 sec, and warnIfPerfScore > 1.3, and perfScore=1.18057]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.09071 secs, and comparison 7.71559 sec, and warnIfPerfScore > 1.2, and perfScore=2.49638]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 19.8332 secs, and comparison 1.81746 sec, and warnIfPerfScore > 0.33, and perfScore=0.0916372]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.07737 secs, and comparison 42.3751 sec, and warnIfPerfScore > 6, and perfScore=13.7699]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.01691 secs, and comparison 7.42976 sec, and warnIfPerfScore > 0.8, and perfScore=2.4627]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 3.03902 secs, and comparison 8.72528 sec, and warnIfPerfScore > 1.4, and perfScore=2.87108]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.5587 secs, and comparison 3.77171 sec, and warnIfPerfScore > 0.65, and perfScore=0.19284]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 4.33764 secs, and comparison 38.117 sec, and warnIfPerfScore > 4.4, and perfScore=8.78749]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.3928 secs, and comparison 3.78815 sec, and warnIfPerfScore > 0.6, and perfScore=0.282851]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 13.7075 secs, and comparison 3.88424 sec, and warnIfPerfScore > 0.6, and perfScore=0.283366]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.776 secs, and comparison 3.78427 sec, and warnIfPerfScore > 0.6, and perfScore=0.274699]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.6764 secs, and comparison 4.39185 sec, and warnIfPerfScore > 1.3, and perfScore=0.321127]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 21.6646 secs, and comparison 10.3668 sec, and warnIfPerfScore > 1.3, and perfScore=0.478512]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 19.0722 secs, and comparison 7.28573 sec, and warnIfPerfScore > 0.3, and perfScore=0.382008]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.33024 secs, and comparison 14.1614 sec, and warnIfPerfScore > 1.5, and perfScore=1.93192]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.40268 secs, and comparison 2.87636 sec, and warnIfPerfScore > 0.55, and perfScore=0.449243]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 15 secs, and comparison 0.950114 sec, and warnIfPerfScore > 0.1, and perfScore=0.0633409]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.2843 sec, and warnIfPerfScore > 0.5, and perfScore=0.218953]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 28 seconds]]]

Succeeded
