Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Dec 10 13:17:28 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.70517 secs, and comparison 4.36693 sec, and warnIfPerfScore > 0.65, and perfScore=0.765434]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.5071 secs, and comparison 2.54058 sec, and warnIfPerfScore > 0.5, and perfScore=0.461328]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.01467 secs, and comparison 7.26646 sec, and warnIfPerfScore > 1.05, and perfScore=0.906645]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.52168 secs, and comparison 7.34336 sec, and warnIfPerfScore > 1.15, and perfScore=1.12599]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 33.3667 secs, and comparison 2.15045 sec, and warnIfPerfScore > 0.48, and perfScore=0.0644488]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.087
	DETAILS:         	[baseline test 31.2464 secs, and comparison 2.71104 sec, and warnIfPerfScore > 0.57, and perfScore=0.0867633]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.48775 secs, and comparison 18.2344 sec, and warnIfPerfScore > 2.9, and perfScore=2.81059]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.79425 secs, and comparison 18.4633 sec, and warnIfPerfScore > 2.9, and perfScore=2.7175]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 7.1642 secs, and comparison 132.316 sec, and warnIfPerfScore > 24, and perfScore=18.4691]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.39642 secs, and comparison 9.91162 sec, and warnIfPerfScore > 1.7, and perfScore=1.8367]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.27841 secs, and comparison 6.16125 sec, and warnIfPerfScore > 1.5, and perfScore=0.981339]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.18201 secs, and comparison 12.229 sec, and warnIfPerfScore > 2.1, and perfScore=2.3599]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.77468 secs, and comparison 5.03264 sec, and warnIfPerfScore > 1.6, and perfScore=0.647312]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 7.4437 secs, and comparison 0.660878 sec, and warnIfPerfScore > 0.23, and perfScore=0.0887835]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.5517 secs, and comparison 12.6722 sec, and warnIfPerfScore > 1.3, and perfScore=1.0096]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.78115 secs, and comparison 5.68281 sec, and warnIfPerfScore > 1.2, and perfScore=0.64716]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.38271 secs, and comparison 2.06538 sec, and warnIfPerfScore > 0.33, and perfScore=0.220126]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.06477 secs, and comparison 39.9026 sec, and warnIfPerfScore > 6, and perfScore=4.94776]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.21538 secs, and comparison 4.96236 sec, and warnIfPerfScore > 0.8, and perfScore=0.604033]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.07608 secs, and comparison 7.68632 sec, and warnIfPerfScore > 1.4, and perfScore=0.951739]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.17348 secs, and comparison 3.48241 sec, and warnIfPerfScore > 0.65, and perfScore=0.426062]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 8.60496 secs, and comparison 37.2581 sec, and warnIfPerfScore > 4.4, and perfScore=4.32984]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.17891 secs, and comparison 3.40446 sec, and warnIfPerfScore > 0.6, and perfScore=0.416249]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.17648 secs, and comparison 3.38473 sec, and warnIfPerfScore > 0.6, and perfScore=0.413959]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.28218 secs, and comparison 3.39997 sec, and warnIfPerfScore > 0.6, and perfScore=0.410516]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.20423 secs, and comparison 5.08326 sec, and warnIfPerfScore > 1.3, and perfScore=0.61959]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.74032 secs, and comparison 8.16998 sec, and warnIfPerfScore > 1.3, and perfScore=0.934746]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 37.8237 secs, and comparison 5.81631 sec, and warnIfPerfScore > 0.3, and perfScore=0.153774]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.06395 secs, and comparison 9.77235 sec, and warnIfPerfScore > 1.5, and perfScore=1.61155]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.32719 secs, and comparison 2.9466 sec, and warnIfPerfScore > 0.55, and perfScore=0.465704]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.618785 sec, and warnIfPerfScore > 0.1, and perfScore=0.0412523]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.89958 sec, and warnIfPerfScore > 0.5, and perfScore=0.193305]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.93656 secs, and comparison 13.0728 sec, and warnIfPerfScore > 2, and perfScore=1.88463]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.8265 secs, and comparison 14.4118 sec, and warnIfPerfScore > 3.6, and perfScore=1.84141]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 25 seconds]]]

Succeeded
