Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 17 4:42:8 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.48316 secs, and comparison 4.57657 sec, and warnIfPerfScore > 0.62, and perfScore=0.834659]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.49467 secs, and comparison 2.93187 sec, and warnIfPerfScore > 0.5, and perfScore=0.533585]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.22116 secs, and comparison 6.97356 sec, and warnIfPerfScore > 1.05, and perfScore=1.12094]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 3.66437 secs, and comparison 3.55414 sec, and warnIfPerfScore > 0.48, and perfScore=0.96992]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 4.43021 secs, and comparison 4.04358 sec, and warnIfPerfScore > 0.57, and perfScore=0.912729]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 3.21124 secs, and comparison 19.1926 sec, and warnIfPerfScore > 2.9, and perfScore=5.97668]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.80492 secs, and comparison 20.4108 sec, and warnIfPerfScore > 2.9, and perfScore=5.36433]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.46839 secs, and comparison 61.4594 sec, and warnIfPerfScore > 9.7, and perfScore=11.239]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.8825 secs, and comparison 10.4607 sec, and warnIfPerfScore > 1.6, and perfScore=2.1425]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.75775 secs, and comparison 5.58112 sec, and warnIfPerfScore > 1.5, and perfScore=0.969322]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 2.79748 secs, and comparison 10.2997 sec, and warnIfPerfScore > 2.1, and perfScore=3.68177]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 3.99047 secs, and comparison 3.39955 sec, and warnIfPerfScore > 1.3, and perfScore=0.851918]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.18489 secs, and comparison 1.49607 sec, and warnIfPerfScore > 0.23, and perfScore=0.357492]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.16902 secs, and comparison 4.43793 sec, and warnIfPerfScore > 1.3, and perfScore=1.0645]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.00788 secs, and comparison 7.16092 sec, and warnIfPerfScore > 1.2, and perfScore=2.38072]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 16.2188 secs, and comparison 1.539 sec, and warnIfPerfScore > 0.33, and perfScore=0.09489]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 2.92161 secs, and comparison 42.0356 sec, and warnIfPerfScore > 6, and perfScore=14.3878]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.176 secs, and comparison 3.68894 sec, and warnIfPerfScore > 0.5, and perfScore=0.330077]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 4.39284 secs, and comparison 37.1385 sec, and warnIfPerfScore > 4.4, and perfScore=8.45433]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.7337 secs, and comparison 3.71907 sec, and warnIfPerfScore > 0.6, and perfScore=0.292065]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.09762 secs, and comparison 13.4862 sec, and warnIfPerfScore > 1.5, and perfScore=1.9001]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 6.93116 secs, and comparison 2.15711 sec, and warnIfPerfScore > 0.55, and perfScore=0.311219]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.075
	DETAILS:         	[baseline test 15 secs, and comparison 1.13238 sec, and warnIfPerfScore > 0.25, and perfScore=0.075492]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.78427 sec, and warnIfPerfScore > 0.5, and perfScore=0.252284]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 44 seconds]]]

Succeeded
