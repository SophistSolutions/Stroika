Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu May 12 10:20:59 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.35567 secs, and comparison 4.51711 sec, and warnIfPerfScore > 0.65, and perfScore=0.614099]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.90553 secs, and comparison 3.05778 sec, and warnIfPerfScore > 0.5, and perfScore=0.38679]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.50422 secs, and comparison 7.9023 sec, and warnIfPerfScore > 1.05, and perfScore=0.831452]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.34653 secs, and comparison 7.72129 sec, and warnIfPerfScore > 1.15, and perfScore=1.05101]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 8.29137 secs, and comparison 2.40543 sec, and warnIfPerfScore > 0.48, and perfScore=0.290113]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 8.35293 secs, and comparison 2.8646 sec, and warnIfPerfScore > 0.57, and perfScore=0.342946]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.76452 secs, and comparison 21.7184 sec, and warnIfPerfScore > 2.9, and perfScore=2.47799]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 9.5815 secs, and comparison 24.4441 sec, and warnIfPerfScore > 2.9, and perfScore=2.55118]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 8.49558 secs, and comparison 152.631 sec, and warnIfPerfScore > 24, and perfScore=17.966]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.80193 secs, and comparison 11.9293 sec, and warnIfPerfScore > 1.7, and perfScore=1.52901]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.28607 secs, and comparison 8.24081 sec, and warnIfPerfScore > 1.5, and perfScore=0.994538]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.47431 secs, and comparison 13.7185 sec, and warnIfPerfScore > 2.1, and perfScore=1.83541]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 9.22582 secs, and comparison 7.10045 sec, and warnIfPerfScore > 1.6, and perfScore=0.769628]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.91456 secs, and comparison 1.35373 sec, and warnIfPerfScore > 0.23, and perfScore=0.13654]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.839 secs, and comparison 13.3574 sec, and warnIfPerfScore > 1.3, and perfScore=1.04038]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.382 secs, and comparison 5.70681 sec, and warnIfPerfScore > 1.2, and perfScore=0.549684]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.41651 secs, and comparison 1.54748 sec, and warnIfPerfScore > 0.33, and perfScore=0.241172]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.98385 secs, and comparison 41.3434 sec, and warnIfPerfScore > 6, and perfScore=4.14102]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.99853 secs, and comparison 5.41939 sec, and warnIfPerfScore > 0.8, and perfScore=0.542019]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.99207 secs, and comparison 9.64567 sec, and warnIfPerfScore > 1.4, and perfScore=0.965333]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.31059 secs, and comparison 3.58825 sec, and warnIfPerfScore > 0.65, and perfScore=0.568608]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.3188 secs, and comparison 38.5088 sec, and warnIfPerfScore > 4.4, and perfScore=3.73189]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.65001 secs, and comparison 3.75775 sec, and warnIfPerfScore > 0.6, and perfScore=0.565074]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.10523 secs, and comparison 3.54904 sec, and warnIfPerfScore > 0.6, and perfScore=0.499497]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.36737 secs, and comparison 3.53757 sec, and warnIfPerfScore > 0.6, and perfScore=0.555579]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.55688 secs, and comparison 5.01912 sec, and warnIfPerfScore > 1.3, and perfScore=0.765473]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.17772 secs, and comparison 8.65347 sec, and warnIfPerfScore > 1.3, and perfScore=1.2056]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 46.9717 secs, and comparison 6.27386 sec, and warnIfPerfScore > 0.3, and perfScore=0.133567]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.02743 secs, and comparison 12.5266 sec, and warnIfPerfScore > 1.5, and perfScore=1.38762]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.37233 secs, and comparison 3.01486 sec, and warnIfPerfScore > 0.55, and perfScore=0.408942]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.057
	DETAILS:         	[baseline test 15 secs, and comparison 0.851101 sec, and warnIfPerfScore > 0.1, and perfScore=0.05674]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.24055 sec, and warnIfPerfScore > 0.5, and perfScore=0.216037]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.25749 secs, and comparison 13.6896 sec, and warnIfPerfScore > 2, and perfScore=1.65785]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.32055 secs, and comparison 30.0503 sec, and warnIfPerfScore > 3.6, and perfScore=3.2241]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 17 seconds]]]

Succeeded
