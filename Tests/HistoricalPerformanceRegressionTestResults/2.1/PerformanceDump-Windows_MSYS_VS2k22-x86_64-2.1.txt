Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon May 16 1:13:20 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 5.97197 secs, and comparison 4.51917 sec, and warnIfPerfScore > 0.65, and perfScore=0.75673]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.71215 secs, and comparison 2.76139 sec, and warnIfPerfScore > 0.5, and perfScore=0.483424]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.19576 secs, and comparison 7.38076 sec, and warnIfPerfScore > 1.05, and perfScore=0.900557]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.78278 secs, and comparison 7.43025 sec, and warnIfPerfScore > 1.15, and perfScore=1.09546]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.60927 secs, and comparison 2.30478 sec, and warnIfPerfScore > 0.48, and perfScore=0.348719]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.68237 secs, and comparison 2.86911 sec, and warnIfPerfScore > 0.57, and perfScore=0.429355]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 6.3335 secs, and comparison 19.51 sec, and warnIfPerfScore > 2.9, and perfScore=3.08044]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.72776 secs, and comparison 19.8224 sec, and warnIfPerfScore > 2.9, and perfScore=2.94635]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	28
	DETAILS:         	[baseline test 5.70048 secs, and comparison 158.771 sec, and warnIfPerfScore > 24, and perfScore=27.8522]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.45497 secs, and comparison 10.2003 sec, and warnIfPerfScore > 1.7, and perfScore=1.86991]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.52592 secs, and comparison 5.29763 sec, and warnIfPerfScore > 1.5, and perfScore=0.958688]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 5.01867 secs, and comparison 12.1935 sec, and warnIfPerfScore > 2.1, and perfScore=2.42962]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.55184 secs, and comparison 3.89144 sec, and warnIfPerfScore > 1.6, and perfScore=0.593946]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 6.89391 secs, and comparison 0.693468 sec, and warnIfPerfScore > 0.23, and perfScore=0.100591]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9803 secs, and comparison 12.4391 sec, and warnIfPerfScore > 1.3, and perfScore=1.0383]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.49877 secs, and comparison 5.64105 sec, and warnIfPerfScore > 1.2, and perfScore=0.663749]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.75643 secs, and comparison 1.79136 sec, and warnIfPerfScore > 0.33, and perfScore=0.230952]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.11704 secs, and comparison 40.1066 sec, and warnIfPerfScore > 6, and perfScore=4.94104]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.04462 secs, and comparison 5.16801 sec, and warnIfPerfScore > 0.8, and perfScore=0.642418]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.05583 secs, and comparison 7.66401 sec, and warnIfPerfScore > 1.4, and perfScore=0.951362]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.6048 secs, and comparison 3.51935 sec, and warnIfPerfScore > 0.65, and perfScore=0.46278]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.4897 secs, and comparison 37.0603 sec, and warnIfPerfScore > 4.4, and perfScore=4.36533]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.56446 secs, and comparison 3.44269 sec, and warnIfPerfScore > 0.6, and perfScore=0.455113]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.61113 secs, and comparison 3.39552 sec, and warnIfPerfScore > 0.6, and perfScore=0.446126]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.52308 secs, and comparison 3.43378 sec, and warnIfPerfScore > 0.6, and perfScore=0.456432]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 7.53781 secs, and comparison 5.05877 sec, and warnIfPerfScore > 1.3, and perfScore=0.671119]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.07727 secs, and comparison 8.59017 sec, and warnIfPerfScore > 1.3, and perfScore=1.0635]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 37.6901 secs, and comparison 5.11515 sec, and warnIfPerfScore > 0.3, and perfScore=0.135716]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.85797 secs, and comparison 9.83387 sec, and warnIfPerfScore > 1.5, and perfScore=1.67872]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.90139 secs, and comparison 2.70069 sec, and warnIfPerfScore > 0.55, and perfScore=0.457636]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.608599 sec, and warnIfPerfScore > 0.1, and perfScore=0.0405733]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.86051 sec, and warnIfPerfScore > 0.5, and perfScore=0.190701]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.41244 secs, and comparison 12.9014 sec, and warnIfPerfScore > 2, and perfScore=2.01193]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.17971 secs, and comparison 14.3023 sec, and warnIfPerfScore > 3.6, and perfScore=1.74851]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 40 seconds]]]

Succeeded
