Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Sep  6 :34:31 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.01452 secs, and comparison 4.05563 sec, and warnIfPerfScore > 0.65, and perfScore=0.808777]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.049 secs, and comparison 2.3364 sec, and warnIfPerfScore > 0.5, and perfScore=0.462745]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.35419 secs, and comparison 6.73954 sec, and warnIfPerfScore > 1.05, and perfScore=0.916422]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.04748 secs, and comparison 6.75659 sec, and warnIfPerfScore > 1.15, and perfScore=1.11726]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.23209 secs, and comparison 2.00167 sec, and warnIfPerfScore > 0.48, and perfScore=0.216817]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.12563 secs, and comparison 2.63404 sec, and warnIfPerfScore > 0.57, and perfScore=0.288642]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.24012 secs, and comparison 17.6553 sec, and warnIfPerfScore > 2.9, and perfScore=2.82933]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.22466 secs, and comparison 17.8561 sec, and warnIfPerfScore > 2.9, and perfScore=2.47155]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 5.82274 secs, and comparison 130.904 sec, and warnIfPerfScore > 24, and perfScore=22.4815]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.44775 secs, and comparison 9.07954 sec, and warnIfPerfScore > 1.7, and perfScore=1.66666]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.77163 secs, and comparison 5.40337 sec, and warnIfPerfScore > 1.5, and perfScore=0.936195]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.97469 secs, and comparison 11.0547 sec, and warnIfPerfScore > 2.1, and perfScore=2.22219]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.5664 secs, and comparison 3.91728 sec, and warnIfPerfScore > 1.6, and perfScore=0.596564]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 6.83076 secs, and comparison 0.68108 sec, and warnIfPerfScore > 0.23, and perfScore=0.0997078]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1826 secs, and comparison 11.5216 sec, and warnIfPerfScore > 1.3, and perfScore=1.03031]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.00018 secs, and comparison 5.18561 sec, and warnIfPerfScore > 1.2, and perfScore=0.648187]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.98591 secs, and comparison 1.68581 sec, and warnIfPerfScore > 0.33, and perfScore=0.241315]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 7.76068 secs, and comparison 36.3311 sec, and warnIfPerfScore > 6, and perfScore=4.68144]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.33083 secs, and comparison 5.34123 sec, and warnIfPerfScore > 0.8, and perfScore=0.64114]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 8.08499 secs, and comparison 7.59491 sec, and warnIfPerfScore > 1.4, and perfScore=0.939384]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.42841 secs, and comparison 3.44798 sec, and warnIfPerfScore > 0.65, and perfScore=0.464161]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 8.65661 secs, and comparison 34.6005 sec, and warnIfPerfScore > 4.4, and perfScore=3.99701]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.99325 secs, and comparison 3.11149 sec, and warnIfPerfScore > 0.6, and perfScore=0.444928]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.01372 secs, and comparison 3.09941 sec, and warnIfPerfScore > 0.6, and perfScore=0.441907]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.95392 secs, and comparison 3.12843 sec, and warnIfPerfScore > 0.6, and perfScore=0.449881]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.96665 secs, and comparison 5.03838 sec, and warnIfPerfScore > 1.3, and perfScore=0.723214]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.41428 secs, and comparison 8.14675 sec, and warnIfPerfScore > 1.3, and perfScore=1.09879]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 36.0293 secs, and comparison 6.09884 sec, and warnIfPerfScore > 0.3, and perfScore=0.169274]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.6555 secs, and comparison 8.98217 sec, and warnIfPerfScore > 1.5, and perfScore=1.58822]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.05714 secs, and comparison 2.6862 sec, and warnIfPerfScore > 0.55, and perfScore=0.443478]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.589534 sec, and warnIfPerfScore > 0.1, and perfScore=0.0393022]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.08665 sec, and warnIfPerfScore > 0.5, and perfScore=0.13911]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.4924 secs, and comparison 12.6328 sec, and warnIfPerfScore > 2, and perfScore=1.94578]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 7.45375 secs, and comparison 14.422 sec, and warnIfPerfScore > 3.6, and perfScore=1.93487]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 53 seconds]]]

Succeeded
