Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar  9 17:47:32 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 9.73075 secs, and comparison 6.99324 sec, and warnIfPerfScore > 0.62, and perfScore=0.718674]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.2125 secs, and comparison 5.06429 sec, and warnIfPerfScore > 0.5, and perfScore=0.49589]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 18.3386 secs, and comparison 15.2168 sec, and warnIfPerfScore > 1.05, and perfScore=0.829773]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 29.2652 secs, and comparison 5.79031 sec, and warnIfPerfScore > 0.48, and perfScore=0.197856]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 39.6707 secs, and comparison 6.00099 sec, and warnIfPerfScore > 0.55, and perfScore=0.15127]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 27.3551 secs, and comparison 65.0866 sec, and warnIfPerfScore > 2.9, and perfScore=2.37932]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 25.921 secs, and comparison 59.446 sec, and warnIfPerfScore > 2.9, and perfScore=2.29336]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 15.9594 secs, and comparison 154.786 sec, and warnIfPerfScore > 9.7, and perfScore=9.69874]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.6806 secs, and comparison 26.4315 sec, and warnIfPerfScore > 1.6, and perfScore=1.34302]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 8.14398 secs, and comparison 5.97055 sec, and warnIfPerfScore > 1.5, and perfScore=0.733124]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.8402 secs, and comparison 31.737 sec, and warnIfPerfScore > 2.1, and perfScore=2.2931]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.3143 secs, and comparison 6.2084 sec, and warnIfPerfScore > 1.3, and perfScore=0.548721]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.5914 secs, and comparison 1.88475 sec, and warnIfPerfScore > 0.18, and perfScore=0.162599]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.2271 secs, and comparison 16.8661 sec, and warnIfPerfScore > 1.3, and perfScore=1.03938]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2082 secs, and comparison 13.2956 sec, and warnIfPerfScore > 1.2, and perfScore=1.08907]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.716 secs, and comparison 2.36636 sec, and warnIfPerfScore > 0.33, and perfScore=0.186093]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.6958 secs, and comparison 54.7992 sec, and warnIfPerfScore > 6, and perfScore=4.68537]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.8005 secs, and comparison 5.0802 sec, and warnIfPerfScore > 0.5, and perfScore=0.396875]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.0672 secs, and comparison 50.4642 sec, and warnIfPerfScore > 4.4, and perfScore=3.86191]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.7485 secs, and comparison 4.91609 sec, and warnIfPerfScore > 0.6, and perfScore=0.385622]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 30.5367 secs, and comparison 42.0661 sec, and warnIfPerfScore > 1.5, and perfScore=1.37756]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 39.987 secs, and comparison 5.46692 sec, and warnIfPerfScore > 0.55, and perfScore=0.136718]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.23152 sec, and warnIfPerfScore > 0.25, and perfScore=0.415435]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85752 sec, and warnIfPerfScore > 0.5, and perfScore=0.257168]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 38 seconds]]]

Succeeded
