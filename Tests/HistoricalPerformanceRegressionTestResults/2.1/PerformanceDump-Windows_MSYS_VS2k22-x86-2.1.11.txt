Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov 23 17:30:50 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 8.19639 secs, and comparison 4.86152 sec, and warnIfPerfScore > 0.65, and perfScore=0.593129]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.5024 secs, and comparison 3.09001 sec, and warnIfPerfScore > 0.5, and perfScore=0.363427]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.139 secs, and comparison 8.60313 sec, and warnIfPerfScore > 1.05, and perfScore=0.848517]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.88874 secs, and comparison 8.81547 sec, and warnIfPerfScore > 1.15, and perfScore=1.11748]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 12.3527 secs, and comparison 2.53011 sec, and warnIfPerfScore > 0.48, and perfScore=0.204822]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.2693 secs, and comparison 3.01134 sec, and warnIfPerfScore > 0.57, and perfScore=0.245436]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 48.3812 secs, and comparison 25.2612 sec, and warnIfPerfScore > 2.9, and perfScore=0.522128]
	                 	Charactes::String is FASTER

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.4827 secs, and comparison 26.2323 sec, and warnIfPerfScore > 2.9, and perfScore=2.28451]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 10.1206 secs, and comparison 180.371 sec, and warnIfPerfScore > 24, and perfScore=17.8222]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.45702 secs, and comparison 12.3113 sec, and warnIfPerfScore > 1.7, and perfScore=1.30182]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.8647 secs, and comparison 10.2927 sec, and warnIfPerfScore > 1.5, and perfScore=0.947354]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.05605 secs, and comparison 13.7372 sec, and warnIfPerfScore > 2.1, and perfScore=1.7052]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.9463 secs, and comparison 7.7561 sec, and warnIfPerfScore > 1.6, and perfScore=0.649246]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.5592 secs, and comparison 1.71383 sec, and warnIfPerfScore > 0.23, and perfScore=0.13646]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.1544 secs, and comparison 14.8002 sec, and warnIfPerfScore > 1.3, and perfScore=0.976631]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.2932 secs, and comparison 6.82482 sec, and warnIfPerfScore > 1.2, and perfScore=0.604332]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 11.5918 secs, and comparison 2.95021 sec, and warnIfPerfScore > 0.33, and perfScore=0.254508]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.2188 secs, and comparison 44.3041 sec, and warnIfPerfScore > 6, and perfScore=3.94908]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.0029 secs, and comparison 6.69929 sec, and warnIfPerfScore > 0.8, and perfScore=0.608868]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.0256 secs, and comparison 12.2838 sec, and warnIfPerfScore > 1.4, and perfScore=1.11411]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 11.4403 secs, and comparison 4.24017 sec, and warnIfPerfScore > 0.65, and perfScore=0.370635]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 11.1697 secs, and comparison 40.8434 sec, and warnIfPerfScore > 4.4, and perfScore=3.65663]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.6042 secs, and comparison 4.27987 sec, and warnIfPerfScore > 0.6, and perfScore=0.339558]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.2465 secs, and comparison 4.03343 sec, and warnIfPerfScore > 0.6, and perfScore=0.329355]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.1818 secs, and comparison 4.02407 sec, and warnIfPerfScore > 0.6, and perfScore=0.330334]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 12.1518 secs, and comparison 6.99058 sec, and warnIfPerfScore > 1.3, and perfScore=0.575273]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 13.4912 secs, and comparison 10.8652 sec, and warnIfPerfScore > 1.3, and perfScore=0.805353]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 61.3983 secs, and comparison 7.65035 sec, and warnIfPerfScore > 0.3, and perfScore=0.124602]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 60.9883 secs, and comparison 15.7681 sec, and warnIfPerfScore > 1.5, and perfScore=0.258543]
	                 	String Characters::Format is FASTER

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.77112 secs, and comparison 3.9959 sec, and warnIfPerfScore > 0.55, and perfScore=0.455575]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.076
	DETAILS:         	[baseline test 15 secs, and comparison 1.13987 sec, and warnIfPerfScore > 0.1, and perfScore=0.075991]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.56106 sec, and warnIfPerfScore > 0.5, and perfScore=0.237404]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.9458 secs, and comparison 15.6916 sec, and warnIfPerfScore > 2, and perfScore=1.31357]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.9344 secs, and comparison 35.0068 sec, and warnIfPerfScore > 3.6, and perfScore=2.93327]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 29 seconds]]]

Succeeded
