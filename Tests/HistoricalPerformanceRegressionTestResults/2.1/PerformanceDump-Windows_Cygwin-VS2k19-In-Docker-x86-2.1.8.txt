Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov  2 23:38:9 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.37987 secs, and comparison 4.55846 sec, and warnIfPerfScore > 0.65, and perfScore=0.617688]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.21764 secs, and comparison 2.77504 sec, and warnIfPerfScore > 0.5, and perfScore=0.384481]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.88596 secs, and comparison 7.61586 sec, and warnIfPerfScore > 1.05, and perfScore=0.857066]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.92125 secs, and comparison 7.83578 sec, and warnIfPerfScore > 1.15, and perfScore=1.13213]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.76738 secs, and comparison 2.26217 sec, and warnIfPerfScore > 0.48, and perfScore=0.258021]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.99574 secs, and comparison 2.77757 sec, and warnIfPerfScore > 0.57, and perfScore=0.347381]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.7688 secs, and comparison 21.5012 sec, and warnIfPerfScore > 2.9, and perfScore=2.45201]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.7213 secs, and comparison 21.4993 sec, and warnIfPerfScore > 2.9, and perfScore=2.46515]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 8.64087 secs, and comparison 149.902 sec, and warnIfPerfScore > 24, and perfScore=17.348]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.41303 secs, and comparison 11.2142 sec, and warnIfPerfScore > 1.7, and perfScore=1.51277]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.59211 secs, and comparison 8.23685 sec, and warnIfPerfScore > 1.5, and perfScore=0.958653]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.32065 secs, and comparison 12.773 sec, and warnIfPerfScore > 2.1, and perfScore=1.74479]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 9.76112 secs, and comparison 8.13346 sec, and warnIfPerfScore > 1.6, and perfScore=0.833251]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 9.55789 secs, and comparison 1.37459 sec, and warnIfPerfScore > 0.23, and perfScore=0.143818]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0341 secs, and comparison 14.0247 sec, and warnIfPerfScore > 1.3, and perfScore=1.076]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.1442 secs, and comparison 5.51178 sec, and warnIfPerfScore > 1.2, and perfScore=0.543341]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 6.30754 secs, and comparison 1.5995 sec, and warnIfPerfScore > 0.33, and perfScore=0.253585]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 10.0391 secs, and comparison 41.0554 sec, and warnIfPerfScore > 6, and perfScore=4.08955]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 10.0229 secs, and comparison 5.94271 sec, and warnIfPerfScore > 0.8, and perfScore=0.592916]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.74073 secs, and comparison 9.7409 sec, and warnIfPerfScore > 1.4, and perfScore=1.00002]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 6.31306 secs, and comparison 3.62635 sec, and warnIfPerfScore > 0.65, and perfScore=0.57442]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.476 secs, and comparison 38.2124 sec, and warnIfPerfScore > 4.4, and perfScore=3.6476]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.59968 secs, and comparison 3.54381 sec, and warnIfPerfScore > 0.6, and perfScore=0.536966]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.51402 secs, and comparison 3.49467 sec, and warnIfPerfScore > 0.6, and perfScore=0.536485]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.55775 secs, and comparison 3.50363 sec, and warnIfPerfScore > 0.6, and perfScore=0.534273]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.74948 secs, and comparison 5.01044 sec, and warnIfPerfScore > 1.3, and perfScore=0.742344]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.3397 secs, and comparison 8.73175 sec, and warnIfPerfScore > 1.3, and perfScore=1.18966]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 48.0016 secs, and comparison 6.13552 sec, and warnIfPerfScore > 0.3, and perfScore=0.127819]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.85951 secs, and comparison 12.888 sec, and warnIfPerfScore > 1.5, and perfScore=1.45471]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.56349 secs, and comparison 3.00121 sec, and warnIfPerfScore > 0.55, and perfScore=0.396802]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 15 secs, and comparison 0.835564 sec, and warnIfPerfScore > 0.1, and perfScore=0.0557043]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.10872 sec, and warnIfPerfScore > 0.5, and perfScore=0.207248]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.19785 secs, and comparison 14.1411 sec, and warnIfPerfScore > 2, and perfScore=1.72498]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.55243 secs, and comparison 30.2567 sec, and warnIfPerfScore > 3.6, and perfScore=3.16744]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 7 seconds]]]

Succeeded
