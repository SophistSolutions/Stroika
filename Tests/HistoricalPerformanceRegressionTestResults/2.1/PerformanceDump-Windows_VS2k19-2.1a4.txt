Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Jan  9 23:7:5 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.9481 secs, and comparison 4.63286 sec, and warnIfPerfScore > 0.62, and perfScore=0.423164]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.3432 secs, and comparison 3.27361 sec, and warnIfPerfScore > 0.5, and perfScore=0.316498]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.7123 secs, and comparison 8.86194 sec, and warnIfPerfScore > 1.05, and perfScore=0.827264]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.2832 secs, and comparison 4.04647 sec, and warnIfPerfScore > 0.48, and perfScore=0.393504]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.3964 secs, and comparison 4.23754 sec, and warnIfPerfScore > 0.55, and perfScore=0.407598]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.6465 secs, and comparison 24.9546 sec, and warnIfPerfScore > 2.9, and perfScore=2.14266]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.3862 secs, and comparison 26.5161 sec, and warnIfPerfScore > 2.9, and perfScore=2.14078]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 11.5493 secs, and comparison 87.1569 sec, and warnIfPerfScore > 9.7, and perfScore=7.54648]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 13.2977 secs, and comparison 11.7792 sec, and warnIfPerfScore > 1.6, and perfScore=0.885807]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 15.538 secs, and comparison 13.7696 sec, and warnIfPerfScore > 1.5, and perfScore=0.886189]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.2692 secs, and comparison 12.1746 sec, and warnIfPerfScore > 2.1, and perfScore=1.18554]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 12.7117 secs, and comparison 8.81003 sec, and warnIfPerfScore > 1.3, and perfScore=0.693063]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 13.3862 secs, and comparison 2.66536 sec, and warnIfPerfScore > 0.18, and perfScore=0.199113]
	                 	StringBuilder is FASTER
	                 	{{{WARNING - expected performance score less than 0.18 and got 0.199113}}}

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1214 secs, and comparison 13.1172 sec, and warnIfPerfScore > 1.3, and perfScore=0.999682]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.4886 secs, and comparison 7.5438 sec, and warnIfPerfScore > 1.2, and perfScore=0.719236]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 9.49484 secs, and comparison 1.93891 sec, and warnIfPerfScore > 0.33, and perfScore=0.204206]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 9.77772 secs, and comparison 43.7818 sec, and warnIfPerfScore > 6, and perfScore=4.47771]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.52359 secs, and comparison 4.09106 sec, and warnIfPerfScore > 0.5, and perfScore=0.429571]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 9.76296 secs, and comparison 39.0918 sec, and warnIfPerfScore > 4.4, and perfScore=4.0041]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.14493 secs, and comparison 4.23476 sec, and warnIfPerfScore > 0.6, and perfScore=0.463072]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.4386 secs, and comparison 18.7926 sec, and warnIfPerfScore > 1.5, and perfScore=1.30155]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.6802 secs, and comparison 4.37457 sec, and warnIfPerfScore > 0.55, and perfScore=0.297991]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15 secs, and comparison 1.4629 sec, and warnIfPerfScore > 0.25, and perfScore=0.0975266]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15 secs, and comparison 3.7645 sec, and warnIfPerfScore > 0.5, and perfScore=0.250966]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 11.5921 secs, and comparison 18.7385 sec, and warnIfPerfScore > 1.9, and perfScore=1.6165]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.0018 secs, and comparison 32.992 sec, and warnIfPerfScore > 3.1, and perfScore=2.74891]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 30 seconds]]]

Succeeded
