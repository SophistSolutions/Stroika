Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jun  7 :53:40 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.6082 secs, and comparison 5.11125 sec, and warnIfPerfScore > 0.62, and perfScore=0.405391]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.2992 secs, and comparison 4.02688 sec, and warnIfPerfScore > 0.5, and perfScore=0.356386]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 12.4213 secs, and comparison 9.52662 sec, and warnIfPerfScore > 1.05, and perfScore=0.766958]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 13.7361 secs, and comparison 4.13673 sec, and warnIfPerfScore > 0.48, and perfScore=0.301158]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 11.7002 secs, and comparison 4.41738 sec, and warnIfPerfScore > 0.57, and perfScore=0.377546]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.5278 secs, and comparison 26.8888 sec, and warnIfPerfScore > 2.9, and perfScore=2.33252]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.0207 secs, and comparison 26.8597 sec, and warnIfPerfScore > 2.9, and perfScore=1.91572]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 11.7135 secs, and comparison 95.948 sec, and warnIfPerfScore > 9.7, and perfScore=8.19126]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.3214 secs, and comparison 12.1792 sec, and warnIfPerfScore > 1.6, and perfScore=0.988455]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 16.2691 secs, and comparison 14.05 sec, and warnIfPerfScore > 1.5, and perfScore=0.8636]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.34876 secs, and comparison 12.3455 sec, and warnIfPerfScore > 2.1, and perfScore=1.32055]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 12.9512 secs, and comparison 9.02506 sec, and warnIfPerfScore > 1.3, and perfScore=0.696849]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 13.5591 secs, and comparison 2.60175 sec, and warnIfPerfScore > 0.23, and perfScore=0.191882]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 14.2343 secs, and comparison 13.1278 sec, and warnIfPerfScore > 1.3, and perfScore=0.92226]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 9.89773 secs, and comparison 7.92754 sec, and warnIfPerfScore > 1.2, and perfScore=0.800945]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.17065 secs, and comparison 1.92054 sec, and warnIfPerfScore > 0.33, and perfScore=0.209422]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 9.47779 secs, and comparison 44.4572 sec, and warnIfPerfScore > 6, and perfScore=4.69067]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.34955 secs, and comparison 4.26116 sec, and warnIfPerfScore > 0.5, and perfScore=0.455761]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.6128 secs, and comparison 39.9082 sec, and warnIfPerfScore > 4.4, and perfScore=3.76039]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 9.36133 secs, and comparison 4.38405 sec, and warnIfPerfScore > 0.6, and perfScore=0.468315]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.7194 secs, and comparison 18.301 sec, and warnIfPerfScore > 1.5, and perfScore=1.24333]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.8732 secs, and comparison 4.42774 sec, and warnIfPerfScore > 0.55, and perfScore=0.319158]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 15 secs, and comparison 1.45079 sec, and warnIfPerfScore > 0.25, and perfScore=0.0967195]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.867 sec, and warnIfPerfScore > 0.5, and perfScore=0.2578]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.3343 secs, and comparison 20.1149 sec, and warnIfPerfScore > 2, and perfScore=1.77469]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.2782 secs, and comparison 32.4805 sec, and warnIfPerfScore > 3.1, and perfScore=2.64537]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 55 seconds]]]

Succeeded
