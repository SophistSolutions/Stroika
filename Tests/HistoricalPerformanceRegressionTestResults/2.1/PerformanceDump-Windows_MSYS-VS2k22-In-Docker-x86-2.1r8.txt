Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Apr  4 14:50:25 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.49377 secs, and comparison 5.06249 sec, and warnIfPerfScore > 0.65, and perfScore=0.596024]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 8.54869 secs, and comparison 3.25646 sec, and warnIfPerfScore > 0.5, and perfScore=0.380931]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.5318 secs, and comparison 8.93435 sec, and warnIfPerfScore > 1.05, and perfScore=0.848323]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.94455 secs, and comparison 8.88983 sec, and warnIfPerfScore > 1.15, and perfScore=1.11898]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.28601 secs, and comparison 2.65019 sec, and warnIfPerfScore > 0.48, and perfScore=0.285396]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.03701 secs, and comparison 3.16164 sec, and warnIfPerfScore > 0.57, and perfScore=0.349855]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.0177 secs, and comparison 24.1712 sec, and warnIfPerfScore > 2.9, and perfScore=2.41284]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.1705 secs, and comparison 25.0661 sec, and warnIfPerfScore > 2.9, and perfScore=2.46458]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 9.2242 secs, and comparison 161.58 sec, and warnIfPerfScore > 24, and perfScore=17.5169]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.85672 secs, and comparison 11.4749 sec, and warnIfPerfScore > 1.7, and perfScore=1.46052]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.70926 secs, and comparison 8.72978 sec, and warnIfPerfScore > 1.5, and perfScore=1.00236]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.49921 secs, and comparison 13.5864 sec, and warnIfPerfScore > 2.1, and perfScore=1.81172]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 10.2956 secs, and comparison 7.34606 sec, and warnIfPerfScore > 1.6, and perfScore=0.713513]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.9542 secs, and comparison 1.41916 sec, and warnIfPerfScore > 0.23, and perfScore=0.129555]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.0626 secs, and comparison 15.9745 sec, and warnIfPerfScore > 1.3, and perfScore=1.13596]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 12.7899 secs, and comparison 7.36756 sec, and warnIfPerfScore > 1.2, and perfScore=0.576045]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.92499 secs, and comparison 1.94163 sec, and warnIfPerfScore > 0.33, and perfScore=0.245001]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.8738 secs, and comparison 42.9078 sec, and warnIfPerfScore > 6, and perfScore=3.61367]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.5704 secs, and comparison 5.82926 sec, and warnIfPerfScore > 0.8, and perfScore=0.551472]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.4257 secs, and comparison 9.97153 sec, and warnIfPerfScore > 1.4, and perfScore=0.956437]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.91771 secs, and comparison 3.64818 sec, and warnIfPerfScore > 0.65, and perfScore=0.527368]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.4927 secs, and comparison 39.0274 sec, and warnIfPerfScore > 4.4, and perfScore=3.71947]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.73372 secs, and comparison 3.64563 sec, and warnIfPerfScore > 0.6, and perfScore=0.541399]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.7369 secs, and comparison 3.60345 sec, and warnIfPerfScore > 0.6, and perfScore=0.534883]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.80091 secs, and comparison 3.58084 sec, and warnIfPerfScore > 0.6, and perfScore=0.526524]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 6.80215 secs, and comparison 4.92721 sec, and warnIfPerfScore > 1.3, and perfScore=0.724361]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.2893 secs, and comparison 8.75601 sec, and warnIfPerfScore > 1.3, and perfScore=1.20121]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 49.7273 secs, and comparison 6.43114 sec, and warnIfPerfScore > 0.3, and perfScore=0.129328]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.27543 secs, and comparison 13.873 sec, and warnIfPerfScore > 1.5, and perfScore=1.49567]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.03798 secs, and comparison 3.1002 sec, and warnIfPerfScore > 0.55, and perfScore=0.385694]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.875845 sec, and warnIfPerfScore > 0.1, and perfScore=0.0583896]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.12871 sec, and warnIfPerfScore > 0.5, and perfScore=0.20858]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.88169 secs, and comparison 9.47761 sec, and warnIfPerfScore > 2, and perfScore=1.0671]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 10.218 secs, and comparison 31.7417 sec, and warnIfPerfScore > 3.6, and perfScore=3.10646]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 1 second]]]

Succeeded
