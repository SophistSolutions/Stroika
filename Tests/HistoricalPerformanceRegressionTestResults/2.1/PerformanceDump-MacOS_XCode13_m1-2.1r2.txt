Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 15:47:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21234 secs, and comparison 4.82018 sec, and warnIfPerfScore > 0.65, and perfScore=1.50052]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 3.21025 secs, and comparison 2.28965 sec, and warnIfPerfScore > 0.5, and perfScore=0.713232]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25317 secs, and comparison 7.18341 sec, and warnIfPerfScore > 1.05, and perfScore=0.990383]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31973 secs, and comparison 7.18315 sec, and warnIfPerfScore > 1.15, and perfScore=1.13662]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 5.92106 secs, and comparison 1.50022 sec, and warnIfPerfScore > 0.48, and perfScore=0.25337]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 5.91978 secs, and comparison 2.0079 sec, and warnIfPerfScore > 0.57, and perfScore=0.339185]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.08303 secs, and comparison 15.394 sec, and warnIfPerfScore > 2.9, and perfScore=2.53065]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 7.46161 secs, and comparison 15.645 sec, and warnIfPerfScore > 2.9, and perfScore=2.09673]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 9.46093 secs, and comparison 54.1959 sec, and warnIfPerfScore > 24, and perfScore=5.72839]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 4.2642 secs, and comparison 7.59812 sec, and warnIfPerfScore > 1.7, and perfScore=1.78184]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.73153 secs, and comparison 3.87664 sec, and warnIfPerfScore > 1.5, and perfScore=0.81932]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.6632 secs, and comparison 9.57473 sec, and warnIfPerfScore > 2.1, and perfScore=2.61376]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 5.24099 secs, and comparison 2.94699 sec, and warnIfPerfScore > 1.6, and perfScore=0.562297]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 5.50651 secs, and comparison 0.677976 sec, and warnIfPerfScore > 0.23, and perfScore=0.123123]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4296 secs, and comparison 12.9063 sec, and warnIfPerfScore > 1.3, and perfScore=1.03835]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.67871 secs, and comparison 5.29738 sec, and warnIfPerfScore > 1.2, and perfScore=1.13223]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 4.49517 secs, and comparison 1.06873 sec, and warnIfPerfScore > 0.33, and perfScore=0.237751]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 4.32498 secs, and comparison 38.4169 sec, and warnIfPerfScore > 6, and perfScore=8.88255]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.21089 secs, and comparison 5.08153 sec, and warnIfPerfScore > 0.8, and perfScore=1.20676]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.24055 secs, and comparison 7.03746 sec, and warnIfPerfScore > 1.4, and perfScore=1.65956]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.49762 secs, and comparison 3.18232 sec, and warnIfPerfScore > 0.65, and perfScore=0.707556]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 5.7391 secs, and comparison 36.2482 sec, and warnIfPerfScore > 4.4, and perfScore=6.31601]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.5075 secs, and comparison 3.07668 sec, and warnIfPerfScore > 0.6, and perfScore=0.682569]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50797 secs, and comparison 3.07366 sec, and warnIfPerfScore > 0.6, and perfScore=0.681828]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.50805 secs, and comparison 3.07608 sec, and warnIfPerfScore > 0.6, and perfScore=0.682351]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 4.50739 secs, and comparison 2.79727 sec, and warnIfPerfScore > 1.3, and perfScore=0.620597]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.70215 secs, and comparison 8.15026 sec, and warnIfPerfScore > 1.3, and perfScore=1.7333]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 30.4198 secs, and comparison 4.18193 sec, and warnIfPerfScore > 0.3, and perfScore=0.137474]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.25958 secs, and comparison 11.9302 sec, and warnIfPerfScore > 1.5, and perfScore=1.28842]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 4.63647 secs, and comparison 2.5794 sec, and warnIfPerfScore > 0.55, and perfScore=0.55633]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.06626 sec, and warnIfPerfScore > 0.1, and perfScore=0.137751]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94675 sec, and warnIfPerfScore > 0.5, and perfScore=0.129783]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 58 seconds]]]

Succeeded
