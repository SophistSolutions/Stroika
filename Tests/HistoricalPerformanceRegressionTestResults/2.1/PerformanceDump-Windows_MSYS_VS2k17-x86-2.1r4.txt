Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 28 15:9:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 11.0751 secs, and comparison 5.73912 sec, and warnIfPerfScore > 0.65, and perfScore=0.518201]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.2839 secs, and comparison 3.31935 sec, and warnIfPerfScore > 0.5, and perfScore=0.294167]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 11.1275 secs, and comparison 10.0753 sec, and warnIfPerfScore > 1.05, and perfScore=0.905435]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.4982 secs, and comparison 10.1206 sec, and warnIfPerfScore > 1.15, and perfScore=1.19091]
	                 	SharedPtr is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.15 and got 1.19091}}}

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.7989 secs, and comparison 3.4098 sec, and warnIfPerfScore > 0.48, and perfScore=0.315754]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.3176 secs, and comparison 4.51899 sec, and warnIfPerfScore > 0.57, and perfScore=0.399288]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.1931 secs, and comparison 28.621 sec, and warnIfPerfScore > 2.9, and perfScore=2.16939]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.5196 secs, and comparison 30.2252 sec, and warnIfPerfScore > 2.9, and perfScore=2.23566]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 12.6967 secs, and comparison 166.16 sec, and warnIfPerfScore > 24, and perfScore=13.0869]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.8529 secs, and comparison 14.3871 sec, and warnIfPerfScore > 1.7, and perfScore=1.11937]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.1371 secs, and comparison 13.5786 sec, and warnIfPerfScore > 1.5, and perfScore=1.03361]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.82683 secs, and comparison 17.804 sec, and warnIfPerfScore > 2.1, and perfScore=1.81177]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 14.7219 secs, and comparison 10.7487 sec, and warnIfPerfScore > 1.6, and perfScore=0.730117]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15.1652 secs, and comparison 1.48947 sec, and warnIfPerfScore > 0.23, and perfScore=0.0982165]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 15.3876 secs, and comparison 14.7018 sec, and warnIfPerfScore > 1.3, and perfScore=0.955433]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 11.3723 secs, and comparison 8.36844 sec, and warnIfPerfScore > 1.2, and perfScore=0.735863]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 10.51 secs, and comparison 2.71767 sec, and warnIfPerfScore > 0.33, and perfScore=0.25858]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 10.9524 secs, and comparison 49.3676 sec, and warnIfPerfScore > 6, and perfScore=4.50748]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.4295 secs, and comparison 7.24626 sec, and warnIfPerfScore > 0.8, and perfScore=0.694783]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.823 secs, and comparison 17.232 sec, and warnIfPerfScore > 1.4, and perfScore=1.59216]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.59216}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.285 secs, and comparison 4.37614 sec, and warnIfPerfScore > 0.65, and perfScore=0.425487]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.9683 secs, and comparison 45.0248 sec, and warnIfPerfScore > 4.4, and perfScore=3.76202]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.305 secs, and comparison 4.41929 sec, and warnIfPerfScore > 0.6, and perfScore=0.42885]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.4126 secs, and comparison 4.351 sec, and warnIfPerfScore > 0.6, and perfScore=0.417861]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.6854 secs, and comparison 4.57417 sec, and warnIfPerfScore > 0.6, and perfScore=0.428076]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 10.5032 secs, and comparison 9.58216 sec, and warnIfPerfScore > 1.3, and perfScore=0.912308]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1895 secs, and comparison 13.1406 sec, and warnIfPerfScore > 1.3, and perfScore=1.07803]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 68.5156 secs, and comparison 7.64699 sec, and warnIfPerfScore > 0.3, and perfScore=0.11161]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.0752 secs, and comparison 18.9575 sec, and warnIfPerfScore > 1.5, and perfScore=1.44988]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.6559 secs, and comparison 4.71398 sec, and warnIfPerfScore > 0.55, and perfScore=0.3011]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.57832 sec, and warnIfPerfScore > 0.1, and perfScore=0.105221]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.105221}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.93844 sec, and warnIfPerfScore > 0.5, and perfScore=0.329229]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.7768 secs, and comparison 21.5659 sec, and warnIfPerfScore > 2, and perfScore=1.68789]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.2332 secs, and comparison 35.8421 sec, and warnIfPerfScore > 3.6, and perfScore=2.51821]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 24 seconds]]]

Succeeded
