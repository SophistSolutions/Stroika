Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 20:28:1 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 44.6565 secs, and comparison 15.4222 sec, and warnIfPerfScore > 0.65, and perfScore=0.345352]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 44.7783 secs, and comparison 14.7961 sec, and warnIfPerfScore > 0.5, and perfScore=0.330431]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 26.4193 secs, and comparison 20.6879 sec, and warnIfPerfScore > 1.05, and perfScore=0.783059]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 22.8742 secs, and comparison 21.4355 sec, and warnIfPerfScore > 1.15, and perfScore=0.937104]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 20.6293 secs, and comparison 3.34542 sec, and warnIfPerfScore > 0.48, and perfScore=0.162168]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 20.3967 secs, and comparison 3.67056 sec, and warnIfPerfScore > 0.57, and perfScore=0.179958]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 19.4957 secs, and comparison 35.7064 sec, and warnIfPerfScore > 2.9, and perfScore=1.8315]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.4903 secs, and comparison 35.6091 sec, and warnIfPerfScore > 2.9, and perfScore=1.73785]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 15.5439 secs, and comparison 175.687 sec, and warnIfPerfScore > 24, and perfScore=11.3026]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 17.4458 secs, and comparison 14.7448 sec, and warnIfPerfScore > 1.7, and perfScore=0.845176]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 49.4283 secs, and comparison 49.078 sec, and warnIfPerfScore > 1.5, and perfScore=0.992913]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.9529 secs, and comparison 17.056 sec, and warnIfPerfScore > 2.1, and perfScore=1.00608]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 39.044 secs, and comparison 9.78653 sec, and warnIfPerfScore > 1.6, and perfScore=0.250654]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.048
	DETAILS:         	[baseline test 40.7427 secs, and comparison 1.9456 sec, and warnIfPerfScore > 0.23, and perfScore=0.0477533]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.0165 secs, and comparison 21.4101 sec, and warnIfPerfScore > 1.3, and perfScore=1.64485]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 13.3503 secs, and comparison 21.5191 sec, and warnIfPerfScore > 1.2, and perfScore=1.61188]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 21.2168 secs, and comparison 5.39998 sec, and warnIfPerfScore > 0.33, and perfScore=0.254514]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 12.9546 secs, and comparison 54.183 sec, and warnIfPerfScore > 6, and perfScore=4.18252]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.8885 secs, and comparison 20.2238 sec, and warnIfPerfScore > 0.8, and perfScore=1.56913]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 13.6548 secs, and comparison 42.0059 sec, and warnIfPerfScore > 1.4, and perfScore=3.07628]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 20.5127 secs, and comparison 4.82414 sec, and warnIfPerfScore > 0.65, and perfScore=0.235178]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 22.3638 secs, and comparison 59.5196 sec, and warnIfPerfScore > 4.4, and perfScore=2.66142]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.6346 secs, and comparison 5.47924 sec, and warnIfPerfScore > 0.6, and perfScore=0.265537]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 20.8255 secs, and comparison 5.5931 sec, and warnIfPerfScore > 0.6, and perfScore=0.268569]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 20.3794 secs, and comparison 5.88155 sec, and warnIfPerfScore > 0.6, and perfScore=0.288603]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 19.9452 secs, and comparison 13.5504 sec, and warnIfPerfScore > 1.3, and perfScore=0.679384]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 27.3117 secs, and comparison 20.5243 sec, and warnIfPerfScore > 1.3, and perfScore=0.751483]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 96.1525 secs, and comparison 12.2083 sec, and warnIfPerfScore > 0.3, and perfScore=0.126968]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.6655 secs, and comparison 21.8521 sec, and warnIfPerfScore > 1.5, and perfScore=1.17072]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15.0122 secs, and comparison 5.34184 sec, and warnIfPerfScore > 0.55, and perfScore=0.355833]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56167 sec, and warnIfPerfScore > 0.1, and perfScore=0.104111]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.96816 sec, and warnIfPerfScore > 0.5, and perfScore=0.264544]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.8065 secs, and comparison 20.0743 sec, and warnIfPerfScore > 2, and perfScore=1.01352]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 21.5156 secs, and comparison 29.9185 sec, and warnIfPerfScore > 3.6, and perfScore=1.39055]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 48 seconds]]]

Succeeded
