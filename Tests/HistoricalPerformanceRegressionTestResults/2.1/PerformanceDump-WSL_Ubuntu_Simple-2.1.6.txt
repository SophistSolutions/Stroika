Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Oct 16 10:40:49 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 1.92673 secs, and comparison 1.115 sec, and warnIfPerfScore > 0.65, and perfScore=0.5787]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 2.00884 secs, and comparison 2.21816 sec, and warnIfPerfScore > 0.5, and perfScore=1.1042]
	                 	SpinLock is ***SLOWER***

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 1.87407 secs, and comparison 5.96855 sec, and warnIfPerfScore > 1.05, and perfScore=3.18481]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 1.55918 secs, and comparison 5.98021 sec, and warnIfPerfScore > 1.15, and perfScore=3.8355]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 2.51456 secs, and comparison 0.671226 sec, and warnIfPerfScore > 0.48, and perfScore=0.266936]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 3.0078 secs, and comparison 0.748541 sec, and warnIfPerfScore > 0.57, and perfScore=0.248867]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 2.36829 secs, and comparison 9.46803 sec, and warnIfPerfScore > 2.9, and perfScore=3.99784]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 2.72957 secs, and comparison 10.5538 sec, and warnIfPerfScore > 2.9, and perfScore=3.86647]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 3.54401 secs, and comparison 29.2739 sec, and warnIfPerfScore > 24, and perfScore=8.2601]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 3.56867 secs, and comparison 6.12374 sec, and warnIfPerfScore > 1.7, and perfScore=1.71597]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.76608 secs, and comparison 3.61801 sec, and warnIfPerfScore > 1.5, and perfScore=0.960682]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 2.04592 secs, and comparison 7.84064 sec, and warnIfPerfScore > 2.1, and perfScore=3.83234]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 2.74661 secs, and comparison 2.69546 sec, and warnIfPerfScore > 1.6, and perfScore=0.981376]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 2.90135 secs, and comparison 0.924484 sec, and warnIfPerfScore > 0.23, and perfScore=0.318639]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.40163 secs, and comparison 2.95523 sec, and warnIfPerfScore > 1.3, and perfScore=1.23051]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.28807 secs, and comparison 4.94671 sec, and warnIfPerfScore > 1.2, and perfScore=2.16196]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 9.5638 secs, and comparison 1.16949 sec, and warnIfPerfScore > 0.33, and perfScore=0.122283]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 2.22443 secs, and comparison 40.5602 sec, and warnIfPerfScore > 6, and perfScore=18.2339]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 2.23938 secs, and comparison 4.5667 sec, and warnIfPerfScore > 0.8, and perfScore=2.03927]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.14389 secs, and comparison 5.32772 sec, and warnIfPerfScore > 1.4, and perfScore=2.48508]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.36958 secs, and comparison 3.24242 sec, and warnIfPerfScore > 0.65, and perfScore=0.346058]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 2.94452 secs, and comparison 35.3364 sec, and warnIfPerfScore > 4.4, and perfScore=12.0007]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.13081 secs, and comparison 3.31744 sec, and warnIfPerfScore > 0.6, and perfScore=0.465226]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.014 secs, and comparison 3.31379 sec, and warnIfPerfScore > 0.6, and perfScore=0.472453]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.10665 secs, and comparison 3.34364 sec, and warnIfPerfScore > 0.6, and perfScore=0.470494]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.05194 secs, and comparison 3.3366 sec, and warnIfPerfScore > 1.3, and perfScore=0.473147]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 11.6799 secs, and comparison 7.32603 sec, and warnIfPerfScore > 1.3, and perfScore=0.627234]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.6703 secs, and comparison 4.72822 sec, and warnIfPerfScore > 0.3, and perfScore=0.40515]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.87103 secs, and comparison 9.72974 sec, and warnIfPerfScore > 1.5, and perfScore=1.99747]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.03831 secs, and comparison 1.31466 sec, and warnIfPerfScore > 0.55, and perfScore=0.260933]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.034
	DETAILS:         	[baseline test 15 secs, and comparison 0.513756 sec, and warnIfPerfScore > 0.1, and perfScore=0.0342504]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 15 secs, and comparison 1.07917 sec, and warnIfPerfScore > 0.5, and perfScore=0.0719449]
	                 	Test_Optional_ is FASTER

[[[Tests took: 5 minutes, 55 seconds]]]

Succeeded
