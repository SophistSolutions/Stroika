Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Feb  1 1:38:32 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.76611 secs, and comparison 5.12677 sec, and warnIfPerfScore > 0.65, and perfScore=0.524956]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.76054 secs, and comparison 3.36772 sec, and warnIfPerfScore > 0.5, and perfScore=0.345034]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.9446 secs, and comparison 9.2041 sec, and warnIfPerfScore > 1.05, and perfScore=0.840974]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.36257 secs, and comparison 9.22702 sec, and warnIfPerfScore > 1.15, and perfScore=1.10337]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.4131 secs, and comparison 3.2212 sec, and warnIfPerfScore > 0.48, and perfScore=0.309342]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.3951 secs, and comparison 3.72316 sec, and warnIfPerfScore > 0.57, and perfScore=0.358164]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 11.7522 secs, and comparison 27.4137 sec, and warnIfPerfScore > 2.9, and perfScore=2.33264]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.1939 secs, and comparison 29.3403 sec, and warnIfPerfScore > 2.9, and perfScore=2.40614]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 12.5866 secs, and comparison 153.465 sec, and warnIfPerfScore > 24, and perfScore=12.1928]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.65346 secs, and comparison 14.2155 sec, and warnIfPerfScore > 1.7, and perfScore=1.47258]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 11.9728 secs, and comparison 11.6342 sec, and warnIfPerfScore > 1.5, and perfScore=0.971718]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 9.2398 secs, and comparison 16.0471 sec, and warnIfPerfScore > 2.1, and perfScore=1.73674]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 12.2646 secs, and comparison 8.8777 sec, and warnIfPerfScore > 1.6, and perfScore=0.723845]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 12.7708 secs, and comparison 1.90121 sec, and warnIfPerfScore > 0.23, and perfScore=0.148872]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8332 secs, and comparison 13.2058 sec, and warnIfPerfScore > 1.3, and perfScore=1.02904]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.0221 secs, and comparison 7.02472 sec, and warnIfPerfScore > 1.2, and perfScore=0.700926]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.72035 secs, and comparison 2.51306 sec, and warnIfPerfScore > 0.33, and perfScore=0.258536]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.63681 secs, and comparison 42.4779 sec, and warnIfPerfScore > 6, and perfScore=4.40788]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.60376 secs, and comparison 6.54083 sec, and warnIfPerfScore > 0.8, and perfScore=0.68107]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.68 secs, and comparison 13.1025 sec, and warnIfPerfScore > 1.4, and perfScore=1.35356]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 9.64964 secs, and comparison 3.97579 sec, and warnIfPerfScore > 0.65, and perfScore=0.412015]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.6331 secs, and comparison 39.2875 sec, and warnIfPerfScore > 4.4, and perfScore=3.69481]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.83388 secs, and comparison 4.11463 sec, and warnIfPerfScore > 0.6, and perfScore=0.418414]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.95519 secs, and comparison 4.1875 sec, and warnIfPerfScore > 0.6, and perfScore=0.420634]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.0153 secs, and comparison 4.09384 sec, and warnIfPerfScore > 0.6, and perfScore=0.408757]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 9.79218 secs, and comparison 7.34093 sec, and warnIfPerfScore > 1.3, and perfScore=0.749673]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.0014 secs, and comparison 11.3091 sec, and warnIfPerfScore > 1.3, and perfScore=1.02796]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 61.2606 secs, and comparison 10.2148 sec, and warnIfPerfScore > 0.3, and perfScore=0.166743]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.5386 secs, and comparison 17.6507 sec, and warnIfPerfScore > 1.5, and perfScore=1.40771]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.941 secs, and comparison 4.37344 sec, and warnIfPerfScore > 0.55, and perfScore=0.31371]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.08
	DETAILS:         	[baseline test 15 secs, and comparison 1.19349 sec, and warnIfPerfScore > 0.1, and perfScore=0.0795663]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.65265 sec, and warnIfPerfScore > 0.5, and perfScore=0.24351]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.0807 secs, and comparison 16.37 sec, and warnIfPerfScore > 2, and perfScore=1.47734]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.9571 secs, and comparison 32.5378 sec, and warnIfPerfScore > 3.6, and perfScore=2.72121]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 41 seconds]]]

Succeeded
