Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Aug 13 9:16:52 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 7.08482 secs, and comparison 5.1776 sec, and warnIfPerfScore > 0.62, and perfScore=0.730802]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.31375 secs, and comparison 3.62326 sec, and warnIfPerfScore > 0.5, and perfScore=0.495404]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.77585 secs, and comparison 7.75958 sec, and warnIfPerfScore > 1.05, and perfScore=0.997907]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 6.3729 secs, and comparison 4.43704 sec, and warnIfPerfScore > 0.48, and perfScore=0.696236]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.78765 secs, and comparison 5.03142 sec, and warnIfPerfScore > 0.57, and perfScore=0.646077]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 6.14464 secs, and comparison 25.6846 sec, and warnIfPerfScore > 2.9, and perfScore=4.18]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 6.54914 secs, and comparison 27.9886 sec, and warnIfPerfScore > 2.9, and perfScore=4.27362]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 7.80032 secs, and comparison 99.8945 sec, and warnIfPerfScore > 9.7, and perfScore=12.8065]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.5567 secs, and comparison 12.8682 sec, and warnIfPerfScore > 1.6, and perfScore=1.70289]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.64257 secs, and comparison 8.84053 sec, and warnIfPerfScore > 1.5, and perfScore=1.02291]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 4.57118 secs, and comparison 13.2563 sec, and warnIfPerfScore > 2.1, and perfScore=2.89998]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.19515 secs, and comparison 6.55366 sec, and warnIfPerfScore > 1.3, and perfScore=0.910844]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 7.73383 secs, and comparison 2.62115 sec, and warnIfPerfScore > 0.23, and perfScore=0.33892]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 5.89608 secs, and comparison 6.871 sec, and warnIfPerfScore > 1.3, and perfScore=1.16535]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.54251 secs, and comparison 11.326 sec, and warnIfPerfScore > 1.2, and perfScore=2.04348]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 25.1619 secs, and comparison 2.41709 sec, and warnIfPerfScore > 0.33, and perfScore=0.0960615]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 5.27063 secs, and comparison 44.7406 sec, and warnIfPerfScore > 6, and perfScore=8.48867]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.2278 secs, and comparison 4.31023 sec, and warnIfPerfScore > 0.5, and perfScore=0.25019]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 7.83727 secs, and comparison 39.8323 sec, and warnIfPerfScore > 4.4, and perfScore=5.08242]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 19.4146 secs, and comparison 4.16203 sec, and warnIfPerfScore > 0.6, and perfScore=0.214376]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.2127 secs, and comparison 16.7782 sec, and warnIfPerfScore > 1.5, and perfScore=1.37383]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 11.8595 secs, and comparison 3.2009 sec, and warnIfPerfScore > 0.55, and perfScore=0.269903]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.72546 sec, and warnIfPerfScore > 0.25, and perfScore=0.115031]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.33005 sec, and warnIfPerfScore > 0.5, and perfScore=0.28867]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 24 seconds]]]

Succeeded
