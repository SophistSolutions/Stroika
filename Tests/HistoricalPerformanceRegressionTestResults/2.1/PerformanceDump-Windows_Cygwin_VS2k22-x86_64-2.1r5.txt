Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar  7 23:58:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 5.30668 secs, and comparison 4.30509 sec, and warnIfPerfScore > 0.65, and perfScore=0.811258]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.48337 secs, and comparison 2.484 sec, and warnIfPerfScore > 0.5, and perfScore=0.453006]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.8694 secs, and comparison 7.12021 sec, and warnIfPerfScore > 1.05, and perfScore=0.904798]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.41345 secs, and comparison 7.12761 sec, and warnIfPerfScore > 1.15, and perfScore=1.11135]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.53512 secs, and comparison 2.44154 sec, and warnIfPerfScore > 0.48, and perfScore=0.373603]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.71727 secs, and comparison 3.01394 sec, and warnIfPerfScore > 0.57, and perfScore=0.448685]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.35475 secs, and comparison 18.6288 sec, and warnIfPerfScore > 2.9, and perfScore=2.93148]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.95723 secs, and comparison 18.4836 sec, and warnIfPerfScore > 2.9, and perfScore=2.65675]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.80613 secs, and comparison 131.489 sec, and warnIfPerfScore > 24, and perfScore=22.6465]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.95648 secs, and comparison 9.84073 sec, and warnIfPerfScore > 1.7, and perfScore=1.6521]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.4144 secs, and comparison 5.43157 sec, and warnIfPerfScore > 1.5, and perfScore=1.00317]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.23352 secs, and comparison 11.8231 sec, and warnIfPerfScore > 2.1, and perfScore=2.2591]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 6.91558 secs, and comparison 4.10888 sec, and warnIfPerfScore > 1.6, and perfScore=0.594149]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 7.25728 secs, and comparison 0.699996 sec, and warnIfPerfScore > 0.23, and perfScore=0.0964543]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9947 secs, and comparison 12.5215 sec, and warnIfPerfScore > 1.3, and perfScore=1.04392]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.6311 secs, and comparison 5.33646 sec, and warnIfPerfScore > 1.2, and perfScore=0.618282]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 8.61902 secs, and comparison 2.0328 sec, and warnIfPerfScore > 0.33, and perfScore=0.235851]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.28587 secs, and comparison 39.0599 sec, and warnIfPerfScore > 6, and perfScore=4.71404]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 8.35102 secs, and comparison 5.00184 sec, and warnIfPerfScore > 0.8, and perfScore=0.59895]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.27124 secs, and comparison 7.72803 sec, and warnIfPerfScore > 1.4, and perfScore=0.934325]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.43649 secs, and comparison 3.43132 sec, and warnIfPerfScore > 0.65, and perfScore=0.406724]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.85733 secs, and comparison 36.3793 sec, and warnIfPerfScore > 4.4, and perfScore=4.10726]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.42627 secs, and comparison 3.3343 sec, and warnIfPerfScore > 0.6, and perfScore=0.395703]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.39962 secs, and comparison 3.32809 sec, and warnIfPerfScore > 0.6, and perfScore=0.396219]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.40538 secs, and comparison 3.39899 sec, and warnIfPerfScore > 0.6, and perfScore=0.404382]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.47533 secs, and comparison 5.3208 sec, and warnIfPerfScore > 1.3, and perfScore=0.627798]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 9.04274 secs, and comparison 8.66101 sec, and warnIfPerfScore > 1.3, and perfScore=0.957786]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 40.8654 secs, and comparison 5.16913 sec, and warnIfPerfScore > 0.3, and perfScore=0.126492]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.25043 secs, and comparison 9.90228 sec, and warnIfPerfScore > 1.5, and perfScore=1.58426]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.19241 secs, and comparison 2.6219 sec, and warnIfPerfScore > 0.55, and perfScore=0.423406]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.049
	DETAILS:         	[baseline test 15 secs, and comparison 0.728021 sec, and warnIfPerfScore > 0.1, and perfScore=0.0485347]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.76144 sec, and warnIfPerfScore > 0.5, and perfScore=0.184096]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.39263 secs, and comparison 7.92744 sec, and warnIfPerfScore > 2, and perfScore=1.24009]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.61596 secs, and comparison 15.5323 sec, and warnIfPerfScore > 3.6, and perfScore=2.03944]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 20 seconds]]]

Succeeded
