Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Apr  9 22:47:28 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.63023 secs, and comparison 4.329 sec, and warnIfPerfScore > 0.65, and perfScore=0.768886]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.35391 secs, and comparison 2.64212 sec, and warnIfPerfScore > 0.5, and perfScore=0.493493]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.66671 secs, and comparison 6.93969 sec, and warnIfPerfScore > 1.05, and perfScore=0.905172]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.60273 secs, and comparison 6.95156 sec, and warnIfPerfScore > 1.15, and perfScore=1.05283]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 31.9348 secs, and comparison 2.10398 sec, and warnIfPerfScore > 0.48, and perfScore=0.0658838]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 30.3927 secs, and comparison 2.71232 sec, and warnIfPerfScore > 0.57, and perfScore=0.0892424]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.21756 secs, and comparison 18.1377 sec, and warnIfPerfScore > 2.9, and perfScore=2.91717]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.99755 secs, and comparison 18.187 sec, and warnIfPerfScore > 2.9, and perfScore=2.59905]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	25
	DETAILS:         	[baseline test 5.5951 secs, and comparison 138.687 sec, and warnIfPerfScore > 24, and perfScore=24.7872]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.4079 secs, and comparison 9.6776 sec, and warnIfPerfScore > 1.7, and perfScore=1.78953]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.65161 secs, and comparison 5.59571 sec, and warnIfPerfScore > 1.5, and perfScore=0.99011]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 5.00007 secs, and comparison 11.6305 sec, and warnIfPerfScore > 2.1, and perfScore=2.32607]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.57688 secs, and comparison 4.46901 sec, and warnIfPerfScore > 1.6, and perfScore=0.679503]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 7.26965 secs, and comparison 0.695119 sec, and warnIfPerfScore > 0.23, and perfScore=0.0956193]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2474 secs, and comparison 11.5739 sec, and warnIfPerfScore > 1.3, and perfScore=1.02903]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.8972 secs, and comparison 5.1599 sec, and warnIfPerfScore > 1.2, and perfScore=0.653383]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.94586 secs, and comparison 1.88013 sec, and warnIfPerfScore > 0.33, and perfScore=0.236618]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 7.64921 secs, and comparison 38.0172 sec, and warnIfPerfScore > 6, and perfScore=4.97008]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 7.58108 secs, and comparison 5.29619 sec, and warnIfPerfScore > 0.8, and perfScore=0.698606]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.8408 secs, and comparison 7.43383 sec, and warnIfPerfScore > 1.4, and perfScore=0.948095]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.8885 secs, and comparison 3.31088 sec, and warnIfPerfScore > 0.65, and perfScore=0.41971]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 8.09211 secs, and comparison 35.4466 sec, and warnIfPerfScore > 4.4, and perfScore=4.3804]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.74785 secs, and comparison 3.23103 sec, and warnIfPerfScore > 0.6, and perfScore=0.417022]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.72597 secs, and comparison 3.24271 sec, and warnIfPerfScore > 0.6, and perfScore=0.419716]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.2628 secs, and comparison 3.25437 sec, and warnIfPerfScore > 0.6, and perfScore=0.393858]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.77216 secs, and comparison 4.65256 sec, and warnIfPerfScore > 1.3, and perfScore=0.598619]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.31053 secs, and comparison 7.75429 sec, and warnIfPerfScore > 1.3, and perfScore=0.933068]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 35.9424 secs, and comparison 4.84436 sec, and warnIfPerfScore > 0.3, and perfScore=0.134781]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.67299 secs, and comparison 9.57603 sec, and warnIfPerfScore > 1.5, and perfScore=1.688]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.01937 secs, and comparison 2.60916 sec, and warnIfPerfScore > 0.55, and perfScore=0.43346]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.586609 sec, and warnIfPerfScore > 0.1, and perfScore=0.0391073]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74354 sec, and warnIfPerfScore > 0.5, and perfScore=0.182903]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.15373 secs, and comparison 18.4242 sec, and warnIfPerfScore > 2, and perfScore=2.99399]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.39102 secs, and comparison 13.4968 sec, and warnIfPerfScore > 3.6, and perfScore=1.8261]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 5 seconds]]]

Succeeded
