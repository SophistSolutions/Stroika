Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 20:22:49 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 53.4576 secs, and comparison 16.0852 sec, and warnIfPerfScore > 0.65, and perfScore=0.300896]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 52.3229 secs, and comparison 16.1079 sec, and warnIfPerfScore > 0.5, and perfScore=0.307857]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 30.9538 secs, and comparison 24.8663 sec, and warnIfPerfScore > 1.05, and perfScore=0.803333]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 26.1254 secs, and comparison 25.0021 sec, and warnIfPerfScore > 1.15, and perfScore=0.957004]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 23.2929 secs, and comparison 3.72749 sec, and warnIfPerfScore > 0.48, and perfScore=0.160027]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 22.1784 secs, and comparison 4.56364 sec, and warnIfPerfScore > 0.57, and perfScore=0.20577]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 26.0478 secs, and comparison 41.4344 sec, and warnIfPerfScore > 2.9, and perfScore=1.59071]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 26.5401 secs, and comparison 44.926 sec, and warnIfPerfScore > 2.9, and perfScore=1.69276]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 21.125 secs, and comparison 227.851 sec, and warnIfPerfScore > 24, and perfScore=10.7858]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 22.1965 secs, and comparison 18.5651 sec, and warnIfPerfScore > 1.7, and perfScore=0.836396]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 55.5384 secs, and comparison 56.0383 sec, and warnIfPerfScore > 1.5, and perfScore=1.009]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 20.466 secs, and comparison 20.2325 sec, and warnIfPerfScore > 2.1, and perfScore=0.988594]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 46.7075 secs, and comparison 14.036 sec, and warnIfPerfScore > 1.6, and perfScore=0.300509]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 48.438 secs, and comparison 3.32425 sec, and warnIfPerfScore > 0.23, and perfScore=0.068629]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.6427 secs, and comparison 26.3753 sec, and warnIfPerfScore > 1.3, and perfScore=1.41478]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.41478}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.3064 secs, and comparison 21.9737 sec, and warnIfPerfScore > 1.2, and perfScore=1.26968]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.26968}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.7353 secs, and comparison 4.75598 sec, and warnIfPerfScore > 0.33, and perfScore=0.322761]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 17.0584 secs, and comparison 56.4203 sec, and warnIfPerfScore > 6, and perfScore=3.30747]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.3468 secs, and comparison 21.3156 sec, and warnIfPerfScore > 0.8, and perfScore=1.30396]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.30396}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.5177 secs, and comparison 36.482 sec, and warnIfPerfScore > 1.4, and perfScore=2.20866]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.20866}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.5602 secs, and comparison 5.55253 sec, and warnIfPerfScore > 0.65, and perfScore=0.409474]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 27.3737 secs, and comparison 62.3488 sec, and warnIfPerfScore > 4.4, and perfScore=2.27769]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 14.6565 secs, and comparison 6.23107 sec, and warnIfPerfScore > 0.6, and perfScore=0.42514]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15.2013 secs, and comparison 6.28284 sec, and warnIfPerfScore > 0.6, and perfScore=0.41331]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.8232 secs, and comparison 6.05768 sec, and warnIfPerfScore > 0.6, and perfScore=0.408662]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.782 secs, and comparison 14.2038 sec, and warnIfPerfScore > 1.3, and perfScore=1.0306]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 21.2373 secs, and comparison 22.2044 sec, and warnIfPerfScore > 1.3, and perfScore=1.04554]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 117.839 secs, and comparison 15.0397 sec, and warnIfPerfScore > 0.3, and perfScore=0.127629]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 28.8528 secs, and comparison 32.5716 sec, and warnIfPerfScore > 1.5, and perfScore=1.12889]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 20.9894 secs, and comparison 6.5653 sec, and warnIfPerfScore > 0.55, and perfScore=0.312791]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.9437 sec, and warnIfPerfScore > 0.1, and perfScore=0.12958]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.12958}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.63443 sec, and warnIfPerfScore > 0.5, and perfScore=0.308962]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 23.024 secs, and comparison 24.9956 sec, and warnIfPerfScore > 2, and perfScore=1.08563]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 25.5882 secs, and comparison 48.102 sec, and warnIfPerfScore > 3.6, and perfScore=1.87985]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 30 minutes, 53 seconds]]]

Succeeded
