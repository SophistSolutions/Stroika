Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov 11 13:47:31 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 40.3783 secs, and comparison 6.89597 sec, and warnIfPerfScore > 0.65, and perfScore=0.170784]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 41.0282 secs, and comparison 6.08615 sec, and warnIfPerfScore > 0.5, and perfScore=0.148341]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 16.832 secs, and comparison 12.3897 sec, and warnIfPerfScore > 1.05, and perfScore=0.736077]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 13.5034 secs, and comparison 12.4028 sec, and warnIfPerfScore > 1.15, and perfScore=0.918497]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 18.9872 secs, and comparison 3.68133 sec, and warnIfPerfScore > 0.48, and perfScore=0.193884]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 19.0615 secs, and comparison 3.96944 sec, and warnIfPerfScore > 0.57, and perfScore=0.208244]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.3353 secs, and comparison 31.417 sec, and warnIfPerfScore > 2.9, and perfScore=1.62485]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.0034 secs, and comparison 33.2257 sec, and warnIfPerfScore > 2.9, and perfScore=1.661]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 14.0976 secs, and comparison 179.061 sec, and warnIfPerfScore > 24, and perfScore=12.7015]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 19.2754 secs, and comparison 14.2375 sec, and warnIfPerfScore > 1.7, and perfScore=0.738638]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 40.4502 secs, and comparison 39.2322 sec, and warnIfPerfScore > 1.5, and perfScore=0.969889]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.0445 secs, and comparison 17.7101 sec, and warnIfPerfScore > 2.1, and perfScore=1.03905]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 34.696 secs, and comparison 9.73995 sec, and warnIfPerfScore > 1.6, and perfScore=0.280723]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.056
	DETAILS:         	[baseline test 36.0404 secs, and comparison 2.02699 sec, and warnIfPerfScore > 0.23, and perfScore=0.0562422]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 12.9471 secs, and comparison 22.0032 sec, and warnIfPerfScore > 1.3, and perfScore=1.69947]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.8259 secs, and comparison 20.4557 sec, and warnIfPerfScore > 1.2, and perfScore=1.47952]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 21.8866 secs, and comparison 5.54748 sec, and warnIfPerfScore > 0.33, and perfScore=0.253465]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.1901 secs, and comparison 53.3264 sec, and warnIfPerfScore > 6, and perfScore=4.04291]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.6188 secs, and comparison 18.7803 sec, and warnIfPerfScore > 0.8, and perfScore=1.37899]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.0952 secs, and comparison 52.1429 sec, and warnIfPerfScore > 1.4, and perfScore=3.98184]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 22.3019 secs, and comparison 4.68687 sec, and warnIfPerfScore > 0.65, and perfScore=0.210156]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 23.8428 secs, and comparison 58.2894 sec, and warnIfPerfScore > 4.4, and perfScore=2.44474]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 21.4902 secs, and comparison 5.49957 sec, and warnIfPerfScore > 0.6, and perfScore=0.25591]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 21.8028 secs, and comparison 5.89919 sec, and warnIfPerfScore > 0.6, and perfScore=0.270571]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 21.6787 secs, and comparison 6.17541 sec, and warnIfPerfScore > 0.6, and perfScore=0.28486]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 22.3182 secs, and comparison 13.8257 sec, and warnIfPerfScore > 1.3, and perfScore=0.619483]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 29.0776 secs, and comparison 21.6927 sec, and warnIfPerfScore > 1.3, and perfScore=0.746029]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 99.681 secs, and comparison 8.16365 sec, and warnIfPerfScore > 0.3, and perfScore=0.0818977]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.9847 secs, and comparison 21.5413 sec, and warnIfPerfScore > 1.5, and perfScore=1.19775]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 18.7136 secs, and comparison 5.91053 sec, and warnIfPerfScore > 0.55, and perfScore=0.315841]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.97664 sec, and warnIfPerfScore > 0.1, and perfScore=0.131776]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.57558 sec, and warnIfPerfScore > 0.5, and perfScore=0.305038]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 19.428 secs, and comparison 22.1987 sec, and warnIfPerfScore > 2, and perfScore=1.14261]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.3735 secs, and comparison 26.3964 sec, and warnIfPerfScore > 3.6, and perfScore=1.17981]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 25 minutes, 35 seconds]]]

Succeeded
