Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun May 15 11:10:40 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.14568 secs, and comparison 4.40418 sec, and warnIfPerfScore > 0.65, and perfScore=0.616342]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.09668 secs, and comparison 2.88933 sec, and warnIfPerfScore > 0.5, and perfScore=0.407138]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 8.86404 secs, and comparison 7.60568 sec, and warnIfPerfScore > 1.05, and perfScore=0.858038]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.99135 secs, and comparison 7.60678 sec, and warnIfPerfScore > 1.15, and perfScore=1.08803]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 8.41045 secs, and comparison 2.28878 sec, and warnIfPerfScore > 0.48, and perfScore=0.272135]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.00017 secs, and comparison 2.81096 sec, and warnIfPerfScore > 0.57, and perfScore=0.351363]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.60957 secs, and comparison 21.0809 sec, and warnIfPerfScore > 2.9, and perfScore=2.44854]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 8.75568 secs, and comparison 21.8362 sec, and warnIfPerfScore > 2.9, and perfScore=2.49395]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.1915 secs, and comparison 153.966 sec, and warnIfPerfScore > 24, and perfScore=18.7959]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.61519 secs, and comparison 11.0769 sec, and warnIfPerfScore > 1.7, and perfScore=1.45458]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.73081 secs, and comparison 7.9218 sec, and warnIfPerfScore > 1.5, and perfScore=1.0247]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.52131 secs, and comparison 12.781 sec, and warnIfPerfScore > 2.1, and perfScore=1.6993]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.82292 secs, and comparison 7.92862 sec, and warnIfPerfScore > 1.6, and perfScore=0.898639]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 9.18142 secs, and comparison 1.41982 sec, and warnIfPerfScore > 0.23, and perfScore=0.15464]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4702 secs, and comparison 13.203 sec, and warnIfPerfScore > 1.3, and perfScore=1.05877]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.98449 secs, and comparison 5.46016 sec, and warnIfPerfScore > 1.2, and perfScore=0.546864]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 6.36317 secs, and comparison 1.51755 sec, and warnIfPerfScore > 0.33, and perfScore=0.23849]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 9.7107 secs, and comparison 39.7302 sec, and warnIfPerfScore > 6, and perfScore=4.09138]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.72891 secs, and comparison 5.14617 sec, and warnIfPerfScore > 0.8, and perfScore=0.528957]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.8716 secs, and comparison 9.36543 sec, and warnIfPerfScore > 1.4, and perfScore=0.948724]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.18468 secs, and comparison 3.49295 sec, and warnIfPerfScore > 0.65, and perfScore=0.564774]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.0588 secs, and comparison 37.3032 sec, and warnIfPerfScore > 4.4, and perfScore=3.70853]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.4793 secs, and comparison 3.46343 sec, and warnIfPerfScore > 0.6, and perfScore=0.534538]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.4049 secs, and comparison 3.45478 sec, and warnIfPerfScore > 0.6, and perfScore=0.539396]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.4928 secs, and comparison 3.45226 sec, and warnIfPerfScore > 0.6, and perfScore=0.531706]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 6.33169 secs, and comparison 4.70753 sec, and warnIfPerfScore > 1.3, and perfScore=0.743486]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.88293 secs, and comparison 8.78745 sec, and warnIfPerfScore > 1.3, and perfScore=1.2767]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 46.7124 secs, and comparison 5.76951 sec, and warnIfPerfScore > 0.3, and perfScore=0.123511]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.38979 secs, and comparison 12.0757 sec, and warnIfPerfScore > 1.5, and perfScore=1.43933]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.55037 secs, and comparison 2.93453 sec, and warnIfPerfScore > 0.55, and perfScore=0.38866]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 15 secs, and comparison 0.783416 sec, and warnIfPerfScore > 0.1, and perfScore=0.0522277]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.04091 sec, and warnIfPerfScore > 0.5, and perfScore=0.202727]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.2198 secs, and comparison 13.5489 sec, and warnIfPerfScore > 2, and perfScore=1.64832]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 9.25186 secs, and comparison 28.9499 sec, and warnIfPerfScore > 3.6, and perfScore=3.12909]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 53 seconds]]]

Succeeded
