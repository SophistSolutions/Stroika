Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Feb 13 3:4:26 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.3124 secs, and comparison 4.72868 sec, and warnIfPerfScore > 0.65, and perfScore=0.384058]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 10.4923 secs, and comparison 2.88752 sec, and warnIfPerfScore > 0.5, and perfScore=0.275204]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 11.3828 secs, and comparison 9.12269 sec, and warnIfPerfScore > 1.05, and perfScore=0.801443]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.96447 secs, and comparison 8.84021 sec, and warnIfPerfScore > 1.15, and perfScore=1.10996]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.4683 secs, and comparison 3.47458 sec, and warnIfPerfScore > 0.48, and perfScore=0.331914]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.4187 secs, and comparison 4.26604 sec, and warnIfPerfScore > 0.57, and perfScore=0.295868]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 15.4582 secs, and comparison 47.4839 sec, and warnIfPerfScore > 2.9, and perfScore=3.07176]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 2.9 and got 3.07176}}}

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.6319 secs, and comparison 27.7077 sec, and warnIfPerfScore > 2.9, and perfScore=2.19346]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 11.4517 secs, and comparison 165.037 sec, and warnIfPerfScore > 24, and perfScore=14.4116]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.0688 secs, and comparison 14.0769 sec, and warnIfPerfScore > 1.7, and perfScore=1.16639]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.8651 secs, and comparison 11.9454 sec, and warnIfPerfScore > 1.5, and perfScore=1.00677]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.33508 secs, and comparison 16.7253 sec, and warnIfPerfScore > 2.1, and perfScore=1.79167]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.9861 secs, and comparison 10.4166 sec, and warnIfPerfScore > 1.6, and perfScore=0.802132]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 13.3595 secs, and comparison 1.54108 sec, and warnIfPerfScore > 0.23, and perfScore=0.115355]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.8367 secs, and comparison 12.9924 sec, and warnIfPerfScore > 1.3, and perfScore=1.01213]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 10.6504 secs, and comparison 7.05049 sec, and warnIfPerfScore > 1.2, and perfScore=0.661991]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 9.60078 secs, and comparison 2.40748 sec, and warnIfPerfScore > 0.33, and perfScore=0.250759]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 10.3852 secs, and comparison 43.4676 sec, and warnIfPerfScore > 6, and perfScore=4.18553]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 10.1499 secs, and comparison 6.60684 sec, and warnIfPerfScore > 0.8, and perfScore=0.650927]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.1472 secs, and comparison 14.5875 sec, and warnIfPerfScore > 1.4, and perfScore=1.43759]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 1.43759}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.25099 secs, and comparison 3.95365 sec, and warnIfPerfScore > 0.65, and perfScore=0.427376]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.6567 secs, and comparison 42.1436 sec, and warnIfPerfScore > 4.4, and perfScore=3.95465]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.23397 secs, and comparison 4.001 sec, and warnIfPerfScore > 0.6, and perfScore=0.433291]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.25469 secs, and comparison 3.99671 sec, and warnIfPerfScore > 0.6, and perfScore=0.431858]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.21921 secs, and comparison 4.14283 sec, and warnIfPerfScore > 0.6, and perfScore=0.449369]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 9.21476 secs, and comparison 8.39218 sec, and warnIfPerfScore > 1.3, and perfScore=0.910733]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.5241 secs, and comparison 11.8521 sec, and warnIfPerfScore > 1.3, and perfScore=1.12618]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 61.858 secs, and comparison 7.12838 sec, and warnIfPerfScore > 0.3, and perfScore=0.115238]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.4245 secs, and comparison 17.7491 sec, and warnIfPerfScore > 1.5, and perfScore=1.42856]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.4113 secs, and comparison 4.45857 sec, and warnIfPerfScore > 0.55, and perfScore=0.309379]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 15 secs, and comparison 1.38952 sec, and warnIfPerfScore > 0.1, and perfScore=0.0926349]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.3808 sec, and warnIfPerfScore > 0.5, and perfScore=0.292053]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.4461 secs, and comparison 19.7678 sec, and warnIfPerfScore > 2, and perfScore=1.72703]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.4861 secs, and comparison 31.9618 sec, and warnIfPerfScore > 3.6, and perfScore=2.55978]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 34 seconds]]]

Succeeded
