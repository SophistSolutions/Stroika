Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug  1 17:31:52 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.0548 secs, and comparison 4.5371 sec, and warnIfPerfScore > 0.65, and perfScore=0.74934]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.97662 secs, and comparison 2.75357 sec, and warnIfPerfScore > 0.5, and perfScore=0.460723]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 8.43237 secs, and comparison 7.581 sec, and warnIfPerfScore > 1.05, and perfScore=0.899035]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.89758 secs, and comparison 7.65101 sec, and warnIfPerfScore > 1.15, and perfScore=1.10923]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.069
	DETAILS:         	[baseline test 33.2393 secs, and comparison 2.29161 sec, and warnIfPerfScore > 0.48, and perfScore=0.0689427]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 31.8441 secs, and comparison 2.95872 sec, and warnIfPerfScore > 0.57, and perfScore=0.0929128]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 7.07764 secs, and comparison 20.2885 sec, and warnIfPerfScore > 2.9, and perfScore=2.86656]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.0074 secs, and comparison 20.7047 sec, and warnIfPerfScore > 2.9, and perfScore=2.58569]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 6.51329 secs, and comparison 148.777 sec, and warnIfPerfScore > 24, and perfScore=22.8421]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.0533 secs, and comparison 10.4579 sec, and warnIfPerfScore > 1.7, and perfScore=1.72764]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.95444 secs, and comparison 5.81519 sec, and warnIfPerfScore > 1.5, and perfScore=0.976615]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 5.77856 secs, and comparison 12.7261 sec, and warnIfPerfScore > 2.1, and perfScore=2.20229]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 7.34804 secs, and comparison 4.23513 sec, and warnIfPerfScore > 1.6, and perfScore=0.576362]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 7.50201 secs, and comparison 0.717398 sec, and warnIfPerfScore > 0.23, and perfScore=0.0956274]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.2106 secs, and comparison 12.7557 sec, and warnIfPerfScore > 1.3, and perfScore=1.04464]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 8.76253 secs, and comparison 5.95198 sec, and warnIfPerfScore > 1.2, and perfScore=0.679253]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 9.03571 secs, and comparison 2.11181 sec, and warnIfPerfScore > 0.33, and perfScore=0.233719]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 8.32293 secs, and comparison 40.0949 sec, and warnIfPerfScore > 6, and perfScore=4.8174]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.33914 secs, and comparison 5.51944 sec, and warnIfPerfScore > 0.8, and perfScore=0.661871]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.50004 secs, and comparison 8.52492 sec, and warnIfPerfScore > 1.4, and perfScore=1.00293]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.93901 secs, and comparison 3.65053 sec, and warnIfPerfScore > 0.65, and perfScore=0.408382]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 9.1406 secs, and comparison 39.217 sec, and warnIfPerfScore > 4.4, and perfScore=4.29042]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.9239 secs, and comparison 3.59423 sec, and warnIfPerfScore > 0.6, and perfScore=0.402764]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.81743 secs, and comparison 3.63381 sec, and warnIfPerfScore > 0.6, and perfScore=0.412117]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.98654 secs, and comparison 3.58179 sec, and warnIfPerfScore > 0.6, and perfScore=0.398573]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.94231 secs, and comparison 5.5018 sec, and warnIfPerfScore > 1.3, and perfScore=0.615254]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.42796 secs, and comparison 9.11444 sec, and warnIfPerfScore > 1.3, and perfScore=0.966745]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 41.4393 secs, and comparison 6.70692 sec, and warnIfPerfScore > 0.3, and perfScore=0.161849]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 6.44718 secs, and comparison 10.6217 sec, and warnIfPerfScore > 1.5, and perfScore=1.6475]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.65594 secs, and comparison 3.34258 sec, and warnIfPerfScore > 0.55, and perfScore=0.502195]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.642037 sec, and warnIfPerfScore > 0.1, and perfScore=0.0428024]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.08179 sec, and warnIfPerfScore > 0.5, and perfScore=0.205453]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.82118 secs, and comparison 13.7054 sec, and warnIfPerfScore > 2, and perfScore=1.75235]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.08086 secs, and comparison 14.757 sec, and warnIfPerfScore > 3.6, and perfScore=1.82617]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 6 seconds]]]

Succeeded
