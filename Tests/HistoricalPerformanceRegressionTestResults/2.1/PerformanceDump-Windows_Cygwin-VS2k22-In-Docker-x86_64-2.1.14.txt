Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 16:7:4 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.08736 secs, and comparison 4.0622 sec, and warnIfPerfScore > 0.65, and perfScore=0.798488]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 4.9891 secs, and comparison 2.35221 sec, and warnIfPerfScore > 0.5, and perfScore=0.471471]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.39227 secs, and comparison 6.89028 sec, and warnIfPerfScore > 1.05, and perfScore=0.932093]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.07987 secs, and comparison 6.89321 sec, and warnIfPerfScore > 1.15, and perfScore=1.13378]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.063
	DETAILS:         	[baseline test 31.5622 secs, and comparison 1.98683 sec, and warnIfPerfScore > 0.48, and perfScore=0.0629495]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.084
	DETAILS:         	[baseline test 29.8722 secs, and comparison 2.49822 sec, and warnIfPerfScore > 0.57, and perfScore=0.0836302]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.15717 secs, and comparison 17.4836 sec, and warnIfPerfScore > 2.9, and perfScore=2.83955]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 7.11725 secs, and comparison 17.788 sec, and warnIfPerfScore > 2.9, and perfScore=2.49928]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	22
	DETAILS:         	[baseline test 5.80425 secs, and comparison 125.968 sec, and warnIfPerfScore > 24, and perfScore=21.7027]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 5.44346 secs, and comparison 8.97359 sec, and warnIfPerfScore > 1.7, and perfScore=1.64851]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.71791 secs, and comparison 5.35168 sec, and warnIfPerfScore > 1.5, and perfScore=0.935951]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.96887 secs, and comparison 10.9598 sec, and warnIfPerfScore > 2.1, and perfScore=2.20569]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 6.50048 secs, and comparison 3.91137 sec, and warnIfPerfScore > 1.6, and perfScore=0.601706]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 6.83206 secs, and comparison 0.698824 sec, and warnIfPerfScore > 0.23, and perfScore=0.102286]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 11.7615 secs, and comparison 11.6126 sec, and warnIfPerfScore > 1.3, and perfScore=0.98734]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 8.29033 secs, and comparison 5.33769 sec, and warnIfPerfScore > 1.2, and perfScore=0.643845]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 7.30585 secs, and comparison 1.76134 sec, and warnIfPerfScore > 0.33, and perfScore=0.241087]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 8.14865 secs, and comparison 37.7721 sec, and warnIfPerfScore > 6, and perfScore=4.63538]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.05986 secs, and comparison 5.25881 sec, and warnIfPerfScore > 0.8, and perfScore=0.652469]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.12008 secs, and comparison 7.2467 sec, and warnIfPerfScore > 1.4, and perfScore=0.892442]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.13386 secs, and comparison 3.31914 sec, and warnIfPerfScore > 0.65, and perfScore=0.465265]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 8.4815 secs, and comparison 34.9998 sec, and warnIfPerfScore > 4.4, and perfScore=4.12661]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.20323 secs, and comparison 3.23484 sec, and warnIfPerfScore > 0.6, and perfScore=0.449082]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.09565 secs, and comparison 3.23734 sec, and warnIfPerfScore > 0.6, and perfScore=0.456244]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.24537 secs, and comparison 3.23946 sec, and warnIfPerfScore > 0.6, and perfScore=0.447107]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 7.2509 secs, and comparison 5.16573 sec, and warnIfPerfScore > 1.3, and perfScore=0.712426]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.57658 secs, and comparison 8.33898 sec, and warnIfPerfScore > 1.3, and perfScore=1.10063]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 37.4347 secs, and comparison 6.32576 sec, and warnIfPerfScore > 0.3, and perfScore=0.168981]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.82007 secs, and comparison 9.00945 sec, and warnIfPerfScore > 1.5, and perfScore=1.548]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.85089 secs, and comparison 2.93913 sec, and warnIfPerfScore > 0.55, and perfScore=0.50234]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.04
	DETAILS:         	[baseline test 15 secs, and comparison 0.592905 sec, and warnIfPerfScore > 0.1, and perfScore=0.039527]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.15436 sec, and warnIfPerfScore > 0.5, and perfScore=0.143624]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.4877 secs, and comparison 12.976 sec, and warnIfPerfScore > 2, and perfScore=2.00009]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.80708 secs, and comparison 14.3881 sec, and warnIfPerfScore > 3.6, and perfScore=1.84296]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 37 seconds]]]

Succeeded
