Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Aug 24 20:57:11 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 11.5563 secs, and comparison 6.01356 sec, and warnIfPerfScore > 0.65, and perfScore=0.520371]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.2399 secs, and comparison 3.43352 sec, and warnIfPerfScore > 0.5, and perfScore=0.305476]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 16.5382 secs, and comparison 12.7571 sec, and warnIfPerfScore > 1.05, and perfScore=0.771372]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.3778 secs, and comparison 14.0506 sec, and warnIfPerfScore > 1.15, and perfScore=1.23492]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 22.8515 secs, and comparison 3.58985 sec, and warnIfPerfScore > 0.48, and perfScore=0.157094]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 16.3595 secs, and comparison 3.87424 sec, and warnIfPerfScore > 0.57, and perfScore=0.23682]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.3623 secs, and comparison 30.2104 sec, and warnIfPerfScore > 2.9, and perfScore=1.96653]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 17.4959 secs, and comparison 36.6187 sec, and warnIfPerfScore > 2.9, and perfScore=2.09299]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 16.0822 secs, and comparison 165.945 sec, and warnIfPerfScore > 24, and perfScore=10.3185]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 15.8925 secs, and comparison 13.566 sec, and warnIfPerfScore > 1.7, and perfScore=0.853606]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 16.1539 secs, and comparison 14.9733 sec, and warnIfPerfScore > 1.5, and perfScore=0.926914]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.3919 secs, and comparison 16.6061 sec, and warnIfPerfScore > 2.1, and perfScore=1.24001]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.5262 secs, and comparison 7.81848 sec, and warnIfPerfScore > 1.6, and perfScore=0.62417]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15.564 secs, and comparison 2.12988 sec, and warnIfPerfScore > 0.23, and perfScore=0.136847]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 19.9505 secs, and comparison 19.6144 sec, and warnIfPerfScore > 1.3, and perfScore=0.983152]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 13.9126 secs, and comparison 13.1457 sec, and warnIfPerfScore > 1.2, and perfScore=0.944874]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 16.2456 secs, and comparison 4.06401 sec, and warnIfPerfScore > 0.33, and perfScore=0.25016]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 13.2556 secs, and comparison 48.603 sec, and warnIfPerfScore > 6, and perfScore=3.6666]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 14.5619 secs, and comparison 12.8316 sec, and warnIfPerfScore > 0.8, and perfScore=0.881175]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.1309 secs, and comparison 22.7374 sec, and warnIfPerfScore > 1.4, and perfScore=1.60906]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 19.9632 secs, and comparison 5.41474 sec, and warnIfPerfScore > 0.65, and perfScore=0.271236]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 12.8079 secs, and comparison 42.6035 sec, and warnIfPerfScore > 4.4, and perfScore=3.32635]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.2852 secs, and comparison 4.31878 sec, and warnIfPerfScore > 0.6, and perfScore=0.325083]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.0083 secs, and comparison 4.3632 sec, and warnIfPerfScore > 0.6, and perfScore=0.311473]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 16.029 secs, and comparison 4.69228 sec, and warnIfPerfScore > 0.6, and perfScore=0.292737]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 16.1397 secs, and comparison 11.1717 sec, and warnIfPerfScore > 1.3, and perfScore=0.692185]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 18.7173 secs, and comparison 14.6047 sec, and warnIfPerfScore > 1.3, and perfScore=0.78028]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 85.8607 secs, and comparison 7.76098 sec, and warnIfPerfScore > 0.3, and perfScore=0.0903903]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.2407 secs, and comparison 19.5599 sec, and warnIfPerfScore > 1.5, and perfScore=1.37352]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 23.165 secs, and comparison 6.53816 sec, and warnIfPerfScore > 0.55, and perfScore=0.282243]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.80986 sec, and warnIfPerfScore > 0.1, and perfScore=0.120658]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.80315 sec, and warnIfPerfScore > 0.5, and perfScore=0.32021]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.5922 secs, and comparison 30.4231 sec, and warnIfPerfScore > 2, and perfScore=1.55282]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.2828 secs, and comparison 39.9102 sec, and warnIfPerfScore > 3.6, and perfScore=1.79107]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 20 minutes, 45 seconds]]]

Succeeded
