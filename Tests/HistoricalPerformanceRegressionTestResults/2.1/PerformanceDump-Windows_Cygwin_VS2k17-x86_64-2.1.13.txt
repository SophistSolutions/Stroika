Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Apr 13 7:14:45 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 36.986 secs, and comparison 5.77261 sec, and warnIfPerfScore > 0.65, and perfScore=0.156075]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 36.971 secs, and comparison 5.62139 sec, and warnIfPerfScore > 0.5, and perfScore=0.152049]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 15.9623 secs, and comparison 11.1867 sec, and warnIfPerfScore > 1.05, and perfScore=0.700821]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 11.8133 secs, and comparison 11.7523 sec, and warnIfPerfScore > 1.15, and perfScore=0.994836]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 17.3718 secs, and comparison 3.42196 sec, and warnIfPerfScore > 0.48, and perfScore=0.196984]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 17.6709 secs, and comparison 3.6201 sec, and warnIfPerfScore > 0.57, and perfScore=0.204862]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 17.6366 secs, and comparison 29.3939 sec, and warnIfPerfScore > 2.9, and perfScore=1.66664]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 18.0568 secs, and comparison 31.1712 sec, and warnIfPerfScore > 2.9, and perfScore=1.72629]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 13.078 secs, and comparison 151.532 sec, and warnIfPerfScore > 24, and perfScore=11.5868]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 17.5535 secs, and comparison 12.6471 sec, and warnIfPerfScore > 1.7, and perfScore=0.720487]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 36.3849 secs, and comparison 35.7826 sec, and warnIfPerfScore > 1.5, and perfScore=0.983446]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 15.104 secs, and comparison 14.928 sec, and warnIfPerfScore > 2.1, and perfScore=0.988347]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 30.3661 secs, and comparison 9.28055 sec, and warnIfPerfScore > 1.6, and perfScore=0.305622]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.061
	DETAILS:         	[baseline test 32.6093 secs, and comparison 2.00062 sec, and warnIfPerfScore > 0.23, and perfScore=0.0613511]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 11.4406 secs, and comparison 19.9078 sec, and warnIfPerfScore > 1.3, and perfScore=1.74011]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.8775 secs, and comparison 18.7785 sec, and warnIfPerfScore > 1.2, and perfScore=1.45824]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 19.873 secs, and comparison 5.2441 sec, and warnIfPerfScore > 0.33, and perfScore=0.26388]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 12.1669 secs, and comparison 50.2349 sec, and warnIfPerfScore > 6, and perfScore=4.12882]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.0326 secs, and comparison 17.6456 sec, and warnIfPerfScore > 0.8, and perfScore=1.46649]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 13.2834 secs, and comparison 48.1737 sec, and warnIfPerfScore > 1.4, and perfScore=3.6266]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 19.5422 secs, and comparison 4.3286 sec, and warnIfPerfScore > 0.65, and perfScore=0.2215]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 22.0614 secs, and comparison 52.0258 sec, and warnIfPerfScore > 4.4, and perfScore=2.35822]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 19.7048 secs, and comparison 5.44444 sec, and warnIfPerfScore > 0.6, and perfScore=0.2763]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 19.1249 secs, and comparison 5.34628 sec, and warnIfPerfScore > 0.6, and perfScore=0.279546]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 19.1573 secs, and comparison 5.577 sec, and warnIfPerfScore > 0.6, and perfScore=0.291116]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 19.3844 secs, and comparison 12.1734 sec, and warnIfPerfScore > 1.3, and perfScore=0.628001]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 25.876 secs, and comparison 19.7332 sec, and warnIfPerfScore > 1.3, and perfScore=0.762607]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 92.6646 secs, and comparison 7.92653 sec, and warnIfPerfScore > 0.3, and perfScore=0.0855399]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 16.4343 secs, and comparison 20.5248 sec, and warnIfPerfScore > 1.5, and perfScore=1.2489]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 17.9544 secs, and comparison 5.505 sec, and warnIfPerfScore > 0.55, and perfScore=0.30661]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.62971 sec, and warnIfPerfScore > 0.1, and perfScore=0.108647]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.33602 sec, and warnIfPerfScore > 0.5, and perfScore=0.289068]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.9288 secs, and comparison 20.6118 sec, and warnIfPerfScore > 2, and perfScore=1.14965]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 20.8175 secs, and comparison 24.838 sec, and warnIfPerfScore > 3.6, and perfScore=1.19313]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 23 minutes, 12 seconds]]]

Succeeded
