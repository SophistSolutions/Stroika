Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Mar 27 8::39 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 41.9446 secs, and comparison 6.88345 sec, and warnIfPerfScore > 0.65, and perfScore=0.164108]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 41.7809 secs, and comparison 6.44312 sec, and warnIfPerfScore > 0.5, and perfScore=0.154212]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 17.4789 secs, and comparison 13.2571 sec, and warnIfPerfScore > 1.05, and perfScore=0.758463]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.3882 secs, and comparison 13.1805 sec, and warnIfPerfScore > 1.15, and perfScore=0.984485]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.4685 secs, and comparison 3.60275 sec, and warnIfPerfScore > 0.48, and perfScore=0.185055]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 20.7907 secs, and comparison 4.35438 sec, and warnIfPerfScore > 0.57, and perfScore=0.209439]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.9865 secs, and comparison 32.9145 sec, and warnIfPerfScore > 2.9, and perfScore=1.64684]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 20.0691 secs, and comparison 34.8508 sec, and warnIfPerfScore > 2.9, and perfScore=1.73654]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 16.4998 secs, and comparison 206.536 sec, and warnIfPerfScore > 24, and perfScore=12.5175]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 19.4136 secs, and comparison 14.4668 sec, and warnIfPerfScore > 1.7, and perfScore=0.745188]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 41.3265 secs, and comparison 41.1335 sec, and warnIfPerfScore > 1.5, and perfScore=0.995329]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.8247 secs, and comparison 17.9143 sec, and warnIfPerfScore > 2.1, and perfScore=1.00503]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 35.633 secs, and comparison 10.4481 sec, and warnIfPerfScore > 1.6, and perfScore=0.293215]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.066
	DETAILS:         	[baseline test 36.2828 secs, and comparison 2.40948 sec, and warnIfPerfScore > 0.23, and perfScore=0.0664084]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 13.4204 secs, and comparison 22.7094 sec, and warnIfPerfScore > 1.3, and perfScore=1.69215]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.6233 secs, and comparison 20.6448 sec, and warnIfPerfScore > 1.2, and perfScore=1.41178]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 22.8343 secs, and comparison 5.55845 sec, and warnIfPerfScore > 0.33, and perfScore=0.243425]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 13.3972 secs, and comparison 53.396 sec, and warnIfPerfScore > 6, and perfScore=3.98561]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.38 secs, and comparison 20.1653 sec, and warnIfPerfScore > 0.8, and perfScore=1.50712]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.955 secs, and comparison 54.9328 sec, and warnIfPerfScore > 1.4, and perfScore=3.93643]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 21.8948 secs, and comparison 5.08749 sec, and warnIfPerfScore > 0.65, and perfScore=0.232361]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 24.9478 secs, and comparison 61.9021 sec, and warnIfPerfScore > 4.4, and perfScore=2.48126]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 22.348 secs, and comparison 5.88659 sec, and warnIfPerfScore > 0.6, and perfScore=0.263406]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 22.7879 secs, and comparison 6.19691 sec, and warnIfPerfScore > 0.6, and perfScore=0.271938]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 21.4634 secs, and comparison 6.54092 sec, and warnIfPerfScore > 0.6, and perfScore=0.304748]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 22.0558 secs, and comparison 14.2201 sec, and warnIfPerfScore > 1.3, and perfScore=0.644732]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 30.7098 secs, and comparison 22.2756 sec, and warnIfPerfScore > 1.3, and perfScore=0.725356]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.082
	DETAILS:         	[baseline test 106.292 secs, and comparison 8.70255 sec, and warnIfPerfScore > 0.3, and perfScore=0.0818737]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.804 secs, and comparison 22.9311 sec, and warnIfPerfScore > 1.5, and perfScore=1.28797]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 19.2845 secs, and comparison 6.28165 sec, and warnIfPerfScore > 0.55, and perfScore=0.325735]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.07731 sec, and warnIfPerfScore > 0.1, and perfScore=0.138487]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.72474 sec, and warnIfPerfScore > 0.5, and perfScore=0.314983]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 20.5239 secs, and comparison 22.7826 sec, and warnIfPerfScore > 2, and perfScore=1.11005]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 22.9904 secs, and comparison 26.9612 sec, and warnIfPerfScore > 3.6, and perfScore=1.17271]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 26 minutes, 50 seconds]]]

Succeeded
