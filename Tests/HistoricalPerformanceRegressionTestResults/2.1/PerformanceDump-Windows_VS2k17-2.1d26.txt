Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Jun 15 8:26:26 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.9914 secs, and comparison 5.43431 sec, and warnIfPerfScore > 0.62, and perfScore=0.494414]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.9165 secs, and comparison 3.65547 sec, and warnIfPerfScore > 0.5, and perfScore=0.334857]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.747 secs, and comparison 9.25127 sec, and warnIfPerfScore > 1.05, and perfScore=0.860821]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.33007 secs, and comparison 4.32789 sec, and warnIfPerfScore > 0.48, and perfScore=0.463864]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 9.3284 secs, and comparison 4.70229 sec, and warnIfPerfScore > 0.55, and perfScore=0.504083]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.7732 secs, and comparison 27.1146 sec, and warnIfPerfScore > 2.9, and perfScore=2.51686]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.2091 secs, and comparison 29.0852 sec, and warnIfPerfScore > 2.9, and perfScore=2.59479]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 10.6944 secs, and comparison 90.9801 sec, and warnIfPerfScore > 9.7, and perfScore=8.50724]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.744 secs, and comparison 14.8191 sec, and warnIfPerfScore > 1.6, and perfScore=1.37929]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.7014 secs, and comparison 14.0427 sec, and warnIfPerfScore > 1.5, and perfScore=1.2001]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.43959 secs, and comparison 15.1129 sec, and warnIfPerfScore > 2.1, and perfScore=1.79071]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.3703 secs, and comparison 11.7472 sec, and warnIfPerfScore > 1.3, and perfScore=1.03314]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 12.1696 secs, and comparison 1.52195 sec, and warnIfPerfScore > 0.18, and perfScore=0.125062]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.327 secs, and comparison 12.9415 sec, and warnIfPerfScore > 1.3, and perfScore=1.04985]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.55146 secs, and comparison 10.4791 sec, and warnIfPerfScore > 1.2, and perfScore=1.09712]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.0127 secs, and comparison 2.24909 sec, and warnIfPerfScore > 0.33, and perfScore=0.224623]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.18495 secs, and comparison 45.7464 sec, and warnIfPerfScore > 6, and perfScore=4.98058]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.97839 secs, and comparison 4.17917 sec, and warnIfPerfScore > 0.5, and perfScore=0.418823]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.425 secs, and comparison 41.1184 sec, and warnIfPerfScore > 4.4, and perfScore=3.94422]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.0178 secs, and comparison 4.65169 sec, and warnIfPerfScore > 0.6, and perfScore=0.464343]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.3216 secs, and comparison 19.2416 sec, and warnIfPerfScore > 1.5, and perfScore=1.34353]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.6685 secs, and comparison 4.34791 sec, and warnIfPerfScore > 0.55, and perfScore=0.318097]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.70513 sec, and warnIfPerfScore > 0.25, and perfScore=0.113675]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.72119 sec, and warnIfPerfScore > 0.5, and perfScore=0.381413]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.3258 secs, and comparison 17.0713 sec, and warnIfPerfScore > 1.9, and perfScore=1.38501]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.3724 secs, and comparison 33.1922 sec, and warnIfPerfScore > 3.1, and perfScore=2.91865]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 38 seconds]]]

Succeeded
