Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Sep  5 3:9:5 2023]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 53.2729 secs, and comparison 17.8733 sec, and warnIfPerfScore > 0.65, and perfScore=0.335505]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 53.2965 secs, and comparison 17.4667 sec, and warnIfPerfScore > 0.5, and perfScore=0.327728]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 30.0329 secs, and comparison 24.3327 sec, and warnIfPerfScore > 1.05, and perfScore=0.810201]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 25.0585 secs, and comparison 22.6241 sec, and warnIfPerfScore > 1.15, and perfScore=0.902852]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 35.6363 secs, and comparison 4.27674 sec, and warnIfPerfScore > 0.48, and perfScore=0.120011]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 40.6314 secs, and comparison 3.92643 sec, and warnIfPerfScore > 0.57, and perfScore=0.0966355]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 27.573 secs, and comparison 42.8491 sec, and warnIfPerfScore > 2.9, and perfScore=1.55402]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 29.2844 secs, and comparison 48.42 sec, and warnIfPerfScore > 2.9, and perfScore=1.65344]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 25.0119 secs, and comparison 250.982 sec, and warnIfPerfScore > 24, and perfScore=10.0345]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 24.6778 secs, and comparison 24.2403 sec, and warnIfPerfScore > 1.7, and perfScore=0.982269]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 48.9295 secs, and comparison 52.5469 sec, and warnIfPerfScore > 1.5, and perfScore=1.07393]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 19.771 secs, and comparison 18.7898 sec, and warnIfPerfScore > 2.1, and perfScore=0.950368]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 43.5628 secs, and comparison 12.582 sec, and warnIfPerfScore > 1.6, and perfScore=0.288825]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.079
	DETAILS:         	[baseline test 45.331 secs, and comparison 3.58632 sec, and warnIfPerfScore > 0.23, and perfScore=0.0791141]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 18.5883 secs, and comparison 25.7328 sec, and warnIfPerfScore > 1.3, and perfScore=1.38435]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.38435}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.4643 secs, and comparison 21.3926 sec, and warnIfPerfScore > 1.2, and perfScore=1.38335]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.38335}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.3654 secs, and comparison 4.41053 sec, and warnIfPerfScore > 0.33, and perfScore=0.307024]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.7366 secs, and comparison 53.2984 sec, and warnIfPerfScore > 6, and perfScore=3.18454]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.2078 secs, and comparison 22.8096 sec, and warnIfPerfScore > 0.8, and perfScore=1.40732]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.40732}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 17.607 secs, and comparison 37.4661 sec, and warnIfPerfScore > 1.4, and perfScore=2.1279]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.1279}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.5987 secs, and comparison 5.06632 sec, and warnIfPerfScore > 0.65, and perfScore=0.324791]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 28.357 secs, and comparison 63.9663 sec, and warnIfPerfScore > 4.4, and perfScore=2.25575]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 16.1517 secs, and comparison 5.95477 sec, and warnIfPerfScore > 0.6, and perfScore=0.368678]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15.7804 secs, and comparison 5.97898 sec, and warnIfPerfScore > 0.6, and perfScore=0.378886]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 16.0218 secs, and comparison 6.02052 sec, and warnIfPerfScore > 0.6, and perfScore=0.375771]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 15.9223 secs, and comparison 14.6883 sec, and warnIfPerfScore > 1.3, and perfScore=0.922501]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 23.2795 secs, and comparison 23.2728 sec, and warnIfPerfScore > 1.3, and perfScore=0.999713]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 130.56 secs, and comparison 16.1348 sec, and warnIfPerfScore > 0.3, and perfScore=0.123581]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 31.144 secs, and comparison 35.498 sec, and warnIfPerfScore > 1.5, and perfScore=1.1398]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 24.3534 secs, and comparison 7.41644 sec, and warnIfPerfScore > 0.55, and perfScore=0.304534]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.22899 sec, and warnIfPerfScore > 0.1, and perfScore=0.148599]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.148599}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.80519 sec, and warnIfPerfScore > 0.5, and perfScore=0.320346]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 24.9521 secs, and comparison 28.8402 sec, and warnIfPerfScore > 2, and perfScore=1.15582]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 28.1588 secs, and comparison 48.486 sec, and warnIfPerfScore > 3.6, and perfScore=1.72187]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 32 minutes, 32 seconds]]]

Succeeded
