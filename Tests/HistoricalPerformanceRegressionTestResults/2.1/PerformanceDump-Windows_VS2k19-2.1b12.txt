Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 16 22:35:7 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 11.0694 secs, and comparison 5.61696 sec, and warnIfPerfScore > 0.62, and perfScore=0.507432]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.5908 secs, and comparison 3.63861 sec, and warnIfPerfScore > 0.5, and perfScore=0.313922]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 13.3216 secs, and comparison 10.5417 sec, and warnIfPerfScore > 1.05, and perfScore=0.791318]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 13.2706 secs, and comparison 4.63905 sec, and warnIfPerfScore > 0.48, and perfScore=0.349573]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.9223 secs, and comparison 4.75291 sec, and warnIfPerfScore > 0.57, and perfScore=0.318511]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.1462 secs, and comparison 28.5462 sec, and warnIfPerfScore > 2.9, and perfScore=2.35021]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 18.2496 secs, and comparison 30.6164 sec, and warnIfPerfScore > 2.9, and perfScore=1.67764]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 11.7144 secs, and comparison 109.527 sec, and warnIfPerfScore > 9.7, and perfScore=9.34972]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.3102 secs, and comparison 13.4383 sec, and warnIfPerfScore > 1.6, and perfScore=1.18816]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 14.0068 secs, and comparison 13.4752 sec, and warnIfPerfScore > 1.5, and perfScore=0.962046]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.62351 secs, and comparison 13.3145 sec, and warnIfPerfScore > 2.1, and perfScore=1.38354]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 15.7748 secs, and comparison 9.44448 sec, and warnIfPerfScore > 1.3, and perfScore=0.598708]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 13.3643 secs, and comparison 1.73226 sec, and warnIfPerfScore > 0.23, and perfScore=0.129619]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 14.6409 secs, and comparison 14.0883 sec, and warnIfPerfScore > 1.3, and perfScore=0.962257]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.8621 secs, and comparison 10.1655 sec, and warnIfPerfScore > 1.2, and perfScore=0.856971]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.4827 secs, and comparison 2.35651 sec, and warnIfPerfScore > 0.33, and perfScore=0.188783]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 10.5663 secs, and comparison 47.5078 sec, and warnIfPerfScore > 6, and perfScore=4.49616]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.3565 secs, and comparison 4.5977 sec, and warnIfPerfScore > 0.5, and perfScore=0.404851]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 13.2683 secs, and comparison 42.0564 sec, and warnIfPerfScore > 4.4, and perfScore=3.16968]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.1794 secs, and comparison 4.5213 sec, and warnIfPerfScore > 0.6, and perfScore=0.444163]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.4243 secs, and comparison 16.1887 sec, and warnIfPerfScore > 1.5, and perfScore=1.30299]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.1081 secs, and comparison 4.26079 sec, and warnIfPerfScore > 0.55, and perfScore=0.30201]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15 secs, and comparison 1.47106 sec, and warnIfPerfScore > 0.25, and perfScore=0.0980709]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.64899 sec, and warnIfPerfScore > 0.5, and perfScore=0.309932]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 11.7292 secs, and comparison 17.6987 sec, and warnIfPerfScore > 2, and perfScore=1.50895]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.0066 secs, and comparison 35.038 sec, and warnIfPerfScore > 3.1, and perfScore=2.91824]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 40 seconds]]]

Succeeded
