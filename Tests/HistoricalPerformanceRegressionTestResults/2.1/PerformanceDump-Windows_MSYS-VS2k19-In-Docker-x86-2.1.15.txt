Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Jan 30 17:25:13 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.45627 secs, and comparison 4.48628 sec, and warnIfPerfScore > 0.65, and perfScore=0.60168]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 7.3822 secs, and comparison 2.81912 sec, and warnIfPerfScore > 0.5, and perfScore=0.381881]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.1732 secs, and comparison 7.74171 sec, and warnIfPerfScore > 1.05, and perfScore=0.843948]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.01107 secs, and comparison 7.60148 sec, and warnIfPerfScore > 1.15, and perfScore=1.08421]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.69837 secs, and comparison 2.25828 sec, and warnIfPerfScore > 0.48, and perfScore=0.259621]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.54973 secs, and comparison 2.69624 sec, and warnIfPerfScore > 0.57, and perfScore=0.31536]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.28744 secs, and comparison 21.3594 sec, and warnIfPerfScore > 2.9, and perfScore=2.29982]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.78915 secs, and comparison 22.5139 sec, and warnIfPerfScore > 2.9, and perfScore=2.29989]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.63977 secs, and comparison 168.196 sec, and warnIfPerfScore > 24, and perfScore=17.4481]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.3369 secs, and comparison 12.1178 sec, and warnIfPerfScore > 1.7, and perfScore=1.29784]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.3316 secs, and comparison 10.6302 sec, and warnIfPerfScore > 1.5, and perfScore=1.0289]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.36707 secs, and comparison 14.9434 sec, and warnIfPerfScore > 2.1, and perfScore=1.59532]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.0136 secs, and comparison 9.65016 sec, and warnIfPerfScore > 1.6, and perfScore=0.803267]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.2487 secs, and comparison 1.76145 sec, and warnIfPerfScore > 0.23, and perfScore=0.143807]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.5149 secs, and comparison 20.4902 sec, and warnIfPerfScore > 1.3, and perfScore=1.32068]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.32068}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 12.6063 secs, and comparison 7.47148 sec, and warnIfPerfScore > 1.2, and perfScore=0.592677]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.17361 secs, and comparison 2.12545 sec, and warnIfPerfScore > 0.33, and perfScore=0.260038]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 12.1484 secs, and comparison 47.7156 sec, and warnIfPerfScore > 6, and perfScore=3.92772]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2866 secs, and comparison 14.0451 sec, and warnIfPerfScore > 0.8, and perfScore=1.14313]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.14313}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.0802 secs, and comparison 12.4398 sec, and warnIfPerfScore > 1.4, and perfScore=1.02977]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 8.49546 secs, and comparison 4.18711 sec, and warnIfPerfScore > 0.65, and perfScore=0.492864]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 12.9829 secs, and comparison 43.94 sec, and warnIfPerfScore > 4.4, and perfScore=3.38446]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 8.36697 secs, and comparison 3.85323 sec, and warnIfPerfScore > 0.6, and perfScore=0.460528]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 8.18672 secs, and comparison 4.10005 sec, and warnIfPerfScore > 0.6, and perfScore=0.500817]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.60314 secs, and comparison 4.17209 sec, and warnIfPerfScore > 0.6, and perfScore=0.484949]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.57355 secs, and comparison 6.15329 sec, and warnIfPerfScore > 1.3, and perfScore=0.717706]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.5397 secs, and comparison 13.1638 sec, and warnIfPerfScore > 1.3, and perfScore=1.14074]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 78.417 secs, and comparison 9.54609 sec, and warnIfPerfScore > 0.3, and perfScore=0.121735]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.3507 secs, and comparison 20.229 sec, and warnIfPerfScore > 1.5, and perfScore=1.31779]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 11.8441 secs, and comparison 4.69965 sec, and warnIfPerfScore > 0.55, and perfScore=0.396791]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 15 secs, and comparison 1.45298 sec, and warnIfPerfScore > 0.1, and perfScore=0.0968655]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.97007 sec, and warnIfPerfScore > 0.5, and perfScore=0.264671]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.3474 secs, and comparison 20.2025 sec, and warnIfPerfScore > 2, and perfScore=1.31635]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 17.5026 secs, and comparison 44.045 sec, and warnIfPerfScore > 3.6, and perfScore=2.51648]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 28 seconds]]]

Succeeded
