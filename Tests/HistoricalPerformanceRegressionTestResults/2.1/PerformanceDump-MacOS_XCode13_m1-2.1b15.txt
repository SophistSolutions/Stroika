Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Dec 23 10:43:17 2021]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 3.21226 secs, and comparison 4.82051 sec, and warnIfPerfScore > 0.62, and perfScore=1.50066]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 3.38448 secs, and comparison 2.28044 sec, and warnIfPerfScore > 0.5, and perfScore=0.673793]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.25161 secs, and comparison 7.17843 sec, and warnIfPerfScore > 1.05, and perfScore=0.989909]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.31964 secs, and comparison 7.17878 sec, and warnIfPerfScore > 1.15, and perfScore=1.13595]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 5.90024 secs, and comparison 1.50492 sec, and warnIfPerfScore > 0.48, and perfScore=0.25506]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 5.91037 secs, and comparison 2.01232 sec, and warnIfPerfScore > 0.57, and perfScore=0.340473]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.92718 secs, and comparison 15.6712 sec, and warnIfPerfScore > 2.9, and perfScore=2.64396]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 7.05287 secs, and comparison 16.4206 sec, and warnIfPerfScore > 2.9, and perfScore=2.32821]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 9.51024 secs, and comparison 55.9021 sec, and warnIfPerfScore > 9.7, and perfScore=5.8781]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 4.33832 secs, and comparison 8.06034 sec, and warnIfPerfScore > 1.6, and perfScore=1.85794]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 4.71961 secs, and comparison 3.85886 sec, and warnIfPerfScore > 1.5, and perfScore=0.817622]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.74002 secs, and comparison 9.7882 sec, and warnIfPerfScore > 2.1, and perfScore=2.61715]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 5.2318 secs, and comparison 2.99954 sec, and warnIfPerfScore > 1.3, and perfScore=0.573328]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 5.47947 secs, and comparison 0.68375 sec, and warnIfPerfScore > 0.23, and perfScore=0.124784]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 12.4267 secs, and comparison 12.901 sec, and warnIfPerfScore > 1.3, and perfScore=1.03817]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.47272 secs, and comparison 5.304 sec, and warnIfPerfScore > 1.2, and perfScore=1.18585]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 4.59886 secs, and comparison 1.06452 sec, and warnIfPerfScore > 0.33, and perfScore=0.231474]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 4.21634 secs, and comparison 38.4355 sec, and warnIfPerfScore > 6, and perfScore=9.11584]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.21844 secs, and comparison 5.09352 sec, and warnIfPerfScore > 0.8, and perfScore=1.20744]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 4.20429 secs, and comparison 7.04314 sec, and warnIfPerfScore > 0.9, and perfScore=1.67523]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 4.59846 secs, and comparison 3.18469 sec, and warnIfPerfScore > 0.5, and perfScore=0.692556]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 5.6209 secs, and comparison 29.0792 sec, and warnIfPerfScore > 4.4, and perfScore=5.17341]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 4.41127 secs, and comparison 2.80714 sec, and warnIfPerfScore > 0.6, and perfScore=0.636357]
	                 	Collection<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 29.3098 secs, and comparison 4.19668 sec, and warnIfPerfScore > 0.2, and perfScore=0.143184]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.26694 secs, and comparison 11.9982 sec, and warnIfPerfScore > 1.5, and perfScore=1.29473]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 4.55318 secs, and comparison 2.62464 sec, and warnIfPerfScore > 0.55, and perfScore=0.576442]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.10401 sec, and warnIfPerfScore > 0.25, and perfScore=0.140267]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.94608 sec, and warnIfPerfScore > 0.5, and perfScore=0.129739]
	                 	Test_Optional_ is FASTER

[[[Tests took: 7 minutes, 16 seconds]]]

Succeeded
