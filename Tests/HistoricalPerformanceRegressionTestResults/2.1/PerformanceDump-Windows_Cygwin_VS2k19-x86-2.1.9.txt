Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Nov 12 2:33:21 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 53.2435 secs, and comparison 16.2393 sec, and warnIfPerfScore > 0.65, and perfScore=0.305]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 53.0041 secs, and comparison 15.7028 sec, and warnIfPerfScore > 0.5, and perfScore=0.296256]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 31.3898 secs, and comparison 24.6511 sec, and warnIfPerfScore > 1.05, and perfScore=0.785323]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 23.0345 secs, and comparison 21.7996 sec, and warnIfPerfScore > 1.15, and perfScore=0.946389]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 24.635 secs, and comparison 3.94849 sec, and warnIfPerfScore > 0.48, and perfScore=0.160279]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 25.0235 secs, and comparison 3.98949 sec, and warnIfPerfScore > 0.57, and perfScore=0.15943]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 28.0472 secs, and comparison 43.4945 sec, and warnIfPerfScore > 2.9, and perfScore=1.55076]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 22.1068 secs, and comparison 38.7715 sec, and warnIfPerfScore > 2.9, and perfScore=1.75383]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 20.5855 secs, and comparison 264.406 sec, and warnIfPerfScore > 24, and perfScore=12.8443]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 23.6268 secs, and comparison 18.975 sec, and warnIfPerfScore > 1.7, and perfScore=0.803115]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 48.8764 secs, and comparison 48.7377 sec, and warnIfPerfScore > 1.5, and perfScore=0.997162]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 18.3949 secs, and comparison 17.9863 sec, and warnIfPerfScore > 2.1, and perfScore=0.977784]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 47.754 secs, and comparison 16.4344 sec, and warnIfPerfScore > 1.6, and perfScore=0.344148]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.078
	DETAILS:         	[baseline test 43.2963 secs, and comparison 3.35933 sec, and warnIfPerfScore > 0.23, and perfScore=0.0775892]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.2274 secs, and comparison 23.5264 sec, and warnIfPerfScore > 1.3, and perfScore=1.545]
	                 	Charactes::String is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.3 and got 1.545}}}

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.3107 secs, and comparison 22.7381 sec, and warnIfPerfScore > 1.2, and perfScore=1.58889]
	                 	Sequence<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.2 and got 1.58889}}}

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.7848 secs, and comparison 5.34369 sec, and warnIfPerfScore > 0.33, and perfScore=0.338534]
	                 	Sequence<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.33 and got 0.338534}}}

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 14.2167 secs, and comparison 52.5044 sec, and warnIfPerfScore > 6, and perfScore=3.69314]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.916 secs, and comparison 22.7064 sec, and warnIfPerfScore > 0.8, and perfScore=1.26738]
	                 	Sequence_Array<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 0.8 and got 1.26738}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 14.1398 secs, and comparison 33.9783 sec, and warnIfPerfScore > 1.4, and perfScore=2.40302]
	                 	Sequence_stdvector<int> is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.4 and got 2.40302}}}

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.6431 secs, and comparison 5.40095 sec, and warnIfPerfScore > 0.65, and perfScore=0.324515]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 27.3647 secs, and comparison 56.8044 sec, and warnIfPerfScore > 4.4, and perfScore=2.07583]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 17.0957 secs, and comparison 6.03741 sec, and warnIfPerfScore > 0.6, and perfScore=0.353154]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 13.1091 secs, and comparison 6.06387 sec, and warnIfPerfScore > 0.6, and perfScore=0.462568]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.2023 secs, and comparison 5.71719 sec, and warnIfPerfScore > 0.6, and perfScore=0.433046]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.679 secs, and comparison 14.1637 sec, and warnIfPerfScore > 1.3, and perfScore=1.03543]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 22.6643 secs, and comparison 19.848 sec, and warnIfPerfScore > 1.3, and perfScore=0.87574]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 110.929 secs, and comparison 15.8865 sec, and warnIfPerfScore > 0.3, and perfScore=0.143213]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 27.8341 secs, and comparison 32.8579 sec, and warnIfPerfScore > 1.5, and perfScore=1.18049]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 23.2056 secs, and comparison 7.56635 sec, and warnIfPerfScore > 0.55, and perfScore=0.326057]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.28265 sec, and warnIfPerfScore > 0.1, and perfScore=0.152177]
	                 	Test_JSONReadWriteFile is FASTER
	                 	{{{WARNING - expected performance score less than 0.1 and got 0.152177}}}

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.18091 sec, and warnIfPerfScore > 0.5, and perfScore=0.345394]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 24.573 secs, and comparison 26.0123 sec, and warnIfPerfScore > 2, and perfScore=1.05857]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 27.494 secs, and comparison 42.9896 sec, and warnIfPerfScore > 3.6, and perfScore=1.5636]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 30 minutes, 35 seconds]]]

Succeeded
