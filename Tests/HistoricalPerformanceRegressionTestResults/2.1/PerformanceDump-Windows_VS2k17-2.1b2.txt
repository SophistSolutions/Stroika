Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Aug  2 21:52:20 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.9529 secs, and comparison 5.65584 sec, and warnIfPerfScore > 0.62, and perfScore=0.405353]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.1457 secs, and comparison 3.83355 sec, and warnIfPerfScore > 0.5, and perfScore=0.271005]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 14.699 secs, and comparison 9.73687 sec, and warnIfPerfScore > 1.05, and perfScore=0.662416]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.0734 secs, and comparison 4.66452 sec, and warnIfPerfScore > 0.48, and perfScore=0.386347]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.6869 secs, and comparison 4.6906 sec, and warnIfPerfScore > 0.57, and perfScore=0.319374]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 13.9538 secs, and comparison 28.0294 sec, and warnIfPerfScore > 2.9, and perfScore=2.00872]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 17.1847 secs, and comparison 30.2455 sec, and warnIfPerfScore > 2.9, and perfScore=1.76003]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 13.1525 secs, and comparison 106.178 sec, and warnIfPerfScore > 9.7, and perfScore=8.07285]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6553 secs, and comparison 13.3004 sec, and warnIfPerfScore > 1.6, and perfScore=1.05098]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.6531 secs, and comparison 19.3397 sec, and warnIfPerfScore > 1.5, and perfScore=1.09554]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 17.609 secs, and comparison 16.7587 sec, and warnIfPerfScore > 2.1, and perfScore=0.951709]
	                 	Charactes::String is FASTER

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 24.7588 secs, and comparison 13.9263 sec, and warnIfPerfScore > 1.3, and perfScore=0.562481]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 30.8739 secs, and comparison 5.90677 sec, and warnIfPerfScore > 0.23, and perfScore=0.19132]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.1552 secs, and comparison 18.1262 sec, and warnIfPerfScore > 1.3, and perfScore=0.998401]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 16.7737 secs, and comparison 14.4949 sec, and warnIfPerfScore > 1.2, and perfScore=0.864143]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 13.9565 secs, and comparison 2.50939 sec, and warnIfPerfScore > 0.33, and perfScore=0.179801]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 12.8882 secs, and comparison 59.7505 sec, and warnIfPerfScore > 6, and perfScore=4.63607]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 14.1837 secs, and comparison 5.42173 sec, and warnIfPerfScore > 0.5, and perfScore=0.38225]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 16.4114 secs, and comparison 47.9758 sec, and warnIfPerfScore > 4.4, and perfScore=2.92332]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.1319 secs, and comparison 5.28273 sec, and warnIfPerfScore > 0.6, and perfScore=0.474558]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 18.3145 secs, and comparison 22.689 sec, and warnIfPerfScore > 1.5, and perfScore=1.23885]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15.7504 secs, and comparison 5.14386 sec, and warnIfPerfScore > 0.55, and perfScore=0.326585]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.90896 sec, and warnIfPerfScore > 0.25, and perfScore=0.127264]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 15 secs, and comparison 4.3083 sec, and warnIfPerfScore > 0.5, and perfScore=0.28722]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 15.0839 secs, and comparison 25.7393 sec, and warnIfPerfScore > 2, and perfScore=1.7064]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.7301 secs, and comparison 35.996 sec, and warnIfPerfScore > 3.1, and perfScore=2.28836]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes]]]

Succeeded
