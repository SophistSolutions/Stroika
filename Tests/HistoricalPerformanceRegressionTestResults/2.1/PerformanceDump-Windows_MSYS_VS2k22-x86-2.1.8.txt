Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Nov  2 15:48:55 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.55788 secs, and comparison 4.86588 sec, and warnIfPerfScore > 0.65, and perfScore=0.568584]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.42299 secs, and comparison 3.01007 sec, and warnIfPerfScore > 0.5, and perfScore=0.357364]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.24 secs, and comparison 8.66464 sec, and warnIfPerfScore > 1.05, and perfScore=0.846154]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.84781 secs, and comparison 8.49675 sec, and warnIfPerfScore > 1.15, and perfScore=1.08269]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.07
	DETAILS:         	[baseline test 37.9303 secs, and comparison 2.66987 sec, and warnIfPerfScore > 0.48, and perfScore=0.0703889]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.083
	DETAILS:         	[baseline test 36.1499 secs, and comparison 3.0031 sec, and warnIfPerfScore > 0.57, and perfScore=0.0830735]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.5021 secs, and comparison 25.0744 sec, and warnIfPerfScore > 2.9, and perfScore=2.38756]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 10.836 secs, and comparison 25.6475 sec, and warnIfPerfScore > 2.9, and perfScore=2.36687]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 9.87613 secs, and comparison 170.103 sec, and warnIfPerfScore > 24, and perfScore=17.2237]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.35686 secs, and comparison 12.2765 sec, and warnIfPerfScore > 1.7, and perfScore=1.46904]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.6984 secs, and comparison 10.7222 sec, and warnIfPerfScore > 1.5, and perfScore=1.00223]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.67996 secs, and comparison 13.8152 sec, and warnIfPerfScore > 2.1, and perfScore=1.79886]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.9576 secs, and comparison 7.82795 sec, and warnIfPerfScore > 1.6, and perfScore=0.654643]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 11.8628 secs, and comparison 1.5634 sec, and warnIfPerfScore > 0.23, and perfScore=0.13179]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.2288 secs, and comparison 14.9156 sec, and warnIfPerfScore > 1.3, and perfScore=0.979436]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.486 secs, and comparison 7.73929 sec, and warnIfPerfScore > 1.2, and perfScore=0.619836]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.2434 secs, and comparison 3.15996 sec, and warnIfPerfScore > 0.33, and perfScore=0.238607]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 11.978 secs, and comparison 45.4865 sec, and warnIfPerfScore > 6, and perfScore=3.79749]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 11.9892 secs, and comparison 7.09978 sec, and warnIfPerfScore > 0.8, and perfScore=0.592179]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4269 secs, and comparison 13.2313 sec, and warnIfPerfScore > 1.4, and perfScore=1.06472]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9187 secs, and comparison 4.23882 sec, and warnIfPerfScore > 0.65, and perfScore=0.328115]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 12.1945 secs, and comparison 42.1399 sec, and warnIfPerfScore > 4.4, and perfScore=3.45565]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.4378 secs, and comparison 4.17726 sec, and warnIfPerfScore > 0.6, and perfScore=0.335851]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.9383 secs, and comparison 4.02306 sec, and warnIfPerfScore > 0.6, and perfScore=0.336988]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.2971 secs, and comparison 3.92015 sec, and warnIfPerfScore > 0.6, and perfScore=0.347004]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.8372 secs, and comparison 6.49599 sec, and warnIfPerfScore > 1.3, and perfScore=0.548779]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 12.6608 secs, and comparison 10.4735 sec, and warnIfPerfScore > 1.3, and perfScore=0.827242]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 56.236 secs, and comparison 6.7763 sec, and warnIfPerfScore > 0.3, and perfScore=0.120498]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.1125 secs, and comparison 16.1985 sec, and warnIfPerfScore > 1.5, and perfScore=1.33734]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.7505 secs, and comparison 3.60573 sec, and warnIfPerfScore > 0.55, and perfScore=0.412059]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.072
	DETAILS:         	[baseline test 15 secs, and comparison 1.07736 sec, and warnIfPerfScore > 0.1, and perfScore=0.0718238]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.90223 sec, and warnIfPerfScore > 0.5, and perfScore=0.260149]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.3323 secs, and comparison 14.5577 sec, and warnIfPerfScore > 2, and perfScore=1.40896]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.1646 secs, and comparison 32.8693 sec, and warnIfPerfScore > 3.6, and perfScore=2.94407]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 40 seconds]]]

Succeeded
