Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Oct 15 11:19:55 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 5.3205 secs, and comparison 4.26126 sec, and warnIfPerfScore > 0.65, and perfScore=0.800914]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.67159 secs, and comparison 2.6271 sec, and warnIfPerfScore > 0.5, and perfScore=0.463203]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.04023 secs, and comparison 10.6445 sec, and warnIfPerfScore > 1.05, and perfScore=1.3239]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.65807 secs, and comparison 7.28092 sec, and warnIfPerfScore > 1.15, and perfScore=1.09355]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 6.83527 secs, and comparison 2.22118 sec, and warnIfPerfScore > 0.48, and perfScore=0.324959]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.82209 secs, and comparison 2.88171 sec, and warnIfPerfScore > 0.57, and perfScore=0.422408]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.67913 secs, and comparison 19.0084 sec, and warnIfPerfScore > 2.9, and perfScore=2.84594]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.22395 secs, and comparison 19.1479 sec, and warnIfPerfScore > 2.9, and perfScore=2.65061]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	21
	DETAILS:         	[baseline test 6.1979 secs, and comparison 129.433 sec, and warnIfPerfScore > 24, and perfScore=20.8834]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.60935 secs, and comparison 9.91072 sec, and warnIfPerfScore > 1.7, and perfScore=1.76682]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 6.02437 secs, and comparison 5.59909 sec, and warnIfPerfScore > 1.5, and perfScore=0.929406]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 5.28373 secs, and comparison 13.6269 sec, and warnIfPerfScore > 2.1, and perfScore=2.57903]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 10.6457 secs, and comparison 4.03452 sec, and warnIfPerfScore > 1.6, and perfScore=0.378982]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.099
	DETAILS:         	[baseline test 7.21005 secs, and comparison 0.712774 sec, and warnIfPerfScore > 0.23, and perfScore=0.0988584]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.927 secs, and comparison 12.3123 sec, and warnIfPerfScore > 1.3, and perfScore=1.0323]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 8.44949 secs, and comparison 5.50525 sec, and warnIfPerfScore > 1.2, and perfScore=0.651548]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.67313 secs, and comparison 2.80092 sec, and warnIfPerfScore > 0.33, and perfScore=0.322943]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 8.04475 secs, and comparison 39.5419 sec, and warnIfPerfScore > 6, and perfScore=4.91525]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 8.19799 secs, and comparison 5.19902 sec, and warnIfPerfScore > 0.8, and perfScore=0.634183]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.24806 secs, and comparison 7.99964 sec, and warnIfPerfScore > 1.4, and perfScore=0.969881]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 8.81064 secs, and comparison 3.59679 sec, and warnIfPerfScore > 0.65, and perfScore=0.408232]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 8.85446 secs, and comparison 40.0144 sec, and warnIfPerfScore > 4.4, and perfScore=4.51912]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.6011 secs, and comparison 3.97063 sec, and warnIfPerfScore > 0.6, and perfScore=0.342263]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.7744 secs, and comparison 4.00628 sec, and warnIfPerfScore > 0.6, and perfScore=0.340252]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.5065 secs, and comparison 4.26314 sec, and warnIfPerfScore > 0.6, and perfScore=0.340874]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 11.2333 secs, and comparison 6.88605 sec, and warnIfPerfScore > 1.3, and perfScore=0.613004]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.993 secs, and comparison 10.0764 sec, and warnIfPerfScore > 1.3, and perfScore=0.840191]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 72.5209 secs, and comparison 6.76165 sec, and warnIfPerfScore > 0.3, and perfScore=0.0932373]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.30303 secs, and comparison 10.6402 sec, and warnIfPerfScore > 1.5, and perfScore=1.68811]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.3024 secs, and comparison 2.90106 sec, and warnIfPerfScore > 0.55, and perfScore=0.397275]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.043
	DETAILS:         	[baseline test 15 secs, and comparison 0.648539 sec, and warnIfPerfScore > 0.1, and perfScore=0.043236]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.04818 sec, and warnIfPerfScore > 0.5, and perfScore=0.203212]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 7.35549 secs, and comparison 14.8843 sec, and warnIfPerfScore > 2, and perfScore=2.02356]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 10.1338 secs, and comparison 16.3619 sec, and warnIfPerfScore > 3.6, and perfScore=1.61458]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 38 seconds]]]

Succeeded
