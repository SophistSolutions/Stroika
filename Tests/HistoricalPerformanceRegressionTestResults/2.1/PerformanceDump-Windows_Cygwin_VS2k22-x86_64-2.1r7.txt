Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Mar 31 16:5:9 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.45125 secs, and comparison 6.10701 sec, and warnIfPerfScore > 0.65, and perfScore=0.722616]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 8.62044 secs, and comparison 3.86389 sec, and warnIfPerfScore > 0.5, and perfScore=0.448225]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 13.8969 secs, and comparison 11.8802 sec, and warnIfPerfScore > 1.05, and perfScore=0.854879]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.4194 secs, and comparison 11.7973 sec, and warnIfPerfScore > 1.15, and perfScore=1.13224]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.7829 secs, and comparison 3.71966 sec, and warnIfPerfScore > 0.48, and perfScore=0.235677]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.5116 secs, and comparison 4.39693 sec, and warnIfPerfScore > 0.57, and perfScore=0.302994]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.9046 secs, and comparison 30.3221 sec, and warnIfPerfScore > 2.9, and perfScore=2.34971]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.0924 secs, and comparison 28.7418 sec, and warnIfPerfScore > 2.9, and perfScore=2.1953]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 10.8943 secs, and comparison 211.499 sec, and warnIfPerfScore > 24, and perfScore=19.4136]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.6201 secs, and comparison 14.8516 sec, and warnIfPerfScore > 1.7, and perfScore=1.39845]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.7495 secs, and comparison 10.2218 sec, and warnIfPerfScore > 1.5, and perfScore=0.950906]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 9.6673 secs, and comparison 17.4164 sec, and warnIfPerfScore > 2.1, and perfScore=1.80158]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 19.2925 secs, and comparison 6.79217 sec, and warnIfPerfScore > 1.6, and perfScore=0.352064]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 20.2954 secs, and comparison 1.2249 sec, and warnIfPerfScore > 0.23, and perfScore=0.0603536]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.6252 secs, and comparison 18.712 sec, and warnIfPerfScore > 1.3, and perfScore=1.06166]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 17.1632 secs, and comparison 9.21348 sec, and warnIfPerfScore > 1.2, and perfScore=0.536815]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.7872 secs, and comparison 3.28209 sec, and warnIfPerfScore > 0.33, and perfScore=0.238053]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 16.3491 secs, and comparison 55.1124 sec, and warnIfPerfScore > 6, and perfScore=3.37098]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 17.8477 secs, and comparison 8.92345 sec, and warnIfPerfScore > 0.8, and perfScore=0.499979]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 17.0644 secs, and comparison 14.0247 sec, and warnIfPerfScore > 1.4, and perfScore=0.821869]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.2221 secs, and comparison 4.84592 sec, and warnIfPerfScore > 0.65, and perfScore=0.366501]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 16.9652 secs, and comparison 50.2019 sec, and warnIfPerfScore > 4.4, and perfScore=2.95911]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.8 secs, and comparison 4.69677 sec, and warnIfPerfScore > 0.6, and perfScore=0.366934]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.712 secs, and comparison 4.75197 sec, and warnIfPerfScore > 0.6, and perfScore=0.373819]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.2406 secs, and comparison 4.84909 sec, and warnIfPerfScore > 0.6, and perfScore=0.366228]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 13.2378 secs, and comparison 8.27167 sec, and warnIfPerfScore > 1.3, and perfScore=0.624854]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 14.6308 secs, and comparison 13.26 sec, and warnIfPerfScore > 1.3, and perfScore=0.906309]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 65.4975 secs, and comparison 8.34936 sec, and warnIfPerfScore > 0.3, and perfScore=0.127476]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 10.9617 secs, and comparison 16.024 sec, and warnIfPerfScore > 1.5, and perfScore=1.46182]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.0442 secs, and comparison 4.52963 sec, and warnIfPerfScore > 0.55, and perfScore=0.410136]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.07093 sec, and warnIfPerfScore > 0.1, and perfScore=0.071395]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.06785 sec, and warnIfPerfScore > 0.5, and perfScore=0.27119]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.8622 secs, and comparison 12.292 sec, and warnIfPerfScore > 2, and perfScore=1.13163]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.5513 secs, and comparison 23.9343 sec, and warnIfPerfScore > 3.6, and perfScore=1.64482]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 48 seconds]]]

Succeeded
