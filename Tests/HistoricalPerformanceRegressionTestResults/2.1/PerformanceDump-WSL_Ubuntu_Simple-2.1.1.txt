Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Jul 22 17:14:46 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.56249 secs, and comparison 4.36041 sec, and warnIfPerfScore > 0.65, and perfScore=0.955707]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 4.52582 secs, and comparison 2.03305 sec, and warnIfPerfScore > 0.5, and perfScore=0.449212]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.59972 secs, and comparison 6.09684 sec, and warnIfPerfScore > 1.05, and perfScore=1.08878]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.80115 secs, and comparison 5.99659 sec, and warnIfPerfScore > 1.15, and perfScore=1.24899]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 2.63173 secs, and comparison 1.9068 sec, and warnIfPerfScore > 0.48, and perfScore=0.724541]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 3.36938 secs, and comparison 2.56712 sec, and warnIfPerfScore > 0.57, and perfScore=0.761896]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 2.45524 secs, and comparison 13.0239 sec, and warnIfPerfScore > 2.9, and perfScore=5.30456]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 2.93515 secs, and comparison 13.6245 sec, and warnIfPerfScore > 2.9, and perfScore=4.64184]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 3.72475 secs, and comparison 38.0099 sec, and warnIfPerfScore > 24, and perfScore=10.2047]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 3.69413 secs, and comparison 8.08009 sec, and warnIfPerfScore > 1.7, and perfScore=2.18728]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.26791 secs, and comparison 4.10025 sec, and warnIfPerfScore > 1.5, and perfScore=0.960717]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 2.13352 secs, and comparison 9.58745 sec, and warnIfPerfScore > 2.1, and perfScore=4.49373]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 2.97656 secs, and comparison 2.54109 sec, and warnIfPerfScore > 1.6, and perfScore=0.853699]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 3.16599 secs, and comparison 1.12503 sec, and warnIfPerfScore > 0.23, and perfScore=0.355349]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.77211 secs, and comparison 3.35875 sec, and warnIfPerfScore > 1.3, and perfScore=1.21162]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 2.22495 secs, and comparison 4.85222 sec, and warnIfPerfScore > 1.2, and perfScore=2.18082]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.6446 secs, and comparison 1.27532 sec, and warnIfPerfScore > 0.33, and perfScore=0.11981]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	17
	DETAILS:         	[baseline test 2.26606 secs, and comparison 39.0165 sec, and warnIfPerfScore > 6, and perfScore=17.2177]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.22154 secs, and comparison 4.593 sec, and warnIfPerfScore > 0.8, and perfScore=2.06749]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 2.28702 secs, and comparison 5.77971 sec, and warnIfPerfScore > 1.4, and perfScore=2.52718]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 10.8608 secs, and comparison 3.37036 sec, and warnIfPerfScore > 0.65, and perfScore=0.310323]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 3.30272 secs, and comparison 36.27 sec, and warnIfPerfScore > 4.4, and perfScore=10.9818]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.13634 secs, and comparison 3.40309 sec, and warnIfPerfScore > 0.6, and perfScore=0.418259]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.89457 secs, and comparison 3.42245 sec, and warnIfPerfScore > 0.6, and perfScore=0.433519]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.75773 secs, and comparison 3.28589 sec, and warnIfPerfScore > 0.6, and perfScore=0.423563]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.88041 secs, and comparison 3.35691 sec, and warnIfPerfScore > 1.3, and perfScore=0.425982]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 12.5421 secs, and comparison 7.79464 sec, and warnIfPerfScore > 1.3, and perfScore=0.621479]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.6988 secs, and comparison 5.14202 sec, and warnIfPerfScore > 0.3, and perfScore=0.404922]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.31093 secs, and comparison 10.934 sec, and warnIfPerfScore > 1.5, and perfScore=2.05876]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 5.66618 secs, and comparison 2.17631 sec, and warnIfPerfScore > 0.55, and perfScore=0.384087]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.041
	DETAILS:         	[baseline test 15 secs, and comparison 0.613281 sec, and warnIfPerfScore > 0.1, and perfScore=0.0408854]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.53736 sec, and warnIfPerfScore > 0.5, and perfScore=0.169157]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 50 seconds]]]

Succeeded
