Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jun 29 13:1:15 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.46084 secs, and comparison 4.23944 sec, and warnIfPerfScore > 0.65, and perfScore=0.950368]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 4.42288 secs, and comparison 2.49637 sec, and warnIfPerfScore > 0.5, and perfScore=0.564422]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.4523 secs, and comparison 5.95234 sec, and warnIfPerfScore > 1.05, and perfScore=1.09171]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 4.62535 secs, and comparison 5.90227 sec, and warnIfPerfScore > 1.15, and perfScore=1.27607]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 2.56101 secs, and comparison 2.03878 sec, and warnIfPerfScore > 0.48, and perfScore=0.796085]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 3.0652 secs, and comparison 2.5282 sec, and warnIfPerfScore > 0.57, and perfScore=0.824807]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 2.34485 secs, and comparison 13.5965 sec, and warnIfPerfScore > 2.9, and perfScore=5.79847]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 2.74303 secs, and comparison 13.7223 sec, and warnIfPerfScore > 2.9, and perfScore=5.00259]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 4.02386 secs, and comparison 39.0522 sec, and warnIfPerfScore > 24, and perfScore=9.70516]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.58158 secs, and comparison 8.13715 sec, and warnIfPerfScore > 1.7, and perfScore=2.27195]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.2249 secs, and comparison 4.04458 sec, and warnIfPerfScore > 1.5, and perfScore=0.957319]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 2.28115 secs, and comparison 9.61748 sec, and warnIfPerfScore > 2.1, and perfScore=4.21607]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 2.89588 secs, and comparison 2.42154 sec, and warnIfPerfScore > 1.6, and perfScore=0.8362]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 3.05799 secs, and comparison 1.09477 sec, and warnIfPerfScore > 0.23, and perfScore=0.358003]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 2.77123 secs, and comparison 3.21117 sec, and warnIfPerfScore > 1.3, and perfScore=1.15875]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 2.2257 secs, and comparison 4.74858 sec, and warnIfPerfScore > 1.2, and perfScore=2.13353]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 10.1314 secs, and comparison 1.19193 sec, and warnIfPerfScore > 0.33, and perfScore=0.117647]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	18
	DETAILS:         	[baseline test 2.16628 secs, and comparison 39.7064 sec, and warnIfPerfScore > 6, and perfScore=18.3293]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 2.20716 secs, and comparison 5.28212 sec, and warnIfPerfScore > 0.8, and perfScore=2.39317]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 2.47314 secs, and comparison 6.37037 sec, and warnIfPerfScore > 1.4, and perfScore=2.57583]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.6019 secs, and comparison 3.37109 sec, and warnIfPerfScore > 0.65, and perfScore=0.317971]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.10711 secs, and comparison 36.2179 sec, and warnIfPerfScore > 4.4, and perfScore=11.6565]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.59507 secs, and comparison 3.38601 sec, and warnIfPerfScore > 0.6, and perfScore=0.445816]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.42323 secs, and comparison 3.20116 sec, and warnIfPerfScore > 0.6, and perfScore=0.431235]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.16742 secs, and comparison 3.18941 sec, and warnIfPerfScore > 0.6, and perfScore=0.444988]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.26068 secs, and comparison 3.23719 sec, and warnIfPerfScore > 1.3, and perfScore=0.445853]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 11.8592 secs, and comparison 7.65986 sec, and warnIfPerfScore > 1.3, and perfScore=0.645901]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 13.0627 secs, and comparison 5.24255 sec, and warnIfPerfScore > 0.3, and perfScore=0.401336]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.06454 secs, and comparison 10.4847 sec, and warnIfPerfScore > 1.5, and perfScore=2.07022]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.63876 secs, and comparison 2.178 sec, and warnIfPerfScore > 0.55, and perfScore=0.386255]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.039
	DETAILS:         	[baseline test 15 secs, and comparison 0.589669 sec, and warnIfPerfScore > 0.1, and perfScore=0.0393112]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.48285 sec, and warnIfPerfScore > 0.5, and perfScore=0.165523]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 49 seconds]]]

Succeeded
