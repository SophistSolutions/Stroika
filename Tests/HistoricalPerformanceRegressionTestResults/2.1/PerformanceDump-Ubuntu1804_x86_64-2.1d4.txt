Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/13/18 7:43:25]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.04858 secs, and comparison 4.6349 sec, and warnIfPerfScore > 0.62, and perfScore=0.76628]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.89732 secs, and comparison 2.84973 sec, and warnIfPerfScore > 0.65, and perfScore=0.483224]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.28389 secs, and comparison 6.8283 sec, and warnIfPerfScore > 1.05, and perfScore=1.08664]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 3.43564 secs, and comparison 2.78309 sec, and warnIfPerfScore > 0.5, and perfScore=0.810065]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.13763 secs, and comparison 3.89413 sec, and warnIfPerfScore > 0.68, and perfScore=0.941152]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 6.66742 secs, and comparison 30.4365 sec, and warnIfPerfScore > 4.3, and perfScore=4.56496]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 7.50062 secs, and comparison 33.062 sec, and warnIfPerfScore > 4, and perfScore=4.4079]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	34
	DETAILS:         	[baseline test 10.6519 secs, and comparison 366.487 sec, and warnIfPerfScore > 10.4, and perfScore=34.4057]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.5321 secs, and comparison 9.86164 sec, and warnIfPerfScore > 3.2, and perfScore=2.17595]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.39101 secs, and comparison 8.19401 sec, and warnIfPerfScore > 1.8, and perfScore=0.976522]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 2.2296 secs, and comparison 10.5496 sec, and warnIfPerfScore > 2.8, and perfScore=4.73163]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 7.13075 secs, and comparison 19.5831 sec, and warnIfPerfScore > 3.3, and perfScore=2.74629]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 7.48749 secs, and comparison 2.46066 sec, and warnIfPerfScore > 0.25, and perfScore=0.328636]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.36735 secs, and comparison 2.95978 sec, and warnIfPerfScore > 1.4, and perfScore=1.25025]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 24.79 secs, and comparison 24.4326 sec, and warnIfPerfScore > 7.7, and perfScore=0.985584]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 14.6883 secs, and comparison 2.57249 sec, and warnIfPerfScore > 1.55, and perfScore=0.175139]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 22.7474 secs, and comparison 54.5849 sec, and warnIfPerfScore > 9, and perfScore=2.39961]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 10.3237 secs, and comparison 4.94273 sec, and warnIfPerfScore > 1, and perfScore=0.478774]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 23.5794 secs, and comparison 51.0954 sec, and warnIfPerfScore > 7.9, and perfScore=2.16695]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.5411 secs, and comparison 5.29288 sec, and warnIfPerfScore > 0.8, and perfScore=0.458612]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.80428 secs, and comparison 10.857 sec, and warnIfPerfScore > 1.7, and perfScore=1.39116]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 6.86919 secs, and comparison 2.08115 sec, and warnIfPerfScore > 0.55, and perfScore=0.302969]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.59915 sec, and warnIfPerfScore > 0.4, and perfScore=0.10661]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.81011 sec, and warnIfPerfScore > 1.1, and perfScore=0.187341]
	                 	Test_Optional_ is FASTER

[[[Tests took: 14 minutes, 31 seconds]]]

Succeeded
