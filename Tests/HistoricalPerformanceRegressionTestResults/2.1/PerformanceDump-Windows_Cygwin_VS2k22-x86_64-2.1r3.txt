Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Feb 14 13:52:54 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.84904 secs, and comparison 4.86569 sec, and warnIfPerfScore > 0.65, and perfScore=0.831878]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.6157 secs, and comparison 3.09412 sec, and warnIfPerfScore > 0.5, and perfScore=0.406281]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.2285 secs, and comparison 9.41086 sec, and warnIfPerfScore > 1.05, and perfScore=0.838119]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.6136 secs, and comparison 9.36291 sec, and warnIfPerfScore > 1.15, and perfScore=1.08699]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 11.5574 secs, and comparison 3.27057 sec, and warnIfPerfScore > 0.48, and perfScore=0.282985]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.7216 secs, and comparison 3.85045 sec, and warnIfPerfScore > 0.57, and perfScore=0.328492]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.5261 secs, and comparison 26.316 sec, and warnIfPerfScore > 2.9, and perfScore=2.10089]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 13.4715 secs, and comparison 26.4141 sec, and warnIfPerfScore > 2.9, and perfScore=1.96074]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 10.6125 secs, and comparison 170.385 sec, and warnIfPerfScore > 24, and perfScore=16.0552]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.8616 secs, and comparison 12.6879 sec, and warnIfPerfScore > 1.7, and perfScore=1.16814]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 10.6337 secs, and comparison 9.73396 sec, and warnIfPerfScore > 1.5, and perfScore=0.915386]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.8874 secs, and comparison 15.1344 sec, and warnIfPerfScore > 2.1, and perfScore=1.53068]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 12.2746 secs, and comparison 6.98992 sec, and warnIfPerfScore > 1.6, and perfScore=0.569463]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 12.8898 secs, and comparison 1.19211 sec, and warnIfPerfScore > 0.23, and perfScore=0.0924852]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.3027 secs, and comparison 15.8875 sec, and warnIfPerfScore > 1.3, and perfScore=1.03822]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 11.511 secs, and comparison 8.94395 sec, and warnIfPerfScore > 1.2, and perfScore=0.77699]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.8491 secs, and comparison 3.22932 sec, and warnIfPerfScore > 0.33, and perfScore=0.251327]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 11.0463 secs, and comparison 44.6164 sec, and warnIfPerfScore > 6, and perfScore=4.03904]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 11.041 secs, and comparison 8.64177 sec, and warnIfPerfScore > 0.8, and perfScore=0.782702]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.0493 secs, and comparison 13.7028 sec, and warnIfPerfScore > 1.4, and perfScore=1.24015]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.7892 secs, and comparison 4.07548 sec, and warnIfPerfScore > 0.65, and perfScore=0.318666]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.6474 secs, and comparison 41.8669 sec, and warnIfPerfScore > 4.4, and perfScore=3.59453]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.576 secs, and comparison 3.89142 sec, and warnIfPerfScore > 0.6, and perfScore=0.309432]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.563 secs, and comparison 3.92818 sec, and warnIfPerfScore > 0.6, and perfScore=0.312679]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 12.5631 secs, and comparison 3.89856 sec, and warnIfPerfScore > 0.6, and perfScore=0.310318]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 12.5957 secs, and comparison 7.91694 sec, and warnIfPerfScore > 1.3, and perfScore=0.628544]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 13.9784 secs, and comparison 11.9128 sec, and warnIfPerfScore > 1.3, and perfScore=0.852228]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 60.3194 secs, and comparison 8.11745 sec, and warnIfPerfScore > 0.3, and perfScore=0.134574]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.198 secs, and comparison 15.6636 sec, and warnIfPerfScore > 1.5, and perfScore=1.28411]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.8332 secs, and comparison 4.01796 sec, and warnIfPerfScore > 0.55, and perfScore=0.370894]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.071
	DETAILS:         	[baseline test 15 secs, and comparison 1.06217 sec, and warnIfPerfScore > 0.1, and perfScore=0.0708117]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.32822 sec, and warnIfPerfScore > 0.5, and perfScore=0.221881]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1783 secs, and comparison 13.9777 sec, and warnIfPerfScore > 2, and perfScore=1.14776]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.6726 secs, and comparison 22.2056 sec, and warnIfPerfScore > 3.6, and perfScore=1.51341]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 6 seconds]]]

Succeeded
