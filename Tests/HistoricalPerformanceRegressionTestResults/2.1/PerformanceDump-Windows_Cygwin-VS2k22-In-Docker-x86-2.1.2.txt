Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Mon Aug  1 17:18:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 8.00948 secs, and comparison 4.57978 sec, and warnIfPerfScore > 0.65, and perfScore=0.571795]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.83168 secs, and comparison 3.07351 sec, and warnIfPerfScore > 0.5, and perfScore=0.392445]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.48782 secs, and comparison 7.95125 sec, and warnIfPerfScore > 1.05, and perfScore=0.838048]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.25229 secs, and comparison 8.04257 sec, and warnIfPerfScore > 1.15, and perfScore=1.10897]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 9.06421 secs, and comparison 2.37623 sec, and warnIfPerfScore > 0.48, and perfScore=0.262155]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.97907 secs, and comparison 2.94841 sec, and warnIfPerfScore > 0.57, and perfScore=0.328364]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.31527 secs, and comparison 22.6028 sec, and warnIfPerfScore > 2.9, and perfScore=2.42642]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 9.38272 secs, and comparison 22.9842 sec, and warnIfPerfScore > 2.9, and perfScore=2.44963]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.43304 secs, and comparison 162.384 sec, and warnIfPerfScore > 24, and perfScore=19.2558]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 8.19984 secs, and comparison 11.5075 sec, and warnIfPerfScore > 1.7, and perfScore=1.40338]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.94029 secs, and comparison 8.53173 sec, and warnIfPerfScore > 1.5, and perfScore=0.954301]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 7.80778 secs, and comparison 13.42 sec, and warnIfPerfScore > 2.1, and perfScore=1.7188]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 10.008 secs, and comparison 7.17407 sec, and warnIfPerfScore > 1.6, and perfScore=0.716835]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 10.6529 secs, and comparison 1.38144 sec, and warnIfPerfScore > 0.23, and perfScore=0.129677]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.14 secs, and comparison 13.6852 sec, and warnIfPerfScore > 1.3, and perfScore=1.04149]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.6834 secs, and comparison 6.37278 sec, and warnIfPerfScore > 1.2, and perfScore=0.596512]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 6.69583 secs, and comparison 1.54732 sec, and warnIfPerfScore > 0.33, and perfScore=0.231086]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.3059 secs, and comparison 41.614 sec, and warnIfPerfScore > 6, and perfScore=4.0379]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 10.3086 secs, and comparison 6.4473 sec, and warnIfPerfScore > 0.8, and perfScore=0.62543]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 10.4409 secs, and comparison 10.5469 sec, and warnIfPerfScore > 1.4, and perfScore=1.01015]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.65323 secs, and comparison 3.66006 sec, and warnIfPerfScore > 0.65, and perfScore=0.550118]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 10.481 secs, and comparison 38.8968 sec, and warnIfPerfScore > 4.4, and perfScore=3.71116]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.97644 secs, and comparison 3.56362 sec, and warnIfPerfScore > 0.6, and perfScore=0.510807]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 6.65316 secs, and comparison 3.72407 sec, and warnIfPerfScore > 0.6, and perfScore=0.559745]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.20357 secs, and comparison 3.67215 sec, and warnIfPerfScore > 0.6, and perfScore=0.509768]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.9122 secs, and comparison 5.5062 sec, and warnIfPerfScore > 1.3, and perfScore=0.796592]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.29812 secs, and comparison 9.32127 sec, and warnIfPerfScore > 1.3, and perfScore=1.27722]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 51.7253 secs, and comparison 6.57531 sec, and warnIfPerfScore > 0.3, and perfScore=0.12712]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.97523 secs, and comparison 13.8684 sec, and warnIfPerfScore > 1.5, and perfScore=1.54519]
	                 	String Characters::Format is ***SLOWER***
	                 	{{{WARNING - expected performance score less than 1.5 and got 1.54519}}}

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 7.96566 secs, and comparison 3.11113 sec, and warnIfPerfScore > 0.55, and perfScore=0.390568]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.831442 sec, and warnIfPerfScore > 0.1, and perfScore=0.0554295]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.22665 sec, and warnIfPerfScore > 0.5, and perfScore=0.21511]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.38624 secs, and comparison 14.1496 sec, and warnIfPerfScore > 2, and perfScore=1.50749]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 10.7688 secs, and comparison 31.4874 sec, and warnIfPerfScore > 3.6, and perfScore=2.92394]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 48 seconds]]]

Succeeded
