Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Aug 25 7:51:57 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 4.79409 secs, and comparison 4.30793 sec, and warnIfPerfScore > 0.65, and perfScore=0.898592]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 4.99039 secs, and comparison 2.38283 sec, and warnIfPerfScore > 0.5, and perfScore=0.477484]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 7.46314 secs, and comparison 6.68804 sec, and warnIfPerfScore > 1.05, and perfScore=0.896143]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.151 secs, and comparison 6.6651 sec, and warnIfPerfScore > 1.15, and perfScore=1.08358]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 9.53346 secs, and comparison 2.03566 sec, and warnIfPerfScore > 0.48, and perfScore=0.213528]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 9.06868 secs, and comparison 2.51821 sec, and warnIfPerfScore > 0.57, and perfScore=0.277682]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 5.90164 secs, and comparison 17.0159 sec, and warnIfPerfScore > 2.9, and perfScore=2.88325]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.373 secs, and comparison 16.9086 sec, and warnIfPerfScore > 2.9, and perfScore=2.65316]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	23
	DETAILS:         	[baseline test 5.38823 secs, and comparison 124.03 sec, and warnIfPerfScore > 24, and perfScore=23.0186]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.43996 secs, and comparison 9.02853 sec, and warnIfPerfScore > 1.7, and perfScore=1.65967]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.76236 secs, and comparison 5.38172 sec, and warnIfPerfScore > 1.5, and perfScore=0.933944]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 5.34223 secs, and comparison 11.4199 sec, and warnIfPerfScore > 2.1, and perfScore=2.13766]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 6.6459 secs, and comparison 4.42108 sec, and warnIfPerfScore > 1.6, and perfScore=0.665234]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 6.8824 secs, and comparison 0.648923 sec, and warnIfPerfScore > 0.23, and perfScore=0.0942873]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.4384 secs, and comparison 11.5216 sec, and warnIfPerfScore > 1.3, and perfScore=1.00728]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 8.01548 secs, and comparison 4.87178 sec, and warnIfPerfScore > 1.2, and perfScore=0.607796]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 7.58833 secs, and comparison 1.86488 sec, and warnIfPerfScore > 0.33, and perfScore=0.245757]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 7.92866 secs, and comparison 37.5114 sec, and warnIfPerfScore > 6, and perfScore=4.73111]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.70253 secs, and comparison 4.73449 sec, and warnIfPerfScore > 0.8, and perfScore=0.614667]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 7.79056 secs, and comparison 7.38397 sec, and warnIfPerfScore > 1.4, and perfScore=0.94781]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.60413 secs, and comparison 3.27461 sec, and warnIfPerfScore > 0.65, and perfScore=0.430636]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 8.6322 secs, and comparison 34.5414 sec, and warnIfPerfScore > 4.4, and perfScore=4.00146]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.35483 secs, and comparison 3.153 sec, and warnIfPerfScore > 0.6, and perfScore=0.428698]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.31576 secs, and comparison 3.1661 sec, and warnIfPerfScore > 0.6, and perfScore=0.432778]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.33899 secs, and comparison 3.1636 sec, and warnIfPerfScore > 0.6, and perfScore=0.431067]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.36537 secs, and comparison 4.78568 sec, and warnIfPerfScore > 1.3, and perfScore=0.649755]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.97786 secs, and comparison 7.93605 sec, and warnIfPerfScore > 1.3, and perfScore=0.994759]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 37.0965 secs, and comparison 4.70629 sec, and warnIfPerfScore > 0.3, and perfScore=0.126866]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 5.71528 secs, and comparison 8.77765 sec, and warnIfPerfScore > 1.5, and perfScore=1.53582]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.93844 secs, and comparison 2.74917 sec, and warnIfPerfScore > 0.55, and perfScore=0.462945]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.037
	DETAILS:         	[baseline test 15 secs, and comparison 0.552143 sec, and warnIfPerfScore > 0.1, and perfScore=0.0368096]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.65236 sec, and warnIfPerfScore > 0.5, and perfScore=0.176824]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 6.58017 secs, and comparison 12.0901 sec, and warnIfPerfScore > 2, and perfScore=1.83735]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.71171 secs, and comparison 13.3672 sec, and warnIfPerfScore > 3.6, and perfScore=1.99162]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 45 seconds]]]

Succeeded
