Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Tue Aug  9 13:16:49 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.25728 secs, and comparison 5.43588 sec, and warnIfPerfScore > 0.65, and perfScore=0.658313]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 8.75364 secs, and comparison 3.44351 sec, and warnIfPerfScore > 0.5, and perfScore=0.39338]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.7457 secs, and comparison 10.0902 sec, and warnIfPerfScore > 1.05, and perfScore=0.859055]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 9.06248 secs, and comparison 14.0211 sec, and warnIfPerfScore > 1.15, and perfScore=1.54716]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.5799 secs, and comparison 3.06175 sec, and warnIfPerfScore > 0.48, and perfScore=0.243385]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.2951 secs, and comparison 4.03965 sec, and warnIfPerfScore > 0.57, and perfScore=0.328558]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.6635 secs, and comparison 29.553 sec, and warnIfPerfScore > 2.9, and perfScore=2.53381]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.8617 secs, and comparison 30.3624 sec, and warnIfPerfScore > 2.9, and perfScore=2.5597]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 9.48331 secs, and comparison 150.858 sec, and warnIfPerfScore > 24, and perfScore=15.9077]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 17.3962 secs, and comparison 14.32 sec, and warnIfPerfScore > 1.7, and perfScore=0.823168]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 11.1539 secs, and comparison 10.7459 sec, and warnIfPerfScore > 1.5, and perfScore=0.963422]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 8.52521 secs, and comparison 16.7546 sec, and warnIfPerfScore > 2.1, and perfScore=1.9653]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.1387 secs, and comparison 7.12002 sec, and warnIfPerfScore > 1.6, and perfScore=0.639216]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.088
	DETAILS:         	[baseline test 12.3264 secs, and comparison 1.08395 sec, and warnIfPerfScore > 0.23, and perfScore=0.0879375]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.0691 secs, and comparison 13.856 sec, and warnIfPerfScore > 1.3, and perfScore=0.984854]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 9.72509 secs, and comparison 8.72116 sec, and warnIfPerfScore > 1.2, and perfScore=0.89677]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.3188 secs, and comparison 4.05353 sec, and warnIfPerfScore > 0.33, and perfScore=0.264611]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.703 secs, and comparison 45.6202 sec, and warnIfPerfScore > 6, and perfScore=3.89815]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 12.171 secs, and comparison 11.4011 sec, and warnIfPerfScore > 0.8, and perfScore=0.936748]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.1156 secs, and comparison 13.5434 sec, and warnIfPerfScore > 1.4, and perfScore=1.33886]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 13.7229 secs, and comparison 4.68313 sec, and warnIfPerfScore > 0.65, and perfScore=0.341265]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.5517 secs, and comparison 41.7698 sec, and warnIfPerfScore > 4.4, and perfScore=3.95859]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 16.5229 secs, and comparison 4.48437 sec, and warnIfPerfScore > 0.6, and perfScore=0.271404]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 16.1263 secs, and comparison 4.27711 sec, and warnIfPerfScore > 0.6, and perfScore=0.265226]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.2877 secs, and comparison 4.21761 sec, and warnIfPerfScore > 0.6, and perfScore=0.258945]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 15.944 secs, and comparison 10.0118 sec, and warnIfPerfScore > 1.3, and perfScore=0.627936]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.76
	DETAILS:         	[baseline test 18.7251 secs, and comparison 14.3106 sec, and warnIfPerfScore > 1.3, and perfScore=0.764244]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 79.9931 secs, and comparison 10.9575 sec, and warnIfPerfScore > 0.3, and perfScore=0.136981]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.6894 secs, and comparison 18.8214 sec, and warnIfPerfScore > 1.5, and perfScore=1.28129]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.8042 secs, and comparison 5.0294 sec, and warnIfPerfScore > 0.55, and perfScore=0.318232]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 15 secs, and comparison 1.28414 sec, and warnIfPerfScore > 0.1, and perfScore=0.0856093]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.96186 sec, and warnIfPerfScore > 0.5, and perfScore=0.264124]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.9381 secs, and comparison 24.6602 sec, and warnIfPerfScore > 2, and perfScore=1.54725]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 17.0752 secs, and comparison 28.8803 sec, and warnIfPerfScore > 3.6, and perfScore=1.69136]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 49 seconds]]]

Succeeded
