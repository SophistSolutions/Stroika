Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 31 14:13:49 2024]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 6.5254 secs, and comparison 4.26284 sec, and warnIfPerfScore > 0.65, and perfScore=0.653269]
	                 	shared_ptr<> copy is FASTER
	                 	{{{WARNING - expected performance score less than 0.65 and got 0.653269}}}

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.48495 secs, and comparison 2.7731 sec, and warnIfPerfScore > 0.5, and perfScore=0.427621]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 9.17726 secs, and comparison 7.6752 sec, and warnIfPerfScore > 1.05, and perfScore=0.836329]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.03483 secs, and comparison 7.70104 sec, and warnIfPerfScore > 1.15, and perfScore=1.0947]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.4006 secs, and comparison 2.21397 sec, and warnIfPerfScore > 0.48, and perfScore=0.263549]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 8.27202 secs, and comparison 2.73245 sec, and warnIfPerfScore > 0.57, and perfScore=0.330324]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 9.54222 secs, and comparison 21.8274 sec, and warnIfPerfScore > 2.9, and perfScore=2.28745]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.7787 secs, and comparison 24.0773 sec, and warnIfPerfScore > 2.9, and perfScore=2.46222]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 7.94354 secs, and comparison 154.615 sec, and warnIfPerfScore > 24, and perfScore=19.4642]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.8389 secs, and comparison 14.7011 sec, and warnIfPerfScore > 1.7, and perfScore=1.24176]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.735 secs, and comparison 16.2228 sec, and warnIfPerfScore > 1.5, and perfScore=1.27387]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.794 secs, and comparison 22.1474 sec, and warnIfPerfScore > 2.1, and perfScore=1.40227]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 15.6525 secs, and comparison 10.0813 sec, and warnIfPerfScore > 1.6, and perfScore=0.644072]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 13.7604 secs, and comparison 1.75706 sec, and warnIfPerfScore > 0.23, and perfScore=0.12769]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 17.0961 secs, and comparison 16.5377 sec, and warnIfPerfScore > 1.3, and perfScore=0.967339]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.9239 secs, and comparison 12.8202 sec, and warnIfPerfScore > 1.2, and perfScore=0.991978]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 13.9371 secs, and comparison 3.60617 sec, and warnIfPerfScore > 0.33, and perfScore=0.258745]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 19.8479 secs, and comparison 64.4548 sec, and warnIfPerfScore > 6, and perfScore=3.24743]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 17.632 secs, and comparison 14.2314 sec, and warnIfPerfScore > 0.8, and perfScore=0.807137]
	                 	Sequence_Array<int> is FASTER
	                 	{{{WARNING - expected performance score less than 0.8 and got 0.807137}}}

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 17.0157 secs, and comparison 15.5841 sec, and warnIfPerfScore > 1.4, and perfScore=0.915867]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.466 secs, and comparison 4.21481 sec, and warnIfPerfScore > 0.65, and perfScore=0.402713]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 15.6372 secs, and comparison 51.7835 sec, and warnIfPerfScore > 4.4, and perfScore=3.31156]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.1872 secs, and comparison 4.42281 sec, and warnIfPerfScore > 0.6, and perfScore=0.434155]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 8.42699 secs, and comparison 5.53892 sec, and warnIfPerfScore > 0.6, and perfScore=0.657284]
	                 	Collection_LinkedList<string> is FASTER
	                 	{{{WARNING - expected performance score less than 0.6 and got 0.657284}}}

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.7731 secs, and comparison 4.12915 sec, and warnIfPerfScore > 0.6, and perfScore=0.32327]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 7.38389 secs, and comparison 5.53647 sec, and warnIfPerfScore > 1.3, and perfScore=0.749804]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 7.63545 secs, and comparison 9.49057 sec, and warnIfPerfScore > 1.3, and perfScore=1.24296]
	                 	Collection_stdmultiset<string> is ***SLOWER***

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 53.7572 secs, and comparison 8.83685 sec, and warnIfPerfScore > 0.3, and perfScore=0.164385]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.8843 secs, and comparison 19.0337 sec, and warnIfPerfScore > 1.5, and perfScore=1.37088]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.56474 secs, and comparison 3.79159 sec, and warnIfPerfScore > 0.55, and perfScore=0.396414]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.073
	DETAILS:         	[baseline test 15 secs, and comparison 1.08915 sec, and warnIfPerfScore > 0.1, and perfScore=0.07261]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23168 sec, and warnIfPerfScore > 0.5, and perfScore=0.215445]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.9847 secs, and comparison 15.0758 sec, and warnIfPerfScore > 2, and perfScore=1.16104]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 10.1779 secs, and comparison 32.4221 sec, and warnIfPerfScore > 3.6, and perfScore=3.18555]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes]]]

Succeeded
