Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Nov  4 :41:5 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.23163 secs, and comparison 4.81418 sec, and warnIfPerfScore > 0.65, and perfScore=0.772538]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.23941 secs, and comparison 3.02215 sec, and warnIfPerfScore > 0.5, and perfScore=0.484364]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 6.85734 secs, and comparison 8.7569 sec, and warnIfPerfScore > 1.05, and perfScore=1.27701]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.38344 secs, and comparison 7.33777 sec, and warnIfPerfScore > 1.15, and perfScore=1.1495]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 4.05234 secs, and comparison 2.55554 sec, and warnIfPerfScore > 0.48, and perfScore=0.630633]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 4.81271 secs, and comparison 3.55105 sec, and warnIfPerfScore > 0.57, and perfScore=0.737847]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 3.51087 secs, and comparison 18.5845 sec, and warnIfPerfScore > 2.9, and perfScore=5.29342]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 4.18093 secs, and comparison 18.9377 sec, and warnIfPerfScore > 2.9, and perfScore=4.52953]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.06239 secs, and comparison 57.143 sec, and warnIfPerfScore > 24, and perfScore=11.2877]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.21187 secs, and comparison 10.3584 sec, and warnIfPerfScore > 1.7, and perfScore=1.98747]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.11043 secs, and comparison 7.02267 sec, and warnIfPerfScore > 1.5, and perfScore=0.987657]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 3.20228 secs, and comparison 12.099 sec, and warnIfPerfScore > 2.1, and perfScore=3.77825]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 4.59393 secs, and comparison 3.92903 sec, and warnIfPerfScore > 1.6, and perfScore=0.855266]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 4.68867 secs, and comparison 1.93951 sec, and warnIfPerfScore > 0.23, and perfScore=0.413659]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.04756 secs, and comparison 5.04739 sec, and warnIfPerfScore > 1.3, and perfScore=1.24702]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.11602 secs, and comparison 7.68572 sec, and warnIfPerfScore > 1.2, and perfScore=2.46652]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.081
	DETAILS:         	[baseline test 19.9135 secs, and comparison 1.62102 sec, and warnIfPerfScore > 0.33, and perfScore=0.0814029]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 3.04418 secs, and comparison 42.8095 sec, and warnIfPerfScore > 6, and perfScore=14.0627]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 3.08384 secs, and comparison 7.77632 sec, and warnIfPerfScore > 0.8, and perfScore=2.52164]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 3.01609 secs, and comparison 8.17864 sec, and warnIfPerfScore > 1.4, and perfScore=2.71167]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 12.7212 secs, and comparison 3.73309 sec, and warnIfPerfScore > 0.65, and perfScore=0.293454]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 6.04593 secs, and comparison 38.2119 sec, and warnIfPerfScore > 4.4, and perfScore=6.32027]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.3815 secs, and comparison 3.88783 sec, and warnIfPerfScore > 0.6, and perfScore=0.270335]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 14.9475 secs, and comparison 3.65475 sec, and warnIfPerfScore > 0.6, and perfScore=0.244505]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.753 secs, and comparison 3.64072 sec, and warnIfPerfScore > 0.6, and perfScore=0.231112]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.2397 secs, and comparison 4.68168 sec, and warnIfPerfScore > 1.3, and perfScore=0.307203]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 23.5602 secs, and comparison 10.1697 sec, and warnIfPerfScore > 1.3, and perfScore=0.431646]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 20.4648 secs, and comparison 7.39885 sec, and warnIfPerfScore > 0.3, and perfScore=0.361541]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.60949 secs, and comparison 12.7807 sec, and warnIfPerfScore > 1.5, and perfScore=1.48449]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 6.32515 secs, and comparison 2.68766 sec, and warnIfPerfScore > 0.55, and perfScore=0.424916]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.823554 sec, and warnIfPerfScore > 0.1, and perfScore=0.0549036]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.21552 sec, and warnIfPerfScore > 0.5, and perfScore=0.214368]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 45 seconds]]]

Succeeded
