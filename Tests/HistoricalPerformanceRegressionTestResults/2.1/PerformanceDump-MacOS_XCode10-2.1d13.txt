Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Dec  2 16:59: 2018]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.3859 secs, and comparison 6.21542 sec, and warnIfPerfScore > 0.62, and perfScore=0.598449]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 10.2067 secs, and comparison 5.07271 sec, and warnIfPerfScore > 0.5, and perfScore=0.497]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 17.448 secs, and comparison 13.804 sec, and warnIfPerfScore > 1.05, and perfScore=0.791151]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 39.3412 secs, and comparison 5.84542 sec, and warnIfPerfScore > 0.45, and perfScore=0.148583]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 29.9871 secs, and comparison 5.28942 sec, and warnIfPerfScore > 0.55, and perfScore=0.17639]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 24.8998 secs, and comparison 68.2822 sec, and warnIfPerfScore > 2.8, and perfScore=2.74228]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 27.6828 secs, and comparison 65.4029 sec, and warnIfPerfScore > 2.9, and perfScore=2.36258]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.3
	DETAILS:         	[baseline test 20.6235 secs, and comparison 150.43 sec, and warnIfPerfScore > 9.7, and perfScore=7.29412]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 20.1587 secs, and comparison 27.4001 sec, and warnIfPerfScore > 1.6, and perfScore=1.35922]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 8.31791 secs, and comparison 5.91314 sec, and warnIfPerfScore > 1.5, and perfScore=0.710893]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.8196 secs, and comparison 32.5257 sec, and warnIfPerfScore > 2.1, and perfScore=2.35358]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.5749 secs, and comparison 6.32301 sec, and warnIfPerfScore > 1.3, and perfScore=0.546271]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 11.987 secs, and comparison 1.89959 sec, and warnIfPerfScore > 0.18, and perfScore=0.158471]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 16.5598 secs, and comparison 16.8333 sec, and warnIfPerfScore > 1.3, and perfScore=1.01652]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.1374 secs, and comparison 13.6801 sec, and warnIfPerfScore > 1.2, and perfScore=1.12711]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 12.8025 secs, and comparison 2.37031 sec, and warnIfPerfScore > 0.33, and perfScore=0.185144]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 11.7518 secs, and comparison 54.8376 sec, and warnIfPerfScore > 6, and perfScore=4.66633]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.8533 secs, and comparison 5.06052 sec, and warnIfPerfScore > 0.5, and perfScore=0.393713]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.1196 secs, and comparison 50.4026 sec, and warnIfPerfScore > 4.4, and perfScore=3.84177]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.7629 secs, and comparison 4.92002 sec, and warnIfPerfScore > 0.6, and perfScore=0.385493]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.5181 secs, and comparison 39.8615 sec, and warnIfPerfScore > 1.5, and perfScore=1.35041]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 40.6136 secs, and comparison 5.40729 sec, and warnIfPerfScore > 0.55, and perfScore=0.13314]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.34615 sec, and warnIfPerfScore > 0.25, and perfScore=0.423077]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.85429 sec, and warnIfPerfScore > 0.5, and perfScore=0.256952]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 42 seconds]]]

Succeeded
