Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Jan 30 15:35:43 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 6.72847 secs, and comparison 5.18036 sec, and warnIfPerfScore > 0.65, and perfScore=0.769916]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 6.87506 secs, and comparison 3.76408 sec, and warnIfPerfScore > 0.5, and perfScore=0.547498]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.88652 secs, and comparison 8.14293 sec, and warnIfPerfScore > 1.05, and perfScore=0.916325]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.48422 secs, and comparison 8.21242 sec, and warnIfPerfScore > 1.15, and perfScore=1.0973]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.05931 secs, and comparison 3.66277 sec, and warnIfPerfScore > 0.48, and perfScore=1.19725]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 2.91684 secs, and comparison 4.39202 sec, and warnIfPerfScore > 0.57, and perfScore=1.50574]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.2082 secs, and comparison 23.7552 sec, and warnIfPerfScore > 2.9, and perfScore=1.79852]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 15.887 secs, and comparison 25.2156 sec, and warnIfPerfScore > 2.9, and perfScore=1.58718]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 14.7611 secs, and comparison 99.0409 sec, and warnIfPerfScore > 24, and perfScore=6.7096]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 13.2944 secs, and comparison 11.5788 sec, and warnIfPerfScore > 1.7, and perfScore=0.870958]
	                 	String is FASTER

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 10.1055 secs, and comparison 9.48519 sec, and warnIfPerfScore > 1.5, and perfScore=0.938612]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.40802 secs, and comparison 13.5158 sec, and warnIfPerfScore > 2.1, and perfScore=1.43663]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 8.67463 secs, and comparison 6.89321 sec, and warnIfPerfScore > 1.6, and perfScore=0.794641]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 9.05696 secs, and comparison 2.78374 sec, and warnIfPerfScore > 0.23, and perfScore=0.30736]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.76652 secs, and comparison 8.50663 sec, and warnIfPerfScore > 1.3, and perfScore=1.09529]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.78557 secs, and comparison 11.7546 sec, and warnIfPerfScore > 1.2, and perfScore=1.73229]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 6.10195 secs, and comparison 1.73869 sec, and warnIfPerfScore > 0.33, and perfScore=0.284939]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 5.73484 secs, and comparison 47.2093 sec, and warnIfPerfScore > 6, and perfScore=8.23201]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 6.44641 secs, and comparison 10.6829 sec, and warnIfPerfScore > 0.8, and perfScore=1.65718]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.29092 secs, and comparison 12.1035 sec, and warnIfPerfScore > 1.4, and perfScore=1.92397]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 6.34023 secs, and comparison 4.01582 sec, and warnIfPerfScore > 0.65, and perfScore=0.633388]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 8.61818 secs, and comparison 40.6769 sec, and warnIfPerfScore > 4.4, and perfScore=4.7199]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 6.37482 secs, and comparison 3.72624 sec, and warnIfPerfScore > 0.6, and perfScore=0.584525]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.86677 secs, and comparison 3.70594 sec, and warnIfPerfScore > 0.6, and perfScore=0.539692]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 6.76199 secs, and comparison 3.65794 sec, and warnIfPerfScore > 0.6, and perfScore=0.540956]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 6.82257 secs, and comparison 6.06293 sec, and warnIfPerfScore > 1.3, and perfScore=0.888658]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 21.4804 secs, and comparison 13.1759 sec, and warnIfPerfScore > 1.3, and perfScore=0.613393]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 34.7162 secs, and comparison 8.42772 sec, and warnIfPerfScore > 0.3, and perfScore=0.242761]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.267 secs, and comparison 18.4171 sec, and warnIfPerfScore > 1.5, and perfScore=1.3882]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 11.8625 secs, and comparison 3.11888 sec, and warnIfPerfScore > 0.55, and perfScore=0.262918]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 15 secs, and comparison 1.46837 sec, and warnIfPerfScore > 0.1, and perfScore=0.0978916]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.82473 sec, and warnIfPerfScore > 0.5, and perfScore=0.188315]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 58 seconds]]]

Succeeded
