Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sun Oct 23 13:1:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.68397 secs, and comparison 7.75992 sec, and warnIfPerfScore > 0.65, and perfScore=1.16097]
	                 	shared_ptr<> copy is ***SLOWER***

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.69161 secs, and comparison 2.85609 sec, and warnIfPerfScore > 0.5, and perfScore=0.426817]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 9.57097 secs, and comparison 8.45455 sec, and warnIfPerfScore > 1.05, and perfScore=0.883354]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.75021 secs, and comparison 8.44586 sec, and warnIfPerfScore > 1.15, and perfScore=1.08976]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 8.80148 secs, and comparison 2.67413 sec, and warnIfPerfScore > 0.48, and perfScore=0.303827]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.95324 secs, and comparison 3.1912 sec, and warnIfPerfScore > 0.57, and perfScore=0.356429]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 8.78906 secs, and comparison 22.7567 sec, and warnIfPerfScore > 2.9, and perfScore=2.58921]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 9.37478 secs, and comparison 23.2155 sec, and warnIfPerfScore > 2.9, and perfScore=2.47638]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	19
	DETAILS:         	[baseline test 8.12548 secs, and comparison 152.353 sec, and warnIfPerfScore > 24, and perfScore=18.75]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.71407 secs, and comparison 11.3881 sec, and warnIfPerfScore > 1.7, and perfScore=1.47628]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 7.79015 secs, and comparison 7.07999 sec, and warnIfPerfScore > 1.5, and perfScore=0.908839]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 6.98415 secs, and comparison 13.7049 sec, and warnIfPerfScore > 2.1, and perfScore=1.96229]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.08094 secs, and comparison 4.95243 sec, and warnIfPerfScore > 1.6, and perfScore=0.545365]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 9.47461 secs, and comparison 0.905042 sec, and warnIfPerfScore > 0.23, and perfScore=0.0955229]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.4682 secs, and comparison 13.8721 sec, and warnIfPerfScore > 1.3, and perfScore=1.02999]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 10.1307 secs, and comparison 6.99168 sec, and warnIfPerfScore > 1.2, and perfScore=0.69015]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 11.2843 secs, and comparison 2.62339 sec, and warnIfPerfScore > 0.33, and perfScore=0.232482]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 9.68466 secs, and comparison 42.5071 sec, and warnIfPerfScore > 6, and perfScore=4.38911]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 9.72328 secs, and comparison 6.59149 sec, and warnIfPerfScore > 0.8, and perfScore=0.677908]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.68817 secs, and comparison 10.0793 sec, and warnIfPerfScore > 1.4, and perfScore=1.04037]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.2701 secs, and comparison 3.88234 sec, and warnIfPerfScore > 0.65, and perfScore=0.344482]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 10.3615 secs, and comparison 39.6591 sec, and warnIfPerfScore > 4.4, and perfScore=3.82755]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.0576 secs, and comparison 3.77781 sec, and warnIfPerfScore > 0.6, and perfScore=0.34165]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.1105 secs, and comparison 3.79109 sec, and warnIfPerfScore > 0.6, and perfScore=0.341218]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 11.099 secs, and comparison 3.74546 sec, and warnIfPerfScore > 0.6, and perfScore=0.33746]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 11.0549 secs, and comparison 6.63705 sec, and warnIfPerfScore > 1.3, and perfScore=0.600371]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 12.0854 secs, and comparison 10.2244 sec, and warnIfPerfScore > 1.3, and perfScore=0.846018]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 50.0352 secs, and comparison 7.2997 sec, and warnIfPerfScore > 0.3, and perfScore=0.145891]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.93032 secs, and comparison 12.2376 sec, and warnIfPerfScore > 1.5, and perfScore=1.54314]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.49879 secs, and comparison 3.4205 sec, and warnIfPerfScore > 0.55, and perfScore=0.402469]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.053
	DETAILS:         	[baseline test 15 secs, and comparison 0.791572 sec, and warnIfPerfScore > 0.1, and perfScore=0.0527715]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.25713 sec, and warnIfPerfScore > 0.5, and perfScore=0.217142]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.80065 secs, and comparison 14.6297 sec, and warnIfPerfScore > 2, and perfScore=1.66234]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.8265 secs, and comparison 17.9834 sec, and warnIfPerfScore > 3.6, and perfScore=1.66106]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 48 seconds]]]

Succeeded
