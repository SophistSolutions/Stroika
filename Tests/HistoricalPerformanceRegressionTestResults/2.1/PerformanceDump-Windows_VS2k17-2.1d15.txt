Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Wed Jan 16 1:13:11 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.4981 secs, and comparison 5.50814 sec, and warnIfPerfScore > 0.62, and perfScore=0.479049]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.1963 secs, and comparison 3.93185 sec, and warnIfPerfScore > 0.5, and perfScore=0.351173]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.3864 secs, and comparison 9.77338 sec, and warnIfPerfScore > 1.05, and perfScore=0.858337]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 9.66708 secs, and comparison 3.89989 sec, and warnIfPerfScore > 0.45, and perfScore=0.40342]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.5093 secs, and comparison 4.63398 sec, and warnIfPerfScore > 0.55, and perfScore=0.440943]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.5166 secs, and comparison 27.7366 sec, and warnIfPerfScore > 2.8, and perfScore=2.40841]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.9203 secs, and comparison 30.3679 sec, and warnIfPerfScore > 2.9, and perfScore=2.54757]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.2
	DETAILS:         	[baseline test 11.6831 secs, and comparison 95.7979 sec, and warnIfPerfScore > 9.7, and perfScore=8.19967]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.5402 secs, and comparison 15.4952 sec, and warnIfPerfScore > 1.6, and perfScore=1.34271]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.4106 secs, and comparison 15.378 sec, and warnIfPerfScore > 1.5, and perfScore=1.2391]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 8.64909 secs, and comparison 15.5155 sec, and warnIfPerfScore > 2.1, and perfScore=1.79388]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 12.0228 secs, and comparison 11.8824 sec, and warnIfPerfScore > 1.3, and perfScore=0.988317]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.2027 secs, and comparison 1.51006 sec, and warnIfPerfScore > 0.18, and perfScore=0.123748]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6502 secs, and comparison 12.5644 sec, and warnIfPerfScore > 1.3, and perfScore=1.07847]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.5042 secs, and comparison 8.82606 sec, and warnIfPerfScore > 1.2, and perfScore=0.840242]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.2185 secs, and comparison 2.23662 sec, and warnIfPerfScore > 0.33, and perfScore=0.218879]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 9.45623 secs, and comparison 47.0353 sec, and warnIfPerfScore > 6, and perfScore=4.974]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.6709 secs, and comparison 4.21077 sec, and warnIfPerfScore > 0.5, and perfScore=0.394604]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 10.7096 secs, and comparison 43.0021 sec, and warnIfPerfScore > 4.4, and perfScore=4.01528]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.8933 secs, and comparison 4.66242 sec, and warnIfPerfScore > 0.6, and perfScore=0.428007]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.0228 secs, and comparison 18.9384 sec, and warnIfPerfScore > 1.5, and perfScore=1.26064]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4143 secs, and comparison 4.2525 sec, and warnIfPerfScore > 0.55, and perfScore=0.317013]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.5599 sec, and warnIfPerfScore > 0.25, and perfScore=0.103993]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.6189 sec, and warnIfPerfScore > 0.5, and perfScore=0.374593]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.0085 secs, and comparison 18.0383 sec, and warnIfPerfScore > 1.9, and perfScore=1.38666]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.4217 secs, and comparison 33.416 sec, and warnIfPerfScore > 3, and perfScore=2.48971]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 6 seconds]]]

Succeeded
