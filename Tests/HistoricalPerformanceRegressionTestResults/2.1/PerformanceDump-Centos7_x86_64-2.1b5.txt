Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu Sep 10 22:5:2 2020]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.64758 secs, and comparison 5.01232 sec, and warnIfPerfScore > 0.62, and perfScore=0.754007]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.61947 secs, and comparison 3.2515 sec, and warnIfPerfScore > 0.5, and perfScore=0.491203]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.29285 secs, and comparison 7.62663 sec, and warnIfPerfScore > 1.05, and perfScore=0.919664]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 2.82907 secs, and comparison 4.44692 sec, and warnIfPerfScore > 0.48, and perfScore=1.57186]
	                 	Charactes::String is ***SLOWER***

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 2.82963 secs, and comparison 4.82612 sec, and warnIfPerfScore > 0.57, and perfScore=1.70556]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 11.1889 secs, and comparison 56.14 sec, and warnIfPerfScore > 2.9, and perfScore=5.01746]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 19.93 secs, and comparison 58.459 sec, and warnIfPerfScore > 2.9, and perfScore=2.93321]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 17.5333 secs, and comparison 262.429 sec, and warnIfPerfScore > 9.7, and perfScore=14.9675]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 17.6249 secs, and comparison 24.2982 sec, and warnIfPerfScore > 1.6, and perfScore=1.37863]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.0495 secs, and comparison 14.3472 sec, and warnIfPerfScore > 1.5, and perfScore=1.09945]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.2408 secs, and comparison 24.4387 sec, and warnIfPerfScore > 2.1, and perfScore=1.84572]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 10.5518 secs, and comparison 9.6727 sec, and warnIfPerfScore > 1.3, and perfScore=0.916683]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 10.4926 secs, and comparison 4.1321 sec, and warnIfPerfScore > 0.23, and perfScore=0.393812]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 9.49052 secs, and comparison 11.0993 sec, and warnIfPerfScore > 1.3, and perfScore=1.16951]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 8.82536 secs, and comparison 16.7702 sec, and warnIfPerfScore > 1.2, and perfScore=1.90023]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 8.30053 secs, and comparison 2.15662 sec, and warnIfPerfScore > 0.33, and perfScore=0.259817]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 8.405 secs, and comparison 85.7489 sec, and warnIfPerfScore > 6, and perfScore=10.2021]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 8.15977 secs, and comparison 7.17039 sec, and warnIfPerfScore > 0.5, and perfScore=0.878749]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 11.7541 secs, and comparison 81.7421 sec, and warnIfPerfScore > 4.4, and perfScore=6.95436]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 7.9404 secs, and comparison 6.95659 sec, and warnIfPerfScore > 0.6, and perfScore=0.876102]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 19.1045 secs, and comparison 25.9042 sec, and warnIfPerfScore > 1.5, and perfScore=1.35592]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 24.1592 secs, and comparison 6.70889 sec, and warnIfPerfScore > 0.55, and perfScore=0.277695]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.22683 sec, and warnIfPerfScore > 0.25, and perfScore=0.148455]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.84699 sec, and warnIfPerfScore > 0.5, and perfScore=0.389799]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 19 seconds]]]

Succeeded
