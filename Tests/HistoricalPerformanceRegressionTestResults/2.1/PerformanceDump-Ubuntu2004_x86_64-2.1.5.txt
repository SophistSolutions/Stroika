Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Sep 16 12:43:37 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.79859 secs, and comparison 4.91676 sec, and warnIfPerfScore > 0.65, and perfScore=0.630467]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.35415 secs, and comparison 3.1206 sec, and warnIfPerfScore > 0.5, and perfScore=0.424332]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.87535 secs, and comparison 8.61055 sec, and warnIfPerfScore > 1.05, and perfScore=1.09335]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.20556 secs, and comparison 7.19212 sec, and warnIfPerfScore > 1.15, and perfScore=1.15898]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 3.84824 secs, and comparison 2.38905 sec, and warnIfPerfScore > 0.48, and perfScore=0.620817]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 4.49097 secs, and comparison 3.0323 sec, and warnIfPerfScore > 0.57, and perfScore=0.6752]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 3.3558 secs, and comparison 16.8515 sec, and warnIfPerfScore > 2.9, and perfScore=5.0216]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.69418 secs, and comparison 17.5694 sec, and warnIfPerfScore > 2.9, and perfScore=2.62458]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 5.79934 secs, and comparison 67.6043 sec, and warnIfPerfScore > 24, and perfScore=11.6573]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 7.68607 secs, and comparison 12.3815 sec, and warnIfPerfScore > 1.7, and perfScore=1.61091]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.87373 secs, and comparison 6.58744 sec, and warnIfPerfScore > 1.5, and perfScore=0.95835]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.77913 secs, and comparison 12.243 sec, and warnIfPerfScore > 2.1, and perfScore=4.40533]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 4.25115 secs, and comparison 3.70889 sec, and warnIfPerfScore > 1.6, and perfScore=0.872444]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 5.1296 secs, and comparison 1.99362 sec, and warnIfPerfScore > 0.23, and perfScore=0.38865]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.84253 secs, and comparison 5.42626 sec, and warnIfPerfScore > 1.3, and perfScore=1.12054]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.38373 secs, and comparison 7.87711 sec, and warnIfPerfScore > 1.2, and perfScore=2.32794]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 21.2776 secs, and comparison 2.1447 sec, and warnIfPerfScore > 0.33, and perfScore=0.100796]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 3.66059 secs, and comparison 43.9009 sec, and warnIfPerfScore > 6, and perfScore=11.9928]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.06985 secs, and comparison 7.83688 sec, and warnIfPerfScore > 0.8, and perfScore=2.55285]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 3.26912 secs, and comparison 9.37862 sec, and warnIfPerfScore > 1.4, and perfScore=2.86885]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 21.3665 secs, and comparison 3.85561 sec, and warnIfPerfScore > 0.65, and perfScore=0.180451]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 4.87504 secs, and comparison 39.4619 sec, and warnIfPerfScore > 4.4, and perfScore=8.09469]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.0359 secs, and comparison 4.26719 sec, and warnIfPerfScore > 0.6, and perfScore=0.30402]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 14.8765 secs, and comparison 4.0714 sec, and warnIfPerfScore > 0.6, and perfScore=0.27368]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.4657 secs, and comparison 4.39113 sec, and warnIfPerfScore > 0.6, and perfScore=0.303555]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.7764 secs, and comparison 4.39061 sec, and warnIfPerfScore > 1.3, and perfScore=0.297137]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 23.1651 secs, and comparison 12.2723 sec, and warnIfPerfScore > 1.3, and perfScore=0.529777]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 20.5766 secs, and comparison 7.75648 sec, and warnIfPerfScore > 0.3, and perfScore=0.376956]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.6486 secs, and comparison 14.8487 sec, and warnIfPerfScore > 1.5, and perfScore=1.7169]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.35269 secs, and comparison 2.86092 sec, and warnIfPerfScore > 0.55, and perfScore=0.450349]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.064
	DETAILS:         	[baseline test 15 secs, and comparison 0.963033 sec, and warnIfPerfScore > 0.1, and perfScore=0.0642022]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.24981 sec, and warnIfPerfScore > 0.5, and perfScore=0.216654]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 28 seconds]]]

Succeeded
