Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Mar  8 1:41:21 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.9174 secs, and comparison 4.60616 sec, and warnIfPerfScore > 0.62, and perfScore=0.778409]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.90855 secs, and comparison 3.04374 sec, and warnIfPerfScore > 0.5, and perfScore=0.515142]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.39213 secs, and comparison 6.71738 sec, and warnIfPerfScore > 1.05, and perfScore=1.05088]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 3.55588 secs, and comparison 3.32595 sec, and warnIfPerfScore > 0.45, and perfScore=0.935336]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 4.36856 secs, and comparison 4.14649 sec, and warnIfPerfScore > 0.55, and perfScore=0.949167]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 2.86975 secs, and comparison 16.7997 sec, and warnIfPerfScore > 2.9, and perfScore=5.85407]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 3.82654 secs, and comparison 17.6581 sec, and warnIfPerfScore > 2.9, and perfScore=4.61463]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 5.13653 secs, and comparison 58.1876 sec, and warnIfPerfScore > 9.7, and perfScore=11.3282]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 4.50456 secs, and comparison 9.57103 sec, and warnIfPerfScore > 1.6, and perfScore=2.12474]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.43455 secs, and comparison 5.03182 sec, and warnIfPerfScore > 1.5, and perfScore=0.925894]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 2.23484 secs, and comparison 10.4324 sec, and warnIfPerfScore > 2.1, and perfScore=4.66809]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 3.95657 secs, and comparison 3.74801 sec, and warnIfPerfScore > 1.3, and perfScore=0.947288]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 4.14657 secs, and comparison 1.69293 sec, and warnIfPerfScore > 0.18, and perfScore=0.408271]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 2.46511 secs, and comparison 3.51774 sec, and warnIfPerfScore > 1.3, and perfScore=1.42702]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.18992 secs, and comparison 6.3522 sec, and warnIfPerfScore > 1.2, and perfScore=1.99134]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 12.9784 secs, and comparison 1.25566 sec, and warnIfPerfScore > 0.33, and perfScore=0.0967497]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.14356 secs, and comparison 42.3467 sec, and warnIfPerfScore > 6, and perfScore=13.471]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 8.99872 secs, and comparison 3.63278 sec, and warnIfPerfScore > 0.5, and perfScore=0.4037]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 4.18417 secs, and comparison 38.0401 sec, and warnIfPerfScore > 4.4, and perfScore=9.09143]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.2748 secs, and comparison 3.67882 sec, and warnIfPerfScore > 0.6, and perfScore=0.358043]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.69418 secs, and comparison 10.6906 sec, and warnIfPerfScore > 1.5, and perfScore=1.38944]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.52852 secs, and comparison 2.34071 sec, and warnIfPerfScore > 0.55, and perfScore=0.358536]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.059
	DETAILS:         	[baseline test 15 secs, and comparison 0.889079 sec, and warnIfPerfScore > 0.25, and perfScore=0.0592719]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.86859 sec, and warnIfPerfScore > 0.5, and perfScore=0.257906]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 20 seconds]]]

Succeeded
