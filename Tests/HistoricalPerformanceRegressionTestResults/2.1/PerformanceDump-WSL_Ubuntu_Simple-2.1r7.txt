Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr  2 :4:4 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 5.76783 secs, and comparison 5.41627 sec, and warnIfPerfScore > 0.65, and perfScore=0.939047]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.74205 secs, and comparison 2.84167 sec, and warnIfPerfScore > 0.5, and perfScore=0.494888]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.05757 secs, and comparison 7.63738 sec, and warnIfPerfScore > 1.05, and perfScore=1.08215]
	                 	SharedPtr is ***SLOWER***

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 6.12922 secs, and comparison 7.63004 sec, and warnIfPerfScore > 1.15, and perfScore=1.24486]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 3.40702 secs, and comparison 2.49438 sec, and warnIfPerfScore > 0.48, and perfScore=0.732131]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 4.25842 secs, and comparison 3.28293 sec, and warnIfPerfScore > 0.57, and perfScore=0.770928]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 3.06922 secs, and comparison 16.9875 sec, and warnIfPerfScore > 2.9, and perfScore=5.53479]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 3.59651 secs, and comparison 17.5363 sec, and warnIfPerfScore > 2.9, and perfScore=4.87591]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 5.49473 secs, and comparison 50.1056 sec, and warnIfPerfScore > 24, and perfScore=9.11885]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 4.5624 secs, and comparison 10.3493 sec, and warnIfPerfScore > 1.7, and perfScore=2.26839]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.62223 secs, and comparison 5.24013 sec, and warnIfPerfScore > 1.5, and perfScore=0.932037]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 2.47489 secs, and comparison 12.413 sec, and warnIfPerfScore > 2.1, and perfScore=5.01558]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 3.94031 secs, and comparison 3.27952 sec, and warnIfPerfScore > 1.6, and perfScore=0.832302]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 4.10648 secs, and comparison 1.44651 sec, and warnIfPerfScore > 0.23, and perfScore=0.35225]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.65379 secs, and comparison 4.16797 sec, and warnIfPerfScore > 1.3, and perfScore=1.14073]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 3.20219 secs, and comparison 6.4989 sec, and warnIfPerfScore > 1.2, and perfScore=2.02952]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 13.6563 secs, and comparison 1.64508 sec, and warnIfPerfScore > 0.33, and perfScore=0.120463]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 3.11266 secs, and comparison 48.8833 sec, and warnIfPerfScore > 6, and perfScore=15.7047]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 3.00349 secs, and comparison 6.26528 sec, and warnIfPerfScore > 0.8, and perfScore=2.086]
	                 	Sequence_Array<int> is ***SLOWER***

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 3.07015 secs, and comparison 7.86243 sec, and warnIfPerfScore > 1.4, and perfScore=2.56093]
	                 	Sequence_stdvector<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.7132 secs, and comparison 4.27862 sec, and warnIfPerfScore > 0.65, and perfScore=0.312007]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 4.35991 secs, and comparison 45.5912 sec, and warnIfPerfScore > 4.4, and perfScore=10.4569]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.4286 secs, and comparison 4.18728 sec, and warnIfPerfScore > 0.6, and perfScore=0.401518]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.0675 secs, and comparison 4.18996 sec, and warnIfPerfScore > 0.6, and perfScore=0.416185]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.0529 secs, and comparison 4.14025 sec, and warnIfPerfScore > 0.6, and perfScore=0.411845]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.123 secs, and comparison 4.31072 sec, and warnIfPerfScore > 1.3, and perfScore=0.425834]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 16.5145 secs, and comparison 9.92629 sec, and warnIfPerfScore > 1.3, and perfScore=0.601064]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 16.4624 secs, and comparison 6.77804 sec, and warnIfPerfScore > 0.3, and perfScore=0.411729]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 6.8337 secs, and comparison 14.0285 sec, and warnIfPerfScore > 1.5, and perfScore=2.05284]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 8.17278 secs, and comparison 2.89846 sec, and warnIfPerfScore > 0.55, and perfScore=0.354648]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.055
	DETAILS:         	[baseline test 15 secs, and comparison 0.819441 sec, and warnIfPerfScore > 0.1, and perfScore=0.0546294]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.27035 sec, and warnIfPerfScore > 0.5, and perfScore=0.218024]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 49 seconds]]]

Succeeded
