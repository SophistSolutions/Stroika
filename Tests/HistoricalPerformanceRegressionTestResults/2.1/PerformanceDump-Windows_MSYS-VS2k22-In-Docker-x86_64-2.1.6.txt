Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Oct 14 23:22:25 2022]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.35994 secs, and comparison 4.18975 sec, and warnIfPerfScore > 0.65, and perfScore=0.658772]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 5.37075 secs, and comparison 2.53839 sec, and warnIfPerfScore > 0.5, and perfScore=0.472633]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 7.40448 secs, and comparison 6.89383 sec, and warnIfPerfScore > 1.05, and perfScore=0.931035]
	                 	SharedPtr is FASTER

Test std::shared_ptr (make_shared) versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.18688 secs, and comparison 6.81436 sec, and warnIfPerfScore > 1.15, and perfScore=1.10142]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 9.38567 secs, and comparison 2.10094 sec, and warnIfPerfScore > 0.48, and perfScore=0.223846]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 9.07171 secs, and comparison 2.62672 sec, and warnIfPerfScore > 0.57, and perfScore=0.289551]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.03141 secs, and comparison 17.8003 sec, and warnIfPerfScore > 2.9, and perfScore=2.95126]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.18852 secs, and comparison 17.9892 sec, and warnIfPerfScore > 2.9, and perfScore=2.90686]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	24
	DETAILS:         	[baseline test 5.31464 secs, and comparison 128.191 sec, and warnIfPerfScore > 24, and perfScore=24.1204]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.05805 secs, and comparison 9.57185 sec, and warnIfPerfScore > 1.7, and perfScore=1.8924]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 5.39385 secs, and comparison 4.89325 sec, and warnIfPerfScore > 1.5, and perfScore=0.907192]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.88402 secs, and comparison 11.5234 sec, and warnIfPerfScore > 2.1, and perfScore=2.35941]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 6.0691 secs, and comparison 3.71489 sec, and warnIfPerfScore > 1.6, and perfScore=0.612099]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.052
	DETAILS:         	[baseline test 11.7089 secs, and comparison 0.612805 sec, and warnIfPerfScore > 0.23, and perfScore=0.0523368]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.1391 secs, and comparison 11.3541 sec, and warnIfPerfScore > 1.3, and perfScore=1.0193]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.9878 secs, and comparison 4.83743 sec, and warnIfPerfScore > 1.2, and perfScore=0.440253]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 7.50067 secs, and comparison 1.73572 sec, and warnIfPerfScore > 0.33, and perfScore=0.231409]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 10.4894 secs, and comparison 37.3078 sec, and warnIfPerfScore > 6, and perfScore=3.55671]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_Array<int> basics (vector<int> vs Sequence_Array<int>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.49608 secs, and comparison 4.61718 sec, and warnIfPerfScore > 0.8, and perfScore=0.615945]
	                 	Sequence_Array<int> is FASTER

Test Sequence_stdvector<int> basics (vector<int> vs Sequence_stdvector<int>)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 7.44283 secs, and comparison 6.96497 sec, and warnIfPerfScore > 1.4, and perfScore=0.935796]
	                 	Sequence_stdvector<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.45094 secs, and comparison 3.27604 sec, and warnIfPerfScore > 0.65, and perfScore=0.439681]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 7.90261 secs, and comparison 35.1554 sec, and warnIfPerfScore > 4.4, and perfScore=4.44859]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.33882 secs, and comparison 3.21394 sec, and warnIfPerfScore > 0.6, and perfScore=0.437937]
	                 	Collection<string> is FASTER

Test Collection_LinkedList<string> basics (vector<string> vs Collection_LinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.39793 secs, and comparison 3.2347 sec, and warnIfPerfScore > 0.6, and perfScore=0.437243]
	                 	Collection_LinkedList<string> is FASTER

Test Collection_stdforward_list<string> basics (vector<string> vs Collection_stdforward_list<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.3563 secs, and comparison 3.22035 sec, and warnIfPerfScore > 0.6, and perfScore=0.437768]
	                 	Collection_stdforward_list<string> is FASTER

Test Collection_stdmultiset<string> basics (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.34641 secs, and comparison 4.75838 sec, and warnIfPerfScore > 1.3, and perfScore=0.647714]
	                 	Collection_stdmultiset<string> is FASTER

Test Collection_stdmultiset<string> basics with rnd strings (vector<string> vs Collection_stdmultiset<string>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.95629 secs, and comparison 7.81614 sec, and warnIfPerfScore > 1.3, and perfScore=0.982386]
	                 	Collection_stdmultiset<string> is FASTER

Test std::set<int> vs Set<int> (set<int> vs Set<int>)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 34.1903 secs, and comparison 5.86798 sec, and warnIfPerfScore > 0.3, and perfScore=0.171627]
	                 	Set<int> is FASTER

Test String Characters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 5.0986 secs, and comparison 8.81802 sec, and warnIfPerfScore > 1.5, and perfScore=1.7295]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.61901 secs, and comparison 2.58921 sec, and warnIfPerfScore > 0.55, and perfScore=0.460793]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.038
	DETAILS:         	[baseline test 15 secs, and comparison 0.571089 sec, and warnIfPerfScore > 0.1, and perfScore=0.0380726]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.76148 sec, and warnIfPerfScore > 0.5, and perfScore=0.184099]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 6.0532 secs, and comparison 11.769 sec, and warnIfPerfScore > 2, and perfScore=1.94425]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 7.32104 secs, and comparison 13.1617 sec, and warnIfPerfScore > 3.6, and perfScore=1.79779]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 10 minutes, 54 seconds]]]

Succeeded
