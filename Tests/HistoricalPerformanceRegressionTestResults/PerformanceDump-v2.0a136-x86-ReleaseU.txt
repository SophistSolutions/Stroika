Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/29/16 22:28:57]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.8156 secs, and comparison 5.17551 sec, and warnIfPerfScore > 0.5, and perfScore=0.438025]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.8912 secs, and comparison 3.55113 sec, and warnIfPerfScore > 0.35, and perfScore=0.298636]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 11.8307 secs, and comparison 11.649 sec, and warnIfPerfScore > 0.9, and perfScore=0.984639]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.6858 secs, and comparison 14.4442 sec, and warnIfPerfScore > 1.15, and perfScore=0.983547]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.3088 secs, and comparison 4.08722 sec, and warnIfPerfScore > 0.5, and perfScore=0.307107]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 13.2619 secs, and comparison 5.35254 sec, and warnIfPerfScore > 0.68, and perfScore=0.403603]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.5541 secs, and comparison 36.6716 sec, and warnIfPerfScore > 4.3, and perfScore=2.70556]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.1667 secs, and comparison 36.4501 sec, and warnIfPerfScore > 4, and perfScore=2.57294]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 13.377 secs, and comparison 91.9861 sec, and warnIfPerfScore > 9.1, and perfScore=6.87641]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 12.7872 secs, and comparison 19.6856 sec, and warnIfPerfScore > 2.45, and perfScore=1.53948]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 10.6148 secs, and comparison 9.57493 sec, and warnIfPerfScore > 1.65, and perfScore=0.902039]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 12.5927 secs, and comparison 53.3508 sec, and warnIfPerfScore > 2.7, and perfScore=4.23666]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.8141 secs, and comparison 33.6221 sec, and warnIfPerfScore > 3, and perfScore=2.84592]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.09
	DETAILS:         	[baseline test 11.9923 secs, and comparison 1.07856 sec, and warnIfPerfScore > 0.14, and perfScore=0.0899378]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.4055 secs, and comparison 16.8953 sec, and warnIfPerfScore > 1.25, and perfScore=1.17283]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.7465 secs, and comparison 32.8382 sec, and warnIfPerfScore > 7.7, and perfScore=2.38883]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.9016 secs, and comparison 3.80852 sec, and warnIfPerfScore > 1.55, and perfScore=0.319999]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.5877 secs, and comparison 32.3594 sec, and warnIfPerfScore > 7.7, and perfScore=2.38152]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.745 secs, and comparison 3.7845 sec, and warnIfPerfScore > 1.4, and perfScore=0.322223]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 10.9962 secs, and comparison 54.2214 sec, and warnIfPerfScore > 7.9, and perfScore=4.93092]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.1691 secs, and comparison 6.17283 sec, and warnIfPerfScore > 0.8, and perfScore=0.552672]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.3196 secs, and comparison 15.4542 sec, and warnIfPerfScore > 1.7, and perfScore=1.25444]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.1891 secs, and comparison 3.91598 sec, and warnIfPerfScore > 0.35, and perfScore=0.321268]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.70899 sec, and warnIfPerfScore > 0.4, and perfScore=0.113933]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.31033 sec, and warnIfPerfScore > 1.1, and perfScore=0.220689]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.8616 secs, and comparison 20.3637 sec, and warnIfPerfScore > 2.4, and perfScore=1.5833]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 12.8163 secs, and comparison 23.4058 sec, and warnIfPerfScore > 2.8, and perfScore=1.82625]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 20 seconds]]]

