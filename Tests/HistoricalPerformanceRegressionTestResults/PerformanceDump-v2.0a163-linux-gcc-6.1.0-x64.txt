Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/29/16 12:31:20]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.48553 secs, and comparison 4.32184 sec, and warnIfPerfScore > 0.62, and perfScore=0.787861]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.45761 secs, and comparison 2.73819 sec, and warnIfPerfScore > 0.65, and perfScore=0.50172]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.31106 secs, and comparison 9.8486 sec, and warnIfPerfScore > 0.97, and perfScore=1.185]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 8.08661 secs, and comparison 7.782 sec, and warnIfPerfScore > 1.15, and perfScore=0.962332]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.96005 secs, and comparison 2.84247 sec, and warnIfPerfScore > 0.5, and perfScore=0.476922]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 7.61045 secs, and comparison 4.70497 sec, and warnIfPerfScore > 0.68, and perfScore=0.618224]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.43849 secs, and comparison 30.9862 sec, and warnIfPerfScore > 4.3, and perfScore=3.672]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.77847 secs, and comparison 31.821 sec, and warnIfPerfScore > 4, and perfScore=3.62489]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.4658 secs, and comparison 99.6998 sec, and warnIfPerfScore > 9.9, and perfScore=11.7768]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.1851 secs, and comparison 14.5199 sec, and warnIfPerfScore > 3.2, and perfScore=1.19161]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.69945 secs, and comparison 5.99431 sec, and warnIfPerfScore > 1.7, and perfScore=1.05173]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.76497 secs, and comparison 19.0572 sec, and warnIfPerfScore > 2.8, and perfScore=2.81704]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.7
	DETAILS:         	[baseline test 6.65031 secs, and comparison 37.6743 sec, and warnIfPerfScore > 3.3, and perfScore=5.66505]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.80423 secs, and comparison 2.45024 sec, and warnIfPerfScore > 0.22, and perfScore=0.360106]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.97726 secs, and comparison 6.33973 sec, and warnIfPerfScore > 1.25, and perfScore=1.06064]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 9.22183 secs, and comparison 33.9392 sec, and warnIfPerfScore > 7.7, and perfScore=3.68031]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.60343 secs, and comparison 3.66252 sec, and warnIfPerfScore > 1.55, and perfScore=0.481693]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.99654 secs, and comparison 33.6045 sec, and warnIfPerfScore > 7.7, and perfScore=3.73527]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.7099 secs, and comparison 3.69985 sec, and warnIfPerfScore > 1.4, and perfScore=0.479883]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 6.70504 secs, and comparison 61.1998 sec, and warnIfPerfScore > 7.9, and perfScore=9.12743]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 7.32431 secs, and comparison 6.16799 sec, and warnIfPerfScore > 0.8, and perfScore=0.842126]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6728 secs, and comparison 14.368 sec, and warnIfPerfScore > 1.7, and perfScore=1.13376]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.4654 secs, and comparison 3.77584 sec, and warnIfPerfScore > 0.55, and perfScore=0.244148]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.54105 sec, and warnIfPerfScore > 0.4, and perfScore=0.102737]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.44234 sec, and warnIfPerfScore > 1.1, and perfScore=0.229489]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 35 seconds]]]

