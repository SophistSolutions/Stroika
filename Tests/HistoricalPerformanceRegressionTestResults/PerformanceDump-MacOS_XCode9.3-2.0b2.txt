Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/30/18 15:05:33]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.81691 secs, and comparison 6.17027 sec, and warnIfPerfScore > 0.62, and perfScore=0.699822]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.81631 secs, and comparison 4.15523 sec, and warnIfPerfScore > 0.65, and perfScore=0.471311]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 14.8135 secs, and comparison 11.9384 sec, and warnIfPerfScore > 1.05, and perfScore=0.805915]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.1858 secs, and comparison 4.20323 sec, and warnIfPerfScore > 0.5, and perfScore=0.149126]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 28.1012 secs, and comparison 4.89067 sec, and warnIfPerfScore > 0.68, and perfScore=0.174038]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.6794 secs, and comparison 58.0387 sec, and warnIfPerfScore > 4.3, and perfScore=3.10709]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 20.5277 secs, and comparison 59.9394 sec, and warnIfPerfScore > 4, and perfScore=2.91993]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 16.0819 secs, and comparison 151.103 sec, and warnIfPerfScore > 10.4, and perfScore=9.39583]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 19.6994 secs, and comparison 30.4388 sec, and warnIfPerfScore > 3.2, and perfScore=1.54517]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.28753 secs, and comparison 5.92871 sec, and warnIfPerfScore > 1.8, and perfScore=0.715377]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.6891 secs, and comparison 31.9694 sec, and warnIfPerfScore > 2.8, and perfScore=2.33538]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 11.0848 secs, and comparison 22.6666 sec, and warnIfPerfScore > 3.3, and perfScore=2.04484]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.4284 secs, and comparison 1.88918 sec, and warnIfPerfScore > 0.25, and perfScore=0.165306]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.3182 secs, and comparison 18.9792 sec, and warnIfPerfScore > 1.4, and perfScore=1.09591]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.2506 secs, and comparison 34.4361 sec, and warnIfPerfScore > 7.7, and perfScore=2.81097]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.8667 secs, and comparison 4.28437 sec, and warnIfPerfScore > 1.55, and perfScore=0.33298]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 11.7753 secs, and comparison 75.8716 sec, and warnIfPerfScore > 9, and perfScore=6.4433]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.8663 secs, and comparison 6.62737 sec, and warnIfPerfScore > 1, and perfScore=0.515094]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 13.5686 secs, and comparison 70.0041 sec, and warnIfPerfScore > 7.9, and perfScore=5.15926]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.8364 secs, and comparison 7.23205 sec, and warnIfPerfScore > 0.8, and perfScore=0.563401]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 30.4138 secs, and comparison 41.1346 sec, and warnIfPerfScore > 1.7, and perfScore=1.3525]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.51004 secs, and comparison 6.16331 sec, and warnIfPerfScore > 0.55, and perfScore=0.946739]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15 secs, and comparison 6.97329 sec, and warnIfPerfScore > 0.4, and perfScore=0.464886]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.7856 sec, and warnIfPerfScore > 1.1, and perfScore=0.185707]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 47 seconds]]]

Succeeded
