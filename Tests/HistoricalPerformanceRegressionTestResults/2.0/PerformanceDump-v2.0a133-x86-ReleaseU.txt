Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/13/16 21:38:41]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.1988 secs, and comparison 6.54435 sec, and warnIfPerfScore > 0.5, and perfScore=0.460908]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.2232 secs, and comparison 4.30418 sec, and warnIfPerfScore > 0.35, and perfScore=0.302616]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 14.34 secs, and comparison 11.9517 sec, and warnIfPerfScore > 0.89, and perfScore=0.83345]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.4031 secs, and comparison 14.1345 sec, and warnIfPerfScore > 1.15, and perfScore=0.981349]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.3863 secs, and comparison 3.54676 sec, and warnIfPerfScore > 0.5, and perfScore=0.230514]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.1408 secs, and comparison 4.59072 sec, and warnIfPerfScore > 0.68, and perfScore=0.303203]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.1028 secs, and comparison 41.8465 sec, and warnIfPerfScore > 4.3, and perfScore=2.5987]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.7612 secs, and comparison 42.262 sec, and warnIfPerfScore > 4, and perfScore=2.6814]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 15.1647 secs, and comparison 104.174 sec, and warnIfPerfScore > 9.1, and perfScore=6.8695]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.0566 secs, and comparison 22.8174 sec, and warnIfPerfScore > 2.45, and perfScore=1.51545]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.8245 secs, and comparison 14.6426 sec, and warnIfPerfScore > 1.65, and perfScore=0.987734]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.1771 secs, and comparison 29.6971 sec, and warnIfPerfScore > 2.7, and perfScore=1.95671]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.8218 secs, and comparison 39.3827 sec, and warnIfPerfScore > 3, and perfScore=2.65709]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.0661 secs, and comparison 1.65149 sec, and warnIfPerfScore > 0.14, and perfScore=0.109616]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.9104 secs, and comparison 16.4589 sec, and warnIfPerfScore > 1.25, and perfScore=1.03447]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.1695 secs, and comparison 35.0928 sec, and warnIfPerfScore > 7.7, and perfScore=2.31339]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.2879 secs, and comparison 4.75792 sec, and warnIfPerfScore > 1.55, and perfScore=0.333004]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.1125 secs, and comparison 34.6969 sec, and warnIfPerfScore > 7.7, and perfScore=2.29591]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.4335 secs, and comparison 4.8131 sec, and warnIfPerfScore > 1.4, and perfScore=0.333467]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 14.2327 secs, and comparison 58.5952 sec, and warnIfPerfScore > 7.9, and perfScore=4.11693]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 13.9684 secs, and comparison 6.69033 sec, and warnIfPerfScore > 0.8, and perfScore=0.478963]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.944 secs, and comparison 18.898 sec, and warnIfPerfScore > 1.6, and perfScore=1.26459]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 14.5189 secs, and comparison 4.10715 sec, and warnIfPerfScore > 0.32, and perfScore=0.282883]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.11938 sec, and warnIfPerfScore > 0.4, and perfScore=0.141292]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.69081 sec, and warnIfPerfScore > 1.1, and perfScore=0.312721]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.9118 secs, and comparison 21.3757 sec, and warnIfPerfScore > 2.4, and perfScore=1.53652]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.5087 secs, and comparison 27.3473 sec, and warnIfPerfScore > 2.8, and perfScore=1.88489]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 53 seconds]]]

