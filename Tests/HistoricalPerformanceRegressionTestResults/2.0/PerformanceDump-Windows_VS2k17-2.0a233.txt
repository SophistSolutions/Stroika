Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/4/18 21:29:38]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.2103 secs, and comparison 5.37235 sec, and warnIfPerfScore > 0.62, and perfScore=0.479236]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.047 secs, and comparison 3.6576 sec, and warnIfPerfScore > 0.65, and perfScore=0.331094]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 10.834 secs, and comparison 9.23021 sec, and warnIfPerfScore > 1.05, and perfScore=0.851965]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 9.37547 secs, and comparison 3.43639 sec, and warnIfPerfScore > 0.5, and perfScore=0.36653]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.53626 secs, and comparison 4.3028 sec, and warnIfPerfScore > 0.68, and perfScore=0.451204]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.0412 secs, and comparison 27.506 sec, and warnIfPerfScore > 4.3, and perfScore=2.49121]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.4756 secs, and comparison 29.798 sec, and warnIfPerfScore > 4, and perfScore=2.59664]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.3
	DETAILS:         	[baseline test 11.2471 secs, and comparison 93.3504 sec, and warnIfPerfScore > 10.4, and perfScore=8.29994]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.1167 secs, and comparison 14.8168 sec, and warnIfPerfScore > 3.2, and perfScore=1.33285]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.81088 secs, and comparison 12.5684 sec, and warnIfPerfScore > 1.8, and perfScore=1.28107]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.13274 secs, and comparison 13.8308 sec, and warnIfPerfScore > 2.8, and perfScore=1.70063]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.4441 secs, and comparison 35.6247 sec, and warnIfPerfScore > 3.3, and perfScore=3.11292]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.9523 secs, and comparison 1.32721 sec, and warnIfPerfScore > 0.25, and perfScore=0.111042]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.1334 secs, and comparison 11.7651 sec, and warnIfPerfScore > 1.4, and perfScore=1.05674]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.3227 secs, and comparison 35.7441 sec, and warnIfPerfScore > 7.7, and perfScore=3.15684]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.4715 secs, and comparison 5.11076 sec, and warnIfPerfScore > 1.55, and perfScore=0.445517]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 10.8725 secs, and comparison 69.6223 sec, and warnIfPerfScore > 7.7, and perfScore=6.4035]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.3588 secs, and comparison 6.29922 sec, and warnIfPerfScore > 1, and perfScore=0.554569]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 14.6772 secs, and comparison 61.0398 sec, and warnIfPerfScore > 7.9, and perfScore=4.15881]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 11.268 secs, and comparison 7.01221 sec, and warnIfPerfScore > 0.8, and perfScore=0.622313]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.2835 secs, and comparison 15.1916 sec, and warnIfPerfScore > 1.7, and perfScore=1.34636]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 13.4864 secs, and comparison 4.17614 sec, and warnIfPerfScore > 0.55, and perfScore=0.309657]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.57934 sec, and warnIfPerfScore > 0.4, and perfScore=0.171956]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.6947 sec, and warnIfPerfScore > 1.1, and perfScore=0.31298]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.3305 secs, and comparison 15.34 sec, and warnIfPerfScore > 2.4, and perfScore=1.24407]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.5362 secs, and comparison 31.7186 sec, and warnIfPerfScore > 2.9, and perfScore=2.74948]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 16 seconds]]]

Succeeded
