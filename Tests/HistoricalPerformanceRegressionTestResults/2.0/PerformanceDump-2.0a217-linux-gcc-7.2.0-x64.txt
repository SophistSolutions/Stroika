Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/13/17 12:54:36]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.73015 secs, and comparison 5.39133 sec, and warnIfPerfScore > 0.62, and perfScore=0.801071]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.72588 secs, and comparison 3.43869 sec, and warnIfPerfScore > 0.65, and perfScore=0.511263]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.17534 secs, and comparison 8.09462 sec, and warnIfPerfScore > 1, and perfScore=0.990126]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.5737 secs, and comparison 3.45677 sec, and warnIfPerfScore > 0.5, and perfScore=0.525848]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 6.67992 secs, and comparison 4.69007 sec, and warnIfPerfScore > 0.68, and perfScore=0.702115]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.59789 secs, and comparison 28.1537 sec, and warnIfPerfScore > 4.3, and perfScore=3.27449]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.20795 secs, and comparison 30.5797 sec, and warnIfPerfScore > 4, and perfScore=3.32101]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 7.42721 secs, and comparison 107.861 sec, and warnIfPerfScore > 10.4, and perfScore=14.5224]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.50504 secs, and comparison 13.1413 sec, and warnIfPerfScore > 3.2, and perfScore=1.38256]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.95031 secs, and comparison 5.76798 sec, and warnIfPerfScore > 1.8, and perfScore=0.969358]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.96615 secs, and comparison 13.2693 sec, and warnIfPerfScore > 2.8, and perfScore=3.34565]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 4.994 secs, and comparison 22.9332 sec, and warnIfPerfScore > 3.3, and perfScore=4.59214]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.21716 secs, and comparison 2.37055 sec, and warnIfPerfScore > 0.25, and perfScore=0.454377]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.69735 secs, and comparison 5.20632 sec, and warnIfPerfScore > 1.4, and perfScore=1.10835]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 5.33538 secs, and comparison 25.6033 sec, and warnIfPerfScore > 7.7, and perfScore=4.79877]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 9.54426 secs, and comparison 2.88245 sec, and warnIfPerfScore > 1.55, and perfScore=0.302008]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 5.09053 secs, and comparison 64.739 sec, and warnIfPerfScore > 7.7, and perfScore=12.7175]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.1386 secs, and comparison 5.49023 sec, and warnIfPerfScore > 1, and perfScore=0.541516]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.4
	DETAILS:         	[baseline test 7.60997 secs, and comparison 56.2277 sec, and warnIfPerfScore > 7.9, and perfScore=7.3887]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 12.0873 secs, and comparison 5.56932 sec, and warnIfPerfScore > 0.8, and perfScore=0.46076]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.8773 secs, and comparison 13.3125 sec, and warnIfPerfScore > 1.7, and perfScore=1.22388]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 20.2565 secs, and comparison 4.70583 sec, and warnIfPerfScore > 0.55, and perfScore=0.232313]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.80964 sec, and warnIfPerfScore > 0.4, and perfScore=0.120643]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.09345 sec, and warnIfPerfScore > 1.1, and perfScore=0.20623]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 14 seconds]]]

Succeeded
