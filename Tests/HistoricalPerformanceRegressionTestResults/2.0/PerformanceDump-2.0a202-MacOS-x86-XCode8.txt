Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/8/17 8:00:18]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.01341 secs, and comparison 5.20646 sec, and warnIfPerfScore > 0.62, and perfScore=0.742358]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.04746 secs, and comparison 3.20554 sec, and warnIfPerfScore > 0.65, and perfScore=0.45485]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.4818 secs, and comparison 11.5361 sec, and warnIfPerfScore > 1, and perfScore=0.745141]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 12.0294 secs, and comparison 9.62939 sec, and warnIfPerfScore > 1.15, and perfScore=0.800485]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 21.8008 secs, and comparison 3.59337 sec, and warnIfPerfScore > 0.5, and perfScore=0.164828]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.1431 secs, and comparison 5.3754 sec, and warnIfPerfScore > 0.68, and perfScore=0.205615]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 20.7516 secs, and comparison 67.9044 sec, and warnIfPerfScore > 4.3, and perfScore=3.27225]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 21.5778 secs, and comparison 71.5534 sec, and warnIfPerfScore > 4, and perfScore=3.31607]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.6486 secs, and comparison 140.792 sec, and warnIfPerfScore > 10.4, and perfScore=10.3155]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.6833 secs, and comparison 33.7663 sec, and warnIfPerfScore > 3.2, and perfScore=1.55725]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4253 secs, and comparison 7.27495 sec, and warnIfPerfScore > 1.8, and perfScore=0.697815]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 18.2888 secs, and comparison 43.6761 sec, and warnIfPerfScore > 2.8, and perfScore=2.38813]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.5261 secs, and comparison 29.7989 sec, and warnIfPerfScore > 3.3, and perfScore=2.20306]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.8367 secs, and comparison 3.32391 sec, and warnIfPerfScore > 0.25, and perfScore=0.240224]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.9551 secs, and comparison 20.3548 sec, and warnIfPerfScore > 1.25, and perfScore=1.02003]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 16.2218 secs, and comparison 46.5739 sec, and warnIfPerfScore > 7.7, and perfScore=2.87107]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.0525 secs, and comparison 4.62675 sec, and warnIfPerfScore > 1.55, and perfScore=0.307375]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.1058 secs, and comparison 43.6693 sec, and warnIfPerfScore > 7.7, and perfScore=2.71139]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.1951 secs, and comparison 4.67568 sec, and warnIfPerfScore > 1.4, and perfScore=0.307709]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 12.8126 secs, and comparison 65.8309 sec, and warnIfPerfScore > 7.9, and perfScore=5.13798]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.2616 secs, and comparison 6.99358 sec, and warnIfPerfScore > 0.8, and perfScore=0.527355]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.7959 secs, and comparison 38.2697 sec, and warnIfPerfScore > 1.7, and perfScore=1.1669]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.93761 secs, and comparison 4.92303 sec, and warnIfPerfScore > 0.55, and perfScore=0.997048]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.44415 sec, and warnIfPerfScore > 0.4, and perfScore=0.362943]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.04607 sec, and warnIfPerfScore > 1.1, and perfScore=0.269738]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 32 seconds]]]

Succeeded
