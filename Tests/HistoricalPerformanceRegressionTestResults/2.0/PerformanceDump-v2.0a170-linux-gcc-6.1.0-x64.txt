Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/18/16 20:55:20]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.63886 secs, and comparison 4.42031 sec, and warnIfPerfScore > 0.62, and perfScore=0.783901]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.62687 secs, and comparison 2.8424 sec, and warnIfPerfScore > 0.65, and perfScore=0.505148]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.62165 secs, and comparison 8.70317 sec, and warnIfPerfScore > 1, and perfScore=1.00945]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 8.31548 secs, and comparison 8.05565 sec, and warnIfPerfScore > 1.15, and perfScore=0.968753]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.13633 secs, and comparison 2.87404 sec, and warnIfPerfScore > 0.5, and perfScore=0.468365]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.63
	DETAILS:         	[baseline test 7.69086 secs, and comparison 4.83782 sec, and warnIfPerfScore > 0.68, and perfScore=0.629035]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.3914 secs, and comparison 34.2384 sec, and warnIfPerfScore > 4.3, and perfScore=3.29489]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 10.9907 secs, and comparison 35.0248 sec, and warnIfPerfScore > 4, and perfScore=3.18677]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.95259 secs, and comparison 106.69 sec, and warnIfPerfScore > 10.2, and perfScore=11.9173]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.9982 secs, and comparison 14.4292 sec, and warnIfPerfScore > 3.2, and perfScore=1.20261]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.89973 secs, and comparison 6.001 sec, and warnIfPerfScore > 1.7, and perfScore=1.01717]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 8.41138 secs, and comparison 19.8807 sec, and warnIfPerfScore > 2.8, and perfScore=2.36354]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 7.04524 secs, and comparison 31.6628 sec, and warnIfPerfScore > 3.3, and perfScore=4.49422]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 7.40036 secs, and comparison 2.58618 sec, and warnIfPerfScore > 0.22, and perfScore=0.349466]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.73388 secs, and comparison 6.32037 sec, and warnIfPerfScore > 1.25, and perfScore=1.10229]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.21062 secs, and comparison 33.2513 sec, and warnIfPerfScore > 7.7, and perfScore=3.61011]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.79766 secs, and comparison 3.70556 sec, and warnIfPerfScore > 1.55, and perfScore=0.475214]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.17209 secs, and comparison 33.3278 sec, and warnIfPerfScore > 7.7, and perfScore=3.63361]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.86094 secs, and comparison 3.72292 sec, and warnIfPerfScore > 1.4, and perfScore=0.473598]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.7
	DETAILS:         	[baseline test 6.4671 secs, and comparison 62.5642 sec, and warnIfPerfScore > 7.9, and perfScore=9.67423]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.50193 secs, and comparison 6.24108 sec, and warnIfPerfScore > 0.8, and perfScore=0.83193]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.9105 secs, and comparison 14.6171 sec, and warnIfPerfScore > 1.7, and perfScore=1.13219]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.3416 secs, and comparison 4.20169 sec, and warnIfPerfScore > 0.55, and perfScore=0.257117]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43981 sec, and warnIfPerfScore > 0.4, and perfScore=0.0959875]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.64362 sec, and warnIfPerfScore > 1.1, and perfScore=0.242908]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 53 seconds]]]

Succeeded
