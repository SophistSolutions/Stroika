Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 11/26/17 15:40:52]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.2099 secs, and comparison 6.30253 sec, and warnIfPerfScore > 0.62, and perfScore=0.516184]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.1457 secs, and comparison 4.34613 sec, and warnIfPerfScore > 0.65, and perfScore=0.357834]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.3293 secs, and comparison 10.66 sec, and warnIfPerfScore > 1.05, and perfScore=0.864608]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.9906 secs, and comparison 3.85466 sec, and warnIfPerfScore > 0.5, and perfScore=0.350724]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.9404 secs, and comparison 4.76991 sec, and warnIfPerfScore > 0.68, and perfScore=0.435991]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.5062 secs, and comparison 31.6401 sec, and warnIfPerfScore > 4.3, and perfScore=2.52996]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 13.2621 secs, and comparison 34.1179 sec, and warnIfPerfScore > 4, and perfScore=2.57259]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 12.4097 secs, and comparison 110.781 sec, and warnIfPerfScore > 10.4, and perfScore=8.92692]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.3286 secs, and comparison 16.5759 sec, and warnIfPerfScore > 3.2, and perfScore=1.34451]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.063 secs, and comparison 15.0463 sec, and warnIfPerfScore > 1.8, and perfScore=1.24732]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.32313 secs, and comparison 14.9262 sec, and warnIfPerfScore > 2.8, and perfScore=1.60099]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.5613 secs, and comparison 38.2494 sec, and warnIfPerfScore > 3.3, and perfScore=2.82048]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.1917 secs, and comparison 3.18002 sec, and warnIfPerfScore > 0.25, and perfScore=0.224077]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 14.6656 secs, and comparison 13.8787 sec, and warnIfPerfScore > 1.4, and perfScore=0.946342]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.1502 secs, and comparison 39.013 sec, and warnIfPerfScore > 7.7, and perfScore=2.96672]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.2922 secs, and comparison 5.60907 sec, and warnIfPerfScore > 1.55, and perfScore=0.366792]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 12.4282 secs, and comparison 76.5054 sec, and warnIfPerfScore > 7.7, and perfScore=6.1558]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15.0899 secs, and comparison 6.9516 sec, and warnIfPerfScore > 1, and perfScore=0.460678]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 16.3529 secs, and comparison 66.7801 sec, and warnIfPerfScore > 7.9, and perfScore=4.08368]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 15.1637 secs, and comparison 7.47644 sec, and warnIfPerfScore > 0.8, and perfScore=0.493048]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.9043 secs, and comparison 15.9322 sec, and warnIfPerfScore > 1.7, and perfScore=1.23465]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.1392 secs, and comparison 4.95229 sec, and warnIfPerfScore > 0.55, and perfScore=0.407958]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.88851 sec, and warnIfPerfScore > 0.4, and perfScore=0.192567]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.50865 sec, and warnIfPerfScore > 1.1, and perfScore=0.367244]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.4871 secs, and comparison 18.628 sec, and warnIfPerfScore > 2.4, and perfScore=1.38118]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.3331 secs, and comparison 23.6495 sec, and warnIfPerfScore > 2.8, and perfScore=1.77374]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 56 seconds]]]

Succeeded
