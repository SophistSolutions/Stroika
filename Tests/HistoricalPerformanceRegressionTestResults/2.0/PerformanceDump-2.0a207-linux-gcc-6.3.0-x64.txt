Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/8/17 9:53:48]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.38369 secs, and comparison 4.21479 sec, and warnIfPerfScore > 0.62, and perfScore=0.782881]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.34546 secs, and comparison 2.66539 sec, and warnIfPerfScore > 0.65, and perfScore=0.498626]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.14523 secs, and comparison 8.2973 sec, and warnIfPerfScore > 1, and perfScore=1.01867]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.82492 secs, and comparison 7.67303 sec, and warnIfPerfScore > 1.15, and perfScore=0.980588]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.45065 secs, and comparison 2.80402 sec, and warnIfPerfScore > 0.5, and perfScore=0.514437]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.64793 secs, and comparison 4.60287 sec, and warnIfPerfScore > 0.68, and perfScore=0.692375]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 9.44332 secs, and comparison 34.0415 sec, and warnIfPerfScore > 4.3, and perfScore=3.60482]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 9.98222 secs, and comparison 35.0584 sec, and warnIfPerfScore > 4, and perfScore=3.51209]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 7.17702 secs, and comparison 95.1128 sec, and warnIfPerfScore > 10.4, and perfScore=13.2524]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.7701 secs, and comparison 13.7604 sec, and warnIfPerfScore > 3.2, and perfScore=1.27765]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.14798 secs, and comparison 4.93314 sec, and warnIfPerfScore > 1.8, and perfScore=0.958268]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 5.59728 secs, and comparison 20.4475 sec, and warnIfPerfScore > 2.8, and perfScore=3.65312]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 6.09447 secs, and comparison 29.7668 sec, and warnIfPerfScore > 3.3, and perfScore=4.88422]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 6.1674 secs, and comparison 2.55909 sec, and warnIfPerfScore > 0.25, and perfScore=0.414938]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.51475 secs, and comparison 6.14091 sec, and warnIfPerfScore > 1.25, and perfScore=1.11354]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.03019 secs, and comparison 30.4866 sec, and warnIfPerfScore > 7.7, and perfScore=3.37608]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.77845 secs, and comparison 3.28143 sec, and warnIfPerfScore > 1.55, and perfScore=0.421862]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.90115 secs, and comparison 28.4758 sec, and warnIfPerfScore > 7.7, and perfScore=3.19911]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.84855 secs, and comparison 3.31011 sec, and warnIfPerfScore > 1.4, and perfScore=0.421748]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 6.34502 secs, and comparison 57.9344 sec, and warnIfPerfScore > 7.9, and perfScore=9.13068]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.45037 secs, and comparison 5.97228 sec, and warnIfPerfScore > 0.8, and perfScore=0.801609]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1394 secs, and comparison 13.5385 sec, and warnIfPerfScore > 1.7, and perfScore=1.21537]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.8708 secs, and comparison 4.20348 sec, and warnIfPerfScore > 0.55, and perfScore=0.264857]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.51264 sec, and warnIfPerfScore > 0.4, and perfScore=0.100843]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.52173 sec, and warnIfPerfScore > 1.1, and perfScore=0.234782]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 4 seconds]]]

Succeeded
