Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 11/21/17 8:51:41]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.4671 secs, and comparison 6.43754 sec, and warnIfPerfScore > 0.62, and perfScore=0.516362]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.3774 secs, and comparison 4.52475 sec, and warnIfPerfScore > 0.65, and perfScore=0.365567]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.6355 secs, and comparison 10.8325 sec, and warnIfPerfScore > 1.05, and perfScore=0.857301]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.0739 secs, and comparison 4.00623 sec, and warnIfPerfScore > 0.5, and perfScore=0.361772]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 11.0628 secs, and comparison 4.89943 sec, and warnIfPerfScore > 0.68, and perfScore=0.442872]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 12.4686 secs, and comparison 32.0823 sec, and warnIfPerfScore > 4.3, and perfScore=2.57305]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.8724 secs, and comparison 34.9558 sec, and warnIfPerfScore > 4, and perfScore=2.71556]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 12.5225 secs, and comparison 113.506 sec, and warnIfPerfScore > 10.4, and perfScore=9.06417]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.4361 secs, and comparison 17.092 sec, and warnIfPerfScore > 3.2, and perfScore=1.37439]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.2764 secs, and comparison 16.2313 sec, and warnIfPerfScore > 1.8, and perfScore=1.22257]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.45026 secs, and comparison 15.5144 sec, and warnIfPerfScore > 2.8, and perfScore=1.64169]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.0075 secs, and comparison 39.1218 sec, and warnIfPerfScore > 3.3, and perfScore=2.79293]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.5328 secs, and comparison 3.25201 sec, and warnIfPerfScore > 0.25, and perfScore=0.223771]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.8877 secs, and comparison 14.4365 sec, and warnIfPerfScore > 1.4, and perfScore=0.969696]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 13.6101 secs, and comparison 39.7501 sec, and warnIfPerfScore > 7.7, and perfScore=2.92063]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15.7875 secs, and comparison 5.71909 sec, and warnIfPerfScore > 1.55, and perfScore=0.362254]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 13.0708 secs, and comparison 78.7607 sec, and warnIfPerfScore > 7.7, and perfScore=6.02568]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 15.863 secs, and comparison 7.1682 sec, and warnIfPerfScore > 1, and perfScore=0.451883]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 16.7728 secs, and comparison 68.6761 sec, and warnIfPerfScore > 7.9, and perfScore=4.09449]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 15.62 secs, and comparison 7.73325 sec, and warnIfPerfScore > 0.8, and perfScore=0.495086]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.3049 secs, and comparison 16.3854 sec, and warnIfPerfScore > 1.7, and perfScore=1.23153]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 12.2688 secs, and comparison 5.26245 sec, and warnIfPerfScore > 0.55, and perfScore=0.428929]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.00376 sec, and warnIfPerfScore > 0.4, and perfScore=0.20025]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.62338 sec, and warnIfPerfScore > 1.1, and perfScore=0.374892]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.0063 secs, and comparison 18.9375 sec, and warnIfPerfScore > 2.4, and perfScore=1.35207]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.6669 secs, and comparison 24.3639 sec, and warnIfPerfScore > 2.8, and perfScore=1.78269]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 19 seconds]]]

Succeeded
