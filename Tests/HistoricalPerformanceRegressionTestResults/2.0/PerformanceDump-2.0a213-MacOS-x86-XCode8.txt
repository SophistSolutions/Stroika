Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/10/17 0:05:06]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.14332 secs, and comparison 6.78595 sec, and warnIfPerfScore > 0.62, and perfScore=0.742175]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.1421 secs, and comparison 4.15728 sec, and warnIfPerfScore > 0.65, and perfScore=0.454741]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 16.0492 secs, and comparison 11.4869 sec, and warnIfPerfScore > 1, and perfScore=0.715732]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.67382 secs, and comparison 9.18373 sec, and warnIfPerfScore > 1.15, and perfScore=0.949339]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.8144 secs, and comparison 4.50682 sec, and warnIfPerfScore > 0.5, and perfScore=0.168075]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.1434 secs, and comparison 5.46979 sec, and warnIfPerfScore > 0.68, and perfScore=0.209223]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 18.5956 secs, and comparison 61.4178 sec, and warnIfPerfScore > 4.3, and perfScore=3.30281]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 20.2075 secs, and comparison 64.7168 sec, and warnIfPerfScore > 4, and perfScore=3.20261]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 15.6893 secs, and comparison 162.642 sec, and warnIfPerfScore > 10.4, and perfScore=10.3664]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 20.0698 secs, and comparison 31.6607 sec, and warnIfPerfScore > 3.2, and perfScore=1.57753]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.50735 secs, and comparison 5.9222 sec, and warnIfPerfScore > 1.8, and perfScore=0.696127]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 13.6296 secs, and comparison 31.6766 sec, and warnIfPerfScore > 2.8, and perfScore=2.3241]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.0599 secs, and comparison 25.3536 sec, and warnIfPerfScore > 3.3, and perfScore=2.10231]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.3805 secs, and comparison 2.88155 sec, and warnIfPerfScore > 0.25, and perfScore=0.232748]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.9499 secs, and comparison 18.3261 sec, and warnIfPerfScore > 1.35, and perfScore=1.02096]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.6891 secs, and comparison 32.3222 sec, and warnIfPerfScore > 7.7, and perfScore=2.76515]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4253 secs, and comparison 4.26071 sec, and warnIfPerfScore > 1.55, and perfScore=0.317364]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.291 secs, and comparison 75.1812 sec, and warnIfPerfScore > 7.7, and perfScore=6.65851]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 13.4107 secs, and comparison 6.61493 sec, and warnIfPerfScore > 1, and perfScore=0.493259]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7393 secs, and comparison 68.9943 sec, and warnIfPerfScore > 7.9, and perfScore=5.41586]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.1695 secs, and comparison 7.2606 sec, and warnIfPerfScore > 0.8, and perfScore=0.551321]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 32.3798 secs, and comparison 40.7656 sec, and warnIfPerfScore > 1.7, and perfScore=1.25898]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.52049 secs, and comparison 6.51913 sec, and warnIfPerfScore > 0.55, and perfScore=0.99979]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 15 secs, and comparison 5.93812 sec, and warnIfPerfScore > 0.4, and perfScore=0.395874]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.97846 sec, and warnIfPerfScore > 1.1, and perfScore=0.26523]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 29 seconds]]]

Succeeded
