Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/29/16 13:08:09]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.40288 secs, and comparison 4.26326 sec, and warnIfPerfScore > 0.6, and perfScore=0.789071]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.39981 secs, and comparison 2.45018 sec, and warnIfPerfScore > 0.42, and perfScore=0.453753]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.29763 secs, and comparison 8.22024 sec, and warnIfPerfScore > 0.97, and perfScore=0.990673]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 8.51484 secs, and comparison 7.75616 sec, and warnIfPerfScore > 1.15, and perfScore=0.910899]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.89237 secs, and comparison 2.71321 sec, and warnIfPerfScore > 0.5, and perfScore=0.460462]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.44981 secs, and comparison 4.54183 sec, and warnIfPerfScore > 0.68, and perfScore=0.609657]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.7269 secs, and comparison 29.0927 sec, and warnIfPerfScore > 4.3, and perfScore=3.33369]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.56581 secs, and comparison 30.6782 sec, and warnIfPerfScore > 4, and perfScore=3.20706]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.38576 secs, and comparison 97.6333 sec, and warnIfPerfScore > 9.1, and perfScore=11.6427]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.4383 secs, and comparison 12.9133 sec, and warnIfPerfScore > 3.2, and perfScore=1.12895]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.55241 secs, and comparison 5.45397 sec, and warnIfPerfScore > 1.7, and perfScore=0.982269]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 6.71515 secs, and comparison 19.1767 sec, and warnIfPerfScore > 2.8, and perfScore=2.85574]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 6.75247 secs, and comparison 32.2014 sec, and warnIfPerfScore > 3, and perfScore=4.76884]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.86492 secs, and comparison 2.47799 sec, and warnIfPerfScore > 0.22, and perfScore=0.360964]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.27115 secs, and comparison 5.90385 sec, and warnIfPerfScore > 1.25, and perfScore=1.12003]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.73779 secs, and comparison 31.5664 sec, and warnIfPerfScore > 7.7, and perfScore=3.61263]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.24583 secs, and comparison 3.48076 sec, and warnIfPerfScore > 1.55, and perfScore=0.48038]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.58203 secs, and comparison 31.1762 sec, and warnIfPerfScore > 7.7, and perfScore=3.63273]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.34025 secs, and comparison 3.51518 sec, and warnIfPerfScore > 1.4, and perfScore=0.478891]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 6.22177 secs, and comparison 55.7006 sec, and warnIfPerfScore > 7.9, and perfScore=8.95254]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.82131 secs, and comparison 5.43917 sec, and warnIfPerfScore > 0.8, and perfScore=0.797378]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.9349 secs, and comparison 13.2234 sec, and warnIfPerfScore > 1.7, and perfScore=1.10796]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.0256 secs, and comparison 3.586 sec, and warnIfPerfScore > 0.47, and perfScore=0.223766]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.089
	DETAILS:         	[baseline test 15 secs, and comparison 1.34077 sec, and warnIfPerfScore > 0.4, and perfScore=0.0893847]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.25523 sec, and warnIfPerfScore > 1.1, and perfScore=0.217015]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes]]]

