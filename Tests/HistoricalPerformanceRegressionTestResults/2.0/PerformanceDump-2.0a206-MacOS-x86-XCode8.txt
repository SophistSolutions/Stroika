Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/17/17 0:59:44]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.01383 secs, and comparison 5.20523 sec, and warnIfPerfScore > 0.62, and perfScore=0.742138]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 7.04835 secs, and comparison 3.23323 sec, and warnIfPerfScore > 0.65, and perfScore=0.458722]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.2235 secs, and comparison 11.4176 sec, and warnIfPerfScore > 1, and perfScore=0.750001]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 10.0194 secs, and comparison 9.7162 sec, and warnIfPerfScore > 1.15, and perfScore=0.969744]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 21.8517 secs, and comparison 3.58514 sec, and warnIfPerfScore > 0.5, and perfScore=0.164067]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.942 secs, and comparison 5.63569 sec, and warnIfPerfScore > 0.68, and perfScore=0.209179]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 20.313 secs, and comparison 68.2468 sec, and warnIfPerfScore > 4.3, and perfScore=3.35976]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 21.3094 secs, and comparison 68.4697 sec, and warnIfPerfScore > 4, and perfScore=3.21312]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 13.581 secs, and comparison 138.104 sec, and warnIfPerfScore > 10.4, and perfScore=10.169]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.2935 secs, and comparison 34.3164 sec, and warnIfPerfScore > 3.2, and perfScore=1.6116]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4661 secs, and comparison 7.33863 sec, and warnIfPerfScore > 1.8, and perfScore=0.701183]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 18.7619 secs, and comparison 44.1002 sec, and warnIfPerfScore > 2.8, and perfScore=2.35052]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 14.4878 secs, and comparison 29.616 sec, and warnIfPerfScore > 3.3, and perfScore=2.04419]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.3916 secs, and comparison 3.52149 sec, and warnIfPerfScore > 0.25, and perfScore=0.228792]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 20.0158 secs, and comparison 20.531 sec, and warnIfPerfScore > 1.25, and perfScore=1.02574]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.9513 secs, and comparison 44.1718 sec, and warnIfPerfScore > 7.7, and perfScore=2.76917]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.4587 secs, and comparison 4.5245 sec, and warnIfPerfScore > 1.55, and perfScore=0.312927]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.8436 secs, and comparison 43.6588 sec, and warnIfPerfScore > 7.7, and perfScore=2.7556]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.6086 secs, and comparison 4.56163 sec, and warnIfPerfScore > 1.4, and perfScore=0.312257]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.2
	DETAILS:         	[baseline test 12.7239 secs, and comparison 65.9247 sec, and warnIfPerfScore > 7.9, and perfScore=5.18119]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.257 secs, and comparison 6.9843 sec, and warnIfPerfScore > 0.8, and perfScore=0.52684]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.1507 secs, and comparison 39.6779 sec, and warnIfPerfScore > 1.7, and perfScore=1.23412]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.16895 secs, and comparison 5.08739 sec, and warnIfPerfScore > 0.55, and perfScore=0.984221]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.44628 sec, and warnIfPerfScore > 0.4, and perfScore=0.363086]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.9741 sec, and warnIfPerfScore > 1.1, and perfScore=0.26494]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 26 seconds]]]

Succeeded
