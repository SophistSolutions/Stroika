Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/29/18 9:00:15]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.4721 secs, and comparison 5.58887 sec, and warnIfPerfScore > 0.62, and perfScore=0.487169]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.2303 secs, and comparison 3.49257 sec, and warnIfPerfScore > 0.65, and perfScore=0.310994]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 11.8456 secs, and comparison 9.74743 sec, and warnIfPerfScore > 1.05, and perfScore=0.822876]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.91311 secs, and comparison 3.45671 sec, and warnIfPerfScore > 0.5, and perfScore=0.348701]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.9372 secs, and comparison 4.07268 sec, and warnIfPerfScore > 0.68, and perfScore=0.372369]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 11.7612 secs, and comparison 27.6635 sec, and warnIfPerfScore > 4.3, and perfScore=2.35209]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.8979 secs, and comparison 29.2085 sec, and warnIfPerfScore > 4, and perfScore=2.45492]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 10.6518 secs, and comparison 92.2365 sec, and warnIfPerfScore > 10.4, and perfScore=8.65925]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 10.4475 secs, and comparison 14.2303 sec, and warnIfPerfScore > 3.2, and perfScore=1.36207]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 9.74908 secs, and comparison 13.4676 sec, and warnIfPerfScore > 1.8, and perfScore=1.38142]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.8194 secs, and comparison 13.5705 sec, and warnIfPerfScore > 2.8, and perfScore=1.53871]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.7638 secs, and comparison 34.4251 sec, and warnIfPerfScore > 3.3, and perfScore=2.6971]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.098
	DETAILS:         	[baseline test 13.2 secs, and comparison 1.29302 sec, and warnIfPerfScore > 0.25, and perfScore=0.0979562]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.7685 secs, and comparison 14.4329 sec, and warnIfPerfScore > 1.4, and perfScore=1.3403]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.0986 secs, and comparison 36.0505 sec, and warnIfPerfScore > 7.7, and perfScore=3.2482]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.2486 secs, and comparison 5.06626 sec, and warnIfPerfScore > 1.55, and perfScore=0.413618]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 10.8214 secs, and comparison 70.1519 sec, and warnIfPerfScore > 7.7, and perfScore=6.48268]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 12.2464 secs, and comparison 6.0331 sec, and warnIfPerfScore > 1, and perfScore=0.492644]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 14.7225 secs, and comparison 60.408 sec, and warnIfPerfScore > 7.9, and perfScore=4.1031]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.269 secs, and comparison 6.67477 sec, and warnIfPerfScore > 0.8, and perfScore=0.503035]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.4958 secs, and comparison 14.5538 sec, and warnIfPerfScore > 1.7, and perfScore=1.26602]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.6146 secs, and comparison 4.47824 sec, and warnIfPerfScore > 0.55, and perfScore=0.306422]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.79892 sec, and warnIfPerfScore > 0.4, and perfScore=0.186595]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 5.00435 sec, and warnIfPerfScore > 1.1, and perfScore=0.333623]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.959 secs, and comparison 16.273 sec, and warnIfPerfScore > 2.4, and perfScore=1.25572]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.7638 secs, and comparison 32.754 sec, and warnIfPerfScore > 2.9, and perfScore=2.78429]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 7 seconds]]]

Succeeded
