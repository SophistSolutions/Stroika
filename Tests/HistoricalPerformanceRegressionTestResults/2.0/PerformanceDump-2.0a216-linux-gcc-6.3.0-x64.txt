Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/24/17 22:19:32]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.03795 secs, and comparison 5.48184 sec, and warnIfPerfScore > 0.62, and perfScore=0.778897]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.0187 secs, and comparison 3.48395 sec, and warnIfPerfScore > 0.65, and perfScore=0.496382]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.34019 secs, and comparison 8.36189 sec, and warnIfPerfScore > 1, and perfScore=1.0026]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.96841 secs, and comparison 3.42432 sec, and warnIfPerfScore > 0.5, and perfScore=0.491407]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.66
	DETAILS:         	[baseline test 6.89564 secs, and comparison 4.57064 sec, and warnIfPerfScore > 0.68, and perfScore=0.66283]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.80279 secs, and comparison 29.2056 sec, and warnIfPerfScore > 4.3, and perfScore=3.31776]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 10.1067 secs, and comparison 31.3753 sec, and warnIfPerfScore > 4, and perfScore=3.10442]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 8.90055 secs, and comparison 117.498 sec, and warnIfPerfScore > 10.4, and perfScore=13.2012]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.1389 secs, and comparison 12.8587 sec, and warnIfPerfScore > 3.2, and perfScore=1.26825]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.4338 secs, and comparison 6.21034 sec, and warnIfPerfScore > 1.8, and perfScore=0.965268]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 4.10909 secs, and comparison 13.5644 sec, and warnIfPerfScore > 2.8, and perfScore=3.30107]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 5.22015 secs, and comparison 25.8347 sec, and warnIfPerfScore > 3.3, and perfScore=4.94903]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 5.5233 secs, and comparison 2.29432 sec, and warnIfPerfScore > 0.25, and perfScore=0.41539]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.7738 secs, and comparison 5.37387 sec, and warnIfPerfScore > 1.4, and perfScore=1.1257]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.39446 secs, and comparison 22.9113 sec, and warnIfPerfScore > 7.7, and perfScore=3.58299]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 11.0772 secs, and comparison 3.18036 sec, and warnIfPerfScore > 1.55, and perfScore=0.28711]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 6.2525 secs, and comparison 62.3924 sec, and warnIfPerfScore > 7.7, and perfScore=9.9788]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.7023 secs, and comparison 5.66295 sec, and warnIfPerfScore > 1, and perfScore=0.483919]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 6.20197 secs, and comparison 56.7249 sec, and warnIfPerfScore > 7.9, and perfScore=9.14627]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 13.7404 secs, and comparison 5.87976 sec, and warnIfPerfScore > 0.8, and perfScore=0.427917]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.548 secs, and comparison 13.7077 sec, and warnIfPerfScore > 1.7, and perfScore=1.18702]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 21.7902 secs, and comparison 4.912 sec, and warnIfPerfScore > 0.55, and perfScore=0.225423]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.89223 sec, and warnIfPerfScore > 0.4, and perfScore=0.126149]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.4563 sec, and warnIfPerfScore > 1.1, and perfScore=0.23042]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 40 seconds]]]

Succeeded
