Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/23/18 14:17:05]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.74846 secs, and comparison 4.40346 sec, and warnIfPerfScore > 0.62, and perfScore=0.766024]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.74189 secs, and comparison 2.73936 sec, and warnIfPerfScore > 0.65, and perfScore=0.477084]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.47988 secs, and comparison 6.78005 sec, and warnIfPerfScore > 1.05, and perfScore=1.04632]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.75633 secs, and comparison 2.8596 sec, and warnIfPerfScore > 0.5, and perfScore=0.496775]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 5.80524 secs, and comparison 3.7741 sec, and warnIfPerfScore > 0.68, and perfScore=0.650119]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 7.24307 secs, and comparison 24.2768 sec, and warnIfPerfScore > 4.3, and perfScore=3.35173]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 7.70154 secs, and comparison 25.2256 sec, and warnIfPerfScore > 4, and perfScore=3.2754]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 7.23073 secs, and comparison 94.5519 sec, and warnIfPerfScore > 10.4, and perfScore=13.0764]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 7.83314 secs, and comparison 10.5391 sec, and warnIfPerfScore > 3.2, and perfScore=1.34544]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 7.05663 secs, and comparison 6.52341 sec, and warnIfPerfScore > 1.8, and perfScore=0.924438]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 3.38565 secs, and comparison 11.1115 sec, and warnIfPerfScore > 2.8, and perfScore=3.28194]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 4.32545 secs, and comparison 20.9756 sec, and warnIfPerfScore > 3.3, and perfScore=4.84936]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 4.5328 secs, and comparison 1.73859 sec, and warnIfPerfScore > 0.25, and perfScore=0.383557]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.95011 secs, and comparison 4.34494 sec, and warnIfPerfScore > 1.4, and perfScore=1.09995]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 4.09172 secs, and comparison 18.9668 sec, and warnIfPerfScore > 7.7, and perfScore=4.63541]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 19.0873 secs, and comparison 2.4479 sec, and warnIfPerfScore > 1.55, and perfScore=0.128247]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.98743 secs, and comparison 52.4961 sec, and warnIfPerfScore > 7.7, and perfScore=13.1654]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.2808 secs, and comparison 4.44703 sec, and warnIfPerfScore > 1, and perfScore=0.394211]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 5.26965 secs, and comparison 48.6353 sec, and warnIfPerfScore > 7.9, and perfScore=9.22933]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.7805 secs, and comparison 4.88113 sec, and warnIfPerfScore > 0.8, and perfScore=0.330242]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.64111 secs, and comparison 10.9918 sec, and warnIfPerfScore > 1.7, and perfScore=1.27203]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 6.71112 secs, and comparison 3.03938 sec, and warnIfPerfScore > 0.55, and perfScore=0.452887]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.51575 sec, and warnIfPerfScore > 0.4, and perfScore=0.10105]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.76449 sec, and warnIfPerfScore > 1.1, and perfScore=0.184299]
	                 	Test_Optional_ is FASTER

[[[Tests took: 8 minutes, 48 seconds]]]

Succeeded
