Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/15/17 11:21:24]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.40253 secs, and comparison 4.26445 sec, and warnIfPerfScore > 0.62, and perfScore=0.789343]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.4285 secs, and comparison 2.69596 sec, and warnIfPerfScore > 0.65, and perfScore=0.496631]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.24535 secs, and comparison 8.39251 sec, and warnIfPerfScore > 1, and perfScore=1.01785]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.95498 secs, and comparison 7.88791 sec, and warnIfPerfScore > 1.15, and perfScore=0.991569]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 5.39655 secs, and comparison 2.87717 sec, and warnIfPerfScore > 0.5, and perfScore=0.53315]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.81467 secs, and comparison 4.68349 sec, and warnIfPerfScore > 0.68, and perfScore=0.687266]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.90061 secs, and comparison 31.7825 sec, and warnIfPerfScore > 4.3, and perfScore=3.21016]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 10.4864 secs, and comparison 33.1231 sec, and warnIfPerfScore > 4, and perfScore=3.15869]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.4178 secs, and comparison 100.3 sec, and warnIfPerfScore > 10.4, and perfScore=13.5215]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.9694 secs, and comparison 13.6939 sec, and warnIfPerfScore > 3.2, and perfScore=1.24837]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.09473 secs, and comparison 5.03017 sec, and warnIfPerfScore > 1.8, and perfScore=0.987327]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 5.85365 secs, and comparison 18.9884 sec, and warnIfPerfScore > 2.8, and perfScore=3.24385]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	6.3
	DETAILS:         	[baseline test 5.81619 secs, and comparison 36.781 sec, and warnIfPerfScore > 3.3, and perfScore=6.3239]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 5.88287 secs, and comparison 2.32882 sec, and warnIfPerfScore > 0.25, and perfScore=0.395865]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.42053 secs, and comparison 5.99872 sec, and warnIfPerfScore > 1.25, and perfScore=1.10667]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.92383 secs, and comparison 29.9843 sec, and warnIfPerfScore > 7.7, and perfScore=3.36002]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 7.9889 secs, and comparison 3.20016 sec, and warnIfPerfScore > 1.55, and perfScore=0.400575]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.85639 secs, and comparison 29.669 sec, and warnIfPerfScore > 7.7, and perfScore=3.35001]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.9789 secs, and comparison 3.26871 sec, and warnIfPerfScore > 1.4, and perfScore=0.409669]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 6.27899 secs, and comparison 57.5037 sec, and warnIfPerfScore > 7.9, and perfScore=9.1581]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.43471 secs, and comparison 5.92386 sec, and warnIfPerfScore > 0.8, and perfScore=0.796785]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.9907 secs, and comparison 13.6904 sec, and warnIfPerfScore > 1.7, and perfScore=1.24563]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.8026 secs, and comparison 4.31741 sec, and warnIfPerfScore > 0.55, and perfScore=0.256948]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.60578 sec, and warnIfPerfScore > 0.4, and perfScore=0.107052]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.47734 sec, and warnIfPerfScore > 1.1, and perfScore=0.231823]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 15 seconds]]]

Succeeded
