Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/26/15 12:16:22]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.5204 secs, and comparison 6.7184 sec, and warnIfPerfScore > 0.5, and perfScore=0.462687]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.6855 secs, and comparison 4.42765 sec, and warnIfPerfScore > 0.35, and perfScore=0.301498]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 15.4102 secs, and comparison 12.1127 sec, and warnIfPerfScore > 0.89, and perfScore=0.786017]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.7989 secs, and comparison 14.4988 sec, and warnIfPerfScore > 1.15, and perfScore=0.979716]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 16.6492 secs, and comparison 3.57513 sec, and warnIfPerfScore > 0.5, and perfScore=0.214733]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 21.1968 secs, and comparison 4.70746 sec, and warnIfPerfScore > 0.68, and perfScore=0.222084]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.8294 secs, and comparison 43.2667 sec, and warnIfPerfScore > 4.3, and perfScore=2.57089]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.3423 secs, and comparison 43.9374 sec, and warnIfPerfScore > 4, and perfScore=2.68857]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 15.8787 secs, and comparison 106.91 sec, and warnIfPerfScore > 9.1, and perfScore=6.7329]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.6852 secs, and comparison 23.4227 sec, and warnIfPerfScore > 2.45, and perfScore=1.4933]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.4863 secs, and comparison 14.4506 sec, and warnIfPerfScore > 1.65, and perfScore=0.997531]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.4156 secs, and comparison 31.2521 sec, and warnIfPerfScore > 2.7, and perfScore=2.0273]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.2589 secs, and comparison 42.1711 sec, and warnIfPerfScore > 3, and perfScore=2.76371]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.458 secs, and comparison 1.73545 sec, and warnIfPerfScore > 0.14, and perfScore=0.112269]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 16.3898 secs, and comparison 16.1094 sec, and warnIfPerfScore > 1.25, and perfScore=0.982894]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.8788 secs, and comparison 36.2643 sec, and warnIfPerfScore > 7.7, and perfScore=2.28382]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.8687 secs, and comparison 4.83766 sec, and warnIfPerfScore > 1.55, and perfScore=0.325358]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 15.7989 secs, and comparison 35.2173 sec, and warnIfPerfScore > 7.7, and perfScore=2.22909]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 14.7321 secs, and comparison 4.78174 sec, and warnIfPerfScore > 1.4, and perfScore=0.324581]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 15.1574 secs, and comparison 59.0504 sec, and warnIfPerfScore > 7.9, and perfScore=3.89582]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.4462 secs, and comparison 6.75775 sec, and warnIfPerfScore > 0.8, and perfScore=0.467786]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.3357 secs, and comparison 19.3583 sec, and warnIfPerfScore > 1.6, and perfScore=1.2623]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.1113 secs, and comparison 4.17055 sec, and warnIfPerfScore > 0.32, and perfScore=0.275988]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.13709 sec, and warnIfPerfScore > 0.4, and perfScore=0.142473]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.89358 sec, and warnIfPerfScore > 1.1, and perfScore=0.326239]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.1668 secs, and comparison 22.1557 sec, and warnIfPerfScore > 2.4, and perfScore=1.4608]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.9368 secs, and comparison 28.0668 sec, and warnIfPerfScore > 2.8, and perfScore=1.87904]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 27 seconds]]]

