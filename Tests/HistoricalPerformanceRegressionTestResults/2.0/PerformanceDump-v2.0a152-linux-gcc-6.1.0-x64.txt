Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/27/16 15:55:32]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.40013 secs, and comparison 4.26507 sec, and warnIfPerfScore > 0.6, and perfScore=0.789809]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.38691 secs, and comparison 2.44812 sec, and warnIfPerfScore > 0.42, and perfScore=0.454457]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.28295 secs, and comparison 8.20162 sec, and warnIfPerfScore > 0.97, and perfScore=0.990181]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 8.66434 secs, and comparison 7.73508 sec, and warnIfPerfScore > 1.15, and perfScore=0.892749]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 5.87976 secs, and comparison 2.7219 sec, and warnIfPerfScore > 0.5, and perfScore=0.462927]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 7.42768 secs, and comparison 4.55895 sec, and warnIfPerfScore > 0.68, and perfScore=0.613779]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.71634 secs, and comparison 28.9838 sec, and warnIfPerfScore > 4.3, and perfScore=3.32522]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.06462 secs, and comparison 29.8128 sec, and warnIfPerfScore > 4, and perfScore=3.28892]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.1995 secs, and comparison 96.0826 sec, and warnIfPerfScore > 9.1, and perfScore=11.7181]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.4457 secs, and comparison 13.031 sec, and warnIfPerfScore > 3.2, and perfScore=1.13851]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.47245 secs, and comparison 5.56661 sec, and warnIfPerfScore > 1.7, and perfScore=1.01721]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 6.9237 secs, and comparison 20.7774 sec, and warnIfPerfScore > 2.8, and perfScore=3.00091]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 6.74026 secs, and comparison 32.7272 sec, and warnIfPerfScore > 3, and perfScore=4.85548]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.84594 secs, and comparison 2.41337 sec, and warnIfPerfScore > 0.22, and perfScore=0.352526]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.31867 secs, and comparison 6.0018 sec, and warnIfPerfScore > 1.25, and perfScore=1.12844]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.75892 secs, and comparison 31.9126 sec, and warnIfPerfScore > 7.7, and perfScore=3.64344]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.3408 secs, and comparison 3.52633 sec, and warnIfPerfScore > 1.55, and perfScore=0.480374]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.65355 secs, and comparison 31.4756 sec, and warnIfPerfScore > 7.7, and perfScore=3.6373]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.39442 secs, and comparison 3.56813 sec, and warnIfPerfScore > 1.4, and perfScore=0.482544]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 6.29592 secs, and comparison 56.3302 sec, and warnIfPerfScore > 7.9, and perfScore=8.94711]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.06021 secs, and comparison 5.81169 sec, and warnIfPerfScore > 0.8, and perfScore=0.82316]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.2938 secs, and comparison 13.6029 sec, and warnIfPerfScore > 1.7, and perfScore=1.10648]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.4647 secs, and comparison 3.70442 sec, and warnIfPerfScore > 0.47, and perfScore=0.224991]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 15 secs, and comparison 1.38685 sec, and warnIfPerfScore > 0.4, and perfScore=0.0924566]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.19435 sec, and warnIfPerfScore > 1.1, and perfScore=0.212956]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 4 seconds]]]

