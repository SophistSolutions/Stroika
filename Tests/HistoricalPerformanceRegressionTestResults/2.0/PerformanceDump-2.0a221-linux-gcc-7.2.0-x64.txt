Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/25/17 5:24:18]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 6.54049 secs, and comparison 5.39203 sec, and warnIfPerfScore > 0.62, and perfScore=0.824407]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.73721 secs, and comparison 3.37474 sec, and warnIfPerfScore > 0.65, and perfScore=0.500911]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.38639 secs, and comparison 7.85217 sec, and warnIfPerfScore > 1.05, and perfScore=1.06306]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 4.40045 secs, and comparison 3.16214 sec, and warnIfPerfScore > 0.5, and perfScore=0.718593]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.27689 secs, and comparison 4.35525 sec, and warnIfPerfScore > 0.68, and perfScore=0.825345]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 5.37436 secs, and comparison 23.8439 sec, and warnIfPerfScore > 4.3, and perfScore=4.4366]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 6.34774 secs, and comparison 26.6739 sec, and warnIfPerfScore > 4, and perfScore=4.20211]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	27
	DETAILS:         	[baseline test 8.24012 secs, and comparison 221.074 sec, and warnIfPerfScore > 10.4, and perfScore=26.829]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 5.70879 secs, and comparison 11.113 sec, and warnIfPerfScore > 3.2, and perfScore=1.94665]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.59039 secs, and comparison 6.449 sec, and warnIfPerfScore > 1.8, and perfScore=0.978546]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 2.99438 secs, and comparison 11.9474 sec, and warnIfPerfScore > 2.8, and perfScore=3.98996]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 6.24603 secs, and comparison 21.5572 sec, and warnIfPerfScore > 3.3, and perfScore=3.45134]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.3665 secs, and comparison 2.55127 sec, and warnIfPerfScore > 0.25, and perfScore=0.400733]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 3.19386 secs, and comparison 4.01021 sec, and warnIfPerfScore > 1.4, and perfScore=1.2556]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.9534 secs, and comparison 26.6551 sec, and warnIfPerfScore > 7.7, and perfScore=1.78255]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 13.3299 secs, and comparison 2.82299 sec, and warnIfPerfScore > 1.55, and perfScore=0.211779]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 14.976 secs, and comparison 61.5262 sec, and warnIfPerfScore > 7.7, and perfScore=4.10833]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.77888 secs, and comparison 5.54736 sec, and warnIfPerfScore > 1, and perfScore=0.56728]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 17.0281 secs, and comparison 53.9312 sec, and warnIfPerfScore > 7.9, and perfScore=3.16718]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.3183 secs, and comparison 5.49477 sec, and warnIfPerfScore > 0.8, and perfScore=0.485477]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.2785 secs, and comparison 12.8547 sec, and warnIfPerfScore > 1.7, and perfScore=1.25064]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.8794 secs, and comparison 3.77382 sec, and warnIfPerfScore > 0.55, and perfScore=0.189836]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.8079 sec, and warnIfPerfScore > 0.4, and perfScore=0.120527]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.20964 sec, and warnIfPerfScore > 1.1, and perfScore=0.213976]
	                 	Test_Optional_ is FASTER

[[[Tests took: 12 minutes, 4 seconds]]]

Succeeded
