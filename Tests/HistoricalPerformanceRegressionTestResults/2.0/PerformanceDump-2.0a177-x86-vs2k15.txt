Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/14/16 11:49:54]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.5852 secs, and comparison 5.68358 sec, and warnIfPerfScore > 0.62, and perfScore=0.536937]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.1009 secs, and comparison 4.67417 sec, and warnIfPerfScore > 0.65, and perfScore=0.462748]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 13.1041 secs, and comparison 11.3414 sec, and warnIfPerfScore > 1, and perfScore=0.865484]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.1921 secs, and comparison 13.9188 sec, and warnIfPerfScore > 1.15, and perfScore=0.980739]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.87544 secs, and comparison 3.15241 sec, and warnIfPerfScore > 0.5, and perfScore=0.319217]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 12.2941 secs, and comparison 4.70419 sec, and warnIfPerfScore > 0.68, and perfScore=0.382637]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.611 secs, and comparison 37.6827 sec, and warnIfPerfScore > 4.3, and perfScore=2.76855]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.5746 secs, and comparison 37.9002 sec, and warnIfPerfScore > 4, and perfScore=2.79199]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 11.3154 secs, and comparison 99.6057 sec, and warnIfPerfScore > 10.4, and perfScore=8.80269]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.929 secs, and comparison 21.3763 sec, and warnIfPerfScore > 3.2, and perfScore=1.43186]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 16.8327 secs, and comparison 16.1844 sec, and warnIfPerfScore > 1.7, and perfScore=0.961485]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.4069 secs, and comparison 27.8208 sec, and warnIfPerfScore > 2.8, and perfScore=1.80573]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 15.9939 secs, and comparison 47.443 sec, and warnIfPerfScore > 3.3, and perfScore=2.96632]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 16.37 secs, and comparison 3.26524 sec, and warnIfPerfScore > 0.22, and perfScore=0.199465]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.0038 secs, and comparison 16.9795 sec, and warnIfPerfScore > 1.25, and perfScore=0.998572]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 16.0891 secs, and comparison 15.7699 sec, and warnIfPerfScore > 7.7, and perfScore=0.980161]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15.375 secs, and comparison 3.77284 sec, and warnIfPerfScore > 1.55, and perfScore=0.245388]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 15.8017 secs, and comparison 15.5954 sec, and warnIfPerfScore > 7.7, and perfScore=0.986944]
	                 	Sequence_DoublyLinkedList<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 15.437 secs, and comparison 3.81 sec, and warnIfPerfScore > 1.4, and perfScore=0.24681]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 15.6691 secs, and comparison 45.14 sec, and warnIfPerfScore > 7.9, and perfScore=2.88083]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 14.3979 secs, and comparison 5.87035 sec, and warnIfPerfScore > 0.8, and perfScore=0.407723]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.9913 secs, and comparison 20.3829 sec, and warnIfPerfScore > 1.7, and perfScore=1.27463]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.6257 secs, and comparison 4.04613 sec, and warnIfPerfScore > 0.55, and perfScore=0.420346]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.15402 sec, and warnIfPerfScore > 0.4, and perfScore=0.143602]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.06183 sec, and warnIfPerfScore > 1.1, and perfScore=0.337456]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.623 secs, and comparison 23.5699 sec, and warnIfPerfScore > 2.4, and perfScore=1.41791]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.9565 secs, and comparison 28.5204 sec, and warnIfPerfScore > 2.8, and perfScore=1.78738]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 46 seconds]]]

Succeeded
