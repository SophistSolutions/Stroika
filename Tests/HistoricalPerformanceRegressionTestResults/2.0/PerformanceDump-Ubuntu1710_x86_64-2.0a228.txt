Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/29/18 12:24:31]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.71281 secs, and comparison 4.44206 sec, and warnIfPerfScore > 0.62, and perfScore=0.777562]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.68546 secs, and comparison 2.75296 sec, and warnIfPerfScore > 0.65, and perfScore=0.484211]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.15504 secs, and comparison 6.67967 sec, and warnIfPerfScore > 1.05, and perfScore=1.08524]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 3.61865 secs, and comparison 2.63426 sec, and warnIfPerfScore > 0.5, and perfScore=0.727968]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 4.22384 secs, and comparison 3.71369 sec, and warnIfPerfScore > 0.68, and perfScore=0.879223]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 13.8284 secs, and comparison 51.4378 sec, and warnIfPerfScore > 4.3, and perfScore=3.71972]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 15.6953 secs, and comparison 56.6196 sec, and warnIfPerfScore > 4, and perfScore=3.60743]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	28
	DETAILS:         	[baseline test 13.7032 secs, and comparison 378.292 sec, and warnIfPerfScore > 10.4, and perfScore=27.6062]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 5.19254 secs, and comparison 9.60528 sec, and warnIfPerfScore > 3.2, and perfScore=1.84982]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.52742 secs, and comparison 7.43713 sec, and warnIfPerfScore > 1.8, and perfScore=0.988006]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 2.16015 secs, and comparison 10.1295 sec, and warnIfPerfScore > 2.8, and perfScore=4.68925]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.88304 secs, and comparison 18.3234 sec, and warnIfPerfScore > 3.3, and perfScore=2.66211]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.42754 secs, and comparison 2.5073 sec, and warnIfPerfScore > 0.25, and perfScore=0.390087]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.54061 secs, and comparison 4.01031 sec, and warnIfPerfScore > 1.4, and perfScore=1.13266]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 26.4586 secs, and comparison 24.0481 sec, and warnIfPerfScore > 7.7, and perfScore=0.908895]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 11.1239 secs, and comparison 2.38252 sec, and warnIfPerfScore > 1.55, and perfScore=0.21418]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 25.168 secs, and comparison 53.2837 sec, and warnIfPerfScore > 7.7, and perfScore=2.11712]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.10724 secs, and comparison 4.55227 sec, and warnIfPerfScore > 1, and perfScore=0.561507]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 29.5727 secs, and comparison 48.8779 sec, and warnIfPerfScore > 7.9, and perfScore=1.6528]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 9.18996 secs, and comparison 4.87718 sec, and warnIfPerfScore > 0.8, and perfScore=0.530707]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.36918 secs, and comparison 10.6922 sec, and warnIfPerfScore > 1.7, and perfScore=1.27757]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.71585 secs, and comparison 2.25974 sec, and warnIfPerfScore > 0.55, and perfScore=0.336478]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.097
	DETAILS:         	[baseline test 15 secs, and comparison 1.45651 sec, and warnIfPerfScore > 0.4, and perfScore=0.0971003]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.65448 sec, and warnIfPerfScore > 1.1, and perfScore=0.176965]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 19 seconds]]]

Succeeded
