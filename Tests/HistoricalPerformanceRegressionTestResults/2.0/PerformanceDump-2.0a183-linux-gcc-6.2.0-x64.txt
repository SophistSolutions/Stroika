Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/2/16 8:38:18]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.42284 secs, and comparison 4.29635 sec, and warnIfPerfScore > 0.62, and perfScore=0.792269]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.58131 secs, and comparison 2.7572 sec, and warnIfPerfScore > 0.65, and perfScore=0.494006]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.31862 secs, and comparison 8.46681 sec, and warnIfPerfScore > 1, and perfScore=1.01781]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.91425 secs, and comparison 7.94183 sec, and warnIfPerfScore > 1.15, and perfScore=1.00349]
	                 	std::function is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.39891 secs, and comparison 2.79699 sec, and warnIfPerfScore > 0.5, and perfScore=0.518066]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.76577 secs, and comparison 4.7817 sec, and warnIfPerfScore > 0.68, and perfScore=0.706749]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.53763 secs, and comparison 32.6344 sec, and warnIfPerfScore > 4.3, and perfScore=3.42165]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 10.3315 secs, and comparison 33.5286 sec, and warnIfPerfScore > 4, and perfScore=3.24527]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.71434 secs, and comparison 111.665 sec, and warnIfPerfScore > 10.4, and perfScore=14.475]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.7115 secs, and comparison 13.7483 sec, and warnIfPerfScore > 3.2, and perfScore=1.28351]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 5.059 secs, and comparison 4.86763 sec, and warnIfPerfScore > 1.7, and perfScore=0.962173]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 5.66683 secs, and comparison 18.4787 sec, and warnIfPerfScore > 2.8, and perfScore=3.26086]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 5.90307 secs, and comparison 37.6726 sec, and warnIfPerfScore > 3.3, and perfScore=6.38186]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.10037 secs, and comparison 2.36307 sec, and warnIfPerfScore > 0.22, and perfScore=0.387365]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.46419 secs, and comparison 5.97583 sec, and warnIfPerfScore > 1.25, and perfScore=1.09363]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.97797 secs, and comparison 30.4329 sec, and warnIfPerfScore > 7.7, and perfScore=3.38973]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.87926 secs, and comparison 3.22682 sec, and warnIfPerfScore > 1.55, and perfScore=0.409533]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.79145 secs, and comparison 30.1238 sec, and warnIfPerfScore > 7.7, and perfScore=3.42649]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.99287 secs, and comparison 3.29789 sec, and warnIfPerfScore > 1.4, and perfScore=0.412604]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 6.25846 secs, and comparison 57.4141 sec, and warnIfPerfScore > 7.9, and perfScore=9.17384]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.45775 secs, and comparison 5.84103 sec, and warnIfPerfScore > 0.8, and perfScore=0.783216]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.0617 secs, and comparison 13.429 sec, and warnIfPerfScore > 1.7, and perfScore=1.21401]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.0728 secs, and comparison 4.22919 sec, and warnIfPerfScore > 0.55, and perfScore=0.247716]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.68384 sec, and warnIfPerfScore > 0.4, and perfScore=0.112256]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.55773 sec, and warnIfPerfScore > 1.1, and perfScore=0.237182]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 30 seconds]]]

Succeeded
