Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/4/18 15:46]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 6.21672 secs, and comparison 4.68834 sec, and warnIfPerfScore > 0.62, and perfScore=0.75415]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.12073 secs, and comparison 2.86713 sec, and warnIfPerfScore > 0.65, and perfScore=0.468429]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.8259 secs, and comparison 7.11306 sec, and warnIfPerfScore > 1.05, and perfScore=1.04207]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.96847 secs, and comparison 2.96014 sec, and warnIfPerfScore > 0.5, and perfScore=0.495964]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 6.24087 secs, and comparison 4.0133 sec, and warnIfPerfScore > 0.68, and perfScore=0.643068]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 9.55221 secs, and comparison 26.9673 sec, and warnIfPerfScore > 4.3, and perfScore=2.82315]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 8.70301 secs, and comparison 27.6262 sec, and warnIfPerfScore > 4, and perfScore=3.17433]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 7.52865 secs, and comparison 95.8186 sec, and warnIfPerfScore > 10.4, and perfScore=12.7272]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 8.96339 secs, and comparison 11.0927 sec, and warnIfPerfScore > 3.2, and perfScore=1.23756]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.45285 secs, and comparison 6.10852 sec, and warnIfPerfScore > 1.8, and perfScore=0.94664]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 3.89995 secs, and comparison 11.8164 sec, and warnIfPerfScore > 2.8, and perfScore=3.02988]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 5.03331 secs, and comparison 23.8958 sec, and warnIfPerfScore > 3.3, and perfScore=4.74754]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 4.82282 secs, and comparison 1.80193 sec, and warnIfPerfScore > 0.25, and perfScore=0.373625]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 4.00297 secs, and comparison 4.36308 sec, and warnIfPerfScore > 1.4, and perfScore=1.08996]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.77055 secs, and comparison 20.3648 sec, and warnIfPerfScore > 7.7, and perfScore=5.40102]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 16.8722 secs, and comparison 2.70098 sec, and warnIfPerfScore > 1.55, and perfScore=0.160085]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	16
	DETAILS:         	[baseline test 3.47689 secs, and comparison 55.0524 sec, and warnIfPerfScore > 7.7, and perfScore=15.8338]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.7026 secs, and comparison 4.67489 sec, and warnIfPerfScore > 1, and perfScore=0.436801]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 5.32174 secs, and comparison 51.2794 sec, and warnIfPerfScore > 7.9, and perfScore=9.63583]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 12.7182 secs, and comparison 5.13183 sec, and warnIfPerfScore > 0.8, and perfScore=0.403504]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.22541 secs, and comparison 11.6761 sec, and warnIfPerfScore > 1.7, and perfScore=1.26564]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.18693 secs, and comparison 3.63993 sec, and warnIfPerfScore > 0.55, and perfScore=0.506465]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.65223 sec, and warnIfPerfScore > 0.4, and perfScore=0.110149]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.89989 sec, and warnIfPerfScore > 1.1, and perfScore=0.193326]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 15 seconds]]]

Succeeded
