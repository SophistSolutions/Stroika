Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/1/17 11:06:14]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 15.0052 secs, and comparison 8.00457 sec, and warnIfPerfScore > 0.62, and perfScore=0.533454]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.869 secs, and comparison 5.78552 sec, and warnIfPerfScore > 0.65, and perfScore=0.417154]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 14.5011 secs, and comparison 12.353 sec, and warnIfPerfScore > 1, and perfScore=0.851867]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.5609 secs, and comparison 14.2416 sec, and warnIfPerfScore > 1.15, and perfScore=0.978074]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.3906 secs, and comparison 4.25324 sec, and warnIfPerfScore > 0.5, and perfScore=0.317628]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.3792 secs, and comparison 5.07996 sec, and warnIfPerfScore > 0.68, and perfScore=0.37969]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.2397 secs, and comparison 35.77 sec, and warnIfPerfScore > 4.3, and perfScore=2.512]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.2318 secs, and comparison 38.257 sec, and warnIfPerfScore > 4, and perfScore=2.68814]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 13.7357 secs, and comparison 122.015 sec, and warnIfPerfScore > 10.4, and perfScore=8.88302]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.948 secs, and comparison 20.8315 sec, and warnIfPerfScore > 3.2, and perfScore=1.3936]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.8149 secs, and comparison 17.4302 sec, and warnIfPerfScore > 1.8, and perfScore=1.36015]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.9664 secs, and comparison 20.2648 sec, and warnIfPerfScore > 2.8, and perfScore=1.56287]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.4078 secs, and comparison 40.9901 sec, and warnIfPerfScore > 3.3, and perfScore=2.84499]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 13.8825 secs, and comparison 2.12169 sec, and warnIfPerfScore > 0.25, and perfScore=0.152832]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.8657 secs, and comparison 16.0151 sec, and warnIfPerfScore > 1.25, and perfScore=1.15501]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 14.0441 secs, and comparison 42.3428 sec, and warnIfPerfScore > 7.7, and perfScore=3.01499]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 14.6358 secs, and comparison 6.12166 sec, and warnIfPerfScore > 1.55, and perfScore=0.418265]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.8
	DETAILS:         	[baseline test 13.4814 secs, and comparison 78.8205 sec, and warnIfPerfScore > 7.7, and perfScore=5.84663]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15.0921 secs, and comparison 7.02763 sec, and warnIfPerfScore > 1, and perfScore=0.465648]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 17.744 secs, and comparison 76.9529 sec, and warnIfPerfScore > 7.9, and perfScore=4.33685]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 15.9761 secs, and comparison 9.25164 sec, and warnIfPerfScore > 0.8, and perfScore=0.579094]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.6806 secs, and comparison 18.9701 sec, and warnIfPerfScore > 1.7, and perfScore=1.20979]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.8885 secs, and comparison 5.67142 sec, and warnIfPerfScore > 0.55, and perfScore=0.408354]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.36075 sec, and warnIfPerfScore > 0.4, and perfScore=0.22405]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.7228 sec, and warnIfPerfScore > 1.1, and perfScore=0.38152]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.5849 secs, and comparison 20.0688 sec, and warnIfPerfScore > 2.4, and perfScore=1.28771]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.864 secs, and comparison 26.3324 sec, and warnIfPerfScore > 2.8, and perfScore=1.77156]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 9 seconds]]]

Succeeded
