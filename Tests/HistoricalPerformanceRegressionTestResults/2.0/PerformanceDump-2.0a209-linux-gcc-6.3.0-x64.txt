Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/4/17 23:56:57]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 7.25615 secs, and comparison 5.6911 sec, and warnIfPerfScore > 0.62, and perfScore=0.784314]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 7.24045 secs, and comparison 3.62811 sec, and warnIfPerfScore > 0.65, and perfScore=0.501089]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.57125 secs, and comparison 8.68279 sec, and warnIfPerfScore > 1, and perfScore=1.01301]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 7.95267 secs, and comparison 7.64867 sec, and warnIfPerfScore > 1.15, and perfScore=0.961773]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 7.28285 secs, and comparison 3.7085 sec, and warnIfPerfScore > 0.5, and perfScore=0.509211]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 7.42947 secs, and comparison 4.77034 sec, and warnIfPerfScore > 0.68, and perfScore=0.642084]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 7.374 secs, and comparison 28.864 sec, and warnIfPerfScore > 4.3, and perfScore=3.91429]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.5076 secs, and comparison 31.2693 sec, and warnIfPerfScore > 4, and perfScore=3.67545]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 8.55558 secs, and comparison 121.259 sec, and warnIfPerfScore > 10.4, and perfScore=14.1731]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.0262 secs, and comparison 14.8642 sec, and warnIfPerfScore > 3.2, and perfScore=1.23598]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.67296 secs, and comparison 6.79189 sec, and warnIfPerfScore > 1.8, and perfScore=1.01782]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 4.98663 secs, and comparison 15.567 sec, and warnIfPerfScore > 2.8, and perfScore=3.12175]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 5.94856 secs, and comparison 28.6819 sec, and warnIfPerfScore > 3.3, and perfScore=4.82165]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 6.26386 secs, and comparison 2.68278 sec, and warnIfPerfScore > 0.25, and perfScore=0.428295]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.56113 secs, and comparison 6.27246 sec, and warnIfPerfScore > 1.25, and perfScore=1.12791]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 7.58034 secs, and comparison 27.1643 sec, and warnIfPerfScore > 7.7, and perfScore=3.58352]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 12.1467 secs, and comparison 3.2693 sec, and warnIfPerfScore > 1.55, and perfScore=0.269152]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 6.45077 secs, and comparison 64.8264 sec, and warnIfPerfScore > 7.7, and perfScore=10.0494]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 11.4628 secs, and comparison 5.95021 sec, and warnIfPerfScore > 1, and perfScore=0.519089]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 6.48668 secs, and comparison 58.5402 sec, and warnIfPerfScore > 7.9, and perfScore=9.02468]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.4702 secs, and comparison 6.0833 sec, and warnIfPerfScore > 0.8, and perfScore=0.451612]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.8123 secs, and comparison 14.387 sec, and warnIfPerfScore > 1.7, and perfScore=1.21797]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 20.922 secs, and comparison 5.27786 sec, and warnIfPerfScore > 0.55, and perfScore=0.252264]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 1.88683 sec, and warnIfPerfScore > 0.4, and perfScore=0.125789]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.56904 sec, and warnIfPerfScore > 1.1, and perfScore=0.237936]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 26 seconds]]]

Succeeded
