Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/22/17 13:36:57]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.15117 secs, and comparison 6.79282 sec, and warnIfPerfScore > 0.62, and perfScore=0.742291]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.15089 secs, and comparison 4.16101 sec, and warnIfPerfScore > 0.65, and perfScore=0.454711]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.2774 secs, and comparison 11.4995 sec, and warnIfPerfScore > 1, and perfScore=0.752712]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.092 secs, and comparison 4.4636 sec, and warnIfPerfScore > 0.5, and perfScore=0.164757]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 25.8436 secs, and comparison 5.41513 sec, and warnIfPerfScore > 0.68, and perfScore=0.209535]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 18.2587 secs, and comparison 60.9505 sec, and warnIfPerfScore > 4.3, and perfScore=3.33817]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 20.2927 secs, and comparison 64.2468 sec, and warnIfPerfScore > 4, and perfScore=3.166]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 15.5322 secs, and comparison 162.135 sec, and warnIfPerfScore > 10.4, and perfScore=10.4387]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.7308 secs, and comparison 31.6553 sec, and warnIfPerfScore > 3.2, and perfScore=1.60436]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.58939 secs, and comparison 5.92713 sec, and warnIfPerfScore > 1.8, and perfScore=0.690052]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.1389 secs, and comparison 31.5672 sec, and warnIfPerfScore > 2.8, and perfScore=2.40257]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.7261 secs, and comparison 25.2303 sec, and warnIfPerfScore > 3.3, and perfScore=2.15164]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 12.2736 secs, and comparison 2.89147 sec, and warnIfPerfScore > 0.25, and perfScore=0.235584]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.1041 secs, and comparison 18.7306 sec, and warnIfPerfScore > 1.4, and perfScore=1.03461]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 11.6737 secs, and comparison 33.654 sec, and warnIfPerfScore > 7.7, and perfScore=2.8829]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4417 secs, and comparison 4.35689 sec, and warnIfPerfScore > 1.55, and perfScore=0.324132]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.2019 secs, and comparison 75.2834 sec, and warnIfPerfScore > 7.7, and perfScore=6.72062]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 13.4204 secs, and comparison 6.90667 sec, and warnIfPerfScore > 1, and perfScore=0.514641]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.5
	DETAILS:         	[baseline test 12.5858 secs, and comparison 69.1241 sec, and warnIfPerfScore > 7.9, and perfScore=5.49224]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 13.1299 secs, and comparison 7.48093 sec, and warnIfPerfScore > 0.8, and perfScore=0.569765]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.8141 secs, and comparison 38.973 sec, and warnIfPerfScore > 1.7, and perfScore=1.18769]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 6.57947 secs, and comparison 6.49178 sec, and warnIfPerfScore > 0.55, and perfScore=0.986672]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.76473 sec, and warnIfPerfScore > 0.4, and perfScore=0.384316]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.98085 sec, and warnIfPerfScore > 1.1, and perfScore=0.26539]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 6 seconds]]]

Succeeded
