Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/27/17 14:10:21]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.2205 secs, and comparison 5.62885 sec, and warnIfPerfScore > 0.62, and perfScore=0.550742]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.2524 secs, and comparison 4.39831 sec, and warnIfPerfScore > 0.65, and perfScore=0.429001]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 13.4894 secs, and comparison 11.8269 sec, and warnIfPerfScore > 1, and perfScore=0.876753]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 14.8061 secs, and comparison 14.4217 sec, and warnIfPerfScore > 1.15, and perfScore=0.974036]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.85854 secs, and comparison 3.27022 sec, and warnIfPerfScore > 0.5, and perfScore=0.331714]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.1399 secs, and comparison 4.94408 sec, and warnIfPerfScore > 0.68, and perfScore=0.407259]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.3226 secs, and comparison 39.6631 sec, and warnIfPerfScore > 4.3, and perfScore=2.76926]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.3377 secs, and comparison 39.5105 sec, and warnIfPerfScore > 4, and perfScore=2.96231]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.6
	DETAILS:         	[baseline test 11.2911 secs, and comparison 108.293 sec, and warnIfPerfScore > 10.4, and perfScore=9.59098]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.8748 secs, and comparison 21.339 sec, and warnIfPerfScore > 3.2, and perfScore=1.53796]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.9204 secs, and comparison 20.1726 sec, and warnIfPerfScore > 1.8, and perfScore=1.35201]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 15.5504 secs, and comparison 27.1131 sec, and warnIfPerfScore > 2.8, and perfScore=1.74357]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 14.5495 secs, and comparison 45.9915 sec, and warnIfPerfScore > 3.3, and perfScore=3.16104]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.8363 secs, and comparison 3.31018 sec, and warnIfPerfScore > 0.25, and perfScore=0.223114]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.6878 secs, and comparison 16.4458 sec, and warnIfPerfScore > 1.25, and perfScore=1.11969]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.1179 secs, and comparison 57.7212 sec, and warnIfPerfScore > 7.7, and perfScore=3.18586]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 14.669 secs, and comparison 6.33883 sec, and warnIfPerfScore > 1.55, and perfScore=0.432124]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 17.5469 secs, and comparison 57.2123 sec, and warnIfPerfScore > 7.7, and perfScore=3.26054]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.4565 secs, and comparison 6.38816 sec, and warnIfPerfScore > 1.4, and perfScore=0.441889]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 16.8164 secs, and comparison 70.6277 sec, and warnIfPerfScore > 7.9, and perfScore=4.19994]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 13.6247 secs, and comparison 8.19887 sec, and warnIfPerfScore > 0.8, and perfScore=0.601764]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.0731 secs, and comparison 17.0925 sec, and warnIfPerfScore > 1.7, and perfScore=1.30745]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.39958 secs, and comparison 4.14391 sec, and warnIfPerfScore > 0.55, and perfScore=0.440861]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.04031 sec, and warnIfPerfScore > 0.4, and perfScore=0.13602]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.42055 sec, and warnIfPerfScore > 1.1, and perfScore=0.36137]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.1427 secs, and comparison 22.5428 sec, and warnIfPerfScore > 2.4, and perfScore=1.39647]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 15.3951 secs, and comparison 28.5134 sec, and warnIfPerfScore > 2.8, and perfScore=1.85211]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 40 seconds]]]

Succeeded
