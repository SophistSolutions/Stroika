Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/27/16 15:03:29]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 10.3716 secs, and comparison 5.96872 sec, and warnIfPerfScore > 0.6, and perfScore=0.575485]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.3625 secs, and comparison 3.9631 sec, and warnIfPerfScore > 0.42, and perfScore=0.348787]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 13.5446 secs, and comparison 12.0269 sec, and warnIfPerfScore > 0.97, and perfScore=0.887946]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.1683 secs, and comparison 14.8151 sec, and warnIfPerfScore > 1.15, and perfScore=0.976713]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.3858 secs, and comparison 3.33538 sec, and warnIfPerfScore > 0.5, and perfScore=0.321148]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 13.1196 secs, and comparison 4.91503 sec, and warnIfPerfScore > 0.68, and perfScore=0.374632]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.603 secs, and comparison 36.6946 sec, and warnIfPerfScore > 4.3, and perfScore=2.51282]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.3508 secs, and comparison 37.2968 sec, and warnIfPerfScore > 4, and perfScore=2.59894]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 12.125 secs, and comparison 103.174 sec, and warnIfPerfScore > 9.1, and perfScore=8.50923]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.9179 secs, and comparison 20.2077 sec, and warnIfPerfScore > 3.2, and perfScore=1.35459]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 16.8306 secs, and comparison 16.3506 sec, and warnIfPerfScore > 1.7, and perfScore=0.97148]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 15.0012 secs, and comparison 23.9816 sec, and warnIfPerfScore > 2.8, and perfScore=1.59864]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 16.3234 secs, and comparison 47.364 sec, and warnIfPerfScore > 3, and perfScore=2.9016]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 16.5285 secs, and comparison 3.28099 sec, and warnIfPerfScore > 0.22, and perfScore=0.198505]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.316 secs, and comparison 17.2724 sec, and warnIfPerfScore > 1.25, and perfScore=1.12774]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.1356 secs, and comparison 41.519 sec, and warnIfPerfScore > 7.7, and perfScore=2.57313]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.3085 secs, and comparison 5.23865 sec, and warnIfPerfScore > 1.55, and perfScore=0.342206]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.9619 secs, and comparison 41.0264 sec, and warnIfPerfScore > 7.7, and perfScore=2.57027]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.4956 secs, and comparison 5.26204 sec, and warnIfPerfScore > 1.4, and perfScore=0.339583]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.5821 secs, and comparison 62.3372 sec, and warnIfPerfScore > 7.9, and perfScore=4.00057]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 14.2986 secs, and comparison 7.07525 sec, and warnIfPerfScore > 0.8, and perfScore=0.494822]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.8659 secs, and comparison 19.1489 sec, and warnIfPerfScore > 1.7, and perfScore=1.20692]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 9.31273 secs, and comparison 4.00532 sec, and warnIfPerfScore > 0.47, and perfScore=0.430091]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.12577 sec, and warnIfPerfScore > 0.4, and perfScore=0.141718]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.29197 sec, and warnIfPerfScore > 1.1, and perfScore=0.352798]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.1881 secs, and comparison 23.0548 sec, and warnIfPerfScore > 2.4, and perfScore=1.34132]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.8135 secs, and comparison 28.747 sec, and warnIfPerfScore > 2.8, and perfScore=1.81788]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 57 seconds]]]

