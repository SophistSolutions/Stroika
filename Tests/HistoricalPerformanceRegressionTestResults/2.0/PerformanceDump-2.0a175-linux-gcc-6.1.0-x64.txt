Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/2/16 21:45:43]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.59154 secs, and comparison 4.33849 sec, and warnIfPerfScore > 0.62, and perfScore=0.775903]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.6736 secs, and comparison 2.9181 sec, and warnIfPerfScore > 0.65, and perfScore=0.514328]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.95052 secs, and comparison 8.96344 sec, and warnIfPerfScore > 1, and perfScore=1.00144]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.47843 secs, and comparison 8.2977 sec, and warnIfPerfScore > 1.15, and perfScore=0.978684]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 6.46955 secs, and comparison 3.08689 sec, and warnIfPerfScore > 0.5, and perfScore=0.477141]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.00199 secs, and comparison 4.96712 sec, and warnIfPerfScore > 0.68, and perfScore=0.620736]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 11.0527 secs, and comparison 38.7525 sec, and warnIfPerfScore > 4.3, and perfScore=3.50615]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 11.1887 secs, and comparison 40.1114 sec, and warnIfPerfScore > 4, and perfScore=3.585]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 9.0562 secs, and comparison 115.027 sec, and warnIfPerfScore > 10.4, and perfScore=12.7014]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.1772 secs, and comparison 16.0822 sec, and warnIfPerfScore > 3.2, and perfScore=1.43884]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.75754 secs, and comparison 5.84323 sec, and warnIfPerfScore > 1.7, and perfScore=1.01488]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.80762 secs, and comparison 19.0353 sec, and warnIfPerfScore > 2.8, and perfScore=2.79617]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 6.86352 secs, and comparison 29.6862 sec, and warnIfPerfScore > 3.3, and perfScore=4.32522]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.89025 secs, and comparison 2.54161 sec, and warnIfPerfScore > 0.22, and perfScore=0.36887]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.44004 secs, and comparison 6.15366 sec, and warnIfPerfScore > 1.25, and perfScore=1.13118]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 8.92085 secs, and comparison 32.001 sec, and warnIfPerfScore > 7.7, and perfScore=3.58722]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.38014 secs, and comparison 3.57368 sec, and warnIfPerfScore > 1.55, and perfScore=0.48423]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 8.76434 secs, and comparison 32.9183 sec, and warnIfPerfScore > 7.7, and perfScore=3.75594]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.91318 secs, and comparison 3.79839 sec, and warnIfPerfScore > 1.4, and perfScore=0.480008]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.5
	DETAILS:         	[baseline test 6.50769 secs, and comparison 62.0017 sec, and warnIfPerfScore > 7.9, and perfScore=9.52745]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 8.26778 secs, and comparison 6.85843 sec, and warnIfPerfScore > 0.8, and perfScore=0.829536]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.6081 secs, and comparison 17.6737 sec, and warnIfPerfScore > 1.7, and perfScore=1.20986]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 17.865 secs, and comparison 4.61447 sec, and warnIfPerfScore > 0.55, and perfScore=0.258296]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.69546 sec, and warnIfPerfScore > 0.4, and perfScore=0.113031]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.88846 sec, and warnIfPerfScore > 1.1, and perfScore=0.259231]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 15 seconds]]]

Succeeded
