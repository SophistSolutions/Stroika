Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 11/24/17 23:42:40]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.81
	DETAILS:         	[baseline test 9.1149 secs, and comparison 7.36458 sec, and warnIfPerfScore > 0.62, and perfScore=0.807972]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.13045 secs, and comparison 4.16201 sec, and warnIfPerfScore > 0.65, and perfScore=0.455839]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.4245 secs, and comparison 11.5341 sec, and warnIfPerfScore > 1.05, and perfScore=0.747777]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.8612 secs, and comparison 4.46796 sec, and warnIfPerfScore > 0.5, and perfScore=0.166335]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.6614 secs, and comparison 5.4871 sec, and warnIfPerfScore > 0.68, and perfScore=0.205807]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.4358 secs, and comparison 57.4744 sec, and warnIfPerfScore > 4.3, and perfScore=3.11755]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.6082 secs, and comparison 60.7883 sec, and warnIfPerfScore > 4, and perfScore=3.10015]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.9
	DETAILS:         	[baseline test 15.4932 secs, and comparison 153.667 sec, and warnIfPerfScore > 10.4, and perfScore=9.91841]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.3671 secs, and comparison 30.7787 sec, and warnIfPerfScore > 3.2, and perfScore=1.58923]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 8.30495 secs, and comparison 5.93495 sec, and warnIfPerfScore > 1.8, and perfScore=0.714628]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.9228 secs, and comparison 31.7815 sec, and warnIfPerfScore > 2.8, and perfScore=2.45933]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.9059 secs, and comparison 25.8292 sec, and warnIfPerfScore > 3.3, and perfScore=2.16944]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.4351 secs, and comparison 3.4485 sec, and warnIfPerfScore > 0.25, and perfScore=0.277319]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.9613 secs, and comparison 18.5651 sec, and warnIfPerfScore > 1.4, and perfScore=1.03361]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.7774 secs, and comparison 32.1456 sec, and warnIfPerfScore > 7.7, and perfScore=2.72942]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.8132 secs, and comparison 3.86459 sec, and warnIfPerfScore > 1.55, and perfScore=0.357396]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.297 secs, and comparison 75.2208 sec, and warnIfPerfScore > 7.7, and perfScore=6.65849]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.8086 secs, and comparison 6.50637 sec, and warnIfPerfScore > 1, and perfScore=0.60196]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7508 secs, and comparison 68.6077 sec, and warnIfPerfScore > 7.9, and perfScore=5.38067]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8442 secs, and comparison 6.73683 sec, and warnIfPerfScore > 0.8, and perfScore=0.62124]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.4111 secs, and comparison 38.3236 sec, and warnIfPerfScore > 1.7, and perfScore=1.18242]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.73572 secs, and comparison 6.70476 sec, and warnIfPerfScore > 0.55, and perfScore=0.995403]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.84095 sec, and warnIfPerfScore > 0.4, and perfScore=0.389397]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.23381 sec, and warnIfPerfScore > 1.1, and perfScore=0.215588]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 40 seconds]]]

Succeeded
