Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/22/16 22:26:40]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.921 secs, and comparison 5.96846 sec, and warnIfPerfScore > 0.6, and perfScore=0.546512]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.7384 secs, and comparison 4.31487 sec, and warnIfPerfScore > 0.42, and perfScore=0.401818]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 17.1357 secs, and comparison 12.804 sec, and warnIfPerfScore > 0.97, and perfScore=0.747212]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 16.1812 secs, and comparison 16.0024 sec, and warnIfPerfScore > 1.15, and perfScore=0.988946]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 11.0948 secs, and comparison 3.49316 sec, and warnIfPerfScore > 0.5, and perfScore=0.314845]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.7306 secs, and comparison 5.21925 sec, and warnIfPerfScore > 0.68, and perfScore=0.380117]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.2372 secs, and comparison 39.0055 sec, and warnIfPerfScore > 4.3, and perfScore=2.55988]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 16.3268 secs, and comparison 39.7435 sec, and warnIfPerfScore > 4, and perfScore=2.43424]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.5
	DETAILS:         	[baseline test 14.0533 secs, and comparison 105.318 sec, and warnIfPerfScore > 9.1, and perfScore=7.49416]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.9112 secs, and comparison 20.4993 sec, and warnIfPerfScore > 3.2, and perfScore=1.37477]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 17.6091 secs, and comparison 17.1519 sec, and warnIfPerfScore > 1.7, and perfScore=0.974035]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 15.4141 secs, and comparison 25.4584 sec, and warnIfPerfScore > 2.8, and perfScore=1.65163]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 16.7651 secs, and comparison 49.7582 sec, and warnIfPerfScore > 3, and perfScore=2.96797]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 17.3006 secs, and comparison 3.55136 sec, and warnIfPerfScore > 0.22, and perfScore=0.205273]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 17.894 secs, and comparison 17.574 sec, and warnIfPerfScore > 1.25, and perfScore=0.982118]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 17.08 secs, and comparison 46.6127 sec, and warnIfPerfScore > 7.7, and perfScore=2.72908]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 16.2149 secs, and comparison 5.40173 sec, and warnIfPerfScore > 1.55, and perfScore=0.333133]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.866 secs, and comparison 46.2491 sec, and warnIfPerfScore > 7.7, and perfScore=2.74216]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 16.4974 secs, and comparison 5.5905 sec, and warnIfPerfScore > 1.4, and perfScore=0.338872]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 17.849 secs, and comparison 66.2177 sec, and warnIfPerfScore > 7.9, and perfScore=3.70988]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 15.6203 secs, and comparison 7.58974 sec, and warnIfPerfScore > 0.8, and perfScore=0.485891]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.2571 secs, and comparison 20.4124 sec, and warnIfPerfScore > 1.7, and perfScore=1.18284]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 10.1151 secs, and comparison 4.12116 sec, and warnIfPerfScore > 0.47, and perfScore=0.407427]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.25148 sec, and warnIfPerfScore > 0.4, and perfScore=0.150099]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.46064 sec, and warnIfPerfScore > 1.1, and perfScore=0.364043]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.9535 secs, and comparison 23.9408 sec, and warnIfPerfScore > 2.4, and perfScore=1.33349]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.6693 secs, and comparison 30.364 sec, and warnIfPerfScore > 2.8, and perfScore=1.82155]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 59 seconds]]]

