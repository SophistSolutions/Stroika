Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/24/17 22:37:55]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.7102 secs, and comparison 6.57059 sec, and warnIfPerfScore > 0.62, and perfScore=0.516955]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.8947 secs, and comparison 4.61063 sec, and warnIfPerfScore > 0.65, and perfScore=0.357559]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 13.1319 secs, and comparison 11.1227 sec, and warnIfPerfScore > 1, and perfScore=0.846993]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 12.3117 secs, and comparison 4.1746 sec, and warnIfPerfScore > 0.5, and perfScore=0.339076]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.9538 secs, and comparison 4.95909 sec, and warnIfPerfScore > 0.68, and perfScore=0.414856]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 13.393 secs, and comparison 34.6379 sec, and warnIfPerfScore > 4.3, and perfScore=2.58626]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.3884 secs, and comparison 35.9884 sec, and warnIfPerfScore > 4, and perfScore=2.68802]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 13.0667 secs, and comparison 117.963 sec, and warnIfPerfScore > 10.4, and perfScore=9.02775]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.1396 secs, and comparison 17.6742 sec, and warnIfPerfScore > 3.2, and perfScore=1.34511]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.9796 secs, and comparison 16.527 sec, and warnIfPerfScore > 1.8, and perfScore=1.18222]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.93499 secs, and comparison 15.6208 sec, and warnIfPerfScore > 2.8, and perfScore=1.5723]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.9308 secs, and comparison 39.9399 sec, and warnIfPerfScore > 3.3, and perfScore=2.67501]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15.439 secs, and comparison 3.32228 sec, and warnIfPerfScore > 0.25, and perfScore=0.215187]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 15.2782 secs, and comparison 15.0637 sec, and warnIfPerfScore > 1.4, and perfScore=0.985961]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 13.9761 secs, and comparison 40.6967 sec, and warnIfPerfScore > 7.7, and perfScore=2.91188]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.5353 secs, and comparison 5.77767 sec, and warnIfPerfScore > 1.55, and perfScore=0.371906]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 13.2667 secs, and comparison 79.4123 sec, and warnIfPerfScore > 7.7, and perfScore=5.98585]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15.4579 secs, and comparison 7.06388 sec, and warnIfPerfScore > 1, and perfScore=0.456977]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 16.8433 secs, and comparison 68.9263 sec, and warnIfPerfScore > 7.9, and perfScore=4.0922]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15.4307 secs, and comparison 7.80598 sec, and warnIfPerfScore > 0.8, and perfScore=0.505873]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.1135 secs, and comparison 16.8207 sec, and warnIfPerfScore > 1.7, and perfScore=1.19182]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.5244 secs, and comparison 5.23317 sec, and warnIfPerfScore > 0.55, and perfScore=0.417839]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.07311 sec, and warnIfPerfScore > 0.4, and perfScore=0.204874]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.63365 sec, and warnIfPerfScore > 1.1, and perfScore=0.375577]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.6658 secs, and comparison 18.6804 sec, and warnIfPerfScore > 2.4, and perfScore=1.27374]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.641 secs, and comparison 24.7512 sec, and warnIfPerfScore > 2.8, and perfScore=1.81448]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 44 seconds]]]

Succeeded
