Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/14/16 13:52:27]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.40658 secs, and comparison 4.26144 sec, and warnIfPerfScore > 0.62, and perfScore=0.788195]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.37899 secs, and comparison 2.69192 sec, and warnIfPerfScore > 0.65, and perfScore=0.500451]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 8.19729 secs, and comparison 9.24736 sec, and warnIfPerfScore > 1, and perfScore=1.1281]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 8.26068 secs, and comparison 8.0785 sec, and warnIfPerfScore > 1.15, and perfScore=0.977946]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 6.03063 secs, and comparison 2.74689 sec, and warnIfPerfScore > 0.5, and perfScore=0.45549]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 7.39718 secs, and comparison 4.47002 sec, and warnIfPerfScore > 0.68, and perfScore=0.604287]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 10.8946 secs, and comparison 34.3293 sec, and warnIfPerfScore > 4.3, and perfScore=3.15104]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 10.6333 secs, and comparison 36.1778 sec, and warnIfPerfScore > 4, and perfScore=3.40231]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.36684 secs, and comparison 103.037 sec, and warnIfPerfScore > 10.4, and perfScore=12.315]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.9424 secs, and comparison 14.133 sec, and warnIfPerfScore > 3.2, and perfScore=1.18343]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 6.93485 secs, and comparison 5.76337 sec, and warnIfPerfScore > 1.7, and perfScore=0.831075]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 6.8922 secs, and comparison 18.9847 sec, and warnIfPerfScore > 2.8, and perfScore=2.75452]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 6.88937 secs, and comparison 32.0485 sec, and warnIfPerfScore > 3.3, and perfScore=4.65187]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.87973 secs, and comparison 2.44185 sec, and warnIfPerfScore > 0.22, and perfScore=0.354933]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.48202 secs, and comparison 6.09061 sec, and warnIfPerfScore > 1.25, and perfScore=1.11102]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 9.08652 secs, and comparison 10.3292 sec, and warnIfPerfScore > 7.7, and perfScore=1.13676]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.56141 secs, and comparison 2.22706 sec, and warnIfPerfScore > 1.55, and perfScore=0.294529]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.99221 secs, and comparison 9.28049 sec, and warnIfPerfScore > 7.7, and perfScore=1.03206]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 7.54787 secs, and comparison 2.20211 sec, and warnIfPerfScore > 1.4, and perfScore=0.291752]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	6.8
	DETAILS:         	[baseline test 6.4188 secs, and comparison 43.8093 sec, and warnIfPerfScore > 7.9, and perfScore=6.82516]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 7.19074 secs, and comparison 4.7076 sec, and warnIfPerfScore > 0.8, and perfScore=0.654675]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.6196 secs, and comparison 14.0566 sec, and warnIfPerfScore > 1.7, and perfScore=1.11387]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15.9467 secs, and comparison 4.14351 sec, and warnIfPerfScore > 0.55, and perfScore=0.259835]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.093
	DETAILS:         	[baseline test 15 secs, and comparison 1.39933 sec, and warnIfPerfScore > 0.4, and perfScore=0.0932889]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.51709 sec, and warnIfPerfScore > 1.1, and perfScore=0.234472]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 34 seconds]]]

Succeeded
