Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/23/18 14:59:31]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.81803 secs, and comparison 6.1692 sec, and warnIfPerfScore > 0.62, and perfScore=0.699612]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.81732 secs, and comparison 4.15366 sec, and warnIfPerfScore > 0.65, and perfScore=0.471079]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 14.932 secs, and comparison 11.7838 sec, and warnIfPerfScore > 1.05, and perfScore=0.789168]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.0046 secs, and comparison 4.1975 sec, and warnIfPerfScore > 0.5, and perfScore=0.149886]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 27.9142 secs, and comparison 4.88443 sec, and warnIfPerfScore > 0.68, and perfScore=0.17498]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.9362 secs, and comparison 58.1452 sec, and warnIfPerfScore > 4.3, and perfScore=3.07059]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 20.0393 secs, and comparison 59.5383 sec, and warnIfPerfScore > 4, and perfScore=2.97108]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 16.2345 secs, and comparison 151.2 sec, and warnIfPerfScore > 10.4, and perfScore=9.31346]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.2735 secs, and comparison 30.7705 sec, and warnIfPerfScore > 3.2, and perfScore=1.51777]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.59396 secs, and comparison 5.92814 sec, and warnIfPerfScore > 1.8, and perfScore=0.689803]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.3187 secs, and comparison 31.8491 sec, and warnIfPerfScore > 2.8, and perfScore=2.3913]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 11.3507 secs, and comparison 22.804 sec, and warnIfPerfScore > 3.3, and perfScore=2.00904]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.5083 secs, and comparison 1.9125 sec, and warnIfPerfScore > 0.25, and perfScore=0.166184]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.4411 secs, and comparison 18.3421 sec, and warnIfPerfScore > 1.4, and perfScore=1.05166]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.1441 secs, and comparison 34.5779 sec, and warnIfPerfScore > 7.7, and perfScore=2.8473]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.9523 secs, and comparison 4.24998 sec, and warnIfPerfScore > 1.55, and perfScore=0.328126]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 11.6314 secs, and comparison 75.3582 sec, and warnIfPerfScore > 7.7, and perfScore=6.47885]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 12.9706 secs, and comparison 6.64895 sec, and warnIfPerfScore > 1, and perfScore=0.512619]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.2499 secs, and comparison 69.8725 sec, and warnIfPerfScore > 7.9, and perfScore=5.27345]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.8277 secs, and comparison 7.20331 sec, and warnIfPerfScore > 0.8, and perfScore=0.561541]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 29.8678 secs, and comparison 40.6301 sec, and warnIfPerfScore > 1.7, and perfScore=1.36033]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.51089 secs, and comparison 6.1537 sec, and warnIfPerfScore > 0.55, and perfScore=0.94514]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.24554 sec, and warnIfPerfScore > 0.4, and perfScore=0.483036]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78565 sec, and warnIfPerfScore > 1.1, and perfScore=0.18571]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 45 seconds]]]

Succeeded
