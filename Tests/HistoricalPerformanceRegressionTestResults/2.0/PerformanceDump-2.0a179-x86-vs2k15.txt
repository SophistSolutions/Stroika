Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/13/16 18:27:11]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.5474 secs, and comparison 5.95134 sec, and warnIfPerfScore > 0.62, and perfScore=0.564247]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.582 secs, and comparison 4.8451 sec, and warnIfPerfScore > 0.65, and perfScore=0.457863]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 13.8998 secs, and comparison 12.2826 sec, and warnIfPerfScore > 1, and perfScore=0.883653]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 15.3695 secs, and comparison 14.9237 sec, and warnIfPerfScore > 1.15, and perfScore=0.970995]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 11.0345 secs, and comparison 3.35074 sec, and warnIfPerfScore > 0.5, and perfScore=0.303661]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.5492 secs, and comparison 5.13319 sec, and warnIfPerfScore > 0.68, and perfScore=0.378855]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.7848 secs, and comparison 40.879 sec, and warnIfPerfScore > 4.3, and perfScore=2.76493]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.7259 secs, and comparison 40.6413 sec, and warnIfPerfScore > 4, and perfScore=2.75986]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 12.5682 secs, and comparison 106.248 sec, and warnIfPerfScore > 10.4, and perfScore=8.45366]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.5809 secs, and comparison 21.7715 sec, and warnIfPerfScore > 3.2, and perfScore=1.49316]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 16.9569 secs, and comparison 15.6434 sec, and warnIfPerfScore > 1.7, and perfScore=0.922541]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.3 secs, and comparison 27.7792 sec, and warnIfPerfScore > 2.8, and perfScore=1.81564]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 15.8982 secs, and comparison 47.7915 sec, and warnIfPerfScore > 3.3, and perfScore=3.00611]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 16.2462 secs, and comparison 3.43972 sec, and warnIfPerfScore > 0.22, and perfScore=0.211725]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 17.3874 secs, and comparison 16.6911 sec, and warnIfPerfScore > 1.25, and perfScore=0.959951]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 16.5977 secs, and comparison 57.6352 sec, and warnIfPerfScore > 7.7, and perfScore=3.47249]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15.5275 secs, and comparison 6.35679 sec, and warnIfPerfScore > 1.55, and perfScore=0.409389]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 16.2945 secs, and comparison 56.8973 sec, and warnIfPerfScore > 7.7, and perfScore=3.4918]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 15.6878 secs, and comparison 6.4488 sec, and warnIfPerfScore > 1.4, and perfScore=0.411071]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 15.9921 secs, and comparison 75.2892 sec, and warnIfPerfScore > 7.9, and perfScore=4.70789]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 14.8229 secs, and comparison 8.39643 sec, and warnIfPerfScore > 0.8, and perfScore=0.56645]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 16.3786 secs, and comparison 21.2754 sec, and warnIfPerfScore > 1.7, and perfScore=1.29898]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.85768 secs, and comparison 4.16354 sec, and warnIfPerfScore > 0.55, and perfScore=0.470049]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.1937 sec, and warnIfPerfScore > 0.4, and perfScore=0.146247]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.23117 sec, and warnIfPerfScore > 1.1, and perfScore=0.348745]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 17.3248 secs, and comparison 23.4562 sec, and warnIfPerfScore > 2.4, and perfScore=1.35391]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 15.8437 secs, and comparison 29.6416 sec, and warnIfPerfScore > 2.8, and perfScore=1.87088]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 12 seconds]]]

Succeeded
