Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/10/17 14:21:15]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 13.4875 secs, and comparison 7.56219 sec, and warnIfPerfScore > 0.62, and perfScore=0.560683]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.4926 secs, and comparison 5.70775 sec, and warnIfPerfScore > 0.65, and perfScore=0.423028]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 14.132 secs, and comparison 12.1377 sec, and warnIfPerfScore > 1, and perfScore=0.858879]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.3424 secs, and comparison 13.9978 sec, and warnIfPerfScore > 1.15, and perfScore=0.975972]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.171 secs, and comparison 4.19729 sec, and warnIfPerfScore > 0.5, and perfScore=0.318676]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.1603 secs, and comparison 5.06477 sec, and warnIfPerfScore > 0.68, and perfScore=0.384852]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 14.2483 secs, and comparison 35.9168 sec, and warnIfPerfScore > 4.3, and perfScore=2.52078]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.2127 secs, and comparison 38.0008 sec, and warnIfPerfScore > 4, and perfScore=2.67372]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 13.8853 secs, and comparison 118.508 sec, and warnIfPerfScore > 10.4, and perfScore=8.53473]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 14.4983 secs, and comparison 19.87 sec, and warnIfPerfScore > 3.2, and perfScore=1.3705]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.9659 secs, and comparison 15.6012 sec, and warnIfPerfScore > 1.8, and perfScore=1.30381]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 12.1609 secs, and comparison 19.1384 sec, and warnIfPerfScore > 2.8, and perfScore=1.57377]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.1849 secs, and comparison 39.9645 sec, and warnIfPerfScore > 3.3, and perfScore=2.81739]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 14.87 secs, and comparison 2.10202 sec, and warnIfPerfScore > 0.25, and perfScore=0.141359]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.4875 secs, and comparison 17.9564 sec, and warnIfPerfScore > 1.35, and perfScore=1.33134]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 13.4124 secs, and comparison 41.5438 sec, and warnIfPerfScore > 7.7, and perfScore=3.09742]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 13.9675 secs, and comparison 5.83309 sec, and warnIfPerfScore > 1.55, and perfScore=0.417617]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 13.2394 secs, and comparison 77.886 sec, and warnIfPerfScore > 7.7, and perfScore=5.88289]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 14.3481 secs, and comparison 6.83199 sec, and warnIfPerfScore > 1, and perfScore=0.476158]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 17.3172 secs, and comparison 70.7456 sec, and warnIfPerfScore > 7.9, and perfScore=4.08529]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 14.3119 secs, and comparison 8.3265 sec, and warnIfPerfScore > 0.8, and perfScore=0.581787]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.9091 secs, and comparison 17.2039 sec, and warnIfPerfScore > 1.7, and perfScore=1.23688]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.7702 secs, and comparison 5.19113 sec, and warnIfPerfScore > 0.55, and perfScore=0.406503]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.17631 sec, and warnIfPerfScore > 0.4, and perfScore=0.211754]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.40726 sec, and warnIfPerfScore > 1.1, and perfScore=0.360484]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.0052 secs, and comparison 18.6025 sec, and warnIfPerfScore > 2.4, and perfScore=1.32826]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.9821 secs, and comparison 25.0096 sec, and warnIfPerfScore > 2.8, and perfScore=1.78869]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 27 seconds]]]

Succeeded
