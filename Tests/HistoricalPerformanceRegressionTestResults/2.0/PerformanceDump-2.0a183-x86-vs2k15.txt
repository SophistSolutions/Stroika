Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/2/16 10:01:36]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.3621 secs, and comparison 5.81328 sec, and warnIfPerfScore > 0.62, and perfScore=0.561013]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.4178 secs, and comparison 4.72828 sec, and warnIfPerfScore > 0.65, and perfScore=0.453864]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 13.7868 secs, and comparison 12.017 sec, and warnIfPerfScore > 1, and perfScore=0.871636]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 17.128 secs, and comparison 14.8897 sec, and warnIfPerfScore > 1.15, and perfScore=0.869322]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.657 secs, and comparison 3.3854 sec, and warnIfPerfScore > 0.5, and perfScore=0.31767]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 13.1307 secs, and comparison 5.01675 sec, and warnIfPerfScore > 0.68, and perfScore=0.382062]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.3433 secs, and comparison 39.9719 sec, and warnIfPerfScore > 4.3, and perfScore=2.7868]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 15.7852 secs, and comparison 47.1063 sec, and warnIfPerfScore > 4, and perfScore=2.98421]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 14.1262 secs, and comparison 124.502 sec, and warnIfPerfScore > 10.4, and perfScore=8.81356]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 16.9804 secs, and comparison 25.2203 sec, and warnIfPerfScore > 3.2, and perfScore=1.48526]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.0153 secs, and comparison 24.1656 sec, and warnIfPerfScore > 1.7, and perfScore=1.27085]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.2993 secs, and comparison 32.3498 sec, and warnIfPerfScore > 2.8, and perfScore=1.76782]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 18.9174 secs, and comparison 55.5747 sec, and warnIfPerfScore > 3.3, and perfScore=2.93775]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 19.3091 secs, and comparison 3.85985 sec, and warnIfPerfScore > 0.22, and perfScore=0.199897]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.313 secs, and comparison 19.6548 sec, and warnIfPerfScore > 1.25, and perfScore=1.13526]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 18.7051 secs, and comparison 67.1634 sec, and warnIfPerfScore > 7.7, and perfScore=3.59064]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 18.3004 secs, and comparison 7.36482 sec, and warnIfPerfScore > 1.55, and perfScore=0.40244]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 18.4932 secs, and comparison 65.5636 sec, and warnIfPerfScore > 7.7, and perfScore=3.54527]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 18.2709 secs, and comparison 7.24592 sec, and warnIfPerfScore > 1.4, and perfScore=0.396583]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 17.9268 secs, and comparison 82.9885 sec, and warnIfPerfScore > 7.9, and perfScore=4.62929]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 16.8205 secs, and comparison 9.53512 sec, and warnIfPerfScore > 0.8, and perfScore=0.566875]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 19.0175 secs, and comparison 23.9007 sec, and warnIfPerfScore > 1.7, and perfScore=1.25677]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 11.1314 secs, and comparison 4.67996 sec, and warnIfPerfScore > 0.55, and perfScore=0.420429]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.55266 sec, and warnIfPerfScore > 0.4, and perfScore=0.170177]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15 secs, and comparison 6.25374 sec, and warnIfPerfScore > 1.1, and perfScore=0.416916]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 20.1688 secs, and comparison 26.4526 sec, and warnIfPerfScore > 2.4, and perfScore=1.31156]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 18.5236 secs, and comparison 33.4504 sec, and warnIfPerfScore > 2.8, and perfScore=1.80582]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 19 minutes, 27 seconds]]]

Succeeded
