Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/4/18 6:44:26]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.76162 secs, and comparison 4.4503 sec, and warnIfPerfScore > 0.62, and perfScore=0.772404]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.7549 secs, and comparison 2.76906 sec, and warnIfPerfScore > 0.65, and perfScore=0.481165]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.19091 secs, and comparison 6.69617 sec, and warnIfPerfScore > 1.05, and perfScore=1.08161]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 3.55808 secs, and comparison 2.74837 sec, and warnIfPerfScore > 0.5, and perfScore=0.772431]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.94
	DETAILS:         	[baseline test 4.11643 secs, and comparison 3.85436 sec, and warnIfPerfScore > 0.68, and perfScore=0.936337]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 13.3994 secs, and comparison 51.951 sec, and warnIfPerfScore > 4.3, and perfScore=3.87712]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 14.5195 secs, and comparison 56.4462 sec, and warnIfPerfScore > 4, and perfScore=3.88762]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	28
	DETAILS:         	[baseline test 13.6396 secs, and comparison 381.265 sec, and warnIfPerfScore > 10.4, and perfScore=27.9527]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.91981 secs, and comparison 9.8258 sec, and warnIfPerfScore > 3.2, and perfScore=1.99719]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.57294 secs, and comparison 7.51955 sec, and warnIfPerfScore > 1.8, and perfScore=0.99295]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 2.17488 secs, and comparison 10.4231 sec, and warnIfPerfScore > 2.8, and perfScore=4.79248]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 6.99142 secs, and comparison 19.0192 sec, and warnIfPerfScore > 3.3, and perfScore=2.72036]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.60709 secs, and comparison 2.58466 sec, and warnIfPerfScore > 0.25, and perfScore=0.391195]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.55793 secs, and comparison 4.02429 sec, and warnIfPerfScore > 1.4, and perfScore=1.13108]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 26.8469 secs, and comparison 24.5258 sec, and warnIfPerfScore > 7.7, and perfScore=0.913542]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 11.3112 secs, and comparison 2.38976 sec, and warnIfPerfScore > 1.55, and perfScore=0.211275]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 25.3299 secs, and comparison 53.7456 sec, and warnIfPerfScore > 7.7, and perfScore=2.12183]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.13323 secs, and comparison 4.55735 sec, and warnIfPerfScore > 1, and perfScore=0.560338]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 29.0225 secs, and comparison 49.3479 sec, and warnIfPerfScore > 7.9, and perfScore=1.70033]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 9.31743 secs, and comparison 4.86546 sec, and warnIfPerfScore > 0.8, and perfScore=0.522189]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.35715 secs, and comparison 10.6376 sec, and warnIfPerfScore > 1.7, and perfScore=1.27287]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.79508 secs, and comparison 2.27899 sec, and warnIfPerfScore > 0.55, and perfScore=0.335387]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.52158 sec, and warnIfPerfScore > 0.4, and perfScore=0.101439]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.65613 sec, and warnIfPerfScore > 1.1, and perfScore=0.177075]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 24 seconds]]]

Succeeded
