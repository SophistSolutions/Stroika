Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/8/17 11:51:51]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.95142 secs, and comparison 5.48807 sec, and warnIfPerfScore > 0.62, and perfScore=0.551486]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.81484 secs, and comparison 4.15144 sec, and warnIfPerfScore > 0.65, and perfScore=0.422975]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 12.9285 secs, and comparison 11.304 sec, and warnIfPerfScore > 1, and perfScore=0.87435]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.2165 secs, and comparison 13.8981 sec, and warnIfPerfScore > 1.15, and perfScore=0.977601]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 9.6033 secs, and comparison 3.14031 sec, and warnIfPerfScore > 0.5, and perfScore=0.327003]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.9373 secs, and comparison 4.70928 sec, and warnIfPerfScore > 0.68, and perfScore=0.3945]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.2334 secs, and comparison 38.9385 sec, and warnIfPerfScore > 4.3, and perfScore=2.73573]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 13.6027 secs, and comparison 39.2984 sec, and warnIfPerfScore > 4, and perfScore=2.88903]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.1
	DETAILS:         	[baseline test 11.1774 secs, and comparison 101.493 sec, and warnIfPerfScore > 10.4, and perfScore=9.08019]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.5201 secs, and comparison 20.6139 sec, and warnIfPerfScore > 3.2, and perfScore=1.52468]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.8463 secs, and comparison 19.7038 sec, and warnIfPerfScore > 1.8, and perfScore=1.32719]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.7424 secs, and comparison 25.937 sec, and warnIfPerfScore > 2.8, and perfScore=1.75935]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 14.447 secs, and comparison 43.2139 sec, and warnIfPerfScore > 3.3, and perfScore=2.99121]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 14.6896 secs, and comparison 3.15929 sec, and warnIfPerfScore > 0.25, and perfScore=0.215071]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.8851 secs, and comparison 19.1125 sec, and warnIfPerfScore > 1.25, and perfScore=1.20317]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 17.4102 secs, and comparison 53.4572 sec, and warnIfPerfScore > 7.7, and perfScore=3.07046]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.0378 secs, and comparison 6.17367 sec, and warnIfPerfScore > 1.55, and perfScore=0.439788]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 17.1988 secs, and comparison 52.8211 sec, and warnIfPerfScore > 7.7, and perfScore=3.0712]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.18 secs, and comparison 6.23701 sec, and warnIfPerfScore > 1.4, and perfScore=0.439844]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 16.1419 secs, and comparison 68.6246 sec, and warnIfPerfScore > 7.9, and perfScore=4.25134]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.61
	DETAILS:         	[baseline test 13.1798 secs, and comparison 8.00455 sec, and warnIfPerfScore > 0.8, and perfScore=0.607333]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.3369 secs, and comparison 16.2782 sec, and warnIfPerfScore > 1.7, and perfScore=1.31948]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.31313 secs, and comparison 3.97776 sec, and warnIfPerfScore > 0.55, and perfScore=0.478491]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.22407 sec, and warnIfPerfScore > 0.4, and perfScore=0.148271]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.11338 sec, and warnIfPerfScore > 1.1, and perfScore=0.340892]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.8227 secs, and comparison 21.4586 sec, and warnIfPerfScore > 2.4, and perfScore=1.35619]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.6859 secs, and comparison 26.5869 sec, and warnIfPerfScore > 2.8, and perfScore=1.81037]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 5 seconds]]]

Succeeded
