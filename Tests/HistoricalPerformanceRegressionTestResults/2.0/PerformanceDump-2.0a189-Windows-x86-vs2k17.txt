Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/15/17 17:19:06]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.7501 secs, and comparison 6.02818 sec, and warnIfPerfScore > 0.62, and perfScore=0.560754]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.7967 secs, and comparison 4.66455 sec, and warnIfPerfScore > 0.65, and perfScore=0.432034]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 14.3738 secs, and comparison 12.5649 sec, and warnIfPerfScore > 1, and perfScore=0.874158]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.6565 secs, and comparison 15.349 sec, and warnIfPerfScore > 1.15, and perfScore=0.980356]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.8034 secs, and comparison 3.47578 sec, and warnIfPerfScore > 0.5, and perfScore=0.321731]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 13.1666 secs, and comparison 5.24691 sec, and warnIfPerfScore > 0.68, and perfScore=0.398501]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.2063 secs, and comparison 43.1261 sec, and warnIfPerfScore > 4.3, and perfScore=2.83607]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 14.877 secs, and comparison 43.4658 sec, and warnIfPerfScore > 4, and perfScore=2.92168]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 12.5274 secs, and comparison 113.229 sec, and warnIfPerfScore > 10.4, and perfScore=9.03845]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.2815 secs, and comparison 23.5558 sec, and warnIfPerfScore > 3.2, and perfScore=1.54146]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.9784 secs, and comparison 21.0256 sec, and warnIfPerfScore > 1.8, and perfScore=1.31587]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 16.8222 secs, and comparison 29.0388 sec, and warnIfPerfScore > 2.8, and perfScore=1.72621]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 15.9734 secs, and comparison 48.963 sec, and warnIfPerfScore > 3.3, and perfScore=3.06529]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.1923 secs, and comparison 3.55473 sec, and warnIfPerfScore > 0.25, and perfScore=0.219532]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 16.4908 secs, and comparison 17.5526 sec, and warnIfPerfScore > 1.25, and perfScore=1.06439]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 19.3913 secs, and comparison 62.4865 sec, and warnIfPerfScore > 7.7, and perfScore=3.2224]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.105 secs, and comparison 6.50562 sec, and warnIfPerfScore > 1.55, and perfScore=0.461227]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 19.2015 secs, and comparison 61.7131 sec, and warnIfPerfScore > 7.7, and perfScore=3.21397]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.2144 secs, and comparison 6.56397 sec, and warnIfPerfScore > 1.4, and perfScore=0.461783]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 15.9829 secs, and comparison 76.5368 sec, and warnIfPerfScore > 7.9, and perfScore=4.78866]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 13.6485 secs, and comparison 9.12308 sec, and warnIfPerfScore > 0.8, and perfScore=0.668432]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.351 secs, and comparison 18.4299 sec, and warnIfPerfScore > 1.7, and perfScore=1.28422]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.3956 secs, and comparison 4.42297 sec, and warnIfPerfScore > 0.55, and perfScore=0.425464]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.20818 sec, and warnIfPerfScore > 0.4, and perfScore=0.147212]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 15 secs, and comparison 5.23421 sec, and warnIfPerfScore > 1.1, and perfScore=0.348948]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 18.058 secs, and comparison 24.1804 sec, and warnIfPerfScore > 2.4, and perfScore=1.33904]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 17.5018 secs, and comparison 30.6914 sec, and warnIfPerfScore > 2.8, and perfScore=1.75361]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 53 seconds]]]

Succeeded
