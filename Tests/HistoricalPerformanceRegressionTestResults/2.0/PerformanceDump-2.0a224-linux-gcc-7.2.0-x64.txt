Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/21/17 5:49:33]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.81196 secs, and comparison 4.48714 sec, and warnIfPerfScore > 0.62, and perfScore=0.772053]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.76137 secs, and comparison 2.79331 sec, and warnIfPerfScore > 0.65, and perfScore=0.484835]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.26271 secs, and comparison 6.7474 sec, and warnIfPerfScore > 1.05, and perfScore=1.07739]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 3.68269 secs, and comparison 2.87648 sec, and warnIfPerfScore > 0.5, and perfScore=0.781081]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 4.22343 secs, and comparison 3.88987 sec, and warnIfPerfScore > 0.68, and perfScore=0.921021]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 13.6409 secs, and comparison 51.3183 sec, and warnIfPerfScore > 4.3, and perfScore=3.76209]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 14.8422 secs, and comparison 56.3628 sec, and warnIfPerfScore > 4, and perfScore=3.79748]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	27
	DETAILS:         	[baseline test 13.7658 secs, and comparison 377.356 sec, and warnIfPerfScore > 10.4, and perfScore=27.4127]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.95171 secs, and comparison 9.88069 sec, and warnIfPerfScore > 3.2, and perfScore=1.99541]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 7.67378 secs, and comparison 7.56683 sec, and warnIfPerfScore > 1.8, and perfScore=0.986062]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 2.16015 secs, and comparison 10.5792 sec, and warnIfPerfScore > 2.8, and perfScore=4.89743]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 7.10331 secs, and comparison 18.6814 sec, and warnIfPerfScore > 3.3, and perfScore=2.62996]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 6.4861 secs, and comparison 2.58392 sec, and warnIfPerfScore > 0.25, and perfScore=0.398379]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.5785 secs, and comparison 4.07746 sec, and warnIfPerfScore > 1.4, and perfScore=1.13943]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.91
	DETAILS:         	[baseline test 26.7758 secs, and comparison 24.4243 sec, and warnIfPerfScore > 7.7, and perfScore=0.91218]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 11.2707 secs, and comparison 2.43599 sec, and warnIfPerfScore > 1.55, and perfScore=0.216136]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 25.3943 secs, and comparison 54.1204 sec, and warnIfPerfScore > 7.7, and perfScore=2.1312]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 8.16791 secs, and comparison 4.60242 sec, and warnIfPerfScore > 1, and perfScore=0.563476]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 29.6122 secs, and comparison 49.3852 sec, and warnIfPerfScore > 7.9, and perfScore=1.66773]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 9.31962 secs, and comparison 5.00268 sec, and warnIfPerfScore > 0.8, and perfScore=0.53679]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.45567 secs, and comparison 10.7837 sec, and warnIfPerfScore > 1.7, and perfScore=1.27533]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 6.91012 secs, and comparison 2.34594 sec, and warnIfPerfScore > 0.55, and perfScore=0.339493]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56518 sec, and warnIfPerfScore > 0.4, and perfScore=0.104345]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.66511 sec, and warnIfPerfScore > 1.1, and perfScore=0.177674]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 23 seconds]]]

Succeeded
