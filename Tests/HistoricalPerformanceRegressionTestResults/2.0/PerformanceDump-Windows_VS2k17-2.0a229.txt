Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 2/19/18 10:35:29]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 11.4639 secs, and comparison 6.0395 sec, and warnIfPerfScore > 0.62, and perfScore=0.526825]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.6397 secs, and comparison 3.42319 sec, and warnIfPerfScore > 0.65, and perfScore=0.321738]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 10.6569 secs, and comparison 8.89211 sec, and warnIfPerfScore > 1.05, and perfScore=0.834396]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 9.66134 secs, and comparison 3.23711 sec, and warnIfPerfScore > 0.5, and perfScore=0.335057]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.63303 secs, and comparison 4.05938 sec, and warnIfPerfScore > 0.68, and perfScore=0.421402]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 12.2766 secs, and comparison 26.9565 sec, and warnIfPerfScore > 4.3, and perfScore=2.19576]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.6192 secs, and comparison 28.8037 sec, and warnIfPerfScore > 4, and perfScore=2.47897]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 10.3399 secs, and comparison 89.5584 sec, and warnIfPerfScore > 10.4, and perfScore=8.66147]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.4457 secs, and comparison 13.8457 sec, and warnIfPerfScore > 3.2, and perfScore=1.32549]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.38116 secs, and comparison 12.2245 sec, and warnIfPerfScore > 1.8, and perfScore=1.30309]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.23403 secs, and comparison 12.7502 sec, and warnIfPerfScore > 2.8, and perfScore=1.54847]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.1397 secs, and comparison 34.1356 sec, and warnIfPerfScore > 3.3, and perfScore=3.06431]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.6325 secs, and comparison 1.25547 sec, and warnIfPerfScore > 0.25, and perfScore=0.107928]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.6508 secs, and comparison 14.2496 sec, and warnIfPerfScore > 1.4, and perfScore=1.33788]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.0055 secs, and comparison 34.1652 sec, and warnIfPerfScore > 7.7, and perfScore=3.10437]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 12.0123 secs, and comparison 4.94924 sec, and warnIfPerfScore > 1.55, and perfScore=0.412014]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 10.5876 secs, and comparison 65.8165 sec, and warnIfPerfScore > 7.7, and perfScore=6.21636]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 11.9886 secs, and comparison 5.91248 sec, and warnIfPerfScore > 1, and perfScore=0.493177]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 14.07 secs, and comparison 58.2459 sec, and warnIfPerfScore > 7.9, and perfScore=4.13972]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 11.8295 secs, and comparison 6.52435 sec, and warnIfPerfScore > 0.8, and perfScore=0.551534]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.0211 secs, and comparison 14.541 sec, and warnIfPerfScore > 1.7, and perfScore=1.31938]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.0811 secs, and comparison 4.25404 sec, and warnIfPerfScore > 0.55, and perfScore=0.325205]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.46756 sec, and warnIfPerfScore > 0.4, and perfScore=0.164504]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.48198 sec, and warnIfPerfScore > 1.1, and perfScore=0.298799]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.891 secs, and comparison 14.4358 sec, and warnIfPerfScore > 2.4, and perfScore=1.21402]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 10.9952 secs, and comparison 30.3127 sec, and warnIfPerfScore > 2.9, and perfScore=2.7569]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 26 seconds]]]

Succeeded
