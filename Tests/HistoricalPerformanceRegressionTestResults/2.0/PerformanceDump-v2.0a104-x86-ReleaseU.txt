Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/12/15 16:25:05]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 15.1575 secs, and comparison 6.94812 sec, and warnIfPerfScore > 0.5, and perfScore=0.458394]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 14.8742 secs, and comparison 4.58328 sec, and warnIfPerfScore > 0.35, and perfScore=0.308136]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 15.9253 secs, and comparison 13.5987 sec, and warnIfPerfScore > 0.89, and perfScore=0.853903]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 15.3085 secs, and comparison 14.6811 sec, and warnIfPerfScore > 1.15, and perfScore=0.959018]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 17.4127 secs, and comparison 4.01241 sec, and warnIfPerfScore > 0.5, and perfScore=0.23043]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 21.6555 secs, and comparison 5.36892 sec, and warnIfPerfScore > 0.68, and perfScore=0.247924]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 17.0656 secs, and comparison 51.3007 sec, and warnIfPerfScore > 4.3, and perfScore=3.0061]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 16.3842 secs, and comparison 49.2821 sec, and warnIfPerfScore > 4, and perfScore=3.00791]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.6
	DETAILS:         	[baseline test 15.2006 secs, and comparison 116.136 sec, and warnIfPerfScore > 9.1, and perfScore=7.64023]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 15.1372 secs, and comparison 26.1945 sec, and warnIfPerfScore > 2.45, and perfScore=1.73048]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.6134 secs, and comparison 14.3375 sec, and warnIfPerfScore > 1.65, and perfScore=0.981122]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 15.0107 secs, and comparison 40.1273 sec, and warnIfPerfScore > 2.7, and perfScore=2.67325]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.9944 secs, and comparison 41.2233 sec, and warnIfPerfScore > 3, and perfScore=2.57736]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 16.1929 secs, and comparison 1.89577 sec, and warnIfPerfScore > 0.14, and perfScore=0.117074]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.3743 secs, and comparison 16.3908 sec, and warnIfPerfScore > 1.25, and perfScore=1.14029]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.8659 secs, and comparison 36.3546 sec, and warnIfPerfScore > 7.7, and perfScore=2.29137]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.9129 secs, and comparison 6.51746 sec, and warnIfPerfScore > 1.55, and perfScore=0.437035]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.7014 secs, and comparison 35.9282 sec, and warnIfPerfScore > 7.7, and perfScore=2.28821]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 14.9555 secs, and comparison 6.6291 sec, and warnIfPerfScore > 1.4, and perfScore=0.443255]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.1599 secs, and comparison 60.537 sec, and warnIfPerfScore > 7.9, and perfScore=3.99322]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.4953 secs, and comparison 6.86636 sec, and warnIfPerfScore > 0.8, and perfScore=0.473694]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.7495 secs, and comparison 22.3542 sec, and warnIfPerfScore > 1.6, and perfScore=1.51559]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.14 secs, and comparison 4.26192 sec, and warnIfPerfScore > 0.3, and perfScore=0.2815]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.48572 sec, and warnIfPerfScore > 0.4, and perfScore=0.165715]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15 secs, and comparison 7.63369 sec, and warnIfPerfScore > 1.1, and perfScore=0.508913]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.2405 secs, and comparison 22.4014 sec, and warnIfPerfScore > 1.8, and perfScore=1.46986]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.4157 secs, and comparison 27.4559 sec, and warnIfPerfScore > 2.1, and perfScore=1.78104]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 19 seconds]]]

