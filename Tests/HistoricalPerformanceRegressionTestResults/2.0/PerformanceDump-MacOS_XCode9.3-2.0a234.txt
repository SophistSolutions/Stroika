Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/26/18 2:42:16]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.85291 secs, and comparison 6.17498 sec, and warnIfPerfScore > 0.62, and perfScore=0.697508]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 8.82492 secs, and comparison 4.15922 sec, and warnIfPerfScore > 0.65, and perfScore=0.471304]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 15.362 secs, and comparison 11.9593 sec, and warnIfPerfScore > 1.05, and perfScore=0.778496]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 28.2865 secs, and comparison 4.29154 sec, and warnIfPerfScore > 0.5, and perfScore=0.151717]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 27.2747 secs, and comparison 4.91938 sec, and warnIfPerfScore > 0.68, and perfScore=0.180364]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 19.3661 secs, and comparison 58.1972 sec, and warnIfPerfScore > 4.3, and perfScore=3.0051]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 21.1238 secs, and comparison 60.0396 sec, and warnIfPerfScore > 4, and perfScore=2.84228]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.3
	DETAILS:         	[baseline test 16.4164 secs, and comparison 152.537 sec, and warnIfPerfScore > 10.4, and perfScore=9.29173]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 20.9124 secs, and comparison 31.1886 sec, and warnIfPerfScore > 3.2, and perfScore=1.49139]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.29506 secs, and comparison 5.94211 sec, and warnIfPerfScore > 1.8, and perfScore=0.716343]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 14.348 secs, and comparison 32.7327 sec, and warnIfPerfScore > 2.8, and perfScore=2.28134]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 11.1251 secs, and comparison 22.6319 sec, and warnIfPerfScore > 3.3, and perfScore=2.03431]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 11.3383 secs, and comparison 1.92322 sec, and warnIfPerfScore > 0.25, and perfScore=0.169621]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.1448 secs, and comparison 19.0059 sec, and warnIfPerfScore > 1.4, and perfScore=1.10855]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.2362 secs, and comparison 34.481 sec, and warnIfPerfScore > 7.7, and perfScore=2.81795]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 12.8726 secs, and comparison 4.29443 sec, and warnIfPerfScore > 1.55, and perfScore=0.333609]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 11.7947 secs, and comparison 75.9439 sec, and warnIfPerfScore > 9, and perfScore=6.43884]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.8569 secs, and comparison 6.63495 sec, and warnIfPerfScore > 1, and perfScore=0.516062]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 13.2347 secs, and comparison 70.0338 sec, and warnIfPerfScore > 7.9, and perfScore=5.2917]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 12.8654 secs, and comparison 7.19209 sec, and warnIfPerfScore > 0.8, and perfScore=0.559024]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 30.0652 secs, and comparison 41.2743 sec, and warnIfPerfScore > 1.7, and perfScore=1.37283]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 6.50251 secs, and comparison 6.16819 sec, and warnIfPerfScore > 0.55, and perfScore=0.948585]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 15 secs, and comparison 7.20568 sec, and warnIfPerfScore > 0.4, and perfScore=0.480378]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78958 sec, and warnIfPerfScore > 1.1, and perfScore=0.185972]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 52 seconds]]]

Succeeded
