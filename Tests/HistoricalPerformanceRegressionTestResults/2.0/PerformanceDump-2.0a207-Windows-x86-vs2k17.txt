Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/8/17 10:23:53]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.698 secs, and comparison 5.90509 sec, and warnIfPerfScore > 0.62, and perfScore=0.551982]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.926 secs, and comparison 4.53483 sec, and warnIfPerfScore > 0.65, and perfScore=0.41505]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 14.8738 secs, and comparison 12.48 sec, and warnIfPerfScore > 1, and perfScore=0.839062]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.4542 secs, and comparison 15.0934 sec, and warnIfPerfScore > 1.15, and perfScore=0.976653]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 10.5572 secs, and comparison 3.43406 sec, and warnIfPerfScore > 0.5, and perfScore=0.325281]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 13.1295 secs, and comparison 5.21142 sec, and warnIfPerfScore > 0.68, and perfScore=0.396926]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.1013 secs, and comparison 42.5959 sec, and warnIfPerfScore > 4.3, and perfScore=2.6455]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.3021 secs, and comparison 42.4002 sec, and warnIfPerfScore > 4, and perfScore=2.77087]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.8
	DETAILS:         	[baseline test 12.5901 secs, and comparison 111.031 sec, and warnIfPerfScore > 10.4, and perfScore=8.81889]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.9771 secs, and comparison 22.4421 sec, and warnIfPerfScore > 3.2, and perfScore=1.49842]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.4809 secs, and comparison 20.2284 sec, and warnIfPerfScore > 1.8, and perfScore=1.30667]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.3908 secs, and comparison 28.9537 sec, and warnIfPerfScore > 2.8, and perfScore=1.76646]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 16.2438 secs, and comparison 48.2497 sec, and warnIfPerfScore > 3.3, and perfScore=2.97034]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 16.3539 secs, and comparison 2.45846 sec, and warnIfPerfScore > 0.25, and perfScore=0.150328]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.4096 secs, and comparison 20.1905 sec, and warnIfPerfScore > 1.25, and perfScore=1.15973]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.0504 secs, and comparison 58.4027 sec, and warnIfPerfScore > 7.7, and perfScore=3.0657]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 15.7871 secs, and comparison 6.64136 sec, and warnIfPerfScore > 1.55, and perfScore=0.420683]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 18.9315 secs, and comparison 58.253 sec, and warnIfPerfScore > 7.7, and perfScore=3.07705]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 16.3473 secs, and comparison 6.88092 sec, and warnIfPerfScore > 1.4, and perfScore=0.420921]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 17.8214 secs, and comparison 73.9059 sec, and warnIfPerfScore > 7.9, and perfScore=4.14703]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 15.0336 secs, and comparison 8.50355 sec, and warnIfPerfScore > 0.8, and perfScore=0.565638]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.6483 secs, and comparison 18.0518 sec, and warnIfPerfScore > 1.7, and perfScore=1.32264]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.7696 secs, and comparison 4.31014 sec, and warnIfPerfScore > 0.55, and perfScore=0.400212]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.45448 sec, and warnIfPerfScore > 0.4, and perfScore=0.163632]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.45755 sec, and warnIfPerfScore > 1.1, and perfScore=0.363836]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 17.0104 secs, and comparison 22.9722 sec, and warnIfPerfScore > 2.4, and perfScore=1.35048]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.1275 secs, and comparison 29.3783 sec, and warnIfPerfScore > 2.8, and perfScore=1.82163]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 42 seconds]]]

Succeeded
