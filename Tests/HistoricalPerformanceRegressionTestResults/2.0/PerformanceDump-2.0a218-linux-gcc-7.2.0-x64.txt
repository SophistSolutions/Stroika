Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/16/17 8:47:13]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.72964 secs, and comparison 5.39295 sec, and warnIfPerfScore > 0.62, and perfScore=0.801373]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.72013 secs, and comparison 3.3902 sec, and warnIfPerfScore > 0.65, and perfScore=0.504484]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.06631 secs, and comparison 8.09693 sec, and warnIfPerfScore > 1.05, and perfScore=1.0038]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 6.6099 secs, and comparison 3.3657 sec, and warnIfPerfScore > 0.5, and perfScore=0.50919]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 6.76595 secs, and comparison 4.64339 sec, and warnIfPerfScore > 0.68, and perfScore=0.686288]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.27208 secs, and comparison 28.3582 sec, and warnIfPerfScore > 4.3, and perfScore=3.42818]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.59668 secs, and comparison 30.8432 sec, and warnIfPerfScore > 4, and perfScore=3.21395]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	15
	DETAILS:         	[baseline test 7.50952 secs, and comparison 109.158 sec, and warnIfPerfScore > 10.4, and perfScore=14.536]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 9.71796 secs, and comparison 12.8809 sec, and warnIfPerfScore > 3.2, and perfScore=1.32547]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.66706 secs, and comparison 5.56199 sec, and warnIfPerfScore > 1.8, and perfScore=0.98146]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 4.08681 secs, and comparison 13.1217 sec, and warnIfPerfScore > 2.8, and perfScore=3.21075]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 5.09877 secs, and comparison 25.4741 sec, and warnIfPerfScore > 3.3, and perfScore=4.99614]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 5.3328 secs, and comparison 2.33388 sec, and warnIfPerfScore > 0.25, and perfScore=0.437647]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 4.71597 secs, and comparison 5.74573 sec, and warnIfPerfScore > 1.4, and perfScore=1.21836]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 5.20538 secs, and comparison 25.6552 sec, and warnIfPerfScore > 7.7, and perfScore=4.9286]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 8.99319 secs, and comparison 2.87728 sec, and warnIfPerfScore > 1.55, and perfScore=0.31994]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 5.02164 secs, and comparison 61.964 sec, and warnIfPerfScore > 7.7, and perfScore=12.3394]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 9.64749 secs, and comparison 5.57631 sec, and warnIfPerfScore > 1, and perfScore=0.578006]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.3
	DETAILS:         	[baseline test 7.57061 secs, and comparison 55.2806 sec, and warnIfPerfScore > 7.9, and perfScore=7.30201]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 11.7009 secs, and comparison 5.56407 sec, and warnIfPerfScore > 0.8, and perfScore=0.475526]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.8188 secs, and comparison 13.2138 sec, and warnIfPerfScore > 1.7, and perfScore=1.22138]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 20.9194 secs, and comparison 5.22856 sec, and warnIfPerfScore > 0.55, and perfScore=0.249938]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.8323 sec, and warnIfPerfScore > 0.4, and perfScore=0.122154]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15 secs, and comparison 3.1082 sec, and warnIfPerfScore > 1.1, and perfScore=0.207213]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 13 seconds]]]

Succeeded
