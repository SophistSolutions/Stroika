Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/16/17 0:53:45]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.09222 secs, and comparison 8.78669 sec, and warnIfPerfScore > 0.62, and perfScore=0.966396]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.09362 secs, and comparison 4.16008 sec, and warnIfPerfScore > 0.65, and perfScore=0.457472]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 15.8628 secs, and comparison 11.5412 sec, and warnIfPerfScore > 1.05, and perfScore=0.727567]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 26.9392 secs, and comparison 4.4672 sec, and warnIfPerfScore > 0.5, and perfScore=0.165825]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 26.755 secs, and comparison 5.4385 sec, and warnIfPerfScore > 0.68, and perfScore=0.20327]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.0038 secs, and comparison 58.1156 sec, and warnIfPerfScore > 4.3, and perfScore=3.22797]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 19.8153 secs, and comparison 61.029 sec, and warnIfPerfScore > 4, and perfScore=3.0799]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9.8
	DETAILS:         	[baseline test 15.6909 secs, and comparison 153.572 sec, and warnIfPerfScore > 10.4, and perfScore=9.78731]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.4118 secs, and comparison 30.6789 sec, and warnIfPerfScore > 3.2, and perfScore=1.58042]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 8.2457 secs, and comparison 5.93829 sec, and warnIfPerfScore > 1.8, and perfScore=0.720168]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.2065 secs, and comparison 31.7895 sec, and warnIfPerfScore > 2.8, and perfScore=2.4071]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 11.7852 secs, and comparison 25.9377 sec, and warnIfPerfScore > 3.3, and perfScore=2.20087]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 12.3152 secs, and comparison 3.49922 sec, and warnIfPerfScore > 0.25, and perfScore=0.284139]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.8882 secs, and comparison 18.5118 sec, and warnIfPerfScore > 1.4, and perfScore=1.03486]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.6694 secs, and comparison 32.0936 sec, and warnIfPerfScore > 7.7, and perfScore=2.75024]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.7831 secs, and comparison 3.82457 sec, and warnIfPerfScore > 1.55, and perfScore=0.354681]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.7
	DETAILS:         	[baseline test 11.2082 secs, and comparison 75.2914 sec, and warnIfPerfScore > 7.7, and perfScore=6.71753]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.6
	DETAILS:         	[baseline test 10.7541 secs, and comparison 6.44982 sec, and warnIfPerfScore > 1, and perfScore=0.599755]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.6729 secs, and comparison 68.6447 sec, and warnIfPerfScore > 7.9, and perfScore=5.41663]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 10.8291 secs, and comparison 6.74091 sec, and warnIfPerfScore > 0.8, and perfScore=0.622482]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 33.0299 secs, and comparison 39.9287 sec, and warnIfPerfScore > 1.7, and perfScore=1.20886]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.9586 secs, and comparison 6.72418 sec, and warnIfPerfScore > 0.55, and perfScore=0.966312]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.84846 sec, and warnIfPerfScore > 0.4, and perfScore=0.389897]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.2318 sec, and warnIfPerfScore > 1.1, and perfScore=0.215453]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 45 seconds]]]

Succeeded
