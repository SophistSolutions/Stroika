Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 2/23/17 11:40:38]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.02051 secs, and comparison 5.21302 sec, and warnIfPerfScore > 0.62, and perfScore=0.742542]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.05861 secs, and comparison 3.21056 sec, and warnIfPerfScore > 0.65, and perfScore=0.454843]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.2143 secs, and comparison 11.4456 sec, and warnIfPerfScore > 1, and perfScore=0.752296]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 10.0569 secs, and comparison 9.66396 sec, and warnIfPerfScore > 1.15, and perfScore=0.960932]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 21.4967 secs, and comparison 3.58671 sec, and warnIfPerfScore > 0.5, and perfScore=0.166849]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 27.0668 secs, and comparison 5.39118 sec, and warnIfPerfScore > 0.68, and perfScore=0.19918]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 20.1421 secs, and comparison 67.4774 sec, and warnIfPerfScore > 4.3, and perfScore=3.35006]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 21.0843 secs, and comparison 67.9871 sec, and warnIfPerfScore > 4, and perfScore=3.22454]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.1
	DETAILS:         	[baseline test 17.0402 secs, and comparison 138.283 sec, and warnIfPerfScore > 10.4, and perfScore=8.11508]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 20.9034 secs, and comparison 33.3567 sec, and warnIfPerfScore > 3.2, and perfScore=1.59576]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4514 secs, and comparison 7.31266 sec, and warnIfPerfScore > 1.8, and perfScore=0.699685]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 18.2094 secs, and comparison 43.0453 sec, and warnIfPerfScore > 2.8, and perfScore=2.3639]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.6006 secs, and comparison 29.3804 sec, and warnIfPerfScore > 3.3, and perfScore=2.16022]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.865 secs, and comparison 3.35573 sec, and warnIfPerfScore > 0.25, and perfScore=0.24203]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.9801 secs, and comparison 20.3649 sec, and warnIfPerfScore > 1.25, and perfScore=1.01926]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.1875 secs, and comparison 44.1655 sec, and warnIfPerfScore > 7.7, and perfScore=2.72836]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.1055 secs, and comparison 4.62589 sec, and warnIfPerfScore > 1.55, and perfScore=0.306239]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.0942 secs, and comparison 43.6992 sec, and warnIfPerfScore > 7.7, and perfScore=2.71521]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15.2568 secs, and comparison 4.66609 sec, and warnIfPerfScore > 1.4, and perfScore=0.305838]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 12.8248 secs, and comparison 65.8621 sec, and warnIfPerfScore > 7.9, and perfScore=5.13552]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 13.3172 secs, and comparison 7.00225 sec, and warnIfPerfScore > 0.8, and perfScore=0.525803]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 32.3909 secs, and comparison 38.8586 sec, and warnIfPerfScore > 1.7, and perfScore=1.19968]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 4.97783 secs, and comparison 4.84537 sec, and warnIfPerfScore > 0.55, and perfScore=0.97339]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.37164 sec, and warnIfPerfScore > 0.4, and perfScore=0.358109]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 4.044 sec, and warnIfPerfScore > 1.1, and perfScore=0.2696]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 22 seconds]]]

Succeeded
