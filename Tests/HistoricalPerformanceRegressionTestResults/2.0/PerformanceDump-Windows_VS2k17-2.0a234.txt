Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 5/26/18 21:05:10]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 11.438 secs, and comparison 5.70078 sec, and warnIfPerfScore > 0.62, and perfScore=0.498407]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 11.5077 secs, and comparison 3.83215 sec, and warnIfPerfScore > 0.65, and perfScore=0.333006]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.3875 secs, and comparison 9.53129 sec, and warnIfPerfScore > 1.05, and perfScore=0.836996]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.0679 secs, and comparison 3.55048 sec, and warnIfPerfScore > 0.5, and perfScore=0.352654]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.051 secs, and comparison 4.40028 sec, and warnIfPerfScore > 0.68, and perfScore=0.437795]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.1411 secs, and comparison 27.8524 sec, and warnIfPerfScore > 4.3, and perfScore=2.49997]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.5924 secs, and comparison 30.2339 sec, and warnIfPerfScore > 4, and perfScore=2.60808]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 10.975 secs, and comparison 94.3926 sec, and warnIfPerfScore > 10.4, and perfScore=8.60069]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.1041 secs, and comparison 14.7306 sec, and warnIfPerfScore > 3.2, and perfScore=1.32659]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.9566 secs, and comparison 13.5911 sec, and warnIfPerfScore > 1.8, and perfScore=1.24044]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 8.26894 secs, and comparison 13.7616 sec, and warnIfPerfScore > 2.8, and perfScore=1.66426]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 11.7734 secs, and comparison 35.2741 sec, and warnIfPerfScore > 3.3, and perfScore=2.9961]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.0996 secs, and comparison 1.32926 sec, and warnIfPerfScore > 0.25, and perfScore=0.101474]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.9966 secs, and comparison 12.2586 sec, and warnIfPerfScore > 1.4, and perfScore=1.02183]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.6759 secs, and comparison 37.4927 sec, and warnIfPerfScore > 7.7, and perfScore=3.21112]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.5958 secs, and comparison 5.26054 sec, and warnIfPerfScore > 1.55, and perfScore=0.453659]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.5
	DETAILS:         	[baseline test 11.1168 secs, and comparison 71.944 sec, and warnIfPerfScore > 9, and perfScore=6.47166]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 11.9446 secs, and comparison 6.50479 sec, and warnIfPerfScore > 1, and perfScore=0.544579]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 15.6733 secs, and comparison 63.8493 sec, and warnIfPerfScore > 7.9, and perfScore=4.07377]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.6391 secs, and comparison 7.39088 sec, and warnIfPerfScore > 0.8, and perfScore=0.635003]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.9768 secs, and comparison 15.7201 sec, and warnIfPerfScore > 1.7, and perfScore=1.31255]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.9778 secs, and comparison 4.52325 sec, and warnIfPerfScore > 0.55, and perfScore=0.323603]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.18
	DETAILS:         	[baseline test 15 secs, and comparison 2.74384 sec, and warnIfPerfScore > 0.4, and perfScore=0.182923]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.96403 sec, and warnIfPerfScore > 1.1, and perfScore=0.330935]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.1109 secs, and comparison 15.8454 sec, and warnIfPerfScore > 2.4, and perfScore=1.20857]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.4753 secs, and comparison 33.625 sec, and warnIfPerfScore > 2.9, and perfScore=2.69532]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 43 seconds]]]

Succeeded
