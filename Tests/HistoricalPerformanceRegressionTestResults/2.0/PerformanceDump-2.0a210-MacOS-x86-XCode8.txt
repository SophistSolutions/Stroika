Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/6/17 13:53:11]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.148 secs, and comparison 6.78347 sec, and warnIfPerfScore > 0.62, and perfScore=0.741525]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.13372 secs, and comparison 4.18655 sec, and warnIfPerfScore > 0.65, and perfScore=0.458362]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.75
	DETAILS:         	[baseline test 15.2317 secs, and comparison 11.4817 sec, and warnIfPerfScore > 1, and perfScore=0.753801]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 9.64928 secs, and comparison 9.12825 sec, and warnIfPerfScore > 1.15, and perfScore=0.946003]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 27.3662 secs, and comparison 4.46349 sec, and warnIfPerfScore > 0.5, and perfScore=0.163102]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 27.339 secs, and comparison 5.42772 sec, and warnIfPerfScore > 0.68, and perfScore=0.198534]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 18.1597 secs, and comparison 60.6924 sec, and warnIfPerfScore > 4.3, and perfScore=3.34215]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 20.1772 secs, and comparison 64.2775 sec, and warnIfPerfScore > 4, and perfScore=3.18565]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 15.7092 secs, and comparison 160.19 sec, and warnIfPerfScore > 10.4, and perfScore=10.1972]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 19.5305 secs, and comparison 31.1852 sec, and warnIfPerfScore > 3.2, and perfScore=1.59674]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 8.44088 secs, and comparison 5.89737 sec, and warnIfPerfScore > 1.8, and perfScore=0.698668]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.0534 secs, and comparison 31.7721 sec, and warnIfPerfScore > 2.8, and perfScore=2.43401]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 11.7819 secs, and comparison 25.1406 sec, and warnIfPerfScore > 3.3, and perfScore=2.13384]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 12.1767 secs, and comparison 2.99001 sec, and warnIfPerfScore > 0.25, and perfScore=0.245551]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 17.8787 secs, and comparison 18.2219 sec, and warnIfPerfScore > 1.25, and perfScore=1.0192]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.0219 secs, and comparison 32.4813 sec, and warnIfPerfScore > 7.7, and perfScore=2.70184]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 13.2301 secs, and comparison 4.32032 sec, and warnIfPerfScore > 1.55, and perfScore=0.326552]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 11.2861 secs, and comparison 74.9255 sec, and warnIfPerfScore > 7.7, and perfScore=6.63875]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.3028 secs, and comparison 6.64431 sec, and warnIfPerfScore > 1, and perfScore=0.499467]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.7525 secs, and comparison 68.7262 sec, and warnIfPerfScore > 7.9, and perfScore=5.38922]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.1326 secs, and comparison 7.26353 sec, and warnIfPerfScore > 0.8, and perfScore=0.553092]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 33.068 secs, and comparison 39.5929 sec, and warnIfPerfScore > 1.7, and perfScore=1.19732]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 6.72169 secs, and comparison 6.48325 sec, and warnIfPerfScore > 0.55, and perfScore=0.964527]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.6944 sec, and warnIfPerfScore > 0.4, and perfScore=0.379627]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.94419 sec, and warnIfPerfScore > 1.1, and perfScore=0.262946]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 22 seconds]]]

Succeeded
