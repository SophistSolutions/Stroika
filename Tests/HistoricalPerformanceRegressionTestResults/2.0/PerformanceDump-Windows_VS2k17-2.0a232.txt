Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 4/23/18 17:54:27]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.7144 secs, and comparison 5.24487 sec, and warnIfPerfScore > 0.62, and perfScore=0.447727]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.5276 secs, and comparison 3.67485 sec, and warnIfPerfScore > 0.65, and perfScore=0.349067]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 10.8706 secs, and comparison 9.15387 sec, and warnIfPerfScore > 1.05, and perfScore=0.842075]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 9.23331 secs, and comparison 3.20027 sec, and warnIfPerfScore > 0.5, and perfScore=0.346601]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 9.6425 secs, and comparison 4.19656 sec, and warnIfPerfScore > 0.68, and perfScore=0.435215]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.7821 secs, and comparison 26.7875 sec, and warnIfPerfScore > 4.3, and perfScore=2.48445]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.6693 secs, and comparison 29.3105 sec, and warnIfPerfScore > 4, and perfScore=2.51176]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8
	DETAILS:         	[baseline test 11.2865 secs, and comparison 90.5249 sec, and warnIfPerfScore > 10.4, and perfScore=8.02062]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.9818 secs, and comparison 14.0613 sec, and warnIfPerfScore > 3.2, and perfScore=1.28043]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.3876 secs, and comparison 18.2151 sec, and warnIfPerfScore > 1.8, and perfScore=1.18376]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.11916 secs, and comparison 13.3493 sec, and warnIfPerfScore > 2.8, and perfScore=1.64417]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 11.5126 secs, and comparison 34.6428 sec, and warnIfPerfScore > 3.3, and perfScore=3.00912]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 11.8945 secs, and comparison 1.25778 sec, and warnIfPerfScore > 0.25, and perfScore=0.105745]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.756 secs, and comparison 11.33 sec, and warnIfPerfScore > 1.4, and perfScore=1.05336]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.1422 secs, and comparison 34.6688 sec, and warnIfPerfScore > 7.7, and perfScore=3.11149]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 11.0825 secs, and comparison 4.98331 sec, and warnIfPerfScore > 1.55, and perfScore=0.449657]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 10.6357 secs, and comparison 67.9629 sec, and warnIfPerfScore > 7.7, and perfScore=6.39005]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 10.6856 secs, and comparison 6.07981 sec, and warnIfPerfScore > 1, and perfScore=0.568974]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 14.3826 secs, and comparison 60.2891 sec, and warnIfPerfScore > 7.9, and perfScore=4.1918]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 11.0902 secs, and comparison 7.06754 sec, and warnIfPerfScore > 0.8, and perfScore=0.637279]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.0042 secs, and comparison 14.9982 sec, and warnIfPerfScore > 1.7, and perfScore=1.36296]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4112 secs, and comparison 4.2576 sec, and warnIfPerfScore > 0.55, and perfScore=0.317466]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 15 secs, and comparison 2.41013 sec, and warnIfPerfScore > 0.4, and perfScore=0.160676]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15 secs, and comparison 4.50904 sec, and warnIfPerfScore > 1.1, and perfScore=0.300603]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.6775 secs, and comparison 14.9994 sec, and warnIfPerfScore > 2.4, and perfScore=1.28448]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.3137 secs, and comparison 30.8833 sec, and warnIfPerfScore > 2.9, and perfScore=2.72974]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 13 minutes, 46 seconds]]]

Succeeded
