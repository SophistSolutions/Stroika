Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 9/19/16 12:05:10]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 9.98958 secs, and comparison 5.52603 sec, and warnIfPerfScore > 0.62, and perfScore=0.553179]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.80915 secs, and comparison 4.45825 sec, and warnIfPerfScore > 0.65, and perfScore=0.454499]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 13.005 secs, and comparison 11.3884 sec, and warnIfPerfScore > 1, and perfScore=0.875689]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.1966 secs, and comparison 13.9313 sec, and warnIfPerfScore > 1.15, and perfScore=0.981315]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 9.87047 secs, and comparison 3.15777 sec, and warnIfPerfScore > 0.5, and perfScore=0.319921]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.2262 secs, and comparison 4.7127 sec, and warnIfPerfScore > 0.68, and perfScore=0.385459]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.4851 secs, and comparison 38.1197 sec, and warnIfPerfScore > 4.3, and perfScore=2.8268]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 13.4188 secs, and comparison 38.24 sec, and warnIfPerfScore > 4, and perfScore=2.84974]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 11.2883 secs, and comparison 98.3813 sec, and warnIfPerfScore > 10.4, and perfScore=8.71536]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 13.4463 secs, and comparison 20.3319 sec, and warnIfPerfScore > 3.2, and perfScore=1.51209]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.6394 secs, and comparison 14.5169 sec, and warnIfPerfScore > 1.7, and perfScore=0.991633]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.2451 secs, and comparison 25.9356 sec, and warnIfPerfScore > 2.8, and perfScore=1.82066]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 15.0251 secs, and comparison 44.5311 sec, and warnIfPerfScore > 3.3, and perfScore=2.96378]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15.2447 secs, and comparison 3.19242 sec, and warnIfPerfScore > 0.22, and perfScore=0.209412]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 15.8402 secs, and comparison 15.4112 sec, and warnIfPerfScore > 1.25, and perfScore=0.972911]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.0966 secs, and comparison 15.027 sec, and warnIfPerfScore > 7.7, and perfScore=0.995388]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.2855 secs, and comparison 3.5251 sec, and warnIfPerfScore > 1.55, and perfScore=0.246761]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 14.9435 secs, and comparison 14.8552 sec, and warnIfPerfScore > 7.7, and perfScore=0.994089]
	                 	Sequence_DoublyLinkedList<int> is FASTER

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 14.4367 secs, and comparison 3.55145 sec, and warnIfPerfScore > 1.4, and perfScore=0.246001]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.7611 secs, and comparison 41.7416 sec, and warnIfPerfScore > 7.9, and perfScore=2.82781]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.3771 secs, and comparison 5.49894 sec, and warnIfPerfScore > 0.8, and perfScore=0.411072]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.9552 secs, and comparison 18.8984 sec, and warnIfPerfScore > 1.7, and perfScore=1.26366]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 8.95339 secs, and comparison 3.88662 sec, and warnIfPerfScore > 0.55, and perfScore=0.434094]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 15 secs, and comparison 2.01569 sec, and warnIfPerfScore > 0.4, and perfScore=0.134379]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.70968 sec, and warnIfPerfScore > 1.1, and perfScore=0.313979]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 15.6541 secs, and comparison 21.8263 sec, and warnIfPerfScore > 2.4, and perfScore=1.39428]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.803 secs, and comparison 26.4039 sec, and warnIfPerfScore > 2.8, and perfScore=1.78369]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 2 seconds]]]

Succeeded
