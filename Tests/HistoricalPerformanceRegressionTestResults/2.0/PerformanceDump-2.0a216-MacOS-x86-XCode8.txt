Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/24/17 15:18:44]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 9.15236 secs, and comparison 6.79311 sec, and warnIfPerfScore > 0.62, and perfScore=0.742225]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 9.14833 secs, and comparison 4.16453 sec, and warnIfPerfScore > 0.65, and perfScore=0.455223]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.72
	DETAILS:         	[baseline test 15.8617 secs, and comparison 11.4963 sec, and warnIfPerfScore > 1, and perfScore=0.724787]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 26.9934 secs, and comparison 4.45227 sec, and warnIfPerfScore > 0.5, and perfScore=0.164939]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 27.3372 secs, and comparison 5.42024 sec, and warnIfPerfScore > 0.68, and perfScore=0.198274]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 19.1387 secs, and comparison 61.4979 sec, and warnIfPerfScore > 4.3, and perfScore=3.21328]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 19.9349 secs, and comparison 65.3711 sec, and warnIfPerfScore > 4, and perfScore=3.27923]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	10
	DETAILS:         	[baseline test 15.9506 secs, and comparison 162.828 sec, and warnIfPerfScore > 10.4, and perfScore=10.2083]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 21.3934 secs, and comparison 30.4337 sec, and warnIfPerfScore > 3.2, and perfScore=1.42257]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.69
	DETAILS:         	[baseline test 8.60516 secs, and comparison 5.93857 sec, and warnIfPerfScore > 1.8, and perfScore=0.690117]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 13.2749 secs, and comparison 31.7472 sec, and warnIfPerfScore > 2.8, and perfScore=2.39152]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 12.0616 secs, and comparison 25.778 sec, and warnIfPerfScore > 3.3, and perfScore=2.1372]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 12.6369 secs, and comparison 2.87029 sec, and warnIfPerfScore > 0.25, and perfScore=0.227135]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 18.0754 secs, and comparison 18.3487 sec, and warnIfPerfScore > 1.4, and perfScore=1.01512]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 11.7745 secs, and comparison 32.435 sec, and warnIfPerfScore > 7.7, and perfScore=2.75467]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 13.4951 secs, and comparison 4.26644 sec, and warnIfPerfScore > 1.55, and perfScore=0.316148]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 11.3463 secs, and comparison 75.2743 sec, and warnIfPerfScore > 7.7, and perfScore=6.63425]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 13.5066 secs, and comparison 6.61309 sec, and warnIfPerfScore > 1, and perfScore=0.489618]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 12.712 secs, and comparison 69.187 sec, and warnIfPerfScore > 7.9, and perfScore=5.44264]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 13.1043 secs, and comparison 7.26975 sec, and warnIfPerfScore > 0.8, and perfScore=0.55476]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 34.2937 secs, and comparison 40.4535 sec, and warnIfPerfScore > 1.7, and perfScore=1.17962]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.63876 secs, and comparison 6.48952 sec, and warnIfPerfScore > 0.55, and perfScore=0.977521]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 15 secs, and comparison 5.90049 sec, and warnIfPerfScore > 0.4, and perfScore=0.393366]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15 secs, and comparison 3.97912 sec, and warnIfPerfScore > 1.1, and perfScore=0.265275]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 15 seconds]]]

Succeeded
