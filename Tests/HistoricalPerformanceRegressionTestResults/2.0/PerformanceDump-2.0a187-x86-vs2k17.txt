Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/5/17 10:06:36]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 10.7668 secs, and comparison 6.04582 sec, and warnIfPerfScore > 0.62, and perfScore=0.561525]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.8199 secs, and comparison 4.49145 sec, and warnIfPerfScore > 0.65, and perfScore=0.415108]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 14.1852 secs, and comparison 12.4544 sec, and warnIfPerfScore > 1, and perfScore=0.877984]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 15.6032 secs, and comparison 15.0555 sec, and warnIfPerfScore > 1.15, and perfScore=0.964897]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.6567 secs, and comparison 3.44624 sec, and warnIfPerfScore > 0.5, and perfScore=0.323388]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 13.1552 secs, and comparison 5.22367 sec, and warnIfPerfScore > 0.68, and perfScore=0.39708]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 15.1299 secs, and comparison 42.4255 sec, and warnIfPerfScore > 4.3, and perfScore=2.80408]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 14.579 secs, and comparison 42.7345 sec, and warnIfPerfScore > 4, and perfScore=2.93124]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 12.2834 secs, and comparison 110.336 sec, and warnIfPerfScore > 10.4, and perfScore=8.9825]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 14.6759 secs, and comparison 22.9164 sec, and warnIfPerfScore > 3.2, and perfScore=1.5615]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.9996 secs, and comparison 20.1744 sec, and warnIfPerfScore > 1.7, and perfScore=1.34499]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 16.404 secs, and comparison 28.602 sec, and warnIfPerfScore > 2.8, and perfScore=1.7436]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 15.4642 secs, and comparison 48.457 sec, and warnIfPerfScore > 3.3, and perfScore=3.13349]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15.7042 secs, and comparison 3.71446 sec, and warnIfPerfScore > 0.25, and perfScore=0.236526]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 15.6786 secs, and comparison 17.2465 sec, and warnIfPerfScore > 1.25, and perfScore=1.1]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.9946 secs, and comparison 61.4239 sec, and warnIfPerfScore > 7.7, and perfScore=3.23375]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 13.7697 secs, and comparison 6.35076 sec, and warnIfPerfScore > 1.55, and perfScore=0.461213]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 18.7672 secs, and comparison 60.7418 sec, and warnIfPerfScore > 7.7, and perfScore=3.23659]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 13.8849 secs, and comparison 6.41635 sec, and warnIfPerfScore > 1.4, and perfScore=0.462111]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 15.9702 secs, and comparison 75.6392 sec, and warnIfPerfScore > 7.9, and perfScore=4.73626]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.67
	DETAILS:         	[baseline test 13.2195 secs, and comparison 8.85717 sec, and warnIfPerfScore > 0.8, and perfScore=0.67001]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.7956 secs, and comparison 17.8651 sec, and warnIfPerfScore > 1.7, and perfScore=1.29499]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.0244 secs, and comparison 4.31897 sec, and warnIfPerfScore > 0.55, and perfScore=0.430845]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.04229 sec, and warnIfPerfScore > 0.4, and perfScore=0.136153]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.89314 sec, and warnIfPerfScore > 1.1, and perfScore=0.326209]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 17.2817 secs, and comparison 23.4702 sec, and warnIfPerfScore > 2.4, and perfScore=1.3581]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 17.0358 secs, and comparison 28.6838 sec, and warnIfPerfScore > 2.8, and perfScore=1.68373]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 17 minutes, 26 seconds]]]

Succeeded
