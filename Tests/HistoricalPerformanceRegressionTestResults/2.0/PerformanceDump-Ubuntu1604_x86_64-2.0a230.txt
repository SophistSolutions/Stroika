Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/5/18 19:53:15]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.90025 secs, and comparison 4.56222 sec, and warnIfPerfScore > 0.62, and perfScore=0.773224]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.83729 secs, and comparison 2.87844 sec, and warnIfPerfScore > 0.65, and perfScore=0.493113]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.52908 secs, and comparison 7.03302 sec, and warnIfPerfScore > 1.05, and perfScore=1.07718]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.0455 secs, and comparison 2.81616 sec, and warnIfPerfScore > 0.5, and perfScore=0.465827]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.64
	DETAILS:         	[baseline test 5.87281 secs, and comparison 3.77081 sec, and warnIfPerfScore > 0.68, and perfScore=0.642079]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.98341 secs, and comparison 25.084 sec, and warnIfPerfScore > 4.3, and perfScore=3.59195]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 7.94906 secs, and comparison 32.1932 sec, and warnIfPerfScore > 4, and perfScore=4.04993]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 9.0333 secs, and comparison 97.8836 sec, and warnIfPerfScore > 10.4, and perfScore=10.8359]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.29244 secs, and comparison 10.7376 sec, and warnIfPerfScore > 3.2, and perfScore=1.29487]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 6.85995 secs, and comparison 6.71242 sec, and warnIfPerfScore > 1.8, and perfScore=0.978494]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 3.61545 secs, and comparison 11.566 sec, and warnIfPerfScore > 2.8, and perfScore=3.19906]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5
	DETAILS:         	[baseline test 4.25802 secs, and comparison 21.4842 sec, and warnIfPerfScore > 3.3, and perfScore=5.04558]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 4.4678 secs, and comparison 2.2984 sec, and warnIfPerfScore > 0.25, and perfScore=0.514436]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.60662 secs, and comparison 4.56429 sec, and warnIfPerfScore > 1.4, and perfScore=0.990812]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 4.86958 secs, and comparison 19.1977 sec, and warnIfPerfScore > 7.7, and perfScore=3.94237]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.13
	DETAILS:         	[baseline test 19.8833 secs, and comparison 2.59801 sec, and warnIfPerfScore > 1.55, and perfScore=0.130663]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.57129 secs, and comparison 54.5649 sec, and warnIfPerfScore > 7.7, and perfScore=11.9364]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 11.9484 secs, and comparison 4.62459 sec, and warnIfPerfScore > 1, and perfScore=0.387046]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 5.59672 secs, and comparison 50.1444 sec, and warnIfPerfScore > 7.9, and perfScore=8.95961]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 16.9676 secs, and comparison 5.46405 sec, and warnIfPerfScore > 0.8, and perfScore=0.322028]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.86303 secs, and comparison 11.7457 sec, and warnIfPerfScore > 1.7, and perfScore=1.32525]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 6.79998 secs, and comparison 2.99552 sec, and warnIfPerfScore > 0.55, and perfScore=0.440519]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.50508 sec, and warnIfPerfScore > 0.4, and perfScore=0.100339]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.78292 sec, and warnIfPerfScore > 1.1, and perfScore=0.185528]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 19 seconds]]]

Succeeded
