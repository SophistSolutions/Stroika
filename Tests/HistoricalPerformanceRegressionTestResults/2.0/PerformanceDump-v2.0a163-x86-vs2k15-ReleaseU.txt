Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 7/29/16 12:43:48]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 10.6449 secs, and comparison 5.7161 sec, and warnIfPerfScore > 0.62, and perfScore=0.53698]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.4683 secs, and comparison 4.75765 sec, and warnIfPerfScore > 0.65, and perfScore=0.454483]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.88
	DETAILS:         	[baseline test 13.6692 secs, and comparison 12.0476 sec, and warnIfPerfScore > 0.97, and perfScore=0.881368]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 15.1554 secs, and comparison 14.8431 sec, and warnIfPerfScore > 1.15, and perfScore=0.979396]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.4889 secs, and comparison 3.37445 sec, and warnIfPerfScore > 0.5, and perfScore=0.321716]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.9852 secs, and comparison 5.12082 sec, and warnIfPerfScore > 0.68, and perfScore=0.394358]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.5092 secs, and comparison 39.6596 sec, and warnIfPerfScore > 4.3, and perfScore=2.73341]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.4951 secs, and comparison 40.0997 sec, and warnIfPerfScore > 4, and perfScore=2.76643]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 12.1283 secs, and comparison 103.211 sec, and warnIfPerfScore > 9.9, and perfScore=8.50988]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.4399 secs, and comparison 21.4044 sec, and warnIfPerfScore > 3.2, and perfScore=1.4823]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 24.5963 secs, and comparison 24.4867 sec, and warnIfPerfScore > 1.7, and perfScore=0.995542]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.7173 secs, and comparison 28.1537 sec, and warnIfPerfScore > 2.8, and perfScore=1.91296]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.1
	DETAILS:         	[baseline test 21.6978 secs, and comparison 46.5724 sec, and warnIfPerfScore > 3.3, and perfScore=2.14641]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 22.0068 secs, and comparison 3.07451 sec, and warnIfPerfScore > 0.22, and perfScore=0.139707]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 14.9365 secs, and comparison 17.3424 sec, and warnIfPerfScore > 1.25, and perfScore=1.16107]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.1527 secs, and comparison 41.4887 sec, and warnIfPerfScore > 7.7, and perfScore=2.56853]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.2237 secs, and comparison 5.18053 sec, and warnIfPerfScore > 1.55, and perfScore=0.340294]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.5886 secs, and comparison 41.1202 sec, and warnIfPerfScore > 7.7, and perfScore=2.63784]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15.4065 secs, and comparison 5.25205 sec, and warnIfPerfScore > 1.4, and perfScore=0.340898]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 15.659 secs, and comparison 60.5774 sec, and warnIfPerfScore > 7.9, and perfScore=3.86854]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 14.2619 secs, and comparison 7.22646 sec, and warnIfPerfScore > 0.8, and perfScore=0.506696]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.9742 secs, and comparison 20.3391 sec, and warnIfPerfScore > 1.7, and perfScore=1.27325]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 8.26985 secs, and comparison 4.00565 sec, and warnIfPerfScore > 0.55, and perfScore=0.484368]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.19139 sec, and warnIfPerfScore > 0.4, and perfScore=0.146093]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.87015 sec, and warnIfPerfScore > 1.1, and perfScore=0.324677]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 16.445 secs, and comparison 22.8606 sec, and warnIfPerfScore > 2.4, and perfScore=1.39013]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 15.1832 secs, and comparison 27.6096 sec, and warnIfPerfScore > 2.8, and perfScore=1.81843]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 27 seconds]]]

