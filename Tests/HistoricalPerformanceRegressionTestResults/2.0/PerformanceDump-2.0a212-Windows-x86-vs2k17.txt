Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/6/17 10:28:39]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 12.8849 secs, and comparison 7.13657 sec, and warnIfPerfScore > 0.62, and perfScore=0.553869]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 12.708 secs, and comparison 5.73045 sec, and warnIfPerfScore > 0.65, and perfScore=0.450932]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 13.3356 secs, and comparison 11.5013 sec, and warnIfPerfScore > 1, and perfScore=0.86245]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 13.503 secs, and comparison 13.1933 sec, and warnIfPerfScore > 1.15, and perfScore=0.977062]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 12.4355 secs, and comparison 3.94014 sec, and warnIfPerfScore > 0.5, and perfScore=0.316847]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.2912 secs, and comparison 4.79588 sec, and warnIfPerfScore > 0.68, and perfScore=0.390187]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.0738 secs, and comparison 33.168 sec, and warnIfPerfScore > 4.3, and perfScore=2.53698]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.1488 secs, and comparison 35.3163 sec, and warnIfPerfScore > 4, and perfScore=2.6859]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 12.4966 secs, and comparison 111.485 sec, and warnIfPerfScore > 10.4, and perfScore=8.92121]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.2409 secs, and comparison 18.0196 sec, and warnIfPerfScore > 3.2, and perfScore=1.3609]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.2102 secs, and comparison 15.3128 sec, and warnIfPerfScore > 1.8, and perfScore=1.36597]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 10.9283 secs, and comparison 18.0509 sec, and warnIfPerfScore > 2.8, and perfScore=1.65176]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 12.4782 secs, and comparison 37.5683 sec, and warnIfPerfScore > 3.3, and perfScore=3.01073]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 13.0647 secs, and comparison 2.07774 sec, and warnIfPerfScore > 0.25, and perfScore=0.159035]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.6302 secs, and comparison 16.9373 sec, and warnIfPerfScore > 1.35, and perfScore=1.34102]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 12.8419 secs, and comparison 40.1403 sec, and warnIfPerfScore > 7.7, and perfScore=3.12573]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 13.5411 secs, and comparison 6.12984 sec, and warnIfPerfScore > 1.55, and perfScore=0.452685]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 12.3357 secs, and comparison 73.6528 sec, and warnIfPerfScore > 7.7, and perfScore=5.9707]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 13.5338 secs, and comparison 6.43452 sec, and warnIfPerfScore > 1, and perfScore=0.475442]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 16.1854 secs, and comparison 66.646 sec, and warnIfPerfScore > 7.9, and perfScore=4.11766]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.58
	DETAILS:         	[baseline test 13.4596 secs, and comparison 7.83 sec, and warnIfPerfScore > 0.8, and perfScore=0.581742]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.0313 secs, and comparison 16.2999 sec, and warnIfPerfScore > 1.7, and perfScore=1.25083]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 11.9804 secs, and comparison 4.93258 sec, and warnIfPerfScore > 0.55, and perfScore=0.411719]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.94177 sec, and warnIfPerfScore > 0.4, and perfScore=0.196118]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 15 secs, and comparison 5.10206 sec, and warnIfPerfScore > 1.1, and perfScore=0.340137]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 12.9571 secs, and comparison 17.5464 sec, and warnIfPerfScore > 2.4, and perfScore=1.3542]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.0405 secs, and comparison 23.7574 sec, and warnIfPerfScore > 2.8, and perfScore=1.82182]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 30 seconds]]]

Succeeded
