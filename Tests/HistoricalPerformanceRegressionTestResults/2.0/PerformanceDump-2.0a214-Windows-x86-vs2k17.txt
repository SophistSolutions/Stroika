Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 8/21/17 12:07:55]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.4662 secs, and comparison 6.53774 sec, and warnIfPerfScore > 0.62, and perfScore=0.524438]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 12.5637 secs, and comparison 4.36013 sec, and warnIfPerfScore > 0.65, and perfScore=0.347043]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.766 secs, and comparison 11.0038 sec, and warnIfPerfScore > 1, and perfScore=0.86196]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.4075 secs, and comparison 14.0672 sec, and warnIfPerfScore > 1.15, and perfScore=0.976386]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 11.3245 secs, and comparison 4.02567 sec, and warnIfPerfScore > 0.5, and perfScore=0.355483]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 11.3505 secs, and comparison 4.92843 sec, and warnIfPerfScore > 0.68, and perfScore=0.434204]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 13.0524 secs, and comparison 33.0327 sec, and warnIfPerfScore > 4.3, and perfScore=2.53078]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 13.5381 secs, and comparison 35.5218 sec, and warnIfPerfScore > 4, and perfScore=2.62384]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.7
	DETAILS:         	[baseline test 13.1781 secs, and comparison 115.229 sec, and warnIfPerfScore > 10.4, and perfScore=8.744]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.0946 secs, and comparison 17.0581 sec, and warnIfPerfScore > 3.2, and perfScore=1.30269]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.9305 secs, and comparison 16.5072 sec, and warnIfPerfScore > 1.8, and perfScore=1.18497]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.64787 secs, and comparison 15.5196 sec, and warnIfPerfScore > 2.8, and perfScore=1.60861]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 14.4491 secs, and comparison 39.1367 sec, and warnIfPerfScore > 3.3, and perfScore=2.70859]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 15.1208 secs, and comparison 3.13128 sec, and warnIfPerfScore > 0.25, and perfScore=0.207084]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 15.1162 secs, and comparison 15.5089 sec, and warnIfPerfScore > 1.4, and perfScore=1.02598]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 13.7517 secs, and comparison 39.8821 sec, and warnIfPerfScore > 7.7, and perfScore=2.90015]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.4818 secs, and comparison 5.69874 sec, and warnIfPerfScore > 1.55, and perfScore=0.368093]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 13.198 secs, and comparison 79.1143 sec, and warnIfPerfScore > 7.7, and perfScore=5.99441]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 15.4692 secs, and comparison 7.23412 sec, and warnIfPerfScore > 1, and perfScore=0.467645]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 17.1437 secs, and comparison 69.2436 sec, and warnIfPerfScore > 7.9, and perfScore=4.03902]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 15.3563 secs, and comparison 7.7251 sec, and warnIfPerfScore > 0.8, and perfScore=0.503059]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.568 secs, and comparison 16.2955 sec, and warnIfPerfScore > 1.7, and perfScore=1.20102]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.4228 secs, and comparison 5.18401 sec, and warnIfPerfScore > 0.55, and perfScore=0.417299]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 2.97334 sec, and warnIfPerfScore > 0.4, and perfScore=0.198223]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 15 secs, and comparison 5.74743 sec, and warnIfPerfScore > 1.1, and perfScore=0.383162]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.4247 secs, and comparison 18.9164 sec, and warnIfPerfScore > 2.4, and perfScore=1.31139]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 13.4728 secs, and comparison 24.8777 sec, and warnIfPerfScore > 2.8, and perfScore=1.8465]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 58 seconds]]]

Succeeded
