Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/15/17 10:13:13]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.55
	DETAILS:         	[baseline test 10.6502 secs, and comparison 5.89673 sec, and warnIfPerfScore > 0.62, and perfScore=0.553673]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.58 secs, and comparison 4.43387 sec, and warnIfPerfScore > 0.65, and perfScore=0.41908]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.85
	DETAILS:         	[baseline test 14.3793 secs, and comparison 12.2378 sec, and warnIfPerfScore > 1, and perfScore=0.851072]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 15.2364 secs, and comparison 14.7682 sec, and warnIfPerfScore > 1.15, and perfScore=0.96927]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 10.5661 secs, and comparison 3.36807 sec, and warnIfPerfScore > 0.5, and perfScore=0.318761]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 12.9526 secs, and comparison 5.0237 sec, and warnIfPerfScore > 0.68, and perfScore=0.387852]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 15.624 secs, and comparison 41.309 sec, and warnIfPerfScore > 4.3, and perfScore=2.64395]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 16.1741 secs, and comparison 50.8849 sec, and warnIfPerfScore > 4, and perfScore=3.14608]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.5
	DETAILS:         	[baseline test 15.7187 secs, and comparison 133.176 sec, and warnIfPerfScore > 10.4, and perfScore=8.47243]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.7289 secs, and comparison 22.2213 sec, and warnIfPerfScore > 3.2, and perfScore=1.50869]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.6052 secs, and comparison 20.5138 sec, and warnIfPerfScore > 1.8, and perfScore=1.31455]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.7
	DETAILS:         	[baseline test 16.3853 secs, and comparison 28.135 sec, and warnIfPerfScore > 2.8, and perfScore=1.71709]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 16.3474 secs, and comparison 47.5632 sec, and warnIfPerfScore > 3.3, and perfScore=2.90953]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 16.6602 secs, and comparison 2.43722 sec, and warnIfPerfScore > 0.25, and perfScore=0.14629]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 17.1276 secs, and comparison 18.0841 sec, and warnIfPerfScore > 1.25, and perfScore=1.05585]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 19.1829 secs, and comparison 72.55 sec, and warnIfPerfScore > 7.7, and perfScore=3.78201]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 18.7389 secs, and comparison 7.98586 sec, and warnIfPerfScore > 1.55, and perfScore=0.426165]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 23.0955 secs, and comparison 72.1827 sec, and warnIfPerfScore > 7.7, and perfScore=3.1254]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 15.5007 secs, and comparison 6.69556 sec, and warnIfPerfScore > 1.4, and perfScore=0.431951]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 17.8116 secs, and comparison 74.6664 sec, and warnIfPerfScore > 7.9, and perfScore=4.19202]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 14.4179 secs, and comparison 8.96943 sec, and warnIfPerfScore > 0.8, and perfScore=0.622105]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 13.7462 secs, and comparison 17.7829 sec, and warnIfPerfScore > 1.7, and perfScore=1.29366]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.271 secs, and comparison 4.35436 sec, and warnIfPerfScore > 0.55, and perfScore=0.423947]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.03033 sec, and warnIfPerfScore > 0.4, and perfScore=0.202022]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.44062 sec, and warnIfPerfScore > 1.1, and perfScore=0.362708]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 17.1 secs, and comparison 23.0396 sec, and warnIfPerfScore > 2.4, and perfScore=1.34735]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.1858 secs, and comparison 28.982 sec, and warnIfPerfScore > 2.8, and perfScore=1.79058]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 18 minutes, 36 seconds]]]

Succeeded
