Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 10/25/17 6:09:11]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 12.1708 secs, and comparison 6.33291 sec, and warnIfPerfScore > 0.62, and perfScore=0.520335]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 12.157 secs, and comparison 4.42076 sec, and warnIfPerfScore > 0.65, and perfScore=0.363639]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 12.119 secs, and comparison 10.4218 sec, and warnIfPerfScore > 1.05, and perfScore=0.859957]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 10.9909 secs, and comparison 3.92579 sec, and warnIfPerfScore > 0.5, and perfScore=0.357185]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.9283 secs, and comparison 4.78733 sec, and warnIfPerfScore > 0.68, and perfScore=0.438066]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.503 secs, and comparison 31.682 sec, and warnIfPerfScore > 4.3, and perfScore=2.53396]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.7488 secs, and comparison 34.1589 sec, and warnIfPerfScore > 4, and perfScore=2.67939]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 12.3471 secs, and comparison 110.271 sec, and warnIfPerfScore > 10.4, and perfScore=8.93096]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.4079 secs, and comparison 16.7231 sec, and warnIfPerfScore > 3.2, and perfScore=1.34778]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.9366 secs, and comparison 15.9503 sec, and warnIfPerfScore > 1.8, and perfScore=1.23296]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.41473 secs, and comparison 15.2518 sec, and warnIfPerfScore > 2.8, and perfScore=1.61999]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 14.009 secs, and comparison 39.3507 sec, and warnIfPerfScore > 3.3, and perfScore=2.80895]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 14.9178 secs, and comparison 3.17384 sec, and warnIfPerfScore > 0.25, and perfScore=0.212755]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 14.7062 secs, and comparison 13.6706 sec, and warnIfPerfScore > 1.4, and perfScore=0.929575]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3
	DETAILS:         	[baseline test 13.2316 secs, and comparison 39.0922 sec, and warnIfPerfScore > 7.7, and perfScore=2.95447]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15.3901 secs, and comparison 5.64885 sec, and warnIfPerfScore > 1.55, and perfScore=0.367044]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 12.73 secs, and comparison 76.9024 sec, and warnIfPerfScore > 7.7, and perfScore=6.04102]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 15.3773 secs, and comparison 6.9627 sec, and warnIfPerfScore > 1, and perfScore=0.452792]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.6
	DETAILS:         	[baseline test 14.9624 secs, and comparison 69.0041 sec, and warnIfPerfScore > 7.9, and perfScore=4.61183]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 15.22 secs, and comparison 7.68741 sec, and warnIfPerfScore > 0.8, and perfScore=0.505086]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.8604 secs, and comparison 15.5079 sec, and warnIfPerfScore > 1.7, and perfScore=1.20587]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 12.0542 secs, and comparison 5.08889 sec, and warnIfPerfScore > 0.55, and perfScore=0.422166]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.87224 sec, and warnIfPerfScore > 0.4, and perfScore=0.191482]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.43553 sec, and warnIfPerfScore > 1.1, and perfScore=0.362369]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 13.3984 secs, and comparison 18.3884 sec, and warnIfPerfScore > 2.4, and perfScore=1.37243]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 12.7359 secs, and comparison 23.5671 sec, and warnIfPerfScore > 2.8, and perfScore=1.85045]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 15 minutes, 2 seconds]]]

Succeeded
