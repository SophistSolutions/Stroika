Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 2/15/16 10:04:49]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.4293 secs, and comparison 6.60495 sec, and warnIfPerfScore > 0.5, and perfScore=0.457747]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.5448 secs, and comparison 4.30879 sec, and warnIfPerfScore > 0.35, and perfScore=0.296243]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.9337 secs, and comparison 12.0191 sec, and warnIfPerfScore > 0.89, and perfScore=0.804833]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.4917 secs, and comparison 14.2087 sec, and warnIfPerfScore > 1.15, and perfScore=0.980469]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.6042 secs, and comparison 3.54353 sec, and warnIfPerfScore > 0.5, and perfScore=0.227088]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.3845 secs, and comparison 4.6819 sec, and warnIfPerfScore > 0.68, and perfScore=0.304327]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.2429 secs, and comparison 42.1463 sec, and warnIfPerfScore > 4.3, and perfScore=2.59475]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 16.1935 secs, and comparison 42.6043 sec, and warnIfPerfScore > 4, and perfScore=2.63095]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.9
	DETAILS:         	[baseline test 15.312 secs, and comparison 105 sec, and warnIfPerfScore > 9.1, and perfScore=6.85737]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.187 secs, and comparison 23.0015 sec, and warnIfPerfScore > 2.45, and perfScore=1.51455]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 13.9365 secs, and comparison 14.4879 sec, and warnIfPerfScore > 1.65, and perfScore=1.03956]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 15.2131 secs, and comparison 29.7038 sec, and warnIfPerfScore > 2.7, and perfScore=1.95252]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 14.9112 secs, and comparison 39.1083 sec, and warnIfPerfScore > 3, and perfScore=2.62274]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15.1616 secs, and comparison 1.66995 sec, and warnIfPerfScore > 0.14, and perfScore=0.110144]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.0141 secs, and comparison 15.9321 sec, and warnIfPerfScore > 1.25, and perfScore=1.13686]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 16.6129 secs, and comparison 36.3944 sec, and warnIfPerfScore > 7.7, and perfScore=2.19073]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.1585 secs, and comparison 4.91765 sec, and warnIfPerfScore > 1.55, and perfScore=0.324416]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.9018 secs, and comparison 36.507 sec, and warnIfPerfScore > 7.7, and perfScore=2.29577]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15.2601 secs, and comparison 4.8504 sec, and warnIfPerfScore > 1.4, and perfScore=0.317849]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 14.8897 secs, and comparison 59.0439 sec, and warnIfPerfScore > 7.9, and perfScore=3.96541]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 14.2129 secs, and comparison 6.6471 sec, and warnIfPerfScore > 0.8, and perfScore=0.467681]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 14.7625 secs, and comparison 18.6543 sec, and warnIfPerfScore > 1.6, and perfScore=1.26363]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.2277 secs, and comparison 4.08758 sec, and warnIfPerfScore > 0.32, and perfScore=0.268431]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 15 secs, and comparison 2.14304 sec, and warnIfPerfScore > 0.4, and perfScore=0.142869]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 15 secs, and comparison 4.74398 sec, and warnIfPerfScore > 1.1, and perfScore=0.316265]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 14.1709 secs, and comparison 21.5818 sec, and warnIfPerfScore > 2.4, and perfScore=1.52297]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.7456 secs, and comparison 27.0628 sec, and warnIfPerfScore > 2.8, and perfScore=1.83532]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 14 seconds]]]

