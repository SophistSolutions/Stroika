Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/22/17 15:56:46]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 6.10736 secs, and comparison 4.75737 sec, and warnIfPerfScore > 0.62, and perfScore=0.778958]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 6.80587 secs, and comparison 3.31022 sec, and warnIfPerfScore > 0.65, and perfScore=0.486377]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 9.56956 secs, and comparison 9.55105 sec, and warnIfPerfScore > 1, and perfScore=0.998066]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 9.67362 secs, and comparison 9.38644 sec, and warnIfPerfScore > 1.15, and perfScore=0.970313]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 6.93011 secs, and comparison 3.6741 sec, and warnIfPerfScore > 0.5, and perfScore=0.530165]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.62
	DETAILS:         	[baseline test 8.54349 secs, and comparison 5.29463 sec, and warnIfPerfScore > 0.68, and perfScore=0.619727]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.3508 secs, and comparison 34.3532 sec, and warnIfPerfScore > 4.3, and perfScore=3.3189]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 11.1721 secs, and comparison 35.1389 sec, and warnIfPerfScore > 4, and perfScore=3.14523]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	11
	DETAILS:         	[baseline test 10.3961 secs, and comparison 110.669 sec, and warnIfPerfScore > 10.4, and perfScore=10.6452]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.5637 secs, and comparison 15.158 sec, and warnIfPerfScore > 3.2, and perfScore=1.31083]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.62487 secs, and comparison 5.49501 sec, and warnIfPerfScore > 1.8, and perfScore=0.976914]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 6.18256 secs, and comparison 20.3975 sec, and warnIfPerfScore > 2.8, and perfScore=3.29919]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	6.2
	DETAILS:         	[baseline test 6.74344 secs, and comparison 41.7618 sec, and warnIfPerfScore > 3.3, and perfScore=6.19296]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 8.93065 secs, and comparison 3.24098 sec, and warnIfPerfScore > 0.25, and perfScore=0.362905]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.9159 secs, and comparison 8.15518 sec, and warnIfPerfScore > 1.25, and perfScore=1.03023]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 12.2926 secs, and comparison 37.9826 sec, and warnIfPerfScore > 7.7, and perfScore=3.08988]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 9.97713 secs, and comparison 4.53541 sec, and warnIfPerfScore > 1.55, and perfScore=0.45458]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.7407 secs, and comparison 37.3897 sec, and warnIfPerfScore > 7.7, and perfScore=3.18461]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.01652 secs, and comparison 3.47345 sec, and warnIfPerfScore > 1.4, and perfScore=0.385231]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 6.53419 secs, and comparison 59.8926 sec, and warnIfPerfScore > 7.9, and perfScore=9.16603]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 7.8538 secs, and comparison 6.25802 sec, and warnIfPerfScore > 0.8, and perfScore=0.796815]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.5742 secs, and comparison 14.1838 sec, and warnIfPerfScore > 1.7, and perfScore=1.12801]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 17.8146 secs, and comparison 4.47954 sec, and warnIfPerfScore > 0.55, and perfScore=0.251454]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.56602 sec, and warnIfPerfScore > 0.4, and perfScore=0.104401]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.52312 sec, and warnIfPerfScore > 1.1, and perfScore=0.234875]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 50 seconds]]]

Succeeded
