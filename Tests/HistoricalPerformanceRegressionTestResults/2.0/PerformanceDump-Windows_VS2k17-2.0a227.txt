Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/23/18 9:09:17]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.6533 secs, and comparison 5.36463 sec, and warnIfPerfScore > 0.62, and perfScore=0.460353]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 11.1009 secs, and comparison 3.83672 sec, and warnIfPerfScore > 0.65, and perfScore=0.345622]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.89
	DETAILS:         	[baseline test 11.2679 secs, and comparison 9.98493 sec, and warnIfPerfScore > 1.05, and perfScore=0.886143]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.34
	DETAILS:         	[baseline test 10.3022 secs, and comparison 3.54079 sec, and warnIfPerfScore > 0.5, and perfScore=0.343691]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.0303 secs, and comparison 4.35239 sec, and warnIfPerfScore > 0.68, and perfScore=0.433925]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.4569 secs, and comparison 29.5144 sec, and warnIfPerfScore > 4.3, and perfScore=2.36932]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 12.9311 secs, and comparison 31.3518 sec, and warnIfPerfScore > 4, and perfScore=2.42452]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 11.0824 secs, and comparison 99.4253 sec, and warnIfPerfScore > 10.4, and perfScore=8.97142]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.441 secs, and comparison 15.2028 sec, and warnIfPerfScore > 3.2, and perfScore=1.3288]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.4102 secs, and comparison 13.4237 sec, and warnIfPerfScore > 1.8, and perfScore=1.28948]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.906 secs, and comparison 14.3577 sec, and warnIfPerfScore > 2.8, and perfScore=1.61214]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 13.6338 secs, and comparison 37.0893 sec, and warnIfPerfScore > 3.3, and perfScore=2.7204]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 14.586 secs, and comparison 1.34423 sec, and warnIfPerfScore > 0.25, and perfScore=0.0921588]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 11.595 secs, and comparison 15.6651 sec, and warnIfPerfScore > 1.4, and perfScore=1.35103]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.8598 secs, and comparison 37.8157 sec, and warnIfPerfScore > 7.7, and perfScore=3.18855]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 13.4074 secs, and comparison 5.30896 sec, and warnIfPerfScore > 1.55, and perfScore=0.395972]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.4
	DETAILS:         	[baseline test 11.4257 secs, and comparison 73.2727 sec, and warnIfPerfScore > 7.7, and perfScore=6.41299]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 13.4341 secs, and comparison 6.33487 sec, and warnIfPerfScore > 1, and perfScore=0.471551]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4.2
	DETAILS:         	[baseline test 15.4443 secs, and comparison 64.3126 sec, and warnIfPerfScore > 7.9, and perfScore=4.16416]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.56
	DETAILS:         	[baseline test 13.0328 secs, and comparison 7.26185 sec, and warnIfPerfScore > 0.8, and perfScore=0.557197]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.6807 secs, and comparison 13.9061 sec, and warnIfPerfScore > 1.7, and perfScore=1.19052]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 14.1824 secs, and comparison 4.24425 sec, and warnIfPerfScore > 0.55, and perfScore=0.299261]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.51388 sec, and warnIfPerfScore > 0.4, and perfScore=0.167592]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.96538 sec, and warnIfPerfScore > 1.1, and perfScore=0.331026]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 12.9191 secs, and comparison 16.3597 sec, and warnIfPerfScore > 2.4, and perfScore=1.26632]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.8
	DETAILS:         	[baseline test 12.0346 secs, and comparison 33.5828 sec, and warnIfPerfScore > 2.9, and perfScore=2.79051]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 37 seconds]]]

Succeeded
