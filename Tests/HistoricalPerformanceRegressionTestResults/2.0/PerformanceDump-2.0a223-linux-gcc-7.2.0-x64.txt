Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 11/25/17 11:09:33]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 6.58907 secs, and comparison 5.26896 sec, and warnIfPerfScore > 0.62, and perfScore=0.799652]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 6.5883 secs, and comparison 3.28937 sec, and warnIfPerfScore > 0.65, and perfScore=0.499275]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 7.09961 secs, and comparison 7.98649 sec, and warnIfPerfScore > 1.05, and perfScore=1.12492]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 4.26044 secs, and comparison 3.01056 sec, and warnIfPerfScore > 0.5, and perfScore=0.706633]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 5.07245 secs, and comparison 4.19164 sec, and warnIfPerfScore > 0.68, and perfScore=0.826355]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.3
	DETAILS:         	[baseline test 5.29756 secs, and comparison 22.966 sec, and warnIfPerfScore > 4.3, and perfScore=4.33519]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 6.35866 secs, and comparison 24.7253 sec, and warnIfPerfScore > 4, and perfScore=3.88844]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	28
	DETAILS:         	[baseline test 7.69554 secs, and comparison 213.053 sec, and warnIfPerfScore > 10.4, and perfScore=27.6852]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 5.44474 secs, and comparison 10.9534 sec, and warnIfPerfScore > 3.2, and perfScore=2.01174]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 6.51226 secs, and comparison 6.33573 sec, and warnIfPerfScore > 1.8, and perfScore=0.972892]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.1
	DETAILS:         	[baseline test 2.83674 secs, and comparison 11.6946 sec, and warnIfPerfScore > 2.8, and perfScore=4.12257]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 6.01341 secs, and comparison 21.0663 sec, and warnIfPerfScore > 3.3, and perfScore=3.50321]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.21067 secs, and comparison 2.39317 sec, and warnIfPerfScore > 0.25, and perfScore=0.385331]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 2.96949 secs, and comparison 3.88913 sec, and warnIfPerfScore > 1.4, and perfScore=1.30969]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 14.4381 secs, and comparison 25.8247 sec, and warnIfPerfScore > 7.7, and perfScore=1.78865]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 12.8028 secs, and comparison 2.7475 sec, and warnIfPerfScore > 1.55, and perfScore=0.214602]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 14.6967 secs, and comparison 59.4055 sec, and warnIfPerfScore > 7.7, and perfScore=4.04211]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 9.32847 secs, and comparison 5.35861 sec, and warnIfPerfScore > 1, and perfScore=0.574437]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 16.5061 secs, and comparison 53.0012 sec, and warnIfPerfScore > 7.9, and perfScore=3.21101]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 10.8286 secs, and comparison 5.32954 sec, and warnIfPerfScore > 0.8, and perfScore=0.492172]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.0826 secs, and comparison 12.4676 sec, and warnIfPerfScore > 1.7, and perfScore=1.23654]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 19.2736 secs, and comparison 3.67047 sec, and warnIfPerfScore > 0.55, and perfScore=0.19044]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 15 secs, and comparison 1.72519 sec, and warnIfPerfScore > 0.4, and perfScore=0.115012]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.2
	DETAILS:         	[baseline test 15 secs, and comparison 3.026 sec, and warnIfPerfScore > 1.1, and perfScore=0.201734]
	                 	Test_Optional_ is FASTER

[[[Tests took: 11 minutes, 40 seconds]]]

Succeeded
