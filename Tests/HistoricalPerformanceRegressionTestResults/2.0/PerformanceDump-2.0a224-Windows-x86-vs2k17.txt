Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/21/17 8:50:08]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 11.3991 secs, and comparison 5.3364 sec, and warnIfPerfScore > 0.62, and perfScore=0.468141]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.6909 secs, and comparison 3.96794 sec, and warnIfPerfScore > 0.65, and perfScore=0.371153]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.84
	DETAILS:         	[baseline test 11.7418 secs, and comparison 9.82419 sec, and warnIfPerfScore > 1.05, and perfScore=0.836686]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 10.018 secs, and comparison 3.67238 sec, and warnIfPerfScore > 0.5, and perfScore=0.366579]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.6769 secs, and comparison 4.21943 sec, and warnIfPerfScore > 0.68, and perfScore=0.395192]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 12.0485 secs, and comparison 28.2412 sec, and warnIfPerfScore > 4.3, and perfScore=2.34396]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 12.2564 secs, and comparison 30.0357 sec, and warnIfPerfScore > 4, and perfScore=2.45061]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.4
	DETAILS:         	[baseline test 11.0998 secs, and comparison 93.502 sec, and warnIfPerfScore > 10.4, and perfScore=8.42373]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.0842 secs, and comparison 14.631 sec, and warnIfPerfScore > 3.2, and perfScore=1.31999]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 11.1354 secs, and comparison 14.203 sec, and warnIfPerfScore > 1.8, and perfScore=1.27548]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 8.87665 secs, and comparison 13.7306 sec, and warnIfPerfScore > 2.8, and perfScore=1.54682]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 12.3808 secs, and comparison 36.0281 sec, and warnIfPerfScore > 3.3, and perfScore=2.91001]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 12.2714 secs, and comparison 1.44133 sec, and warnIfPerfScore > 0.25, and perfScore=0.117454]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 11.2251 secs, and comparison 11.5852 sec, and warnIfPerfScore > 1.4, and perfScore=1.03208]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 11.3898 secs, and comparison 35.8844 sec, and warnIfPerfScore > 7.7, and perfScore=3.15058]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 13.2712 secs, and comparison 5.50002 sec, and warnIfPerfScore > 1.55, and perfScore=0.414433]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	6.1
	DETAILS:         	[baseline test 11.7591 secs, and comparison 71.2559 sec, and warnIfPerfScore > 7.7, and perfScore=6.05964]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 13.3421 secs, and comparison 6.60615 sec, and warnIfPerfScore > 1, and perfScore=0.495137]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 15.3591 secs, and comparison 61.3112 sec, and warnIfPerfScore > 7.9, and perfScore=3.99185]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 13.2673 secs, and comparison 6.94328 sec, and warnIfPerfScore > 0.8, and perfScore=0.523339]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.977 secs, and comparison 14.2706 sec, and warnIfPerfScore > 1.7, and perfScore=1.30004]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 15.5547 secs, and comparison 4.25832 sec, and warnIfPerfScore > 0.55, and perfScore=0.273764]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.59731 sec, and warnIfPerfScore > 0.4, and perfScore=0.173154]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.31
	DETAILS:         	[baseline test 15 secs, and comparison 4.66265 sec, and warnIfPerfScore > 1.1, and perfScore=0.310843]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 12.9405 secs, and comparison 15.8645 sec, and warnIfPerfScore > 2.4, and perfScore=1.22596]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.7761 secs, and comparison 32.1502 sec, and warnIfPerfScore > 2.9, and perfScore=2.73012]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 14 minutes, 20 seconds]]]

Succeeded
