Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/5/17 10:40:22]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.62046 secs, and comparison 4.39357 sec, and warnIfPerfScore > 0.62, and perfScore=0.78171]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.32651 secs, and comparison 2.76306 sec, and warnIfPerfScore > 0.65, and perfScore=0.518737]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.44721 secs, and comparison 8.58953 sec, and warnIfPerfScore > 1, and perfScore=1.01685]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 8.31344 secs, and comparison 7.69481 sec, and warnIfPerfScore > 1.15, and perfScore=0.925586]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 5.49488 secs, and comparison 2.95603 sec, and warnIfPerfScore > 0.5, and perfScore=0.537961]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.86205 secs, and comparison 4.85142 sec, and warnIfPerfScore > 0.68, and perfScore=0.706992]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.63577 secs, and comparison 32.9309 sec, and warnIfPerfScore > 4.3, and perfScore=3.41757]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 10.1182 secs, and comparison 33.7061 sec, and warnIfPerfScore > 4, and perfScore=3.33125]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.37614 secs, and comparison 101.211 sec, and warnIfPerfScore > 10.4, and perfScore=13.7214]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.5646 secs, and comparison 13.9542 sec, and warnIfPerfScore > 3.2, and perfScore=1.32084]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.20632 secs, and comparison 5.19176 sec, and warnIfPerfScore > 1.7, and perfScore=0.997202]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 5.71435 secs, and comparison 19.0233 sec, and warnIfPerfScore > 2.8, and perfScore=3.32903]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 5.82474 secs, and comparison 29.8593 sec, and warnIfPerfScore > 3.3, and perfScore=5.12629]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.11854 secs, and comparison 2.40725 sec, and warnIfPerfScore > 0.25, and perfScore=0.393436]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.56822 secs, and comparison 6.17426 sec, and warnIfPerfScore > 1.25, and perfScore=1.10884]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.5
	DETAILS:         	[baseline test 9.13027 secs, and comparison 31.5209 sec, and warnIfPerfScore > 7.7, and perfScore=3.45235]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.9794 secs, and comparison 3.36804 sec, and warnIfPerfScore > 1.55, and perfScore=0.422092]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.06977 secs, and comparison 31.1117 sec, and warnIfPerfScore > 7.7, and perfScore=3.43026]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 8.03981 secs, and comparison 3.38635 sec, and warnIfPerfScore > 1.4, and perfScore=0.421198]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 6.41359 secs, and comparison 59.0633 sec, and warnIfPerfScore > 7.9, and perfScore=9.20908]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.65527 secs, and comparison 6.27983 sec, and warnIfPerfScore > 0.8, and perfScore=0.820327]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1427 secs, and comparison 13.848 sec, and warnIfPerfScore > 1.7, and perfScore=1.24279]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.883 secs, and comparison 4.36904 sec, and warnIfPerfScore > 0.55, and perfScore=0.258784]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.096
	DETAILS:         	[baseline test 15 secs, and comparison 1.43292 sec, and warnIfPerfScore > 0.4, and perfScore=0.0955283]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.53517 sec, and warnIfPerfScore > 1.1, and perfScore=0.235678]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 16 seconds]]]

Succeeded
