Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 12/27/15 9:36:42]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 14.1117 secs, and comparison 6.50984 sec, and warnIfPerfScore > 0.5, and perfScore=0.461308]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.28
	DETAILS:         	[baseline test 15.2323 secs, and comparison 4.28862 sec, and warnIfPerfScore > 0.35, and perfScore=0.281547]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.8
	DETAILS:         	[baseline test 14.8976 secs, and comparison 11.9021 sec, and warnIfPerfScore > 0.89, and perfScore=0.798929]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 14.3352 secs, and comparison 14.0212 sec, and warnIfPerfScore > 1.15, and perfScore=0.978097]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15.5307 secs, and comparison 3.52884 sec, and warnIfPerfScore > 0.5, and perfScore=0.227217]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.3
	DETAILS:         	[baseline test 15.3739 secs, and comparison 4.58954 sec, and warnIfPerfScore > 0.68, and perfScore=0.298528]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 16.4933 secs, and comparison 42.0505 sec, and warnIfPerfScore > 4.3, and perfScore=2.54956]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 17.1847 secs, and comparison 43.5287 sec, and warnIfPerfScore > 4, and perfScore=2.53299]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	6.6
	DETAILS:         	[baseline test 16.3426 secs, and comparison 107.953 sec, and warnIfPerfScore > 9.1, and perfScore=6.60564]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 16.0569 secs, and comparison 24.0732 sec, and warnIfPerfScore > 2.45, and perfScore=1.49925]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 14.5819 secs, and comparison 15.2759 sec, and warnIfPerfScore > 1.65, and perfScore=1.04759]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 16.9286 secs, and comparison 30.743 sec, and warnIfPerfScore > 2.7, and perfScore=1.81604]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.9
	DETAILS:         	[baseline test 15.0449 secs, and comparison 42.9705 sec, and warnIfPerfScore > 3, and perfScore=2.85614]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.12
	DETAILS:         	[baseline test 14.573 secs, and comparison 1.69329 sec, and warnIfPerfScore > 0.14, and perfScore=0.116193]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 14.4466 secs, and comparison 15.9283 sec, and warnIfPerfScore > 1.25, and perfScore=1.10256]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.212 secs, and comparison 35.0437 sec, and warnIfPerfScore > 7.7, and perfScore=2.30368]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.2489 secs, and comparison 4.71385 sec, and warnIfPerfScore > 1.55, and perfScore=0.330822]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 15.0478 secs, and comparison 34.5642 sec, and warnIfPerfScore > 7.7, and perfScore=2.29697]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.3729 secs, and comparison 4.7527 sec, and warnIfPerfScore > 1.4, and perfScore=0.33067]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	4
	DETAILS:         	[baseline test 14.1859 secs, and comparison 57.2194 sec, and warnIfPerfScore > 7.9, and perfScore=4.03355]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 13.9218 secs, and comparison 6.55349 sec, and warnIfPerfScore > 0.8, and perfScore=0.470736]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 17.1249 secs, and comparison 20.0523 sec, and warnIfPerfScore > 1.6, and perfScore=1.17095]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.0112 secs, and comparison 4.18247 sec, and warnIfPerfScore > 0.32, and perfScore=0.261221]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.15
	DETAILS:         	[baseline test 15 secs, and comparison 2.29644 sec, and warnIfPerfScore > 0.4, and perfScore=0.153096]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 4.91044 sec, and warnIfPerfScore > 1.1, and perfScore=0.327363]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 15.0402 secs, and comparison 22.2147 sec, and warnIfPerfScore > 2.4, and perfScore=1.47703]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.9
	DETAILS:         	[baseline test 14.8962 secs, and comparison 27.6832 sec, and warnIfPerfScore > 2.8, and perfScore=1.85841]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 16 minutes, 18 seconds]]]

