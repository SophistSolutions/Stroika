Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 11/5/16 9:48:14]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.38915 secs, and comparison 4.23884 sec, and warnIfPerfScore > 0.62, and perfScore=0.78655]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.40162 secs, and comparison 2.68069 sec, and warnIfPerfScore > 0.65, and perfScore=0.496275]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.18061 secs, and comparison 8.29189 sec, and warnIfPerfScore > 1, and perfScore=1.0136]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 8.08457 secs, and comparison 7.67168 sec, and warnIfPerfScore > 1.15, and perfScore=0.948929]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.39522 secs, and comparison 2.78993 sec, and warnIfPerfScore > 0.5, and perfScore=0.51711]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 6.76103 secs, and comparison 4.62743 sec, and warnIfPerfScore > 0.68, and perfScore=0.684426]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.39693 secs, and comparison 31.8388 sec, and warnIfPerfScore > 4.3, and perfScore=3.38821]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 10.4078 secs, and comparison 32.2527 sec, and warnIfPerfScore > 4, and perfScore=3.09889]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.15131 secs, and comparison 97.3993 sec, and warnIfPerfScore > 10.4, and perfScore=13.6198]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.3478 secs, and comparison 13.5642 sec, and warnIfPerfScore > 3.2, and perfScore=1.31083]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.9738 secs, and comparison 5.02603 sec, and warnIfPerfScore > 1.7, and perfScore=1.0105]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 5.52292 secs, and comparison 21.082 sec, and warnIfPerfScore > 2.8, and perfScore=3.81719]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 5.94883 secs, and comparison 29.3948 sec, and warnIfPerfScore > 3.3, and perfScore=4.94127]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.02882 secs, and comparison 2.24133 sec, and warnIfPerfScore > 0.22, and perfScore=0.371769]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.47169 secs, and comparison 6.03647 sec, and warnIfPerfScore > 1.25, and perfScore=1.10322]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.94285 secs, and comparison 30.5155 sec, and warnIfPerfScore > 7.7, and perfScore=3.41227]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.5137 secs, and comparison 3.27218 sec, and warnIfPerfScore > 1.55, and perfScore=0.435495]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.81908 secs, and comparison 29.7789 sec, and warnIfPerfScore > 7.7, and perfScore=3.37665]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.59466 secs, and comparison 3.27448 sec, and warnIfPerfScore > 1.4, and perfScore=0.431156]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.2
	DETAILS:         	[baseline test 6.28387 secs, and comparison 57.9201 sec, and warnIfPerfScore > 7.9, and perfScore=9.21727]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.82
	DETAILS:         	[baseline test 7.2451 secs, and comparison 5.93401 sec, and warnIfPerfScore > 0.8, and perfScore=0.819039]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.1577 secs, and comparison 13.4753 sec, and warnIfPerfScore > 1.7, and perfScore=1.20772]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 16.8235 secs, and comparison 4.33086 sec, and warnIfPerfScore > 0.55, and perfScore=0.257429]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.086
	DETAILS:         	[baseline test 15 secs, and comparison 1.28684 sec, and warnIfPerfScore > 0.4, and perfScore=0.085789]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.55792 sec, and warnIfPerfScore > 1.1, and perfScore=0.237195]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 2 seconds]]]

Succeeded
