Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/8/17 11:39:09]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.25584 secs, and comparison 4.13959 sec, and warnIfPerfScore > 0.62, and perfScore=0.787617]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.26489 secs, and comparison 2.6211 sec, and warnIfPerfScore > 0.65, and perfScore=0.497845]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.00767 secs, and comparison 8.11428 sec, and warnIfPerfScore > 1, and perfScore=1.01331]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 7.68059 secs, and comparison 7.54357 sec, and warnIfPerfScore > 1.15, and perfScore=0.98216]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.52
	DETAILS:         	[baseline test 5.47808 secs, and comparison 2.8615 sec, and warnIfPerfScore > 0.5, and perfScore=0.522354]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.71
	DETAILS:         	[baseline test 6.68575 secs, and comparison 4.716 sec, and warnIfPerfScore > 0.68, and perfScore=0.70538]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.54931 secs, and comparison 32.2147 sec, and warnIfPerfScore > 4.3, and perfScore=3.37351]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.91623 secs, and comparison 33.4441 sec, and warnIfPerfScore > 4, and perfScore=3.37266]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 6.9444 secs, and comparison 97.7577 sec, and warnIfPerfScore > 10.4, and perfScore=14.0772]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.7506 secs, and comparison 13.5628 sec, and warnIfPerfScore > 3.2, and perfScore=1.26159]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.07729 secs, and comparison 5.01156 sec, and warnIfPerfScore > 1.8, and perfScore=0.987054]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 5.64977 secs, and comparison 20.1103 sec, and warnIfPerfScore > 2.8, and perfScore=3.55949]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 5.72131 secs, and comparison 29.0478 sec, and warnIfPerfScore > 3.3, and perfScore=5.07713]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.38
	DETAILS:         	[baseline test 6.07339 secs, and comparison 2.31326 sec, and warnIfPerfScore > 0.25, and perfScore=0.380884]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.40509 secs, and comparison 6.06713 sec, and warnIfPerfScore > 1.25, and perfScore=1.12249]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.86981 secs, and comparison 30.077 sec, and warnIfPerfScore > 7.7, and perfScore=3.39094]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.42243 secs, and comparison 3.23178 sec, and warnIfPerfScore > 1.55, and perfScore=0.435408]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.80016 secs, and comparison 29.6409 sec, and warnIfPerfScore > 7.7, and perfScore=3.36823]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 7.41947 secs, and comparison 3.28314 sec, and warnIfPerfScore > 1.4, and perfScore=0.442504]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9
	DETAILS:         	[baseline test 6.30524 secs, and comparison 56.9899 sec, and warnIfPerfScore > 7.9, and perfScore=9.0385]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.83
	DETAILS:         	[baseline test 7.10139 secs, and comparison 5.86726 sec, and warnIfPerfScore > 0.8, and perfScore=0.826213]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.8837 secs, and comparison 13.3741 sec, and warnIfPerfScore > 1.7, and perfScore=1.22882]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 16.5798 secs, and comparison 4.3972 sec, and warnIfPerfScore > 0.55, and perfScore=0.265215]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.50886 sec, and warnIfPerfScore > 0.4, and perfScore=0.100591]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.41333 sec, and warnIfPerfScore > 1.1, and perfScore=0.227555]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 58 seconds]]]

Succeeded
