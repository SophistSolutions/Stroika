Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/23/18 10:52:18]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.56894 secs, and comparison 4.30332 sec, and warnIfPerfScore > 0.62, and perfScore=0.772737]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.43609 secs, and comparison 2.64824 sec, and warnIfPerfScore > 0.65, and perfScore=0.487159]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.92525 secs, and comparison 6.40664 sec, and warnIfPerfScore > 1.05, and perfScore=1.08124]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 3.26999 secs, and comparison 2.53578 sec, and warnIfPerfScore > 0.5, and perfScore=0.775471]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 3.95846 secs, and comparison 3.55079 sec, and warnIfPerfScore > 0.68, and perfScore=0.897014]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 13.8956 secs, and comparison 51.2008 sec, and warnIfPerfScore > 4.3, and perfScore=3.68467]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 15.2836 secs, and comparison 56.1474 sec, and warnIfPerfScore > 4, and perfScore=3.6737]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	28
	DETAILS:         	[baseline test 13.7226 secs, and comparison 380.918 sec, and warnIfPerfScore > 10.4, and perfScore=27.7584]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2
	DETAILS:         	[baseline test 4.61499 secs, and comparison 9.2063 sec, and warnIfPerfScore > 3.2, and perfScore=1.99487]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 7.35868 secs, and comparison 7.42893 sec, and warnIfPerfScore > 1.8, and perfScore=1.00955]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.19485 secs, and comparison 9.73727 sec, and warnIfPerfScore > 2.8, and perfScore=4.43642]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 6.76023 secs, and comparison 17.773 sec, and warnIfPerfScore > 3.3, and perfScore=2.62905]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 6.38045 secs, and comparison 2.47217 sec, and warnIfPerfScore > 0.25, and perfScore=0.38746]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 3.40504 secs, and comparison 3.85475 sec, and warnIfPerfScore > 1.4, and perfScore=1.13207]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.87
	DETAILS:         	[baseline test 26.9428 secs, and comparison 23.3468 sec, and warnIfPerfScore > 7.7, and perfScore=0.86653]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.741 secs, and comparison 2.32772 sec, and warnIfPerfScore > 1.55, and perfScore=0.216713]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 23.8401 secs, and comparison 51.3111 sec, and warnIfPerfScore > 7.7, and perfScore=2.1523]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.57
	DETAILS:         	[baseline test 7.66928 secs, and comparison 4.34693 sec, and warnIfPerfScore > 1, and perfScore=0.566797]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 28.5277 secs, and comparison 46.7847 sec, and warnIfPerfScore > 7.9, and perfScore=1.63997]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.53
	DETAILS:         	[baseline test 8.7734 secs, and comparison 4.68863 sec, and warnIfPerfScore > 0.8, and perfScore=0.534414]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.0468 secs, and comparison 10.2186 sec, and warnIfPerfScore > 1.7, and perfScore=1.2699]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 6.60533 secs, and comparison 2.15123 sec, and warnIfPerfScore > 0.55, and perfScore=0.325681]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.095
	DETAILS:         	[baseline test 15 secs, and comparison 1.42214 sec, and warnIfPerfScore > 0.4, and perfScore=0.0948095]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.17
	DETAILS:         	[baseline test 15 secs, and comparison 2.54198 sec, and warnIfPerfScore > 1.1, and perfScore=0.169465]
	                 	Test_Optional_ is FASTER

[[[Tests took: 16 minutes, 6 seconds]]]

Succeeded
