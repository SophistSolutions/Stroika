Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Mar 23 4:37:18 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 5.96724 secs, and comparison 4.57855 sec, and warnIfPerfScore > 0.62, and perfScore=0.767282]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.97708 secs, and comparison 2.84109 sec, and warnIfPerfScore > 0.5, and perfScore=0.47533]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.27213 secs, and comparison 6.81103 sec, and warnIfPerfScore > 1.05, and perfScore=1.08592]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 3.4041 secs, and comparison 3.40395 sec, and warnIfPerfScore > 0.48, and perfScore=0.999956]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 4.00056 secs, and comparison 3.97219 sec, and warnIfPerfScore > 0.55, and perfScore=0.992908]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.9
	DETAILS:         	[baseline test 2.95478 secs, and comparison 17.5008 sec, and warnIfPerfScore > 2.9, and perfScore=5.92287]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.3
	DETAILS:         	[baseline test 3.51809 secs, and comparison 18.5856 sec, and warnIfPerfScore > 2.9, and perfScore=5.28288]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.55959 secs, and comparison 54.4227 sec, and warnIfPerfScore > 9.7, and perfScore=11.9359]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 4.20905 secs, and comparison 10.0823 sec, and warnIfPerfScore > 1.6, and perfScore=2.3954]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 5.18901 secs, and comparison 5.35765 sec, and warnIfPerfScore > 1.5, and perfScore=1.0325]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.7
	DETAILS:         	[baseline test 2.34762 secs, and comparison 11.0098 sec, and warnIfPerfScore > 2.1, and perfScore=4.68977]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 4.11687 secs, and comparison 4.20729 sec, and warnIfPerfScore > 1.3, and perfScore=1.02196]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 4.30706 secs, and comparison 1.56281 sec, and warnIfPerfScore > 0.18, and perfScore=0.362847]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 3.5505 secs, and comparison 4.33123 sec, and warnIfPerfScore > 1.3, and perfScore=1.21989]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.3
	DETAILS:         	[baseline test 3.28562 secs, and comparison 7.69931 sec, and warnIfPerfScore > 1.2, and perfScore=2.34333]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.2328 secs, and comparison 1.38715 sec, and warnIfPerfScore > 0.33, and perfScore=0.104827]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.22245 secs, and comparison 42.1727 sec, and warnIfPerfScore > 6, and perfScore=13.0872]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.40505 secs, and comparison 3.93556 sec, and warnIfPerfScore > 0.5, and perfScore=0.418451]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7
	DETAILS:         	[baseline test 5.80348 secs, and comparison 40.8167 sec, and warnIfPerfScore > 4.4, and perfScore=7.03314]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.6462 secs, and comparison 3.76659 sec, and warnIfPerfScore > 0.6, and perfScore=0.353797]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 7.82598 secs, and comparison 10.8933 sec, and warnIfPerfScore > 1.5, and perfScore=1.39195]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.29
	DETAILS:         	[baseline test 6.87887 secs, and comparison 2.02046 sec, and warnIfPerfScore > 0.55, and perfScore=0.293719]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.06
	DETAILS:         	[baseline test 15 secs, and comparison 0.898741 sec, and warnIfPerfScore > 0.25, and perfScore=0.0599161]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.57002 sec, and warnIfPerfScore > 0.5, and perfScore=0.238001]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 27 seconds]]]

Succeeded
