Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/3/18 22:52:02]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.73
	DETAILS:         	[baseline test 6.38497 secs, and comparison 4.64357 sec, and warnIfPerfScore > 0.62, and perfScore=0.727265]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.9489 secs, and comparison 2.85327 sec, and warnIfPerfScore > 0.65, and perfScore=0.47963]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 6.72574 secs, and comparison 6.98349 sec, and warnIfPerfScore > 1.05, and perfScore=1.03832]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.49
	DETAILS:         	[baseline test 5.75392 secs, and comparison 2.84067 sec, and warnIfPerfScore > 0.5, and perfScore=0.493693]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.68
	DETAILS:         	[baseline test 5.83559 secs, and comparison 3.94718 sec, and warnIfPerfScore > 0.68, and perfScore=0.676397]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.6
	DETAILS:         	[baseline test 6.99064 secs, and comparison 24.9741 sec, and warnIfPerfScore > 4.3, and perfScore=3.57251]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 7.84918 secs, and comparison 26.636 sec, and warnIfPerfScore > 4, and perfScore=3.39347]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.34319 secs, and comparison 103.686 sec, and warnIfPerfScore > 10.4, and perfScore=14.12]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 8.32348 secs, and comparison 10.7499 sec, and warnIfPerfScore > 3.2, and perfScore=1.29152]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 5.33983 secs, and comparison 5.06286 sec, and warnIfPerfScore > 1.8, and perfScore=0.948131]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 3.44628 secs, and comparison 11.7018 sec, and warnIfPerfScore > 2.8, and perfScore=3.39548]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	6
	DETAILS:         	[baseline test 4.24928 secs, and comparison 25.306 sec, and warnIfPerfScore > 3.3, and perfScore=5.95537]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 6.20886 secs, and comparison 2.17499 sec, and warnIfPerfScore > 0.25, and perfScore=0.350305]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.97
	DETAILS:         	[baseline test 5.39671 secs, and comparison 5.25694 sec, and warnIfPerfScore > 1.4, and perfScore=0.9741]
	                 	Charactes::String is FASTER

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.8
	DETAILS:         	[baseline test 5.54556 secs, and comparison 21.2726 sec, and warnIfPerfScore > 7.7, and perfScore=3.83597]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 12.506 secs, and comparison 2.61426 sec, and warnIfPerfScore > 1.55, and perfScore=0.20904]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.7319 secs, and comparison 55.0867 sec, and warnIfPerfScore > 7.7, and perfScore=11.6416]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 8.76459 secs, and comparison 4.71217 sec, and warnIfPerfScore > 1, and perfScore=0.537637]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.9
	DETAILS:         	[baseline test 6.46114 secs, and comparison 51.3441 sec, and warnIfPerfScore > 7.9, and perfScore=7.9466]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 10.8857 secs, and comparison 5.06388 sec, and warnIfPerfScore > 0.8, and perfScore=0.465185]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 10.5164 secs, and comparison 11.7811 sec, and warnIfPerfScore > 1.7, and perfScore=1.12026]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 7.46037 secs, and comparison 3.23118 sec, and warnIfPerfScore > 0.55, and perfScore=0.433112]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 15 secs, and comparison 1.53488 sec, and warnIfPerfScore > 0.4, and perfScore=0.102325]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 15 secs, and comparison 2.82903 sec, and warnIfPerfScore > 1.1, and perfScore=0.188602]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 11 seconds]]]

Succeeded
