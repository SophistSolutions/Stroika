Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Sat Apr 27 15:33:47 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 11.4456 secs, and comparison 5.29623 sec, and warnIfPerfScore > 0.62, and perfScore=0.462732]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.32
	DETAILS:         	[baseline test 11.0955 secs, and comparison 3.56519 sec, and warnIfPerfScore > 0.5, and perfScore=0.321317]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.9
	DETAILS:         	[baseline test 10.9821 secs, and comparison 9.90134 sec, and warnIfPerfScore > 1.05, and perfScore=0.90159]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.39
	DETAILS:         	[baseline test 9.94428 secs, and comparison 3.85829 sec, and warnIfPerfScore > 0.48, and perfScore=0.387991]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.89255 secs, and comparison 4.18689 sec, and warnIfPerfScore > 0.55, and perfScore=0.423236]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 10.6859 secs, and comparison 26.4559 sec, and warnIfPerfScore > 2.9, and perfScore=2.47578]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 11.4871 secs, and comparison 28.4564 sec, and warnIfPerfScore > 2.9, and perfScore=2.47725]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 10.6349 secs, and comparison 94.2795 sec, and warnIfPerfScore > 9.7, and perfScore=8.86511]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.7785 secs, and comparison 13.5473 sec, and warnIfPerfScore > 1.6, and perfScore=1.15017]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.0434 secs, and comparison 13.8143 sec, and warnIfPerfScore > 1.5, and perfScore=1.14704]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 8.72791 secs, and comparison 14.0065 sec, and warnIfPerfScore > 2.1, and perfScore=1.6048]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 11.8036 secs, and comparison 10.0941 sec, and warnIfPerfScore > 1.3, and perfScore=0.855167]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.8113 secs, and comparison 1.75478 sec, and warnIfPerfScore > 0.18, and perfScore=0.136971]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.431 secs, and comparison 13.3835 sec, and warnIfPerfScore > 1.3, and perfScore=1.07662]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 9.7209 secs, and comparison 8.96111 sec, and warnIfPerfScore > 1.2, and perfScore=0.92184]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 10.262 secs, and comparison 2.29459 sec, and warnIfPerfScore > 0.33, and perfScore=0.223602]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	4.9
	DETAILS:         	[baseline test 9.45547 secs, and comparison 46.7542 sec, and warnIfPerfScore > 6, and perfScore=4.94467]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.4
	DETAILS:         	[baseline test 10.4323 secs, and comparison 4.21142 sec, and warnIfPerfScore > 0.5, and perfScore=0.403691]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 10.8418 secs, and comparison 42.039 sec, and warnIfPerfScore > 4.4, and perfScore=3.8775]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 10.1147 secs, and comparison 4.41369 sec, and warnIfPerfScore > 0.6, and perfScore=0.436363]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 15.1455 secs, and comparison 18.3356 sec, and warnIfPerfScore > 1.5, and perfScore=1.21063]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 12.8367 secs, and comparison 4.73141 sec, and warnIfPerfScore > 0.55, and perfScore=0.368583]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.094
	DETAILS:         	[baseline test 15 secs, and comparison 1.40439 sec, and warnIfPerfScore > 0.25, and perfScore=0.0936262]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 15 secs, and comparison 5.01782 sec, and warnIfPerfScore > 0.5, and perfScore=0.334521]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.1104 secs, and comparison 19.4638 sec, and warnIfPerfScore > 1.9, and perfScore=1.75185]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.3245 secs, and comparison 32.6875 sec, and warnIfPerfScore > 3, and perfScore=2.65224]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 11 minutes, 44 seconds]]]

Succeeded
