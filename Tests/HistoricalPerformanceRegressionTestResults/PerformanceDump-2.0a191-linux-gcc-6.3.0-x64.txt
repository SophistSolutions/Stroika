Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 1/27/17 13:36:27]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.4644 secs, and comparison 4.29288 sec, and warnIfPerfScore > 0.62, and perfScore=0.785609]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.5
	DETAILS:         	[baseline test 5.48288 secs, and comparison 2.71531 sec, and warnIfPerfScore > 0.65, and perfScore=0.495234]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.24681 secs, and comparison 8.41291 sec, and warnIfPerfScore > 1, and perfScore=1.02014]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 8.07392 secs, and comparison 8.00337 sec, and warnIfPerfScore > 1.15, and perfScore=0.991262]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.51
	DETAILS:         	[baseline test 5.45881 secs, and comparison 2.77228 sec, and warnIfPerfScore > 0.5, and perfScore=0.507855]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.65
	DETAILS:         	[baseline test 6.89013 secs, and comparison 4.47004 sec, and warnIfPerfScore > 0.68, and perfScore=0.64876]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 9.51947 secs, and comparison 31.6426 sec, and warnIfPerfScore > 4.3, and perfScore=3.32399]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 10.2611 secs, and comparison 32.6072 sec, and warnIfPerfScore > 4, and perfScore=3.17774]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	14
	DETAILS:         	[baseline test 7.1196 secs, and comparison 97.9592 sec, and warnIfPerfScore > 10.4, and perfScore=13.7591]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 10.6831 secs, and comparison 13.6821 sec, and warnIfPerfScore > 3.2, and perfScore=1.28073]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 5.32094 secs, and comparison 4.96798 sec, and warnIfPerfScore > 1.8, and perfScore=0.933665]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 5.65276 secs, and comparison 18.3978 sec, and warnIfPerfScore > 2.8, and perfScore=3.25466]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 5.93827 secs, and comparison 28.6782 sec, and warnIfPerfScore > 3.3, and perfScore=4.82939]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 6.21696 secs, and comparison 2.28774 sec, and warnIfPerfScore > 0.25, and perfScore=0.367983]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 5.54132 secs, and comparison 6.16475 sec, and warnIfPerfScore > 1.25, and perfScore=1.11251]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.21805 secs, and comparison 29.5017 sec, and warnIfPerfScore > 7.7, and perfScore=3.20043]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 7.70512 secs, and comparison 3.20035 sec, and warnIfPerfScore > 1.55, and perfScore=0.415354]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 8.62481 secs, and comparison 29.3073 sec, and warnIfPerfScore > 7.7, and perfScore=3.39802]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.41
	DETAILS:         	[baseline test 7.76312 secs, and comparison 3.2185 sec, and warnIfPerfScore > 1.4, and perfScore=0.414589]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	9.4
	DETAILS:         	[baseline test 6.0824 secs, and comparison 57.0738 sec, and warnIfPerfScore > 7.9, and perfScore=9.38343]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.41681 secs, and comparison 5.88466 sec, and warnIfPerfScore > 0.8, and perfScore=0.793422]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 10.8314 secs, and comparison 13.2035 sec, and warnIfPerfScore > 1.7, and perfScore=1.219]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.25
	DETAILS:         	[baseline test 16.6282 secs, and comparison 4.20931 sec, and warnIfPerfScore > 0.55, and perfScore=0.253142]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.091
	DETAILS:         	[baseline test 15 secs, and comparison 1.36583 sec, and warnIfPerfScore > 0.4, and perfScore=0.0910556]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.23
	DETAILS:         	[baseline test 15 secs, and comparison 3.45656 sec, and warnIfPerfScore > 1.1, and perfScore=0.230437]
	                 	Test_Optional_ is FASTER

[[[Tests took: 9 minutes, 58 seconds]]]

Succeeded
