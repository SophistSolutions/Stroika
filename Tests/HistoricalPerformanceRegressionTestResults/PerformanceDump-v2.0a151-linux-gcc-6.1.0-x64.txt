Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 6/22/16 22:11:53]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 5.59793 secs, and comparison 4.40806 sec, and warnIfPerfScore > 0.6, and perfScore=0.787446]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 5.45419 secs, and comparison 2.46597 sec, and warnIfPerfScore > 0.42, and perfScore=0.452124]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 8.35907 secs, and comparison 8.38419 sec, and warnIfPerfScore > 0.97, and perfScore=1.003]
	                 	SharedPtr is ***SLOWER***

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.92
	DETAILS:         	[baseline test 8.60463 secs, and comparison 7.88461 sec, and warnIfPerfScore > 1.15, and perfScore=0.916322]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 6.01155 secs, and comparison 2.85322 sec, and warnIfPerfScore > 0.5, and perfScore=0.474623]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.59
	DETAILS:         	[baseline test 7.78166 secs, and comparison 4.62724 sec, and warnIfPerfScore > 0.68, and perfScore=0.594634]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 8.95188 secs, and comparison 29.5369 sec, and warnIfPerfScore > 4.3, and perfScore=3.29952]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.2
	DETAILS:         	[baseline test 9.39541 secs, and comparison 30.4254 sec, and warnIfPerfScore > 4, and perfScore=3.23833]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 8.50757 secs, and comparison 99.0117 sec, and warnIfPerfScore > 9.1, and perfScore=11.6381]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 11.6363 secs, and comparison 13.1489 sec, and warnIfPerfScore > 3.2, and perfScore=1.12999]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 5.69827 secs, and comparison 5.63459 sec, and warnIfPerfScore > 1.7, and perfScore=0.988825]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.5
	DETAILS:         	[baseline test 6.92538 secs, and comparison 17.6188 sec, and warnIfPerfScore > 2.8, and perfScore=2.54408]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	4.8
	DETAILS:         	[baseline test 6.75403 secs, and comparison 32.4102 sec, and warnIfPerfScore > 3, and perfScore=4.79865]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 6.89072 secs, and comparison 2.47911 sec, and warnIfPerfScore > 0.22, and perfScore=0.359776]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 5.41507 secs, and comparison 7.52277 sec, and warnIfPerfScore > 1.25, and perfScore=1.38923]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	3.4
	DETAILS:         	[baseline test 9.58628 secs, and comparison 32.2638 sec, and warnIfPerfScore > 7.7, and perfScore=3.36562]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 7.4275 secs, and comparison 3.5551 sec, and warnIfPerfScore > 1.55, and perfScore=0.478639]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	3.7
	DETAILS:         	[baseline test 8.77956 secs, and comparison 32.3694 sec, and warnIfPerfScore > 7.7, and perfScore=3.68691]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.47
	DETAILS:         	[baseline test 7.57331 secs, and comparison 3.5884 sec, and warnIfPerfScore > 1.4, and perfScore=0.473822]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	8.9
	DETAILS:         	[baseline test 6.36718 secs, and comparison 56.9835 sec, and warnIfPerfScore > 7.9, and perfScore=8.94957]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 7.13464 secs, and comparison 5.65936 sec, and warnIfPerfScore > 0.8, and perfScore=0.793223]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 12.4971 secs, and comparison 13.7638 sec, and warnIfPerfScore > 1.7, and perfScore=1.10136]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 16.5875 secs, and comparison 3.73196 sec, and warnIfPerfScore > 0.47, and perfScore=0.224986]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.092
	DETAILS:         	[baseline test 15 secs, and comparison 1.38572 sec, and warnIfPerfScore > 0.4, and perfScore=0.0923813]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.22
	DETAILS:         	[baseline test 15 secs, and comparison 3.22948 sec, and warnIfPerfScore > 1.1, and perfScore=0.215299]
	                 	Test_Optional_ is FASTER

[[[Tests took: 10 minutes, 15 seconds]]]

