Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Fri Mar  8 2:1:1 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.78
	DETAILS:         	[baseline test 5.86968 secs, and comparison 4.5743 sec, and warnIfPerfScore > 0.62, and perfScore=0.77931]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.48
	DETAILS:         	[baseline test 5.87626 secs, and comparison 2.83721 sec, and warnIfPerfScore > 0.5, and perfScore=0.482826]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 6.25108 secs, and comparison 6.7969 sec, and warnIfPerfScore > 1.05, and perfScore=1.08732]
	                 	SharedPtr is ***SLOWER***

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.99
	DETAILS:         	[baseline test 3.30157 secs, and comparison 3.25609 sec, and warnIfPerfScore > 0.45, and perfScore=0.986226]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 3.96931 secs, and comparison 3.7982 sec, and warnIfPerfScore > 0.55, and perfScore=0.956893]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	5.4
	DETAILS:         	[baseline test 3.1959 secs, and comparison 17.1046 sec, and warnIfPerfScore > 2.9, and perfScore=5.35205]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.5
	DETAILS:         	[baseline test 3.96464 secs, and comparison 17.8039 sec, and warnIfPerfScore > 2.9, and perfScore=4.49069]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	12
	DETAILS:         	[baseline test 4.43575 secs, and comparison 53.2167 sec, and warnIfPerfScore > 9.7, and perfScore=11.9972]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 4.50606 secs, and comparison 9.90362 sec, and warnIfPerfScore > 1.6, and perfScore=2.19785]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 5.30504 secs, and comparison 5.21409 sec, and warnIfPerfScore > 1.5, and perfScore=0.982857]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	4.4
	DETAILS:         	[baseline test 2.33824 secs, and comparison 10.3063 sec, and warnIfPerfScore > 2.1, and perfScore=4.40771]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.96
	DETAILS:         	[baseline test 4.25636 secs, and comparison 4.10494 sec, and warnIfPerfScore > 1.3, and perfScore=0.964425]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 4.44995 secs, and comparison 1.44883 sec, and warnIfPerfScore > 0.18, and perfScore=0.325582]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.4
	DETAILS:         	[baseline test 2.33935 secs, and comparison 3.33493 sec, and warnIfPerfScore > 1.3, and perfScore=1.42558]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.4
	DETAILS:         	[baseline test 3.25204 secs, and comparison 7.67766 sec, and warnIfPerfScore > 1.2, and perfScore=2.36088]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.1
	DETAILS:         	[baseline test 13.4052 secs, and comparison 1.38185 sec, and warnIfPerfScore > 0.33, and perfScore=0.103083]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	13
	DETAILS:         	[baseline test 3.16534 secs, and comparison 42.1604 sec, and warnIfPerfScore > 6, and perfScore=13.3194]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 9.39381 secs, and comparison 3.92641 sec, and warnIfPerfScore > 0.5, and perfScore=0.417978]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	7.1
	DETAILS:         	[baseline test 5.73002 secs, and comparison 40.8025 sec, and warnIfPerfScore > 4.4, and perfScore=7.12082]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.35
	DETAILS:         	[baseline test 10.7239 secs, and comparison 3.76999 sec, and warnIfPerfScore > 0.6, and perfScore=0.35155]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.5
	DETAILS:         	[baseline test 7.69959 secs, and comparison 11.2063 sec, and warnIfPerfScore > 1.5, and perfScore=1.45544]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.19
	DETAILS:         	[baseline test 10.4878 secs, and comparison 2.04052 sec, and warnIfPerfScore > 0.55, and perfScore=0.194562]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.058
	DETAILS:         	[baseline test 15 secs, and comparison 0.864846 sec, and warnIfPerfScore > 0.25, and perfScore=0.0576564]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 15 secs, and comparison 3.58788 sec, and warnIfPerfScore > 0.5, and perfScore=0.239192]
	                 	Test_Optional_ is FASTER

[[[Tests took: 6 minutes, 25 seconds]]]

Succeeded
