Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: 3/14/17 23:54:49]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.74
	DETAILS:         	[baseline test 7.02121 secs, and comparison 5.212 sec, and warnIfPerfScore > 0.62, and perfScore=0.742322]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 7.05486 secs, and comparison 3.2087 sec, and warnIfPerfScore > 0.65, and perfScore=0.454821]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.77
	DETAILS:         	[baseline test 15.2203 secs, and comparison 11.7064 sec, and warnIfPerfScore > 1, and perfScore=0.769126]
	                 	SharedPtr is FASTER

Test IRunnable versus std::function (IRunnable vs std::function)
	PERFORMANCE_SCORE	0.95
	DETAILS:         	[baseline test 10.1423 secs, and comparison 9.60044 sec, and warnIfPerfScore > 1.15, and perfScore=0.946578]
	                 	std::function is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.16
	DETAILS:         	[baseline test 21.6729 secs, and comparison 3.56286 sec, and warnIfPerfScore > 0.5, and perfScore=0.164392]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 26.1089 secs, and comparison 5.39117 sec, and warnIfPerfScore > 0.68, and perfScore=0.206488]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.3
	DETAILS:         	[baseline test 20.6188 secs, and comparison 67.2533 sec, and warnIfPerfScore > 4.3, and perfScore=3.26175]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	3.1
	DETAILS:         	[baseline test 21.8686 secs, and comparison 67.6214 sec, and warnIfPerfScore > 4, and perfScore=3.09217]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	7.8
	DETAILS:         	[baseline test 17.691 secs, and comparison 138.471 sec, and warnIfPerfScore > 10.4, and perfScore=7.82718]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 21.1804 secs, and comparison 33.7773 sec, and warnIfPerfScore > 3.2, and perfScore=1.59474]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.7
	DETAILS:         	[baseline test 10.4633 secs, and comparison 7.30398 sec, and warnIfPerfScore > 1.8, and perfScore=0.698057]
	                 	Charactes::String is FASTER

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 19.3919 secs, and comparison 43.1374 sec, and warnIfPerfScore > 2.8, and perfScore=2.2245]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	2.2
	DETAILS:         	[baseline test 13.4117 secs, and comparison 29.4375 sec, and warnIfPerfScore > 3.3, and perfScore=2.19491]
	                 	MemoryStream<Characters::Character> is ***SLOWER***

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.24
	DETAILS:         	[baseline test 13.6897 secs, and comparison 3.22502 sec, and warnIfPerfScore > 0.25, and perfScore=0.235579]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1
	DETAILS:         	[baseline test 19.8349 secs, and comparison 20.1721 sec, and warnIfPerfScore > 1.25, and perfScore=1.017]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.363 secs, and comparison 44.2187 sec, and warnIfPerfScore > 7.7, and perfScore=2.70236]
	                 	Sequence<int> is ***SLOWER***

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.2762 secs, and comparison 4.68579 sec, and warnIfPerfScore > 1.55, and perfScore=0.328224]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 16.1789 secs, and comparison 43.7122 sec, and warnIfPerfScore > 7.7, and perfScore=2.70181]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.33
	DETAILS:         	[baseline test 14.4292 secs, and comparison 4.72524 sec, and warnIfPerfScore > 1.4, and perfScore=0.327478]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 12.8904 secs, and comparison 65.8228 sec, and warnIfPerfScore > 7.9, and perfScore=5.10633]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.54
	DETAILS:         	[baseline test 13.0897 secs, and comparison 7.02789 sec, and warnIfPerfScore > 0.8, and perfScore=0.536903]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 38.7958 secs, and comparison 41.236 sec, and warnIfPerfScore > 1.7, and perfScore=1.0629]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<Byte> (vector<Byte> vs BLOB)
	PERFORMANCE_SCORE	0.98
	DETAILS:         	[baseline test 4.97174 secs, and comparison 4.89022 sec, and warnIfPerfScore > 0.55, and perfScore=0.983603]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.37
	DETAILS:         	[baseline test 15 secs, and comparison 5.47751 sec, and warnIfPerfScore > 0.4, and perfScore=0.365167]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.26
	DETAILS:         	[baseline test 15 secs, and comparison 3.96119 sec, and warnIfPerfScore > 1.1, and perfScore=0.26408]
	                 	Test_Optional_ is FASTER

[[[Tests took: 17 minutes, 32 seconds]]]

Succeeded
