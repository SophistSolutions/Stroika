Performance score 1.0 means both sides equal (ratio), and tests setup so lower is generally better

[[[Started testing at: Thu May 23 17:21:29 2019]]]

Using TIME MULTIPLIER: 15

Test Test of simple locking strategies (mutex v shared_ptr copy) (mutex vs shared_ptr<> copy)
	PERFORMANCE_SCORE	0.44
	DETAILS:         	[baseline test 13.7055 secs, and comparison 5.99901 sec, and warnIfPerfScore > 0.62, and perfScore=0.43771]
	                 	shared_ptr<> copy is FASTER

Test Test of simple locking strategies (mutex v SpinLock) (mutex vs SpinLock)
	PERFORMANCE_SCORE	0.27
	DETAILS:         	[baseline test 13.3339 secs, and comparison 3.66248 sec, and warnIfPerfScore > 0.5, and perfScore=0.274674]
	                 	SpinLock is FASTER

Test std::shared_ptr versus Memory::SharedPtr (shared_ptr vs SharedPtr)
	PERFORMANCE_SCORE	0.93
	DETAILS:         	[baseline test 11.4483 secs, and comparison 10.6346 sec, and warnIfPerfScore > 1.05, and perfScore=0.928924]
	                 	SharedPtr is FASTER

Test Simple Struct With Strings Filling And Copying (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.43
	DETAILS:         	[baseline test 10.265 secs, and comparison 4.39602 sec, and warnIfPerfScore > 0.48, and perfScore=0.428252]
	                 	Charactes::String is FASTER

Test Simple Struct With Strings Filling And Copying2 (wstring vs Charactes::String)
	PERFORMANCE_SCORE	0.45
	DETAILS:         	[baseline test 10.4378 secs, and comparison 4.72224 sec, and warnIfPerfScore > 0.55, and perfScore=0.452417]
	                 	Charactes::String is FASTER

Test Simple String append test (+='string object') 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.6
	DETAILS:         	[baseline test 11.0031 secs, and comparison 28.0876 sec, and warnIfPerfScore > 2.9, and perfScore=2.55269]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 10x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 11.0333 secs, and comparison 29.2508 sec, and warnIfPerfScore > 2.9, and perfScore=2.65113]
	                 	Charactes::String is ***SLOWER***

Test Simple String append test (+=wchar_t[]) 100x (wstring vs Charactes::String)
	PERFORMANCE_SCORE	8.6
	DETAILS:         	[baseline test 11.5456 secs, and comparison 99.0911 sec, and warnIfPerfScore > 9.7, and perfScore=8.5826]
	                 	Charactes::String is ***SLOWER***

Test String a + b (wstring vs String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 11.8378 secs, and comparison 14.599 sec, and warnIfPerfScore > 1.6, and perfScore=1.23325]
	                 	String is ***SLOWER***

Test wstringstream << test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.1
	DETAILS:         	[baseline test 13.8715 secs, and comparison 15.2863 sec, and warnIfPerfScore > 1.5, and perfScore=1.102]
	                 	Charactes::String is ***SLOWER***

Test String::substr() (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.6
	DETAILS:         	[baseline test 9.54506 secs, and comparison 15.5071 sec, and warnIfPerfScore > 2.1, and perfScore=1.62462]
	                 	Charactes::String is ***SLOWER***

Test wstringstream versus BasicTextOutputStream (wstringstream vs MemoryStream<Characters::Character>)
	PERFORMANCE_SCORE	0.79
	DETAILS:         	[baseline test 12.7636 secs, and comparison 10.0726 sec, and warnIfPerfScore > 1.3, and perfScore=0.789166]
	                 	MemoryStream<Characters::Character> is FASTER

Test wstringstream versus StringBuilder (wstringstream vs StringBuilder)
	PERFORMANCE_SCORE	0.14
	DETAILS:         	[baseline test 12.6558 secs, and comparison 1.83083 sec, and warnIfPerfScore > 0.18, and perfScore=0.144664]
	                 	StringBuilder is FASTER

Test Simple c_str() test (wstring vs Charactes::String)
	PERFORMANCE_SCORE	1.2
	DETAILS:         	[baseline test 13.2886 secs, and comparison 16.5042 sec, and warnIfPerfScore > 1.3, and perfScore=1.24198]
	                 	Charactes::String is ***SLOWER***

Test Sequence<int> basics (vector<int> vs Sequence<int>)
	PERFORMANCE_SCORE	0.86
	DETAILS:         	[baseline test 10.7719 secs, and comparison 9.23803 sec, and warnIfPerfScore > 1.2, and perfScore=0.857604]
	                 	Sequence<int> is FASTER

Test Sequence<string> basics (vector<string> vs Sequence<string>)
	PERFORMANCE_SCORE	0.21
	DETAILS:         	[baseline test 10.5202 secs, and comparison 2.25063 sec, and warnIfPerfScore > 0.33, and perfScore=0.213934]
	                 	Sequence<string> is FASTER

Test Sequence_DoublyLinkedList<int> basics (vector<int> vs Sequence_DoublyLinkedList<int>)
	PERFORMANCE_SCORE	5.1
	DETAILS:         	[baseline test 9.70618 secs, and comparison 49.8277 sec, and warnIfPerfScore > 6, and perfScore=5.13361]
	                 	Sequence_DoublyLinkedList<int> is ***SLOWER***

Test Sequence_DoublyLinkedList<string> basics (vector<string> vs Sequence_DoublyLinkedList<string>)
	PERFORMANCE_SCORE	0.42
	DETAILS:         	[baseline test 10.9536 secs, and comparison 4.65072 sec, and warnIfPerfScore > 0.5, and perfScore=0.424585]
	                 	Sequence_DoublyLinkedList<string> is FASTER

Test Collection<int> basics (vector<int> vs Collection<int>)
	PERFORMANCE_SCORE	3.9
	DETAILS:         	[baseline test 11.4811 secs, and comparison 44.7127 sec, and warnIfPerfScore > 4.4, and perfScore=3.89445]
	                 	Collection<int> is ***SLOWER***

Test Collection<string> basics (vector<string> vs Collection<string>)
	PERFORMANCE_SCORE	0.46
	DETAILS:         	[baseline test 10.8248 secs, and comparison 4.94264 sec, and warnIfPerfScore > 0.6, and perfScore=0.456604]
	                 	Collection<string> is FASTER

Test String Chracters::Format () (sprintf vs String Characters::Format)
	PERFORMANCE_SCORE	1.3
	DETAILS:         	[baseline test 15.9487 secs, and comparison 21.0333 sec, and warnIfPerfScore > 1.5, and perfScore=1.31881]
	                 	String Characters::Format is ***SLOWER***

Test BLOB versus vector<byte> (vector<byte> vs BLOB)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 13.8805 secs, and comparison 4.94297 sec, and warnIfPerfScore > 0.55, and perfScore=0.356108]
	                 	BLOB is FASTER

Test Test_JSONReadWriteFile (15.000000 seconds vs Test_JSONReadWriteFile)
	PERFORMANCE_SCORE	0.11
	DETAILS:         	[baseline test 15 secs, and comparison 1.72065 sec, and warnIfPerfScore > 0.25, and perfScore=0.11471]
	                 	Test_JSONReadWriteFile is FASTER

Test Test_Optional_ (15.000000 seconds vs Test_Optional_)
	PERFORMANCE_SCORE	0.36
	DETAILS:         	[baseline test 15 secs, and comparison 5.46986 sec, and warnIfPerfScore > 0.5, and perfScore=0.364657]
	                 	Test_Optional_ is FASTER

Test UTF82WString win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	1.8
	DETAILS:         	[baseline test 11.6292 secs, and comparison 20.7733 sec, and warnIfPerfScore > 1.9, and perfScore=1.7863]
	                 	codecvt_utf8 is ***SLOWER***

Test WString2UTF8 win32API vs codecvt_utf8 (win32API vs codecvt_utf8)
	PERFORMANCE_SCORE	2.7
	DETAILS:         	[baseline test 12.7459 secs, and comparison 34.3723 sec, and warnIfPerfScore > 3, and perfScore=2.69674]
	                 	codecvt_utf8 is ***SLOWER***

[[[Tests took: 12 minutes, 31 seconds]]]

Succeeded
