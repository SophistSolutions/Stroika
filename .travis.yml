#
# The purpose of this file is to configure Travis CI build system integration.
#   @see https://travis-ci.com/SophistSolutions/Stroika
#
# \note We use 'Release' configurations because they builds a bit faster than the 'Debug' configurations, and
#       we are limited with travis ci to a build that takes 50 minutes. We run out of time otherwise, and maybe
#       even to some degree with these settings. May need todo more to make this work.
#       Similarly, use --openssl use-system for speed of build.
#
#       Sometimes use Debug configurations since that provides better library testing (generally)
#
# See https://travis-ci.com/SophistSolutions/Stroika for builds/status
#
# See https://config.travis-ci.com/, https://github.com/travis-ci/travis-yml/blob/master/schema.json for format of this file.
#
# TODO
#   > Consider rewriting the travis build scripts for UNIX to use docker (as I do for windows, and circleci)
#
language: cpp

os: linux

env:
  global:
    # suggested by https://docs.travis-ci.com/user/speeding-up-the-build/#parallelizing-your-build-on-one-virtual-machine
    # cat /proc/cpuinfo on unix, and %NUMBER_OF_PROCESSORS% on windows showed 2 CPUs, so -j 2
    # -j2 makes sense, -j3 empirically slightly faster (unix), but occasionally runs out of RAM--LGP 2020-03-09
    # retrying -j3 I THINK I did -j SPACE  3 (no space was right use --jobs= which is clearer and retry 2/3)
    - MAKEFLAGS="--jobs=3"

branches:
  only:
    - v2.1-Dev
    - v2.1-Release

jobs:
  allow_failures:
    - env:
        - MATRIX_EVAL="CC=clang CXX=clang++ MacOS=true" # https://stroika.atlassian.net/browse/STK-705 - retry mid december

  ## Windows builds notes
  ##   - We break the build into RunTests and RunSamples due to timeout if we try to run both together -- LGP 2020-03-08
  include:
    # Windows Configuration (RunTests)
    - os: windows
      before_install:
        - df -h
        - systeminfo
        - echo NUMBER_OF_PROCESSORS=$NUMBER_OF_PROCESSORS
        - travis_wait 30 docker pull sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19
      install:
        # Not sure why, but this run appears to require EITHER --interactive or --tty, else it fails
        - "docker run
          --interactive
          --memory 4G --cpus 2 --storage-opt 'size=30GB'
          --detach --name buildContainer
          sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19 || echo 'Failed: $?'"
        - docker ps -a
        - docker exec buildContainer pwd
        - docker exec buildContainer df -h
        - docker exec buildContainer cmd /C '"echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%"'
        - docker exec buildContainer systeminfo
        - docker exec buildContainer git clone --branch $TRAVIS_BRANCH https://github.com/SophistSolutions/Stroika.git
        # Only for build speed: --Xerces no --OpenSSL no --lzma no --boost no --sqlite no
        - docker exec --workdir c:/Stroika buildContainer sh -c "./configure Debug --arch x86 --apply-default-debug-flags --Xerces no --OpenSSL no --lzma no --boost no --sqlite no"
        - docker exec --workdir c:/Stroika buildContainer sh -c "cat ConfigurationFiles/Debug.xml"
      script:
        - docker exec --workdir c:/Stroika buildContainer sh -c "make run-tests"
      env:
        - MATRIX_EVAL="Windows=true && RunTests=true"

    # Windows Configuration (Build Samples)
    #     @todo - this is basically the same as the build steps for Windows (RunTests) - find way to refactor so the spec is shared
    - os: windows
      before_install:
        - df -h
        - systeminfo
        - echo NUMBER_OF_PROCESSORS=$NUMBER_OF_PROCESSORS
        - travis_wait 30 docker pull sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19
      install:
        # Not sure why, but this run appears to require EITHER --interactive or --tty, else it fails
        - "docker run
          --interactive
          --memory 4G --cpus 2 --storage-opt 'size=30GB'
          --detach --name buildContainer
          sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19 || echo 'Failed: $?'"
        - docker exec buildContainer pwd
        - docker exec buildContainer df -h
        - docker exec buildContainer cmd /C "echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%"
        - docker exec buildContainer systeminfo
        - docker exec buildContainer git clone --branch $TRAVIS_BRANCH https://github.com/SophistSolutions/Stroika.git
        # Only for build speed: --Xerces no --OpenSSL no --lzma no --boost no --sqlite no
        - docker exec --workdir c:/Stroika buildContainer sh -c "./configure Release --arch x86 --apply-default-release-flags --Xerces no --OpenSSL no --lzma no --boost no --sqlite no"
        - docker exec --workdir c:/Stroika buildContainer sh -c "cat ConfigurationFiles/Release.xml"
      script:
        - docker exec --workdir c:/Stroika buildContainer sh -c "make samples"
      after_failure:
        - echo "HANDLING FAILURE DUMPING DEBUG STUFF:"
        - docker exec --workdir c:/Stroika buildContainer sh -c "cat IntermediateFiles/Release/Samples-Service/WIX-Installer-Build.Out"
        - docker exec --workdir c:/Stroika buildContainer sh -c "ls -l ThirdPartyComponents/WIX/CURRENT/"
        - docker exec --workdir c:/Stroika buildContainer sh -c "chmod +x ThirdPartyComponents/WIX/CURRENT/*.exe"
        - docker exec --workdir c:/Stroika buildContainer sh -c "cd ThirdPartyComponents/WIX/CURRENT/ && ./candle -v"
        - echo "ENDING DEBUG STUFF DUMP"
      env:
        - MATRIX_EVAL="Windows=true && BuildSamples=true"

    # MacOS Configuration (still not working as of 2020-01-01 - due to https://stroika.atlassian.net/browse/STK-705 but should be soon)
    - os: osx
      osx_image: xcode11.3
      addons:
        homebrew:
          packages:
            - gnu-sed
            - p7zip
          update: true
      install:
        - system_profiler SPSoftwareDataType
        - sw_vers
        # -mmacosx-version-min=10.15 needed for https://stackoverflow.com/questions/56924853/why-xcode-11-beta-cant-use-c17s-filesystem-header
        # Only for build speed: --Xerces no --OpenSSL no
        - ./configure Release --apply-default-release-flags --append-extra-compiler-and-linker-args -mmacosx-version-min=10.15 --Xerces no --OpenSSL no
        - cat ConfigurationFiles/Release.xml
        - clang++ --version
      script:
        # We dont get output building third-party-components for a while in openssl
        - travis_wait 30 make third-party-components
        #- make all ECHO_BUILD_LINES=1
        - make all
      env:
        - MATRIX_EVAL="CC=clang CXX=clang++ MacOS=true"

    # Linux (Ubuntu - 1804) Configuration - build all
    - os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libtool-bin
            - p7zip-full
            - libcurl4-openssl-dev # for use-system libcurl
            - libnghttp2-dev # ""
            - librtmp-dev # ""
            - libpsl-dev # ""
            - libidn2-0-dev # ""
            - openssl
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
      install:
        - ./configure Release --apply-default-release-flags --openssl use-system --libcurl use-system
        - cat ConfigurationFiles/Release.xml
      script:
        - make all

    # Linux (Ubuntu - 1804) Configuration - run-tests
    - os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libtool-bin
            - p7zip-full
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
      install:
        - cat /etc/os-release
        - ./configure Release --apply-default-release-flags --openssl use-system
        - cat ConfigurationFiles/Release.xml
      script:
        - make run-tests

before_install:
  - eval "${MATRIX_EVAL}"
