#
# The purpose of this file is to configure Travis CI build system integration.
#   @see https://travis-ci.com/SophistSolutions/Stroika
#
# \note We use 'Release' configurations because they builds a bit faster than the 'Debug' configurations, and
#       we are limited with travis ci to a build that takes 50 minutes. We run out of time otherwise, and maybe
#       even to some degree with these settings. May need todo more to make this work.
#       Similarly, use --openssl use-system for speed of build.
#
# See https://travis-ci.com/SophistSolutions/Stroika for builds/status
#
language: cpp

os: linux

## I tried this directly and it didn't help, but try again as instructions on
## https://docs.travis-ci.com/user/speeding-up-the-build/#parallelizing-your-build-on-one-virtual-machine
## suggested it.
env:
  global:
    # cat /proc/cpuinfo showed 2 CPUs, so -j 2
    - MAKEFLAGS="-j 2"

branches:
  only:
    - v2.1-Dev
    - v2.1-Release

jobs:
  allow_failures:
    - env:
        - MATRIX_EVAL="CC=clang CXX=clang++ MacOS=true" # https://stroika.atlassian.net/browse/STK-705 - retry mid december
    - env:
        - MATRIX_EVAL="Windows=true"

  include:
    # Windows Configuration (still not working as of 2020-01-01)
    - os: windows
      before_install:
        - travis_wait 15 docker pull sophistsolutionsinc/stroika-buildvm-windows-vs2k19
      install:
        - docker run -d --name fred -t sophistsolutionsinc/stroika-buildvm-windows-vs2k19
        - docker exec fred git clone --branch v2.1-Dev https://github.com/SophistSolutions/Stroika.git
        # Only for build speed: --Xerces no --OpenSSL no --assertions disable
        - docker exec fred sh -c "cd Stroika && perl configure Debug --arch x86 --apply-default-debug-flags --Xerces no --OpenSSL no --assertions disable"
      script:
        - docker exec fred sh -c "cd Stroika && make all run-tests -j3"
      env:
        - MATRIX_EVAL="Windows=true"

    # GIVE UP ON THIS AND TRY DOCKER BUILD INSTEAD
    # # Windows Configuration (still not working as of 2020-01-01)
    # - os: windows
    #   before_install:
    #     #- choco install visualstudio2019buildtools --package-parameters "--includeRecommended --includeOptional"
    #     #- choco install visualstudio2019-workload-vctools
    #     #- choco install visualstudio2019buildtools --package-parameters "--allWorkloads --includeRecommended --includeOptional --passive --locale en-US"
    #     - choco install visualstudio2019community --package-parameters "--includeRecommended --includeOptional"
    #     - pwd
    #     - dir
    #     - echo $PATH
    #     - choco list --local-only
    #     - choco install -y Cygwin cyg-get
    #     - choco list --local-only
    #     - echo $PATH
    #     - dir
    #     #- PATH=/c/tools/cygwin/bin:$PATH
    #     #- echo $PATH
    #     #- ls -l C:/tools/cygwin
    #     #- where setup-x86.exe
    #     #- where cyg-get
    #     #- which make || echo "which make failed"
    #     # THIS HANGS- cmd /C "cyg-get.bat default make unzip git wget patch pkg-config dos2unix p7zip"
    #     # THIS HANGS- cmd /C "cyg-get default make unzip git wget patch pkg-config dos2unix p7zip"
    #     # THIS HANGS - cyg-get default make unzip git wget patch pkg-config dos2unix p7zip
    #     #suggested by https://travis-ci.community/t/cygwin-issue-cygheap-base-mismatch-detected/5359/2
    #     - C:/tools/cygwin/bin/bash.exe -c "cyg-get default make unzip git wget patch pkg-config dos2unix p7zip"
    #     ### TO TRY- powershell "cyg-get default make unzip git wget patch pkg-config dos2unix p7zip"
    #     #NEXT TO TEST- cmd /C "cyg-get default make unzip git wget patch pkg-config dos2unix p7zip"
    #   install:
    #     #- PATH=/c/tools/cygwin/bin:$PATH
    #     - perl configure Release-32 --arch x86 --apply-default-release-flags
    #     - cat ConfigurationFiles/Release.xml
    #   script:
    #     - make all -j2
    #   env:
    #     - MATRIX_EVAL="Windows=true"

    # MacOS Configuration (still not working as of 2020-01-01 - due to https://stroika.atlassian.net/browse/STK-705 but should be soon)
    - os: osx
      osx_image: xcode11.3
      addons:
        homebrew:
          packages:
            - gnu-sed
            - p7zip
      install:
        # -mmacosx-version-min=10.15 needed for https://stackoverflow.com/questions/56924853/why-xcode-11-beta-cant-use-c17s-filesystem-header
        - ./configure Release --apply-default-release-flags --append-extra-compiler-and-linker-args -mmacosx-version-min=10.15
        - cat ConfigurationFiles/Release.xml
      script:
        - clang++ --version
        - make all ECHO_BUILD_LINES=1
      env:
        - MATRIX_EVAL="CC=clang CXX=clang++ MacOS=true"

    # Linux (Ubuntu - 1804) Configuration - build all
    - os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libtool-bin
            - p7zip-full
            - libcurl4-openssl-dev # for use-system libcurl
            - libnghttp2-dev # ""
            - librtmp-dev # ""
            - libpsl-dev # ""
            - libidn2-0-dev # ""
            - openssl
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
      install:
        - ./configure Release --apply-default-release-flags --openssl use-system --libcurl use-system
        - cat ConfigurationFiles/Release.xml
      script:
        - make all

    # Linux (Ubuntu - 1804) Configuration - run-tests
    - os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libtool-bin
            - p7zip-full
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
      install:
        - cat /etc/os-release
        - ./configure Release --apply-default-release-flags --openssl use-system
        - cat ConfigurationFiles/Release.xml
      script:
        - make run-tests

before_install:
  - eval "${MATRIX_EVAL}"
