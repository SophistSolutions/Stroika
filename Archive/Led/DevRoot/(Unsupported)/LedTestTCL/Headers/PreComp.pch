/* Copyright(c) Lewis Gordon Pringle, Jr. 1994-1996.  All rights reserved */

/*
 * $Header: /cygdrive/k/CVSRoot/(Unsupported)/LedTestTCL/Headers/PreComp.pch,v 2.9 1996/09/01 17:12:49 lewis Exp $
 *
 * Description:
 *
 *
 * TODO:
 *
 * Notes:
 *
 *
 * Changes:
 *	$Log: PreComp.pch,v $
 *	Revision 2.9  1996/09/01 17:12:49  lewis
 *	***Led 20 Released***
 *	
 *	Revision 2.8  1996/08/05  06:10:03  lewis
 *	Lose qIncludeAWINotebookHacks and added #define       qUseInternetConfig              0 TMP HACK.
 *
 *	Revision 2.7  1996/02/26  23:20:16  lewis
 *	No longer define qTCL
 *
 *	Revision 2.6  1996/02/05  04:33:31  lewis
 *	qTCL=1
 *
 *	Revision 2.5  1996/01/11  08:36:36  lewis
 *	done need ansi_params crap anymore - using OLD CW8 libraries - not new
 *	MSL.
 *
 *	Revision 2.4  1996/01/04  00:39:24  lewis
 *	qDebug depends - by default now - on __option (dont_inline).
 *	Lose most unneeded #includes (still some needed to build
 *	TCL).
 *	#define #define __dest_os and #include <ansi_parms.h> for CW8 compat.
 *
 *	Revision 2.3  1995/11/24  20:52:47  lewis
 *	Add qIncludeAWINotebookHacks define (off by default)
 *
 *	Revision 2.2  1995/11/05  00:08:55  lewis
 *	Added qStyledTextEdit define (true)
 *
 *	Revision 2.1  1995/10/19  22:36:39  lewis
 *	*** empty log message ***
 *
 *
 *
 *
 */
#ifndef CW_TCL_HDR
#define CW_TCL_HDR


// TMP hack to avoid having to setup paths etc...
#define	qUseInternetConfig		0


#ifdef	rez
	#define	qRez		1
#else
	#define	qRez		0
#endif


// You can manually specify qDebug flag, but I now let it default to the
// 'dont_inline' flag since that almost always tracks if we are doing debug
// builds or not... That way, I don't have to change the precomp file...
#ifndef	qDebug
	#if		qRez
		#define	qDebug	0
	#else
		#if		__option (dont_inline)
			#define	qDebug	1
		#else
			#define	qDebug	0
		#endif
	#endif
#endif



// retail ability to build no-style-run version of Led
#define	qStyledTextEdit	1


// Led specific defines
//#define	qLed_CharacterSet		qASCII_CharacterSet
//#define	qLed_CharacterSet		qSJIS_CharacterSet


#define qMacOS 		1
#define	qWindows	0

#if		qDebug
	#undef	NDEBUG
	#define	__TCL_DEBUG__	1
#else
	#define NDEBUG	1
	#undef	__TCL_DEBUG__
#endif




#if		!qRez

	#if		!qDebug
		// looks like it might be faster...
		#define	TCL_USE_MW_OPER_NEW		1
	#endif
	
	
	// use Metrowerks’ standard precompiled header file
	#include	<MacHeaders.c>
	
	
	#undef TRUE						// redefined in <THINK.h>
	#undef FALSE
	#pragma cplusplus on			// wonder why this is necessary?
	
	
	//________________________________________________________________________
	//
	// several new conditional compilation macros for the CodeWarrior port
	//
	
	#define TCL_CW_VERSION 5
		// Set this macro to the current release number of CodeWarrior
		// (currently CW/5). As features are added to CodeWarrior, this
		// macro will be used to maintain compatibility with older
		// versions.
		//
		// NOTE: There is no support for compilation under CW/4 or earlier.
	
	#if TCL_CW_VERSION==5
	#define TCL_NO_PRECOMPILED_TEMPLATES
	#endif
		// In CW/5 it is not possible to precompile template definitions. *sigh*
		// This restriction should be lifted for CW/6.
	
	//#define TCL_USE_MW_OPER_NEW
		// Flag to use the optional Metrowerks implementation of "operator new".
		// Disable to route new/delete directly to NewPtr/DisposePtr, for easier
		// debugging.
		
	#define TCL_NO_DEBUGGER_CALLS
		// Because all the Debugger() calls aren’t trapped by CW’s source-level
		// debugger. It’s just plain annoying to drop into MacsBug all the
		// time (especially in PPC code)!
		
	#define TCL_NO_PATCHES
		// Because LoadSeg_Patch doesn’t work with CW. Applies only
		// to 68K builds.
	
	//#define TCL_USE_PP_EXCEPTIONS
		// Optional switch to use the PowerPlant exception library instead of Bedrock
		// Exception Library. Requires UException and UDebugging from PowerPlant.
		// (Added in 1.2 port.)
	#define TCL_COMPILER_EXCEPTIONS
	
	
	#define CPP_TCL						// for C++ only TCL (obsolete)
	#define __TCL__						// compiling for use in TCL
	#ifndef TCL_USE_PP_EXCEPTIONS		// •• CW TCL: optional replacement of BEL
	#define TCL_USE_BEL					// define to use Bedrock Exception Library
	#endif								// •• CW TCL
	
	#define TCL_BREAK_CATCH				// enter debugger on catch_all_()
	#define TCL_BREAK_FAILURE			// enter debugger on Failure()
	#define TCL_BREAK_ASSERT			// enter debugger on TCL_ASSERT fail
	
	#if defined(TCL_DEBUG) || defined(BR_DEBUG)
	#define __TCL_DEBUG__ 1				//  debugging code, ASSERT, etc.
	#endif
	
	// LGP 950125 - I DONT USE (esp with MW)
	#define TCL_NO_INSPECTOR
	
	//	If unsafe allocations, e.g., new CBitMap instead of
	//	TCL_NEW(CBitMap, ()) of TCL_AUTODESTRUCT_OBJECT class objects
	//	is allowed, e.g., while converting applications, uncomment:
	
	#define TCL_UNSAFE_ALLOCATION
	
	
	//	To preset objects allocated by operator new to a particular
	//	value, define TCL_PRESET_OBJECTS to a value in the range 0-255.
	//	 A value of 0 is compatible with previous releases; other values,
	//	e.g., 0xFE can be useful for debugging. TCL_PRESET_OBJECTS is
	//	not used in the header files; putting it in the compiler prefix
	//	instead allows you to use one version of TCLHeaders for all
	//	projects.
	
		// LGP 950125 - they preset to zero - I set to bad value on when debugging...
	#if 1
		#if		qDebug
			#define TCL_PRESET_OBJECTS 0xFE
		#endif
	#else
	#define TCL_PRESET_OBJECTS 0
	#endif
	
	// Set for BEL
	#define BR_BUILD_MAC
	#define BR_qUsePlatformAlloc
	
	
	//	Detect universal headers and set flag
	
	#if defined(__CONDITIONALMACROS__)
	#define TCL_UNIVERSAL_HEADERS
	
	#if defined(powerc) || defined(__powerc)
	#define TCL_POWER_PC
	#define TCL_NO_INSPECTOR
	#endif
	
	#ifdef Length								// •• CW TCL: for new Univ Headers
	#undef Length								// •• CW TCL
	#endif										// •• CW TCL
	
	#define Length(s)	(*(unsigned char *)(s))
	#define GetIndPat(patptr, id, index) GetIndPattern(patptr, id, index)
	#else // not universal headers
	#define GetIndPat(patptr, id, index) GetIndPattern(*(patptr), id, index)
	#define LMGetMBarHeight() (* (short *) 0x0BAA)
	#endif
	
	//	The PPC compiler has an option to switch '\r' and '\n'
	//	Define a TCL_CR value that is insensitive to this option
	//	and is compatible with previous release of Object I/O
	
	#define TCL_CR 0xD
	
	
	//	Without these precompiled, much of TCL won't compile...
	#include "TCL.h"
	#include "Global.h"
	#include "Constants.h"
	#include "Commands.h"
	#include "OSChecks.h"
	#include "TCLUtilities.h"
	#include "TBUtilities.h"
	#include "LongCoordinates.h"
	#include "TCLpstring.h"
	
	#undef TCL_PCH
	
	
	// LGP patch cuz I don't like how they handled asserts by default...
	#undef	TCL_ASSERT
	#ifdef		__TCL_DEBUG__
		short MY_TCL_assertion_failed (char *condition, char *fileName, int lineNum);
		#define TCL_ASSERT(condition) ((void) ((condition) || (MY_TCL_assertion_failed(#condition, __FILE__, __LINE__),1)))
	#else
		#define TCL_ASSERT(condition) ((void)0)
	#endif

#endif


#endif  // #ifndef CW_TCL_HDR
