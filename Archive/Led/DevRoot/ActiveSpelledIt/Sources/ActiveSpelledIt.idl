/* Copyright(c) Sophist Solutions, Inc. 1994-2001.  All rights reserved */

/*
 * This file will be processed by the MIDL tool to
 * sproduce the type library (ActiveSpelledIt.tlb) and marshalling code.
 *
 * $Header: /cygdrive/k/CVSRoot/ActiveSpelledIt/Sources/ActiveSpelledIt.idl,v 1.8 2003/12/17 21:01:32 lewis Exp $
 *
 * Changes:
 *	$Log: ActiveSpelledIt.idl,v $
 *	Revision 1.8  2003/12/17 21:01:32  lewis
 *	SPR#1600: Change FindWordBreaks method to return an Object (_WordInfo) - and created and supported that new object.
 *	
 *	Revision 1.7  2003/12/17 01:59:52  lewis
 *	SPR#1585: also added propget AddWordToUserDictionarySupported
 *	
 *	Revision 1.6  2003/12/17 01:19:20  lewis
 *	SPR#1585: Added several new UD/SD loading APIs to ActiveSpelledIt. Minimal testing of the
 *	new APIs - but at least saving to UDs works (AddWordToUD UI/API).
 *	
 *	Revision 1.5  2003/06/12 17:33:55  lewis
 *	SPR#1425: fix last checkin message: really did a few small cheanges like passing in
 *	CURSOR arg to CreateScanContext API (with IDL defaultValue(0)) and added LookupWord () method
 *	
 *	Revision 1.4  2003/06/12 17:30:39  lewis
 *	SPR#1526: significantly embellished test suiteTests/ActiveSpelledItCtl.htm
 *	
 *	Revision 1.3  2003/06/10 16:30:31  lewis
 *	*** empty log message ***
 *	
 *	Revision 1.2  2003/06/10 14:30:04  lewis
 *	SPR#1526: more work - improved test suite - added basic DEMO-MODE support,
 *	added version# OLE AUTOMATION API, exception safety in OLEAUT code, and maybe
 *	a bit more...
 *	
 *	Revision 1.1  2003/06/10 02:06:16  lewis
 *	first cut at ActiveSpelledIt control
 *	
 *
 *
 *
 */

#include	"olectl.h"

import "oaidl.idl";
import "ocidl.idl";



[
	object,
	uuid(D3241A98-5959-4414-998F-EF1CFBEDF1A5),
	dual,
	nonextensible,
	helpstring("IActiveSpelledItCtl Interface"),
	pointer_default(unique)
]
interface IActiveSpelledItCtl : IDispatch {
	[helpstring("method GenerateSuggestions")] HRESULT GenerateSuggestions ([in] BSTR missingWord, [out,retval]VARIANT* results);
	[helpstring("method CreateScanContext")] HRESULT CreateScanContext (BSTR text, [in,defaultvalue(0)]UINT cursor, [out,retval] IDispatch** scanContext);
	[propget, helpstring("property VersionNumber")] HRESULT VersionNumber ([out, retval] LONG* pVal);
	[propget, helpstring("property ShortVersionString")] HRESULT ShortVersionString ([out, retval] BSTR* pVal);
	[helpstring("method LookupWord")] HRESULT LookupWord (BSTR word, [out,defaultvalue(NULL)]BSTR* matchedWord, [out, retval] VARIANT_BOOL* found);
	[id (101), helpstring("method FindWordBreaks wordInfo result of type IActiveSpelledIt_WordInfo")] HRESULT FindWordBreaks ([in] BSTR srcText, [in, defaultvalue(0)] UINT textOffsetToStartLookingForWord,
											[retval, out] IDispatch** wordInfo
										);
	[propget, helpstring("property Available System Dictionaries - array of strings")] HRESULT AvailableSystemDictionaries ([out, retval] VARIANT* pVal);
	[propget, helpstring("property In-Use System Dictionaries - array of strings")] HRESULT SystemDictionaryList ([out, retval] VARIANT* pVal);
	[propput, helpstring("property In-Use System Dictionaries - array of strings")] HRESULT SystemDictionaryList ([in] VARIANT val);
	[propget, helpstring("property in-use dictionary list - including UD- array of strings")] HRESULT DictionaryList ([out, retval] VARIANT* pVal);
	[propget, helpstring("property UserDictionary - if null string - then none")] HRESULT UserDictionary ([out, retval] BSTR* pUDName);
	[propput, helpstring("property UserDictionary")] HRESULT UserDictionary ([in] BSTR UDName);
	[propget, helpstring("property DefaultUserDictionaryName - only guaranteed legitimate UD name to use (for security reasons)")] HRESULT DefaultUserDictionaryName ([out, retval] BSTR* pUDName);
	[helpstring("")] HRESULT AddWordToUserDictionary ([in] BSTR word);
	[propget, helpstring("")] HRESULT AddWordToUserDictionarySupported ([out, retval] VARIANT_BOOL* supported);
};



[
	object,
	uuid(B86F5832-5874-4952-B88C-A27CC820B976),
	dual,
	nonextensible,
	helpstring("IActiveSpelledIt_ScanContext Interface"),
	pointer_default(unique)
]
interface IActiveSpelledIt_WordInfo : IDispatch{
	[propget] HRESULT WordStart ([out, retval] UINT* pVal);
	[propget] HRESULT WordEnd ([out, retval] UINT* pVal);
	[propget] HRESULT WordReal ([out, retval] VARIANT_BOOL* pVal);
};





[
	object,
	uuid(8CBD536B-9816-4A2E-98BD-5761DAE6D379),
	dual,
	nonextensible,
	helpstring("IActiveSpelledIt_ScanContext Interface"),
	pointer_default(unique)
]
interface IActiveSpelledIt_ScanContext : IDispatch{
	[propget, helpstring("property WordFound")] HRESULT WordFound ([out, retval] VARIANT_BOOL* pVal);
	[propget, helpstring("property WordStart")] HRESULT WordStart ([out, retval] ULONG* pVal);
	[propget, helpstring("property WordEnd")] HRESULT WordEnd ([out, retval] ULONG* pVal);
	[propget, helpstring("property Word")] HRESULT Word ([out, retval] BSTR* pVal);
	[helpstring("method Next")] HRESULT Next ();
	[propget, helpstring("property Suggestions")] HRESULT Suggestions ([out, retval] VARIANT* pVal);
	[propget, helpstring("property Cursor")] HRESULT Cursor ([out, retval] ULONG* pVal);
};



[
	uuid(2C7971C0-67BB-4CA9-9098-25D468DF744D),
	version(1.0),
	helpstring("ActiveSpelledIt 1.0 Type Library")
]
library ActiveSpelledItLib
{
	importlib("stdole2.tlb");
	[
		uuid(2D8F976C-2869-49D4-BCC7-B1555EA76C2C),
		helpstring("ActiveSpelledItCtl Class")
	]
	coclass ActiveSpelledItCtl
	{
		[default] interface IActiveSpelledItCtl;
	};

	[
		uuid(93890BC2-F754-404E-A1DA-12AA7E3AB89A),
		hidden,
		helpstring("For some reason - interface definitions don't appear to get generated in the typelib unless you declare define a co-class that uses them. Thats a problem if you want to generate the object internally.")
	]
	coclass BOGUS_TO_GET_INTERFACES_EXPORTED
	{
		interface IActiveSpelledIt_ScanContext;
		interface IActiveSpelledIt_WordInfo;
	};
};
