{\rtf1 \ansi {\fonttbl {\f0 \fnil Courier New;}{\f1 \fnil Times New Roman;}}{\colortbl \red0\green0\blue0;\red255\green0\blue0;}
{\*\listtable{\list \listtemplateid28703 {\listlevel \levelnfc23 \leveljc0 \levelfollow0 \levelstartat1 \levelindent0 {\leveltext \levelnfc23 \leveltemplateid23811 \'01\u8226  ?;}\f0 \fi-360 \li720 \jclisttab \tx720 }\listid9894 }}
{\*\listoverridetable{\listoverride \listid9894 \listoverridecount0 \ls1 }}
\deftab720 {\*\generator Sophist Solutions, Inc. Led RTF IO Engine - 3.1a8x;}\pard \qc \tx6048 \plain \f1 \fs48 \b \ul \cf1 ActiveSpelledIt!\plain \f1 \fs48 \cf0   3.1 Reference\par \pard \qc \tx6048 \plain \f1 \fs48 \i \cf0 (pre-release)\plain \f0 \fs24 \cf0 \par \pard \plain \f1 \fs24 \cf0 \par \pard \par \pard \tab ActiveLedIt! is controlled via 
OLE Automation. It has a direct automation API, and it has a callback interface 
- on which you can receive events, or callback notifications of changes to the t
ext.\par \pard \plain \f1 \fs48 \i \cf0 \tab <<<< ALL THESE DOCS ARE OBSOLETE - AND BASED ON ACTIVLEDIT - MUST FIX FOR 
ACTIVESPELLEDIT!!!>>>\par \pard \plain \f1 \fs24 \cf0 \par \pard \par \pard \plain \f1 \fs28 \b \ul \cf0 ActiveLedIt! HTML <Param> tag arguments:\plain \f1 \fs24 \cf0 \par \pard \par \pard \tab See the web p
age sample 'PreloadingSample.html' for an example of how to use the <PARAM> tags
.\par \pard \par \pard \tx6480 \plain \f0 \fs24 \b \cf0 DefaultFontFace\plain \f0 \fs24 \cf0 \par \pard \tab \plain \f1 \fs24 \cf0 Set the default font name used for the control instance.\par \pard \par \pard \tx6480 \plain \f0 \fs24 \b \cf0 \par \pard \tx6480 D
efaultFontSize\plain \f0 \fs24 \cf0 \par \pard \tab \plain \f1 \fs24 \cf0 Set the default font size used for the control instance.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \b \cf0 Text\plain \f0 \fs24 \cf0 \par \pard 
\tab \plain \f1 \fs24 \cf0 Sets all the text of the ActiveLedIt! buffer to the argument plain text.\par \pard \tab \plain \f1 \fs24 \i \cf0 NB: A
rguments to <PARAM> tags are interpreted by the web browser before being passed 
to the ActiveLedIt control. See "Encoding HTML <Param> Tags for default Text spe
cification" below.\plain \f1 \fs24 \cf0 \par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \b \cf0 TextRTF\plain \f0 \fs24 \cf0 \par \pard \tab \plain \f1 \fs24 \cf0 Sets all the text of the ActiveLedIt! buffer to th
e argument RTF text.\par \pard \tab \plain \f1 \fs24 \i \cf0 NB: Arguments to <PARAM> tags are interpreted by the web b
rowser before being passed to the ActiveLedIt control. See "Encoding HTML <Param
> Tags for default Text specification" below.\plain \f1 \fs24 \cf0 \par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \b \cf0 TextHTML\plain \f0 \fs24 \cf0 \par \pard \tab \plain \f1 \fs24 \cf0 Sets all the text of t
he ActiveLedIt! buffer to the argument HTML text.\par \pard \tab \plain \f1 \fs24 \i \cf0 NB: Arguments to <PARAM> tags
 are interpreted by the web browser before being passed to the ActiveLedIt contr
ol. See "Encoding HTML <Param> Tags for default Text specification" below.\plain \f1 \fs24 \cf0 \par \pard \tx6480 \par \pard \par \pard \plain \f1 \fs24 \b \ul \cf0 Enc
oding HTML <Param> Tags for default Text specification:\plain \f1 \fs24 \cf0 \par \pard \par \pard \tab When you use an HTML <
PARAM> tag, beware that the value argument is parsed and decoded by the HTML int
erpretter (e.g. Microsoft Internet Explorer).\par \pard \li720 \plain \f0 \fs18 \cf0 <OBJECT\par \pard \li720 \tab ID="ActiveLedIt"\par \pard \li720 \tab WIDTH=5
00 HEIGHT=200\par \pard \li720 \tab CLASSID="CLSID:9A013A76-AD34-11D0-8D9B-00A0C9080C73"\par \pard \li720 >\par \pard \li720 \tab <param Na
me="Text" Value="1 &lt; 2">\par \pard \li720 </Object>\par \pard \plain \f1 \fs24 \cf0 \par \pard \tab This will produce the text value "1 < 2"
 in ActiveLedIt. This is true EVEN THOUGH you used the "Text" attribute instead 
of "TextHTML". The reason is that the browser itself interprets the entity refer
ences before passing them to the ActiveX control.\par \pard \par \pard \tab This is something of a probl
em for the "TextRTF" attribute as well. Ampersands that appear in the RTF conten
t run the risk of being interpreted by HTML interpreter as part of an enttiy ref
erence, and thereby changing the meaning of the input RTF.\par \pard \par \pard \tab Much worse - if you
 put HTML text in that context - you are in for REAL trouble. The entity referen
ces are converted to their values before being passed to ActiveLedIt. This break
s the HTML content so that it cannot be interpreted properly by ActiveLedIt (bec
ause - for example - a user might have had an entity reference '<' or a '"' char
acter which would break how the document was to be parsed).\par \pard \par \pard \tab So - when dynamica
lly generating content for a <PARAM> tag, you can use the procedure:\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \plain \f0 \fs18 \cf0 <Script Lan
guage="JScript" RunAt="Server">\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab function\tab EncodeStringForHTMLAttribute (s)\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \{\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab 
\tab \tab // convert special HTML characters to entities\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab var result = "";\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab var sLen
gth = s.length;\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab for (i = 0; i < sLength; ++i) \{\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab switch (s.charAt(i)) \{\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab 
\tab \tab \tab case '<': result += "&lt;"; break;\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab case '>': result += "&gt;"; break;\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab 
\tab \tab \tab case '&': result += "&amp;"; break;\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab case '\\"': result += "&quot;"; break
;\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab case '\\t': result += "&#09;"; break;\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab default:  \{\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \tab var\tab ccode\tab = s
.charCodeAt (i);\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \tab if ((ccode < 32 || ccode > 127) &&\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \tab     (ccode != 10
 && ccode != 13)) \{\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \tab \tab result +=  "&#" + ccode.toString () + ";";\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \tab \}\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab 
\tab \tab \tab \tab else \{\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \tab \tab result += s.charAt(i);\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \tab \}\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \tab \}\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \tab \}\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab \}\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \tab return res
ult;\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 \tab \tab \}\par \pard \tx1080 \tx1440 \tx1800 \tx2160 \tx2520 \li720 \ri-360 </Script>\par \pard \plain \f1 \fs24 \cf0 \par \pard \tab Use that procedure server-side (as in SimpleActiveLedItASP2
FromServerDemo.asp) to encode the input text for the ActiveLedIt control when yo
u are dynamically creating an HTML page.\par \pard \par \pard \par \pard \par \pard \plain \f1 \fs28 \b \ul \cf0 ActiveLedIt! Automation Interface:\plain \f1 \fs24 \cf0 \par \pard \par \pard 
\par \pard \plain \f1 \fs24 \b \ul \cf0 Properties:\par \pard \plain \f1 \fs24 \cf0 \tab These can be both retrieved, and set (analogous to get/set methods
).\par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 VersionNumber\plain \f0 \fs24 \cf0 ;\tab [ read-only ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab Returns the ActiveLedIt! numeric version n
umber. The form of the version number is a 4-byte longword, computed as:\par \pard \tab \plain \f0 \fs18 \cf0 value=
\tab (static_cast<unsigned long> (majorMinor)<<24) |\par \pard \tab \tab (static_cast<unsigned long> (
versStage)<<16) |\par \pard \tab \tab (static_cast<unsigned long> (subStage)<<8) |\par \pard \tab \tab (static_cast<
unsigned long> (nonDemoFlag)<<0);\plain \f1 \fs24 \cf0 \par \pard \tab \plain \f0 \fs18 \cf0 #define\tab qLed_Version_Stage_Dev\tab \tab \tab 0x1\par \pard \tab #define
\tab qLed_Version_Stage_Alpha\tab \tab \tab 0x2\par \pard \tab #define\tab qLed_Version_Stage_Beta\tab \tab \tab 0x3\par \pard \tab #define\tab 
qLed_Version_Stage_ReleaseCandidate\tab 0x4\par \pard \tab #define\tab qLed_Version_Stage_Release\tab \tab \tab 0x
5\par \pard \plain \f1 \fs24 \cf0 \par \pard \tab So, for example, ActiveLedIt! 3.0b7 (demo version) should have a hex version
# of 0x30030700. Note - this is the same value as the Win32 FILEVERSION. See als
o \plain \f0 \fs20 \cf0 GetShortVersionString ().\plain \f1 \fs24 \cf0 \par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 ShortVersionString\plain \f0 \fs24 \cf0 ;\plain \f0 \fs24 \b \cf0 \tab \plain \f0 \fs24 \cf0 [ read-only ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab Returns a 
string representation of the ActiveLedIt! version. For example, it might return 
"3.0b8 - Demo Version" or "3.0b8".\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 hWnd\plain \f0 \fs24 \cf0 ;\plain \f0 \fs24 \b \cf0 \tab \plain \f0 \fs24 \cf0 [ read-only ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab \plain \f1 \fs24 \i \cf0 Standard OLE Stock
 Property.\par \pard \plain \f1 \fs24 \cf0 \tab Returns the HWND (internal Microsoft Win32 HWND object pointer) for 
the ActiveLedIt OLE Control. The type is declared here as 'int' because there is
 no 'HWND' OLEAUTOMATION type - but it can be safely cast to an HWND object.\par \pard \tab No
te that this window may contain several other subwindows (HWNDs) to display diff
erent parts of the control. Its not recomended that you use this HWND, but if yo
u need to, its there. Whatever you find you are doing with this, please consult 
Sophist Solutions, and first see if there is a better way, which will be more li
kely to work with future versions of ActiveLedIt (as peeking at the HWND is like
ly to be a fragile appraoch).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 OLE_COLOR \plain \f0 \fs24 \b \cf0 BackColor\plain \f0 \fs24 \cf0 ;\plain \f0 \fs20 \cf0 \tab \plain \f0 \fs24 \cf0 [ read/write ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab \plain \f1 \fs24 \i \cf0 Standard OL
E Stock Property.\par \pard \plain \f1 \fs24 \cf0 \tab This value defaults to the ambient (control containers) 'Back
Color' property. Then it can be set or retrieved as desired. It changes the back
ground color of the ActiveLedIt! window.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 short \plain \f0 \fs24 \b \cf0 Appearance\plain \f0 \fs24 \cf0 ;\plain \f0 \fs20 \cf0 \tab \plain \f0 \fs24 \cf0 [ read/write ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab \plain \f1 \fs24 \i \cf0 Sta
ndard OLE Stock Property.\par \pard \plain \f1 \fs24 \cf0 \tab This value defaults to the ambient (control container
s) Appearance property. Then it can be set or retrieved as desired. The appearan
ce of the control: \par \pard \tx1440 \fi-360 \li1440 {\listtext \'b7\tab }\ls1 \ilvl1 0   Flat appearance\par \pard \tx1440 \fi-360 \li1440 {\listtext \'b7\tab }\ls1 \ilvl1 1   3D appearance\par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 short \plain \f0 \fs24 \b \cf0 BorderStyle\plain \f0 \fs24 \cf0 ;\plain \f0 \fs20 \cf0 \tab \plain \f0 \fs24 \cf0 [ 
read/write ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab \plain \f1 \fs24 \i \cf0 Standard OLE Stock Property.\par \pard \plain \f1 \fs24 \cf0 \tab This value defaults to the ambient (
control containers) BorderStyle property. Then it can be set or retrieved as des
ired. The border of the control is: \par \pard \tx1440 \fi-360 \li1440 {\listtext \'b7\tab }\ls1 \ilvl1 0   no border\par \pard \tx1440 \fi-360 \li1440 {\listtext \'b7\tab }\ls1 \ilvl1 1   normal border\par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BOOL \plain \f0 \fs24 \b \cf0 ReadO
nly\plain \f0 \fs24 \cf0 ;\tab [ read/write ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab When true - the ActiveLedIt! control allows selection and n
on-modifiying operations, but no modifications can take place. Attempts to edit 
while read-only result in a BEEP. Defaults to false. See also 'Enabled'.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BOOL 
\plain \f0 \fs24 \b \cf0 Enabled\plain \f0 \fs24 \cf0 ;\plain \f0 \fs20 \cf0 \tab \plain \f0 \fs24 \cf0 [ read/write ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab \plain \f1 \fs24 \i \cf0 Standard OLE Stock Property.\par \pard \plain \f1 \fs24 \cf0 \tab When true - the ActiveLed
It! control does nothing but display. There is no selection, and no editing enab
led. Defaults to false. See also ReadOnly.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BOOL \plain \f0 \fs24 \b \cf0 EnableAutoChangesBackgroundCol
or\plain \f0 \fs24 \cf0 ;\plain \f0 \fs20 \cf0 \tab \plain \f0 \fs24 \cf0 [ read/write ]\plain \f0 \fs20 \cf0 \par \pard \plain \f1 \fs24 \cf0 \tab If true, then disabling or making readonly (see ReadOnly/Ena
bled properties) makes control gray regardless of 'BackColor' property. If false
, then the 'BackColor' property is always honored. Defaults true.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 Dirt
y\plain \f0 \fs24 \cf0 ;\tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Document dirty. Automatically set dirty by editing. But flag 
only cleared by explicitly setting this property.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 enum  HasScrollBarFlag \{\par \pard \tab \plain \f0 \fs24 \b \cf0 eN
oScrollBar\plain \f0 \fs24 \cf0 ,\par \pard \tab \plain \f0 \fs24 \b \cf0 eShowScrollBar\plain \f0 \fs24 \cf0 ,\par \pard \tab \plain \f0 \fs24 \b \cf0 eShowScrollbarIfNeeded\par \pard \plain \f0 \fs24 \cf0 \};\par \pard \tx6480 HasScrollBarFlag \plain \f0 \fs24 \b \cf0 HasVert
icalScrollBar\plain \f0 \fs24 \cf0 ;\tab [ read/write ]\par \pard HasScrollBarFlag \plain \f0 \fs24 \b \cf0 HasHorizontalScrollBar\plain \f0 \fs24 \cf0 ;\tab [ read/wr
ite ]\par \pard \plain \f1 \fs24 \cf0 \tab This property defines whether or not ActiveLedIt! displays a scrollbar (v
ertically or horizontally).  \plain \f1 \fs24 \b \cf0 eShowScrollbarIfNeeded\plain \f1 \fs24 \cf0  means that the scrollbar is 
shown and hidden automatically, depending on how much text is being displayed.\par \pard \par \pard 
\par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 WindowMarginTop\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 The WindowMarginTop is the space between 
the edge of the text (view rect) and the top of the control window (in TWIPS). I
ts location is relative to the controls bounding rectangle.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 WindowMarginLe
ft\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 The WindowMarginLeft is the space between the edge of the t
ext (view rect) and the left side of the control window (in TWIPS). Its location
 is relative to the controls bounding rectangle.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 WindowMarginBottom\plain \f0 \fs24 \cf0 ; \tab [ re
ad/write ]\par \pard \tab \plain \f1 \fs24 \cf0 The WindowMarginBottom is the space between the edge of the text (vi
ew rect) and the top of the control window (in TWIPS). Its location is relative 
to the controls bounding rectangle.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 WindowMarginRight\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Th
e WindowMarginRight is the space between the right edge of the text (view rect) 
and the right edige of the control window (in TWIPS). If there is a scrollbar, i
t comes to the RIGHT of this value. Its location is relative to the controls bou
nding rectangle.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 PrintMarginTop\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 The PrintMarginTop is th
e space between the top edge of the paper and where the text begins printing (in
 TWIPS).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 PrintMarginLeft\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 The PrintMarginLeft is the spac
e between the left edge of the paper and where the text begins printing (in TWIP
S).\par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 \par \pard \tx6480 int \plain \f0 \fs24 \b \cf0 PrintMarginBottom\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 The PrintMarginBottom is the space
 between the bottom edge of the paper and where the text ends printing (in TWIPS
).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 PrintMarginRight\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 The PrintMarginRight is the space be
tween the right edge of the paper and where the text ends printing (in TWIPS). N
ote - this is really only applicable when WrapToWindow is true. Otherwise - the 
text extent to the right is specified by the ruler wrapping settings.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 MaxU
ndoLevel\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 0 implies no undo, and 1 implies UNDO has same effect
 as REDO. Values >1 imply Undo/Redo methods do different things. Check CanUndo/C
anRedo for more info.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 CanUndo\plain \f0 \fs24 \cf0 ; \tab [ read-only ]\par \pard \tab \plain \f1 \fs24 \cf0 OK to call Undo () func
tion - something user has done which can be undone\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 CanRedo\plain \f0 \fs24 \cf0 ; \tab [ read-on
ly ]\par \pard \tab \plain \f1 \fs24 \cf0 OK to call Redo () function - something user has undone which can be redon
e\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 Text\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns/sets ALL the text. Returns LF characters
 as line term (but accepts ANY standard line term on input)\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 TextCRLF\plain \f0 \fs24 \cf0 ; \tab [ 
read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns/sets ALL the text. Always returns CR/LF terminated text - 
even though Led internally uses a single LF for paragraph termination. So length
 of this string isn't same.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 TextRTF\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets ALL th
e text. The format of the property is RTF.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 TextHTML\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Ret
urns/sets ALL the text. The format of the property is HTML.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 VARIANT \plain \f0 \fs24 \b \cf0 TextBitmap
\plain \f0 \fs24 \cf0 ; \tab [ read-only ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns ALL the text in the form of a bitmap. Simulates a prin
t command. The returned image is an OLE Picture object (supporting the IPicture 
interface) created with OleCreatePictureIndirect  ().\par \pard \tab NOTE - this differs from 
earlier versions of ActiveLedIt! which returned the bitmap as a DIB - saved in a
 SAFEARRAY (UINT8).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Long \plain \f0 \fs24 \b \cf0 Length\plain \f0 \fs24 \cf0 ; \tab [ read-only ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns the total number of c
haracters in the buffer. Note this DOESNT correspond to length (Text), cuz that 
returns CRLF text\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Long \plain \f0 \fs24 \b \cf0 MaxLength\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Maximum length (in characte
rs, with CR/LF treated as ONE) of the input buffer. -1 => no maximum.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean 
\plain \f0 \fs24 \b \cf0 SupportContextMenu\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If enabled, right-clicks bring up context m
enu.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 SmartCutAndPaste\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If enabled, try to make good g
uesses about cutting/pasting extra whitespace (and drag and drop).\par \pard \plain \f0 \fs24 \cf0 \par \pard \plain \f1 \fs24 \cf0 \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 Sma
rtQuoteMode\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab If enabled, replace a typed double quote character
 (") with either an open quote (\ldblquote ) or close quote (\rdblquote ) character. Note that this 
doesn't apply to pasted text - only to characters typed from the keyboard.\par \pard \plain \f0 \fs24 \cf0 \par \pard \plain \f1 \fs24 \cf0 \par \pard \tx6480 \plain \f0 \fs24 \cf0 boo
lean \plain \f0 \fs24 \b \cf0 WrapToWindow\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If true, then text is wrapped to the window,
 and otherwise to the ruler (page). This only affects the rightmost margin.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Bo
olean \plain \f0 \fs24 \b \cf0 ShowParagraphGlyphs\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If true, end-of-paragraph glyphs are
 displayed.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 ShowTabGlyphs\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If true, tab glyphs are di
splayed (not just empty space - but an icon so you can see them).\par \pard \tab \tab \tab \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 S
howSpaceGlyphs\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If true, space glyphs are displayed (not just e
mpty space - but an icon so you can see them\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 ShowSecondaryHilight\plain \f0 \fs24 \cf0 ; \tab [ 
read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If true (default) then then even when the control is deactivated (
not the focused control), a subtle indication of the selected region (if non-emp
ty) will still be shown.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 UseSelectEOLBOLRowHilightStyle\plain \f0 \fs24 \cf0 ; \tab [ read/write
 ]\par \pard \tab \plain \f1 \fs24 \cf0 If true (default) then selections will hilight to the end of line (and begin
ning of line) for newlines. This display is how all versions of ActiveLedIt disp
layed hilights in versions 3.0 and earlier, and its the standard way on the MacO
S. Windows is a bit more inconsistent - but I think this was is better (defaults
 on).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 ShowHidableText\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 If true, hidable text (RTF \\v)
 is displayed in the HidableTextColor, and the strike-through style.\par \pard \tab \tab \tab \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 OLE_CO
LOR \plain \f0 \fs24 \b \cf0 HidableTextColor\plain \f0 \fs24 \cf0 ;\tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 See ShowHidableText. This color is used to
 augment the display of hidable text which is currently being displayed if Hidab
leTextColored is true.\par \pard \tab \tab \tab \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Boolean \plain \f0 \fs24 \b \cf0 HidableTextColored\plain \f0 \fs24 \cf0 ;\tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 See Show
HidableText. If true, then use 'HidableTextColor' to color hidable text which is
 shown. Otherwise - use (default) light gray underline.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Long \plain \f0 \fs24 \b \cf0 SelStart\plain \f0 \fs24 \cf0 ; \tab [ read
/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns/sets START of the selection (nb: offsets assume a paragraph-te
rm single char).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Long \plain \f0 \fs24 \b \cf0 SelLength\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\plain \f1 \fs24 \cf0 \par \pard \tab Returns/sets LENGTH of the s
election (nb: offsets assume a paragraph-term single char).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 SelText\plain \f0 \fs24 \cf0 ; \tab [ r
ead/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets the selected text (if any).  (but accepts ANY standard
 line term on input\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 SelTextRTF\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns/sets the selecte
d text (in RTF format - and can be stuff other than text - so long as in RTF for
mat.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 SelTextHTML\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets the selected text (in RTF
 format - and can be stuff other than text - so long as in RTF format).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 OLE_CO
LOR \plain \f0 \fs24 \b \cf0 SelColor\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets the color of the selected text (or i
nsertion point if selection empty).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 BSTR \plain \f0 \fs24 \b \cf0 SelFontFace\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns
/sets the FontFace of the selected text (or insertion point if selection empty).
\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 long \plain \f0 \fs24 \b \cf0 SelFontSize\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets the Font Size of the selected
 text (or insertion point if selection empty - in Points).\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 long \plain \f0 \fs24 \b \cf0 SelBold\plain \f0 \fs24 \cf0 ; \tab [ re
ad/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns/sets the Font Style BOLD of the selected text (or insertion 
point if selection empty). 0=>false, 1=>true, 2=>no-universal-answer.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 long \plain \f0 \fs24 \b \cf0 Sel
Italic\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets the Font Style Italic of the selected text
 (or insertion point if selection empty). 0=>false, 1=>true, 2=>no-universal-ans
wer.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 long \plain \f0 \fs24 \b \cf0 SelStrikeThru\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets the Font Style StrikeTh
ru of the selected text (or insertion point if selection empty). 0=>false, 1=>tr
ue, 2=>no-universal-answer.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 long \plain \f0 \fs24 \b \cf0 SelUnderline\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets t
he Font Style Underline of the selected text (or insertion point if selection em
pty). 0=>false, 1=>true, 2=>no-universal-answer.\par \pard \par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 enum JustificationFlag \{\par \pard    
 \plain \f0 \fs24 \b \cf0 eLeftJustification\plain \f0 \fs24 \cf0 , \par \pard     \plain \f0 \fs24 \b \cf0 eRightJustification\plain \f0 \fs24 \cf0 ,\par \pard     \plain \f0 \fs24 \b \cf0 eCenterJustification\plain \f0 \fs24 \cf0 ,\par \pard     \plain \f0 \fs24 \b \cf0 eFu
llJustification\plain \f0 \fs24 \cf0 ,\par \pard     \plain \f0 \fs24 \b \cf0 eNoCommonJustification\plain \f0 \fs24 \cf0 \par \pard \};\par \pard \tx6480 JustificationFlag \plain \f0 \fs24 \b \cf0 SelJustificatio
n\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns/sets the Justification of the selected paragraphs. e
NoCommonJustification =>no-universal-answer, can be returned - but not set. Full
Justification not fully supported (displayed as left-justification).\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 enum List
Style \{\par \pard \tab \plain \f0 \fs24 \b \cf0 eListStyle_None = 9999,\par \pard \tab eListStyle_Bullet = 23,\par \pard \tab eNoCommonListStyle = 
-1\plain \f0 \fs24 \cf0 \par \pard \};\par \pard \tx6480 ListStyle \plain \f0 \fs24 \b \cf0 SelListStyle\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \tab \plain \f1 \fs24 \cf0 Returns/sets the ListStyle of the
 selected paragraphs. The enumerator eNoCommonListStyle implies no-universal-ans
wer can be returned when the property is read and is not a legal value to set th
e property to.\par \pard \par \pard \par \pard \tx6480 \plain \f0 \fs24 \cf0 Long \plain \f0 \fs24 \b \cf0 SelHidable\plain \f0 \fs24 \cf0 ; \tab [ read/write ]\par \pard \plain \f1 \fs24 \cf0 \tab Returns/sets the Hidable flag
 of the selected text. 0=>false, 1=>true, 2=>no-universal-answer.\par \pard \par \pard \par \pard \par \pard \plain \f1 \fs24 \b \ul \cf0 Methods:\par \pard \plain \f1 \fs24 \cf0 \tab T
hese are normal methods (functions) which apply to the given ActiveLedIt! contro
l (not to be confused with properties).\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 AboutBox\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Displays the modal 
aboutbox.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 LoadFile\plain \f0 \fs24 \cf0  ([in]BSTR filename);\par \pard \plain \f1 \fs24 \cf0 \tab Loads a file into the control. T
his routine will guess the file format, based on the file extension, and perhaps
 its contents.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 SaveFile\plain \f0 \fs24 \cf0  ([in]BSTR filename);\par \pard \tab \plain \f1 \fs24 \cf0 Saves the contents of the c
ontrol to the named file. Guess the file format based on the file name.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 S
aveFileCRLF\plain \f0 \fs24 \cf0  ([in]BSTR filename);\tab \par \pard \tab \plain \f1 \fs24 \cf0 Saves the contents of the control to the name
d file as CRLF-terminated text.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 SaveFileRTF\plain \f0 \fs24 \cf0  ([in]BSTR filename);\par \pard \tab \plain \f1 \fs24 \cf0 Saves t
he contents of the control to the named file as RTF.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 SaveFileHTML\plain \f0 \fs24 \cf0  ([in]BS
TR filename);\par \pard \plain \f1 \fs24 \cf0 \tab Saves the contents of the control to the named file as HTML.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 vo
id \plain \f0 \fs24 \b \cf0 Refresh\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Forces a complete repaint of a control.\tab \par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 ScrollToSelectio
n\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Scroll the current window so that the selection is shown.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 Undo\plain \f0 \fs24 \cf0  ();
\par \pard \plain \f1 \fs24 \cf0 \tab Undo last user action (same as menu command undo). If CanRedo and MaxUndoLevel
==1, same as Redo (). NB: unlike UI undo command - doesn't scrolltoselection aft
erwards.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 Redo\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Redo last undone action (same as menu command redo). N
B: unlike UI undo command - doesn't scrolltoselection afterwards.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 CommitU
ndo\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Erases existing Undo/Redo history. Future user actions can still be und
one.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 LaunchFontSettingsDialog\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Bring up the Font Settings Dialog.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 v
oid \plain \f0 \fs24 \b \cf0 LaunchParagraphSettingsDialog\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Bring up the Paragraph Settings Dialog.\par \pard \par \pard 
\par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 LaunchFindDialog\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Bring up the Find Dialog, so the user can type in te
xt and search. See also the 'Find' method.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 long \plain \f0 \fs24 \b \cf0 Find\plain \f0 \fs24 \cf0  (\par \pard \tab \tab [in]long searchFrom, 
\par \pard  \tab \tab [in]VARIANT findText, \par \pard \tab \tab [in,defaultvalue(TRUE)]BOOL wrapSearch,\par \pard \tab \tab [in,defau
ltvalue(FALSE)]BOOL wholeWordSearch,       \par \pard \tab \tab [in,defaultvalue(FALSE)]BOOL caseS
ensativeSearch\par \pard \tab );\par \pard \plain \f1 \fs24 \cf0 \tab Search from the given position, using the given parameters. 
Return offset in text where specified string is found, or -1 if none. Doesn't ch
ange selection. See also the 'LaunchFindDialog' method.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 LaunchReplaceDial
og\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Bring up the Find/Replace Dialog, so the user can type in text and searc
h and have that text replaced with other entered text. See also the \ldblquote \plain \f0 \fs24 \cf0 FindReplace
\plain \f1 \fs24 \cf0 \ldblquote  method and the \ldblquote \plain \f0 \fs24 \cf0 LaunchFindDialog\plain \f1 \fs24 \cf0 \rdblquote  method.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 long \plain \f0 \fs24 \b \cf0 FindReplace\plain \f0 \fs24 \cf0  (\par \pard \tab \tab [in]long sear
chFrom, \par \pard  \tab \tab [in]VARIANT findText, \par \pard \tab \tab [in]VARIANT replaceText, \par \pard \tab \tab [in,defaultvalu
e(TRUE)]BOOL wrapSearch,\par \pard \tab \tab [in,defaultvalue(FALSE)]BOOL wholeWordSearch,       \par \pard 
\tab \tab [in,defaultvalue(FALSE)]BOOL caseSensativeSearch\par \pard \tab );\par \pard \plain \f1 \fs24 \cf0 \tab Search for the given '\plain \f0 \fs24 \cf0 fi
ndText\plain \f1 \fs24 \cf0 ' from the given offset, and replace with '\plain \f0 \fs24 \cf0 replaceText\plain \f1 \fs24 \cf0 '. Return offset of 
\plain \f1 \fs24 \i \cf0 end\plain \f1 \fs24 \cf0  of where replace text inserted, if successfull, or -1 if search text not fou
nd. See also the '\plain \f0 \fs24 \cf0 LaunchReplaceDialog\plain \f1 \fs24 \cf0 ' method and the '\plain \f0 \fs24 \cf0 Find\plain \f1 \fs24 \cf0 ' method.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 Prin
terSetupDialog\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Bring up the 'Printer Setup' dialog. This is the same as the
 'Printer setup' command accessible from the context menu.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f1 \fs24 \b \cf0 PrintDialog\plain \f0 \fs24 \cf0  ()
;\par \pard \plain \f1 \fs24 \cf0 \tab Bring up the standard 'Print' dialog. This is the same as the 'Print' command
 accessible from the context menu\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f1 \fs24 \b \cf0 PrintOnce\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Print the current docume
nt once. Like the 'Print Dialog' method - except that it brings up no prompting 
dialog (though it does display a progress dialog).\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 int \plain \f0 \fs24 \b \cf0 GetHeight\plain \f0 \fs24 \cf0  (\par \pard \tab \tab [in,defau
ltvalue(-1)]INT from,\par \pard \tab \tab [in,defaultvalue(-1)]INT to\par \pard \tab );\par \pard \plain \f1 \fs24 \cf0 \tab Compute the height of t
he given document range (from to to) in pixels. 'from' and 'to' default to the s
tart and end of the document\par \pard \tab  Note this function can be slow to compute for lar
ge documents - as it may cause word-wrap computations for the entire range reque
sted.\par \pard \tab Note also that this does \plain \f1 \fs24 \i \cf0 not\plain \f1 \fs24 \cf0  exactly compute the number of pages you woul
d expect when printing - because printing often inserts extra spaces at the end 
of pages so we don't display partial rows.\par \pard \tab This function includes the last row 
referenced in its heihgt computation. So - for example - if you ask for the heig
ht from X,X - you WONT get back zero - but the height of the row containing posi
tion X.\par \pard \par \pard \par \pard \par \pard \par \pard \par \pard \plain \f1 \fs28 \b \ul \cf0 ActiveLedIt! Event (callback) Interface:\plain \f1 \fs24 \cf0 \par \pard \par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 Change\plain \f0 \fs24 \cf0  ();\par \pard \tab \plain \f1 \fs24 \cf0 Indica
tes that the contents of a control have changed.\par \pard \tab \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 Click\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Occurs when 
the user presses and then releases the left mouse button over an object. Note th
at we intentionally do NOT trigger a \plain \f0 \fs24 \cf0 Click\plain \f1 \fs24 \cf0  event for a right-click (though you s
till get \plain \f0 \fs24 \cf0 MouseUp\plain \f1 \fs24 \cf0  and \plain \f0 \fs24 \cf0 MouseDown\plain \f1 \fs24 \cf0  events).\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 DblClick\plain \f0 \fs24 \cf0  ();\par \pard \plain \f1 \fs24 \cf0 \tab Occurs when the use
r presses and releases the left mouse button and then presses and releases it ag
ain over an object. Note that we intentionally do NOT trigger a \plain \f0 \fs24 \cf0 Click\plain \f1 \fs24 \cf0  event for 
a right-click (though you still get \plain \f0 \fs24 \cf0 MouseUp\plain \f1 \fs24 \cf0  and \plain \f0 \fs24 \cf0 MouseDown\plain \f1 \fs24 \cf0  events).\par \pard \tab \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 KeyDo
wn\plain \f0 \fs24 \cf0  (short* KeyCode,short Shift);\par \pard \plain \f1 \fs24 \cf0 \tab Occurs when the user presses a key while an ob
ject has the focus.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 KeyUp\plain \f0 \fs24 \cf0  (short* KeyCode, short Shift);\par \pard \plain \f1 \fs24 \cf0 \tab Occurs when the
 user releases a key while an object has the focus.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 KeyPress\plain \f0 \fs24 \cf0  (short* KeyA
scii);\par \pard \plain \f1 \fs24 \cf0 \tab Occurs when the user presses and releases an ANSI key.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 MouseDown\plain \f0 \fs24 \cf0  
(\par \pard \tab short Button, \par \pard \tab short Shift, \par \pard \tab OLE_XPOS_PIXELS x, \par \pard \tab OLE_YPOS_PIXELS y\par \pard );\par \pard \plain \f1 \fs24 \cf0 \tab Occ
urs when the user presses a mouse button (either left or right).\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 MouseMov
e\plain \f0 \fs24 \cf0  (\par \pard \tab short Button, \par \pard \tab short Shift, \par \pard \tab OLE_XPOS_PIXELS x, \par \pard \tab OLE_YPOS_PIXELS y\par \pard );\par \pard \plain \f1 \fs24 \cf0 \tab O
ccurs when the user moves the mouse.\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 MouseUp\plain \f0 \fs24 \cf0  (\par \pard \tab short Button, \par \pard \tab short Shi
ft, \par \pard \tab OLE_XPOS_PIXELS x,\par \pard \tab OLE_YPOS_PIXELS y\par \pard );\par \pard \plain \f1 \fs24 \cf0 \tab Occurs when the user presses and
 releases a mouse button (either left or right).\par \pard \par \pard \par \pard \plain \f0 \fs24 \cf0 void \plain \f0 \fs24 \b \cf0 SelChange\plain \f0 \fs24 \cf0  ();\par \pard \tab \plain \f1 \fs24 \cf0 Occurs wh
en the current selection of text in the ActiveLedIt control has changed or the i
nsertion point has moved.}