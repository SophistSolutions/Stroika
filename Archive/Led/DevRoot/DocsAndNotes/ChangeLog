            Old (Closed) Bugs (in reverse cronological order by Fix/Close)



DATE		Act'n	WHO		Description
		(SPR#)
----		-----	---		-----------

------------------- Released 3.1b1 2004-02-12 - Below ------------------------------

040212	FIXED
040212	WORKING	LGP			fixed up MacOS replace dialog layout (for new button)
040211	WORKING	LGP			added ReplaceAllInSelection functionality (except must re-layout MacOS dialog)
040211	WORKING	LGP			added 'Replace Again'
						command to LedIt, LedLineItMFC, ActiveLedIt.
040211	NOTE		LGP			First portion - the popup menu in find/replace dialogs - was
						done as SPR#1580 around Jan 1, 2004.
031129	REPORT	LGP			DO popup to remember saved strings in find/replace dialogs.
		(1576)			AND - do menu command to simulate REPLACE&FIND cmd (from
						replace dialog) - so no need for mode-less dlg. Also -
						consider adding replace-all-in-selected-range cmd to
						replace dialog.

040212	CLOSED	LGP			DUP (covered by) SPR#1658 (FIXED)
031211	REPORT	LGP			Based (loosely) on SPR#1594. Do a better job on
		(1595)			suggestions for capitalized words. If "Thats"
						is matched by "that's" - then genreate (also) the
						suggestion "That's".
							Make sure heuristics downplay differences that are just
						because of case. This should 'cost' little.

040212	FIXED	LGP			Generate better suggestions when the misspelled word is capitalized
						or all-caps when builtin dictionary entry isn't (doesn't)
040212	REPORT	LGP			When I lookup 'RECLASIFY' - I get back a suggestion of
		(1658)			'reclassify'. Thats OK - but we should notice in the suggestsion
						code that the orig word was all caps and the sug wasn't so add
						a suggestion of the same word - but ALL-CAPS. Same for
						CAPITALIZING (just first letter).

040212	FIXED	LGP			Update SpellCheckEngine_Basic::LookupWord_ () to treat a
						RightSingleQuoteMark as an apopstrophe in lookups.
040211	REPORT	LGP			Lookup the word 'it’s'. Note the funny char for the apostrophe.
		(1657)			MS-Word generates this sometimes. When matching apostrophe - treat
						this is an exact match (' == ’).

040211	FIXED	LGP			Added code to heuristic fucntion to give a bonus for
						transposition (still overall negative - just less than normally
						for mismatched words).
040210	REPORT	LGP			Type the word 'hte'. Run spellchecker. Note how 'the' doesn't
		(1642)			show up as an alternative. Consider  some special code to assure
						certain common misspellings always caught (if needed). Also - do
						a better job (and that maybe all that's needed) - with transpositions.
						We already give negative counts for the wrong letters. Maybe
						combine it with a (lesser) bonus if the letters are a two-letter
						transposition?

040211	CLOSED				This problem was fixed a while ago. The word-break routine
						associated with the spellchecker was adjusted to do better with
						quotes (single and double).
030625	REPORT				Make sure spellchecker does better with stuff like 'about' -
		(1544)			it grabs the word WITH	the quote characters!

040211	FIXED	LGP			Fixed SpellCheckEngine_Basic::Heuristic () to take into account
						when the suggestion word is longer than the missing word, and to penalize
						the extra characters off the end.
040210	REPORT	LGP			Consider adjusting spell guessing heurititic so words
		(1644)			of diff lentgths more penalized.

040211	CLOSE	LGP			Most have been fixed earlier - since AND is matched in the
						dictionary.
040210	REPORT	LGP			In spellchecker - unknown word "AND" maps to
		(1643)			lots of wierd choices - but not "and"

040211	CLOSED	LGP			Script was already there to compile - but we tweeked it a bit
						so works even if read-only output dictioanry is already there.
040211	REPORT	LGP			Add scripts to compile dictionaries to SpelledIt folder
		(1652)			(so a bit easier todo and so I can more easily remember args...).

040211	CHANGE	LGP			added a few words to SD from my UDs
		(1656)

040211	FIXED	LGP			SpellCheckEngine_Basic::GenerateSuggestions () adjusted
						to look for such splits.
040210	REPORT	LGP			Lookup 'checkmark' in the spellchecker. It doesn't
		(1645)			suggest 'check-mark'. It should. When a word fails lookup,
						in the suggester - lookup start/end segments and see if
						the word is a composite of two other words. Then make that
						a suggestion (not sure what weight that suggestion should
						have?).

040211	CLOSED	LGP			This seems to have been done (part of Led_Mac/Win/XWin packages
						for Led 3.1).
040211	REPORT	LGP			Be sure these tools are not redistributed - except when/where
		(1653)			they are supposed to?

040211	CLOSE	LGP			MSVC.Net 2k3 appears to now have this builtin as an
						'inherited project defaults' value. So - don't bother overriding
						this. Its harmless.
040211	REPORT	LGP			Lose crap about OLEACC.DLL in building LedIt, ActiveLedIt, and
		(1655)			LedLineItMFC

040211	CLOSED	LGP			This doesn't belong as an open Led bug. I've added it to the
						website todo file (to add a toolbar demo).
040207	NOTE		LGP			Now that we have toolbar - this is easy. Just mark closed once we have
						a good toolbar example for the web.
020506	DEFER	LGP			DEFER for 3.0.1
020504	REPORT	LGP			ADD PRINT DIALOG BUTTON TO ONE OF THE ACTIVLEDIT SAMPLE
		(1087)			PAGES!!! TO DEMO PRINTING.

040211	FIXED	LGP			Fixed as part of SPR#1580 - on 2003-12-31
						(LedIt & LedLineItMFC)
030619	REPORT	LGP			Options::GetSearchParameters () const
		(1651)			#if		qWindows
							SearchParameters	sp;
							#if		!(qWideCharacters && !qSDK_UNICODE)
							case is broken - barfs when you read in date saved
							as BINARY - so we must re-read as BINARY even if compiled
							in this mode? Or at least not assert out (MFC ASSERT).

040210	FIXED				Not great - but it doesn't have to be. LedTestWin32 works
						well, and LedIt (for MFC) works well - except for the spellcheck
						being disbaled because of a couple of compiler bugs.
040210	WORKING	LGP			qFailToCompileLargeDataInitializedArraysBug,
						qTemplatesWithMixOfNestedClassesWithCommonNamesGetsConfusedBug,
						qDefaultValueInTemplateParemeterUsingTemplatedTypeBug,
						qTemplatedMemberFunctionsFailBug bug defines for MSVC60.
							NB: a couple of the bugs having to do with spellchecking
						were NOT fully and cleanly worked around: spellcheck under
						MSVC60 was just disabled.
040210	WORKING	LGP			made Table::EmbeddedTableWordProcessor::TableCMD into
						Table::Embedde::TableCMD (change nesting) - to work
						around compiler issue (bug?) where I cannot declare a:b:c
						a friend of a inside a when b is defined outside of a
						(but declared inside a). No matter. Also - added
						qNameLookupXXXInBaseClassWhenItIsNestedSometimesFailsBug. All
						above to get compiling with MSVC6.
040210	WORKING	LGP			Got LedTestXWindows compiling with _VC6 projects.
040206	REPORT	LGP			Must do a final pass of this later - but do a quick pass
		(1635)			now to make sure sample applications compile with MSVC6 (and perhaps
						a few other compiler versions?)

040210	FIXED	LGP			I added sample javascript code on creating a user-built icon-button
						with custom popup to the ToolbarSupportTester.html test file.
040206	NOTE		LGP			Because of how I implemnted SPR#1628 - this is basically done. Just
						leave open til its tested (and incorporated into a sample .html file).
040204	REPORT	LGP			Based on SPR#1618 (toolbar): Add configurable popup menu items to
		(1630)			toolbar (MAYBE - IF EASY - NOT REQ FOR THIS RELEASE).

040209	FIXED	LGP			Implemented SPR#1624- new OnEnterIdle code. Used this (insead of SpendIdleTime())
						to handle updating toolbars. Essentailly no need to keep per-toolbar flags, since
						we just update all when going INTO idle-state, and then never again for a while (til
						we do commands to exit idle state).
040206	NOTE		LGP			Having implemented SPR#1634 first will make this easier (better).
040204	REPORT	LGP			Based on SPR#1618 (toolbar): Test toolbar update performance
		(1631)			<<FIX IT TO USE FLAG (per TOOLBAR) - called from AL on changefocus and all
						user commands and edits(keys)>>

040209	FIXED	LGP			Added EnterIdler class to get notified on OnEnterIdle messages. Also -
						added IdleManager::NonIdleContext class to notify idle-manager of non-idle
						(eg executing a command) contexts (lots of these usages).
							Also - (related to SPR#1631) - add a few NonIdleContext calls around OLE AUT calls
						in ActiveLedIt (since they have similar effects to commands).
040206	REPORT	LGP			Add OnEnterIdle() functionality to StartSpendTimeCalls. Add a new class,
		(1634)			OnEnterIdler (declared already). Implement functionalty similar to that in MFC
						for OnEnterIdle. Then use this in handling Toolbar layout and invalidations and updating
						for ActiveLedIt toolbar.

040209	FIXED	LGP			Added assert to check MODULE::m_nObjectCount = 0. Had  to be much more
						careful about using OLE_GetXXX functions that return IDispatch*. Instead -
						do non-OLE_ versions that return CComPtr<IDispatch> - so we don't get
						redundant refcounts.
040208	WORKING	LGP			implemented  first cut BWA for controls getting destroyed. Still
						looking into common case of other object getting destroyed. THAT could
						be an AL bug???
040207	NOTE		LGP			On A RELATED NOTE - LOOK AT MEMLEAKS REPORTED - LOOKS LIKE
						ONE MAJOR ONE (maybe a phaontom) - is fontlist (names dumped look like
						font names). Static array of font names?).
040206	REPORT	LGP			CLEANUP EXITING FROM ACTIVLEDIT/MSIE. IN NODEBUG VERSION - I GOT A
		(1641)			CRASH AFTER PLAYING WITH TOOLBARS (and quitting with AL open/running).
						NOT TRIED TO REPRO.

040209	FIXED	LGP			Added qKeepListOfALInstancesForSPR_1599BWA hack to work around this MSIE
						bug (at the same time - fixed related SPR#1641)
031217	NOTE		LGP			This doesn't appear to be a regression! At least I saw it
						with > 6 month old code. Doesn't seem to happen when page comes
						from web - just when its local (not sure of this). And doesn't
						happen if you navigate away from page, and doesn't crash in NODEBUG
						version (not really sure why - perhaps it should?/could sometimes?).
							Probably best workaround (maybe open issue  with MSFT) would
						be to keep a set of objects around - and if DLL unload routine called
						prematurely - manually delete each...
031216	WORKGING	LGP			Added a tiny bit of bug dection code added to ActiveLedItApp::ExitInstance ().
						Must come up with a REAL fix for this!
031216	REPORT	LGP			Open file SPR_1599.htm in MSIE (to load the ActiveLedIt
		(1599)			OCX. Then quit - with that window active. You will get
						an assertion error.

040208	FIXED	LGP			Fix display of multiple toolbars by creating a window (with
						toolbar edges) assocaited with the toolbar list, and get rid
						of edges with toolbar itself. Had to change some COM apis
						and way AL/Toolbarlist interaction/creation worked (make
						it more like toolbarlist/toolbar interaction). Seems to
						work pretty well now.
040207	REPORT	LGP			Adjust positions of bars (or something else) - so that they
		(1640)			look better when 2 or more	toolbars present. Maybe just move UP by
						CLEINTEDGEY +1-1(or so) the subsequent bars.

040207	FIXED	LGP			Added most of these, plus more (find/replace/ActiveledIt (context menu),
						insert sym,url,table, paraIndents, para spacing). Relegate the fileIO
						buttons to a separate SPR (probably to be defered): SPR#1638.
040207	REPORT	LGP			Add a few more builtin toolbars and buttons:
		(1639)			Select bar (includes spellcheck, etc)
						Insert bar (includes insert  special char, insert table, insert URL)
						FileIOBar (???) MAYBE - icons at least - for save-restore etc.

040207	FIXED	LGP			Added IALToolbar::MergeAdd () method - and use it
						internally, and in a bunch of samples in javascript. Also -
						fixed bug with popup menu handling enabling code (hierarchical
						menus) and tested that in javascript testing sample.
040207	REPORT	LGP			Add OLE AUT command to IALToolbar to APPEND (with arg
		(1637)			a toolbar itself - and just copy out the elements).
						Embellish sample/test code to use this.

040206	FIXED	LGP			The below basically finishes this item.
040206	WORKING	LGP			Added font-color icon, and associated the icon with the color
						popup menu. Added support to ActiveLedIt_IconButtonToolbarElement
						to make that work. Including - changed ToggleButton property
						to a 'ButtonStyle' property - where one style was 'ICON/POPUP MENU'.
						These changes addressed the below (in this dated item) issues:
							Refined the meaning of hte COMMAND property of a toolbar icon.
						IF IT SUPPORTS IALCOMMANDLIST - then instead of being a regular
						pushbutton - be a popup menu. USE THIS TO IMPLEMENT COLOR POPUP!!!
							Fix funny 'toggle button' behavior - when you click in a PRESSED
						toggle button. Sometimes it should toggle (like bold) - and other
						times - just stay pressed (like 'no list style'). Maybe add a new
						property - StickButton - or make 'ToggleButton' a new 'style enum -
						with toggle as one, and Sticky as another?). THAT MAYBE BEST.
						What about ICONBUTTON? Aneother enum - or just impled by value of
						Command object? Maybe its HARWIRD return to ICONSTYLE if type of
						command is iconlist?
							Supported enabling/disabling checking/unchecking of items
						in ICON-POPUP-MENUS
040206	WORKING	LGP			Lose private 'width' property for combobox class, and instead - autocompute the prefered
						width based on the attached menu. Improved the automatic LAYOUT code so that changes to the
						menu should resize the combobox.
040206	WORKING	LGP			Lost some items at end of size listbox (smaller/larger/other)
040205	WORKING	LGP			Added fairly functional (not perfect) ActiveLedIt_ComboBoxToolbarElement - and
						used that to implement first cut at fontname and fontsize combo boxes.
040204	REPORT	LGP			Based on SPR#1618 (toolbar): Add Font/Size/Color special
		(1629)			items to toolbar.

040204	FIXED	LGP			Fix ActiveLedItControl::mkIconElement () to avoid handle mem
						leak.
040204	REPORT	LGP			Based on SPR#1618 (toolbar). See about ICON leaks in new toolbar code. Assure
		(1628)			were deleting them / refocunting right.

040204	FIXED	LGP			Did reasonable first-cut implementation. Leave remaining iss
040204	WORKING	LGP			Added justification and list-style buttons.
040203	WORKING	LGP			Add ToggleButton property to IconButtonToolbarItem, and
						CommandChecked () method to ActiveLedIt - to support checked
						buttons - like BOLD, ITALIC, and UNDERLINE.
040203	WORKING	LGP			Added bold, italics, underline (fixed paste icon) to
						toolbar. Fixed SETFOCUS issue clicking on toolbar buttons.
040202	WORKING	LGP			Added print button, and a few bug fixes to make that work.
040202	WORKING	LGP			Added undo/redo buttons, and separator support.
040202	WORKING	LGP			Update enable state of buttons according to COMMAND-CHAIN
						OnUpdateCommand. May possibly need future OPTIMIZATION (to not
						call too often) - but empirically - seems OK for now.
040202	WORKING	LGP			Started CommandEnabled support - and got associated
						command (to toolbar icon) code working - so for simple
						cases - at least - it invokes the command).
040202	WORKING	LGP			Checked in first cut - with basic toolbar (icons only)
						display (only cut/copy/paste so far). Still todo - DO_COMMAND,
						UPDATE_ENABLE_DISABLE CMD, and more builtin items. PLUS - todo
						adding special items - like font/fontsize/color popups.
040109	REPORT	LGP			Add configurable toolbar to ActiveLedIt. See also (based
		(1618)			on) SPR#1617.

040304	FIXED	LGP			Fixed StandardStyledTextInteractor::SetSelection () code.
						Earlier fix part of SPR#1604 was erronious.
040303	WORKING	LGP			Type this is BOLD test (where BOLD is in the bold style)
						in LedIt. Cursoring left<-->right over the bold text doesn't
						display the proper bold values in the LedIt toolbar for bold
						(originally noticed same trouble implementing simialr functionality
						in ActiveLedIt toolbar)
040203	REPORT	LGP			Fix bug with empty-selection reporting of BOLD cmd etc...
		(1627)

040127	FIXED	LGP			Redid implemenation a bit - so for qWideCharacters,
						the implemenation did the NL insertion before the
						TextStore::Insert - but after  the read and conversion
						to wchar_t's (so no problems with getting proper
						character counts). Tested briefly on sample file
						SPR_1295.txt - and that seemed to be handled pretty
						well by the code. Next - let Simone test...
040127	WORKING	LGP			Added edit field letting you select the number of chars
						for the optional 'break point'.
040126	WORKING	LGP			Done - except that I must be more careful about the
						case of reading WIDE_UNICODE files. PLUS - test
						performance on large test files. Consider maybe doing
						splits AFTER DoReplace() call (since then its all set as
						the right format characters etc). But - that maybe
						too late for performance reasons? Need large test file
						to see...
040126	REPORT	LGP			Do simple LedLineIt UI to check on open if lines longer
		(1625)			than X - and put up dialog	asking to resolved by inserting
						NLs every X chars.(HACK TIL WE HAVE BINARY EDIT MODE).

040126	FIXED
040126	WORKING	LGP			re-fixed bug SPR#1232. Real fix was to be careful about
						EOR in wrapped lines in TextInteractor::GetCharAtClickLocation ()
040126	WORKING	LGP			Got rid of old 'fix' for SPR#1232 (it was erronious) in
						PartitioningTextImager::GetRowRelativeCharAtLoc. Real fix is in
						TextInteractor::GetCharAtClickLocation ().
040126	WORKING	LGP			Had to re-examine SPR#1232. Its my fix for that bug that
						created this problem. See file SPR_1232b.rtf for a good exampe
						of the problem (after I revered the fix to
						PartitioningTextImager::GetRowRelativeCharAtLoc). Click at the end
						of the first row - and you will see the problem (caret goes to wrong place).
040126	WORKING	LGP			Issue has to do with earlier fix for SPR#1232 in
						PartitioningTextImager::GetRowRelativeCharAtLoc(). That was probably
						erronious, but needs to be retested when I again have access to the
						sample test file referred to in that SPR (I'm on the road). 
040126	WORKING	LGP			Added goal-column support, and it works well, but we
						still nav to just before last char in row when we
						use up/down arrow keys (when it should be at end).
040126	WORKING	LGP			This is closely related to SPR#1604 - but not identical.
						Track this down and solve it separately - once SPR#1604 is
						completely closed.
031213	REPORT	LGP			Down arrow seems to often do the wrong thing
		(1597)			at end of lines. Seems to go down just before the last
						character. Probably should STICK to end (maybe like emacs?)
						or at least not bounce back. Maybe have sticky at-end
						flag for arrow keys so we stay at end of line when
						doing a bunch of down arrows in row. Maybe have
						a sticky 'down goal column'?

040126	FIXED
040126	WORKING	LGP			Added Get/SetSelectionGoalColumnm and RecomputeSelectionGoalColumn
						to help implement goal column functionality with arrowkeys.
						Added GoalColumnRecomputerControlContext to allow prevention of
						updating goal column in special cases (like when using up/down
						arrows). As speed tweek (partly needed cuz we got rid of MRTI
						overrides and partly just a good idea I noticed) - use stuff
						like GetStartOfNextRowFromRowContainingPosition () instead of
						GetRowContainingPosition (in other words - dont use explicit row#s).
						Similarly - use GetRowRelativeCharAtLoc instead of
						GetCharAtLocation. Updated docs on GetCharLocation etc to use
						'relative' versions as a speedtweek.
040126	WORKING	LGP			RecomputeSelectionGoalColumn () on selchange, and use
						GoalColumnRecomputerControlContext class to avoid that recompute in the special case of using
						arrow keys to nagivate up/down (part of new, better goal-cou
040126	WORKING	LGP			In Led_Win32's FunnyMSPageUpDownAdjustSelectionHelper code
						lose fColumnNum - and use TextImager::GoalColumnRecomputerControlContext/
						ti.GetRowRelativeCharAtLoc(GetSelectionGoalColumn)) to provide more
						efficient, and better positioning of caret when adjusting selection
 						due to scrolls
040126	WORKING	LGP			Look through newly written code, and the rest of Led,
						and use GetCharLocationRowRelative instead of GetCharLocation
						and GetRowRelativeCharAtLoc instead of GetCharAtLocation ()
						as speed tweeks. Also updated their documentation to make clear
						that this is often desirable.
040126	WORKING	LGP			FOLDED IN GOAL-COLUMN FIX (and incoproated into
						FunnyMSPageUpDownAdjustSelectionHelper)
040126	WORKING	LGP			See SPR#1597. This is closely related - and I thought identical.
						But after fixing this - and seeing that #1597 still existed - I'm
						obviously wrong.
040126	WORKING	LGP			Loose overrides  of ComputeRelativePosition () since the speedtweek
						can be done directly in the TextImager::ComputeRelativePosition ()
						version using GetStartOfNextRowFromRowContainingPosition () etc.
040126	NOTE		LGP			This is closely related to SPR#1597.
031230	REPORT	LGP			Implement solution to up/down cursoring. Currently
		(1604)			quirky at EOL, and keep goal-column for when I pass empty lines

040126	FIXED	LGP			FIXED
040126	WORKING	LGP			Get rid of obsolete qSupportFunnyMSPageUpDownAdjustSelectionBehavior,
						and replace it with 
						Led_Win32_Helper<>::SetFunnyMSPageUpDownAdjustSelectionBehavior.
							Moved the logic that was conditionally compiled (above) into the
						helper class FunnyMSPageUpDownAdjustSelectionHelper. Use that class
						iff above GetFunnyMSPageUpDownAdjustSelectionBehavior property true.
							Also use the new GetFunnyMSPageUpDownAdjustSelectionBehavior stuff
						inside GetControlArrowsScroll () usage - so that also preseves the
						selection.
040125	WORKING	LGP			Add Led_Win32_Helper<>::GetControlArrowsScroll () property
						to control new (optional - default off) behaivor for control-arrow -
						doing V-scrolling (much as MSDEV does).
040125	WORKING	LGP			TextImager::ComputeRelativePosition () is fixed for
						eCursorByLine eCursorToStart/eCursorToEnd cases. Now - in
						LedIt - we get the same (or better than) MSWord cursor-by-line
						functionality (CONTROL UP/DOWN arrow).
040125	REPORT	LGP			Fixup CONTROL-UP/DOWN-ARROW behavior.
		(1623)			In MSWord - CTRL-Up-ARROW goes to BOL (beginning of para)
						- or if already - then	to BOL of PREV para. CTROl_DOWN-AR goes to
						BOL of FOLLOWING para.
							In MSDEV, Control-DOWN-Arrow doesnt change the selection,
						but scrolls.
							I think LedLineIt - at least - should do like MSDEV. CONSIDER!
						What it currently does is probably undesirbale (go to BOL/EOL).

040125	FIXED	LGP			Fixed special case for TextStore::GetStartOfLine () - with
						empty last line and we ask get start of that line
040125	WORKING	LGP			Same thing is reproducible in LedIt (Win32). Let this bug
						just cover the CRASH (ASSERT). Let SPR#1623 cover the quirky
						behaivor (jumping to BOL/EOL), and consdier how this really
						should work.
040124	REPORT	LGP			DO CONTROL-UPARROW in ACTIVLEDIT (a full window) - a few
		(1622)			times. About 15 lines of text in it. Got assert error at last
						line of
						size_t	TextStore::GetStartOfLine (size_t lineNumber) const
						{
						// LGP 961129 - not 100% sure this is right - quickie implementation...
							Led_Require (lineNumber >= 0);
							Led_Require (lineNumber <= GetLineCount ());
						
							/*
							 *	Just walk through each char looking for '\n's and count lines. Could be
							 *	far more efficiently done elsewhere/in subclasses, but this tends to not be called directly anyhow.
							 */
							size_t	curLineNum	=	0;
							size_t	len			=	GetLength ();
							for (size_t	i = 0; i < len; i = FindNextCharacter (i)) {
								if (curLineNum == lineNumber) {
									return i;
								}
								Led_tChar	c;
								CopyOut (i, 1, &c);
								if (c == '\n') {
									curLineNum++;
								}
							}
							Led_Assert (false); return 0;
						}
						lineNUmber was = 15 and curlineNum was = 15. See if that specail case at the end
						should just return 'len' at end - rather than an error???

040125	FIXED	LGP			Problem with CHecKForUpdatesOnWeb was cuz code to map
						associated cmd#s returns zero when a failed mapping occurs,
						and we had bad association between cmds# between Led internal
						and LedIt/ActiveLedIt 'system-dependent' values for Win32. Fix
						those for kFirstPrivateEmbedding_CmdID/kLastSelectedEmbedding_CmdID
						- and clean up first/last private range inside of it.
040125	REPORT	LGP			See why in ActiveLedIt - there is no impl of 
		(1621)			kCmd_CheckForUpdatesOnWeb

040125	FIXED	LGP			Impled fix from SPR#1617.
020504	DEFER	LGP			DEFER for 3.0.1
020225	REPORT	LGP			Add Cut/Copy/Paste/Clear etc OLE AUT commands to ActiveLedIt! (ashish
		(1084)			request from 2002-02-25 email)

040125	FIXED	LGP			You can now replace the Paste command with PasteText using the
						following JavaScript:
							{
								var	oldPasteCmd	=	ActiveLedIt.ContextMenu.LookupCommand ("Paste");
								var	pasteIndex	=	ActiveLedIt.ContextMenu.IndexOf (oldPasteCmd);
								ActiveLedIt.ContextMenu.Remove (oldPasteCmd);
								//ActiveLedIt.ContextMenu.Remove ("Paste");				-- THIS ALSO WOULD WORK
								//ActiveLedIt.ContextMenu.Remove (oldPasteCmd);			-- THIS ALSO WOULD WORK
								ActiveLedIt.ContextMenu.Insert (ActiveLedIt.BuiltinCommands.LookupCommand ("PasteText"), pasteIndex);
								var	accel	=	ActiveLedIt.MakeNewAcceleratorElement ();
								accel.CommandInternalName = "PasteText";
								accel.ModifierFlag = 0x9;		//	eVIRTKEY | eCONTROL
								accel.Key = 86;					// 'V' doesn't work
								ActiveLedIt.AcceleratorTable.Add (accel, 0);
							}
040125	WORKING	LGP			Added new PasteText command (not part of default menus - but
						builtin. Added example of how to use this to the HTML test
						scriptCommandSupportTester.html). Add extra arg to _AcceleratorTable::Add ()
						for position to insert. Added IndexOf () method (to COM API - for
						IALCommandList. Implement the IALCommandList::Remove method.
040125	WORKING	LGP			InternalizeFlavor_Specific/OnPasteCommand_PasteFlavor_Specific
						methods added to support 'PasteAsText' method for ActiveLedIt. Also
						(for same reason) - added PasteLooksLikeSmartCNP () helper and used in
						OnPasteCommand_PasteBestFlavor (code sharing).
030201	NOTE		LGP			The right solution for this problem is to implement the COMMAND
						he wants (paste as plain text) and do the toolbar / context
						menu reconfigurability interaface. Then he can get exactly
						what he wants.
030201	NOTE		LGP			I sent him this response a while back:
							Since your inspiration for this feature was obviously
						the Paste Special command from MSWord, why not have me implement
						'paste special'? Would this address your needs? Perhaps NOT
						because you would want it bound to ^V? Is that so? How about
						if I made the context menu and cmd-key equivalents etc
						configurable from script code? When do you need this
						functionality by?
							One of the features I'm seriously considering for the
						3.1 release is to support complete configurability of the toolbar,
						context menus etc (from script code). That probably won't
						get done for 1-2 months - however. Would those two features
						meet your needs better than the PasteTextOnly property?
020918	REPORT	andrewg	> -----Original Message-----
		(1284)			> From: Andrew Grubbs [mailto:andrewg@qualigent.com]
						> Sent: Wednesday, September 18, 2002 1:37 PM
						> To: Lewis G. Pringle, Jr.
						> Subject: Feature Request - Paste as Text
						>
						> Feature Request for ActiveLEDIt.
						>
						> New property - PasteTextOnly (Boolean) (Default False)
						>
						> Setting this property to True will treat all pastes as a Paste as 
						> Text. No formatting (except carriage returns).  This is similar to the 
						> Paste Special commands in Word and Excel.  Having a property like this 
						> will help when I want to use the Ctrl-V hotkey without using the 
						> standard menu.

040125	FIXED	LGP			Lose old resource-based contextmenu/accelerators, and
						use new COM-based accelerator mechanism.
040123	WORKING	LGP			Checked in implemntation of InvokeCommand() and udated
						sample/test code to use/test.
040123	WORKING	LGP			Got (good) first implemenation checked in (and tested). Works
						well.
040109	REPORT	LGP			Add feature to allow context menu to be configured from scripting
		(1617)			code.

040120	FIXED	LGP			Derek pointed out in that email that the issue was probably
						{\f1\fs16\cf0\up4\dn0 2} - the \up and \dn tags. Reading the
						RTF spec - I cannot understand how those are really supposed to work.
							However - a kludge I implemented seems to work decently.
						If I ever see a \upN with N > 0 - I treat that as the same as
						\super and if I ever see a \dnN with N > 0 I treat that as seeing
						a \sub.
							I'm pretty sure this isn't right - but after breif testing,
						it appears to handle these cases better.
							I've passed a build to Derek to see if he considers this a
						'fix' or not.
040120	REPORT	LGP			Open file SPR_1620_orig.rtf. Open it in Word XP - and note how
		(1620)			you see squared exponent. Open it in WordPad on WinXP - and you
						still see it. Open it in LedIt (orig complaint from orig
						Derek Henderson email 2004-01-19 was about ActiveLedIt) - and
						you DONT see the superscript.

040109	FIXED	LGP			Done.
040108	REPORT	LGP			ALL projects under (Unsupporte) SB deleted for XWindows
		(1616)			target source product. And ActiveSpelledIt folder SB deleted
						in XWin Source

040109	FIXED	LGP			Mostly done. Follow up after next release to see
						if anything else needs to be deleted (or undeleted).
040109	NOTE		LGP			Borland stuff OK. But check NetLedIt, and still must
						move AuxFiles stuff for NetLedIt plugin SDKs to (unsupported)\
						AuxFiles.
031231	WORKING	LGP			Got rid of some of it. Will still need to work on more
						as I run through release procedure.
							Still must delete dirs (all files in them), move
						to UNSUPPORTED folder, and update final build scripts etc.
						Also - must update website. Probably won't get it ALL fixed
						for the a8 release - but try to get most.
031231	REPORT	LGP			CONSIDER MOVING BORLAND C++ support to (OLD - UNSUPPORTED)
		(1611)			Similarly for NetLedIt

040109	FIXED	LGP			Fixed select-all behavior when there is only a
						single table (and nothing else in the document. Also -
						revised behavior so selectall first selects all in cell,
						and only if already selected - selects all in document.
040107	REPORT	LGP			CTRL-A and SelectAll CMD from menus dont work inside
		(1615)			of a table cell.

040108	FIXED	LGP			CalculateFarthestRightMarginInWindow/
						CalculateFarthestRightMarginInDocument now use GetLayoutMargins ()
						instead of GetMargins - so they react to its override (like
						for wrap-to-window).
040105	WORKING	LGP			I think the 'fix' was to change the implementation of
						WordProcessor::CalculateFarthestRightMarginInDocument () etc
						so that they used GetLayoutMargins () instead of GetMarings().
							That seems to work. Otherwise - I COULD have just
						done an override of LedItView::CalculateFarthestRightMargin ()
						as I had in LedIt to implement WrapToWindow. Test removal
						of that - and review the code and docs once more to be 
						sure this is the best path.
040105	REPORT	LGP			Goto page 
		(1614)			http://www.sophists.com/Led/ActiveLedIt/OnlineDemos/ScriptingSampleActiveLedItPage.asp
						and note that the 'wrap-to-window' feature doesn't work. SOmeone complained that
						the 'h-scrollbar' feature was DIFFERENT than in previous releases. I didn't see what
						he meant originally (not sure why) - but now I suspect this is the issue.


------------------- Released 3.1a8 2004-01-01 - Below ------------------------------

040101	FIXED
040101	REPORT	LGP			Look into where in teh registry we put the DEMO stuff
		(1613)			for ActiveLedIt and ActiveSpelledIt. Make sure safe (writable).
						Also fix where we write options for ActiveLedIt under HKCU
						(be more consistent about Settings and need for ! in name?).
						Maybe current is just new and OK - diff from old loc?

031231	FIXED	LGP			FIXED
030624	WORKING	LGP			Maybe fixed? Added - STILL MUST TEST.
030624	REPORT	LGP			Add SpelledIt utils to buildall.bat file - so exes are
		(1542)			built each time.

031231	CHANGE	LGP			Fixed code which was recently implemented (SPR#1572) to check for
		(1610)			non-existant files using OpenFile in LedIt and LedLineItMFC (WIN32)
						to use CreateFile () API instead of OpenFile () API (since the
						former doesn't have a wide-char (UNICODE) equivilent).

031230	FIXED	LGP			DUP of SPR#1580
030923	REPORT	LGP			Find dialog (and replace dialog as well) - should use a COMBOBOX
		(1557)			instead of just a text field, to keep track of previous edit selections.

031230	FIXED	LGP			FIXED, except added SPR#1605, SPR#1606, SPR#1607, SPR#1608 to
						miscellaneous spin-off issues.
031230	WORKING	LGP			Added code to LedIt/LedLineItMFC/ActiveLedIt to use this new
						find/replace dialog.
031230	WORKING	LGP			New TextInteractor::SearchStrings class to replace (subclass from)
						TextStore::SearchParaemeters. Adds fRecentFindStrings.
						<OLDCODENOTE>
							Changed override of TextInteractor::DialogSupport::DisplayFindDialog/
							TextInteractor::DialogSupport::DisplayReplaceDialog to take extra
							parameter.
						</OLDCODENOTE>
							Added MergeRecentFindStrings () method to combine search
						strings into non-infinite (non-redundant) list of recent strings.
031230	WORKING	LGP			Renamed qSupportLedDialogWidget to qSupportLedDialogWidgets.
						Added new LedComboBoxWidget class to implement Led-based
						ComboBox (still not perfect, but pretty close to releasable).
						Then used that in the Find and Replace dialogs for the search
						string.
031223	WORKING	LGP			Added SimpleWin32WndProcHelper to Led_Win32 module,
						and changed semantics of Create () method (for Led_Win32 and for
						this helper class) - so a NULL value for class-name passed in
						automatically constructs a registered class. Then get rid of
						arg to Create (pass null instead) from ReplaceWindow()).
							All part of building new Led_ComboBox class.
031203	REPORT	LGP			LEDIT/LEDLINEIT (ALL) - FIND dialog (WINDOWS) -
		(1580)			should contain COMBO BOX with old selections to grab from!

031230	FIXED	LGP			Fixed as a part of SPR#1602.
031230	REPORT	LGP			Fix the way we write UNICODE strings into the registry.
		(1603)			It STINKS! And doesn't work even decently when we switch from
						a UNICODE Led to a partial UNICODE Led.

031230	FIXED	LGP			Significantly imroved and expanded this class, and
						used in LedIt, LedLineItMFC, and ActiveLedIt for options.
						NB: currently doesn't support MacOS options.
031230	REPORT	LGP			Expand OptionsFileHelper to support list of strings,
		(1602)			and UNICODE strings, and then use this class inside LedIt
						etc's Options implemenation (and ActiveLedIt/LedLineIt etc).

031217	FIXED	LGP			Updated ActiveLedIt to support all the various API
						changes with ActiveSpelledIt, and the spellcehck APIs. Though
						I ran into many spinoff issues along the way (e.g. SPR#1559,
						SPR#1600, SPR#1601) - we we mark THIS issue as closed.
031216	WORKING	LGP			Added several new UD/SD loading APIs to ActiveSpelledIt.
						Minimal testing of the new APIs - but at least saving
						to UDs works (AddWordToUD UI/API).
031212	NOTE		LGP			Handle the MacOS portion of this as part of SPR#1598
						(during beta)
031210	WORKING	LGP			Integrated into LedLineItMFC.
031209	WORKING	LGP			Used SpellCheckEngine_Basic_Simple from LedIt, and
						for Windows - call fSpellCheckEngine.SetUserDictionary to
						specify UD name.
031209	WORKING	LGP			Added UD support (add word to UD, new
						SpellCheckEngine_Basic_Simple, major revision to
						SpellCheckEngine_Basic::EditableDictionary, etc)
031209	WORKING	LGP			Added FileWriter helper class to LedSupport.
031208	REPORT	LGP			Support USER-DICTIONARIES (must handle if input data is
		(1585)			out of order, etc and an ADD method, and re-saving the file)

031217	CHANGE	LGP			Changed ActiveSpelledIt FindWordBreaks API to return	
		(1600)			helper object. Since I cannot get returning multiple values
						to work with COM (/OLEAUT APIS) - just create helper objects
						to hold those values. Lose the ScanForUndefinedWords API as
						well for a similar reason. Just use CreateScanContext.

031211	FIXED	LGP			Tested on MacOS - and works there too (though the Mac
						spellcheck UI is quite poor and needs fixing).
031211	WORKING	LGP			Tested - and works fine on Linux (though UI dialog
						is PATHETIC - and really unusable except for testing). See
						SPR#1524 for that ugly dialog issue.
031211	WORKING	LGP			Checked in new dict after compiling with new dictcompiler
						code gen to produce list properly sorted BOTH for UNICODE
						and SingleByte. Also - many other fixes, and improved dict
						contents. Still must test on Mac/XWin.
031208	WORKING				Implemented code to generate #ifdefs and output both
						UNICODE and single-byte compiled code. Very limited
						testing (on small sample). Full dictionary takes many
						hours - so waiting on test results.
031208	WORKING	LGP			Reproduced same issue in LedIt MFC by building SingleByte
						version - so that appears to be the problem.
031207	WORKING	LGP			I think this remaining problem is just with the spellcheck
						code. LedIt comes  up (using RH8) - and when I run a spellcheck
						on a doc with errors - I get an assert error. Finish
						looking into this. May need to fixup file format code and do
						narrow/wide versions etc...
031207	REPORT	LGP			remaining GCC problem COULD be 1545- or could  be cuz
		(1584)			our dictcomp writes things out in wrong order for
						NARROW-Led_tChar. We must fix that writing code to write out
						two values in ifdefs - basically - two spparate ocompiles.

031212	FIXED	LGP			The issue was TextLayoutBlock_Copy::BlockRep - was
						allocated as an array of chars (since length varies and we stick
						stuff off the end) - but deleting using regular delete
						(by the Led_RefCntPtr<> implementation). Solution was to
						provide overloaded TextLayoutBlock_Copy::BlockRep::operator delete()
						that calls the delete[] (of char*).
031212	REPORT	LGP			Running LedIt on MacOS - we immediately get an
		(1596)			error from the delete() implemntation (debug only)
						complaining that the a block was allocated with new []
						and then deleted using delete (without the []).

031211	FIXED	LGP			Tested. Seems to work fine now (though not a huge space
						savings - less than I expected).
031210	WORKING	LGP			Tested this works for UNICODE case. Still futzing/
						tuning the single-byte generation code.
031208	WORKING	LGP			Implemented code to generate shared / overlapped data in
						compilation. Tested on very small corpus. Now compiling to test
						on full corpus (but that takes several hours).
030620	REPORT	LGP			FIX MungeDictionaries to compile into smaller dict data -
		(1541)			by overlapping strings which overlap (like I did for LV in the
						old days - keeping a big blob and searching it before adding
						any strings). Requires no changes to actual USE of dict code -
						since enuf indirection in place through the infoblocks.

031211	FIXED	LGP			Much improved handling of upper case words lookups.
						If a word is all upper-case, then match it against
						the same text all lower case, and all lower case but
						first letter capitalized. This appears to mostly
						have the intuitive matching.
							See SPR#1595 about suggestions to improve hueristic
						function with all caps (and related) words.
031211	REPORT	LGP			Must handle CAPITALIZED strings better in spellchecker.
		(1594)			Maybe check if a word is all caps - and if so - transform so
						only first letter	is capitalized - and look that up?

031211	FIXED	LGP			Add SpellCheckEngine::GetTextBreaksUsed () method so I
						can utilize the right TextBreaks routine from the spellcheck
						loop. Then use that in MyCallback::GetNextMisspelling () so
						that we backup to the start of each word when beginning a
						chunk spellchecking, and more importantly - fix the code
						to actaully check successive chunks of no misspellings
						found in the first one.
031211	WORKING	LGP			Document and overload TextStore::FindWordBreaks ()
						and TextStore::FindLineBreaks (). Overload takes diff
						TextBreaks proc optinally.
031211	WORKING	LGP			Code in GetNextMisspelling () is completely trash.
						It we never written to handle multiple chuncks.
						PLUS - its not very smart at the begining of the chunk.
						Must move back to prev word boundary. Then start chunk.
						Plus must actually do more than the first chunk!
031211	REPORT	LGP			Open file SPR_1593.txt in LedLineIt. Hit SpellCheck.
		(1593)			Hit ignore to skip any uniniteresting words. Note how we
						never get to 'fasdfkaskdf' at the end of the file. Thats
						clearly a MIS-SPELLED word. We seem to be 'aborting out'
						of the scan too early.

031211	FIXED	LGP			Fix a couple bugs with spellchecking - mostly with
						hyphenated word lookup - but also a serious mem overrun
						(reading) in the Hueristic function.
031210	REPORT	LGP			SERIOS SPELLCHECK BUG. Open LedBugs with LedLineit.
		(1592)			Start a spellcehcking session. After a while - get
						infinite recursion (stack overlflow). I think the bug was
						the logic for doing lookups with hyphens when part not found
						(recursive lookup - when I throw in the '-'). Careful tehre not to
						recursse!!!

031210	FIXED				Respoect AddToDictioanryEnabled callback value to disable
						the addtodict dialog button. Also - added similar
						OptionsDIalogEnabled callback and respected that so
						button disabled (til we've had time to implement an options
						dialog).
031210	REPORT	LGP			Take advantage of AddToDictionaryEnabled () to
		(1590)			enable/disable the add-to-dictionary button in the
						spellcheck dialog

031210	FIXED	LGP			We may need to hand-tweek this list slightly - but
						the automated system did pretty well - and I checked in
						the results.
031210	WORKING	LGP			Done - but testing...
031210	REPORT	LGP			Modify compilation tool to search through all hythepnated
		(1587)			words - and any that can be constructed from other loaded
						words - mark them as disabled.

031212	FIXED	LGP			Updated SpellCheckEngine_Basic::LookupWord_ () to
						handle hyphenized words lookup and document clearly
						how (and what goes in the data file).
031212	WORKING				Updated MungeDictionaries utilities with -fh
						flag to filter hypenated words (to trim unneeded entries
						from dict).
031210	NOTE		LGP			Change lookup code so words like "anti-" only match
						"anti-SOMETHING". Use this to declare suffixes and prefixes
						(-xxx for things that only go at the end)
031210	REPORT	LGP			Document and implment hyphenation support in spelling
		(1588)			dictionary (handing of words that end with - etc)

030620	FIXED	LGP			Basically done - though needs some tuning (see SPR#1540, SPR#1541)
030620	WORKING	LGP			Separated out dictionary data into separate object and supported
						compiled dictionary object from MungeDictionaries utility and #include
						that directly. All basically works - though needs lots of tuning!.
030820	WORKING	LGP			Got basic dictionary compilation working - producing initialzed C
						structs - in MungeDictionaries.
030619	NOTE		LGP			Instead of building separate app - just add -compile option to
						MungeDictionaries utility from SPR#1537.
030619	REPORT	LGP			SPELLCHECK. Based on SPR#1536. Write utility to compile dictionary
		(1538)			source into a form usable (and compact) by dictionary code.
						Compile to C++ init structures.

031207	FIXED	LGP			Use GCC_PREREQ () macro in LedConfig.h to control
						bug defines.
030627	WORKING	LGP			Checked in a fix that works for RH7.3 but should TRY to find
						some way to tell subversions apart!
030627	REPORT	LGP			fix bug compiling with GCC. Maybe try soemthing like
		(1545)			template <>
							inline	const wchar_t*	wstring::c_str () const
								{
								// fill in code but use L"";
								}
						(CAREFUL ABOUT GCC 3.0 versions (find exact version and do something so I can tell)
						cuz gcc 3.2 on RH8 works fine - its just GCC???? on RH7.3 that is a problem wtih
						the c_str () function...
						)

031206	FIXED	LGP			I found one more case like this: Get/SetEnabled. I fixed
						that as well. I didn't test - as I never found a good way
						to reproduce the problem. Hopefully all set.
030707	WORKING	LGP			This happens somewhat doing a refresh from MSIE 6 and
						more reproducibly from MSIE 5.5. Bug was that the OLE_SetReadOnly
						code didn't work cuz the window wasn't set yet (not yet OnCreate
						called). Solution was to use the same OnCreate hack I had used
						for SPR#1546. So - now this is solved - but I must apply the 
						SAME hack to other properties (may as well make them settable
						as PARAMs like SPR#1546) - so the window property gets set
						on delay. Tested - and worked fine.
							Still todo is fixing OTHER properties (that call
						ThrowIfNullWindow().
030707	REPORT	GregSaund	Based on SPR#1546. You get a sporadic exception thrown
		(1547)			setting the ReadOnly property for javascript from the OnLoad
						event of the Body tag.

031206	CLOSED	LGP			Cannot reproduce - so close.
031202	NOTE		LGP			I've tried to reproduce this a bit - and haven't
						seen it in quite some time (months). I don't think
						its fixed - but I do think its rare.
031106	REPORT	LGP			See if I can reproduce (and fix) occasional problem
		(1579)			with printing where print dialog hangs around - and
						doesn't get erased from teh doc (no proper inval when
						dialog goes  away - sometimes???).

031206	FIXED	LGP			The issue with this file is that it used Word-6 /RTF 95 vintage
						list specifications. Led didn't support that - and still doesn't
						very well.
							Led still does not support numbered lists (See SPR#1581). And
						Led still only has minimal support for reading Word 6 format
						RTF lists (see SPR#1582 for improved support).
							However - Led now has enough Word6 List Spec RTF support to
						read basic list attributes - and reads both lists you
						had in that sample file (though the numbered list is converted
						to a bullet list).
030805	REPORT	GregSaund	Note that the text in file SPR_1550.rtf - when opened in
		(1550)			LedIt - doesn't show numbered lists or any lists at all (bullets).

031302	FIXED	LGP			Simple bug with said new ProcessCmdLine code.
031201	NOTE		LGP			Almost certainly a small bug with the ProcessCmdLine
						override I did (for basic open case - may have only
						tested exception open case).
031201	REPORT	LGP			Opening files from CMDLINE (and associated cmd) doesn't
		(1578)			seem to be working for	LedIt anymore. Recent regression -
						I believe. I tried opening ActiveLedItReference.rtf
						as an example.

031130	FIXED	LGP			Re-enable some code in
						StyledTextIOWriter_RTF::AssureFontTableBuilt (), and revise
						it to work with new AssureBuilt code. Someday should probably
						replace with a more portable generic font mapping mechanism
						(as some customer had requested a couple years ago).
							See also SPR#0741.
031130	WORKING	LGP			Open file SPR_1577.rtf in WordPad. Note it doesn't look
						good. Then open in LedIt. It looks fine. Open in WinWord
						and it looks fine.
031113	NOTE		LGP			I’ll try to look into this matter next week. I
						looked very briefly – and what I saw was that the
						attached RTF file appears reasonable when viewed from
						LedIt, or from Microsoft Word 2003, but doesn’t look
						very good when viewed from WordPad. It looks like there
						is something about how the characters are encoded (maybe
						the UNICODE encoding) – that isn’t properly supported
						by WordPad. I’m not sure.
							Anyhow – I do appreciate the importance of having
						ActiveLedIt generate RTF which is not only ‘technically correct’ –
						but also pragmatically correct, and that – where possible –
						it should be generating RTF that looks good in WordPad.
031113	REPORT	LGP		>From: Derek Henderson [mailto:dhenderson@odysseylearn.com]
		(1577)			>Sent: Thursday, November 13, 2003 2:32 PM
						>To: Lewis G. Pringle, Jr.
						>Subject: ActiveLed Question
						>Lewis - the attached file (a.rtf) displays fine in an html
						>page (a.html), and when you print it by right clicking on the
						>screen then choosing print, however when you view the file
						>in with write - it does not display properly.
						>I have tried saving it to a file as follows:
						>actled.SaveFileRTF "c:\c.rtf"
						>and then tried viewing the c.rtf file and the same thing happens.
						>Any ideas on what the problem is?
						>Thanks
						>Derek

031130	FIXED	LGP			I couldn't reproduce the problem (maybe I had
						the wrong file: SPR_1573.txt?). Anyhow - I think I corrected
						the problem by pinning the reuslt in
						TextImager::GetTextWindowBoundingRect ().
031128	REPORT	LGP			See about bug (and my 'work around') with scrolling
		(1573)			in that big doc (on my	desktop). 2003-11-28.  in 
						Sources/TextImager.cpp - gettextwindowboundingxxx.
						Trouble with windowRect causing violation of assert. How
						should that edge condition	be handled. Review how the
						routine is used, and see what makes the most sense,
						and then carefully document the choice.

031130	FIXED	LGP			My first attempt indicated that my first fix was
						erronious - and broke Arabic support.
						Fixed TextLayoutBlock_Basic::Construct_UNISCRIBE () to
						compute visualSegStarts() array and then use that inside
						loop. This way we get the speedtweek of the earlier fix,
						but its now also correct.
031129	WORKING	LGP			Retest my code for Arabic text - because of the
						speedtweek code I did!
031127	WORKING	LGP			Altogether - the fixes make this file editing about
						10x faster. Its still quite slow - but not so bad it looks
						broken (as it did before).
							Note: new SPR#1571 opened to cover further optimization
						opportunity.
031127	WORKING	LGP			Use GetTextLayoutBlock () in
						SimpleTextImager::DrawPartitionElement (already was doing that
						in MRTI::DrawPartitionElement) instead of direct TextLayoutBlock_Basic
						CTOR call. Not really faster now - but will be if we cache these
						records.
031127	WORKING	LGP			Small tweek to TextImager::DrawSegment_ () sped things
						up a bit.
031127	WORKING	LGP			Significant tweek to 
031126	WORKING	LGP			This file (now stripped to SPR_1566b.txt) now
						has a single line - whcih is about 400K. This line
						takes a long time to compute its runs (which turn out to
						be one). The first - and most glaring problem is within
						my UNISCRIBE wrapper code - so I'm going to try
						to address that first (there are about 30K scriptItems
						in the string that get reduced to - I think - a single
						LTR run - and my algoirthm to map the UNISCRIBE runs to
						the Led ones is too slow for very long lists).
031126	NOTE		LGP			File saved as SPR_1566.xml. Issue appers to be just a
						long line around #75(and maybe more after).
031126	REPORT	Simone		Open file she emailed me in LedLineIt. See if there
		(1566)			is any problem with LedLineIt editing that file? See if the
						issue is just being slow on very long lines? If so - maybe
						see if I can tweek that case so its acceptable?

031129	FIXED	LGP			Did likewise for LedIt.override CWinApp::ProcessShellCommand ()
						to detect if a failed file open (on startup) was becuase the
						file didn't exist - and if so - create the empty doc - with
						that assosciated file name (so when you do a save -
						it goes by default to that name). Modify Title to say {new}
						so its clear it wasn't found. ALso - fixed 
						CSingleDocTemplate::OpenDocumentFIle() code so it properly handles
						exceptions.
031129	WORKING	LGP			Override OpenDocumentFile () in SimpleLedTemplate()
						to work around MFC's buggy handling of failure from
						CDocument::OpenDOcument() (before I did this - it would
						have crashed if I'd opened a second doc).
							Then - also - add code to LedLineItApplication::ProcessShellCmd()
						code so if the open fails due to file not existing, then
						create a NEW doc - and preset that as the default file name
						and append " {new}" to the doc title.
031127	WORKING	LGP			Throw during the open of first doc causes crash
						on open of second. Has nothing todo with the changes
						I made. I think thats a bug thats existed for a bit.
						DEBUG that - and then get working my NEWDOC code.
031127	REPORT	LGP			Start of LedLineIt (or LedIt) with CMDLINE of
		(1572)			non-existant file should create file NEW (dont fail
						open - just make new doc and set default file name
						to specified filename)

031126	FIXED	LGP			I thoguht what UltraEdit32 does was too ugly.
						I just select the entire line on a goto-line
						command in LedLineIt.
031126	REPORT	Simone		Change LedLineIt goto line fuction to select
		(1567)			the line gone to. Maybe have a mode like UltraEdit
						where the current line is always somehow (background subtly)
						hilighted.

031126	FIXED	LGP			FIXED.
031126	REPORT	Simone		Undo groups should be broken when you type a NL character.
		(1569)

031126	CLOSE				I tried again for 5 minutes and couldn't reproduce. I also don't recall
						seeing this in the last year. CLOSED.
021219	DEFER				I've tried for 5 minutes and cannot reproduce. It always seems to work.
						Keep any eye out for this though...
021219	WORKING	LPG			No. Must have been my imagination? Anyhow - I cannot reproduce any problems
						anymore. Keep trying though...
021219	WORKING	LGP			Trying to reproduce. I've gotten a COUPLE of repros doing two undos
						in a row. Not a crash - but funny behavior for the second UNDO.
021219	REPORT	LGP			Undo SLIGHLY broken in some cases on LedLineItMFC. I've seen
		(1213)			this a couple times, but never been able to reproduce. Right now -
						undo seems to be producing some kind of error. Undo - when it works - will
						sometimes produce the wrong results - and sometimes will produce an
						error message (probably cuz things out of sync and got wrong selection offsets?).
							FIND A WAY TO REPRODUCE AND FIX THIS. HIGH PRIORITY!

031126	FIXED	LGP			Fix TextInteractor::DoSingleCharCursorEdit () to directly use
						UndoableContextHelper and InteractiveReplace_ () instead of calling
						SetSelection/InteractiveReplace. Use CLEAR cmd name for the command
						on a backspace. Use new BreakInGroupedCommandsIfDifferentCommand ()
						so we get a clear break in cmd groups between typing and backsapces
						(which show up as clear cmds).
							NB: This bug is basically the same as SPR#1518, and SPR#1568.
010926	DEFER				DEFER for Led 3.0 (this same bug is reproduced in LedLineIt! 2.3).
010926	REPORT	LGP			Backspace commands are undable - but each char is a separate
		(1050)			undo event (which means only three saved in LedIt - for example).
						If this is not a regression, then I think it is deferrable.

031126	FIXED	LGP			Closed (DUP of FIXED SPR#1050)
030530	REPORT	LGP			very small undo bug. Do a backspace (with empty selection).
		(1518)			Then undo. Note how selection isnt restored but is set to region
						deleted.

031126	FIXED	LGP			Closed (DUP of FIXED SPR#1050)
031126	REPORT	LGP			Investigate some slightly strange behavior with
		(1568)			undo with respect to the backspace key (seems to
						not preserve selection properly??)

031126	FIXED	LGP			Set kMaxUndoLevels = 512 for LedIt and LedLineItMFC.
031126	REPORT	Simone		Simone wants infinite undo in LedLineIt.
		(1565)			(do mem-leak issue - SPR#1564 - first - since we must save space
						to make this practical)

031126	FIXED				Fixed as part of SPR#1493. (not sure what the real original date was - but
						it must be wrong).
040507	REPORT	LGP			Commands should NOT store TextInteractor (if possible?). In
		(1468)			LedLineIt - open a new doc, and type "this is a test". Say "new window",
						so we have 2 simultaneous views. Note how editing in one appears
						in the other. Select a word and "Cut". Close the window. Goto the
						other window and say "UNDO". BANG.
							LOWPRI.

031126	FIXED	LGP			FIXED. Added TextInteractor::PostInteractiveSimpleCharInsertUndoHelper ()
						as part of SPR#1564.
010919	DEFER				DEFER for Led 3.0 (med to low priority)
010918	REPORT	LGP			Fix TextInteractor::InteractiveUndoHelperMakeTextRep () to return
		(1037)			a MUCH more compact (and quicker to construct) object for each character
						typed. We've optimized the zero-width case. Now optimize the ONE width
						case (which happens once for every character typed). Now - each single
						character is represented by an entire RTF buffer (probably 1K or more).
						On MacOS - this adds significantly to typing time (in my profiling - see
						SPR#1029).
							This is too big a change to make so late in the game, so it will have
						to be defered. It makes no noticable difference in my PC testing,
						but it must make some - and at least waste memory there.

031126	FIXED	LGP			Major change to improve undo memory usage. Added
						SimplePlainTextInsertOptimization flag and when set
						(typing a single character) - we first try to just append
						the character to the 'afterRep', and if that fails (cuz
						its not of the right type) - then at least create a
						simple afterRep (PlainTextRep) for this special case.
						Note - we had to modify the smantics (backward compat
						code note!) of InteractiveUndoHelperMakeTextRep to return
						a bool - indicating if there was any change.
							I looked at the WP table undo code - and it
						looked like it needed no changes to automatically
						work with this new code. I tested only minimally - but
						it looked good! Seemed to waste less memory, and I saw no new
						bugs.
031126	WORKING	LGP			See also SPR#1165. I looked into this and saw
						no mem leak (and sent them email a while back). But we
						do use alot of memory. See about using less. Working on
						this today (first in the context of LedLineIt).
031026	REPORT	SunBurst		SEE EMAIL FROM 'cBrass@sunburst.com' October 26, 2003.
		(1564)				See about question of mem-leak (see email from around
						October 2003) - in undo processing. Maybe no memleak - but
						just complaining of extravagant mem use. See if I can
						easily make it cheaper (and then extend # of undos saved).

031125	FIXED
031125	WORKING	LGP			Use TextBreaks_Basic_TextEditor in LedLineItMFC.
031125	WORKING	LGP			Renamed TextBreaks_OLD to TextBreaks_Basic, and added
						TextBreaks_Basic_TextEditor and TextBreaks_Basic_WP. These different
						subclasses have slightly different word-break rules, appropraite
						for their use. Default to WP case (mostly for backward compat).
						Further cleanup word-break code and add more special cases
						appropriate to both WP and texteditor subclasses.
031125	WORKING	LGP			First make CharToCharacterClass stuff into methods of
						TextBreaks_OLD, and merge the two methods (related) into one
						common virtual method (so can be more easily overridden). Then
						fixed the existing (default) code so it does a better job
						handling apostrophes (single quotes) by default. Added primitive
						regression test mechanism for this code.
031124	WORKING	LGP			See file SPR_1563a.rtf
031120	REPORT	Simone		(apx date)Simone's complaint about apostrophe character in
		(1563)			double clicking - at least in LedLineIt

031106	FIXED	LGP			Improved logic in LedLineItView::OnTypedNormalCharacter ().
031106	REPORT	Simone		Improve logic for selection-and TAB char insert
		(1561)			(within a single line - dont treat as SHIFT) - LEDLINEIT -
						SIMONES COMPLAINT.

031106	FIXED	LGP			I THINK this is fixed. I found one bug with the LRUCache<>
						code (LRUCache<>::SetMaxCacheSize () didn't always set ALL the
						prev/next fields). That caused the below crash. I hope thats it!
031106	WORKING	LGP			I tried to repro - and ran into once:
								 	LedLineIt.exe!Led::_Led_Debug_Trap_(const char * fileName=0x00798f6c, int lineNum=3439)  Line 725 + 0x8	C++
								 	LedLineIt.exe!Led::LRUCache<Led::PartitioningTextImager::MeasureTextCache::CacheElt>::ShuffleToHead(Led::LRUCache<Led::PartitioningTextImager::MeasureTextCache::CacheElt>::CacheElement * b=0x01a10358)  Line 3439 + 0x18	C++
								 	LedLineIt.exe!Led::LRUCache<Led::PartitioningTextImager::MeasureTextCache::CacheElt>::AddNew()  Line 3493	C++
								>	LedLineIt.exe!Led::PartitioningTextImager::MeasureTextCache::PrepareCacheUpdate(Led::Partition::PartitionMarker * pm=0x01a041c8)  Line 786	C++
								 	LedLineIt.exe!Led::PartitioningTextImager::CalcSegmentSize_CACHING(unsigned int from=956, unsigned int to=957)  Line 815 + 0x16	C++
								 	LedLineIt.exe!Led::PartitioningTextImager::CalcSegmentSize(unsigned int from=956, unsigned int to=957)  Line 753 + 0x13	C++
								 	LedLineIt.exe!Led::PartitioningTextImager::GetRowRelativeCharLoc(unsigned int charLoc=956, unsigned long * lhs=0x0012dac8, unsigned long * rhs=0x0012dabc)  Line 925 + 0x49	C++
								 	LedLineIt.exe!Led::SimpleTextImager::GetCharLocationRowRelative(unsigned int afterPosition=956, Led::SimpleTextImager::RowReference topRow={...}, unsigned int maxRowsToCheck=27)  Line 1564 + 0x34	C++
								 	LedLineIt.exe!Led::SimpleTextImager::GetCharWindowLocation(unsigned int afterPosition=956)  Line 1122 + 0x30	C++
								 	LedLineIt.exe!Led::TextInteractor::CalculateCaretRect()  Line 3760 + 0x30	C++
								 	LedLineIt.exe!Led::TextInteractor::InvalidateCaretState()  Line 3820 + 0x16	C++
								 	LedLineIt.exe!Led::Led_Win32_Helper<Led::TextInteractor>::InvalidateCaretState()  Line 2542	C++
							I'm still investigating. But - one issue I saw
						with the LRUCache<> code is that I should have an
						assertion that we don't do a shuffle in hte middle of while
						a CacheIterator is active (since no smart iterators).
031106	REPORT	Simone		Look at reporo of CRASH in LEDLINEIT (doing delete???)
		(1562)			- ask Simone for hints...

031106	FIXED	LGP			Also added LStream* overload to WordProcessorCommonCommandHelper_PP<>.
031105	WORKING	LGP			Got rid of WordProcessorHScrollbarHelper<> and merged that
						code directly into WordProcessor. In doing this - I noticed (and fixed)
						SPR#1559.
						<OLDCODENOTE>
							Note - any use of WordProcessorHScrollbarHelper<> should be
							completely eliminated. Its been folded into the WordProcessor class.
						</OLDCODENOTE>
031103	WORKING	LGP			Consider totally losing the WordProcessorHScrollbarHelper<>
						template and moving teh functionaliyt into the WP class itself.
031103	WORKING	LGP			I think the solution is to change the inheritance hierach - and move
						WordProcessorHScrollbarHelper/WordProcessorCommonCommandHelper_PP elsewhere
						(non PP class away from PP classes - and add arg to WordProcessorCommonCommandHelper_PP
						for stream).
031021	REPORT	Amit.Wa	>NEW (small) bug report from Amit- with MacOS Led PP classes
		(1560)			>From: Amit [mailto:amit.wakade@lionbridge.com] 
						>Sent: Tuesday, October 21, 2003 10:27 AM
						>To: Lewis G. Pringle, Jr.
						>Cc: Nimish
						>Subject: LED Issues and Sample Application
						>
						>...
						>LED code Modification -
						> 
						>I added these constructors in Led library's classes those are as follows. 
						>(I have typed my name wherever I have added something in your code which you will find in the 
						>Led_Files folder which I am sending you in .sit file )
						> 
						>File                                             Class
						> 
						>Led_PP_WordProcessor.h       WordProcessorCommonCommandHelper_PP<BASECLASS>(LStream *) 
						>WordProcessor.h                    WordProcessorHScrollbarHelper<BASECLASS>(LStream *)
						> 
						>Why this was needed 
						> 
						>These constructors were added because, in the inheritance Hierarchy 
						> 
						>LPane     
						>    |
						>LView 
						>    |
						>Led_PPView
						>    |
						>Led_PP_X<> 
						>    |
						>WordProcessorHScrollbarHelper<>                 //  Originally Doesn't have class constructor with LStream
						>    |
						>WordProcessorCommonCommandHelper_PP <> // Originally Doesn't have class constructor with LStream
						>    |
						>LeditView
						>    | 
						>CPPView
						> 
						>The classes WordProcessorCommonCommandHelper_PP<BASECLASS> & 
						>WordProcessorHScrollbarHelper<> do not have these constructors and without having 
						>these one can't pass the LStream to LVIew through the hierarchy and hence the proper 
						>object would not be constructed. ( 

031106	FIXED				Now fixed so any changes to margins (through paragraphDB)
						reset the fCachedFarthestRightMarginInDocument flag (store flag in PDB).
						<OLDCODENOTE>
							Note - that any overrides of CalculateFarthestRightMarginInWindow ()
							in WP view subclasses (e.g. LedItView) probably should be
							replaced with an override of CalculateFarthestRightMargin (). See
							current LedIt sample for details.
						</OLDCODENOTE>
031105	WORKING	LGP			Checked in massive changes to the scrollbar handling in Led_Win32,
						and had to redo how WordProcessor::ComputeMaxHScrollPos (copied from
						WordProcessorHScrollbarHelper - see SPR#1560) works, and caches info.
						Basic idea is to compute max for whole document - instead of just
						for the current window - since the 
031105	REPORT	LGP			Osccilating scrollbar bug.
		(1559)				Open file SPR_1559.rtf. Adjust window size so window size
						is at around 6.5 inches (on ruler). Scroll down using
						the down arrow to apx 2/3 way trough the file (around the line with
						the CROSSOVER-LINE). When that line is at the last visible row
						of the window - you will see a wierd flickering,
						where the horizontal scrollbar alternates between being
						shown and hidden.

031103	FIXED	LGP			WordProcessorTextIOSinkStream::PushContext () changed to
						flush if cachedTextSize != 0 - instead of asserting.
031103	WORKING	lGP			Open file SPR_1558a.htm (in MSIE) and select all and copy and
						paste into LedIt - CRASH!
							Also - simply open SPR_1558b.rtf in LedIt - and you get
						the same(?) crash.
031103	REPORT	LGP			Open saved CNN.Arabic.com web page saved on my laptop desktop.
		(1558)			Select all and paste into LedIt. Get Assert Error/Crash cuz
						startTable assertion about flush happening earlier on violdated.
						SERIOUS!

031103	FIXED	LGP			I just tested the new TextLayoutBlock_Copy code and the new
						PartitioningTextImager::GetPrimaryParitionTextDirection () code and
						the new TextImager::GetTextLayoutBlock () code. It seems to work just fine.
						I sent a copy to Jurgun - to see if its OK. Assume OK - til I hear back
						otherwise.
031103	WORKING	LGP			(stuff is from earlier)I THINK I CODED THE BIDI.CPP code - but I need to 
						figure out how to EFFICIENTLY keep track of the
						lastRowDIR COMPUTED - maybe by cachcing these BIDI records or something -
						so that when I compute	the BidiLayoutObject for non-starting rows - I give the
						right initial value...
							IMPLEMEMINTG TextLayoutBlock_Copy as helper so TextImager class can have a
						GetLayoutBlockForRange (X,Y) method and it will return a TextLayoutBlock_Copy.
							NOW IMPLEMENTED - just test a bit - and see if the email from Jurgun
						is ROUGHLY satisfied by this change - and if so - send him email. ALSO - DO
						TEST.
030923	WORKING	LGP			Added overloaded CTOR for TextLayout_Basic to take initial
						direction (still working on it - and testing).
030903	NOTE		LGP			I sent email saying I would try to do this within
						a month, and almost definitely before 3.1 goes final.
						I think all I need todo is change the CTOR for the
						BidiLayout object to take a prefered direction arg, and
						then (thats the tricky part) be sure I have that info handy
						when wrapping successive lines and pass it along.
030903	REPORT	Jurgen	>-----Original Message-----
		(1551)			>From: Jürgen Hofmann [mailto:hofmann@shiphrah.com] 
						>Sent: Wednesday, September 03, 2003 1:03 PM
						>To: 'Lewis G. Pringle, Jr.'
						>Cc: info@sophists.com
						>Subject: AW: BiDi in Led 3.1a7
						>
						>Dear Lewis,
						> 
						>first of all really thanks a lot for your support. I am NOT an expert in
						>the sense of being a native hebrew or arabic speaker. Nevertheless I hope
						>being able to convince you.
						...
						>I think you are currently using the first character of each line as
						>INITIAL value!? As far as I can imagine and see with simple samples,
						>I believe you should take the directionality of the paragraph as INITIAL
						>value for each line (either by inspection of the first character of the 
						>paragraph or some other means; in Word e.g. you can specify RTL/LTR
						>for each paragraph). From the samples of this and the last mail this seems to give the good result.
						> 
						>>Also – can you give me some perspective about ‘how bad’ the current
						>>implementation is? As I said – several people have reviewed it without bringing
						>>up this complaint. I don’t know how to judge if this is a minor knit, or a major
						>>problem.
						> 
						>As I said I am not a native speaker. But looking at the stupid sample
						>above and the Unicode Standard, I believe it is really a major problem.
						>I am a bit confused though, that your arabic reviewers did not complain.
						>I am really sure, that I am right, but still I wonder why they didn’t
						>notice. If you have any chance to ask them about their opinion, I would 
						>be glad to hear it.
 
030923	FIXED	LGP			Added this a while back. Now it has search and replace.
010830	DEFER	LGP			DEFER for Led 3.0 (Medium Priority for Led 3.1 - just cuz so widely expected (esp ActiveLedIt)
970820	NOTE	PaulBur		At 10:19 AM 8/20/97, Paul Burger <pburger@crystal-automation.com> wrote:
						>Why not a find/REPLACE feature for LedLineIt?
						>
						>Thanks
961205	DEFER	LGP		Defer, and probably do in Led 2.2.
961127	REPORT	LGP		At 2:57 PM 11/27/96, simone wrote:
		(0478)			>> Subject: Re: No search & replace in LedIt?

030922	FIXED				Spun-off SPR#1553 for remaining cleanups to LedIt. FIXED.
030922	WORKING	LGP			In OpenDocument (LedIt MFC CODE) - just vector to
						internalizer.InternalzieFlavor_FILE_Data - to get the data
						read in - and handle all the code to match file suffixes,
						guess foramts etc - that now exists genericly. Did this
						originally to avoid buggy MFC code for opening readonly (CD-ROM)
						or already open files. But - a good step forward on code
						sharing as well.
030922	WORKING	LGP			Rename kLedRTFClipType to ClipFormat (& likewise for
						LedPrivate/HTML). Add FlavorPackageInternalizer::InternalizeFlavor_FILEGuessFormatsFromStartOfData
						(and subclass override to check RTF/HTML etc file fomrats) when we
						are given no good file suffix etc and must peek at file data to
						guess type. Allow NULL SinkStream to CTOR for a Reader -
						since we could be just calling QuickLookAppearsToBeRightFormat () 
						which doesnt need an output stream. All for SPR#1552 -
						so we use same code in OpenDoc code as in when you drop a file on 
						an open Led window (and so we handle read-only files etc better).
030922	WORKING	LGP			Add StyledTextFlavorPackageInternalizer::InternalizeFlavor_HTML.
						Lose StyledTextFlavorPackageInternalizer::InternalizeFlavor_FILEDataRawBytes 
						and replace with StyledTextFlavorPackageInternalizer::InternalizeFlavor_FILEGuessFormatsFromName
						(and base class code to call InternalizeBestFlavor with new suggestedClipType).
						Moved kRTFClipType from FlavorPackage module to 
						StandardStyledTextInteractor module - since not needed in 
						FlavorPackage code.
							Now D&D of a HTML file into LedIt (and should be true for AL as well)
						now interprets the HTML properly.
030922	WORKING	LGP			Added InternalizeFlavor_FILEGuessFormatsFromName().  Changed args to
						InternalizeFlavor_FILEDataRawBytes and InternalizeFlavor_FILEData (). Much better
						implemenation - now using FileReader class. Still a bit more to go
						on this - but now we use same code in FILEIO part of LedLineIt as we have
						here for internalize for opening files. must do likewise for LedIt (so D&D
						of file operation works better).
							New Win32ErrorException and HRESULTErrorException classes for exception throwing
						code.
							<OLDCODENOTE>
								Led_ThrowIfErrorHRESULT () now throws HRESULTErrorException instead of
							just the longword, so catchers must be updated accordingly.
								Also - any overrides of or calls of InternalizeFlavor_FILEDataRawBytes
							must have  their args adjusted.
							</OLDCODENOTE>
							 STD_EXCEPT_CATCHER(APP) cleanup in LedLineItApp.cpp - as beinggngins of
						exception cleanup there. Still don't really pay full attention to new exception
						types and give old bad message.
							Main REAL fix - was to override OnOpenDocument() to replace MFC's buggy
						implemeantion with our own.
							Now that this is fixed for LedLineItMFC - look into making similar
						fix/change for LedIt....
030821	REPORT	LGP			+ Aug 21 - Open a file a CD from LedLineIt (open file dialog) and get exception.
		(1552)		 	LedLineIt.exe!_CxxThrowException(void * pExceptionObject=0x0012ecdc, const _s__ThrowInfo * pThrowInfo=0x0080a228)  + 0x39	C++
						ANALYSIS: Bug is MFC bug.
						 	LedLineIt.exe!AfxThrowOleException(long sc=-2147024809)  Line 431	C++
						 	LedLineIt.exe!ATL::AtlThrow(HRESULT hr=E_INVALIDARG)  Line 75	C++
						>	LedLineIt.exe!ATL::CTime::CTime(const _FILETIME & fileTime={...}, int nDST=-1)  Line 227	C++
						 	LedLineIt.exe!CFile::GetStatus(CFileStatus & rStatus={...})  Line 130 + 0xe	C++
						 	LedLineIt.exe!CFile::GetFilePath()  Line 82	C++
						 	LedLineIt.exe!CArchive::CArchive(CFile * pFile=0x01a94160, unsigned int nMode=3, int nBufSize=4096, void * lpBuf=0x00000000)  Line 396 + 0xf	C++
						 	LedLineIt.exe!CDocument::OnOpenDocument(const char * lpszPathName=0x0012f3f0)  Line 653 + 0x15	C++
							Bug is in CArchive::CTOR calls CFile::GetFilePath calls CTime::CTOR and that throws exception
						converting the given time result. Only hook to fix this is to override
						BOOL CDocument::OnOpenDocument(LPCTSTR lpszPathName)
						to handle reading - at least - case our selves.

030716	FIXED	LGP			First - this was really reported about a week ago, and I just now was
						able to decently reproduce it (under VMWare etc). The bug REALLY was not a timing
						thing - but depended on the OCX (DLL) getting unloaded, and then RE-LOADED at
						a different address. The problem was the code in
						IdleManagerOSImpl_Win32::CheckAndCreateIdleWnd registered a class (with a WNDPROC
						at a particular address) with a hardwired name. The FIX was to embed the WNDPROC
						address into that name. That way - if we ever get reloaded at a different address,
						we'll use a different class name.
							NB: I COULD have simply changed the code to UngregisterClass, and that MAY be
						a good idea. However - that required specifying the HISNTANCE - which I could see no
						easy way of finding. So - never mind. Just do this.
030716	REPORT	GregSand		Spinoff of SPR#1547.
		(1549)			>From: Greg Saunders [mailto:gregs@branchgroup.com] 
						>Sent: Wednesday, July 16, 2003 2:41 PM
						>To: 'Lewis G. Pringle, Jr.'
						>Cc: Greg Saunders
						>Subject: RE: ReadOnly Problem (NOW PROBLEM SOLVED)
						>
						> 
						>Ok... here is the exact steps that will cause a failure for us:
						> 
						>
						>1) Start with a fresh IE window after you have closed all other IE windows.
						>
						>2) Change the address to http://www.branchgroup.com/richtexttest/gothere.asp
						>and hit enter.  (NOTE: This page has a hyperlink that will open in a NEW IE Window)
						>
						>3) Now click the hyperlink which will load
						>http://www.branchgroup.com/richtexttest/rfidetailtestnodb.asp in a NEW IE Window.
						>
						>4) Now close the new window and you will see the previous hyperlink page.
						>Click the hyperlink again and it will load into a NEW IE Window.
						>
						>Following these steps I can get it to fail 100% on every maching that has
						>IE6.0 SP1 and Windows 2000.  I have tried it on over 10 machines now.
						> 
						>It really looks like something to do with the loading / unloading…
						>maybe something to do with the object not clearing out completely or correctly.
						>
						>If you can't reproduce it... then it could be the fact you are running
						>everything under VMWare and things are slightly different.
 
030715	FIXED	LGP			This was EXTREMELY painful to fix. I ended up having to
						find out when the bug first existed, and divide and conquor
						ifdefing out changes. Turns out to have been quite simple.
						I had called CLSIDFromProgIDEx () - which doesn't exist on
						Win9x. Too bad the Win32 subsystem for LoadLibrary returned
						such a MYSTERIOUS error#!
							Also - though not relevant - I got rid of the DelayLoad
						of OleACC.dll for the ActiveLedIt OCX (to silence the warnings
						and since I thought it could have been relevant - early on in
						my debugging).
030707	REPORT	GregSaund	You cannot register ActiveLedIt 3.1a8x on Win98. Doing
		(1548)			a regsvr32 on the .ocx file produces an error 0x01f.

030702	FIXED	LGP			Supported ReadOnly <PARAM> argument to <OBJECT>
030702	REPORT	GregSaund	He wants ReadOnly supported from <PARAM> arguments in
		(1546)			HTML <object> declaration.
						>-----Original Message-----
						>From: Greg Saunders [mailto:gregs@branchgroup.com] 
						>Sent: Wednesday, July 02, 2003 4:21 PM
						>To: 'info@sophists.com'
						>Subject: ReadOnly Problem
						>
						><<RFIListing.htm>> 

030625	FIXED				Implemented the binary search. Improved lookup code so
						no longer does case-insensative lookup, but rather smart
						lookup (match CAPITALIZED word to lower-case word but not
						other case mismatches, and soon to add other smarts (see
						SPR#1544).
030620	REPORT	LGP			Dictionary lookup is too slow with large (so far - 20k entries)
		(1540)			dictionary. Rewrite to not construct Led_tString on the stack, and use
						binary search.

030625	FIXED				Added CharacterProperties::IsDigit() funciton and used
						that to look in the text for numbers (OtherStringToIgnore_Number)
030624	REPORT	LGP			Make sure spellchecker ignores numbers (at least by default).
		(1543)

030619	FIXED	LGP			Added ability to dump just enabled/disabled words in plain text file (-d[e,d,m]).
030619	WORKING	LGP			Fixed case of doing real merge of 2 or more files. Test with:
						+	CD \SpelledIt\ScavangeWordsFromNet\Release;
						+	Run the scavanger for a few minutes - and produce an output file dictionaryOut.xml
						+	..\..\MungeDictionaries\Release\MungeDictionaries.exe ..\..\Dictionaries\DictionarySource-US-English.xml -s -v -m dictionaryOut.xml -o OUTTEST.xml
030619	WORKING	LGP			Use new mergedout status instead of disabled for when we merge
						items out so that if they appear in a successive file, they still will
						get considered and the counts merged into the lowercase entry.
030619	WORKING	LGP			Checked in first cut at MungeDictionaries utility. It does
						basic loading of 1 dict and does the -m function - to merge entries,
						and also -s stats dump. More todo...
030619	REPORT	LGP			SPELLCHECK. Based on SPR#1536. Write utility to compact out some
		(1537)			dict entries, merge, and to report statistics on entries.

030619	FIXED				ScavangeWordsFromNet isn't perfect - but I think its good enough
						for now. Spinnoff as new SPRs the question of a utility to compact/
						merge dictionaries and report statistics (SPR#1537) and to compile
						to C++ init structures (SPR#1538).
030619	WORKING	LGP			Got the ScavangeWordsFromNet working pretty well, and got the
						dict writing code nicely formatting output (so I can run diffs).
							I ran the new utility and created a quicky 10K word dictionary.
						I manaully edited out a few of the bogus words, and checked it into
						new directory \SpelledIt\Dictionaries and put there
						DictionarySource-US-English.xml. Eventually (see SPR#1538) store
						the compiled versions in the same spot.
030617	WORKING	LGP			Added SpelledItDictionaryUtils utilities to read/write XML-format
						dict word files.
030617	WORKING	LGP			Added DumpObjectsInIterator () and DumpSupportedInterfaces ()
						debugging helpers.
030617	WORKING	LGP			Added first cut at ScavangeWordsFromNet application.
						It is minimally functional (I tested gathering about
						2500 words and they looked good - as a test).
030612	REPORT	LGP			Spellcheck. NEXT ITEM TODO IS TOOL(s) to GATHER WORDS FOR
		(1536)			DICTIONARY AND TOOLS FOR COMPILING DICTIONARY...

030612	FIXED	LGP			Done - and added notes to buildnotes to check and make sure
						this is done correctly.
030612	REPORT	LGP			Use LowerCase MAC and WIN (I think) in Make_TARGETS script...
		(1535)

030612	CLOSED				At this point - I don't care what Microsoft does with this. Maybe
						annotate the bug if I get more correspondence. I've opened a new SPR#1529
						to document this ActiveX test container bug.
030612	WORKING	LGP		>-----Original Message-----
						>From: Lewis G. Pringle, Jr. [mailto:lewis@sophists.com] 
						>Sent: Thursday, June 12, 2003 4:30 PM
						>To: 'Ashwin Kowtha'
						>Cc: info-led@sophists.com
						>Subject: RE: Whether the inner window should display grab handles or not..
						>
						>Your investigation was interesting, and it has improved my understanding
						>of the nature of the ActiveX test container bug. However – I believe your
						>new conclusions here are completely wrong. Your suggestion for a change to
						>my code would indeed work around a bug with the ActiveX test container,
						>but at the cost of not working correctly with CORRECT containers (that
						>happen to set the ambient properties ShowHatching or ShowGrab handles
						>correctly and intentionally to true).
						>
						>I tried the code changes you suggested (roughly – you really meant
						>to have me add the code):
						>
						>	if (m_pRectTracker != NULL) {
						>		m_pRectTracker->m_nStyle = 0;
						>		m_pRectTracker->m_nHandleSize = 0;
						>	}
						>
						>	to ActiveLedIt::OnDraw ().
						>
						>The real issue is that you don’t want the m_pRectTracker created at
						>all. You don’t need to reset those flags in the draw method. You could
						>just override the COleControl::CreateTracker () method and set the flags
						>then. But WHY does COleControl::CreateTracker () get called at all? Easy.
						>COleControl::OnActivateInPlace () calls it (properly) – IFF at least one
						>of the containers ambient properties “ShowGrabHandles” or “ShowHatching”
						>is set. THESE VALUES ARE CONTROLLED BY THE TEST CONTAINER!
						>
						>Now – the ActiveX Test Container app allows you to set these ambient
						>properties. There is a Container/AmbientProperties menu command, and
						>this allows you to shutoff ShowGrabHandles and ShowHatching.
						>
						>Using the ORIGINAL version of the test container – and the original
						>version of ActiveLedIt – you can make the problem go away by simply
						>setting both of these ambient properties to false.
						>
						>	I continue to believe that the real bug is the one I’ve been trying
						>to drive home from nearly a month, and you have occasionally recognized
						>as a real bug. The bug is STILL with the OnGetClip call peeking at the
						>trackers m_Rect, and that’s not set until too late. The fix we’ve
						>discussed for the last month does appear to fix that bug with the
						>ActiveX test container.
						>
						>	Please strongly suggest to the engineer in charge of the ActiveX
						>test container that he change:
						>
						>CTestContainer98Item::OnChangeItemPosition () – setting the m_tracker.m_rect
						>before calling COleClientItem::OnChangeItemPosition. Then make a similar
						>change to CTestContainer98Item::Move () – adding the line
						>“m_tracker.m_rect = rect;” anywhere near the beginning of the function.
						>
						>	If you really consider it such a good thing to have the test
						>container control the resizing and drawing of grab handles and hatched
						>background pattern, then please change the DEFAULT VALUES for the AMBIENT
						>PROPERTIES that the ActiveX test container passes to each control.
						>
						>	You have at least accomplished one important thing. You’ve made it
						>pretty clear to me that my ActiveX control is now doing the right thing
						>with respect to resizes. I guess that’s something! But you and I may be
						>the only ones who ever know my control is doing the right thing if you
						>guys don’t fix your ActiveX test container!!!!
030605	WORKING	LGP			He sent email saying MSFT wouldn't fix the bug in the test container.
						I responded I thought that was nuts. He's still trying to find any
						other components that reproduce the bug.
							Also - he's trying to find some way to avoid the problem within
						ActiveLedIt so that the container handles all the resizing.
							Right now - I'm thinking I'm not going to really get any fixes to
						ActiveLedIt out of this... Sigh...
030603	WORKING	LGP			He sent me the sources for the test container. I saw the change he
						made to TCCI::OnChangeItemPosition (note - what I've been calling TCCI is
						really CTestContainer98Item in the source code). It looks fine.
						It didn't fix the entire bug - as I explained to him in email. He also needs
						to change TCCI::Move () as well to set the m_tracker.m_rect.
030529	WORKING	LGP			OK - finally a bit of progress. I talked Ashwin through the debugging
						steps I wanted him todo on the phone, and we solved 95% of this.
						The REAL BUG appears to be that the test container has a subclass
						of COleClientItem (call it TCCI) and it overrides OnChangeItemPosition as follows:
							TCCI::OnChangeItemPosition (rc)
							{
								COleClientItem::OnChangeItemPosition (rc);
								myTracker->mRect = rc;
							}
							Then  - internally inside COleClientItem::OnChangeItemPosition ()
						it calls TCCI::OnGetClipRect () - which just copies the rect from
						myTracker->mRect. This works fine when the tracker used is in the test
						container itself, if any one other than the tracker ever calls
						OnChangeItemPosition () - it does the wrong thing. It uses the PREVIOUS
						value for the clipRect.
							This fix to this is OBVIOUS - reverse the lines in TCCI::OnChangeItemPosition ().
						I've asked Ashwin to pass this along to the engineer responsible with this code, and
						he will get back to me when he has a response.
							In a related matter, he pointed out that most controls built using MFC DONT use
						their own tracker, but instead, just use the ActiveX Test container one. This is
						interesting, and is likely the reason this problem only occurrs with ActiveLedIt
						and not other controls. Ashwin is looking into why this is the case - that
						ActiveLedIt is using its OWN handles in this case. THIS PART could be an
						ActiveLedIt bug.
							I sent him email 2003-05-29 at 4pm summarizing this situation.
030529	NOTE					I responded to email from Ashwin, again telling him I think he's on the
						wrong track, but that I wish him luck and look forward to hearing from
						him.
030528	NOTE					I called Ashwin to get an update, and he said Rainy was working on
						it and he we call be back shortly.
030521	NOTE					I called Bhavik to get an update and he said Ashwin is working on
						it and should call me shortly.
030508	NOTE					Even though this is very close to being finally resolved, I have to
						get my a6 release out, so I'm going ot leave final resolution of this til
						next pre-release build.
030508	WORKING				I called MSFT again, and they are still looking into it. Bhavik says he
						believes its an MSFT bug, but Ashwin, and an escalation engineer (maybe Ashwin
						is the escalation engineer?) - are working on it and I should hear back shortly.
030506	WORKING				This appears to just be a bug in the ActiveX Test Container. MSFT has been
						completely unhelpful and unsuccessful with this (I think they've tried, but
						not put their best engineers behind solving the problem ;-)).
							I've nonetheless made progress myself.
							I noted that the test:
								if (lprcClipRect != NULL) {
									if (AsLedRect (*lprcPosRect) != AsLedRect (*lprcClipRect)) {
										int breakHEre = 1;
									}
								}
						being added to the start of ActiveLedItControl::OnSetObjectRects () is a perfect
						predictor of when the bug will occur (for cases where I'm elarging the control).
						Oviously thats a major hint. A stack trace of when I hit that 'breakHere' follows:
						>	>	ActiveLedIt.ocx!ActiveLedItControl::OnSetObjectRects(const tagRECT * lprcPosRect=0x0012fb48, const tagRECT * lprcClipRect=0x0012fb10)  Line 1022	C++
						>	 	ActiveLedIt.ocx!COleControl::XOleInPlaceObject::SetObjectRects(const tagRECT * lprcPosRect=0x0012fb48, const tagRECT * lprcClipRect=0x0012fb10)  Line 509 + 0x16	C++
						>	 	MFC71.dll!COleClientItem::SetItemRects(const tagRECT * lpPosRect=0x0012fb48, const tagRECT * lpClipRect=0x0012fb10)  Line 910 + 0x8	C++
						>	 	MFC71.dll!COleClientItem::OnChangeItemPosition(const CRect & rectPos={...})  Line 734 + 0xe	C++
						>	 	tstcon32.exe!0041be0e() 	
						>	 	MFC71.dll!COleClientItem::XOleIPSite::OnPosRectChange(const tagRECT * lpPosRect=0x0012fbd0)  Line 1555	C++
						>	 	ActiveLedIt.ocx!COleControl::OnNcLButtonDown(unsigned int nHitTest=18, CPoint point={...})  Line 306	C++
						>	 	ActiveLedIt.ocx!CWnd::OnWndMsg(unsigned int message=161, unsigned int wParam=18, long lParam=36307442, long * pResult=0x0012fd18)  Line 2164	C++
						>	 	ActiveLedIt.ocx!CWnd::WindowProc(unsigned int message=161, unsigned int wParam=18, long lParam=36307442)  Line 1745 + 0x1e	C++
						>	 	ActiveLedIt.ocx!COleControl::WindowProc(unsigned int msg=161, unsigned int wParam=18, long lParam=36307442)  Line 1683 + 0x14	C++
						>	 	ActiveLedIt.ocx!AfxCallWndProc(CWnd * pWnd=0x0199c538, HWND__ * hWnd=0x0007092c, unsigned int nMsg=161, unsigned int wParam=18, long lParam=36307442)  Line 241 + 0x1a	C++
						>	 	ActiveLedIt.ocx!AfxWndProc(HWND__ * hWnd=0x0007092c, unsigned int nMsg=161, unsigned int wParam=18, long lParam=36307442)  Line 389	C++
							Note that OnChangeItemPosition is running inside of the test container itself:
						>	BOOL COleClientItem::OnChangeItemPosition(const CRect& rectPos)
						>	{
						>		if (!IsInPlaceActive())
						>			return FALSE;
						>	
						>		ASSERT_VALID(this);
						>		ASSERT(AfxIsValidAddress(&rectPos, sizeof(CRect), FALSE));
						>		ASSERT_VALID(m_pView);
						>	
						>		// determine the visible rect based on intersection between client rect
						>		CRect clipRect;
						>		OnGetClipRect(clipRect);
						>		CRect visRect;
						>		visRect.IntersectRect(clipRect, rectPos);
						>	
						>		// advise the server of the new visible rectangle
						>		if (!visRect.IsRectEmpty())
						>			return SetItemRects(&rectPos, &clipRect);
						>	
						>		return FALSE;
						>	}
							The bad 'clipRect' value comes from the ActiveX Test containers override of OnGetClipRect () - it
						appears. I've now reported all this detail to the folks at MSFT - and we'll see what they can come
						up with.
030429	WORKING				Added ActiveLedItControl::OnGetNaturalExtent and OnEraseBkgnd to help
						reduce flicker and drawing bugs with resizing AL controls in various
						containers (like MSVS.NET 2002 and ActiveX Control Container and MS Word XP,
						and LedIt 3.1a6x).
030429	WORKING				Move erase margin handling code from Led_Win32_Helper<>::OnEraseBkgnd_Msg,
						to Led_Win32_Helper<>::WindowDrawHelper () (so happens in AL for things
						like meta file drawing etc).
030429	WORKING				Added some debugging trace messages, and cleanups to
						resize/OnDraw code to debug problem with AL resizing occasionally
						leaving cruft. Rework AL::OnDraw() - rarely called. Don't need to
						reset windowRect in that routine anymore.
020321	NOTE					http://support.microsoft.com/?id=137538
020321	NOTE					http://support.microsoft.com/?id=168326
030421	WORKING				MS Tech support case # SRX-0304-2160-4681
030117	NOTE					Get help from MSFT on this crap. Use one of my remaining support incidents,
						since there are several left and they expire in April
021101	NOTE					DEFER til after 3.1d1.
021101	NOTE	LGP				Look into COleControl::OnGetNaturalExtent()
							ALso:
								STDMETHODIMP COleControl::XViewObject::GetExtent(DWORD dwDrawAspect,
									LONG lindex, DVTARGETDEVICE* ptd, LPSIZEL lpsizel)
									{
										METHOD_PROLOGUE_EX_(COleControl, ViewObject)
										return pThis->OnGetViewExtent(dwDrawAspect, lindex, ptd, lpsizel) ? S_OK :
											E_FAIL;
									}
								STDMETHODIMP COleControl::XViewObject::GetRect(DWORD dwAspect, LPRECTL pRect)
									{
										METHOD_PROLOGUE_EX_(COleControl, ViewObject)
										return pThis->OnGetViewRect(dwAspect, pRect) ? S_OK : DV_E_DVASPECT;
									}
								void COleControl::OnSize(UINT nType, int cx, int cy)
									{
										if (IsSubclassedControl())
											CWnd::OnSize(nType, cx, cy);
									}
								
								void COleControl::OnMove(int x, int y)
									{
										if (IsSubclassedControl())
											CWnd::OnMove(x, y);
									}
021101	REPORT	LGP			In ActiveX Test Container - doing a resize (enlarge) 
		(1168)			sometimes produces invalid display (gray on bottom right)
						until you click and that forces a redraw.

030612	FIXED	LGP			Added COM-based spellchecker support to ActiveLedIt. Now you can
						access SpellCheck menu command if there is a COM-spellchecker associated
						with ActiveLedIt. New property 'SpellChecker' you can get/set to specify
						the spell checker. Seems to work as well as with LedIt!
							Updated ActiveLedIt docs, and added basic ActiveLedIt/ActiveSpelledIt
						demo HTML-Javascript page.
030612	WORKING	LGP			VariantArrayPacker/VariantArrayUnpacker helper classes for COM.
						Added UnpackVectorOfStringsFromVariantArray () function, and redid
						CreateSafeArrayOfBSTR to use VariantArrayPacker. Also made it so it could
						build SAFEARRAY of BSTR or VARIANTS (which contianed BSTR - test which
						works better with javascript/MSIE)
030610	WORKING	LGP			Got first cut installers working (still tuning a bit),
						including scripts to do signed cab files and placeholders
						for readme files and docs etc.
030610	WORKING	LGP			Added ActiveSpelledIt to buildall script.
030610	WORKING	LGP			Added IObjectSafety support, so we don't get warnings in MSIE.
030610	WORKING	LGP			Created Led_ATL.h/cpp for ATL helper code (mostly COM helper code).
						Created first cut of ActiveSpelledIt - using ATL. I have basic spellcheck
						engine functionality working, and a simple HTML/Javascript test page.
030603	NOTE		LGP			When I do ActiveSpelledIt - consider making that an ATL-based (implemented)
						OCX - to be used from ActiveLedIt...
030603	REPORT	LGP			Probably next step should be to build ActiveSpelledIt OCX, update
		(1526)			build scripts etc, and get it integrated with ActiveLedIt.

030610	CHANGE	LGP			Fixed problems with ActiveLedIt SDK (and demo) installers based
		(1527)			on SPR#1379 (from a while back). COM-extraction stuff now seems to be
						working (only trouble I found was I had bad cached values in
						HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\SharedDLLs
							Also fixed a few other types in various settings in the installer.
							Note that to fix this uninstall problem - I swtiched ActiveLedIt.ocx
						to use COM-EXTRACTION instead of self-register. SelfRegister has a couple
						of problems - most notable is that if you install AL and AL DEMO SDKs, and
						then uninstall both - on the second uninstall you get an error.
							Also - I enabled the "Change" button in each installer so you can
						access the repair functionality (for some reason - in WinXP - its not
						exposed (obviously) otherwise).


------------------- Released 3.1a7 2003-06-05 - Below ------------------------------

030604	FIXED				I tested on MacOS - and I'm not sure it looks better. I think it looks
						a little worse. But its more like MSFT - so that HAS to be good ;-).
030603	WORKING	LGP			Instead of using 1/2 font size for sub/superscript, use 3/5 instead.
						Tricky part was to revise the ascent computation... Test carefully on
						MacOS and Linux... After testing more on Win32 - I saw that using 2/3 works
						more like MSWord (maybe exactly). I like the look of 3/5 better, but I must
						trust MSFT's judgment. They more likely polled more people than me (I would
						hope ;-)).
030603	REPORT	LGP			Open file SPR_1523.rtf. Try both WinWord XP and LedIt. Note how the subscripts	
		(1523)			are slightly smaller in LedIt than WinWord. If not hard, consider making them a little
						bigger. This complaint is based (very loosely) on a note from
						Fry Jr, Frederick S [FREDERICK.FRY@CFSAN.FDA.GOV] dated 2003-06-03.

030603	FIXED	LGP			Mac and XWin versions of LedIt now contain the spellcheck dialog
						and its roughly functional (though really barely alpha quality for
						those platforms). No ActiveLedIt hookin yet - but that will wait til we
						have an ActiveSpelledIt OCX to do the backend spellchecking.
030603	WORKING	LGP			Windows version now nearly complete. Only remaining Windows
						bugs are Add-To-Dictionary, and Options-Dialog (which we'll open
						separate SPRs for). Just work on other apps/platforms before
						we close this.
030602	WORKING	LGP			First draft of (windows only so far) simple spellchecking
						dialog. Basically working (75%). A few fixes to generic dialog
						support code.
030530	WORKING	LGP			Did find/replace dialog, and now working on this.
030529	NOTE		LGP			Makes sense to do SPR#1517 - find/replace dialog - first. Should
						look quite similar.
030529	REPORT	LGP			Work on spellchecking. Next step is to add simple spellcheck dialog to
		(1513)			LedIt using hardwired/bogus dictionary (like the one used in regression test).
						Get dialog working on all platforms (or spinoff separate SPR for unsupported
						platforms).

030603	FIXED	LGP			Maybe fixed - anyhow...
							I discovered that all this functionality comes from builtin default
						COleControl functionality. However, I could prevent the control being being
						activated AT ALL (just in loaded state) after the OLEVERB_SHOW by NOT
						specifying 'OLEMISC_ACTIVATEWHENVISIBLE' in the _dwActiveLedItOleMisc.
							This lead to a slightly funny display when first displayed in the
						ActiveX test container. Its not bad - but not great.
							I then tested several other controls to see what state they go into
						when placed in the ActiveX test container:
								TX Text Control (10.?):		UI ACTIVE (just like ActiveLedit up til now)
								MS Rich Text Control:			Active - but not UI Active
								Calandar Conrol 8.0(MS):		''
								Checkbox Class:				''
								Shockwave ActiveX control:		''
								DHTML Edit control for IE5:	''
								Microsoft Animation CTL 6.0:	''
							So - in short - this guy was right. Most controls DO just goto
						the Active state (though there were a few other toy controls I saw that went to
						UI Active).
							I found I could (I hope pretty safely) and pretty easily - force myself into
						the Active - but not UIActive state with a simple override of COleControl::OnOpen ()
						and change its call to OnActivateInPlace () to say FALSE for the UIActive flag.							
030530	REPORT	C.Spencer>From: Chris Spencer [mailto:chris@tufware.com.au] 
		(1522)			>Sent: Friday, May 30, 2003 6:04 PM
						>To: Lewis G. Pringle, Jr.
						>Subject: OCX Focus issue
						>
						>Hi Lewis
						>
						>I had some feedback from  DATAAccess re the focus problem.
						>
						>Before I send you exe's dlls etc I thought maybe this info will be of
						>interest to you:
						>
						>It seems like this particular control grabs the focus itself when it's
						>displayed. Technically, it ui activates itself, iow grabs the focus, when
						>you do a OLEIVERB_SHOW on the control. I have not seen that behavior with
						>any other control. OLEIVERB_SHOW is only supposed to display the control,
						>not set the focus.
						>
						>I'm not sure what else I can do here. I can't take out OLEIVERB_SHOW,
						>then other controls would fail..
						>
						...
						>
						>From: Chris Spencer [mailto:chris@tufware.com.au] 
						>Sent: Wednesday, May 28, 2003 4:28 PM
						>To: Lewis G. Pringle, Jr.
						>Subject: Re: Focus Problem
						>
						>Lewis
						> 
						>Let me try to clarify ( I reread my post ).
						>
						>Visual dataFlex controls which object takes the focus when a dialog is
						>activated (from a menu, from another control etc, this does not matter).
						>
						>Now when a dialog is activated VDF passes the focus to the first focuasable
						>object on that dialog (dependant on tab -order).
						>
						>Now if the view as pictured has a normal data aware edit control instead 
						>of a Sophists ActiveLedit control when the view is activated the focus is
						>in the top combo form. However if I change the edit to a AcrtiveLedit control,
						>when the view is activated something prevents the focus gouing to the combo
						>form and the focus is in the  ActiveLedit object.
						>
						>Further to this before sending to you I sent to DataAccess (VDFs developers)
						>to look at whether there was a problem.
						>
						>They notified me that the Mouse_Change_Focus which is a VDF message is being
						>sent by the control but could not see where it was invoked. They said that
						>maybe It could be that it is the intention of the RTF developer to move the
						>focus to the edit object always.

030603	FIXED	LGP			Added 'SelListStyle' support to ActiveLedIt.
030531	REPORT	C.Spencer>-----Original Message-----
		(1521)			>From: Chris Spencer [mailto:chris@tufware.com.au] 
						>Sent: Saturday, May 31, 2003 4:19 PM
						>To: Lewis G. Pringle, Jr.
						>Subject: Bullet Lists
						>
						>Hi Lewis
						> 
						>What is the method or property that starts a bullet list? 
						>I cant seem to find anything in the help. 
						> 
						>Chris Spencer
						>TUFware Systems
						>www.tufware.com.au

030602	CHANGE	LGP			Fixed some bugs with TextBreaks_OLD::FindWordBreaks () dealing with
		(1520)			how it scans back for runs staring before the cursor. Only did minimal
						testing that word double click still seemed happy. But this DID prove
						an important fix for spellchecking's functionality (SPR#1513).

030530	FIXED	LGP			Finally got it working on Gtk as well (though its quite ugly).
030530	WORKING	LGP			Checked in working MacOS Replace dialog code (tested in LedLineItPP and
						LedIt). Still todo Linux.
030530	WORKING	LGP			Added find/replace dialog and OLE_FindReplace and OLE_LaunchReplaceDialog
						new OLE AUTOMTION methods. All thats left is MacOS/XWin support.
030530	WORKING	LGP			Added static member and API to keep track of 'ReplaceParameters'.
						Methods are virtual so apps COULD persist them, but I'm not sure
						thats useful (where it clearly is for find parameters).
030529	WORKING	LGP			Did basic implementation for LedIt-Windows and LedLineIt-WINDOWS.
						Must shakeout bugs/quirks with implementation and then do other
						apps (ActiveLedIt and Mac/XWin).
030201	REPORT	LGP			DO FIND / REPLACE dialog, and then simple (related)
		(1517)			spell-check find/change dialog.

030529	FIXED
030529	REPORT	LGP			Work on spellchecking. First step is to get better SpellCheckEngine_Basic
		(1512)			regression test working and cleanup docs etc.

030529	FIXED	LGP			Forgot to add DLGTYPE::cvt<> call in EditTablePropertiesDialog () override
						for ActiveLedIt_DialogSupport.
030528	REPORT	LGP			Changing  table prioperties from in ActiveLedIt embedded in
		(1511)			MSIE doesnt seem to work at all. Dialog comes up with bogus values
						and never makes any changes.

030529	FIXED	LGP			In ClipNarrowAndRestore, dont set clips/restore clips for metafile DCs -
						doesn't work (and causes AL to create bogus empty metafile when in design or
						demo modes).
							Changed printing flag in WaterMarkHelper<>::DrawWatermark () to TRUE,
						since that should prevent (undesirable) erase. Not strictly related
						to this bug - but I noticed it while debugging this.
							Don't call GetClientRect in draw - but use WindowRect/GetDefaultWindowMargins
						since we may have been called from metafile draw or other. Also - added
						DrawExtraDesignModeBorder () so we don't display border in some cases
						where it looks ugly (not really related to SPR#1510 - but I noticed
						it while debugging and looking at display in MSVC.Net 2003 dialog editor).
						Careful about call to GetStyle (since vectors to MFC version in LedItView) -
						and that fails if window is NULL (as it is sometimes in MSVC .Net 2003
						dialog editor).							
030528	REPORT	LGP			Debug why DrawMetaFile doesnt work in ActiveX test container in
		(1510)			design mode (due to recent watermark change? - SPR#1509?). Test/Assure DrawMetaFile
						still works even in DEmoMode control!
							RELATED BUG WITH AssertErrors in Visual Studio .Net 2003 dialog editor!!!

030528	FIXED	LGP			Added qFunnyDisplayInDesignMode define to ActiveLedItConfig, and if
						defined (yes by default), then check for "AMBIENT_DESIGN_MODE" and change
						the drawing in LedItView::EraseBackground () slightly. Added a small watermark
						display saying "design mode" and a border in the color opposite to the background.
						I tested in ActiveX Test Container to see that toggling the design mode
						attribute made the border/watermark appear and disapear (cuz I hooked
						OnAmbientPropertyChange). I sent all this to C.Spencer to see what he thinks.
030527	WORKING	LGP			Basically, Chris is suggesting I do something else in my display
						so that the control stands out better when in design mode. I've tried
						playing a bit with the MS Rich Text control inside of the ActiveX test container
						and haven't yet found other controls that do this. Still
						investigating.
030523	REPORT	C.Spencer>From: Chris Spencer [mailto:chris@tufware.com.au] 
		(1509)			>Sent: Friday, May 23, 2003 8:44 PM
						>To: Lewis G. Pringle, Jr.
						>Subject: Re: ActiveLedIT
						>
						>Lewis
						> 
						>Yes when the control is selected it hass the handles on all
						>sides and is easy to see.
						>I think either a watermark as the demo but probably better woukd
						>be a border to highlight the exact size and location. Possibly
						>even in the clWindowColor (ie White) would do instead of getting
						>the color from the parent. 
						> 
						>Chris Spencer
						>TUFware Systems
						>www.tufware.com.au
						>----- Original Message ----- 
						>From: Lewis G. Pringle, Jr. 
						>To: 'Chris Spencer' 
						>Sent: Saturday, May 24, 2003 8:49 AM
						>Subject: RE: ActiveLedIT
						>
						>	They say a picture is worth a thousand words ;-).

030527	CLOSE	LGP			Replace with new SPR#1507 for remaining work.
030527	WORKING	LGP			Did a significant amount of CSS support - (see SPR#1504) replacing
						the old <FONT> tag usage with CSS style= attributes on <span> tags.
						Still no where NEAR GOOD css support, but a start.
010830	DEFER	LGP			DEFER for Led 3.0
990428	DEFER
990428	REPORT	LGP		Add CSS (cascading style sheet) support to Led's HTML reader/writer.
		(0574)			

030527	FIXED	LGP			Fixed a couple other places as well (tables etc).
030527	WORKING	LGP			Set fLastCharSpace TRUE in StyledTextIOReader_HTML::EndParaIfOpen (). That fixes
						trouble with this file - but look for other cases.
030527	REPORT	LGP			Look into bogus extra spaces at start of paras in file SPR_1504a.htm
		(1506)			etc.

030527	FIXED	LGP			Fix was to largely rewrite StyledTextIOReader_HTML::ParseHTMLTagArgOut ().
						Still not very good - but now better. Not checked in yet cuz mixed in with
						CSS changes for SPR#1405 and 0574.
030527	REPORT	CSpencer	>From: Chris Spencer [mailto:chris@tufware.com.au] 
		(1505)			>Sent: Monday, May 26, 2003 10:53 PM
						>To: Lewis G. Pringle, Jr.
						>Subject: Loss of HTML content
						>
						>Hi Lewis,
						> 
						>I am having a problem with Get and Set TextHTML.
						> 
						>I have the following code:
						> 
						>Set ComTextHTML     To 'This is a <a href="#Test">test</a> of HTML'
						>Get ComTextHTML     To sText
						>When I view sText I would expect it to say
						> 
						>This is a <a href="#Test">test</a> of HTML
						> 
						>but it says
						> 
						>This is a <a href="Test">test</a>of HTML
						> 
						>Note the missing # before Test and space after the </a>.

030527	FIXED				Replaced <FONT> tag usage with generation of <span> tags, and
						fixed reader to at least check for style attributes on <span> tags
						as well as a few others. No were NEAR full CSS support, but enough
						to replace my former FONT tag usage.
030523	REPORT	LGP			Consider getting rid of <FONT> tag generation in HTML
		(1504)			writer, and just directly using style="". Use DIV/SPAN instead of <FONT>!

030523	CLOSE	LGP			I noted one anamoly about that property, and fixed it (fix Appearance and
						BorderStyle properties to be declared as short - rather than int. No idea, but
						I hope that addresses his problem.
030522	REPORT	CSpencer	>	know you have add the Appearance property which makes the control
		(1503)			>look like all the rest, but this is not exposed (at least in VDF) in
						>the IDE during development. It seems to be a Runtime only property.
						>Is this correct. This makes it hard to find in the IDE as the color
						>blends in with the parent control

030523	FIXED	LGP			Since basic HTML table IO is working, consider this fixed, and open
						SPR#1502 to track some additional things it would be nice to fit into
						3.1.
030523	WORKING	LGP			Got preliminary table reading/writing working for HTML. Doesn't
						yet support any attributes to tags - but gets the right number of
						cells and thier contents decently written.
030523	WORKING	LGP			Added various debugging flags to WordProcessorTextIOSinkStream to
						assure the right calling semantics for TableOpen/Close/CellOpen/Close/RowOpen/Close.
030522	WORKING	LGP			Get minimal table READER working. Started doing
						minimal table writer (for HTML).
021022	REPORT	LGP			Handle tables in HTML input/output code.
		(1141)

030522	CHANGE	LGP			Tested that all apps build right now... did BCCTestApp, LedLineItPP,
		(1501)			LedIt(Win/XWin-RH73,MacOS), AL, LedTestXWin(RH73), NetLedIt, and LedIt/LedTestXWin on RH8.

030521	CLOSE	LGP			Done about a week ago.
030507	NOTE		LGP			Include cell width, and column width fields - hopefully for 3.1 (see SPR#1434).
030401	REPORT	LGP			Tables: do various properties editing (n columns, color, maybe row/col
		(1402)			width?)

030521	FIXED	LGP			There are a couple of issues and a couple possible solutions. One
						principle issue - is that the Internalize() call was very slow (apx 30 seconds
						on CERBERUS). That is important, and could be fixed in one of two ways. I could
						speed up the Externalize code (RTF writing code), or I could implement
						some sort of delayed externalize (COleDataSource/promises). Though the later
						is a good idea, its not critical right now. And its made less important
						if I can speed up the RTF writing code. The issue of speeding the RTF
						writing code is already covered in SPR#1497.
							Now there is another issue. The code in
						Led_MFC_DragAndDropWindow<>::HandleDragSelect () checks the amount of time from
						when the drag starts to when it terminates, and treats the click as setting a
						new selection if the time is short enough. The problem was the intial time was
						grabbed BEFORE starting the Externalize. This immediate problem is eliminated
						by just grabbing the time After the externalize.
030521	WORKING	LGP			You can reproduce this with a DEBUG LedIt build using SPR_1498_dbg.rtf.
030521	REPORT	LGP			Open RTF 1.7 Spec document. Select all, and click in the
		(1498)			middle of it. You get a (brief) hang, but no deselection. It seems
						we too quickly trigger a SERIALIZE, and so the code to detect
						(based on time) a deselect on mouse up of all the text isn't working.

030521	FIXED	LGP			I was right. Small bug in Table::GetClosestCell ()
030521	WORKING	LGP			Created sample file SPR_1499.rtf to demonstrate.
030520	REPORT	LGP			Open RTFSPEC 1.5, and find some large table. Clicking in cells
		(1499)			near the bottom of the	table tends to select the wrong cell (by one).
						Perhaps some code for finding clickPos not taking into account boreder
						width properly???

030521	FIXED
030521	REPORT	LGP			React to changes in SPR#1493 - to fix LedLineIt MFC/PP to
		(1500)			work with changed UndoContextHelper names (use that class instead
						of direct TextInteractor::Pre/Post etc methods.

030521	CLOSE	LGP			Part about this being slow is covered in SPR#1497, and
						couldn't reproduce the failure.
030508	WORKING	LGP			Couldn't reproduce with RTF 1.7 spec. Look into this later.
030508	WORKING	LGP			With RTF 1.4 spec - takes a long time still but at least
						undo works properly.
030508	REPORT	LGP			Open RTF 1.7 Spec in LedIt (Win32). Select all. Backspace.
		(1475)			Takes very long (about 30 seconds). UNDO. Almost nothing restored.

030521	FIXED	LGP			Added TextInteractor::SupressCommandBreaksContext stack-based class,
						and used it within WordProcessor::Table::OnPerformCommand_ApplyToEachSelectedCell.
030521	WORKING	LGP			The problem is that Table::OnPerformCommand_ApplyToEachSelectedCell()
						calls wp->OnPerformCommand () 4 times, and these vector to
						OnFontSizeChangeCommand () which calls
						StandardStyledTextInteractor::InteractiveSetFont () which calls
						BreakInGroupedCommands (). All that is quite reasonable. The problem is
						that from an outer context (OnPerformCommand_ApplyToEachSelectedCell)
						we want to set a flag saying that inner calls to BreakInGroupedCommands
						should be ignored).
030520	REPORT	LGP			Small table bug. Select a region of 3 or 4 cells (with some text in them).
		(1494)			Select the command FontSize/36. Then do UNDO. Note how a single font/change at
						a time is done.

030521	FIXED	LGP			(as part of SPR#1398)
030521	WORKING	LGP			This is really just a side-effect of SPR#1398, and I'm working
						on that now.
030417	NOTE		LGP			When working on this - be SURE to think/test carefully about
						performance!
030408	REPORT				Typing in a table doesn't cause dirty flag to be set (probably
		(1416)			not doing AboutTo/DidUpdates)

030521	FIXED	LGP			Added AllowUpdateInfoPropagationContext class and supported by
						fForTable.fCellUpdatePropationUpdater and hitting it in the
						CellRep::AboutTo/DIdUpdate calls. Used the AllowUpdateInfoPropagationContext
						to make this conditioanl for performance reasons (test T3 from
						SPR#1496 went from 4 secs to 10 just always propagating, but stayed
						at 4 with this conditional code).
030401	REPORT	LGP			FIND SOME (good/efficient) way to handle propagating updates from
		(1398)			a cell to the aboutToUpdate methods of the entire owning WP (dont want
						too much cuz very slow, but maybe if we do lots of updates - gen at least
						one passed back? Worried about IO case reading RTF files/??).

030521	NOTE		LGP			Timing tests. All tests done on Cerberus (800MZ dual processor) running
		(1496)			WinXP, with office XP installed. Run tests 3 times and take middle time.
						>	T1		=	run the command <GIVEN BELOW> from the Start/Run
						>				menu and stop when the text you can click and see
						>				a blinking caret.
						>	WP_T1	=	T1 test with <wordpad "C:\tmp\rtf1.4spec.rtf">
						>	WXP_T1	=	T1 test with <winword "C:\tmp\rtf1.4spec.rtf"> (and word XP)
						>	WXPL_T1	=	Same as WXP_T1, but with an instance of WinWord already running.
						>	Led30_T1	=	T1 test with <c:\tmp\LedIt301.exe "C:\tmp\rtf1.4spec.rtf"> (copied EXE for 3.0.1 version of LedIt - released - PU)
						>	Led_T1	=	T1 test with <L:\LedIt\LedIt___Win32_Partial_UNICODE_Release\LedIt.exe "C:\tmp\rtf1.4spec.rtf">
						>
						>	WP_T2	=	T2 test with <wordpad "C:\tmp\RTF-Spec-1.5.rtf">
						>	WXP_T2	=	T2 test with <winword "C:\tmp\RTF-Spec-1.5.rtf"> (and word XP)
						>	WXPL_T2	=	Same as WXP_T2, but with an instance of WinWord already running.
						>	Led30_T2	=	T2 test with <c:\tmp\LedIt301.exe "C:\tmp\RTF-Spec-1.5.rtf"> (copied EXE for 3.0.1 version of LedIt - released - PU)
						>	Led_T2	=	T2 test with <L:\LedIt\LedIt___Win32_Partial_UNICODE_Release\LedIt.exe "C:\tmp\RTF-Spec-1.5.rtf">
						>	((NB: T2 maybe a bad test cuz I think the file contains OLE objects that are not found, and so much depends
						>		on how long they take to timeout at load time))
						>
						>	WP_T3	=	T3 test with <wordpad "C:\tmp\RTF 1.7 Specification.rtf">
						>	WXP_T3	=	T3 test with <winword "C:\tmp\RTF 1.7 Specification.rtf"> (and word XP)
						>	WXPL_T3	=	Same as WXP_T3, but with an instance of WinWord already running.
						>	Led30_T3	=	T3 test with <c:\tmp\LedIt301.exe "C:\tmp\RTF 1.7 Specification.rtf"> (copied EXE for 3.0.1 version of LedIt - released - PU)
						>	Led_T3	=	T3 test with <L:\LedIt\LedIt___Win32_Partial_UNICODE_Release\LedIt.exe "C:\tmp\RTF 1.7 Specification.rtf">
						>
						>	T4		=	to open RTF 1.7 Specification.rtf, as in T3, but dont time the open. Just time the operation:
						>				SELECTALL / DELETE KEY / UNDO. Time until all text comes back and ready to begin editing.
						>
						>	NOTE: Led tests were done with LedIt 3.1a7x on 2003-05-21 - before doing SPR#1398/1416. Retest afterwards.
						>	TEST			TIME (sec)
						>	----			----------
						>	WP_T1		2
						>	WXP_T1		15
						>	WXPL_T1		5
						>	Led30_T1		2
						>	Led_T1		1.5
						>	
						>	WP_T2		12
						>	WXP_T2		33
						>	WXPL_T2		13
						>	Led30_T1		22
						>	Led_T2		21
						>	
						>	WP_T3		4
						>	WXP_T3		35
						>	WXPL_T3		36
						>	Led30_T3		6
						>	Led_T3		4
						>	
						>	WP_T4		<1
						>	WXP_T4		<1
						>	Led30_T4		5
						>	Led_T4		19
							Analysis: Mostly - Led did very well. The T2 tests are probably mostly meaningless, since I think the entire
						issue there has todo with loading an OLE object that fails to load on my system (maybe not present?). Anyhow, I'm not
						going to worry about that.
							But the issue in T4 is much more serious. I've opened SPR#1497 to track/address this. And these tests will
						hopefully be a basis for future reference / performance testing.

030521	FIXED	LGP			Fixed yesterday as part of SPR#1422.
030315	WORKING	LGP			This is now mostly fixed (because of SPR#1344 and other fixes). But - we
						don't restore SELECTION from within the table. FIX THAT before calling
						the whole SPR fixed.
021119	REPORT	LGP			Undo doesn't work for insert row/col before/after commands.
		(1178)

030521	FIXED	LGP			The arg for UndoableContextHelper::CommandComplete () is fine - but
						needed to be renamed and I wrote docs to clarify its meaning.
							<OLDCODENOTE>
							I also renamed UndoableContextHelper::GetSelStart-->GetUndoRegionStart and
						UndoableContextHelper::GetSelEnd-->GetUndoRegionEnd.
							</OLDCODENOTE>
030520	REPORT	LGP			CHANGE NAME OF UndoableContextHelper class to access selection
		(1495)			region??? ANd examine arg to COMMIT guy- and how	thats used (docs +
						sanity cehck - while the code is fresh in my mind)

030520	FIXED	LGP			As part of SPR#1416/SPR#1493 - the way I did this - I no longer need to
						copy the entire table with each character. Basically - typing in a table is
						about as costly as with regular typing. Not great - but I think acceptable
						for a first table release.
030515	REPORT	LGP			Undo speed - especailly with tables. Try editing in SPR_1132.rtf.
		(1488)			Editing inside the table is somewhat slow. Then doing an undo of
						lots of typing is very slow. Consider some re-org to command handling
						so typing code is much faster. If we have a sequence of chars inserted,
						we only need to save the ORIGINAL saved state - not each intermediate!

030520	FIXED	LGP			Did SPR#1493 to make this possible. Added class SavedTextRepWSel to
						restore table selections (along with its new ApplySelection () method).
						Override EmbeddedTableWordProcessor::PostInteractiveUndoPostHelper () etc.
						TableCMD class to be able to find right table object to set selections on.
						TemporarilyAllocateCellWithTablet and a couple related classes/methods
						take captureChangesForUndo flag.WordProcessor::InteractiveUndoHelperMakeTextRep ()
						uses SavedTextRepWSel to preseve table selection. Lots of misc changes
						to various SavedTextRep classes etc to support this big change.
							RISKY change to UNDO. Tested alot (an hour), but needs more.
030411	REPORT	LGP			Handle UNDO with Tables (table undo)
		(1422)

030520	CHANGE	LGP			Significant changes to Undo handling code/APIs. Lose
		(1493)			UndoableContextHelper::SetBeforeUndoSelection in favor of new args to the
						UndoableContextHelper::CTOR.
							TextInteractor::InteractiveUndoHelperMakeTextRep () and
						TextInteractor::PreInteractiveUndoHelper () etc now take separate selStart/End and regionStart/End
						args (though overloaded CTORs for UndoableContextHelper let you specify just one implying both
						are the same).
						CommandHandler::DoUndo/DoRedo now take TextInteractor arg- and InteractiveReplaceCommand no
						longer take a TextInteractor arg. No longer peek/poke at before/afterRep's fSelStart/End -
						now those are specified through constructor args to their respective objects, and passed
						in though new extra args to InteractiveUndoHelperMakeTextRep. 
							<OLDCODENOTE>
							Much of this code change for the undo support is not backward compatable - but
						end-users are unlikely to run into probelms since they are unlikely to have used
						it directly.
							</OLDCODENOTE>
							RISKY change to UNDO. Tested alot (an hour), but needs more.

030520	FIXED	LGP			Fixed code and a few places where it was called.
030520	REPORT	LGP			Semantics of TempMarker class are messed up. 3rd arg declared as 'end'
		(1492)			but treated as 'length'. Because start/end semantics are standard in STL,
						we'll prefer those, and adjust the code to match the documentation.

030517	FIXED	LGP			Handle case in StyledTextIOReader_RTF::GetNextRTFHexByte ().
030517	REPORT	LGP			Opening file SPR_1490.rtf causes uninitialized var usage dectection code
		(1490)			from MSVC.NET to be triggered in StyledTextIOReader_RTF::GetNextRTFHexByte.

030517	FIXED	LGP			Only REAL bug fixes was Led_GetDIBPalletByteCount for
						case of biCompression==BI_BITFIELDS. That was what caused
						the images to look slightly messed up. But also - added code
						for Non-30-version DIBs from DibLook sample code.
030517	REPORT	LGP			Based on email from Fred Ross-Perry [FRoss-Perry@intellitools.com]
		(1489)			dated 2003-05-16.
							Copy and paste some bitmaps from MSIE 6 (WinXP) to LedIt - and they
						look funny.

030515	FIXED	LGP			make OnSelectedEmbeddingExtendedCommand return bool (so I can tell if performed)
						and revise Table::OnUpdateCommand/OnPerformUpdate code so if embedded table doesn't
						enable the kSelectedEmbeddingProperties_CmdID (then we do - and if it doesn't
						perform the command - then we do. This way - embedded URLs and pictures (and
						eventually other tables) take precendence on an innermost first basis, but
						if there is none - then the first table inside-out gets a crack. This makes
						it more intuiitive for users to click in a table cell and then still see the
						table properties command enabled.
030515	WORKING	LGP			Add a 'GetEnabled' method to TextInteractor::CommandUpdater and
						subclasses (to help with SPR).
030514	WORKING	LGP			Mostly done - but test more - and must apply change to CMDXXX API to
						other subclases (gtk/MacOS, others?)
030514	REPORT	LGP			Fix TableProperties code so when you click IN a cell - if you
		(1487)			haven't selected another embedding, then pass back to owner to handle
						table props command.

030514	FIXED
030513	REPORT	LGP			Small table bug. Area outside of margins but inside cell should still
		(1485)			be colored with the cell background color. (not sure about what todo with spacing?).

030514	CLOSED	LGP			Defer X-Windows implementation in SPR#1486.
030514	WORKING	LGP			Checked in beta quality MacOS implementation.
030514	WORKING	LGP			Checked in first cut at MacOS dialogs.
030513	WORKING	LGP			Done for Win32. Not a great dialog, but pretty good. Works with
						undo etc. Done with ActiveLedIt and LedIt. Still must do something
						for MacOS and X-Win.
021119	REPORT	LGP			TABLE Get 'get properties' dialogs etc stuff working again now
		(1399)			that we are not a 'embedding'

030514	CLOSED	LGP			Defer X-Windows implementation in SPR#1486.
030514	WORKING	LGP			Checked in beta quality MacOS implementation.
030514	WORKING	LGP			Checked in first cut at MacOS dialogs.
030512	WORKING	LGP			Morph this SPR into one for AddNewTable dialog (since SPR#1399 covers
						properties dialog). Got first cut AddNewTable dialog working for
						Win32, and hooked into LedIt, and ActiveLedIt.
							Still not done - MacOS/Linux support.
021119	REPORT	LGP			TABLE Dialogs for editing (new and existing) table properties. AT LEAST do
		(1401)			NROWS and NCOLS to get us started.

030512	CLOSE	LGP			Handle in the website. Too hard to update the installer on each
						pre-release build.
030509	REPORT	LGP			ActiveLedIt SDK (and demo) installer puts a shortcut
		(1484)			in the start menu to CheckForUpdates. This needs a few extra
						parameters - or else I need to update the webpage it goes to
						to better handle not being given a specific version#. Actually
						this is probably a WEBPAGE todo!

030509	CHANGE	LGP			FIX CODE SO COMPILES WITH BCC (at least WordProcessor.cpp doesn't).
		(1483)

030509	FIXED	:GP			Fixed.
030508	REPORT	LGP			Fix build of LedTestXWIndows. It didn't build for a6.
		(1482)

030509	FIXED	LGP			Fixed BuildInstallerActiveLedIt.bat/BuildInstallerLedItMFC.bat/
						BuildInstallerLedLineItMFC.bat to use 'RMDIR' instead of 'DEL'
						cuz that seems to more fully delete stuff?
030508	NOTE		LGP			I understand the problem. I never fully DELETE the old
						tmpInstaller files (stuff copied to c:\temp\installleditdir etc).
						Must DELETE those contents before copying.
030508	WORKING	LGP			I looked at all the scripts - and they look right.
						Check again carefully during build of A6.
030507	REPORT	LGP			Fix ActiveLedIt SDK installer to NOT copy CVS directories!
		(1471)

030509	FIXED	LGP			LedLineItMFC installer had the same problem.
030509	REPORT	LGP			FIX LedIt Win32 installer build project to not
		(1481)			refer to l: (building installer - refers to wrong .ico
						file - not in l: but in C:\tmp)

030509	CHANGE	LGP			FIX BuildInstaller_XWindows.bat to take ARG with HOSTNAME
		(1480)			and BuildInstallerLedItUNIX.bat too THEN update the
						RELESE_X_INSTALL_INSTRUCTIONS.txt file

030509	CHANGE	LGP			Lose build of ActiveLedIt SDK and Demo SDK from
		(1479)			CopyAndMakeTargets.bat. Add extra arg to script which
						is host to build linux stuff (was linicus now usually vmlinux).
						gzip arg now must be --best.

030509	CHANGE	LGP			Fix build script to build NetLedIt release build.
		(1476)


------------------- Released 3.1a6 2003-05-08 - Below ------------------------------

030508	FIXED	LGP			Back doing the a4 release, I revised Led to call SimpleUpdater, rather than
						DoABoutTo/DoDidUpdate calls directly. In the HiddenText code - I wasn't carefull
						enough doing that conversion about nesting the scope of the stack objects (simpleupdater)
						to make sure the DidUpdates get called early enough. FIXED by basically adding {} in a couple
						places.
030508	WORKING	LGP			This particular regression was in A4. A3 worked fine.
030508	REPORT	LGP			Unhide select generates assert error. Discovered fixing SPR#1469.
		(1474)			New LedIt document(WIN32). Enter "This is hidden text". Select 'hidden'.
						Do HIDE_SELECTION command. Select all. Do UNHIDE_SELECTION command - and
						assertion error. (I think happens BOTH with and without hidable text shown).

030508	FIXED	LGP			Was not BROKEN in AL, but intentionally left out of the command set.
						Instead, hidden text functionality is available through OLE Automation.
						May change that in the future - but its nothing todo now.
							ALso - noted SPR#1474 during this fix.
030508	WORKING	LGP			Problem with hidden text commands not working may have been cmd# conflict -
						changed kUserCommandBase to 0x1000 in LedIt.
030508	WORKING	LGP			This is a regression since a5. It's also broken for ActiveLedIt.
030507	REPORT	LGP			Hide Selection command doesn't work (at least in file LinuxReadMe.rtf).
		(1469)

030508	FIXED	LGP			Checked in small sample access demo (built using Access 2002).
						Just a simple form. Updated the ReadMe and Demo ReadMe files to
						mention MS Access.
030507	REPORT	LGP			Add Simple Form Demo using MSAccess to ActiveLedIt samples.
		(1470)

030508	FIXED				Fixed GetLongPathName to handle case of plain filename
						without leading path part
030508	REPORT	LGP			Based on SPR#1472 - noticed that when LedLineIt (MFC) launched
		(1473)			from command line with filename, it gets the wrong file name (LedIt OK).

030508	CHANGE	LGP			Add LedIt/LedLineIt INSTALLDIR to path - so you can run the
		(1472)			EXE from the command line (WIN32).

030508	FIXED	LGP			Tested commands on ActiveLedIt. FIXED.
030508	WORKING	LGP			Tested commands on MacOS. Fine.
030508	WORKING	LGP			Tested commands on Linux (RH73). Fine.
030507	WORKING	LGP			Implemented various select commands (word/row/paragraph/table/cell/row/col)
						In Led itself.
030507	REPORT	LGP			Add a "Select" menu (under "edit" or main menu?), and under there have
		(1467)			Cell, Row, Column, Table, Paragraph, Row, Word, etc...

030507	RECHANGE	LGP			Undo change - I was wrong - new template parser DOESNT work (or
						even come close) with Led.
030505	CHANGE	LGP			Change MWERKS .mcp files to use new ISO template parser. I had already
		(1463)			fixed most problems with using it, and the rest that remained were
						in the (now removed for this release) old command-handler subclassing
						in templates support. Now things compile cleanly.

030507	FIXED	LGP			Added overload of StyleMarkerSummarySinkForSingleOwner::CTOR that
						takes TextLayoutBlock. In LedLineItViewMFC - Added override
						SummarizeStyleMarkers (both overloads) to use
						StyleMarkerSummarySinkForSingleOwner so we avoid (innocuous)
						assert in StyleMarkerSummarySink::CombineElements.
030402	REPORT	LGP			In LedLineItMFC - open a new document. This 'this is a test'. Say
		(1408)			'New Window' (not new doc - but new window onto the same doc). Note the assertion error
						in qAssertWarningForEqualPriorityMarkers code for StyleMarkerSummarySink::CombineElements.
						Maybe inoccuous.

030507	FIXED	LGP			Fixed WordProcessor::CalcSpaceToEat () to get the margins
						from the right row, not always the first row.
030507	WORKING	LGP			Reproduced in SPR_1446.rtf.
030507	REPORT	LGP			Looking at the code in WordProcessor::CalcSpaceToEat I became
		(1466)			suspicious. I think there is a bug in that it uses the wrong row
						of the line for layout width. See if there is a big difference
						between the layoutwidth of the first and second rows of a para if
						center/right justification looks correct. My guess is that it
						wont. Inspired by looking into SPR#1441.

030506	FIXED	LGP			Didn't do exactly the same way as before. Instead, just implemented it in
						WordProcessor::DrawRowSegments ().
030506	WORKING	LGP			I'm not sure the BEST place to solve this is in WordProcessor::DrawRowSegments () -
						but it certainly seems like it maybe a safe and easy place to fix it.
						Investigate further.
030506	WORKING	LGP			Regression in Led 3.1a3 (worked OK in a2 and not in a3). This is when I
						did the BIDI changes - so my earlier intuition appears to have been correct.
030417	REPORT	LGP			ShowParagraphMarkers () option is no longer working. I've checked - and
		(1445)			LedIt is setting the flag. I think the trouble is that my various BIDI
						changes / cleanups eliminated the terminating line character from ever being
						passed in. BE VERY VERY CAREFUL when fixing this!

030506	FIXED	LGP			TextInteractor::Pre/PostInteraciveUndoHelper REQUIRE fCommandHandler != NULL.
						Then fix UndoHelper class, and InteractiveWPHelper1<> to check first if
						CommandHandler != NULL. Thus we don't leak command objects which might
						contain a reference to a cell paraDB that has already gone away!!!
030506	WORKING	LGP			Can now EASILY reproduce, and I think I understand the bug. To reproduce, just
						insert a new table, click in a cell, and select RIGHT JUSTIFICATION. Then say
						"New Document".
							The proximate cause is that the code in InteractiveWPHelper1 () makes a
						ParagraphInfoChangeTextRep and then calls PostInteractiveUndoHelper () - which ignores
						it cuz the fCommandHandler is NULL.
030506	WORKING	LGP			I've seen this once or twice in the last couple weeks. Still exists, but
						very rare, and therefore hard to debug. Try putting in extra assert checks
						so will fail a bit earlier...
030506	WORKING	LGP			(both this and report dates really a few weeks earlier).
						Still cannot repro reliably - but I saw it a second time. My guess is that
						it has todo with the UNDO code? Maybe that caches a ref to the StyleDatabase etc,
						sand then in WordProcessor::Table::CellRep::~CellRep when we assign to NULL the
						DatabaseReps - that doesn't fully destroy the object cuz its stored in some commnad
						object somewhere? Not clear on how that would be possible? MAYBE need to call
						fCommandHandler.COMMIT () before destroying stuff in the COMMIT call? That might
						not do it - cuz a select-all and then backspace might cause the same bug.
030506	REPORT	LGP			Also after fidling with table editng - and doing a NEWDOC - I got a crash
		(1465)			in SimpleTextStore where it was destroyed with 3 markerowners still in it.
						COULDNT REPRODUCE!!! BAD!!!

030506	FIXED	LGP			Finished fixing table cell click code so that you can click in the margin
						area around a cell to select the entire cell.
030417	NOTE		LGP			Made good progress on SPR#1396. The work for THIS SPR will be
						when the user clicks in the SPACING (around cells) to treat that
						as selecting the ENTIRE TABLE, and when he clicks in the cell bounds
						but not the editor area, then select that particular cell (not in
						intracell mode).
030417	NOTE		LGP			Working on SPR#1396 - border/spacing etc cleanup - in order
						to be able to fix this.
030413	REPORT	LGP			Must be able to select a single cell (easily) without going into
		(1432)			INTRA cell mode (so you can paste a row of text there. Maybe this falls
						out of doing better support for cell margins?

030506	CLOSE	LGP			It appears this is a general Linux problem. Looking on the net for AbiWord, I
						see they build different binaries for many distributions/versions of Linux. Sigh.
						See SPR#1449. For now - I'll just build on RH 7.3.
030421	REPORT	LGP			Binaries of LedIt built on newer Linux (RH 7.3) dont work on older RedHat
		(1446)			(I think - 6.0) and vice -versa. See how to build PORTABLY.

030506	CLOSE	LGP			For now - simply note in the LedIt / Linux ReadMe that we build on RH 7.3, and
						test on RH8 and RH9.
030506	WORKING	LGP			I found that if I build on RH 6.x it won't work on later versions.
						If I build with RH 7.3, it works on RH 8, and (according to Tom) on RH9.
						If I build on RH8, it fails to startup on RH7.
							It appears RH will often, but not always maintain a level of backward
						compatability, but never forward. So binaries built on RH7 have a decent chance
						on most/all future versions of Linux (at least from RH, still never tried any
						other distributions). This PROBABLY has alot todo with the version of GCC libs
						and the version of GTK libs installed.
030428	NOTE		LGP			Builds with STATIC linking on RH 7.3 seemed to fail to run - even
						on RH 7.3. It looks as if GTK requires dynamic linking of at least
						some pieces. Not sure why.
							Anyhow - a build I did on 7.3 - though it failed on RH 6, did work
						on Tom Pringles RH 9 installation. So - maybe it will be good enough to just
						build on RH7.3 for now...
030422	REPORT	LGP			The binary I built on RedHat 6.0 Linux doesn't work on
		(1449)			7.3 and vice versa. When I try building with RH7.3 and
						the -Bstatic flag - it dies even on 7.3. I've tried
						fiddling quite a bit - and to no avail. Now - try downloadin
						the source for AbiWord or other WPs for Linux, and look at
						their makefiles. BUILD - in fact - on my Linux VM.

030505	FIXED	LGP			Lose EmbeddedTableWordProcessor::SetSelection () override
						and grab selection in EmbeddedTableWordProcessor::SaveMiscActiveFocusInfo ()
						instead.
030505	REPORT	LGP			Open file SPR_1452.rtf. Select text (or insertion point) in
		(1464)			the middle of the second row. Then say "Insert Row Above".
						Assertion error! 

030505	FIXED	LGP			Fix bug with table reading with diff #s of cols per
						row (added optional arg to InsertRow).
030505	WORKING	LGP			I think the problem is that WordProcessorTextIOSinkStream::StartTableRow ()
						calls Table::InsertRow () - which copies columns from the ABOVE row.
						When doing this for the second row (which has one column) - we first copy
						two cols from row 1. Then we never DELETE the second column.
030430	REPORT	LGP			Open file SPR_1452.rtf. Note how in LedIt - the table
		(1452)			row lengths are all wrong (too far to the right). This
						doesn't happen with MSWord/WordPad. Note that I first
						noticed this while working on SPR#1396 - so it COULD be
						related.

030505	FIXED				call SetEmptySelectionStart(void) when RestoreIntraCellContextInfo ()
						so we grab empty style info from surrounding text
030501	REPORT	LGP			Open file SPR_1455.rtf. Click just before the '1' in teh first cell.
		(1457)			Note how it says "Arial 10". Then click later and then back. Its 'fixed'.
						Trouble is when we've never had a valid emptyselfont saved
						(RestoreMiscActiveFocusInfo) - we still think we have and we restore it.

030505	FIXED				Fixed Led_MFC_Helper<>::OnUpdateCommand_MSG to disable
						commands not found in target chain.
030505	REPORT	LGP			RemoveRows/RemoveColumns commands enabled when no
		(1462)			table is selected.

030503	CHANGE	LGP			Switch to using VC71 from VC70. Rename (copy)VC70
		(1461)			project files to _VC7 in case some people still using
						VC7.

030502	CLOSE	LGP			I think I have a good idea what the problem is. The basic problem
						is a design flaw/quirk with the MFC CWinThread::Run ()/
						CWinApp::OnIdle () processing. The problem is that any time you
						get a message for which CWinThread::IsIdleMessage () doesn't return false,
						you re-run the entire idle-loop again. This has the effect of rechecking
						the validity of the toolbars. Thats not crazy - its just a bit unfortunate
						in some cases. For example - I have recently added an idler in the
						WP code (WPIdler) which checks every 1/4 second to see if it needs
						to processlayout on any tables. Its check is very quick, and so
						it shouldn't cause anyone any grief. However, there mere fact that
						a WM_TIMER message was sent forces a new idle-loop to be re-run!
							Now - the reason that takes REAL TIME when I'm clicked inside of
						a table cell is just some inefficency in the OnUpdateUI code for
						those tables (constructing embedded WPs). I COULD worry about fixing that,
						or take other approaches. Since that really SHOULDNT be called often,
						I think I'll ignore that side of things for now.
							I also COULD just check the idle time for the WPIdler to
						say - 1 second. That works OK, and lowers the CPU usage to 2% (again - if
						I tested with a RELEASE build - even that might be OK).
							I ALSO could override the CWinThread::IsIdleMessage () method
						to say that WM_TIMER messages don't trigger a new round of idle loop code.
						But - I would need to be careful about that. It maybe that which has some
						significance someplace - like in updating toolbars icons while drag-selecting?
						Minor - but not worth thinking about right now.
							I ALSO considered simply adjusting the priority of the WPIdler
						class depending on whether or not the flag (it uses internally to see
						if it has any work) is set. Either .25 sec or BIGNUM. However, due
						to how this code is structured - the WPIdler is made by a WP
						class - and needs to be right now - and the flag is set
						in the PARADB by the Tablet itself (with no ptr to the WPs or Idlers),
						so it would be a pain to make that work. I would need to propagate
						some ptr for the WPIdler to the Tablet/ParaDb itself. Thats too much
						work to be worth it. WHY?
							Cuz when I retest this whole thing with a RELEASE build - I
						saw the time used was already 0%. And I could easily mittigate the
						problem by just setting the WPIdler frequency to 1/2 its current value.
						But - no need.
							CLOSE. 
030502	REPORT	LGP			Very loosely base don SPR#1459. Open file SPR_1455.rtf. Click in
		(1460)			a cell so I have a blinking caret. Note how (with DEBUGMODE build,
						on CERBERUS, WinXP) I'm using 9% of CPU just doing nothing.

030502	FIXED	LGP			Fixed remaining update problem by adding SuppressCellUpdatePropagationContext
						class and fixing SupressRefreshCalls code to call fWP.NoteWindowPartiallyUpdated ()
						when done with a supress context.
030502	WORKING	LGP			Mostly fixed by adding Table::SuppressCellUpdatePropagationContext,
						but there remains a small problem. Click before the '2'. Then just
						after the '2' (in the same cell). The blinking caret doesn't move til
						you dunk the window. I appear to have been TOO draconian in
						supressing 'Refresh' calls. Must be sure to allow them when in response
						to a user update of the selection - just not in response to the initial
						settin of the selection when creating the cell WP for a draw call (or other).
030502	REPORT	LGP			Open file SPR_1455.rtf. Click before the '2' in the second cell of
		(1459)			the first row. Select font size "24" from the toolbar (now works since SPR#1458
						fixed). But - we see no blinking caret - and we are again infinite looping
						with draw calls (see SPR#1455 and especially SPR#1456). Seems like same/similar
						problem.

030502	FIXED	LGP			Fixed Table::InteractiveSetFont () to handle IntraCellMode case,
						but then I noticed related SPR#1459.
030501	REPORT	LGP			Open file SPR_1455.rtf. Click before the '2' in the second cell of
		(1458)			the first row. Select font size "24" from the toolbar (works OK if done from
						the context menu). Changes size of ENTIRE CELL.

030501	FIXED
030501	WORKING	LGP			Seems loosely related to SPR#1455 - the RestoreMiscActiveFocusInfo
						code calls SetEmptySelectionStyle () which is always calling Refresh
						which results in an infinite stream of them. Thats bad. Just added new
						DisableRefreshContext to help address this.
030501	REPORT	LGP			Blinking caret disapears for some table cells. Open the file
		(1456)			SPR_1455.rtf. Click in the first cell (happens in any - I think).
						Click after the '1'. Blinking caret appears. Click just before it - and
						it disapears. Not sure why... MAYBE cuz zero margin? and that makes caret
						point coincident with the edge of the cell? Doesn't appar to be the case.
						Note that inserting a NEW table - and this problem disapears (for
						the new table).

030501	FIXED	LGP			Changed EmbeddedTableWordProcessor::UpdateWindowRect_ () so it throws new
						CannotUpdateNow () exception, and revised TextInteractor::Update/UpdateWindowRect
						so they take an optional parameter saying if it should automatically eat
						these new 'CannotUpdateNow' exceptions.
							Also changed TextInteractor::PreScrollHelper so it handles throws (calls with false
						for Update ingore flag) - and resets fTryTodoScrollbits.
							Also, override EmbeddedTableWordProcessor::SetDefaultUpdateMode () to force
						always to use eDelayedUpdate in place of immediateUpdate. That should greatly reduce
						the number of places people try to call Update ().
030501	NOTE		LGP			Still broken for related but slightly different reasons. See new
						stack crawl:
						 	ntdll.dll!77fb4da6() 	
						 	LedIt.exe!Led::WordProcessor::Table::EmbeddedTableWordProcessor::UpdateWindowRect_(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & windowRectArea={...})  Line 8099 + 0x43	C++
						 	LedIt.exe!Led::TextInteractor::Update()  Line 1999 + 0x2a	C++
						 	LedIt.exe!Led::TextInteractor::PreScrollHelper(Led::TextInteractor::UpdateMode updateMode=eDefaultUpdate, Led::TextInteractor::PreScrollInfo * preScrollInfo=0x00058974)  Line 2043	C++
						 	LedIt.exe!Led::WordWrappedTextInteractor::SetTopRowInWindow(Led::MultiRowTextImager::RowReference row={...})  Line 142	C++
						 	LedIt.exe!Led::MultiRowTextImager::AssureWholeWindowUsedIfNeeded()  Line 967	C++
						 	LedIt.exe!Led::MultiRowTextImager::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 1742 + 0x25	C++
						 	LedIt.exe!Led::InteractorImagerMixinHelper<Led::WordWrappedTextImager>::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 362	C++
						 	LedIt.exe!Led::InteractorInteractorMixinHelper<Led::StandardStyledTextInteractor,Led::WordWrappedTextInteractor>::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 409	C++
						 	LedIt.exe!Led::WordProcessor::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 2838	C++
						 	LedIt.exe!Led::TextStore::DoDidUpdateCalls(const Led::MarkerOwner::UpdateInfo & updateInfo={...}, Led::Marker * const * markersBegin=0x00058afc, Led::Marker * const * markersEnd=0x00058b98)  Line 1143 + 0x1e	C++
						 	LedIt.exe!Led::TextStore::SimpleUpdater::~SimpleUpdater()  Line 936	C++
						 	LedIt.exe!Led::StandardStyledTextInteractor::SetEmptySelectionStyle(Led::Led_FontSpecification newEmptyFontSpec={...})  Line 956	C++
						 	LedIt.exe!Led::WordProcessor::Table::EmbeddedTableWordProcessor::RestoreMiscActiveFocusInfo()  Line 8018	C++
						 	LedIt.exe!Led::WordProcessor::Table::ConstructEmbeddedTableWordProcessor(Led::WordProcessor & forWordProcessor={...}, unsigned int forRow=0, unsigned int forColumn=0, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & cellWindowRect={...})  Line 7380	C++
						 	LedIt.exe!Led::WordProcessor::Table::TemporarilyAllocateCellWP::TemporarilyAllocateCellWP(Led::WordProcessor::Table & forTable={...}, Led::WordProcessor & forWordProcessor={...}, unsigned int forRow=0, unsigned int forColumn=0, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & cellWindowRect={...})  Line 3795 + 0x37	C++
						 	LedIt.exe!Led::WordProcessor::Table::DrawSegment(const Led::StyledTextImager * imager=0x00ebc9e8, const Led::StyledTextImager::RunElement & __formal={...}, Led::Led_Tablet_ * tablet=0x00065554, unsigned int from=18, unsigned int to=19, const Led::TextLayoutBlock & text={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & drawInto={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRect={...}, const Led::StyledTextImager::RunElement & __formal={...}, unsigned long * pixelsDrawn=0x0005befc)  Line 6198 + 0x1f	C++
						 	LedIt.exe!Led::StyledTextImager::DrawSegment(Led::Led_Tablet_ * tablet=0x00065554, unsigned int from=18, unsigned int to=19, const Led::TextLayoutBlock & text={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & drawInto={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRect={...}, long useBaseLine=95, unsigned long * pixelsDrawn=0x00000000)  Line 749 + 0x6f	C++
						 	LedIt.exe!Led::WordProcessor::DrawSegment(Led::Led_Tablet_ * tablet=0x00065554, unsigned int from=18, unsigned int to=19, const Led::TextLayoutBlock & text={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & drawInto={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRect={...}, long useBaseLine=95, unsigned long * pixelsDrawn=0x00000000)  Line 4224	C++
						 	LedIt.exe!Led::TextImager::DrawRowSegments(Led::Led_Tablet_ * tablet=0x00065554, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & currentRowRect={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRowRect={...}, const Led::TextLayoutBlock & text={...}, unsigned int rowStart=18, unsigned int rowEnd=19)  Line 2356 + 0x2e	C++
						 	LedIt.exe!Led::WordProcessor::DrawRowSegments(Led::Led_Tablet_ * tablet=0x00065554, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & currentRowRect={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRowRect={...}, const Led::TextLayoutBlock & text={...}, unsigned int rowStart=18, unsigned int rowEnd=19)  Line 4187	C++
						 	LedIt.exe!Led::TextImager::DrawRow(Led::Led_Tablet_ * tablet=0x00065554, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & currentRowRect={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRowRect={...}, const Led::TextLayoutBlock & text={...}, unsigned int rowStart=18, unsigned int rowEnd=19, bool printing=false)  Line 2299 + 0x28	C++
						 	LedIt.exe!Led::MultiRowTextImager::DrawPartitionElement(Led::Partition::PartitionMarker * pm=0x0134e850, unsigned int startSubRow=0, unsigned int maxSubRow=4, Led::Led_Tablet_ * tablet=0x00065554, Led::OffscreenTablet * offscreenTablet=0x0006553c, bool printing=false, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > * remainingDrawArea=0x000655cc, unsigned int * rowsDrawn=0x0006550c)  Line 1432 + 0x53	C++
						 	LedIt.exe!Led::MultiRowTextImager::Draw(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, bool printing=false)  Line 1280 + 0x8a	C++
						 	LedIt.exe!Led::InteractorImagerMixinHelper<Led::WordWrappedTextImager>::Draw(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, bool printing=false)  Line 350	C++
						 	LedIt.exe!Led::Led_Win32_Helper<Led::TextInteractor>::WindowDrawHelper(Led::Led_Tablet_ * tablet=0x000658e8, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, bool printing=false)  Line 2189 + 0x32	C++
						 	LedIt.exe!Led::Led_MFC_CViewHelper<Led::Led_MFC_DragAndDropWindow<Led::Led_MFC_OptionalWin32SDKMessageMimicHelper<Led::Led_MFC_MimicMFCAPIHelper<Led::Led_MFC_Helper<CView,Led::TextInteractor> > > > >::OnDraw(CDC * pDC=0x00065a24)  Line 3186 + 0x73	C++
						 	LedIt.exe!CView::OnPaint()  Line 183	C++
						 	LedIt.exe!Led::Led_MFC_CViewHelper<Led::Led_MFC_DragAndDropWindow<Led::Led_MFC_OptionalWin32SDKMessageMimicHelper<Led::Led_MFC_MimicMFCAPIHelper<Led::Led_MFC_Helper<CView,Led::TextInteractor> > > > >::OnPaint()  Line 3164	C++
						 	LedIt.exe!Led::WordProcessorCommonCommandHelper_MFC<LedItViewAlmostBASE>::OnPaint()  Line 472	C++
						 	LedIt.exe!CWnd::OnWndMsg(unsigned int message=15, unsigned int wParam=0, long lParam=0, long * pResult=0x00065df0)  Line 2015	C++
						 	LedIt.exe!CWnd::WindowProc(unsigned int message=15, unsigned int wParam=0, long lParam=0)  Line 1737 + 0x1e	C++
						 	LedIt.exe!AfxCallWndProc(CWnd * pWnd=0x00ebc628, HWND__ * hWnd=0x000e0678, unsigned int nMsg=15, unsigned int wParam=0, long lParam=0)  Line 241 + 0x1a	C++
						 	LedIt.exe!AfxWndProc(HWND__ * hWnd=0x000e0678, unsigned int nMsg=15, unsigned int wParam=0, long lParam=0)  Line 387	C++
						 	user32.dll!77d67ad7() 	
						 	user32.dll!77d6ccd4() 	
						 	user32.dll!77d445bd() 	
						 	user32.dll!77d447d4() 	
						 	ntdll.dll!77fb4da6() 	
						 	LedIt.exe!Led::WordProcessor::Table::EmbeddedTableWordProcessor::UpdateWindowRect_(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & windowRectArea={...})  Line 8099 + 0x43	C++
						 	LedIt.exe!Led::TextInteractor::Update()  Line 1999 + 0x2a	C++
						 	LedIt.exe!Led::TextInteractor::PreScrollHelper(Led::TextInteractor::UpdateMode updateMode=eDefaultUpdate, Led::TextInteractor::PreScrollInfo * preScrollInfo=0x00066254)  Line 2043	C++
						 	LedIt.exe!Led::WordWrappedTextInteractor::SetTopRowInWindow(Led::MultiRowTextImager::RowReference row={...})  Line 142	C++
						 	LedIt.exe!Led::MultiRowTextImager::AssureWholeWindowUsedIfNeeded()  Line 967	C++
						 	LedIt.exe!Led::MultiRowTextImager::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 1742 + 0x25	C++
030501	WORKING	LGP			Considered overriding TextInteractor::PreReplace () in EmbeddedWP class, to force
						to delayed update, but I think changing EmbeddedTableWordProcessor::RefreshWindowRect_ ()
						to force immediate always to delayed is simpler and more widely helpful.
							Not 100% sure about this - but lets give it a try.
030501	REPORT	LGP			A crash - similar to one I saw before (maybe this release). I was fiddling with
		(1455)			table selection. I've reproduced it a few times - but I've not figured out how to reliably.
							Open file SPR_1455.rtf. Select a region of cells and then click in an
						individual cell? I just fiddled doing stuff LIKE that - and on a click that should
						have INTRACELL-activated a single cell - I got the below stack overflow.
							I saw it 3 times, but couldn't reproduce it a fourth. Below is the
						stack trace:
						 	LedIt.exe!AfxWndProc(HWND__ * hWnd=0x0026040e, unsigned int nMsg=15, unsigned int wParam=0, long lParam=0)  Line 387	C++
						 	user32.dll!77d67ad7() 	
						 	user32.dll!77d6ccd4() 	
						 	user32.dll!77d445bd() 	
						 	user32.dll!77d447d4() 	
						 	ntdll.dll!77fb4da6() 	
						 	LedIt.exe!Led::WordProcessor::Table::EmbeddedTableWordProcessor::RefreshWindowRect_(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & windowRectArea={...}, Led::TextInteractor::UpdateMode updateMode=eImmediateUpdate)  Line 8087 + 0x45	C++
						 	LedIt.exe!Led::TextInteractor::RefreshWindowRect(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & windowRectArea={...}, Led::TextInteractor::UpdateMode updateMode=eImmediateUpdate)  Line 1991 + 0x15	C++
						 	LedIt.exe!Led::TextInteractor::PostReplace(Led::TextInteractor::PreReplaceInfo & preReplaceInfo={...})  Line 2371	C++
						 	LedIt.exe!Led::WordProcessor::PostReplace(Led::TextInteractor::PreReplaceInfo & preReplaceInfo={...})  Line 4814	C++
						 	LedIt.exe!Led::TextInteractor::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 2190 + 0x18	C++
						 	LedIt.exe!Led::StandardStyledTextInteractor::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 676	C++
						 	LedIt.exe!Led::InteractorInteractorMixinHelper<Led::StandardStyledTextInteractor,Led::WordWrappedTextInteractor>::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 408	C++
						 	LedIt.exe!Led::WordProcessor::DidUpdateText(const Led::MarkerOwner::UpdateInfo & updateInfo={...})  Line 2835	C++
						 	LedIt.exe!Led::TextStore::DoDidUpdateCalls(const Led::MarkerOwner::UpdateInfo & updateInfo={...}, Led::Marker * const * markersBegin=0x0008e878, Led::Marker * const * markersEnd=0x0008e8f4)  Line 1143 + 0x1e	C++
						 	LedIt.exe!Led::TextStore::SimpleUpdater::~SimpleUpdater()  Line 936	C++
						 	LedIt.exe!Led::StandardStyledTextInteractor::SetEmptySelectionStyle(Led::Led_FontSpecification newEmptyFontSpec={...})  Line 956	C++
						>	LedIt.exe!Led::WordProcessor::Table::EmbeddedTableWordProcessor::RestoreMiscActiveFocusInfo()  Line 8015	C++
						 	LedIt.exe!Led::WordProcessor::Table::ConstructEmbeddedTableWordProcessor(Led::WordProcessor & forWordProcessor={...}, unsigned int forRow=1, unsigned int forColumn=1, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & cellWindowRect={...})  Line 7377	C++
						 	LedIt.exe!Led::WordProcessor::Table::TemporarilyAllocateCellWP::TemporarilyAllocateCellWP(Led::WordProcessor::Table & forTable={...}, Led::WordProcessor & forWordProcessor={...}, unsigned int forRow=1, unsigned int forColumn=1, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & cellWindowRect={...})  Line 3792 + 0x37	C++
						 	LedIt.exe!Led::WordProcessor::Table::DrawSegment(const Led::StyledTextImager * imager=0x00ebc990, const Led::StyledTextImager::RunElement & __formal={...}, Led::Led_Tablet_ * tablet=0x0009b2d0, unsigned int from=18, unsigned int to=19, const Led::TextLayoutBlock & text={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & drawInto={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRect={...}, const Led::StyledTextImager::RunElement & __formal={...}, unsigned long * pixelsDrawn=0x00091c78)  Line 6195 + 0x1f	C++
						 	LedIt.exe!Led::StyledTextImager::DrawSegment(Led::Led_Tablet_ * tablet=0x0009b2d0, unsigned int from=18, unsigned int to=19, const Led::TextLayoutBlock & text={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & drawInto={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRect={...}, long useBaseLine=95, unsigned long * pixelsDrawn=0x00000000)  Line 749 + 0x6f	C++
						 	LedIt.exe!Led::WordProcessor::DrawSegment(Led::Led_Tablet_ * tablet=0x0009b2d0, unsigned int from=18, unsigned int to=19, const Led::TextLayoutBlock & text={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & drawInto={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRect={...}, long useBaseLine=95, unsigned long * pixelsDrawn=0x00000000)  Line 4221	C++
						 	LedIt.exe!Led::TextImager::DrawRowSegments(Led::Led_Tablet_ * tablet=0x0009b2d0, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & currentRowRect={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRowRect={...}, const Led::TextLayoutBlock & text={...}, unsigned int rowStart=18, unsigned int rowEnd=19)  Line 2356 + 0x2e	C++
						 	LedIt.exe!Led::WordProcessor::DrawRowSegments(Led::Led_Tablet_ * tablet=0x0009b2d0, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & currentRowRect={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRowRect={...}, const Led::TextLayoutBlock & text={...}, unsigned int rowStart=18, unsigned int rowEnd=19)  Line 4184	C++
						 	LedIt.exe!Led::TextImager::DrawRow(Led::Led_Tablet_ * tablet=0x0009b2d0, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & currentRowRect={...}, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & invalidRowRect={...}, const Led::TextLayoutBlock & text={...}, unsigned int rowStart=18, unsigned int rowEnd=19, bool printing=false)  Line 2299 + 0x28	C++
						 	LedIt.exe!Led::MultiRowTextImager::DrawPartitionElement(Led::Partition::PartitionMarker * pm=0x0134e810, unsigned int startSubRow=0, unsigned int maxSubRow=1, Led::Led_Tablet_ * tablet=0x0009b2d0, Led::OffscreenTablet * offscreenTablet=0x0009b2b8, bool printing=false, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > * remainingDrawArea=0x0009b348, unsigned int * rowsDrawn=0x0009b288)  Line 1432 + 0x53	C++
						 	LedIt.exe!Led::MultiRowTextImager::Draw(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, bool printing=false)  Line 1280 + 0x8a	C++
						 	LedIt.exe!Led::InteractorImagerMixinHelper<Led::WordWrappedTextImager>::Draw(const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, bool printing=false)  Line 350	C++
						 	LedIt.exe!Led::Led_Win32_Helper<Led::TextInteractor>::WindowDrawHelper(Led::Led_Tablet_ * tablet=0x0009b664, const Led::Rect_Base<Led::Point_Base<long>,Led::Point_Base<unsigned long> > & subsetToDraw={...}, bool printing=false)  Line 2189 + 0x32	C++
						 	LedIt.exe!Led::Led_MFC_CViewHelper<Led::Led_MFC_DragAndDropWindow<Led::Led_MFC_OptionalWin32SDKMessageMimicHelper<Led::Led_MFC_MimicMFCAPIHelper<Led::Led_MFC_Helper<CView,Led::TextInteractor> > > > >::OnDraw(CDC * pDC=0x0009b7a0)  Line 3186 + 0x73	C++
						 	LedIt.exe!CView::OnPaint()  Line 183	C++
						 	LedIt.exe!Led::Led_MFC_CViewHelper<Led::Led_MFC_DragAndDropWindow<Led::Led_MFC_OptionalWin32SDKMessageMimicHelper<Led::Led_MFC_MimicMFCAPIHelper<Led::Led_MFC_Helper<CView,Led::TextInteractor> > > > >::OnPaint()  Line 3164	C++
						 	LedIt.exe!Led::WordProcessorCommonCommandHelper_MFC<LedItViewAlmostBASE>::OnPaint()  Line 472	C++
						 	LedIt.exe!CWnd::OnWndMsg(unsigned int message=15, unsigned int wParam=0, long lParam=0, long * pResult=0x0009bb6c)  Line 2015	C++
						 	LedIt.exe!CWnd::WindowProc(unsigned int message=15, unsigned int wParam=0, long lParam=0)  Line 1737 + 0x1e	C++
						 	LedIt.exe!AfxCallWndProc(CWnd * pWnd=0x00ebc5d0, HWND__ * hWnd=0x0026040e, unsigned int nMsg=15, unsigned int wParam=0, long lParam=0)  Line 241 + 0x1a	C++
						 	LedIt.exe!AfxWndProc(HWND__ * hWnd=0x0026040e, unsigned int nMsg=15, unsigned int wParam=0, long lParam=0)  Line 387	C++
						 	user32.dll!77d67ad7() 	
						 	user32.dll!77d6ccd4() 	
						 	user32.dll!77d445bd() 	
						 	user32.dll!77d447d4() 	
						 	ntdll.dll!77fb4da6() 	

030501	FIXED				Added RTF writing support for table cell spacing and margins.
030430	WORKING	LGP			Added RTF reading support for table cell spacing (trspd{t,l,b,r}). Not
						perfect (see SPR#1454).
							Still todo - RTF WRITING.
030430	WORKING	LGP			Added RTF READING support for trpadd{b,l.,t.r} and \trgaph
						tags which specify table margins. Fully supported in WP class SinkStream
						as well. Now reading these margins in from existing files looks fine.
						Had to add PRELIMINARY \trleft support to reader to make this
						work fully. Added new SPR#1453 to take care of \trleft spinnoff issue.
030417	WORKING	LGP			I think this is done, except for the IO code. I've set
						good defaults for spacing (0), and tested with non-zero spacing.
						It looks good / works well. I've left in a good default (from MSWord XP)
						for cell margins (actaully word as no top/bottom and I added a small
						top/bottom margin).
030417	WORKING	LGP			Cleaned up the semantics, and documented it in the
						Table class declaration docs (autodoc). Also - added preliminary
						support for cell margins and cell spacing (somewhat tested, but
						no UI to set and no RTF support yet).
030401	REPORT	LGP			Cleanup 'border' and cellx (cell witdh) semantics and code.
		(1396)

030429	FIXED	LGP			Yep - same thing.
030429	WORKING	LGP			Seems like could be related to SPR#1406. See if that fix fixed this
						as well.
030402	REPORT	LGP			The given file - SPR_1405.rtf - opens and looks fine in LedIt,
		(1405)			but looks terrible in WordPad (WinXP) and Word XP (on WinXP). Must be a bug
						in my RTF writing in this case.

030429	FIXED	LGP			At the end of WriteTable () - call WriteStartParagraph () so pard is
						generated (resetting the intable flag). Also - in my reader (not
						directly related to this bug) - reset the intable flag on a pard
						(since empiricly - thats what wordpad and WinWord appear to do -
						looking at their generated RTF - docs are ambiguous)
030402	REPORT	LGP			Bug with newlines between tables in RTF IO. See file SPR_1406.rtf. It opens
		(1406)			the same in WordPad/WinWord and LedIt (3.1a6x). So I guess the bug is with WRITING.
							To reproduce:
								o	New Doc
								o	Insert Table
								o	Insert Newline
								o	Insert Table
								o	Save
							Note when you reopen the saved file - its missing the separating newline between
						tables (also can repro with copy and paste).

030429	FIXED	LGP			Fixed as a side-effect of work on SPR#1168. Trouble was bad cached
						positions due to different sizes of windowrect used by OnDraw and
						OnDrawMetaFile etc calls (different ways of drawing - sometimes OLE DRAW
						call and sometimes MSWindows WINDOWPROC draw call). Anyhow, now they
						should be consistent.
030422	REPORT	LGP			In ActiveLedIt - the blinking caret sometimes goes to the
		(1448)			wrong place (upper LHS of the window - not taking into account
						the margins). Sporadic - but have seen it many times resizing
						an empty AL instance inside of ActiveX Test Container.

030429	CHANGE	LGP			Inserting ActiveLedIt into LedIt - the widget appears very
		(1450)			small until you do something. Fix was Led_MFC_ControlItem::DoVerb
						OLEIVERB_SHOW/OPEN must call SetExtent ().

030422	FIXED	LGP			Override LedItView::UpdateScrollBars () so we can disable
						it during metafile draws. Override ActiveLedItControl::OnDrawMetafile
						since default one doesn't work right for ActiveLedIt. Now we draw
						(metafile) properly when embedded in MSWord XP.
							NOTE: The DrawToMetaFile functionality can ALSO be tested
						in the ActiveX Test Container application. It was broken
						as of AL 3.0.1, and is now working properly!
030422	WORKING	LGP			ScriptStringAnalyse () in Led_Tablet_::TabbedTextOut () fails
						when applied to a metafile HDC, so fallback on older drawing code.
030422	WORKING	LGP			Allow for Led_Win32_Helper<BASE_INTERACTOR>::GetStyle () to
						be called before the window has been realized (NULL HWND) - cuz
						we draw it to the metafile before its been realized.
030421	REPORT	LGP			Put an ActiveLedIt instance into MSWord. Activate it and
		(1447)			enter some text. Click outside the instance to deactivate the
						control. CRASH. Turns out that the ScriptStringAnalyse ()
						call returns E_FAIL in that context.

030421	CHANGE	LGP			Got compiling with MSVC.NET 2003 (VC8), and installed
						VC6 and VC7 on VMWare virtual machines. Gut building there.
						Soon switch basic development to VC.Net 2003 (once I get
						DevPartner Profiling working). So need to be able to test build
						on VM machine. Now that I have VC6 setup that way - UNISTALLING
						it from CERBERUS.
							Also have GCC 2.96 installed on new RedHat 7.3 VM (VMWare) machine,
						and got compiling with that - but binaries compiled there dont work on older
						Linux and binaries from older Linux dont work on newer. INVESTIGATE!

039421	CLOSED	LGP			Cuz cannot reproduce.
030421	WORKING	LGP			Tried AL 3.1a6x DEMO /PU / Release with LedIt 3.1a5 released and Word XP, on
						Win XP, and they worked fine. Then tried with AL RELEASE 3.1a6x (PU, no DEMO). Again -
						fine. Then I tried with AL 3.0.1 (released) - and again - it worked fine with
						Word XP. Assume this was bad testing or unreporudicble. Anyhow - seems fine right now.
021025	REPORT	LGP			Cannot Insert ActiveLedIt into MSWord XP. Can insert it in LedIt,
		(1245)			and copy and paste it over to MSWord. Probably should contact MSFT and
						open a support quesiton with them on this.

030417	FIXED	LGP			Fixed small end-of-buffer bug case in
						OptionallyExpandSelectionForSmartCutAndPasteModeDeletes
030417	WORKING	LGP			Fixed problem with LedIt menus - but still must debug SmartCNP problem.
030417	WORKING	LGP			Reproduced the crasher SmartCNP bug with LedLineItMFC, but the option
						menu there worked fine.
030417	REPORT	LGP			In LedIt - paste in text "fasdf ". Select "fasdf" (everything but the space).
		(1444)			CUT COMMAND. ASSERT ERROR!!!
							Also - seemed to be doing SmartCNP code - even though SmartCNP was disabled in
						the LedIt menus!

030417	FIXED				Call InvalidateIntraCellContextInfo in a few places to avoid accessing
						invalid selection (had to fix SPR#1443 first).
030417	REPORT	LGP			Small intra-cell-selection bug. Create a new table (2rows, 3 cols).
		(1442)			Place insertion point at end of some text in first row, third cell.
						Select InsertColBefore command. Note how you get assertion error
						cuz of attempt to restore selection of the old row1,col3 cell to the
						new cell in that position (which doesnt have that much text - cuz its
						created empty).

030417	FIXED	LGP			Taken care of by SPR#1443.
030417	REOPEN	LGP			See SPR#1443. That - I believe - is the same bug. Anyhow - it allows me to now
						reproduce this problem.
030416	CLOSE	LGP			Still cannot repro, and haven't seen in days.
030413	WORKING	LGP			Cannot REPRODUCE.
030413	REPORT	LGP			A small bug with blinking caret (on Win32) tables. Have cell with NO TEXT.
		(1429)			click, and you get no blinking caret.

030417	FIXED	LGP			Add fSavedIntraCellInfoValid flag, and InvalidateIntraCellContextInfo &
						Save/RestoreIntraCellContextInfo methods. Call InvalidateIntraCellContextInfo
						in a few places to avoid accessing invalid info (esp selection - this was
						basically SPR#1442, and EmptyStyleSelection - which was SPR#1443).
030417	WORKING	LGP			Problem APPEARS to be that EmbeddedTableWordProcessor::RestoreMiscActiveFocusInfo ()
						is called (for the first time in this case) before a call to SaveMiscActiveFocusInfo ()
						and so its setting a bogus EmptyStyleSelection. Not 100% sure if thats creating ALL my
						problems, but it is probably responsible for SPR#1429, and at least some others.
							Note that this is related to SPR#1442 - as well.
030417	WORKING	LGP			Open file SPR_1443c.rtf - and click in the empty cell. That produces the problem.
						Clicking in any other cell - and there is no problem, and ONCE you've clicked in
						another cell, clicking in the empty cell works fine.
030417	REPORT	LGP			Open file SPR_1443.rtf. Click in a cell. HANG/Stack overflow/flaky behavior.
		(1443)			Try this under the debugger to see what is going on.

030417	CLOSE	LGP			DUP OF SPR#1349.
030411	REPORT	LGP			UI Localization. Seriously consider doing this for a
		(1424)			couple of languages (French?, Portuguese, Spanish?, Japanese?).

030417	FIXED	LGP			Added strings to WP::CommandNames and used them...
030410	REPORT	LGP			Minor problem - get rid of explict strings (use CmdName struct)
		(1421)			in WordProcessor::OnUpdateFontSizeChangeCommand ().

040417	CLOSED				DUP of fixed SPR#1435
030411	REPORT	LGP			New LedIt doc, insert a table. play around with inserting new
		(1426)			rows etc and deleting rows (once that functionality exists). Make
						sure we cleanup selection (currently we get assert errors).

030416	CHANGE	LGP			Added support to Win32UIFileAssociationInfo so we can write
		(1440)			separate open/edit commands to registry (with kNoChange meaning
						no change). Then added support to LedLineItMFC to register itself
						(again - optionally) for .bat files - but only for the EDIT keyword,
						and not for the open (which remamins bound to running the .bat file -
						its default).

030416	FIXED	LGP			Fixed LedLineItDocument::DoSave () to just append .txt instead
						of stuff from doctemplate. Cannot just change DocTemplate itself,
						cuz then MFC writes its own crap to the registry for .txt and we
						don't wnat that - cuz it interferes with what we write.
030413	REPORT	LGP			Small LedLineItMFC bug. New Document, and then save, and note
		(1433)			how default file name suffix is .ledtxt.

030416	FIXED
030413	REPORT	LGP			Implement CUT command for a set of selected cells (earlier did copy
		(1430)			and clear of selected cells)

030416	FIXED				Made OnInsertTableColAfterCommand methods of Table - rather
						than WordProcessor
030416	WORKING	LGP			Did the BreakCommands change and the UndoContext change.
030415	REPORT	LGP			Minor command code cleanup todo. Wrap stuff inside the context
		(1437)			of an UndoContext with a C++ {} so any stack based objects MUST
						be destroyed before the COMMIT call. Also - it makes the context
						clearer. Also add a BReakCommandsXXX() method to TextInteractor to
						wrap the usual IF!=NULL test.
							Another related cleanup - in the WP code - move many of the Insert Row
						Delete Column command etc stuff from the WP class to the WP::Table class.

030416	FIXED
030415	REPORT	LGP			Select a row at the bottom of a table, and select DeleteRow.
		(1435)			You get an assert error because the table cell selection is
						invalid.

030415	FIXED	LGP			Had to be careful - and not actually call OnPerformCommand (kClear_Cmd) - since
						that would just clear out the selected cells. But directly calling
						TextInteractor::OnClearCommand () did the trick (including handling the undo name).
030415	REPORT	LGP			Select ALL the cells in a table and do "Delete Rows" or Delete COlumns".
		(1438)			It should do a Clear command with the context of the entire table.
						
030415	FIXED	LGP			Did ActiveLedIt.
030415	WORKING	LGP			Tested MacOS/Linux implementation - fine. Still todo - ActiveLedIt.
030415	WORKING	LGP			Added to LedIt (Win32 - not yet menu changes for MacOS/Linux).
						Added new REMOVE menu to LedIt - like the Insert menu. Spun off the
						Split/Merge menu commands into a new SPR(SPR#1436). Just did the
						Remove Row/Columns command implementation.
030411	REPORT	LGP			Add commands for REMOVE SELECTED ROWS/COLUMNS. Remove column MAYBE
		(1425)			the same as a horizontal merge cells? Do I want to take this time to
						add Split Cell and Merge Cells commands? Maybe only for HORIZONTAL
						SPLIT/MERGE for now?

030415	FIXED	LGP			The original requested behiavor is now implemented. The second request -
						about table rows/columns being selected - was implemented, but now has
						been removed. The behavior was different than the standard - MS Word -
						and its easy enough to remove rows/columns using the new Remove Row/Column
						commands (SPR#1425).
030413	WORKING				Table::OnTypedNormalCharacter () - fix so if ALL cells selected, we treat that as
						blowing away the table, and if fewer, then clear the cells and enter the
						text into the first. Maybe if multiple rows selected, then blow away those rows
						other than the first and clear the cells in the first selected.
030413	REPORT	LGP			New table (with 3 or more cells). Select two cells. Type a letter.
		(1431)			That replaces the entire table. It should clear both sells and then
						select and enter into the first.

030413	FIXED
030413	WORKING	LGP			Maybe fixed (better than I expected). Translate table pastes already
						inside a table cell into newline/tab delimited tables.
030411	REPORT	LGP			Since 3.1 won't support nested tables - throw a special 'nested table'
		(1427)			exception when an attempt is made to construct one (since RTF code doesn't
						support it yet- this could only come from a user action - like pasting a table
						(RTF) into an existing cell?). Maybe even THAT won't be possible depending on
						how I deal with SPR#1347.

030412	FIXED	LGP			Save/restore GetEmptySelectionStyle for embedded Cell WPs.
030411	REPORT	LGP			The "empty selection" font isn't presevered in
		(1428)			table cell editing. For example - if you select a text in
						a table cell and say "style bold" - it works properly.
						But if you have an empty selection and say 'set bold'
						and then start typing - it doesn't come out bold.

030412	FIXED	LGP			Support SetOverwriteTableMode for Internalizer and use in
						InternalizeBestFlavor(CUR_SELECTION). Now when you paste - you overwrite
						table cells instead of blowing the entire table away.
030315	REPORT	LGP			Handle PASTE of a region of cells from a table into another table.
		(1347)			Based on - and do after - SPR#1346.

030411	FIXED				Really fixed and marked in code as SPR#1329.
030315	REPORT	LGP			Handle COPY of a region of cells from a table. Just copy the subset of
		(1346)			cells. Try pasting - NOT into another table - but just elsewhere in the document.
						See SPR#1247 for the tricker case of pasting back into the original
						table.

030411	FIXED				LGP - noticed that I already had explicit SPRs for some the one
						thing still remaining (SPR#1347), and had another SPR for the last
						bit done (SPR#1346). So - mark this as FIXED.
030411	WORKING				Fixed TableIOMapper and surrounding code so
						WordProcessor:ExternalizeFlavors() only writes the cells selected in
						the table (fixes COPY command with table cells selected). Clear
						was already done. Now still just need to handle PASTE of cells.
030410	WORKING				Handle passing alot many commands to a REGION of selected table
						cells. Also - pass along InteractiveSetFont/AssureCurSelFontCacheValid
						so that the toolbar displays the right cached font info.
							Still need to handle OTHER table-level commands, like
						Clear (easy), and Copy/Paste (a tiny bit of work - like what I had
						once done for rows).
030410	NOTE					At this point - the Copy/Paste/etc clip commands all work when
						a particular cell is activated and selected (intra cell activation).
						Still todo for this SPR is handling of commands for
						the table level itself (mutlicell select). Also note that UNDO isn't handled
						and is covered in SPR#1415.
030410	WORKING				override EmbeddedTableWordProcessor::OnCopy/Paste_Before/After code to
						pass back to owning WP.
030410	WORKING				Added and used WordProcessor::PassAlongCommandToIntraCellModeTableCell
						to mark/pass along certain cmds to the table cells WPs.
030409	WORKING				Back to this problem, now that cell selection and editing seems to work
						quite well!
030407	WORKING				Detour. We need more detailed cell-selection activation code to really
						work on this, so focus on SPR#1403 and SPR#1404.
030407	WORKING				Now new Table::OnUpdateCommand/Table::OnPerformCommand hooked into the
						command chain (but still do nothing)
030407	WORKING	LGP			Fixing SPR#1407 was really done for THIS bug.
030401	NOTE		LGP			Thinking about how to DELEGATE menu commands from WP object
						to the embedded Table. I THINK this will have to be based on
						moving the basic funcitonality of command/UPDATE dispatch to
						TextInterator itself (virtually - and instead of using templates).
030307	REPORT	LGP			Handle semantics of commands like Copy/Paste/Clear, etc applying
		(1329)			to a selected region of a table.

030409	FIXED				Fixed small bug in TextImager::GetSelectionWindowRects () handling
						of interline space. It assumed GetRowHilights () returned rects all with
						the same top (or at least where none were ATOP of another). But - with
						individual table cells being returned - you can get many rows of
						rectangles returned on top of one anohter. A stupid waste - since I
						don't think we even use Interline space anymore (thoguh who knows -
						we may someday!)
030409	WORKING				I had HOPED fixing SPR#1413 would have fixed this - but alas no.
						I can still reproduce it. Now just try a single newline, insert table,
						and select all.
030409	WORKING				LGP found another crash trying a similar reproduce approach.
						Bug was that in Table::SetCellSelection - must set fIntraCellMode
						before doing Refresh. NOW - try again to reproduce prev problem.
030409	NOTE					I think I can reproduce. Make a table and a selection that
						extends from the table to a row or two above (inclusive). Then click
						ABOVE (outside) the selection. Asert error in
						TextImager::GetSelectionWindowRects ().
030409	REPORT				Misc crashes (mostly assert error) with new table
		(1417)			selection code. Fiddle with it for a while, and make sure its
						stable before moving on. Try lots of little selections and
						edits, activate/deactivate, etc..

030409	FIXED				Being more careful - and always constructing the EMBWP (except
						in the layout case) in WINDOW coords and using the new
						TableCoordinates2Window/WindowCoordinates2Table routines as appopriate
						fixed this problem, and worked fine even with H-scrolling.
030409	WORKING	LGP			Must cleanup and be more consistent about WR coords used
						for TableCell construction - now sometimes in WR coords and sometimes
						in table coords. Sometimes one more conveneint than then other -
						but the inconsistency makes implementing EmbWP::RefreshWindowREct9)
						not possible to do correctly...
030409	WORKING				Basic problem is that RefreshWindowRect_ () call needs to map
						coordinates. I'm generally cleaning up the coordinate mapping which
						relates to tables. I've added TableCoordinates2Window/WindowCoordinates2Table
						methods of Table.
030408	REPORT				Shift-Backarrow moves selection within table, but
		(1413)			doesn't do REFRESH.

030409	CHANGE	LGP		<OLDCODENOTE>
		(1419)				Lost TextInteractor::Refresh (const Led_Rect& area, UpdateMode updateMode) and
						TextInteractor::Update (const Led_Rect& area) methods as they are never used and
						really are unwise and should be discouraged. Now just use WindowRect versions.
						Maybe in the future - use page-based ones? Though I doubt that. Refreshing
						or invalidating is inherently tied to a window of display.
							Because of this - pure virtuals Refresh_ (RECT) and Update_ (RECT)
						are no longer needed.
							For similar reasons - we also eliminated Refresh_(UPDATMODE) and
						Update_ pure virtuals. The only routines calling these - Refresh (UpdateMode)
						and Update () - can be trivially implemented vectoring to the more general
						RefeshWindowRect_ () and UpdateWindowRect_ ().
							This is unlikely to require any code changes in users progarms - but it could.
						</OLDCODENOTE>

030409	FIXED	LGP			I verified his complaint about the bad docs, and I updated the
						docs that come with LedIt 3.1 to say it requires CARBON, and that the
						last 68K compat release was 2.1.
030409	REPORT	Fabrizio	> -----Original Message-----
		(1418)			> From: fabrizio venerandi [mailto:fabrizio.venerandi@libero.it]
						> Sent: Wednesday, April 09, 2003 1:37 AM
						> To: Lewis G. Pringle, Jr.
						> Subject: Re: info ledit
						> 
						> 
						> Mercoledì, 4 dic 2002, alle 15:30 Europe/Rome, Lewis G. Pringle, Jr. ha
						> scritto:
						> 
						> > 	Its been a long while. The compilers I used stopped supporting 68K,
						> > and that’s when I did. I could go back and use an older compiler, but
						> > that would take a lot of work. What documentation says that 2.3 is a
						> > fat binary? I really don’t rememeber when I switched to PPC only.
						> 
						> The html files coming with the powermac version says it, but I can only
						> use the 2.1 on a 68k mac.

030409	FIXED	LGP			Really done mostly for a while. But - especially since SPR#1404 is done,
						we can now mark this as fixed.
030407	WORKING	LGP			This has been largely done for a while. The main part that isn't done has
						todo with SPR#1404 - cell activation and editing. Working on that now.
030401	REPORT	LGP			Tables: do SELECTION of cells (maybe not with mouse - just lowlevel support)
		(1403)

030409	FIXED	LGP			Enough of this is working to mark it as fixed. Deal with any remaining
						issues as separate SPRs.
030409	WORKING	LGP			override GetCaretShownSituation/CalcCaretRect for WP class for table
						support
030408	WORKING	LGP			Added TextInteractor::GetCaretShownSituation () function and used
						it from various SDK wrappers to handle the (same as current) caret logic.
						Once that works (test on MacOS etc), then we just override that
						routine along with the CalcCaretRect () - and we have a portable solution
						for the caret in tables.
030408	WORKING	LGP			Fixed double click - and now must address blinking caret.
030408	WORKING	LGP			Working much better. You can now use the mouse to select a range within
						 a cell, and typing now works properly too. Still must fix a few glitches
						 with it, like double clicks don't work, and I must support
						 blinking caret. Also, a few stray assertions occasionally.
030407	WORKING	LGP			Largely working now (though very primitive). Still needs alot of cleanup,
						and PERHAPS speed tweeking?
030401	REPORT	LGP			Tables: do activation/editing in a cell (editing of cell and dyncgrow)
		(1404)

030407	FIXED	LGP			Added SPrintF and Format() utilities.
							Added fUndoFormatString / fRedoFormatString command strings, and use
						that with Format() calls instead of hardwired strgins in
						TextInteractor::OnUpdateUndoRedoCommand ()
030402	REPORT	LGP			Cleanup "Undo" command name code. Change how the names are generated so
		(1409)			they can be more easily be localized (MFC code??? String munging). Maybe use
						sprintf style string with subst str for command name. See if I already have
						a format command for SDK_STRINGS - already in Dialog code?

030407	FIXED
030407	REPORT	LGP			On LedIt MAC - add List menu items (list style and indent/unindent)
		(1412)

030406	FIXED	LGP			I heard back - and he said this fixed the problem.
030404	WORKING	LGP			It seems that what is special about the HWND property is that there is
						not OLEAUTOMATION type that well correspondst to HWND. Thought the IDL compiler
						didn't complain - it may not be a nice thing todo to use this type. So - try
						using just 'int' for the type and see if the problem goes away. ASKING CHRIS SPENCER!
030402	REPORT	C.Spencer>Visual DataFlex imports activeX controls by interrogating them and producing
		(1411)			>code. The new version has some code generated that is incorrect ( I don't
						>think this is a problem with the control but the way VDF works)
						>
						>Define wireHWND for 
						>
						>I believe this should read
						>
						>Define wireHWND for Handle
						>
						>Also the following functions to get the window handle are incorrect as below.
						>
						>// This read-only property returns the HWND associated with the ActiveLedIt control.
						>    Function ComHWnd Returns wireHWND
						>        wireHWND retVal
						>        Get ComProperty of (phDispatchDriver(Self)) -515 (OLE_VT_BYREF ior ) to retVal
						>        Function_Return retVal
						>    End_Function
						>
						>    // This read-only property returns the HWND associated with the ActiveLedIt control.
						>    Procedure Set ComHWnd wireHWND value
						>        Set ComProperty of (phDispatchDriver(Self)) -515 (OLE_VT_BYREF ior ) to value
						>    End_Procedure
						>
						>The boolean expression (OLE_VT_BYREF ior ) seems to be missing a value
						>( if it is required at all).
						>
						>Any thoughts on what this function should do or is this soemthing I need to send to Data Access?

030405	CHANGE	LGP			Major change in command-processing classes/support.
		(1407)			<OLDCODENOTE>
								Calls the macro DoDeclare_TextInteractorCommonCommandHelper_MFC_MessageMap()
							are obsolete.
								Lose your class LedItViewCMDINFO in your code (usually subclassed from
							WordProcessorCommonCommandHelper_DefaultCmdInfo or
							TextInteractorCommonCommandHelper_DefaultCmdInfo. Instead, declare a
							command-number mapper subclass of CommandNumberMapping<> usually a subclass
							of MFC_CommandNumberMapping or PP_CommandNumberMapping etc. See LedLineIt
							or LedIt sources for an example of this.
								Lose your class LedItViewCMDINFO, and instead your own subclass of
							TextInteractor::DialogSupport (and WordProcessor::DialogSupport if using
							WordProcessor) with very similar methods. See the sample usage in the LedIt/
							LedLineIt sample code.
						</OLDCODENOTE>
							Finally got all the various apps - including NetLedIt tested.
							Note - this was really originally done to address SPR#1329.

030404	CHANGE	LGP			ActiveLedIt now properly saves BINARY version# in DemoMode,
		(1410)			and now LOOKS AT binary version# (so < compare works right).

030401	FIXED	LGP			Fixed TextInteractor::CalculateCaretRect () to check if GetCharWindowLocation
						is outside of the WindowRect and if so - just return empty-rect for CaretRect.
							Also, updated Led_Win32_Helper<>::UpdateCaretState_ () to check if caretRect.IsEmpty (),
						and to not position the caret to 0,0, but instead to hide it altogether (offscreen).
030319	REPORT	LGP			Open file SPR_1359.rtf. Start scrolling down. Note the
		(1359)			assertion error in Rect::GetHeight () called from ::UpdateCaretState
						after call to CalculateCaretRect().

030401	FIXED	LGP			Fixed Table::DrawSegment () to do logical clipping. DID make a noticable
						performance difference displaying very large tables (like the ones at the
						end of the RTF 1.7 SPEC document.
030401	WORKING	LGP			Fix MultiRowTextImager::DrawPartitionElement () to properly compute
						invalidRowRect intersecting with 'invalidRect'.
030401	WORKING	LGP		<OLDCODENOTE>
								Added const Led_Rect& /*invalidRect*/, argument to
							StyledTextImager::StyleMarker::DrawSegment () - to pass this info along
							so it can be used to do logical clipping.
								NB: This means that any existing DrawSegment () overrides (in user
							defined embeddings) need to be updated - or their draw code will be silently
							side-stepped.
						</OLDCODENOTE>
030305	REPORT	LGP			Table performance. I've sped up display a bit - but still need to
		(1322)			do logical clipping optimization (so we don't draw cells not shown - needed
						for VERY LARGE tables). Also - alot of table IO speed issues.

030401	FIXED	LGP			LedLineItDocManager::OpenDocumentFile () now looks for unmodified
						untitled documents (a single one) and closes it on successful open
						of a NEW document.
030331	REPORT	LGP			In LedLineIt - when you open a new document and have
		(1395)			a single, non-dirty 'untitled' document - auto-close that window
						in response to opening the new document.

030401	FIXED	LGP			Not 100% perfectly fixed - because I still allow
						WordProcessor::AutoFormatIndentedText () to adjust the spacing
						for the table (first indent etc). I'm not sure this is important
						though, and could get fixed later by other changes. Ignore that
						small point - for now.
							Note fixed are WordProcessor::DrawRowSegments and
						WordProcessor::GetLayoutMargins.
030331	REPORT	LGP			Disable 'LIST STYLE' for tables (right now you can
		(1394)			select a table and say 'bullet list' and it displays the
						table as a bullet item.
							This makes good sense to allow - but MSWord does NOT
						allow it, so we won't either (would create trouble with RTF
						etc).

030401	FIXED	LGP			The code for this was actually implemented, but just
						not well tested. There was a slight bug in SPR#1393: fix bug in
						Table::GetRowHilightRects ().
030331	REPORT	LGP			Fix rowHilight display for TABLES (see old SPRs
		(1393)			on the subject to decide what is right) - but current
						display doesn't look good.

030401	FIXED	LGP			Nothing todo on MacOS. It doesn't work exactly the same
						as on Win32 - but it works well.
030331	WORKING	LGP			Fixed Win32 (Led_MFC_DragAndDropWindow<>::HandleDragSelect)
						code. Now it checks on a timeout (based on looking at
						what MSWord appeared to do. If you do a brief click, then
						change the selection, otherwise restore selection to its
						old value (all for DROP_EFFECT_NONE case). Still must fix/test
						MacOS code.
030331	WORKING	LGP			Closely related to SPR#1374, SPR#1364, SPR#1343.
030328	REPORT	LGP			I may have done wrong thing before about clicking
		(1391)			behavior fix (lookup SPR - but I within the last week or
						so). Make a selection. Click on it and let go. On MSWord,
						the selection is reset to a blinking caret. On LedIt -
						the selection doesn't change. Look carefully at this
						and assure I'm doing the right thing...

030331	FIXED	LGP			Updated LedIt/ActiveLedIt menu items (to say (shift)Tab and added
						indent/decrease indent menu items in Format menu.
030331	WORKING	LGP			Basically fixed (except I want to update menus a bit).
						Override WordProcessorCommonCommandHelper<>::OnTypedNormalCharacter ()
						to handle tab characters as calling DoIndent (TRUE/FALSE) only under
						same circumstances where those same commands would have been enabled
						in the menu - if the entire selection is list style.
030331	WORKING	LGP			See SPR_1390.rtf as an example.
030328	REPORT	LGP			Consider making TAB and SHIFTTAB be bound to
		(1390)			Increase/Decrease Indent in LedIt (WP) when already in
						list mode.

030331	FIXED	LGP			Write 'generator' tag to indicate that Led wrote this RTF.
030328	REPORT	LGP			Add {\*\generator LEd VERSION###}} tag to RTF output
		(1392)			(as WordPad/WinWord appear to)

030331	FIXED	LGP			Fixed as a side effect of SPR#1389 fix.
030319	WORKING	LGP			File SPR_1357r.rtf narrows the issue down to just a three-row
						table.
030319	REPORT	LGP			Look at bug (CanMerge assert error in Table::MergeCells) at
		(1357)			table at offset 37476 of RTF 1.7 spec. RE-ENABLE ASSERT in
						Table::MergeCells()!!!

030331	FIXED	LGP			For WP class: lose fColumns - and even fCellX - and keep
						list of Cells inside the RowInfo record. GetColumnCount
						and new SetColumnCount() take ROW# argument - so we can have
						different# of cols for diff rows. That made stuff like
						SplitMergeTableCell () obsolete (and so deleted). Seems to be
						working pretty well - at least as well as before.
							In StyledTextIO_RTF code: lose fTablesCellXArray - and
						keep track of # of cols / rows (instead of fixed # / table).
						Lose SplitMergeTableCell code (cuz no longer needed - cuz of
						above)
							In StyledTextIO - lose SplitMergeTableCell and change
						GetDimensions to GetRows/GetColumns(row). Point is to allow
						different # of columns per row in a given table
030328	WORKING	LGP			Looks doable to keep rowList (cellwidths) on a per-row
						basis.
030328	REPORT	LGP			MAYBE Consider redesign - so we allow different number
		(1389)			of columns per row, and with different heights.... Thats more
						like what MS Word appears to do. Its more general. See what
						MSWord does about resizing bunches of columns together at
						once with a tracker...

030328	FIXED	LGP			Destruction order of IdleManager and OSIdleManagerImpls
						is arbitrary - since done by static file scope DTORs. Could
						work around this other ways (with .h file with ref count based
						DTOR - as old days of iostream hack) - but easier to just make
						IdleManager::SetIdleManagerOSImpl static method and careful
						not to recreate IdleManager if setting impl property to NULL.
030328	REPORT	LGP			Still some slight memory leak becaues of IdleManager
		(1388)

030328	FIXED	LGP			Done - but untested. Test when I address some other SPRs (
						(like SPR#1381).
030327	REPORT	LGP			AL SDK installer should open some sort of file or window after
		(1386)			install.


------------------- Released 3.1a5 2003-03-27 - Below ------------------------------

030327	FIXED	LGP			UpdateInfo now has an extra field fRealContentUpdate and realContentUpdate
						CTOR arg to keep track of whether or not the update is a REAL data change requiring
						a DIRTYFLAG setting. SimpleUpdater::CTOR now takes optional realContentUpdate for
						setting the corresponding UpdateInfo flag. Note that this defaults to 'true' - which
						provides for the backward compatable, and most common semantics. In Led_Win32 - pay
						attention to this fRealContentUpdate flag and don't trigger aborts if the update is
						NOT real (even for readonly text). Fix various peices of code - e.g. HiddenText code - to
						use the SimpleUpdater(realContentUpdate=false) CTOR - so things like expanding/collapsing
						hidden text doesnt set the dirty flag or trigger aborts in readonly text. Similarly for
						the WP::Table::PerformLayout code.
030324	WORKING	LGP			Simple example - SPR_1384.rtf.
030320	REPORT	LGP			Read in any RTF doc with tables. Note how doc appears to
		(1384)			already be dirty!

030326	CLOSE				I tried ActiveLedIt 3.1a5x (after my fixes). I only tested VIRGIN Win98.
						It seemed to work fine. I also tested LedIt 3.1a4 and LedLineIt 3.1a4 and they
						both seemed to work fine.
030326	REPORT	LGP			Test ActiveLedIt download, sdk install, LedIt/LedLineIt OPEN etc on Win9x
		(1383)			and maybe Win2k?

030326	FIXED	LGP			Fixed.
030326	WORKING	LGP			LedLineItMFC now sets default font name to be "Courier New" - since thats
						truetype, and former default - "Courier" - was NOT!
030326	WORKING	LGP			Added CF_SCALABLEONLY to WordProcessorCommonCommandHelper_DefaultCmdImpl<BASECLASS>::ChooseFont ()
						and FontDlgWithNoColorNoStyles in LedLineItMFC.
030326	WORKING	LGP			In LedLineItMFC - FontDlgWithNoColorNoStyles fixed to only have truetype
						fonts. Still must verify there aren't other ways to get non-true-type fonts.
030321	WORKING	LGP			I think this problem was just a font problem. Investigate further.
						But - the font I was using on my laptop WAS Courier (non-truetype),
						instead of the "Courier New" truetype font. I think we want
						to make sure we at least default to TrueType.
030321	REPORT	LGP			Look into difference in tabstops on laptop vs. CERBERUS (LEDLINEIT)
		(1369)			for this LedBugs file.

030326	FIXED	LGP			FIXED
030326	WORKING	LGP			Add new SPRs for small remaining installer issues: SPR#1381.
030326	WORKING	LGP			Largely implemented.
010830	DEFER	LGP			DEFER for Led 3.0
001108	NOTE				Much improved. Still no installer (not sure needed). But much improved docs. IGNORE
						docs part - covered in SPR#0704/0844.
000618	REPORT	LGP			Need installer for the ActiveLedIt! binary package (and MAYBE for Led source packages?)
		(0795)			For ActiveLedIt! - at least - and also provide real doc files and more samples.

030326	FIXED	LGP			FIXED.
030326	WORKING	LGP			At the same time - fix the ActiveLedIt.inf file in the CABFILE
						to refer to just the right version# as well (including right number
						for DEMO versus NON-DEMO version).
030325	WORKING	LGP			Fix files so CODEBASE refers to magic flag replaced by a sed
						script on build. Sed scripts in Scripts\MungeALSamplesForCABFILE.bat
						and \Scripts\MungeALSamplesForCABFILE.bat
030325	REPORT	LGP			Fix ActiveLedIt DEMOs so that they refer to CAB file IN
		(1378)			THE SDK!!! That way - when users run the demos in the SDK -
						it will run the copy I've provided.

030326	FIXED	LGP			DllUnregisterServer fixed to undo category changes before rest of
						unregisters (mirroring in reverse order what we do on a REGISTER) - cuz
						otherwise they fail in the unregister (presumably cuz some key they depend on
						is already gone).
030325	REPORT	LGP			ONE BIG PROBLEM WITH INSTALLER IS - usual IS bug with extracting
		(1379)			COM info (maybe look into CASE issue for reg info???). But works OK
						with selfReg - so thats OK - but UNINSTALL FAILS. REAL BUG THERE IS
						MINE - can reproduce with regsvr32 /u ActiveLedIt.ocx
						{{{ MAYBE FIXED??? -2003-03-25 - DllUnregisterServer }}}

030326	FIXED	LGP			This was hard to diagnose and fix. I had to build snapshots of
						Led using cvs (e.g. cvs -d:local:\\Pythagoras\Led\CVSRoot checkout
						 -D 2003-03-10 Led ActiveLedIt AuxiliaryPackages) to narrow down where
						 the problem cropped up.
						 	It turns out - it was the addtional of the Led_Win32 IDLE_Manager support.
						 Presumably its bad to create a window/register a class so early on.
						 Maybe this is only a problem with /regsvr case? Anyhow - by just delaying
						 when we construct the window and register its class til its actually
						 needed - that seems to address the problem. After that change - the
						 CAB files appear to load and auto-install properly with MSIE.
030325	REPORT	LGP			Web pages that auto-download a CAB file and install ActiveLedIt
		(1380)			from inside MSIE (WinXP) appears to fail on ActiveLedIt 3.1a4 or later.

030325	FIXED	LGP			Fixed ActiveLedIt and NetLedIt to call InteractiveSetFont instead of
						SetDefaultFont (for the most part). In one case - I left in SetDefaultFont calls -
						namely for PARAM DefaultFontSize/DefaultFontName params. Then, added (back)
						StandardStyledTextInteractor::SetDefaultFont override - for very LIMITED purpose.
						Only set EmptySel (basically) if the current selection is empty. Helpful
						occasionally - like when user creates a NEW edit control and says
						'set default font'. Makes for sensible default behavior. Also added
						ActiveLedIt\Samples\HTML\SimpleParamTagExample.html to test PARAM usage.
030324	REPORT	LGP			DEBUG why BOLD etc commands from ActiveLedIt demo page 
		(1375)			(http://www.sophists.com/Led/ActiveLedIt/OnlineDemos/WPInWebPageWithToolbar.asp)
						don't seem to work on ActiveLedIt 3.1a5x RELEASE

030325	FIXED	LGP			No D&D support in Led_Gtk so no worry there. MacOS/PP D&D support
						doesn't have this problem. Fixed the small bug in
						Led_MFC_DragAndDropWindow<BASECLASS>::HandleDragSelect () whcih caused
						this problem with MFC D&D.
030324	REPORT	LGP			When you click on an embedding (table or picture) it is
		(1374)			selected. Then click again on it - as if dragging - but dont drag.
						The object becomes DESELCTED. THAT is a (small) mistake.

030324	FIXED	LGP			A few problems. Use NCDestroy message to destroy MyLedWindow instead of
						static file scope variable. Define StandardUnknownTypeStyleMarker::sUnknownPict
						to be a valid pict.
030324	REPORT	LGP			Add a new URL object to LedIt (MFC/Win32). Copy and paste the URL
		(1376)			object into LedTestWin32. CRASH (assert error).


------------------- Released 3.1a4 2003-03-21 - Below ------------------------------

030321	FIXED	LGP			Fix code in StyledTextIOReader_PlainText::Read and
						StyledTextIOReader_STYLText::Read to read a bit at a time and
						NOT assume you can seek to MAXINT and the say current_offset () to
						find out how big the file is. Also - fixed a bug in
						StyledTextIOReader::BufferedIndirectSrcStream::read to seek before read()
						on target indirect srcStream.
030321	WORKING	LGP			StyledTextIOReader_PlainText::Read () calls seek_to/current_offset()
						to find the file size to read in.
030321	REPORT	LGP			Open the file SPR_1217.txt in LedIt(MFC). Fails to open!
		(1371)

030321	FIXED	LGP			Added several more CRTDBG_MAP_ALLOC_NEW / new defines. And,
						found the trouble - IdleManager constructed but never destroyed.
						Now fixed.
030321	REPORT	LGP			Small memory leak detected.
		(1368)

030321	FIXED	LGP			Fix setting of drag anchor. Moved it from Led_XXX(Win32/MacOS/Gtk)
						to TextInteractor::ProcessSimpleClick (adding extra arg). Also
						lots of other small code cleanups"
030320	WORKING	LGP			Fixed fDragAnchor setting on a click for case of extended
						selection in Led_Win32_Helper<>::OnNormalLButtonDown. Still
						must test/fix MacOS/Gtk code.
030320	REPORT	LGP			In LedLineIt - click before a letter. Then shift click just
		(1364)			after it. Note how its not selected. This is almost certainly
						a recent regression due to my recent changes to that code.

030320	CLOSED	LGP			DUP of SPR#1271 - which was already fixed (at least Win32
						part and there is probably already an SPR for the X-Win part, and
						anyhow - thats low enough priority and just a small part of whats
						broken for X - just ignore).
010830	DEFER	LGP			DEFER for Led 3.0
000308	REPORT	LGP			See SPR#0708 from Marc Olmen.
		(0709)				We should probably do something on PC (X-Windows) like what
						MacOS does for InvertRect with SetHilightMode - and simply replace
						background color pixels with HilightColor. Non-standard - but looks
						MUCH better.

030320	FIXED	LGP			At least very preliminary testing makes it seem this is
						working fine.
030320	WORKING	LGP			IdleManagerOSImpl_MacNL - tested on Windows - but not
						yet tested on MacOS.
030320	REPORT	LGP			Fix NetLedIt (Mac and Win) to work with new IdleManager code.
		(1362)

030320	FIXED	LGP			Basically done. Didn't totally disable the idle task,
						but cut if off at the knees - so it doesn't do much of anything.
						App shows as using 0% CPU - so its probably not a big deal to
						leave as is.
030320	REPORT	LGP			Fix WordProcessor::WPIdler::SpendIdleTime so that when
		(1365)			no tables invalidated - we disable the idle task (use
						InvalidateLayout call). Only if there are any should this
						idler be enabled... 

030320	FIXED	LGP			Instead of using this mechanism, I fixed this by adding
						new IdleManager (SPR#1360) and WordProcessor::DrawBefore ()
						hook. See also new SPR#1365.
030319	WORKING	LGP			Gave up on this idea. Its not a good one. Its out of
						step with my usual - use the Marker database approach.
						It turns out to be a pain (though doable) to make sure
						elements are deleted properly from the set (note that the
						first trick I ran into in implementing this is that the
						set needs to be stored with the owner - the AbstractParaDBRep).
							Still - even with this - it appeared fragile to get the
						embedding properly removed from the set in all cases. Thats
						one of the points of the existing Marker / TextStore mechanism -
						to make that stuff easy. Plus - its never yet shown up on a
						profile as being a significant cost (the collectallmarkersinrange).
							ALSO - I have a better idea for how to approach this whole
						issue that will make startup time faster for large documents.
							Basically - I want the OnIdleCalllback code to only
						do the 'collect all tables in range' for the WINDOW exposed
						areas. If that is done fast enough (keep a counter) - then
						also do other areas.
							To acheive this - I'll need to have a more elaborate
						'IDLE TIME' mechanism. Start looking into THAT.
							Thats a good idea ANYHOW - since it will be useful
						for the background SPELLCHECKING code and the eventual
						pagination code I write for Led 4.0 (or whatever the next
						major version is).
030319	WORKING	LGP			Cleaned up Table::PerformLayout (). See also SPR#1349.
030317	REPORT	LGP			Based on SPR#1348 - cleanup Table::PerformLayout and
		(1351)			calls to it. Use a set<Table*> to optimize OnIdleCallback code.

030320	CHANGE	LGP			Implement WordProcessor::DrawBefore () override to assure
		(1363)			table regions that will be displayed get layed out before
						display (goes along with SPR#1360).
						
030320	CHANGE	LGP			Based on SPR#1351 - to rework ProcessLayout and due
		(1360)			to performance analysis in SPR#1352 - I've added a new IdleManager
						implementation.
						<OLDCODENOTE>
							You must add IdleManager.cpp to your projects.
							I've gotten rid of the CallEnterIdle/OnEnterIdle mechanism
						that Led used. Instead - use the new IdleManager and Idler
						classes.
						</OLDCODENOTE>
							Special IdleManagerOSImpl_XXX (where XXX is PP, Win32, Gtk)
						was added to handle the back-end implementation of the idling.
							Begin updating WordProcessor to use WPIdler instead of
						OnEnterIdleCallback to handle calls to PerformLayout (still more
						todo there - using DrawBefore hook).
							Added TextInteractor::DrawBefore () and had that handle
						UpdateScrollBars () calls to replace old EnterIdle calls which
						did this.

030320	FIXED	LGP			Fix (hopefully) BufferedIndirectSrcStream::read () to return the
						full amount requested if possible. Tested on MacOS and can now open
						the RTF 1.7.rtf spec.
030320	WORKING	LGP			Only sensible approach is to fix BufferedIndirectSrcStream::read
						to return all the bytes...
030320	NOTE		LGP			To reproduce - try to open the RTF 1.7 spec on MacOS.
030320	REPORT	LGP			Now that BufferedIndirectSrcStream::read () can return less
		(1361)			than the full# of bytes requested - I've run into lots of problems.
						For example - the StyledTextIOReader_RTF::ReadInGroupAndSave ()
						calls GrabString () which assumes it can read everything in one
						single read call. Other places make this assumption as well (e.g.
						StyledTextIOReader_LedNativeFileFormat).

030319	FIXED	LGP			Fixed.
030319	REPORT	LGP			Cleanup DoDidUpdate/DoAboutToUpdate calls stuff - put the vector
		(1354)			based versions in #if 30COMPAT

030319	FIXED	LGP			Lose MarkersOfATypeMarkerSink<> since its identical to
						MarkersOfATypeMarkerSink2Vector<>. Use the later instead.
030319	REPORT	LGP			GET RID OF MarkersOfATypeMarkerSink and replace with
		(1355)			MarkersOfATypeMarkerSink2Vector.

030319	Fixed	LGP			Fixed.
030317	REPORT	LGP			Based on SPR#1348. Add fCachedHeight to Table object and be
		(1349)			sure to set it in the right context (simpleupdater) of PerformLayout.
						Similarly - set the cached cell rects there too (if not too hard).

030318	FIXED	LGP			Lots of minor fixes to ChunkedArrayTextStore, LedSupport.h (
						e.g. added begin/end/iterator/push_back methods to Led_SmallStackBuffer),
							Lots of speed tweeks including adding read1() method, tweeking existing code for
						membuffer::read code and added BufferedIndirectSrcStream and used it from
						the READER code (still must fix this to be optional - SPR#1353.
							Added qUseMapForControlWordMap to StyledTextIO_RTF (reader). Also,
						qTryQuickISXXX routine, and other small speed tweeks to StyledTextIO_RTF reader.
							Added new versions of DoAboutToUpdateCalls/DoDIdUpdateCalls taking
						(essentially) iteratator bounds instead of vector(must fix vector-based
						version for backward compat - do soon). Also Added
						TextStore::SmallStackBufferMarkerSink class and
						MarkersOfATypeMarkerSink2SmallStackBuffer and use SmallStackBufferMarkerSink
						in SimpleUpdater (and use BlockAllocation for SimpleUpdaters). A few other
						cleanups / speed tweeks.
							Small tweeks to ~HidableTextMarkerOwner ().
							SimpleTextStore - small tweeks - like using BlockAllocation and PUSH_BACK.
030318	REPORT	LGP			Doing a quickie profile test. Use DevPartner Profiler
		(1352)			Community Edition 7.0.0 (Build 4333), and based on work on SPR#1351 and
						SPR#1349.

030317	FIXED	LGP			Fixed.
030317	REPORT	LGP			Based on SPR#1348. DO NEW SPR WHERE qSupportEnterIdleCallback
		(1350)			IS ALWAYS FORCED TRUE (check for define 0 and BARF FOR BACKWARD COMPAT)

030317	CLOSE				DID NOT IMPLEMNT this feature. Well - really I DID implement it - but I saw
						no obvious and immediate performance boost. That MAYBE is not fatal to this strategy,
						since it maybe to make this really work - I need to sprinkle a few outer calls
						to SimpleUpdater around various operations (like constructing a table) to take
						advantage of this. Still - its not clear enough to keep the code around since
						it was a RISKY change of semantics to SimpleTextUpdater.
							I've kept the earlier cahnges to use SimpleUpdater more thoroughly through
						Led. I think that is an improvement in clarity (in most cases).
							I've kept the ORIGINAL code around in DIFF format, just in case I want to try
						it again in performance tweeking.
						-------
						Index: Headers/TextStore.h
						===================================================================
						RCS file: \\Pythagoras\Led\CVSRoot/Led/Headers/TextStore.h,v
						retrieving revision 2.71
						diff -r2.71 TextStore.h
						352a353,356
						> // Only adds !fTextModified updaters to the stack...
						> #ifndef	qStackBasedUpdaters
						> #define	qStackBasedUpdaters	0
						> #endif
						717a722,726
						> #if		qStackBasedUpdaters
						> 	private:
						> 		SimpleUpdater*	fTopOfSimpleUpdaterStack;
						> #endif
						> 
						741a751,754
						> 
						> #if		qStackBasedUpdaters
						> 		friend	class	SimpleUpdater;
						> #endif
						764c777
						< 			of scope because of an exception - whcih MAY NOT be desired. Because of this, you should
						---
						> 			of scope because of an exception - which MAY NOT be desired. Because of this, you should
						779a793,800
						> 
						> #if		qStackBasedUpdaters
						> private:
						> 	SimpleUpdater*	fNext;
						> 	size_t	fStartEffectiveUpdateContext;
						> 	size_t	fEndEffectiveUpdateContext;
						> 	bool	fSubsumed;
						> #endif
						855a877,879
						> #if		qStackBasedUpdaters
						> 		fMarkerList (),
						> #else
						856a881
						> #endif
						858a884,889
						> #if		qStackBasedUpdaters
						> 	,fNext (NULL),
						> 	fStartEffectiveUpdateContext (updateInfo.fReplaceFrom),
						> 	fEndEffectiveUpdateContext (updateInfo.fReplaceTo),
						> 	fSubsumed (false)
						> #endif
						860,862c891,914
						< 			// Note that we EXPAND the list of markers we will notify to be sure markers just next to a change
						< 			// are given a crack at it (CollectAllMarkersInRange_OrSurroundings above)
						< 			fTextStore.DoAboutToUpdateCalls (fUpdateInfo, fMarkerList);
						---
						> #if		qStackBasedUpdaters
						> 			if (not updateInfo.fTextModified) {
						> 				// See if our update is contained in the parent update
						> 				if (ts.fTopOfSimpleUpdaterStack != NULL and
						> 					ts.fTopOfSimpleUpdaterStack->fStartEffectiveUpdateContext <= fStartEffectiveUpdateContext and
						> 					ts.fTopOfSimpleUpdaterStack->fEndEffectiveUpdateContext >= fEndEffectiveUpdateContext
						> 					) {
						> 					fSubsumed = true;
						> 				}
						> 				fNext = ts.fTopOfSimpleUpdaterStack;
						> 				ts.fTopOfSimpleUpdaterStack = this;
						> 			}
						> #endif
						> 
						> #if		qStackBasedUpdaters
						> 			if (not fSubsumed) {
						> 				fMarkerList = ts.CollectAllMarkersInRange_OrSurroundings (updateInfo.fReplaceFrom, updateInfo.fReplaceTo);
						> #endif
						> 				// Note that we EXPAND the list of markers we will notify to be sure markers just next to a change
						> 				// are given a crack at it (CollectAllMarkersInRange_OrSurroundings above)
						> 				fTextStore.DoAboutToUpdateCalls (fUpdateInfo, fMarkerList);
						> #if		qStackBasedUpdaters
						> 			}
						> #endif
						865a918,920
						> #if		qStackBasedUpdaters
						> 		fMarkerList (),
						> #else
						866a922
						> #endif
						868a925,930
						> #if		qStackBasedUpdaters
						> 	,fNext (NULL),
						> 	fStartEffectiveUpdateContext (from),
						> 	fEndEffectiveUpdateContext (to),
						> 	fSubsumed (false)
						> #endif
						870,872c932,953
						< 			// Note that we EXPAND the list of markers we will notify to be sure markers just next to a change
						< 			// are given a crack at it (CollectAllMarkersInRange_OrSurroundings above)
						< 			fTextStore.DoAboutToUpdateCalls (fUpdateInfo, fMarkerList);
						---
						> #if		qStackBasedUpdaters
						> 			// See if our update is contained in the parent update
						> 			if (ts.fTopOfSimpleUpdaterStack != NULL and
						> 				ts.fTopOfSimpleUpdaterStack->fStartEffectiveUpdateContext <= fStartEffectiveUpdateContext and
						> 				ts.fTopOfSimpleUpdaterStack->fEndEffectiveUpdateContext >= fEndEffectiveUpdateContext
						> 				) {
						> 				fSubsumed = true;
						> 			}
						> 			fNext = ts.fTopOfSimpleUpdaterStack;
						> 			ts.fTopOfSimpleUpdaterStack = this;
						> #endif
						> 
						> #if		qStackBasedUpdaters
						> 			if (not fSubsumed) {
						> 				fMarkerList = ts.CollectAllMarkersInRange_OrSurroundings (from, to);
						> #endif
						> 				// Note that we EXPAND the list of markers we will notify to be sure markers just next to a change
						> 				// are given a crack at it (CollectAllMarkersInRange_OrSurroundings above)
						> 				fTextStore.DoAboutToUpdateCalls (fUpdateInfo, fMarkerList);
						> #if		qStackBasedUpdaters
						> 			}
						> #endif
						875a957,959
						> #if		qStackBasedUpdaters
						> 			if (not fCanceled and not fSubsumed) {
						> #else
						876a961
						> #endif
						878a964,975
						> #if		qStackBasedUpdaters
						> 			#if		qDebug
						> 				if (fSubsumed) {
						> 					Led_AssertNotNil (fTextStore.fTopOfSimpleUpdaterStack);
						> 				}
						> 			#endif
						> 			if (fTextStore.fTopOfSimpleUpdaterStack != NULL) {
						> 				Led_Assert (fTextStore.fTopOfSimpleUpdaterStack == this);
						> 				fTextStore.fTopOfSimpleUpdaterStack = fNext;
						> 			}
						> #endif
						> 
						912a1010,1012
						> #if		qStackBasedUpdaters
						> 		fTopOfSimpleUpdaterStack (NULL),
						> #endif
						Index: Sources/TextStore.cpp
						===================================================================
						RCS file: \\Pythagoras\Led\CVSRoot/Led/Sources/TextStore.cpp,v
						retrieving revision 2.57
						diff -r2.57 TextStore.cpp
						328a329,339
						> /*
						>  ********************************************************************************
						>  ************************* TextStore::SimpleUpdater *****************************
						>  ********************************************************************************
						>  */
						> #if		qStackBasedUpdaters && 0
						> TextStore::SimpleUpdater*	TextStore::SimpleUpdater::sTopOfStack	=	NULL;
						> #endif
						> 
						> 
						> 
						344a356,358
						> #if		qStackBasedUpdaters
						> 	Led_Require (fTopOfSimpleUpdaterStack == NULL);	// must unwind/delete all simpleupdaters before deleting the textstore they refer to
						> #endif
						1110d1123
						< 
030316	WORKING				Discovered SPR#1348. Saved old TextStore files back to orig (as TextStore.hxxx
						and TextStore.cppxxx). Wanted to avoid possible confusion due to these changes.
030316	WORKING				Did MarkerCover<> case of SimpleUpdater usage. How thats right!
030316	WORKING				Went through the Led code searching for direct calls to
						DoAboutToUpdateCalls (). I eliminated all of them (except in MarkerCover.h - so
						far) - and replaced them with use of SimpleUpdater.
							Must work out code in MarkerCover.h carefully to get rid of direct calls!
030315	NOTE					Test with SPR#1321.
030315	REPORT	LGP			Consider speed optimization hack - especially for updating tables -
		(1345)			making TextStore::SimpleUpdater nested calls keep their own internal
						'call stack' and be a NO-OP if someone does one inside another existing
						call. Test and see if it helps. Its likely to be a big speed booster, but test
						carefully - as it could also create subtle bugs.

030317	FIXED	LGP			Small amount of code change, but big strategy change. Don't call
						Table::LayoutIfNeeded () in MeasureSegmentWidth etc - but ONLY from
						WordProcessor::OnEnterIdleCallback ().
							Also fixes SPR#1321.
							Spinoff SPRs: 1349, 1350.
030316	WORKING	LGP			Select that table and copy. NEW DOC. NEWLINE, and then paste. Get same
						assert error.
030316	REPORT	LGP			SPR_1348.rtf. Open file and select table. Copy. Append newline to end
		(1348)			of doc and then paste.

030317	FIXED	LGP			Fixed by fix to SPR#1348 (moving ProcessLayout calls).
030315	NOTE		LGP			See if this is addressed by SPR#1345.
030305	REPORT	LGP			Open file SPR_1320.rtf. 
		(1321)			Select table. Copy, move selection to the end of doc, and paste. Note how
						SLOW the paste is. Reading the first table isn't too slow, but the second -
						from the paste - is extremely slow.
							Look at this towards the end of my table work as its likely to get
						solved as a side-effect of other table changes.

030315	FIXED				Fixed OnInsertTableColAfterCommand and OnUpdateInsertTableColAfterCommand ETC commands
						(before/after and row/col). Fixed to create on new notion of table (a single embedding).
						Fix to properly call Table::GetSelection.
							Use TextStore::SimpleUpdater in Table::InsertColumn/Table::DeleteColumn/
						Table::InsertRow/Table:DeleteRow so when you do AddRowBefore command the row
						actually appears.
							Open SPR#1345 - as a speed hack.
030315	WORKING				Just had to add TextStore::SimpleUpdater's in Table::InsertRow etc.
						STRONGLY CONSIDER - as a speed hack - having TextStore::SimpleUpdater's
						maintain a stack of calls and be NOOPs in there is a wider (contianing
						or equal) call on the stack with teh same params. Then - at outer level
						of table update - you could call SimpleUpdater() and hten fill in all
						the stuff for the table.
030315	WORKING	LGP			MAYBE NEED TO DO SIMPLEUPDATE - BUT WHY DOES COL STUFF WORK???
030315	WORKING	LGP			Did code to properly pay attention to row/col selection for
						insert. Insert before/after COL seems to work fine. BUT - insert
						row before/after fails to operate properly.
030315	REPORT	LGP			Fix Insert Row/Col before/after to pay attention to the
		(1344)			new table cell selection.

030315	FIXED				Fixed WordProcessor::MeasureSegmentHeight () and
						WordProcessor::MeasureSegmentBaseLine () to check if operating
						on a table, and if so, then ignore the space before/after and
						line spacing.
030313	WORKING				Fixed immediate reported problem about lines extending down
						too far (a small bug in Led_Tablet_::FrameRectangle). But - the
						display of tables looks rediculous when you specify a spaceafter/
						spacebefore, or double(or other) spacing. Consider PROHIBITING
						this somehow...
030313	WORKING	LGP			Reproduced on Windows. See file SPR_1336.rtf. Open it and
						Select the table, and do Format/Paragraph Spacing - and set DOUBLE-SPACE.
030311	REPORT	LGP			Debug when on MacOS why tables borders are drawn too far down.
		(1336)

030314	FIXED	LGP			Must call Update () in ::StillDown () loop.
030311	REPORT	LGP			Debug when on MacOS - LedIt table tracking doesn't
		(1335)			seem to update til you let go of the mouse.

030314	FIXED				Get rid of funny code for setting anchor, and override
						StandardStyledTextInteractor::WhileSimpleMouseTracking to
						properly handle tracking over embeddings and fix the
						WordProcessor::WhileSimpleMouseTracking to do likewise
						(it was already correct except for cosmetics). Net effect is
						that clicking on embedding works correctly again on Win32
						(was OK on ohter platforms) - and is now clearer on ALL
030313	NOTE					bug with double click - I figured out - pribably REDO my
						'fix' in Led_Win32 - and the fix is in processismplecluick.
							clarify why we need to look at RHS and LHS of char defined
						by draganchor - or put better the draganchor could be at the
						RHS or LHS of the character selected for an emebdding
						or table.
030313	REPORT				File SPR_1343.rtf to reproduce clicking on image problem.
		(1343)

030313	FIXED	LGP			Set initial control value properly in
						FilteredSFPutDLog::NavEventProc () for kNavCBStart event.
030313	REPORT	LGP			When you initially save a file - the default is always
		(1341)			HTML, but should be specified by the original document (MACOS LEDIT
						CARBON).

030313	FIXED				Tested - and works fine now.
030313	WORKING	LGP			A few other simliar things seem to crash. Sometimes just
						accessing the menus. I THINK the problem is just not enough
						stack space allocated. Changed it from 64 to 128K, and retesting
						now.
030313	REPORT	LGP			Insert Table on Release-CARBON-LedIt on MacOS 9.2.2 crashes.
		(1340)

030313	FIXED	LGP			Mostly fixed (small bug SPR#1338 for remaining issue).
030311	REPORT	LGP			Fix OPENFILE / SAVEFILE dialogs for LedIt on CARBONLIB so they handle
		(1337)			file type lists approprioately (like with old SFGET/PUTFILE code). Also - check
						(probably nothing) that this is OK for LedLineItPP as well).

030311	FIXED	LGP			DUP of #1287.
030311	REPORT	LGP			Fix HELP menu so shows under CARBON.
		(1334)			See also SPR#1332 (ask Marc Van Olmen).

030311	FIXED	LGP			Use Gestalt to see if Aqua UI is present and remove QUIT
						menu if it is. Also - if HMGetHelpMenuHandle() == NULL (as it
						is in OSX) - then append a Help menu and store our help menu
						items in that.
030311	NOTE		LGP			At the same time I fix this - ALSO remove the QUIT menu (dynamically)
						when it already exists in other menu (is this just under OSX or anytime with
						CARBON?).
030201	REPORT	LGP			Add HELP menu for when we're under CARBON mode (OSX) and put
		(1287)			help stuff there under it. ALso - in that mode - we msut remove
						QUIT from our File menu (other changes?).

030311	FIXED	LGP			Added CARBON and CARBON UNICODE targets. Both work (subject
						to SPRs 1287, 1334, 1333, 1337, 1258).
030310	NOTE		LGP			At the same time - cleanup makefile to not use old
						AuxFiles version of IC, and do makefile (project file)
						cleanups (for NetLedIt project as well)
030120	REPORT	LGP			Do Carbonized version of LedLineItPP and see if we
		(1252)			should be distributing THAT instead of regular version.

030311	FIXED	LGP			Added CARBON and CARBON UNICODE targets. Both work (subject
						to SPRs 1287, 1334, 1333, 1337, 1258).
030311	NOTE		LGP			Also do other project file cleanups so its as good as
						LedIt one, and make sure it has CARBON and CARBON UNICODE
						targets.
030311	REPORT	LGP			Fix LedLineItPP project file so it builds on PC (using
		(1331)			new ICLIB instead of old)

030311	FIXED	LGP			Added CARBON and CARBON UNICODE targets. Both work (subject
						to SPRs 1287, 1334, 1333, 1337, 1258).
030201	NOTE		LGP			Mostly done for LedIt already. Carbonized version runs
						fine natively on MacOS, but still have a few bugs (nav box
						mostly) before I'm ready to start releasing it. Easy todo
						LedLineIt - just not done yet (needs same fix(s)).
030117	REPORT	LGP			Get a verison of LedIt/LedLineIt working NATIVELY under
		(1249)			MacOS X (ie without running in the compatability box).

030311	FIXED	LGP			Test on MacOS - and fine there too.
030310	WORKING	LGP			Tested on Linux and Win32 - still building and testing on MacOS.
030310	WORKING	LGP			Added qLed_MajorMinorVersionString define and
						MakeSophistsAppNameVersionURL () helper function.
030310	WORKING				mostly did (doc better) (test on Linux too) - and test on MacOS!!!
030201	REPORT	LGP			Add - for ALL apps - a "Get Updates Available" menu item
		(1288)			which just calls a sophists. web page with a URL passing version#
						info as argument.

030311	FIXED	LGP			I reviewed the new docs. They are disturbing, in that they appear to
						make building templated subclasses VERY awkward. Wait a while - since I can -
						and see if later revisions of their docs make this seem OK, or perhaps read a
						book or post to comp.std.c++.
							In the meantime - I already converted to using the 'typename' keyword.
						That appears to work fine everywhere.
							Note - all this was REALL done a few weeks (or more) ago.
030120	REPORT	LGP			Lookat new docs about templates from new MWERKS compiler.
		(1254)			Use new 'typename' to replace 'class' - and see if I can get
						things to compile with both existing compilers and template
						handing and their new support.

030310	FIXED				Added SmartCNPInfo to LooksLikeSmartPastableText and
						OptionallyAddExtraSpaceForSmartCutAndPasteModeAdds to better handle case of
						when to insert smart spaces.
030310	NOTE		LGP			Here is a list of miscelaneous Smart cut and paste SPRS:
								0567
								0570
								0572
								0576
								0791
								1031
								1040
030310	WORKING	LGP			Saved sample text in SPR_1286.txt and also noted that
						smart DELETE code works pretty badly too. Consider just REWRITING
						my approach to smart cut-and-paste!
030201	REPORT	LGP			Smart Cut and Paste bug:
		(1286)			put "c3" on clipboard.
						have some text that reads 3.1c2.exe and search for 'c2'.
						Then when its selected, replace	it with 'c3' (using paste).
						inserts an unwanted space.

030310	FIXED	LGP			Fixed LedIt, LedLineItMFC, and ActiveLedIt to have _WIN32_WINNT=0x400.
030309	WORKING	LGP			After preliminary testing - setting _WIN32_WINNT to 0x400 seems to have fixed
						the problem while creating no new obvious problems (in particular, UNISCRIBE still
						seems to work). Fixed LedIt, but still must do LedLineIt, ActiveLedIt, and MAYBE
						others???
030308	WORKING	LGP			Found major clue: http://support.microsoft.com/default.aspx?scid=kb;en-us;320479
						Seems the issue is defining #define _WIN32_WINNT 0x0400. When I tried
						this - it fixed the problem (in LedIt). Must think out carefully
						and see no dependencies on other value (e.g. UNISCRIBE).
030308	WORKING	LGP			Ran under Debugger with Win98 session (Win98 + MSIE6 and MSVC.NET RMT_DBG).
						 No obvious bug in my code. It runs through the MFC open code til I get to:
						 		nResult = ::GetOpenFileName(&m_ofn);
						and that call returns ZERO (no error). Still - no dialog apepars. I tried fidling
						(with the debugger) with a bunch of flags etc, and still no change.
							I tried running (without debugger) on Win98 with LedIt 3.0.1 and it ran fine
						and with 3.1a1, and it exhibited this bug. It almost HAS todo with the switch to the
						new MFC or the new MSVC.NET.
							Its PROBABLY best to open SRX issue with MSFT, but first do a quick search on
						the internet.
030214	REPORT	LGP			Clarify / DEBUG issue where OPEN dialog doesn't appear on
		(1304)			Win98 for LedIt (in my VMWare)

030307	FIXED	LGP			Added CharacterProperties::IsMirrored (), and used it in the
						UNISCRIBE version of TextLayoutBlock_Basic::Construct_UNISCRIBE ().
030306	REPORT	Sterl		Open file SPR_1326.rtf. Look at the Hebrew text. Note  how the '{'
		(1327)			and '}' characters are reveresed. Must fix our 'mirroring' code.
						SB easy???

030307	FIXED	LGP			Be more careful in one case about grabbing REAL cell instead of
						boundsrect of mergecell.
030307	REPORT	LGP			Clicking in the third column (apparant second cell) of the table in
		(1330)			SPR_1330.rtf generates exception in RELEASE builds.

030307	FIXED	LGP			Got basic cell selection clicking and dislay working. You can
						even drag select (though D&D isn't working yet). See SPR#1328 and
						SPR#1329.
030306	WORKING	LGP			Got basic cell selection from mouse clicks working. Still not
						very good (like drag select not working).
030306	WORKING	LGP			Started adding Get/Set Selection API to Table class and added
						DrawRowHilight override to indirect to table implemenation.
030305	REPORT	LGP			Cell/Row/Col selection in tables.
		(1324)

030306	CLOSE				Saved this sample document for future reference, and sent a copy
						to Marc.
030306	REPORT	MarcVanO		Make test document (for Marc to test Mac code) testing several
		(1326)			languages for UNICODE support. Save it as SPR_1326.rtf

030306	FIXED	LGP			Made a couple other small changes/fixes, but the main point was:
						Got rid of FindWrapPoint_ReferenceImplementation and related qHeavyDebugging
						code in finding wrap points. It called CalcSegmentSize() - which in turn
						called back to our module asking for row ends. This deadly two-way calling
						(deadly embrace) caused erratic behavior and allowed the caches to get
						filled with bad results. No need for that old reference test/implemeantion
						anymore anyhow. The new one has been working fine for quite a while and
						its pretty well tested adn not that complex
030305	WORKING	LGP			Oepn SPR_1325a.rtf - and do SelectAll (same crash immediately).
030305	REPORT	LGP			Open SPR_1325.rtf. Select all. Copy. Click at END of doc (select @ EOF).
		(1325)			Paste. CRASH (assert error in PartitioningTextImager::CalcSegmentSize - 
						refValue != cached value).

030305	FIXED	LGP			Fixed code in Table::DrawSegment () to pass along right rects
						(set right rect as WindowRect).
030305	REPORT	LGP			Open file SPR_1320.rtf. Shrink window so horizontal scrollbar
		(1320)			is enabled. Scroll horizontally - and note how table elements not
						moved properly. This is a recent regression (table optimizations).

030305	FIXED	LGP			Added stock Appearance and BorderStyle property support. Also,
						changed my existing HWND property to using the stock HWND property code.
030305	WORKING	LGP			I noted there is an APPEARANCE stock property which
						appears to be somewhat supported by MFC.
							Opened SRX-030-305-603-901 with bhaviks@microsoft.com (980-776-8782).
030305	REPORT	LGP		>-----Original Message-----
		(1323)			>From: Chris Spencer [mailto:chris@tufware.com.au] 
						>Sent: Monday, March 03, 2003 11:20 PM
						>To: info-led@sophists.com
						>Subject: ActiveLedIT
						....
						>Downloaded and evalled the ActiveLedit. Looks great. 
						>
						>One question- is there a style for this control to set the border as a windows
						>sunken edge. All I get is a flat control no 3D effects. Cannot see anything
						>in the help
						...
						>Chris Spencer
						>TUFware Systems
						>www.tufware.com.au

030305	FIXED	LGP			Used DevPartner Profiler tool to analyze hotspots.
							Move SpecifyTextStore () call to after we've set style/paragraph
						databases in Table::ConstructEmbeddedTableWordProcessor () so that we avoid
						construction of default partition object etc. Also fix HookParagraphDatabaseChanged
						called and WordProcessor::HookGainedNewTextStore to set the Partition from the
						ParaDB it its already set. All this makes the Table::ConstructEmbeddedTableWordProcessor ()
						much faster.
							Then fix WordProcessor::MeasureSegmentHeight () and WordProcessor::MeasureSegmentBaseLine
						to cache ParagraphInfo and not call wrappers that redundantly compute it.
030305	REPORT	LGP			Open file SPR_1319.rtf.
		(1319)			Resize the document (in LedIt where it dynamically repaints) and note how
						slow the document painting is.

030304	FIXED	LGP			Lose qCacheEMWPInCellRep code - since other changes to PM caching make
						it unneeded/unhelpful
030304	WORKING	LGP			Redo the qCacheTextMeasurementsForPM cache using the new LRUCache<>
						template. Dynamically set cache size (based on TextStore size).
030304	WORKING	LGP			In ChunkedArrayTextStore - use new LRUCache<ELEMENT> to keep track of
						CollectAllMarkersEtc... cache instead of private LRU cache implementation.
030304	WORKING	LGP			Added LRUCache<ELEMENT> template - based on old LRU cache code in
						ChunkedArrayTextStore. Also - fixed Led_SmallStackBuffer<T> to support X(X&)
						and op=() methods.
030302	WORKING	LGP			Turned on qCacheEMWPInCellRep and it was MUCH MUCH
						faster. But for a simple 10x10 cell table, the RAM usage
						shot up to 37MB. Trouble is 75 elt cache in PartitioningTextImager::MeasureTextCache.
						I tried different cache sizes:
							1	8.5MB
							5	9 MB
							75	37.1MB
							150	68.1MB
							Then I tried shutting qCacheEMWPInCellRep OFF again, and setting
						eMaxCache=1. It was reasonably fast and still had NO RAM wastage.
						I think I can PROBABLY (must test and see) lose the qCacheEMWPInCellRep
						code (and therefore not need to worry about perecting it for things
						like multiple views etc and checking for different values changing),
						and JUST re-implement the caching to be much smarter in
						qCacheTextMeasurementsForPM.
							SEE SPR#1134 for info about original qCacheTextMeasurementsForPM
						implemenation.
030228	REPORT	LGP			Very substantial performance issue drawing table cells.
		(1315)			Caching EmbeddedTableWordProcessor in the Table's CellRep
						(qCacheEMWPInCellRep) significantly alleviates this problem
						but at a HUGE and unacceptable memory cost.
							Leave in the code (qCacheEMWPInCellRep) for now - but disabled.
						I must still somehow address this. EXPLAIN MORE ABOUT PEROFMRANCE HERE:
						SIZE from PartitioningTextImager::MeasureTextCache huge (75) cache
						at least largely (see if all). Also - see about why so slow
						to SpecifyTextStore etc redundantly - why is this so big a speed win.
						When I fix that cache - is that ALL to the memory usage?
							Checkin with OFF for now (so I can work on other bugs).

030303	CHANGE	LGP			Performance tweeks (based on SPR#1315 - using Compuware DevPartner Profiler).
		(1318)			Get rid of buggy Led_Bitmap::GetBitmapDimension and instead cache the size myself.
						We were NEVER actually caching the BM for offscreen bitmaps (maybe cuz of earlier
						CreateCompatibleDIB () change I had made - but who cares - this works better and more
						reliably).

030301	CHANGE	LGP			Cleaned up project files for MSVC70(.net). Did LedIt,
		(1317)			LedTestWin32,LedLineItMFC, ActiveLedIt

030228	FIXED				Fixed the second (Row*) memory leak. Get rid of Table::Row class
						and replace it with Table::RowInfo - and make fRows a vector of
						RowInfo instead of Row*.
030228	WORKING	LGP			See SPR#1316 for new memleak detection support I've added.
030228	WORKING	LGP			Used MFC leak detector. Key was to include <afxwin.h> in several
						files (where I suspected trouble) and #define new DEBUG_NEW. This
						put the filename/line# of the offending allocation into the printout
						about the leak.
							NB: I tried using the crtdebug stuff - CRTDBG_MAP_ALLOC - and
						that didn't seem to work - probably because of a conflict with the
						MFC version. No probs - using the MFC version wasn't too much harder.
							The first memleak was that the TableIOMapper object is a returned
						allocated pointer (from WordProcessorTextIOSrcStream::GetTableAt)
						and so when GetTableAt is called (currently just from
						StyledTextIO_RTF.cpp) - we must save the pointer in an
						auto_ptr<>.
							The second one was because of the obsolete Table::Row usage. We
						allocate them (still) as pointers and stick them in fRows, but never
						delete them!
030228	REPORT	LGP			Another small memory leak. Open LedIt doc. Insert table. Quit.
		(1314)			(LedItMFC). Note 2 leaked blocks. If you repeat, and create 2 tables,
						then you get 4 leaked blocks.

030228	CHANGE	LGP			Added "DebugMemoryLeaks" targets to LedIt (MFC) and LedTestWin32
		(1316)			projects. These targets shut off qAllowBlockAllocation and set
						CRTDBG_MAP_ALLOC. That CRTDBG_MAP_ALLOC is a Win32 CRT define that
						turns on some code for runtime memory leak tracking. It also triggers
						a questionable macro of mine - CRTDBG_MAP_ALLOC_NEW and defines
						of #define new CRTDBG_MAP_ALLOC_NEW in some .cpp files where it doesn't
						create conflicts. Its the conflicts that make my define somewhat
						questionable. Its a quick and dirty, 90% solution that can help track
						down memory leaks. Don't count on it - but it could be helpful.

030228	FIXED	LGP			This was VERY painfull to fix. The key was recognizing
						that it was a recent regression. The MFC etc mem leak detectors
						were not helpful (because it wasn't memory allocated with new,
						as it turns out).
							Had to use CVS to grab/build various snapshots of old versions
						til I narrowed in on a date, and then a specific file and change.
						Turns out to have been my code for breaking draws into chunks
						for SPR#1295 on Feb 10th. Lost a ScriptStringFree call!
030228	REPORT	LGP			Memory leak. In looking closely at performance, I noticed
		(1313)			a memory leak while drawing.

030227	FIXED	LGP			Fixed except that we never supported vertical merge cells
						(new SPR#1312), and a small problem with SPR_1311e.rtf still exists
						(new SPR#1313).
030227	WORKING	LGP			Reading and writing of horizontally merged cells now mostly
						works (test a bit more - there are some problems). Also rewrote
						the layout code and now cache the cellbounds.
030226	WORKING	LGP			Got most of support for reading RTF horizontal merge code
						in place. Seems to work on a few sampel files (like
						SPR_1311c.rtf). Doesn't display perfectly - cuz I still
						need to fix the LAYOUT code to handle merged cells, and redo
						the border-drawing code to handle that as well.
030225	WORKING	LGP			Saved sample SPR_1311.rtf test document with a good example
						of a merged cell (from word XP).
030225	WORKING	LGP			Continued major cleanup of table stuff - getting back to clean
						version of tables as one single embedding.
030225	REPORT	LGP			Table TODO: MergeCell support (needed for some examples)
		(1311)

030226	FIXED	LGP			Fixed earlier today as part of work on mergecells (SPR#1311)
021121	WORKING	LGP			Created file SPR_1181.rtf to reproduce. The file was created
						by following those steps and then saving the document with a single
						empty row table. This document opens fine in WordPad and MSWord XP, but opens
						as an empty doc in LedIt. Note - this SPR is almost certainly very closely
						related to SPR#1179. It almost certainly has todo with delayed creation code or
						some RTF quirk in WP reading SinkStream code.
021121	REPORT	LGP			New Doc. Insert table. Insert a row at the beginning. Select
		(1181)			it and cut. Try to paste it someplace. NOTHING. This presents itself
						in a number of other ways as well - I believe. When you delete an
						empty row and try to UNDO. Also - with empty columns inserted with
						InsertCol function.

030226	FIXED	LGP			Fixed earlier today as part of work on mergecells (SPR#1311)
021119	REPORT	LGP			LowPri RTF Table IO bug (I think).
		(1179)			Insert a table with 2 rows and 2 cols. Insert a blank Col after col
						0. Select a row, copy, set empty sel (so inserting) and paste. Note
						how col count retained but empty col is missing. Pasting this into
						MSWord looks OK. Pasting empty col from MSWord to LedIt is OK. So - my
						guess is we generate some bad RTF that MSWord recovers from but
						we do not. Not CRITICAL to solve soon.

030226	CLOSED				Seems to have gone away due to other changes.
030201	REPORT	LGP			Load an RTF document (ActiveLedIt readme? Or ledit readme).
		(1289)			Then insert a table in the middle of a paragraph. Then delete
						row one. THen delete row two. Note how the paragraph doesn't jump
						back together again after table is gone!

030224	FIXED	LGP			Don't bother testing. Assume this is OK, and just tested when I do final
						build testing for the a4 release.
030224	WORKING	LGP			I think all fixed except NetLedIt - and still not tested on MacOS/Linux
						(though I think the right changes have been made).
030214	WORKING	LGP			LedIt MFC and LedLineIt MFC projects fixed and tested. Still todo - 
						other platform project files and testing!
030214	WORKING	LGP		<OLDCODENOTE>
							qLed_CharacterSet is now obsolete. Instead - use qSingleByteCharacters,
						qMultiByteCharacters, qWideCharacters.
							Note also that the DEFAULTS have changed. You used to default to
						qSingleByteCharacters (indirectly through its old charset define) and now
						defaults to qWideCharacters.
						</OLDCODENOTE>
							This has now been handled (using qSupportLed30CompatAPI and appropriate
						warnings are issued if thats not set but qLed_CharacterSet is).
							ONLY HANDLED SO FAR FOR WIN32 and LedIt (and then only for VC.net -
						not old .dsp files).
030214	REPORT	LGP			Get rid of lingering SJIS code - just UNICODE vs. NOT UNICODE??
		(1303)			MAYBE??? Keep multibyte stuff in for a while - look at it at least???

030224	CLOSE		LGP			Probably defer this for a week or two - giving Marc a change to help out
						if he has time. Otherwise - I'll try to get the DrawText/MeasureText code
						working with ATSUI.
							Open NEW SPR#1310 to track that work to be done, and close this to note
						already existing new target that compiles.
030224	WORKING	LGP			Got to the point where it all compiles on MacOS. Now just need to plugin
						the draw and measure calls, and we should be ready to test.
030224	WORKING	LGP			Did SPR#13-7,SPR#1308 to facilitate this portability.
030224	WORKING	LGP			Added CharacterProperties class and verison of isspace etc which
						can be used portably (across OS/Charset/Led_tChar etc). Still not 100%
						done with IMPL (for MacOS and maybe portability for TextBReak code I had
						done - but close).
030224	WORKING	LGP			Related to SPR#1303 - added target for MacOS / Carbonized LedIt for UNICODE
						and started making a few basic changes to get MacOS UNICODE target to
						compile.
030224	REPORT	LGP			Support UNICODE for MacOS. Code to support UNICODE on MacOS (requires
		(1306)			ATSUI - whcih I think comes iwht MacOS8.6 or later?)
						http://developer.apple.com/intl/atsui.html
						Looks like pretty good docs and sample code.

030224	CHANGE	LGP			Treat the _ character as part of a word. Not sure if this is always
		(1309)			best, but its definitely best in programming editors, which Led is
						often used for. I'm not sure its ever bad.

030224	FIXED	LGP			Done. I didn't performance test, but that will come in the next couple
						weeks. If it doesn't show up on performance hotspots list then - I guess
						we're OK.
030224	REPORT	LGP			Do faster (runtime) MEMOIZE version of CharacterProperties.
		(1308)			I saw this as a bottleneck before (in a rare case I worked around
						another way) but that pointed out that this COULD be a problem.
						I now call the memoized versions much more often than before (due
						to SPR#1306 and SPR#1307).
							Try something simply like breaking out the first 128 or 256 characters
						(most in practice - I suspect) into a separate branch of the iftest. This is
						a specail case of a more general optimization I could do whcih is generating
						a tree search instead of skipchain.

030224	CHANGE	LGP			Moved MEMOIZING code from TextBreaks.cpp (myisaplha etc) to
		(1307)			new CharacterProperties class. Added qCharacterPropertiesMemoized
						configvar which defaults to TRUE for UNICODE builds.
							Work done a part of SPR#1306 (CharacterProperties part).

030219	CHANGE	LGP			Start going abck to stategy where ONE CHAR (sentinal) per
		(1305)			table and no extras per row. Roughly stable working with
						that strategy now - but then lost the scrolling boundary benefit of
						the old strategy.

030214	CLOSE	LGP			DUP of SPR#1301. CLOSED but not fixed.
021022	REPORT	LGP			On Windows, CTRL-UP/CTRL-DOWN arrows should cause the window to scroll
		(1139)			up / down (at least many windows-based editors support this).

030213	FIXED	LGP			qTemplatedMemberFunctionsFailWithMFCMessageMaps to get
						MFC code compiling on MSVC6 again
030208	REPORT	LGP			LedIt (MFC) doesn't compile with MSVC60. Trouble
		(1297)			appears to be with OnMFCSDKMessageDispatcher<INT>
						template. Could probably work around it without
						too much trouble by just manually - or with the help
						of macros - defining all the helper wrappers and doing
						two versions of the Do_DECLARE define (which is currently
						barfing).

030213	FIXED	LGP			Cleanup/improve qCacheTextMeasurementsForPM/MeasureTextCache code.
						Now keep a primitive multi-element cache. This cache is crummy - and
						could be substantially improved, but wait til I profile to see how
						important that is.
							There is a GOOD CHANCE this will need to be further tweeked and improved,
						but we'll wait til we've profiled to decide for sure.
021022	NOTE					Also - as part of this - probably want a different cache architecture -
						and LRU cache, and only keep a dozen or so entries around. That should
						reduce the RAM usage of the Led WP engine, without a significant performance
						cost. Shouldn't be too hard todo right now since things much better
						modularized.
							Don't handle this til 3.1d2 - I think. There is enough (of this stuff)
						for a 3.1d1 release.
021021	WORKING				Moved date in PartitionElementCacheInfo into a shared Rep object
						so copy CTOR/op= would be MUCH faster (at the cost of extra deref in
						use). I HOPE this helps.
021020	REPORT	LGP			SPEEDUP code relating to new PartitionElementCacheInfo and new
		(1134)			PMInfoCacheMgr. Based on SPR#1128.

030213	FIXED	LGP			Really fixed as part of SPR#1134.
021022	NOTE					Handle after 3.1d1 release. Its in decent shape now.
021021	WORKING				Another checkin of more changes.
021021	WORKING				Did a large cleanup - but still ALOT to go. Deleted most of the old
						code.
021020	REPORT	LGP			Cleanup code relating to new PartitionElementCacheInfo and new
		(1133)			PMInfoCacheMgr. Based on SPR#1128.

030213	FIXED	LGP			Below changes, plus fixing SPR#1134 (qCacheTextMeasurementsForPM/MeasureTextCache)
						Open SPR#1300 to cover a future possible optimization.
030213	WORKING	LGP			Another major source of slowness is needlessly recomputing the measurements
						for the text. This can easily be better cached, and is already covered in
						SPR#1133 and SPR#1134. Look into addressing those now and see
						what the performance looks like.
030213	WORKING	LGP			My myGetInitialUNISCRIBEDir hack code to find the initial segment
						direction code could be a bit slow on very large strings. Its not important
						to do if there is nothing clear about the beginning of the string,
						so just cut it off at some arbitrary length (100). That helped a bit.
030210	WORKING	LGP			Added qTryToOptimizeLongUNISCRIBEScriptOutCalls to try to ameliorate
						the speed problem on long lines - but needs a bit more testing.
030210	WORKING	LGP			Added kMaxUNISCRIBECharacters and set to 30000, so we don't
						make too big a call to UNISCRIBE. Its STILL VERY SLOW when we
						et that many characters. See if I can optimize THAT. But at least
						no invalid HRESULT or buggy display
030203	NOTE		LGP			Sent email to Greg Blinkard - as continuation of my previous
						open query where he recomending using UNISCRIBE.
030203	REPORT	LGP			Open file SPR_1295.txt. This file has a run of about 65300 NUL
		(1295)			characters in a row. You get VERY bad behavior in a release
						build and under DEBUG builds - you get assert error in
						Led_Tablet_::MeasureText's call to ScriptStringAnalyse (under WinXP).
						Error return is E_INVALIDARG.

030212	FIXED	LGP			I didn't see any of the same assertion errors, so it must have been
						some quirk of whatever build happened to be on my machine. BUT - I did
						find some bugs with respect to my new READONLY handling code. I found
						I had to add a fe more InteractiveModeUpdater objects around, and similar
						fixes (fix insert table to call SimpleUpdater earlier).
030212	REPORT	LGP			Test Nautikos site with AL - I was seeing some assert erorrs -
		(1299)			maybe cuz old version?

030212	CLOSE				DUP of 1298 (ignore NetLedIt part).
011126	DEFER				No time for 3.0. MEDIUM PRI for 3.1.
011126	REPORT	LGP			Add 'show secondary hilight' property (option) to ActiveLedIt! (& NetLedIt).
		(1078)

030212	FIXED	LGP			DONE.
030212	REPORT	LGP			Use Secondary Hilight in ActiveLedit (by default) with
		(1298)			OLE AUT flag to control it.

030212	FIXED				I've now tested a bit - hopefully enough. Fixed small bug I had
						introduced into Led_GetDIBPalletByteCount(). Code now pretty neat and clear.
						Only will get TRUE testing once this has been released - but seems OK for now.
030211	WORKING				Spent last couple days doing lots of different attempts
						at getting this to perform adequately. Finally I had to use
						a DIBSECTION for the offscreenBitmap class, together with
						some other hacks, and finally that apepars to have been enough.
						Still more code cleanup and testing todo.
030307	WORKING				I tried DoRecolor_TryDirectDIBSection and DoRecolor_TryDIBits
						and neither worked acceptably.
030206	WORKING				In Led_Tablet_::HilightArea_SolidHelper: test of using B&W for
						hilight color - and if so - use OLD DSTINVERT code - since that is much
						faster (at least on some systems) - for now - til I can further speed
						tweek. That way - people who want the old behavior can easily get it ().
030206	WORKING				More cleanups to RecolorHelper code. Now we actually properly
						compute the mapping table used for qUseMyOwnMappingCodeCuzWin32CLUTChangeTooSlow,
						and have generally cleaned up the code. Also make sure the CLUT we generate for
						our DIBSECTION has full 256 colors (speeds things up by 33% for unknown reasons).
						And make sure that CLUT has the hilight color (etc) in it.
030205	WORKING				Fixed ::GetSysColor() args - SB COLOR_HILIGHTTEXT instead of COLOR_CAPTION_TEXT
						etc. Also - get rid of PER-Led_Tablet instance of RecolorHelper. Instead keep
						one global instance. Also added preliminary version (still disabled)
						of qUseMyOwnMappingCodeCuzWin32CLUTChangeTooSlow code.
030205	WORKING				Cleaned up code and packaged recoloring code in RecolorHelper class to allow
						some caching and modularizing. Still about 25x too slow (about 6 seconds to repaint
						a large screen). The performance bug is narrowed down to calling: SetDIBColorTable
						followed by a BITBLIT. I surmise this is because of constructing a new inverse
						color mapping table (needed todo the bitblit).
							I considered creating my own inverse table (did it for Stroika - not too hard
						to make quick) - but I think I can do even BETTER. Just create a mapping of PIXEL
						values (clut-based so the mapping is only a 256 entry table). Then avoid all the
						CLUT manipulations - and just walk the bits in the DIBSECTION - and munge them.
						THis should be VERY fast. The only complex part is computing the mapping table -
						but that can be done essentailly ONCE per run of the application.						
030204	WORKING				I THOUGHT this was fixed - but when I tested on a large page of text - I found
						it was MUCH too slow. Look into speeding it up!
030204	WORKING				Lots of code added to Tablet_::HilightArea_SolidHelper for Windows - to make
						this work. It now seems to work fairly well, and I won't know about performance etc
						til I run performance testings - but I suspect its not an issue.
030204	WORKING	LGP			OK. Very complicated. Sigh. But - he gave me a workable solution. I create
						an 8-bit dib section and copy to that. I can then fiddle the CLUT of that dib section,
						and then copy the DIB-section BACK to the original HDC.
030204	WORKING	LGP			SRX-030204601299 opened with MSFT to address this problem.
							My PATINVERT approach ALMOST works: it maps the background to the hilightColor,
						but the black text maps to some random garbage color. That doesn't look good. Thats
						why I opened a question with MSFT.
030204	WORKING	LGP			Change code in Led_Tablet_::HilightArea_SolidHelper from:
								BitBlt (hilightArea.left, hilightArea.top, hilightArea.GetWidth (), hilightArea.GetHeight (),
									this, hilightArea.left, hilightArea.top, DSTINVERT
								);
							to:
								Led_Color			useColor	=	Led_Color::kWhite - hilightBackColor;
								Led_Win_Obj_Selector	pen (this, ::GetStockObject (NULL_PEN));
								Led_Brush			backgroundBrush (useColor.GetOSRep ());
								Led_Win_Obj_Selector	brush (this, backgroundBrush);
								BitBlt (hilightArea.left, hilightArea.top, hilightArea.GetWidth (), hilightArea.GetHeight (),
										this, hilightArea.left, hilightArea.top, PATINVERT
									);
030130	REPORT	LGP			Should respect the selected text color (where to get it?)
		(1271)			in LedDialogText which is also used in the builtin edit text.
						SB easy?

030203	FIXED	LGP			Slight fixup to StyledTextImager::DrawSegment so it passes along
						LOGICAL (not visual) coords to DrawSegment methods it calls.
030201	REPORT	LGP			Fix remaining BIDI problems with StyledTextImager::DrawSegment
		(1292)

030203	FIXED	LGP			Added qLedCheckCompilerFlagsConsistency mechanism. Not great - and could
						be used for more flags - but this should help a little.
030202	REPORT	STERL		Sterl ran into a bug which turned out to be caused by
		(1291)			inconsistent CPP flag settings across modules. While this is
						difficult to completely avoid the possability of, we can take some
						small steps to make it somewhat less likely.

030201	FIXED	LGP			I have investigated this issue. This is not REALLY a Led bug –
						but I’ve addressed it anyhow.
							I would like to know where you got that RTF file. What program
						wrote it out? It is INVALID RTF.
							The way colors are represented in RTF is that you have a
						“color table”. This means that colors aren’t specified directly
						in the RTF by RGB value, but the RGB value is specified in that table.
						hen colors are referred to by index into the table. This color table
						maybe optional – but its required if you are going to use it later
						in the document.
							The document you sent has NO color table, and yet refers to
						colors by index into that table (\cf0).
							I’ve addressed the problem by just treating invalid color
						table references as referring to the color black.
030201	NOTE		LGP			Added file SPR_1283.rtf to reproduce the problem.
030128	REPORT	dhenders>From: dhenderson
		(1283)			>Sent: Tuesday, January 28, 2003 4:34 PM
						>To: Lewis G. Pringle, Jr.
						>Subject: New Support Question
						>
						>Amazing in two days I have 2 questions for you. We have been using the
						>product fine for a year and now in 2 days I have two problems.
						> 
						>Here is another one for you.
						> 
						>On the attached file ss2.doc the rich text does not display.
						>Yet the rich text is shown in the file a.rtf 

030201	CLOSED	LGP			Not really a bug.
							The problem is that you have chosen a NON-TRUETYPE font, and one
						with few smaller font sizes defined for it (I can explain this further
						if you don’t know what I mean).
							You can reproduce this exact same behavior in MS Word and MS
						WordPad. The only difference there is that ActiveLedIt makes the
						subscript/superscript fonts slightly smaller than MS Word/WordPad do.
						This means that to reproduce the bug in MS Word and WordPad – you must
						set the fontsize of the offending text to 10 point or less (in the
						broken file case you sent me – it was 12 point).
							If you set the point size smaller – you will see the same bug
						for the same reasons in MS Word and MS Wordpad. If you set the point
						size LARGER – you will see the problem go away with ActiveLedIt.
						If you select a font with smaller point sizes defined, or a truetype
						font – you will also see the problem go away.
030201	WORKING	LGP			Saved sample file as SPR_1282.rtf. Problem occurs using "MS Sans Serif"
						12 point font.
030127	REPORT	dhenders	>From: dhenderson@odysseylearn.com [mailto:dhenderson@odysseylearn.com] 
		(1282)			>Sent: Monday, January 27, 2003 2:58 PM
						>To: info-led@sophists.com
						>Subject: Support Question
						>
						>Hi we are using ActiveLed 3.0b9, and have the following problem.
						>In the attached word file (act.rtf) - the rich text displays properly - 
						>It should be 10 superscript 6. 
						>When we run it through ActiveLed we get the result shown on the attached screen shot (ss.doc) 
						>The problem is that the 6 is not visible. 
						>If at all possible we would prefer not to update objects but will if needed. 
						>Can you provide us with some assistance with this?
						>
						>Thanks
						>Derek Henderson

030201	FIXED	LGP			Just updated the asserts at the end of CodePageConverter::MapFromUNICODE
						to not yell if OUR table produced a '?' character (even if the Win32 one
						did not).
							I think MSFT improved their missing character handling. Thats not a bad
						thing, but I believe its unimporant, and probably MORE important that I run
						the same across platforms. Use Win32_CodePageConverter directly if that
						is REALLY what you want!
030131	REPORT	LGP			Use Greek keyboard with LedIt. Start typing 'abc'. Get an assert in
		(1277)			CodePageConverter::MapFromUNICODE () for some characters. Minor, but
						annoying. Consider some change here. Maybe just always use Win32
						converter on windows and use the table drive ones elsewhere?

030201	FIXED	LGP			Added TextImager::GetDefaultSelectionFont () and overrode in
						StandardStyledTextImager, and used that in WM_GETFONT Led_Win32 callback.
030131	WORKING	LGP			Seems to work fine on LogoTrans - even most recent LogoTransDotNet.
						My guess is it has todo with the 'set-default-font' stuff. See what
						our builtin IME code is doing. Calling WM_GETFONT maybe? That would return
						the DEFAULT font instead of the cur selection font. Maybe THAT needs
						to get fixed??? Add new TextImager::GetSelectionFont? Or something like that
						(careful of well-defined semantics) and then change WM_GETFONT to
						return that??? MAYBE - READ DOCS ON WM_GETFONT. ANyhow - IME code could
						directly call the new API...
030131	REPORT	LGP			Code to set fontsize of IME doeesn't appear to be working
		(1279)			properly (at least not in LedIt - test if it works in
						LogoTrans)

030201	FIXED	LGP			Two bugs. One is that since I used StringScriptAnalyze
						for the ENTIRE string, its a good idea to use it to IMAGE the
						string regardless of whether or not its needed for RTL reasons.
							Second (and this maybe all that was REALLY wrong) is that
						I must use SSA_FALLBACK to get the fallback fonts to be used.
						I think what this means is that if you draw with a font
						where the glyphs are not present - instead of boxes - you get
						the glyphs from some other font. On WinXP - this was the default
						(and I think on Win2k as well). But since I was measuring the
						text with this flag OFF, and drawing the text with the default
						display code - I got different answers. Maybe. Maybe they just
						sometimes for other reasons give different asnwers.
							Anyhow - turning on SSA_FALLBACK on all ScriptStringAnalyze
						calls, plus using UNISCRIBE for ALL drawtext cases (not just RTL)
						seems to have fixed all these problems.
030131	NOTE		LGP			Hopefully all I need to do is make sure I use UNISCRIBE for LTR text
						as well as RTL text segments (since I'm using UNISCRIBE to do the measurements).
030131	REPORT	LGP			Some bug with Japanese text editing (maybe related to old UNISCRIBE WORK
		(1276)			I did???). See file SPR_1276.rtf.

030131	FIXED	LGP			Spunoff the popup menu into a new SPR (1281). The rest is
						now FIXED.
030131	WORKING	LGP			Working on adding TextInteractorCommonCommandHelper<> template
						support to it. First added SimpleCommandUpdater<> helper support.
030130	REPORT	LGP			Need a bunch of commands supported in LedDialogText. AT LEAST
		(1270)			support cmd-key equiv for Cut/Copy/Paste. Nice todo undo as well.
						Really nice to add a popup menu like the builtin one we're replacing
						has).

030131	FIXED	LGP			Added InteractiveUpdadeMode and InteractiveModeUpdater so things
						like AboutToUpdate() can tell if its a USER change or a program change
						to text its about to make (and so whether or not to allow/disallow).
030130	REPORT	STERL		When you call GetTextStore ().Replace () on text with
		(1278)			a READONLY style (Led_Win32) it raises exceptions in AboutToChange
						(as if the USER was making a change). This can be worked around
						by temporarily disabling the RO style - but that is awkward. What
						would be nice is if there was some way to tell and edit was a
						USER-EDIT as opposed to a program-generated one, and then have the RO
						checking code in Led_WIN32 check that flag.

030130	FIXED	LGP			get rid of fKeyboardInputCodePage/WM_INPUTLANGCHANGE/OnInputLangChange_Msg and
						just call Win32PrimaryLangIDToCodePage (LOWORD (::GetKeyboardLayout (NULL)))
						for each character a user types
030130	NOTE		LGP			Closely related to SPR#1273 - and sb easy to fix. Just don't bother
						with OnLangChange event, and always use the GetKeyboardLayout () call.
030130	REPORT	LGP			Open a window and set HEBREW keyboard. Open find dialog. Set keyboard
		(1274)			to ARABIC. Type a few arabic characters. Dismiss dialog and note that
						we have ARABIC keyboard selected but the cached code page is for HEBREW.

030130	FIXED	LGP			Added Led_MFC_Helper<MFC_BASE_CLASS,BASE_INTERACTOR>::ReplaceWindow
						and
						<OLDCODENOTE>
							Led_MFC_Helper<MFC_BASE_CLASS,BASE_INTERACTOR>::SubclassWindow is now
						obsolete. Call ReplaceWindow instead.
						</OLDCODENOTE>
030130	REPORT	LGP			Led_MFC:::SUBCLASSWINDOW should be marked BACKWARD COMPAT -
		(1275)			and maybe do wrappers (CWND) or just get rid of it cuz users can
						easily use/inherit the LED_WIN32 versions???
						MAYBE NOT (cuz of how windows crated with WIN32 vs MFC).
						Maybe all I can really do is make the NAMES more sensible
						(replace vs. subclass window)

030130	FIXED	LGP			Though their remain a few small issues (track in sprs numbered below)
						we can basically close this as complete.
030130	NOTE		LGP			Opened SPR#1270 and SPR#1271 to track minor issues with the new
						LedDialogWidget.
030130	WORKING	LGP			Changed font (SPR#1272) used in dialog so more UNICODE characers
						display properly (e.g. greek chars on US WinXP).
030130	WORKING	LGP			Clarified the docs on TextInteractor::OnBadUserInput so its clear
						it CAN either throw or not. Then override it in LedDialogWidget
						to NOT throw (to avoid throwing out of dialogs).
030130	NOTE		LGP			I tested LedDialogWidget inside of an MFC window (using SubclassWindow
						and ReplaceWindow) and it appeared to work just fine.
030130	WORKING	LGP		<OLDCODENOTE>
							Will have to now include SimpleTextStore.cpp,
						SimpleTextImager.cpp and SimpleTextInteractor.cpp in programs that
						didn't require them before (WINDOWS ONLY).
						</OLDCODENOTE>
030130	WORKING	LGP			Added qSupportLedDialogWidget flag to control if this is on or not
						since it requires extra modules to be included (SimpleTextStore and
						SimpleTextInteractor).
030129	WORKING	LGP			Working on LedDialogWidget in Led_STDDialogs - adding UNICODE FIND TEXT
						to FIND dialog (based on Sterls question.
030129	REPORT	STERL		Really LGP/Sterl. Sterl had some trouble with a Led-based window inside
		(1266)			of a dialog, and I decided this would be a good time to produce a GOOD
						working example of how to do that. Consider doing it BOTH for MFC and for
						plain Win32?

030130	CHANGE	LGP			Added Win32PrimaryLangIDToCodePage routine and set Led_Win32_Helper<>'s
		(1273)			fKeyboardInputCodePage by default to the CP from that routine/GetKeyboardLayout.
						Need for SPR#1266- when you pop up a dialog with some funny keyboard selected
						(e.g. greek) and a Led widget. Otherwise the Led code defaults to CP_ACP, until
						you do ANOTHER switch.

030130	CHANGE	LGP			Changed font used in all the windows dialogs. The old one
		(1272)			(on WinXP) didn't have many UNICODE characters, so when I used
						my LedTextWidget (SPR#1266) - it chose a bad font that didnt display
						things well. So - pick this new font based on what MS VS .NET dialog
						editor generates by default.
							WAS FONT 8, "MS Sans Serif"
							NOW	FONT 8, "MS Shell Dlg"

030130	FIXED	LGP			Added Led_Win32_SimpleWndProc_HelperWithSDKMessages<> to mix
						together Led_Win32_SimpleWndProc_Helper<BASE_INTERACTOR> and
						Led_Win32_Win32SDKMessageMimicHelper<BASECLASS>. Then used it
						in LedDialogWidget (for find dialog etc).
							Now it looks pretty close to the default windows implementation
						(except for the selection color!!!)???
030130	WORKING	LGP			95% done. Added Led_Win32_Win32SDKMessageMimicHelper<>. Rewrote
						Led_MFC_OptionalWin32SDKMessageMimicHelper<> to use it (instead of
						having its own copy of the same code). Came up with clever trick
						(member template with int param) to get all these functions
						hooked into the MFC message map system (really a workaroudn for the
						CRAZY limitaiotn that the MFC message map system doesn't let you
						define a function that takes a MESSAGE# and the LPARAM/WPARAM).
							Fixed up a couple other MFC message map delcarations at the same
						time.
030130	REPORT	LGP			Find  a way to move Led_MFC_OptionalWin32SDKMessageMimicHelper
		(1269)			 into Led_WIN32 - since it appears just as useful there!
							THIS IS NEEDED TO FIX 90% of the remaining bugs with
						the SPR#1266 (LedDialogText/Find dialog) code (EM_SETSEL, PROBABLY
						WM_FONT messages etc).

030130	CHANGE	LGP			Added Led_Win32<>::SubclassWindow and ReplaceWindow functions to make
		(1268)			'subclassing' a dialog item window in a dialog MUCH easier. Related to
						SPR#1267.

031230	CHANGE	LGP			Change how I handle WM_UNICHAR messag - so the virtual function
		(1267)			is defined REGARDLESS of the setting of the _WIN32_WINNT setting. This
						was causing TOO MUCH TROUBLE as its too easy with MSVC to get conflicting
						settings across projects within a solution!

030129	FIXED	LGP			I replaced 'class' with 'typename'. I looked into supporting
						MWERKS's 'new template processor'. It looks like a serious problem.
						I'll have to understand better what they are thinking. It
						looks like it barfs on any code that USES types (method calls or
						enums etc) from base classes which are templates. I'm not sure
						what the workaround for that is supposed to be?	
							I'm hoping they just got this all wrong, and I can just wait
						for the next CW release to try this again.
030126	REPORT	LGP			See if all compilers support replacing 'class' with 'typename'
		(1265)			in template declarations. If so - convert my code. Also - then
						look at what is needed	to get compiling with new MWERKS template
						processor (optional)

030129	FIXED	LGP			There was another problem as well. He wasn't calling
						AboutToUpdate/DidUpdate when he moved these markers that could
						affect the display. Fixing THIS also finally fixed the problem.
030128	WORKING	LGP			There were two problems. The first is that you weren't
						applying the font selection ALL the way to the end of the
						buffer (to the last funny char beyond the end of the buffer).
						You need to hit that guy so that when all the REAL text is deleted,
						that style info record is still around.
							Also - you cannot JUST use SetStyleInfo () - as I had once
						suggested - because you use TrivialFontSpecStyleMarker subclasses
						which apply small INCREMENTAL font changes to the font
						gotten by IMAGER::GetDefaultFont (). So - you need to set
						both the StandardStyleTextImager fonts runs with SetStyleInfo
						and the TextImager default font with SetDefaultFont.
						<OLDCODENOTE>
							There WAS a great deal of confusion in Led about SetDefaultFont
						vs. InteractiveSetFont(). I've now ELIMINATED that confusion - but
						at the cost of some possible backward compatability problems.
							StandardStyledTextInteractor::InteractiveSetFont now does exactly
						what StandardStyledTextInteractor::SetDefaultFont USED to do,
						and StandardStyledTextInteractor::SetDefaultFont no longer exists
						(just falls back to TextImager version that just sets the field
						for the TextImager itself).
						</OLDCODENOTE>
030128	REPORT	STERL		Funny stuff is required in LedEditText::UpdateFont
		(1264)			and you have to call it every time that ALL the text is
						cleared.

030128	CHANGE	LGP			Change the default window-margins (fDefaultWindowMargins) for
		(1263)			Led_Win32 to values that generally look more appealing (esp for
						using the control in text window with a border.

030128	CHANGE	LGP			Based on looking at Sterl's code using Led in LogoTransDotNet,
		(1262)			I decided I should include DoDeclare_Led_MFC_Helper_MessageMap
						etc macro defines in Led_MFC.cpp. This way - he doesn't have to,
						and they seem to be stripped by the linker if unused.


------------------- Released 3.1a3 2003-01-23 - Below ------------------------------

030123	CHANGE	LGP			Got compiling again with BCC 5.5

030123	FIXED	LGP			Decided NOT to do the OLE AUT API right now - as I don't already
						have any similar PAIs for paragraph properties (except justification).
							Instead opened new SPR#1261 to track a more ambitious apporach
						to solving this problem.
030123	WORKING	LGP			Added dialogs to ActiveLedIt.
030121	WORKING	LGP			Did very good pass on MacOS - test a bit more - biut should be done.
030121	WORKING	LGP			Preliminary try for MacOS.
030121	WORKING	LGP			Checked in first cut at dialog (works on Win32) for Win32. Still
						need to write for MacOS. Still also must add to ActiveLedIt (and AL AUTOMATION).
030120	WORKING	LGP			Got prelim version of the Indents dialog working in LedIt (WINONLY),
						but still working on moving that code to LedStdDialogs. At the same
						time - move MORE of the dialogs from LedIt/LedItView.cpp into
						LedStdDialogs and make sure they are used from the various
						places that maybe hardwiring the dialogs.
							Still todo the MacOS version of the dialog. (Leave XWin for
						later - LOWPRI???). 
021202	REPORT	JeffJ	>Jeff Johnson [jefjohn@mail.marclink.com]
		(1186)			>	Add Left/Right/FirstIndent text fields to the Paragraph
						>Info dialog box in LedIt/ActiveLedIt etc. AND - add similar
						>"Sel" properties to the OLE Automation API.

030123	CHANGE	LGP			Fixed a few more cases of dialogs (e.g. find dialog)
		(1260)			in ActiveLedIt so they don't come up if demo has
						expired

030123	FIXED	LGP			Revised the Windows dialogs as well. They now look pretty good.
030121	WORKING	LGP			Did a pass on MacOS - and now all MacOS dialogs look pretty good
						(except Mac about box - see SPR#1258
030121	WORKING	LGP			Cleaned up Win32 Find and Paragraph Spacing dialogs.
030120	REPORT	LGP			Make dialogs for things like setting font/paragraph info MUCH
		(1250)			prettier looking. They currently look shoddy, and unprofessional.

030122	FIXED	LGP			Done and (at least preliminarily tested).
030121	WORKING	LGP			Did first cut checking of this - seems to be working on Windows. Test/Fix
						(esp the new popup menu code) on Mac.
030121	REPORT	LGP			Fix "Other Size" and Paragraph Spacing dialogs to use LedStdDialog
		(1256)			code so they work on MacOS (right now disabled in LedIt) - and so
						common code. ALso want the	cleaned up dialogs I've done (SPR#1250)
						to be inherited on apps other than just LedIt.

030122	FIXED	LGP			Also wrapped calsl to Led_URLManger::Get ().Open () with try/catch from
						about box so they don't throw out of about box and mess things up (MacOSX).
030122	WORKING	LGP			Added qSDKHasInternetConfig for MWERKS CW8 (could be around earlier
						too). And turn qUseInternetConfig back on for CARBON. qSDKHasInternetConfig
						is there cuz IC is now builtin to the MacOS SDK.
030122	REPORT	LGP			Error in processing 'goto URL' command from about box in LedIt
		(1257)			on MacOS.

030122	CHANGE	LGP			Cleanup of LedIt.mcp project file. Re-order link orders, and get rid of
		(1259)			carbon stuff from non carbon targets, and non-carbob stuff from carbon targets.
						Get rid of IC lib (obsolete cuz of qSDKHasInternetConfig).

030121	CHANGE	LGP			Added support to Led_StdDialogHelper to make it easier to share code
		(1255)			for dialogs across platforms. Command accessors like GetItemText()
						etc...

030120	CHANGE	LGP			Lots of changes to support MWERKS CWPro 8 (.3). Just little tweeks to LedConfig.h
		(1251)			and a few other small things, plus updated lots of .mcp files. Tested cross-compiler
						from Mac to Win32 for LedTestWin32 and LedLineItMFC (there isn't one yet for LedIt).
							Also added 'carb' resource to LedIt/LedLineItPP so they would run natively on
						OS X.

030117	FIXED				Made a few small chages to GCC-related bug defines for this version of
						GCC on MacOS.
030117	REPORT			> -----Original Message-----
		(1248)			> From: Derek Shaw [mailto:derek.shaw@ingeniux.com]
						> Sent: Thursday, January 16, 2003 4:45 PM
						> To: Lewis G. Pringle, Jr.
						> Subject: Re: Led class lib question...
						> 
						> Here is a copy of my LedConfig.h file. On top of the changes here I remove
						> that one routine I mentioned earlier. Unfortunately I was not able to
						> build
						> with GCC 2.95 as there are issues with using overloaded static methods as
						> pointers... I am going to wait for the 3.2 release to see if that fixes
						> the
						> issues with wstring usage in this one routine...

030117	CHANGE	LGP			LOSE FRIBIDI FROM LEDLINEITMFC
		(1247)

030117	CHANGE	LGP			Got everything compilign with CW8 Pro (Metrowerks CodeWarrior)
		(1246)

030117	FIXED	LGP			Updated the watermark to display in red and say expired when the
						demo has expired. Also - now generate alerts and beeps etc in alot more
						cases when we have expired.
030115	NOTE		LGP			Should have menu item in ActiveLedIt DEMO version to go-buy!
						Also - many of those methods should put up DIALOG (using same timeout count
						stuff). And many menu commands invoked should bring up the same dialog.
030115	WORKING	LGP			Most OLE AUT methods (to set things) now just RETURN instead of
						having their documented behavior, except that they now also call Led_BeepNotify
						as well.
030115	REPORT	LGP			DISABLE OLE AUTOMATION AFTER DEMO EXPIRES FOR ACTIVELEDIT.
		(1241)

030117	FIXED				I asked feedback from Gyula and he said the WM_UNICHAR message
						works fine with his testing. It's just that it doesn't solve the problem
						of these extended characters that don't appear in any particular code page.
							There is apparently ALMOST NOTHING that can be done (since using
						a UNICODE window wouldn't work with MFC unless I used the UNICODE build
						of MFC in which case I wouldn't work on Win9x).
							So - just close this. I opened a NEW SPR - #1242 - to track the issue
						of rewriting LedIt (and ActiveLedIt etc) using ATL (since then I can mix UNICODE
						with non-UNICODE windows - I THINK!!!
030116	NOTE					First, the WM_UNICHAR message does not get sent by Win XP.
						> -----Original Message-----
						> From: Alice Gu [mailto:alicegu@microsoft.com]
						> Sent: Wednesday, January 15, 2003 5:55 PM
						> To: lewis@sophists.com
						> Subject: Email for Case SRX030114603191
						>
						...
						> 
						> It was my pleasure speaking with you on the phone yesterday!  Here is
						> some answers regarding WM_UNICHAR as promised:
						> 
						> This turns out to be a documentation bug.  WM_UNICHAR is not being
						> documented correctly in the SDK docs.  WM_UNICHAR is not a message that
						> is generated by the OS, and sent to your edit control.  It is created so
						> that your app can choose to handle it IN THE CASE THAT IT WAS GENERATED
						> BY OTHER PROGRAMS, such as MS Office.  Thank you for reporting this bug!
						> The product group is going to correct the documentation.
						> 
						> The two characters
						> 1.  Greek small letter Alpha with psili has Unicode value U+1F00,
						> 2.  Greek small letter Omega with Dasia and Perispomeni has Unicode
						> value of 1F67
						> 
						> are both in the Unicode 3.0 standard's Greek Extended range.  You can
						> see them better in this document:
						> http://www.unicode.org/charts/PDF/U1F00.pdf
						> 
						> I have Arial Unicode MS font from MS Office 2000 ( this is the font that
						> has glyph for all charcters in Unicode), and it was able to display
						> these characters.
						> 
						> The problems with these characters is that they don't have ANSI
						> counterparts -- they only exist in the Unicode codepage.  They don't
						> exist in ANSI codepage for Greek( 1253).  I believe that's why you are
						> having problems with it.  You really need to have a Unicode Window in
						> order to receive these characters from WM_CHAR.  Of course, I don't know
						> exactly how you currently get the Unicode characters, so I could be
						> wrong.
						> 
						> I've spoken with the product group on this and the recommendation is to
						> have a Win9x version of the library that uses ANSI wndProc and then a NT
						> version of the library that uses Unicode/wide version of the WndProc.
						> 
						> Please let me know if you have any questions regarding this specific
						> issue.  I am here to help.
						> 
						> Sincerely,
						> 
						> Alice Gu
						> MS Developer Support
						> alicegu@Microsoft.com
						> (425)704-5741
						>
030115	WORKING	LGP			Checked in a preliminary version (never seems to get called) of
						WM_UNICHAR support.
030114	WORKING	LGP			I implemented what I thought was correct, but never seemed to get
						WM_UNICHAR messages. I opened a trouble ticket with MSFT to trace down
						this issue (and have searched alot on the net).
							MSFT trouble ticket # SRX-030-114-603-191.
							Alice Gu
							425-704-5741
030113	NOTE				>My Esperanto keyboard layout for Keyman only works with apps that
						>support WM_UNICHAR so I am happy to hear that you are considering adding
						>it to LedIt.
030113	NOTE				>I forgot to write that you need to select a font that has Greek
						>Extended characters, e.g. Palatino Linotype.
030113	NOTE				> You are using the right input locale but the wrong keyboard layout. 
						> Right-click on the language bar and select Settings (or whatever it is 
						> in English).  Highlight Greek and click on the Add button.  Leave the 
						> input locale at Greek but change the keyboard layout to "Greek 
						> Polytonic".  Click OK.  Now you have two keyboard layouts associated 
						> with Greek: "Greek" and "Greek Polytonic".  You may remove "Greek" but 
						> do not remove "Greek Polytonic".  If you keep both then you need to 
						> click on the Language Bar... button and check "Show additional 
						> Language Bar icons in the Notification area".  Click OK as many times 
						> as you are prompted to.
						>
						> If you have only kept Greek Polytonic then it is enough to switch to 
						> Greek.  If you have kept both Greek and Greek Polytonic then first you 
						> need to select Greek on the Language Bar and then select Greek 
						> Polytonic by clicking on the keyboard icon.
						>
						> This is how you can type Greek Extended characters with the Greek 
						> Polytonic keyboard layout:
						>
						> Type ' then a for alpha psili.
						> Type + then v for omega dasia perispomeni
						>
						> Visit http://www.microsoft.com/globaldev/keyboards/keyboards.asp
						> for more info.
030113	REPORT	Gyula	>From: "Zsigri Gyula" <zsigri@hung.u-szeged.hu>
		(1238)			>To: "Lewis G. Pringle, Jr." <lewis@sophists.com>
						>Cc: <glenn@lec.com>
						>Sent: Monday, January 13, 2003 6:41 PM
						>Subject: Re: Bidirectional editing and Led
						>
						>Yes, the last two versions are fine except that I have
						>found a bug running them under Hungarian Windows XP Pro SP1.
						>I cannot type characters that are not found in Microsoft's
						>codepages.  Greek ἀ (alpha psili) or ὧ (omega dasia perispomeni)
						>can be typed with the Greek Polytonic keyboard layout in WordPad,
						>Word, or Outlook Express but not in LedIt.  You can paste them
						>into LedIt, though.

030116	FIXED	LGP			Fix bug where from could be > to, causing to-from compiutation to be
						negative (very large unsgined) and usual out of RAM error
030116	REPORT	LGP			Open file SPR_1244 in LedLineItMFC. Make sure syntax coloring is on.
		(1244)			Select ALL, and then start hitting the TAB key (or SHIFT-TAB). ALERT.
						Exception thrown from TableDrivenKeywordSyntaxAnalyzer::AddMarkers ()
						about out of memory - cuz of invalid range causing VERY LARGE buffer.
							I had noticed a sporadic case of exceptions being thrown, but
						had never been able to reproduce it or track it down. This may have finally
						been it?

030116	CHANGE	LGP			Was getting some assert in LedLineIt due to recent hilight changes.
		(1243)			Add asserts to TextImager::GetRowHilightRects/TextImager::GetSelectionWindowRegion
						to assure dealing with valid RECTS. And- fix GetRowHilightRects for case where
						the row extends PAST the end of the windowRect - take the MAX so we get a valid
						rowRect. Also - dont add EMPTY rowRects to the hilgihtRect list.

030115	CLOSE	LGP			I looked around the net and could find now. Too bad I didn't take better
						notes abot this. I tried MANY differnt apps - like filZip etc, and none seemed
						to do significantly better.
							Oh well - CLOSE it - cuz I cannot do anything about it
						now.
030115	REPORT	LGP			<REALLY FROM MUCH EARLIER>
						Look into tools to build smaller (more compact) .cab files. I saw some tool
						(someone told me about	it a while ago) that does better compression.

030115	FIXED	LGP			Added OLE Automation for this option.
030115	WORKING	LGP			Added WordProcessor::GetSmartQuoteMode/SetSmartQuoteMode and implemented
						the functionality in WordProcessor::OnTypedNormalCharacter. Still todo is
						ActiveLedIt API to turn on/off.c
030103	REPORT	Vikas		<Phone request from Srivastav, Vikas [Vikas.Srivastav@transamerica.com]>
		(1221)			Add smart double-quote generation. When a user types a quote
						character, (OPTIONALLY) generate a smart open or smart close quote.

030115	FIXED	LGP				The trouble was that he didn't have OLEACC.DLL installed on
							his Win98 system, and MFC 7.0 added a dependency on OLEACC.DLL.
								I've worked around this by providing friendly stubs
							that don't REALLY require that DLL ( see qProvideLedStubsForOLEACCDLL ).
030114	REPORT	Vikas		>From: Srivastav, Vikas [mailto:Vikas.Srivastav@transamerica.com] 
		(1239)				>Sent: Tuesday, January 14, 2003 7:00 PM
							>To: 'Lewis G. Pringle, Jr.'
							>Subject: RE: Thank you for your purchase
							>
							>Hi Lewis,
							>
							>Just a reminder of the latest version causing a problem on Win 98 ...

030113	FIXED				Rewrote for BIDI TextImager::GetTextWindowBoundingRect ().
030113	WORKING				Try file SPR_1237a.rtf and follow instructions inside.
030113	WORKING				Tricky part of TextImager::GetTextWindowBoundingRect:
						 Trouble is we could have something like:
						 		1 2 7 8 3 4 5 6 9
						 and if I select from 6 to 9, I'll get just the right side of the row, and miss the
						 characters from 7-8.
						 Really I want all the way from the LHS of 7 to the RHS of 9 in this case.
030113	WORKING	LGP			Simply mark TextImager::GetTextBoundingRect () as OBSOLETE,
						and lose the API (Led30Compat). Then wrok on TextImager::GetTextWindowBoundingRect ().
030113	REPORT	LGP			Fix TextImager::GetTextWindowBoundingRect () and
		(1237)			TextImager::GetTextBoundingRect for BIDI.

030112	FIXED	LGP			The trouble appears to be that ScriptItemize () has no mechanism to specify that
						the initial RTL value (uBidiLevel) is unspecified (neutral). FriBidi HAS that mechanism.
						That appears to be the reason behind the difference in behavior (at least most of the differnces)
						between FriBidi and UNISCRIBE/ScriptItemize.
							Use a memoized version of a function which maps characters to character classes
						RTL/LTR/Neutral, and use this to feed an initial value to UNISCRIBE.
030112	WORKING	LGP			Try the file SPR_1236a.rtf. A very simple example that triggers
						qTestUNISCRIBEResultsEqualFriBidi assertion errors.
030112	NOTE	LGP			I BELIEVE this is all due to the difference in behavior between ScriptItemize
						and fribidi. I sent a build to Gyula using fribidi to ask if that works better.
						In the meantime - I'm going to see if I can fiddle with ScriptItemize etc
						to get it to produce results closer to that of fribidi.
030112	REPORT	LGP		> From: Zsigri Gyula [zsigri@hung.u-szeged.hu]
		(1236)			>The January 2 build handled the cursor better.  In a paragraph which only has
						>right-to-left text, the cursor should appear to the left of the last word when
						>your press the spacebar, which is OK in the January 2 build.  The January 11
						>build invariably shows the cursor at the right edge of the line, no matter whether
						>you are writing left-to-right or right-to-left.

030112	FIXED	LGP			Small tweek to TextImager::GetSelectionWindowRegion - call
						GetRowHilightRects with full hilight range - not just subrow range
030111	REPORT	LGP			Secondary hilight is broken (maybe very). Test this carefully.
		(1235)			On Win98 with arabic text and big selections (4 lines +) I saw the top
						measured badly. WIth a simple file like SPR_1219.rtf - i saw some
						very small problems. But it should always be the SAME as the regular
						hilight (which always appeared OK?).

030111	FIXED				I HOPE.
030111	WORKING	LGP			I just noticed a bug. Have a single empty line and select that. Nothing
						displayed inverted. I THOUGHT I had tested that. Maybe my last minute cleanups
						to the fix broke something? TEST MORE CAREFULLY THIS TIME!!!
030111	WORKING	LGP			(thought fixed)I HOPE the final fix to TextImager::GetRowHilightRects.
						This time to better set the segmentHilihtAtEndOfRow flag - and not hilight
						end of row unless we select the wrap char
030111	NOTE	LGP			Look closely at SPR#1230 as well.
030111	WORKING	LGP			Open SPR_1234c.rtf. Click at the END of the document. Then shift
						left-click twice (selecting the 'b' and then 'ab'). Upon selecting
						'ab' you will get an assert error in TextImager::DrawRowHilight implying
						bad results (multiple rows from TextImager::GetRowHilightRects).
030111	REPORT	LGP			Try fidling with file SPR_1232.rtf (I THINK). I think I saw some
		(1234)			asserts trying to reproduce (cleanup/edit/simplify that file for SPR#1232.
						Try to reproduce and then FIX!!!

030111	FIXED	LGP			Note we also opened lowpri SPR#1233 to track a related small problem.
030111	WORKING	LGP			Problem may include ambiguity about TextInteractor::GetCharAtClickLocation
						vs. what GetCharAtWindowLocation () should return when you click past the EOR
						on a wrapped row line? Test what Led 3.1a2 did here? Then carefully DOCUMENT
						whatever is the assumed way to handle this throughout the code!
030111	NOTE	LGP			Also recheck SPR#1219, 1211, 1203
030110	REPORT	LGP			Open file SPR_1232.rtf. Click just past the end of the first row (to the right).
		(1232)			Note how the selection goes to the wrong place (one char too far?).

030110	FIXED				Lets mark this as FIXED. I've now gotten enough working, and tested on Win98 and XP,
						so I think we can call this fixed until we get some bug reports on it.
							Note that most of SPRs 1200 through 1228 are on aspects of this!
030102	WORKING				MAJOR PROGRESS! Now seems to image/measure MOSTLY OK on WinXP using Uniscribe. Test
						more elsewhere - but I HOPE I'm close. Trouble was setting
							scriptState.fOverrideDirection = true;
						when MEASURING text (we currently REQUIRE it for drawing the segments).
021218	WORKING				Sent email to Dave Wooden with sample code and clear statement of problems, asking for
						help.
021218	WORKING				SPR_1199c.rtf fails with my new ScriptStringGetLogicalWidths but works OK if I ifdef it
						out and call the old Win32_GetTextExtentExPoint code (on XP only - of course). I suspect that
						means I'm getting some reordering done by ScriptStringAnalyse. I NEED TO PREVENT THIS!!!
021218	WORKING				Simpler SPR_1199c.rtf fails.
021218	WORKING				Some test files seem to display and allow for selection OK (e.g. SPR_1199a.rtf).
						But others display and support selection badly (SPR_1199b.rtf). Luckily - BOTH exhibit
						the same good and broken behavior on WinXP and WinME!
021218	NOTES				FROM OTHER BUG REPORTS/NOTES:
						o	On WinME - the right justification - and other things that depend on measurement - including
							character selection - seem messed up. Maybe MAGIC correcting measurement text call on WinXP
							that is covering up a problem on older OSes. Make sure I use new code to do measurement
							even on WinME (already have covered in issues below - but this is a SYMTOM to look at correcting).
						o	MeasureSegment etc code must compute right offsets (so mousedown selection
							works - and selects the right characters)
021217	WORKING				Handled (on XP) draw-row-hilight code and mouse selection code. But it appears
						measurement code broken except on XP. Probably cuz of this. Try using Uniscribe API
						for measurement and see if that helps...
021213	WORKING				Mostly resolved. Uniscribe is NOT such a bad choice - as it can be easily
						installed by users (inside of MSIE 5.0 or later, and MSIE 5.5 comes with WinME).
							I now have the IMAGING (but not measurement) stuff working decently with
						UNISCRIBE. I also have backup code which implements a zillion other strategies
						via ifdefs and fallback code (if uniscribe not available). That has seen very
						little testing (maybe none). I've asked LEC and others to test - but I'm not
						expecting much.
							Main thing todo before I can close this SPR is the measurement code.
021209	WORKING				Talked to new guy - Dave Wooden - from MSFT
							CONTACT INFO:
								Dave Wooden
								dwooden@microsoft.com
								(425)-704-5799
							He seems to understand  my problem, and is researching it. He was close to
						recomending a variant of the GetCharacterPlacement code seen in AbiWord - but wasn't
						sure. I've since done more research myself on this API, and tried it a bit on WinME. It
						doesn't work on WinME.
							Hope to hear good news tomorrow!
021206	WORKING	LGP			Better yet - maybe do like AbiWord? It uses:
						>GCP_RESULTSW gcpResult;
						>gcpResult.lStructSize = sizeof(GCP_RESULTS);
						>gcpResult.lpOutString = NULL;			// Output string
						>gcpResult.lpOrder = NULL;				// Ordering indices
						>gcpResult.lpDx = NULL;					// Distances between character cells
						>gcpResult.lpCaretPos = NULL;			// Caret positions
						>gcpResult.lpClass = NULL;				// Character classifications
						>gcpResult.lpGlyphs = m_remapIndices;	// Character glyphs
						>gcpResult.nGlyphs = m_remapBufferSize;  // Array size
						>
						>if(GetCharacterPlacementW(m_hdc, currentChars, iLength, 0, &gcpResult, GCP_REORDER))
						>{
						>	ExtTextOutW(m_hdc, xoff, yoff, ETO_GLYPH_INDEX, NULL, m_remapIndices, gcpResult.nGlyphs, NULL);
						>}
						I may rework by TextLayoutBlock guy to OPTIONALLY use GetCharacterPlacementW
						instead of fribidi. I'm not sure about the relative merrits of the
						two APIs - but they seem to overlap alot. But the key is to keep
						the original text in order (not using the virtual text) and to use
						the mapped index feature of ExtTextOutW. At least TEST if using
						ExtTextOutW works on all platforms for both directions (not using 
						SetTextAlign) and doing the Arabic shaping.
021206	WORKING	LGP			Some random web doc (http://www.aramedia.com/ms2000/win2000.htm)
						recomended using ExtTextOut instead of TextOut with SetTextAlign.
						That doesn't seem to have helped.
						>Font Technology
						>  To select the appropriate font and output text in local script 
						>1 Use: 
						>  EnumFontFamilies or ChooseFont to select fonts 
						> 
						>GetTextCharSetInfo to generate the font signature 
						> 
						>GetLocaleInfo to generate the locale signature 
						> 
						>2 Record the charset in your document files 
						>3 Avoid: 
						 > using OEM_CHARSET 
						 >
						 > using ANSI_CHARSET by default 
						 >
						>assuming a given font facename exists 
 						>Bidirectionality
						>To support bidirectionality in your software 
						>1 Use GetFontLanguageInfo and GetCharacterPlacement to reorder text: 
						>2 Use ExtTextOut 
021206	WORKING	LGP			Opened issue with MSFT:
						DATE OPENED:		2002-12-06
						CASE ID				SRX-021-206-603-127
						SUBJECT:			Arabic Text editing issue.
						CONTACT:			Greg
						EMAIL:				gregb@microsoft.com
						PHONE# 				425-704-5212 (Redmond, WA - PST)
021206	REPORT	LGP			Bidi text (esp Arabic) doesn't always display properly
		(1199)			on Win9x. Mayble also on WinXP, and Win2k. Not sure WHAT to use
						as a reference (except maybe MSIE?). Even Word XP seems to
						do something wierd.

030110	FIXED	LGP			Bug was that TextLayoutBlock_Basic::Construct_Default () constructed a single
						empty run element. This isn't REALLY that serious - but probably better not to, and
						then we can leave in the assert in the PartitioningTextImager::GetRowRelativeCharAtLoc
						code. Also improved TextLayoutBlock::Invariant_ ().
030110	NOTE				ASSERT IN size_t	PartitioningTextImager::GetRowRelativeCharAtLoc (Led_Coordinate
						hOffset, size_t rowStart) const
						line "Led_Assert (hOffset > 0 or runs.size () == 0);"
						when doing backwards selection from end of document twoards top.
						TRY TO REPRODUCE!!! (in DEBUG code - NON-UNICODE)
030110	REPORT	LGP			Open file SPR_1231.rtf. Shift down-arrow (select one line). Then do it again.
		(1231)			BANG! Assert error!

030110	FIXED	LGP			Lots more cleanups to TextImager::GetRowHilightRects (). Not VERY well tested,
						but a bit. I hope I have it this time!
030110	REPORT	LGP			Open file SPR_1230.rtf (DEBUG Partial UNICODE). Select all. Note how
		(1230)			some lines (rows) shown as WHITE. THIS IS A REGRESSION! We had this bug before
						and it was re-introduced by my recent changes to this code (lookup SPR#).

030110	FIXED	LGP			I cleaned up the autogen code a bit and added qTestMyISWXXXFunctions
						assertion checking code. I noted that iswpunct returns different values
						with VC6 vs. VC7 for a large range of characters:
							<               ||(256 <= c && c <= 543)
							---
							>               ||(192 <= c && c <= 214)
							>               ||(216 <= c && c <= 246)
							>               ||(248 <= c && c <= 543)
							I had a problem running the writeMemoizedFunction code on VC7 with LedIt
						cuz of lib conflicts (I think with my quicktime lib) - but when I ran it with
						LedLineIt that problem went away. Now I have the probably more correct version
						of iswpunct.
030110	REPORT	LGP			Open file SPR_1229.rtf (DEBUG Partial UNICODE BUILD). Note assert error in
		(1229)			myiswpunct. Apparently my autogen code wasn't quite right. Add TEST autogen code
						as well, and fix the autogen code!

031010	FIXED				Now it works much better. TextLayoutBlock_Basic::Construct_UNISCRIBE () is now
						changed to call ScriptItemize() with a zeroed-out SCRIPT_CONTROL/SCRIPT_STATE. I have
						no idea why. Passing NULL works - but produces different results than this way, and this
						ways results are CLOSER to fribidi and MSWord XP (on WinXP). So - go with this way.
							In making this change - it exposed a bug with my code for contructing the
						fVirtualStart/Ends for the script runs from the UNISCRIBE datastructures. That too
						was fixed.
030109	NOTE				TRY SAMPLE UNISCRIBE CODE AND LOOK AT MY SCRIPTITEMIZE CODE AND SEE IF I"M
						INTERPRETTING SCRIPTLAYOUT RESULTS CORRECTLY (maybe backwards?). (TRY SAMPLE I
						EMAILED TO GREG@MSFT).
030107	REPORT				Look into which method of breaking source text into runs does a better
		(1224)			job: qUseFriBidi or qTryToUseUNISCRIBEForTextRuns. For now - shut qUseFriBidi
						OFF by default (so Led users don't need to link with fribidi). I suspect
						this is NOT the best choice - but try for now. Let users test which works
						best. Based on SPR#1218. LOWPRI BUG.

030110	CLOSE	LGP			OK. I verified that without the UNISCRIBE code - I get funky behavior
						(on that one file) and with it - I think I get the right behavior). So - lets
						assume this is fixed by UNISCRIBE and it was just a funny result due to using
						the VC6 compiler (mine doesnt have UNISCRIBE headers installed).
030106	NOTE	LGP			Maybe just broken WITHOUT UNISCRIBE. I THINK this bug
						reproduces in builds from VC6 (whcih doesn't have UNISCRIBE)
						but fails in builds from VC.NET (whcih DOES have UNISCRIBE). TEST
						AND VERIFY. If thats it - we can close this.
030106	WORKING	LGP			Reproduced AGAIN - and saved repro file in SPR_1223a.rtf. I HOPE
						I can repro again tomorrow!
030106	WORKING	LGP			CANNOT REPRODUCE. I STILL think it MAY make sense to redo the MeasureSegment()
						code to get handed text in virtual order. That would be a bit of programming work, but
						would make some sense (and it would fix any possible problems with mirroring we
						haven't yet encountered - but COULD).
							Still - if I can REPRODUCE no actual problems with the current code - it maybe good
						enough for an alpha release. I don't yet know how good or bad my overall BIDI support
						is, or home much people will care about it.
030105	REPORT	LGP			Open file with SPR_1199c.rtf and try selecting character near the
		(1223)			middle that looks like a g with two dots on top. Compare selecting with
						same char on notepad. You will see selection is WRONG (wrong width). This
						is wrong even on XP. TEST CAREFULLY	and then communicate it back to MSFT.
						MAYBE try using the ScriptCPtoX code that was recomended first!!!! Maybe
						I need to RE-ORDER text I pass into MEASURE code according to VIRTUAL ORDER???

030110	FIXED				Added code to MultiRowTextImager::DrawPartitionElement so the
						'rowEnd' arg it passes to other functions is a regular (apparent) row
						end, and not the REAL-ROW-END (has terminating NL removed).
							Added prelim MapRealOffsetToVirtual/MapVirtualOffsetToReal methods,
						and qDebugHack_UpperCaseCharsTratedAsRTL support.
							Lost selectBOL/EOL args to GetIntraRowTextWindowBoundingRect (),
						and instead put that logic directly in TextImager::GetRowHilightRects (),
						and added assert there that we never create overlapping rects.
030108	WORKING	LGP			TextImager::GetRowHilightRects () returns overlapping regions,
						which can doubly INVERTRECT a section of text. I added Ensures()
						that these rects don't overlap.
							Bug still not fixed - however. I HTINK BUG HERE IS THAT
						segmentHilightedAtStart/END flags need to be set based on whether
						the segment touches the VIRTUAL end - not the LOGICAL end.
030108	REPORT	LGP			Open file SPR_1225.rtf. Select the first three rows. Note how hilight in
		(1226)			The middle row is messed up. Note that SECONDARY hilight (by deactivating window)
						looks OK for all rows. Maybe drawing INVERTRECTS twice for some sections of
						second row.

030109	FIXED				Added hWnd read-only property.
030109	REPORT	C.Wallin>From: Christian Wallin [mailto:CWA@dbb.dk] 
		(1227)			>Sent: Thursday, January 09, 2003 8:10 AM
						>To: 'Lewis G. Pringle, Jr.'
						>Subject: SV: ActiveLedit
						>
						>Hi Lewis 
						>I have done some testing on the beta version. it does very well -
						>especially I like that it is fast, much faster than the MS richtextbox.
						>Also, it performs very well with hidden text (wich the richtextbox does not)
						>There are a few thing that I'm missing:
						>There is no hWnd property- is that intentional? 

030108	FIXED	LGP			PartitioningTextImager::MeasureTextCache::EarlyDidUpdateText needed to look
						one character back of change for PM to check and see if invalidated. If I deleted
						something at the very END of a PM, then that needs to invalidate the cache
						for that PM even though the change is just a truncation (cuz with BIDI - that
						extra text could have re-ordered things or been involved in a ligature or something).
030108	REPORT	LGP			Open file SPR_1225.rtf. Select the last row (unknown embedding) and delete.
		(1225)			Assert error in qCacheTextMeasurementsForPM/PartitioningTextImager::CalcSegmentSize
						code.

030107	FIXED				Opened new SPR#1224 to maybe revise default qUseFriBidi or qTryToUseUNISCRIBEForTextRuns
						choice, but for now - leave it as qTryToUseUNISCRIBEForTextRuns.
030107	WORKING				Fixed bug with TextImager::GetSelectionWindowRegion (). Now I no longer get
						ASSERTIONS. I still DO get funny ordering. I think this now makes it POSSIBLE
						for me to use 
030107	NOTE	LGP			Test one more time. See if I can AT LEAST get it working, and then pass
						THAT version on to others and see what THEY think about its correctness of
						layout. If they say wrong - then ask MSFT.
030106	NOTE	LGP			I looked closely at the file SPR_1199c.rtf with qTryToUseUNISCRIBEForTextRuns
						ON. There is some arabic text with a period in the middle. That code makes the sole
						PERIOD character a LTR character. I'm not sure whats REALLY the right thing
						todo, but I've shown people the fribidi-based code, and they were happy about it,
						so I guess I'll stick with that until I hear otherwise.
030102	WORKING	LGP			Added (about a week ago- checking in now) qTryToUseUNISCRIBEForTextRuns
						flag and restructured code a bit so I can run with UNISCRIBE to break
						into runs. BUT - it DOESNT produce the same runs as FRIBDIDI. Not sure
						who is right!
							Must decide what strategy is best, and update various project
						files accordingly.
021223	REPORT	LGP			See if I can use Uniscribe INSTEAD of FRIBIDI in
		(1218)			BidiLayoutEngine.cpp - so I can avoid thinking about license
						(for activeledit). Also - for debugging - it would be nice to
						see if / when they produce the same/different answers.
							Fix project files  so BIDI is inclued for MSVC60. Then retest
						on all other platforms (Mac/Win) and NetLedIt projects etc) and
						make sure they all still build/work properly.
						<< OR MAYBE FIX TO USE UNISCRIBE TO GRAB THESE RUNS??? SO WE
						DONT DEPEND ON FRIBIDI?>>

030107	CHANGE	LGP			Checked in some speed tweeks (loading RTF1.4SPEC.rtf file).
						About 30% better, but still HORRIBLE loading that file. Table problems.

030106	FIXED	LGP			Small fixes to PartitioningTextImager::GetRowRelativeCharAtLoc ().
030102	REPORT	LGP			Small bug with BIDI mouse click handing. See file SPR_1219.rtf.
		(1219)			Mouse clicks are handled properly (translated into selections)
						for the first two rows, but in the THIRD row - past the JJJJ - they
						are NOT.						

030104	FIXED	LGP			Changed iswalpha to iswpunct to be more like old code and a bit smaller.
030104	WORKING	LGP			Added qBuildMemoizedISXXXBuilderProc and myiswalpha to TextBreaks.cpp.
030103	WORKING	LGP			Vectors down to GetStringTypeW () - which is not implemented
						on Win9x, and so the code maps to the current active codepage,
						and then uses GetStringTypeA. Not 100% sure how to best address this.
						Maybe do like Japanese - and hardwire a few common ranges of word characters
						as word-chars in TextBreaks.cpp (CharToCharacterClass).
030102	REPORT	LGP			Double clicking on arabic characters doesn't do proper
		(1220)			word selection on Win2k (and probably earlier). Note - this works
						FINE (as far as I can tell) on WinXP. Maybe my code in TextBreak.cpp
						should use iswalnum instead of not iswpunct()?

021220	FIXED	LGP			Added virtual TextImager::InvalidateAllCaches and made SimpleTextImager/MRTI versions
						just overrides. No longer need SimpleTextImager::TabletChangedMetrics overrides etc
						since now TextImager::TabletChangedMetrics calls TextImager::InvalidateAllCaches.
						MultiRowTextImager::PurgeUnneededMemory () no longer needed since TextImager version
						now calls InvalidateAllCaches().
021220	NOTE	LGP			InvalidateAllCaches MAYBE a poor spot.Maybe a badly defined function.
						Instead - maybe - just override TabletChangedMetrics todo this INVAL?
021220	REPORT	LGP			Open file SPR_1217.txt in LedLineIt. If your font defaults to Courier (as mine does)
		(1217)			you will see block boxes for characters. Change fonts for the document to Courier New (a
						OpenType font). CRASH/ASSERT ERROR. qCacheTextMeasurementsForPM code in
						PartitioningTextImager::CalcSegmentSize triggered> Call stack makes issue clear (and one
						I thought of, but forgot to handle). Call of SimpleTextImager::TableChangedMetrics ()
						calls SimpleTextImager::InvaldateAllCaches(). THAT apparnatly doesnt inval THIS cache.
						Must fix same/similar bug with MRTI (probbaly SAME bug).

021220	FIXED	LGP			Add new helper TextImager::GetRowHilightRects(). Call that
						from TextImager::DrawRowHilight instead of manually computing
						where to draw hilights. Then use that shared code from 
						TextImager::GetSelectionWindowRegion (thereby fixing IT for BIDI). Also
						fixed TextImager::GetSelectionWindowRegion so it handles interline space
						(I hope - not tested). And got rid of overrides of
						GetSelectionWindowRegion from MRTI and SimpleTextImager.
021220	WORKING	LGP			Consider getting rid of MRTI/SimpleTextImager overrides of
						TextImager::GetSelectionWindowRegion (). I THINK I can accomodate
						everything needed there and then just one place for complex BIDI
						fix. Just have to test that interline space still works.
021219	REPORT	LGP			Make sure SECONDARY HILIHGT computation is correct now for
		(1216)			BIDI code.

021219	FIXED	LGP			That was it. Just a little cleanup of that routine and we're all set.
021219	REPORT	LGP			Both for RTL and LTR text - draging the cursor to the logical end of line
		(1214)			makes the selection suddenly bounce back to a wierd value. Not sure why.
						Maybe cuz of PartitioningTextImager::GetRowRelativeCharAtLoc () result and end of that
						function?

021219	CHANGE	LGP			Added EmitTraceMessage/LedDebugTrace/qNoOpKeywordSupported/qDefaultTracingOn
		(1215)			support. Really only works (well) for MS-Windows, but could pretty easily get
						working elsewhere - if there is any need.

021218	FIXED	LGP			The trouble was that PartitioningTextImager::CalcSegmentSize_REFERENCE only
						measured up to 'to'. Because of ligatures - this might not be enough! We need to measure
						all the way to the end of the row (as we did in the caching case). Really - EOR is overkill,
						but probbaly makes sense since we cache anyhow. This stuff is now covered in the 
						PartitioningTextImager::CalcSegmentSize docs.
021218	WORKING	LGP			Simplified to opening the 3 character file SPR_1212f.rtf causing
						the assert error.
021218	WORKING	LGP			Can reproduce by just opening that file in LedIt itself directly.
021217	REPORT	LGP			Bug with qCacheTextMeasurementsForPM code. Open file SPR_1212.txt in LedLineIt. Copy.
		(1212)			Open new doc in LedIt. PASTE. Assert error in PartitioningTextImager::CalcSegmentSize.

021217	FIXED	LGP			Fixed.
021217	WORKING	LGP			I think PartitioningTextImager::GetRowRelativeCharAtLoc () now returns the right
						result - but I must tune TextInteractor::GetCharAtClickLocation () to handle
						RTL text as well!
021217	WORKING	LGP			Must rewrite PartitioningTextImager::GetRowRelativeCharAtLoc () in much the
						same way I already re-wrote PartitioningTextImager::GetRowRelativeCharLoc ().
021217	REPORT	LGP			Fix (at least first cut) mouse selection code for BIDI. With RTL text - clicking
		(1211)			produces a wildly inaccurate answer for what gets selected. Fix it so its about right,
						and structured so it will become right once we further tune the measuretext code.

021217	FIXED	LGP			FIXED (at least mostly). All symptoms fixed (including SPR#1108 still fixed).
						Code for TextImager::DrawSegment() and StyledTextImager::DrawSegment ()
						etc still a LITTLE foggy on the relationship between the drawRect and
						the GetHScrollPos. Could use some cleanup/clarification. Still - good
						enough for now.
021217	WORKING	LGP			This bug resulted as a regression because of the fix for SPR#1108.
021217	WORKING	LGP			Use the text:
						"while in mode. to do with the _MFC template"
						Just make the window small enough horizontally to enable the scrollbar, and then scroll
						horizontally.
021216	REPORT	LGP			LedLineIt long line display bug:
		(1210)			Try the line:
						> am getting some weird compile error when trying to compile in Release mode that doesn't appear while in debug mode.  It has to do with the WordProcessorCommonCommandHelper_MFC template
						in LedLineIt. Scroll to the right. Note how the text display is garbled. This bug doesn't occur
						in LedLineIt 3.0.1, but DOES in LedLineIt 3.1a2 (ALL WIN32). Also - the bug only occurs
						if Syntax coloring is turned on.

021216	FIXED	LGP			There were two issues. He was using a different subclass of HidableTextDatabase,
						and had overridden GetHidableTextDatabase to return the new type.
							The first issue was that:
							(1)	Led_RefCntPtr<T>::CTOR() should allow arguments of Led_RefCntPtr<SUBCLASS_OF_T>.
						Unfortunlately - there isn't any way I know of to say this perfectly - but using
						a template member CTOR seems to come pretty close. I worry a little that may cause
						some problems - mostly confusing or misleading error messages - on some compilers.
						But - I think this functionality is an improvement for the Led_RefCntPtr<> template,
						and it helps Joe - so we'll try it.
							(2)	The second (small) issue is that
						WordProcessorCommonCommandHelper_MFC<BASECLASS,CMD_INFO,CMD_ENABLER>::ControlItemContextInternalizer
						should take a CONST HidableTextDatabasePtr& argument. That was easy.
021216	REPORT	JNellis	>From jnellis@hypergrove.com
		(1209)			..
						> am getting some weird compile error when trying to compile in Release mode
						>that doesn't appear while in debug mode.  It has to do with the
						>WordProcessorCommonCommandHelper_MFC template

021216	FIXED	LGP			Added to ActiveLedIt automation API as well.
021216	WORKING	LGP			Added TextImager::GetUseSelectEOLBOLRowHilightStyle (and setter)
						to change behavior. Defaults to MacOS (select EOL/BOL style).
021216	REPORT	LGP			Implement (optionally) same selection display used
		(1208)			by Windows Apps. I prefer MacOS style (where we select EOL
						and BOL regions. But - make it possible for others
						to see the more standard windows behavior.

021216	FIXED				Small cleanup to TextImager::DrawRowHilight ()
						and TextImager::GetIntraRowTextWindowBoundingRect. Added related
						SPR#1208.
021216	WORKING	LGP			Try files SPR_1207a.rtf and SPR_1207b.rtf. Select from the
						digit 1 down to the digit 3 and to various positions in between.
						Try inserting empty lines. See that hilight still works correctly
						in all cases.
021215	REPORT	LGP			Sometimes DrawRowHilight is not working. For BIDI lines -
		(1207)			sometimes doesn't draw all the way to the RHS of the screen.

021216	FIXED	LGP			StyledTextImager::StyleMarkerSummarySink::ProduceOutputSummary
						now pays attention to the TextLayoutBlock object and returns runs
						in virtual order.
021215	WORKING	LGP			Not such a big sublte bug and nothing todow it Uniscribe code.
						StyledTextImager::DrawSegment () is drawing things in LTR virtual order
						(as makes sense) but its using the style marker offsets in REAL order.
						Thats why things are out of order. Must re-order the style markers into
						LTR virtual order as well. Then iterate over them drawing in virtual
						order.
021213	REPORT	LGP			Try making some run of text ITALICS or BLUE (RTL text).
		(1206)			Displays VERY badly. This makes me very concerend things aren't
						working as well as I had thought (with Uniscribe).

021213	FIXED				I think this now hilights correctly (though lots more BIDI work todo).
021206	WORKING				Added GetRowRelativeCharLoc/GetRowRelativeCharAtLoc APIs (SPR#1198).
021204	WORKING				Checked in change to CalcSegmentSize (SPR#1193) to facilitate this
						work.
021203	WORKING				Checked in a bunch more code.
						Lose WRTI::DrawRowHilight() code cuz unneeded and obsolete. Instead
						handle the hilight logic better in TextImager::DrawRowHilight and
						add extra arg to GetIntraRowTextWindowBoundingRect to handle margin
						case (better than in Led 3.0 - I think). Also - made
						GetIntraRowTextWindowBoundingRect protected instead of public.
							Still - though code cleaner and more prepared - I think still a ways
						to go for BIDI selection to work (may need to fix GetCharLocation ()
						code to make this work which WAS part of next SPR todo).
021202	WORKING				Checked in preliminary half-right code (cuz mixed with other fixes
						for SPR#1188).
021202	REPORT	LGP			Fix TextImager::DrawRowHilight() to support BIDI. Really a subpart
		(1189)			of SPR#1183.

021213	CHANGE	LGP			Added TextLayoutBlock::GetCharacterDirection () API, and TextImager::GetCharacterDirection()
		(1204)			API support.

021213	CLOSED				The display is largely working, and the selection and so on are getting closer, but
						still have a way to go. The remaing bugs are all being tracked with other SPR numbers
						now - so lets just close this.
021202	WORKING				Did SPR#1185 - reorg code a bit to share more between STI and MRTI in prep
						for rewriting DrawRowHilight() code.
021201	WORKING				Made same changes to SimpleTextImager I had made to MutliRowTextImager
						to use TextLayoutBlock, so LedLineIt now compiles. Also,
						fixed TextImager::DrawSegement_() to handle multiple direction
						runs (really not needed - even for LedLineIt cuz it uses a styleTextImager,
						but you can shut that off - and then its needed).
021201	WORKING				Added code to SummarizeStyleMarkers () so it breaks styleruns on
						run-direction breaks. Still alot todo, but I think display working pretty well
						now.
021129	WORKING				MAJOR BREAKTHROUGH. Now I think all simple plaintext Arabic
						displays OK. One major trick was that you DONT layout the entire paragraph
						at a time (as some of the docs I read seemed to indicate) - but just one
						ROW at a time. This makes things much simpler (though I HAD come up with a design
						that worked the other way). Anyhow - I now have StyledTextImager breaking up
						text into runs of different directions etc.
							There is still a TON todo (I only did draw and not measure),
						and TextImager::DrawSemgent_ needs to be fixed to handle mutliple runs in a segment
						(if called from LedLineit for example).
021127	WORKING				Lots more work on TextLayoutBlock object. Renamed a bunch of things,
						and straighened out semantics of _VirtualSubset class (maybe still not great,
						but at least now clear). At least somewhat well tested (Win32 only).
021127	WORKING				<OLDCODENOTE>
								MAJOR non-backward compat change - Many APIs that took
							a 'Led_tChar*' argument now take a TextLayoutBlock argument.
							Many of these were virtaul functions which may have been overridden.
							The list includes:
								MRTI::DrawRowSegments()
								TextImager::DrawSegment()
								StyledTextMarker::DrawSegment()
								and LIST MANY MORE SOON
								
								Replace your 'const Led_tChar*' arg with 'const TextLayoutBlock&'
							and then to get access to the exact same content as before - just
							refer to 'text.GetRealText ()'. Though - in many cases - what you will
							really want is 'text.GetVirtualText'. Only for BIDI is there any
							difference.
							</OLDCODENOTE>
021127	WORKING				Yesterday experimented with ICU, and other things, and now
						broke MRTI::Draw() apart so calls new MTRI::DrawPartitionElement().
						Cannot (right now) move that into PartitioningIMager just due to
						row number arguments. Would like to find a way too (cuz I need basically
						idential code to be duplicated now for SimpleTextImager).
021125	WORKING				At least under some circusmtances - existing drawtext already
						reverses drawing of arabic chacters. I may need to only use
						the layout code for segmenting - not for drawing the individual
						segments. ARG! COMPLICATED!
021125	WORKING				Did first checkin of basic TextLayout code using FriBidi and checked
						in that project file (into aux files). MAJOR amount to do - even IF
						I correctly understand how fribidi stuff is actually working. I really
						could use some help - and discussion with someone.
021125	NOTE				WORKING ON BIDI STUFF. Incorporated fribidi in project (though not
						tested). See if I can get soemthing quick and dirty working with 
						TextImager::RemoveMappedDisplayCharacters_HelperForChar???
021125	NOTE				TRY TO FIT about BIDI into A3 release.
021125	REPORT	LGP			Glenn asked me (a few days ago) to go ahead with the
		(1183)			Bidi Project. Get Arabic/Hebrew display working properly.

021213	FIXED				Used new TextImager::GetTextDirection API from TextInteractor::CalculateCaretRect ().
						Not 100% sure this is right - but pretty close.
021213	REPORT	LGP			Handle caret rect placemnet (must handle RTL code and move to other side
		(1203)			of charrect and pay attention to SELECTION_USE_BEFORE_OR_AFTER flag - like we
						do for end-of-row in word-wrap case - for placing caret rect.

021208	CHANGE	LGP			Move Win32CharSetToCodePage () from LedGDI.h to CodePage.h.
		(1202)			Merge in many cases and code from StyledTextImager_RTF codepage/charset
						list hanlding. Then change the _RTF code to just call Win32CharSetToCodePage.
							SLIGHYLY changed (tightened) the semantics of this routine and
						the font / charset input specifying code from StyledTextIOReader_RTF
						(esp with respect to ANSI code page / CP_ACP).

021205	CLOSE	LGP			I don't understand what was going on - but I can no longer reproduce
						this bug - so I'm not going to worry about it for now. I'm going
						to be doing alot more tweeking in that area of the code anyhow (caching)
						so I'm sure I'll re-run into any bugs there.
							MAYBE the fix I did to the show/hide code for HiddenText did it?
021205	WORKING	LGP			Was a bug in LedItApplication.cpp (WINONLY) which caused wrong flag
						value to display in menubar for "show hidden text" option. THATS fixed.
021205	WORKING	LGP			Noticed some problem(s) with hidden text. Turning it on/off
						seemed to cause some problem (at least when you then cursored around
						near the beginning). I THINK I fixed that (Use SimpleTextUpdater to
						properly scope update for change in setting fShown flag) -
						but test more. Also note that checkbox for 'show hidden text'
						not right in LedIt. Unsure if thats relevant. Anyhow -
						original bug still exists.
021205	WORKING	LGP			May have todo with hidden text code (though proximate cause is
						bugs with my new qCacheTextMeasurementsForPM code).
021205	REPORT	LGP			Open file SPR_1197.rtf. Hit CONTROL-END (to goto end of buffer).
		(1197)			Note assertion error.

021206	CHANGE	LGP			For SPR#1189 - added 2 new APIs to TextImager, implemented them
		(1198)			in PartitioningTextImager, and used them in MultiRowTextImager
						and SimpleTextImager:
								GetRowRelativeCharLoc ()
								GetRowRelativeCharAtLoc ().
							These just use the old basic algoriitm - but now give me
						a leveraged point at which to implement the new BIDI algoritm for
						finding selection regions and hit testing.	
								
021204	FIXED	LGP			Had to fix some buffer size args to fribidi call.
021204	REPORT	LGP			Open file SPR_1192.txt with Partial UNICODE LedLineIt. Goto end
		(1194)			of buffer. CRASH. Bug is in fribidi wrapping code (writes past end
						of some buffer). DEBUG build says something like that.

021204	CHANGE	LGP			Based on work for SPR#1189- Bidi DrawRowHilight code.
		(1193)			<OLDCODENOTE>
							Calls to and overrides of CalcSegmentSizeWithImmediateText should
						be replaced with simply CalcSegmentSize
						</OLDCODENOTE>
							Got rid of MRTI::CalcSegmentSizeWithImmediateText and
						replaced it with just plain calls to TextImager::CalcSegmentSize. There
						was no point in the WITH_IMMEDIATE_TEXT version except as a performance
						hack, and that hack was superceded by caching the character widths
						in MultiRowTextImager::CalcSegmentSize (qCacheTextMeasurementsForOneRow).
							Also - GOT rid of MRTI qCacheTextMeasurementsForOneRow hack. Instead,
						did an almost exactly equivilent hack - qCacheTextMeasurementsForPM
						in PartitioningTextImager (THIS FACT SHOULD BE A PERFORMANCE BOOST
						FOR LONG LINES IN LedLineIt - SPR#1192 - UNTESTED YET)
							Did qCacheTextMeasurementsForPM in such a way that we can easily run
						the old REFERNCE algorithm or the new cachign one,and compare results (TESTING).

021203	FIXED	LGP			Added TextDirection typedef to Led_GDI and use that instead of one
						I had declared in BIDI module. Then support (for Win32) call to SetAlignmentDirection
						call in Led_Tablet_::TabbedTextOut(). Will pass this along to Naji to
						ask if it is now correct.
021203	WORKING	LGP			Got report from Naji Jurdi [naji@totallink.net] that display on Win98
						was wrong. PROBABLY it was this issue.
021203	REPORT	LGP			Maybe (for Win9x???) need to pass along RTF flag to
		(1191)			Tablet::DrawText() method so it can call SetDirection

021203	CHANGE	LGP			<OLDCODENOTE>
		(1190)				Changed name of Led_Tablet_:: and TextImager:: HilightARectangle_SolidHelper
						to (same::)HilightArea_SolidHelper so it could be overloaded to take
						a region. Just change call name if ever called directly (and MAYBE RARELY
						you may need to change an override if this was overridden in a TextImager
						subclass).
							</OLDCODENOTE>

021202	CHANGE				Earlier change (SPR#1185) to TextImager::DrawRowHilight (making it so
		(1188)			it could goto TextIamger from MRTI) broke one small case of display
						of end-of-row selection. Fix to SPR#1187 helped and then one other small
						fix.

021202	CHANGE	LGP			Fixed small bug with MultiRowTextImager::GetCharLocationRowRelative
		(1187)			which dated back to early word-wrap code. Code assumed NL was the only
						way to end a PM. Instead now use
						'RemoveMappedDisplayCharacters (&lastChar, 1) == 0' to see if at end
						of row char that shouldn't be shown (and make that zero-width).
							No obvious impact for normal word-wrapped text, but this fixes
						the bug (never noted - I don't think) that prevent users from clicking
						on to select a TableRow object, and prevented me from fixing fully
						SPR#1188.

021202	CHANGE	LGP		<OLDCODENOTE>
		(1185)				Moved DrawRow, DrawRowSegments,DrawRowHilight,DrawInterlineSpace
						methods from MultiRowTextImager and SimpleTextImager to TextImager.
						In doing so - made a few small changes to their arguments (INCOMPATABLE).
						Mostly just removed the RowReference first argument. Now MRTI and STI
						both share the same implemenation.
							Old code that overrode these methods must adjust its arguments
						and not much else. Same for any code that called these directly (unlikely).
						</OLDCODENOTE>
							This was done to facilitate rewriting the hilight display (in one place
						for the BIDI code SPR#1183)

021201	FIXED
021128	WORKING	LGP			Really fixed. Trouble was that the code in
						StyledTextIOReader_RTF::ApplyFontSpec () needed to recognize the Arabic charset
						number and map it to the right codepage number. At the same time - I supported a few
						other charset -> codepage mappings (including Hebrew, Chinese etc). Don't close this
						at this MAYBE closely related to the bug I noticed with some Japanese file (its on
						CERBERUS desktop - I don't think I have an SPR registered for it yet). TEST AND SEE
						IF THAT NOW FIXED - and then maybe also do a few more charsets not yet done from the table,
						and then close this.
021128	REPORT	LGP			DEBUG OPENING ARABIC STUFF (e.g.arabic_test_3.rtf). Displays as
		(1184)			garbage characters.


------------------- Released 3.1a2 2002-11-21 - Below ------------------------------

021121	FIXED	LGP			Added a binary version# (to make future stuff easier to check,
						can compare older/newer versions easier). If newer version - then
						dont give full new week - but just one day. Used to give full week if any
						CHANGE in version#. Annoy dialog a little more often.
							Also - make it a little harder to cancel dialog (no sysmenu, esc
						ignored, and you must actually click on cancel button, or nav to it and
						hit OK).
021121	REPORT	LGP			Make sure to include more aggressive style of ANNOYs in DEMO
		(1182)			version and make a little more sure its tougher to circumvent.
						(ACTIVELEDIT).

021121	FIXED	LGP			Dont worry about NedLedIt - its covered in SPR#1162
021121	WORKING	LGP			Added to ActiveLedIt
021120	WORKING	LGP			Added to LedIt Linux/MacOS.
021120	WORKING	LGP			Added to LedIt MacOS.
021119	REPORT	LGP			Must support new Insert Table/Row commands in ActiveLedIt
		(1177)			and Mac/XWin etc. Done for LedIt/Win - based on SPR#1176.

021121	FIXED	LGP			I found a few more small bugs with the code - but its now fine.
						The bug about an empty row is now opened as SPR#1181 (had nothing todo
						with this - I tested on earlier code).
021120	WORKING	LGP			MAYBE FIXED. NEED ALOT MORE TESTING. UNDO sometimes fails. Havent
						seen crashes. Also, an EMPTY row copied may not be pasted (or with
						undo??) properly? If no crashes - then just defer rest for a3,
						and do release!!!
021120	DUPREP	LGP			On Mac - closing a doc without deleting all tables produces
						crash. I think this doesn't happen on PC cuz DeleteContents is
						called - which deletes the table first. I THINK the best
						fix for this is to get rid fo the fRows variable I had intended to
						all along. Maybe now is a good time??? Beware of performance impact
						reading files - however!
							<<< NOTE - SAME BUG WITH ACTIVELEDIT >>>
							<<<MERGED WITH SPR#1180 since same problem - I believe>>>
021119	REPORT	LGP			TABLE Get rid of fRows array - and have code to dynamicly grab all
		(1180)			row objects inside the table object (maybe optimize this if needed -
						esp for case of reading RTF)

021119	FIXED	LGP			No undo works here because inserting rows through internalization
						automatically tries to stick the row into an adjacent table.
021119	WORKING	LGP			Fixed crash - but still don't have the undo funcitonality
						working. Adding ability to have rows inserted into the middle
						of a table be incoporated into the given (adjacent) table.
021119	REPORT	LGP			BUG - Delete a couple rows, then UNDO (CRASH). Need to
		(1175)			make undo code capture WHOLE region and replace whole region?
						Or allow for inserting rows in the middle of a table -
						and treat a paste/internalize there as joining that
						table??? Maybe BOTH. Maybe fix UNDO code to capture whole table
						and replace whole table but also support the insertion of rows?
						Maybe that part comes later. Based on SPR#1174.

021119	CHANGE	LGP			Added new Insert Row/Col Before/After commands to LedIt/Win.
		(1176)			See SPRs 1177,1178 for remaining issues.

021119	FIXED	LGP			Mostly working. Still more testing todo and bug fixing related
						to this change - but it largely works. See also SPR#1175.
021117	REPORT	LGP			Try making ROWS a single embedding(maybe later not using
		(1174)			embedding code) object so that they get rendered independently
						and so scrolling works a little better for
						large tables.

021117	CHANGE	LGP		<OLDCODENOTE>
		(1173)				TextStore::Replace() becomes TextStore::ReplaceWithoutUpdate (renamed)
						and subclasses now implement ReplaceWithoutUpdate(). They lost
						their code to call AboutTo/DidUpdate.
							Instead - new nonvirtual TextStore::Replace() call does the
						aboutto/didupdate stuff (using SimpleUpdater class) and calls
						the ReplaceWithoutUpdate virtual method.
							There should be no impact on existing code unless you subclassed
						TextStore and overrode Replace().
						</OLDCODENOTE>
							Did to help with SPR#1174.

021114	FIXED	LGP			The fix for HIS bug was to eliminate as obsolete
						<OLDCODENOTE>
							TextImager::NotificationOf_SelectionChanged()
							- instead just override SetSelection ().
						</OLDCODENOTE>
							But - then I noticed a related note - where the 
						empty selection wasn't getting set when we initially load
						a document. So - I added a new overload of SetEmptySelectionStyle ()
						and called that from a few places to grab the right selection
						info from the surrounding text.
021113	REPORT	RHindman> -----Original Message-----
		(1171)			> From: Robert Hindman [mailto:roberthindman@hotmail.com]
						> Sent: Wednesday, November 13, 2002 5:32 PM
						> To: lewis@sophists.com
						> Subject: RE: ActiveLedit Control and MouseDown event
						> 
						> Dear Lewis:
						> 
						> I will wait until next week to get the fix.  In the mean time, I have 
						> discovered another bug in the control:  when the mouse is clicked on 
						> some text to change the location of the insertion point, the 
						> SelChanged event is fired before the SelBold, SelItalic, and 
						> SelUnderline properties are updated.  Therefore, when we use the 
						> SelChange event to update toolbar "State Buttons" for bold, italic, 
						> and underline we are getting the old property values instead of the 
						> new values.  Please let me know whether or not you agree that this is 
						> a bug.  Thank you.
						AND	
						> -----Original Message-----
						> From: Robert Hindman [mailto:roberthindman@hotmail.com]
						> Sent: Wednesday, November 13, 2002 6:07 PM
						> To: lewis@sophists.com
						> Subject: More Info On 2nd Bug
						> 
						> Dear Lewis:
						> 
						> In regard to the other bug I reported (the SelChange event firing 
						> before the update of some properties) I need to add that there are 
						> other properties that are not updated before the event is fired.  
						> These are:  SelFontFace, SelFontSize and SelColor.  Thanks.

021112	FIXED	LGP			OnRButtonUp/Down fire the MouseUp/Down events (and changed
						the docs).
021112	REPORT	RHindman> -----Original Message-----
		(1170)			> From: Robert Hindman [mailto:roberthindman@hotmail.com]
						> Sent: Tuesday, November 12, 2002 2:56 PM
						> To: info-led@sophists.com
						> Subject: ActiveLedit Control and MouseDown event
						> 
						> Dear Sir:
						> 
						> This is to confirm that I would like to purchase a license for your control.
						>   The only problem is that the control does not raise a MouseDown event when
						> the built-in context menu is disabled.  I will contact you by phone next
						> week to see if this has been fixed, or you may contact be my e-mail if you
						> get it fixed before then.  Thanks.


------------------- Released 3.1a1 2002-11-02 - Below ------------------------------

021101	CHANGE	LGP			Up version from 3.1d1 to 3.1a1 since most people won't understand
						the 'd' scheme but do understand alpha.

021101	FIXED				Tested on MacOS - and works fine.
021031	WORKING	LGP			It now works fine on Win32. Still retest on MacOS.
021031	REPORT	LGP			GET NETLEDIT COMPILING/TESTED ON PC. THEN - I think it will work
		(1163)			on Mac (problems I saw looked portable).

021101	FIXED	LGP			Finally tested. Now works fine on LedIt-MacOS (same as on Win).
021031	NOTE	LGP			Done for LedIt Win, ActiveLedIt. NetLedIt now covered by SPR#1162- defered for
						a while. STILL todo for LedIt MacOS/XWIN.
021022	REPORT	LGP			Do basic table integration/testing on other platforms, NetLedIt, ActiveLedIt etc.
		(1142)			This includes adding the new Insert Menu to ActiveLedIt/NetLedit etc.

021101	FIXED
021101	REPORT	LGP			Fix bugs compiling on Mac (typename for Rect_Base<> etc)
		(1167)

021101	FIXED	LGP			Fixed
021101	REPORT	LGP			Led_RefCntPtr<T> should use block-allocation for the COUNT it allocates.
		(1164)

021031	CLOSE	LGP			Add new SPR#1162 for NetLedIt (will defer);
021022	WORKING	LGP			Added to ActiveLedIt. Still todo - NetLedIt.
021021	REPORT	LGP			Still must add support for Insert URL to ActiveLedIt, etc, and
		(1137)			test on other platforms (only tested LedIt-WIN) (SPR#1137).

021031	FIXED	LGP			Same bug applied to sub/sup/strike. Now fixed.
021024	REPORT	FredFry		The text "cm-1" (-1 sb SUPERSCRIPT) in ActiveLedIt. Then
		(1161)			say "GetHTML". You get the result "cm<sup>-<sup>1</sup></sup>".
						This doubly nested <sup> causes some problems for a customer,
						and is clearly unneeded and undesirable.

021031	FIXED				Docuemnted and added new SPR#1160 for NetLedIt change.
021030	REPORT				Must DOCUMENT new ActiveLedIt APIs (WindowMargin and PrintMargin).
		(1159)			Also - create and DEFER new SPRs to add similar functionality to
						NetLedIt.

021031	FIXED				Finsihed. Then added to the ActiveLedIt samples.
021029	WORKING	LGP			Did a first cut. Looks pretty good. Still need to do something
						to icons which should be showing state - like BOLD. Also - should do
						hover feedback like Yahoo etc buttons do. Also - not ALL funcitonality
						implemented - but quite a bit. Polish it and add it as a sample demo
						to my ActiveLedIt demos (in SDK) and add it to WEBSITE as a very good
						demo.
021029	REPORT	LGP			Richard asked about how hard it would be to do something like
		(1154)			what Yahoo and HotMail have for an embedded WP. I decided it would
						be not too hard, and relatively valuable, to have a decent demo of that
						sort of functionality.

021030	FIXED				Fixed API to use Led_TWIPS. Handle docs question in SPR#1159.
021030	REPORT	LGP			REVISE SetDefaultWindowMargins () /GET API to keep track of
		(1158)			stuff in TWIPS internally. In middle of swtiching ActiveLedIt COM
						API to TWIPS. Still need to write docs for that API.

021030	FIXED				Now added PrintMarginLeft(ETC) AUT interface to ActiveLedIt. Seems
						to work fine.
021030	WORKING				Now fully fixed and checked in, except for testing in ActiveLedIt
						and exposing it in AUT API.
							See also SPR#1155. I added that template so I could have a
						Led_TWIPS_Rect - which I used for the new Led_MFC_CViewHelper<BASECLASS>::GetPrintMargins
						API. Respect that value in Led_MFC_CViewHelper<BASECLASS>::CalculatePrintingRect
021029	WORKING				CalculatePrintingRect () cleanups. MAYBE go back to how it was before.
						Not sure why that wasn't OK. Also - lose the call to TabletChangedMetrics
						in OnPrepareDC () - since that should be done automagically if the
						window rect change REQUIRES it (in the SetWindowRect call). Checkin
						at this stage - but later make a few more changes.
021028	REPORT	LGP			FIX (at least ameliorate) printing margins problems (in both LedIt and ActiveLedIt
		(1153)			AND LedLineIt) (WINDOWS)). See also SPR#0678. REALY reported by Kenneth Geiger (oct 24, 2002)

021030	CHANGE	LGP			Added new Led_Tablet_::CvtFromTWIPS overloads to handle
		(1157)			Led_Point/Rect <-> Led_TWIPS_Point etc.

021030	CHANGE	LGP			See also SPR#0678. Made WindowMargin code be in TWIPS. Going to
		(1156)			go futher shortly - and save TWIPS internally.

021030	CHANGE	LGP			Added new Rect_Base<> template and made Led_Rect a simple typedef of that.
						Then TRIED (failed) to make the top/left/bottom/right fields private by
						adding accessors. Added the accessors and used them in tons
						of places - but still TONS more required. Leave that battle for another
						day. I'm not even SURE its a good idea. Anyhow - also added a 
						new typedef for Led_TWIPS_Rect (this was what I was after to begin
						with with all this nonsese)
021029	CHANGE	LGP			Added template Point_Base<> and use that for Led_Point, Led_Size
		(1155)			so they share code. SOON - redo Led_TWIPS_Point that way, and
						Led_Rect as well (so I can do a Led_TWIPS_Rect).

021028	FIXED	LGP			Added 'WindowMarginTop', etc properties. Open new SPR#1153 for print margins.
021024	WORKING	LGP			Did SPR#1150 - which makes this much better. Fixed the underlying 'bug'. Now just need
						to add automation API.
021024	NOTE	KGEIGER		Re-reported in email from Kenneth Gieger.
010830	DEFER	LGP			DEFER for Led 3.0
991223	REPORT	LGP			
		(0678)				ActiveLedIt! WindowMargin support doesn't work because it calls SetWindowRect directly (in control.cpp file)
						Probably not worth bothering to fix til I rewrite ActiveLedIt! in ATL, and then get the sizing ActiveX obect
						stuff right!

021025	FIXED	LGP			Don't bother with the feature of converting a given string into a UNICODE character.
						There are too many easier ways. In addition to the new Insert Symbol menu, there is
						the fact that you can use NUMLOCK ON, and then hold down the ALT key while typing numbers
						on the keypad. This generates a UNICODE char when you letup the ALT key.
021025	WORKING	LGP			Implemented for Win32 - an "Insert Symbol" menu - which invokes Character Map EXE
						and lets users D&D characters. Had to fix a bug with the D&D handling code which grabbed
						the D&D pacakge - that had a quirky bug preventing it from working with CharacterMap.exe.
021025	NOTE	LGP			mabybe add insert symbol menu item which just invokes character Table accessory, IF
						i can find a way to easiy D&D from it!
021024	NOTE	LGP			I replied that I would add a feature (like MSWord) where you can select a region of text
						(e.g. "04E8", and then select it, and type Alt-X, and the selected number is converted into "Ө")
						Also - I COULD add an Insert Symbol menu item with a table of a bunch of symbols - but thats alot
						more work. Consider. MAYBE. Wait for response from him about what he needs.
021024	REPORT	GauriR	> -----Original Message-----
		(1146)			> From: Gauri Ramakrishnan [mailto:gramakrishnan@globalnetservices.com]
						> Sent: Thursday, October 24, 2002 11:40 AM
						> To: info-led@sophists.com
						> Subject: Re: ActiveLedit 3.0
						> 
						> 
						> Hi,
						>    My company purchased ActiveLedit a few months ago. So far it's good 
						> and meets the client requirements. . We have a client who's trying to 
						> enter some special characters through the word editor but doesn't know 
						> what keys to use. The problem is symbols for deg, +/-, gte, lte, etc 
						> Any feedback will be greatly appreciated. Thanks.

021025	CHANGE	LGP			Fix LedLineItMFC so it can build. Had to fix _V6.dsw workspace. Also - had to
		(1152)			have an SimpleTextImager::MakeDefaultPartition () override since its pure virtual
						in base class now (a change made a couple weeks ago).

021025	CHANGE	LGP			Fixed/cleaned up code in ActiveLedItControl::OnDraw and
		(1150)			ActiveLedItControl::OnSize in prep for solving SPR#0678. And - in LedItView - put in new
						hardwired SetDefaultWindowMargins calls. WILL REPLACE (in SPR#0678) with OLE AUT
						API for setting margins.
							Retested SPR#1122 to see if this has helped, and it didn't (though I've annotated
						that SPR with more clues).

021025	FIXED	LGP			Major amount of text changes (though all trivial) in many OLE property
						accessors to lose asserts about m_hWnd and sometimes repace with
						THROW_IF_NULL_EDITOR(), and lots more wrapping with try/CATCH_AND_HANDLE_EXCEPTIONS -
021024	REPORT	KGEIGER	> From: Kenneth Geiger <kgeigermd@hotmail.com>
		(1151)			...
						>3) The control causes Visual InterDev 6.0 to crash whenever its not
						>"viewed as text" while editing a ASP script. 

021025	FIXED	LGP			Was a bug in WaterMarkHelper<>::MyTrivImager::GetLayoutMargins
						encouraged by bad docs in WordWrappedTextImager::GetLayoutMargins.
						Both have been corrected.
021025	REPORT	LGP			Watermark in ActiveLedIt - when moving it around embedded in
		(1149)			LedIt - was getting messed up. Size/position of watermark should
						remain fixed relative to ActiveLEdIt window - but seemed to depend
						on where embedding was moved.

021024	FIXED	LGP			Fix LedIts COleInsertDialog code to assure that we can insert ActiveX
						controls - like ActiveLedIt. I thought that USED to be the case - but somehow
						it doesn't appear to be. Anyhow - now it works fine. Already HAD removed item from
						the Edit Menu.
021024	REPORT	LGP			See why LEDIT doesnt allow inserting an instance of ActiveLedIt from its
		(1148)			InsertOLE object command. Also - lose Insert OLE object from EDIT menu now that
						we have an INSERT menu

021024	FIXED				Done for LedIt (see SPR#0680). Didn't bother implementing for LedLineIt, cuz I think
						it already looks fine (at least on Win). Opened new SPR#1145 to track "Page View" feature.
020922	REPORT	LGP			Increase the size of the whitespace margin used for LedIt/
		(1107)			LedItIt (maybe activeledit/others as well?). Too pushed up against
						the side. Maybe also implement "Page view" as is done with other editors
						(MS Word)?

021024	FIXED				I didn't yet rewrite the ruler code - but found it wasn't hard to change to respect
						the new margins. Looks a bit better. Did for all 3 platforms, but only tested on Win so far.
010830	DEFER	LGP			DEFER for Led 3.0
991223	REPORT	LGP			Re-enable LedIt! DefaultWindowsMargins code (for LHS). Currently disabled cuz must
		(0680)			adjust Ruler positioning at the same time. Do when I rewrite the Ruler code. See SPR#0681.

021023	FIXED	LGP			Trouble was when you declare an auto_ptr<T> where T is a declared
						but not defined class. I think its a bug with GCC - cuz the template
						does a typedef of the type T - and I think GCC doesn't like that.
						Anyhow - worked around the bug by defining qAutoPtrBrokenBug and using
						Led_RefCntPtr<T> instead.
							To make this easiler - I also added some compatability APIs to
						Led_RefCntPtr<T> to make it easier to use where an auto_ptr<T> had
						been used before. Generally useful - I think.
021023	REPORT	LGP			std::auto_ptr<T> sometimes doesn't work for GCC.
		(1144)

021022	FIXED				Add support for writing \clcbpat.
021022	REPORT	LGP			Open file "1114\TX Text Control DEMODOC.rtf". Scroll to end. Select
		(1140)			huge table. Delete. Undo. Note how the background colors are lost. This
						isn't being written to the RTF. Make sure all READ properties are also
						written (maybe this is the only one)?

021022	FIXED				Really fixed as SPR#1119 - and about the next 10 SPRs after
						that were bugs in, or spinoffs of the original implementaiton.
020922	REPORT	LGP			Implement semantics (which MSWord appears to require,
		(1110)			and therefore so does RTF),	that tables can have nothing
						to their left or right (in the flow of text). Only
						(we dont support them)placed or positioned tables can do that
						(then the text flows around them).

021022	FIXED				The trouble is that my display code didn't handle tabs correctly. Maybe
						the display did - but the measure code didn't. Anyhow - not worth worrying about.
						There shouldn't be tabs there anyhow. So strip them in
						StandardURLStyleMarker::GetDisplayString ().
021021	WORKING				I didn't have access to this file (temporarily) and tried to reproduce
						it myself and couldn't. Try again when I have access.
021018	REPORT	LGP			File SPR_1131.rtf - bug is that display of hyperlinks is broken
		(1131)			(at least in this context). I did something to 'fix' the display of
						embeddings with respect to scrolling a while ago (since 3.0 I beleive).
						Look into that and see if that is related.

021022	FIXED	LGP			I over stated things. <PARAM> text works fine - but you just need to take into account the
						extra level of interpretation of entity-references etc. I wrote a new procedure -
						EncodeStringForHTMLAttribute () - to use from scripts when dynamically generating
						<PARAM> values for ActiveLedIt controls. I updated all the sample code (ASP samples) and
						updated the ActiveLedIt Reference manual.
							Also update website sample.
021021	WORKING	LGP			OK. NOT A BUG. Because the text doesn't appear in scripting quotes - its legit for the
						web browser to interpret entity refs etc. Basically - this is just not a good place to
						stick text. Better to stick them in quotes and use the OnLoad mechanism.
							This could also - through more rarely - affect RTF (say if there were HTML tags or entity refs
						in the RTF - say as plain text.
021021	WORKING	LGP			I've nearly gotten to the bottom of this. The trouble is that SOMEONE (still dont know who)
						is mapping the &lt; entity reference to a '<' character. My guess is that MSIE is doing
						this conversion.
							There is really NOTHING I can do about this if there is no other way to get at the original
						<PARAM> argument data. Perhaps post to the usenet about this, and read on the net first.
							If I cannot work around the problem, then just note it in the documentation. Either way- let
						Jessica Lee know about it.
021017	NOTE	LGP			Created file SPR_1130.htm which reproduces the problem. Opening the file
						you just see the text "2" with the stuff after missing.
021017	REPORT	JLee	----- Original Message ----- 
		(1130)			>From: Jessica Lee 
						>To: 'Lewis G. Pringle, Jr.' 
						>Sent: Thursday, October 17, 2002 12:11 PM
						>Subject: RE: Thank you for your purchase
						>
						>
						>Hi, Lewis, 
						> 
						>Thanks for replying me so fast, I see what you mean, what I’m doing is after 
						>I got the content from ActiveLedIt.TextHTML, I try to display it on next page 
						>inside the param tag of ActiveLedIt object with the code looks like below
						> 
						><OBJECT ID="ActiveLedIt" height="100%" width="100%"  CLASSID="CLSID:9A013A76-AD34-11D0-8D9B-00A0C9080C73" CODEBASE="ActiveLedIt_3.0.1.cab#version=48,5,1,1">
						>            <param Name="TextHTML" Value='2 &lt; 3'>
						></Object>
						> 
						>I’ll try what you said, see if it can replace the code I have now, 
						>I’ll let you know, thanks!

021021	Fixed	LGP			Added support for LedIt. Still must add support for ActiveLedIt, etc, and
						test on other platforms (SPR#1137). Also support PICTURE embeddings (when
						you have selected a picture, change cmd-name/text to add URL props
						to picture (SPR#1138).
021021	REPORT	LGP			Add an "Add URL" menu item to the insert menu.
		(1136)

021021	FIXED	LGP			Add SummarizeFontAndColorTable method to StyledTextIO::SrcStream and use
						that to generate RTF color and font tables.
021020	NOTE				I THINK all the above bugs are just the recursivewrite font/color
						tables problem for RTF.
020924	WORKING	LGP			To fix the remaining problem with writing RTF tables - the font/color
						tables - I WOULD have had to do the recursive grab of font/color info.
							I tried (for several days) todo a (wasted effort - never checked in)
						SubTextStore/SubStyleDatabase/SubParagraphDatabase impelemtation.
							ABANDONED. Instead - do the recursive preflight to compute the
						right font/color tables.
020924	WORKING	LGP			(unsure of date) I think I fixed the mysterious trouble with writing
						RTF (when reading tables from file inserted table obejcts into wrong 
						markerowner). Still must fix RTF writer to compute the right color/font 
						tables before they work even decently.
020924	REPORT	LGP			GOT very basic RTF writing working for tables. Still must fix
		(1135)			code so it correctly computes font/color tables (recursively). Must
						add more attributes (at least ones we read now). I THINK there is a
						bug when we copy a single item (or somehow we invoke the code for
						embeddings. I saw when I fiddled a little with undo - an unknown
						embedding appeared.	Fix all this - and then we should be ready 
						first release (at least this part is ready).

021020	FIXED				Fixing SPR#1128 helped, but there was still a bit of work todo.
						I had to make sure I was just creating one partition object, and be careful
						about the semantics to encourage having one partition used in both the
						ParaDB and the Imager. This code STILL needs lots of code cleanups.
021014	WORKING				The bug APPEARS to have todo with when we create an embeddingWP
						during a DidUpdate call, and then destroy it - it replaces its partition
						of type XXWPPartiion with the WPPartition guy (one associated with
						NO mutlirowtextimager with one that DOES have a multirowtextimager).
							This then doesn't get REVERSED when the WP is destroyed. This COULD
						be a serious bug - butit may go away with SPR#1128 being fixed. So- try
						that and see what happens.
021014	WORKING				Now just open SPR_1129c.rtf, goto end of buffer, backspace over
						the simple table, and do UNDO. ASSERT in DoDidUpdateCalls().
						I tracked it down to the setting into the temp WP object
						of the ParagraphDB. STILL DEBUGGING. Currnetly have many HACK
						changes in the code which I need to remove - just added to DEBUG THIS.
						CAREFUL ON CHECKIN!!!
021014	REPORT				Open file SPR_1129.rtf. Select all. Copy. Goto END (empty sel).
		(1129)			Paste. Assertion error in TextStore::DoDidUpdateCalls ().

021020	FIXED			<OLDCODENOTE>
							Got rid of MultiRowPartition and MultiRowPartitionMarker. Instead
							just use thier base-class.
							
							Function of keeping cached rowcount etc info is now served by new
							PartitionElementCacheInfo and new PMInfoCacheMgr.
						</OLDCODENOTE>
							This code is VERY preliminary and still quite slow. Needs major cleanup
						and tweeks - but now appears to be fully functional. It took ALOT of
						effort to get this and SPR1129 working perfectly (without assert).
							I THINK they are both OK now.
021018	WORKING				Still not checked in - but I've gotten to an important milestone.
						I've implemented the new PMInfoCache to replace the stuff stored
						in the MRTI PM subclass. I SHOULD now be able to easily get rid of
						that PM code now. The main trouble with checking this in has
						todo with performacne and stability. I've tested a bit - and it seems
						pretty stable. One trick will be to KEEP it stable while I improve
						the performance.
021012	WORKING				Did a tiny bit on SPR#1128. UNDO it for checkin and then
						re-insert the code to work on 1128.
021012	REPORT	LGP			PITA the way MutliRowTextImager requires use of MultiRowPartition.
		(1128)			(SEE SPR#1126).Consider getting RID of this using a separate lookaside
						cache of row info. I suspect this won't be too hard. It may help (a bit)
						RAM usage (since we can keep less info cached), and will help
						modularity / subclassability ALOT.

021014	FIXED				Assume its fixed (though I WILL need to clean up the code.
						Maybe wait til after I fix SPR#1129/SPR#1128.
021014	WORKING				MAYBE now fixed. Checked in at this point. Test a bit more.
021012	WORKING				Worked around a few more symptoms by adding PartHELPER<>::DidUpdate()
						override to do a few hacks. Just it it WORKING for now. Clean up code
						later (esp after fix to SPR#1128).
							I STILL have one more bug I've seen. Open file SPR_1127a.rtf
						and move cursor before two xs. Insert a char, and hit the (forward)
						delete key it. ASSERT ERROR!
021012	WORKING				UGH. Tons of trouble. Had to create new SPR#1128. We created
						PartHELPER<> and XXWPPartition. We SHOULD get rid of
						MutiRowTextImager::MutiRowPartition. That should clean alot of that
						stuff up!
							STILL - I have a workaround for that - but its clumsy - and
						the new partition code is STILL fragile. I've seen SOME ASSERT
						errors remaining - but so far all the existing specified errors
						here have been fixed.
021012	WORKING				Found another bug (TRYING TO REPRO). Much worse bug. Corrupted
						list of PMs. Maybe (probably) caused by multiple SPLIT() calls on a
						single PM from WPPartition::UpdatePartitions. If thats NOT safe,
						then do better (clearer assert) checking in the SPLIT code!!!!
							Insert Table; Insert Table; backcursor (between two tables);
						Insert x;Insert x; Backspace ==>ASSERT ERROR in PartitionMarker::CTOR"
						==> ASSERT ERROR in PartitionMarker::CTOR.
							Related bug is to save file before backspace as SPR_1126a.rtf).
						Then LOAD that RTF file. Crash on load (really on first draw) - assert
						error in invariant code.
021012	WORKING				Fixed THAT bug (WPPartition::UpdatePartitions needs to look one
						back and forward from overlap to see if char entered before/after table).
021012	WORKING				Found one more case that breaks. Insert table. Goto BOF (ie backcursor).
						type x. ASSERT IN INVARIANT () AGAIN.
021012	WORKING				TEST a bit more - but bug appears that we needed to call
						TextStore::SimpleUpdater in StandardStyledTextIOSinkStream::InsertMarker
						whcih was used to insert a table (from RTF - as in UNDO). Then later
						AboutToUpdate calls would call Invariant - and the update hadn't been
						done yet.
							CRAP - SIMONE FOUND HOW TO REPRODUCE A SIMILAR BUG STILL!!!
021012	WORKING				insert x; table; undo; redo; CRASH (DIF THAN BELOW - CUZ
						NEW ASSERT I JUST ADDED - NEW CODE IN INVARIANT.
021012	WORKING				Simpler - "insert x; insert table; Select all; Copy;
						goto end; Paste; select START to end of first table;
						hit backspace key; UNDO"- assert error on the undo.						
021012	WORKING				To reproduce now - "insert x; insert table; Select all; Copy;
						goto end; Paste; Paste; select second x to end of second table;
						hit backspace key; UNDO"- assert error on the undo.						
021012	WORKING				Better.Fixed (I think) small bug in WPPartition::NeedToCoalesce ().
						This case works - but I saw one more. Still trying to reproduce.
021012	WORKING				Or more simply, "Insert x, Insert table, backspace" ==>ASSERT
						in WPPartition::Invariant().
021012	WORKING				Made LOTS of changes. Now bug is "Insert x, Insert table, UNDO" and
						you get an assert error in WPPartition::Invariant().
021010	WORKING				Note - can also repro with Insert Table, Insert letter X, InsertTable.
021010	REPORT	LGP			Insert Table and letter 'x'. Select ALL. Copy. END-key. Paste.
		(1126)			Note how the second table has an 'x' character in front of it.
						The partition didn't get split.

021014	FIXED
021012	WORKING				REALLY fixed. Checked in fix for OLE object in LedItView.cpp
						of LedIt project (setsel (sel+1) and use UndoableContextHelper).
							ALSO made the same fix in WordProcessor.h, but since I'm in
						the middle of fix for SPR#1126- i cannot check it in yet.
021011	REPORT	LGP			Insert 'x', EMBEDDING, 'x' and then undo twice. Note how
		(1127)			the embedding DIDNT disapear on second undo. Also note lack of
						name 'undo insert embedding or OLE object'. We HAD
						same bug with tables, and I'm debugging that first.

021010	FIXED	
021010	REPORT	LGP			Insert Table and then NL. Get ASSERT error in
		(1125)			WPPartition::Invariant_()

021010	FIXED	LGP			Finished checking for table objects and fixed Invariant_().
021008	WORKING	LGP			Added CheckForSplits/NeedToCoalesce to LineBasedPartition.
						Subclass that with WordProcessor::WPPartition. Then add 
						virtual MakeDefaultPartition to MutliRowTextImager and use
						that to create the partition. Subclass that in WordProcessor
						to create WordProcessor::WPPartition.
							This gets us to the point where the table appears on its
						own line by itself (though it still has some quirks of display
						covered in SPR#1120).
							The other remaining bug is that I only look for SENTINAL
						characters. Need to REALLY check if the sentinal is part of a
						Table. Also - need to redo  WordProcessor::WPPartition::Invariant_().
021008	REPORT	LGP			Tables need to not allow any characters before them
		(1119)			or after them on a line. I think this is a bit kookie, but
						it appears to be what MSWord does, and they define the
						standards.

021009	FIXED	LGP			Fixed
021009	REPORT	LGP			Fix bug with InsertTable cmd - where we get buggy display right
		(1121)			after insert (need todo Aboutto/didupdate crap).
							Inserttable (display messed up) type 'x' and then backspace
						(display fine) <I understand so far- just need the didUpdate crap
						after initial insert) then insert a SECOND table. DISPLAY MESSED
						UP! this I DONT understand. FIX	ALL These troubles (including
						similar issue with paste)

021007	CHANGE	LGP			Misc changes that WERE part of trying to implement SubTextStore
		(1118)			and related code. I may end up (probably will) end up abandoning
						that approach. Still - creating the abstract API for StyledDatabase
						and ParagraphDatabase seems like a good thing todo (though it
						adds a tiny bit of overhead).

021001	CHANGE	LGP			Lose CommandHandler argument to UniformHidableTextMarkerOwner
		(1117)			and other HidableText classes. It was never needed, and turned out
						to be inconvenient in the implemtation of tables.
						<OLDCODENOTE>
							UniformHidableTextMarkerOwner etc constructors no longer take
							CommandHandler* argument. Simply eliminate the argument.
						</OLDCODENOTE>

020928	CHANGE	LGP			In the midst of supporting tables. Get minimal RTF writing
		(1116)			to work. The trouble is that we dont properly compute the
						colortable/fonttable because we ignore fonts/colors from embedded
						tables. This would be relatively easy to fix by adding extra APIs to
						recursively grab all style info, but the problem would DISAPEAR
						when I impelemnt the new table strategy (a sentinal for each
						cell and maybe one for the table, but all the text entered into
						magic SUB-textstore - one where the real text is main
						textstore and the one I build just maps down using offsets into
						the real one.
							I THINK I will give that implementation a try next. Its not
						releasable now (cuz it crashes when you encounter a font/color
						in the table you hadn't seen before). So I'll try to get this
						new organization for the table code working quickly - and fold
						that into my first release (if its not too hard).

020923	FIXED				Created a folder (1114) with a BUNCH of test files. They all seem
						to work pretty well. I fixed the code to now work much better (well
						works the same but organized more according to RTF spec). Now there
						is room in CellInfo/RowInfo struct for f_trrh/f_trgaph in RTF code.
						Open new SPR to handle these attributes (SPR#1115);
020923	NOTE				Did a rather crudy implementation in SPR#1111. Didn't understnad
						the RTF \cellx <celldef> structure too well. Now I think I get it better,
						so I should cleanup the code. One thing I DONT understand yet is the
						bit about groups (if that resets values) or \tcelld etc. But study this
						and cleanup the existing code before I do (or while doing) RTF writing
						code.
							This SPR is a code cleanup of the work done in SPR#1113.
020923	REPORT	LGP			Add another SPR (with a bunch of text files) as a regression
		(1114)			test for all our table support. Move MANY of my existing reference
						tests in there.

020923	FIXED				Did rather crudy implementation. Cleanup covered in SPR#1114. Still -
						basically all my test files open well and look pretty good.
020922	NOTE	LGP			MAYBE fixed but sloppy code. TEST and then cleanup the code.
020922	NOTE	LGP			Got the column problem basically solved. Bug was that we only
						set column width for rows AFTER the first (which usually worked fine
						cuz most tables have more than one row; but not this one).
							Still must implement the background color setting code.
020922	NOTE	LGP			Mostly this is done. See file SPR_1111.rtf (3 column table
						with some colored background from TX Text Control sample).
						The main troubles are that for this file - we don't seem to be
						understanding the \cellx specifications, and we don't yet support
						the background color. If I can fix these two things - I think I'm
						all set.
020922	REPORT	LGP			Get Table code to the point where it looks semi-decent -
		(1111)			justification/margins support for cells/WP,	background color,
						and perhaps properly handling cell-height.

020922	FIXED				Did basic implementation. Table::Invalidate/PerformLayout ().
020922	REPORT	LGP			JUST DID setting MARGINS (OK - not 100%) for cells and next
		(1109)			compute height (at least roughly). Need more elaborate layout
						mechanism!!! Dirty flags etc....

020923	FIXED	LGP			This was also affecting tables (which is where i noticed it again). Trouble is
						that each embedding (including tables) must ask imger->GetHScrollPos () and shift its
						drawing accordingly. The reason it must be done THIS way instead of view adjusting
						the 'drawInto' rects at a higher level is that doing so would compromise the 
						tab layout code.
010830	DEFER	LGP			DEFER for Led 3.0
990416	DEFER
990212	REPORT	LGP		In LedIt, in a document with an icon present, try horizontal scrolling. You will see that
		(1108)			the icon doesn't scroll with the rest of the text.

020921	FIXED				Change table code so Cell stores a styledatabase etc instead of a WP,
						and we dynamically create the WP on an as-needed basis. This saves a HUGE
						amount of RAM. Plus - use SimpleTextStore instead of whatever textstore is
						being used by the main WP. This ALSO saves a huge amount of RAM (and should
						be fine performance wise since I cannot imagine a WP cell being large enough
						to make that a problem.
							Its still a BIT of a memory hog on files with lots of tables, and still a bit
						slow (maybe 2x). Open new SPR #1106 (low pri) to address this.
						<OLDCODENOTE>
							Because the WP class now uses SimpleTextStore, projects building with the WP
						class now need to INCLUDE the SimpleTextStore module.
						</OLDCODENOTE>
020921	NOTE				Try DYNCREATE/DESTROY EmbeddedWPs hack to see if I can get it to
						work and see how much RAM it saves.
020921	REPORT	LGP			NEW Table-reading RTF code is TERRIBLY slow and uses ALOT of RAM.
		(1105)			FIX THIS.(upon closer examination, it appears to be only slightly slower 
						(maybe a factor of 2),but uses DRAMATICALLY more RAM (20x or more).
						This is unacceptable. Look into tricks like delayed creation of WPs
						til they are needed, and then destroy them? Just switch out
						the textstore/databases? Or is that already where all the space
						is used up?

020920	CHANGE	LGP			TONS of cleanups and revised bug defines in LedConfig.h to
						get things compiling on MWERKS(MACOS), GCC(Linux) and BCC(Windows)

020918	CHANGE	LGP			Lose qSupportLed23CompatAPI (and related backward compat API 
						tags like qOldStyleMarkerBackCompatHelperCode, qBackwardCompatUndoHelpers, etc).
						Add new qSupportLed30CompatAPI.

020919	FIXED	LGP			Fixed but untested. Added TrivialImager<TEXTSTORE,IMAGER>::SetBackgroundTransparent.
						I even set the default value based on the GetBkMode()==TRANSPARENT.
020918	REPORT	STERL		Sterl wants TrivialImager<> to have some easy way (property
		(1098)			you can set after CTOR or arg to CTOR)( to specify NOT to draw 
						background. Just override EraseBackground () and do nothing.
						He further suggests this should be the DEFAULT value if the given
						argument table has GetBkColor() == TRANSPARENT. I’m not 100%
						sure about that the latter idea is good just because it breaks
						cross-platofrm behavior.

020919	FIXED	LGP			I didn't bother with the WM_STYLECHANGED part - since my recollection
						is that it doesn't work well - as auto-creating sbars - I believe - keeps
						changing that style. In other words - you cannot easily tell a user-specified
						change from one which is incidentally created by the code when you are in
						scrollbar auto-hide/auto-show mode. Still - this makes it a little more
						convenient for windows programmers to use (a little more likely to do the
						right thing by default).
020918	REPORT	STERL	>The various MFC mixin helper classes should respect the WS_VSCROLL 
		(1099)			>and WS_HSCROLL styles. I added code to my OnCreate override as follows
						>
						>If (GetWindowLong (*this, GWL_STYLE) & WS_VSCROLL) {
						>   SetScrollBarType (v, eScrollBarAsNeeded);
						>}
						>if (GetWindowLong (*this, GWL_STYLE)&WS_HSCROLL) {
						>   SetScrollBarType (h, eScrollBarAsNeeded);
						>}
						>
						>which does the trick.
						>
						>....
						>look at WM_STYLECHANGED in documentation, as you said you
						>are worried about getting notified about style changes. Maybe wont
						>work with the above? Maybe would make it work better?
						>

020918	CHANGE	LGP			Use 'using XXX' isntead of manually overloading/overriding in
		(1104)			TextInteractorMixins. Could possibly do MORE of that - but I at least did
						most of the obvious ones. Encountered fixing SimpleLed stuff as part of
						SPR#1103.

020918	FIXED	LGP			Bug appears to have been a compiler bug. Added new BWA define
						qCannotSafelyCallLotsOfComplexVirtMethodCallsInsideCTORDTOR. Made changes
						to SimpleLed to workaround this bug - overriding OnCreate/OnNCDestroy etc.
							ALSO - it USED to just support PowerPlant or MFC. NOW it also supports
						straight WIN32.
							ALSO - at the same time - re-implemented LedTestWin32 applet to use
						SimpleLed. Now it can trivially switch between a WP and LineEditor. And - more
						importantly - it tests out these classes. And - its a bit simpler for new Led
						users to understand.
							Also - moved extra templates for WP HScrolling and undo code into
						SimpleLed as well.
020918	REPORT	SBROOKS	> -----Original Message-----
		(1103)			> From: Shawn Brooks [mailto:sbrooks@artlogic.com]
						> Sent: Wednesday, September 18, 2002 11:38 AM
						> To: lewis@sophists.com
						> Subject: Re: RE: Thank you for your purchase
						> 
						> Hi Lewis,  I'm not sure what support arrangements we have with you, but
						> I'm seeing a strange problem I'd like your input on.
						> 
						> Using the app wizard tutorial, I put together a quick test app and got the
						> Led stuff working as expected.  However, when I place a member variable in
						> the class deriving from  SimpleLedWordProcessor (in my case
						> MagicScrollView  I get a fault (see call stack below).  Comment out the
						> member variable and everything works again. Adding member functions cause
						> no problems.
						> 
						> Please let me know if you can help.  I'm using the 3.0.1 Led source base.
						> 
						> Thanks,
						> Shawn
						> A&L
						> 
						> Led::WordProcessor::MakeDefaultExternalizer() line 1179 + 178 bytes
						> Led::TextInteractor::HookGainedNewTextStore_() line 1380 + 20 bytes
						> Led::TextInteractor::HookGainedNewTextStore() line 1374
						> Led::StandardStyledTextInteractor::HookGainedNewTextStore() line 499
						> Led::InteractorInteractorMixinHelper<Led::StandardStyledTextInteractor,Led
						> ::WordWrappedTextInteractor>::HookGainedNewTextStore()
						> line 369
						> Led::WordProcessor::HookGainedNewTextStore() line 1045
						> Led::TextImager::SpecifyTextStore(Led::TextStore * 0x0032bc58) line 831 +
						> 13 bytes
						> Led::SimpleLedWordProcessor::SimpleLedWordProcessor(unsigned int
						> 0x00000000) line 167
						> CMagicScrollView::CMagicScrollView(unsigned int 0x00000001) line 39 + 276
						> bytes
						> CMagicScrollView::CreateObject() line 21 + 88 bytes
						> CRuntimeClass::CreateObject() line 140 + 6 bytes
						> CFrameWnd::CreateView(CCreateContext * 0x0012fc54, unsigned int
						> 0x0000e900) line 587 + 10 bytes
						> CFrameWnd::OnCreateClient(tagCREATESTRUCTA * 0x0012f400, CCreateContext *
						> 0x0012fc54) line 619 + 17 bytes
						> CFrameWnd::OnCreateHelper(tagCREATESTRUCTA * 0x0012f400, CCreateContext *
						> 0x0012fc54) line 637 + 22 bytes
						> CMDIChildWnd::OnCreate(tagCREATESTRUCTA * 0x0012f400) line 1050
						> CWnd::OnWndMsg(unsigned int 0x00000001, unsigned int 0x00000000, long
						> 0x0012f400, long * 0x0012f1dc) line 1811 + 13 bytes
						> CWnd::WindowProc(unsigned int 0x00000001, unsigned int 0x00000000, long
						> 0x0012f400) line 1585 + 30 bytes
						> AfxCallWndProc(CWnd * 0x0032a908 {CChildFrame hWnd=0x000b04b2}, HWND__ *
						> 0x000b04b2, unsigned int 0x00000001, unsigned int 0x00000000, long
						> 0x0012f400) line 215 + 26 bytes
						> AfxWndProc(HWND__ * 0x000b04b2, unsigned int 0x00000001, unsigned int
						> 0x00000000, long 0x0012f400) line 368
						> AfxWndProcBase(HWND__ * 0x000b04b2, unsigned int 0x00000001, unsigned int

020917	FIXED	LGP			There is a bug with the RTF spec. It says control words MUST
						be comprised of lower-case characters, but MSWord97 (and Word XP as well)
						still write out tags such as \ApplyBrkRules. Be more accepting of
						crap like this in our reader and recognize it as a control word.
020917	REPORT	LGP			Open the file SPR_1096.rtf sample file. Note the 
		(1096)			text 'ApplyBrkRules' in the document. Open the file with MSWord,
						and note that text isn't there.

020917	CHANGE	LGP			Got much more table support working.
		(1095)			Can now read (some) RTF files with tables and I get the table
						contents read, along with the number of columns/rows handled
						correctly. Still a bit flaky and needs code cleanups, and still
						needs RTF writing, all HTML support and reading of cell and
						table attributes (as well as all EDITING support for tables).
							Still a LONG way to go - but its nice to at least be able to
						read in basic tables!

020910	CHANGE	LGP			Did VERY preliminary first  draft of table support. In LedIt
		(1094)			(Win only so far) I added an Insert menu and command to insert a table.
						I have thought out the basic design after extensive tesing of MSWord
						and TX Text Control. I will use an StyledTextEmbedding object
						with contained instances of class WordProcessor (or something similar).
						Got basic grid display and embedding working.


020908	CHANGE	LGP			Checked in first draft of SpellCheckEngine/SpellCheckEngine_Basic.
		(1093)			Got basic API defined, and is basically working (though no FILE IO yet).
						Still primitive hack implemenation. Next step is to do some UI code
						to get this testable/usable (before I make it work with a REAL big
						dictionary).

020908	CHANGE	LGP		<OLDCODENOTE>
		(1092)				Fix return value of Led_tStrCmp/Led_tStrnCmp() to be int
						rather than size_t. Had to make corresponding change to
						SyntaxColoring code which used these functions.
						</OLDCODENOTE>

020903	CHANGE	LGP			Redid scripts and project files etc so build FULLY with VC++.NET
						projects. Rename old (VC6) project files to _VC6.

020903	FIXED				Did (first cut) installers using InstallShieldExpress
020903	REPORT	LGP			Fix build of installer projects (ledIt and LedLineItMFC)

020903	CHANGE	LGP			new code signing cert

020903	FIXED	LGP			FIXED
020903	REPORT	LGP			code to invoke help no longer  works with MSVC70 (probably an MFC
						change)

020903	CHANGE	LGP			Update Led version# to 3.1 d1
		(1091)


------------------- Released 3.0.1 2002-05-06 - Below ------------------------------

020506	FIXED	LGP			FIXED
020504	REPORT	LGP			up version# in installer (so says 3.0.1)
		(1085)

020506	FIXED				Updated all the demos in the demo code and updated readme docs
						to better explain format of version string.
020504	REPORT	LGP			ActiveLedIt SimpleActiveLedItASP2FromServerDemo.asp DEMO in
		(1086)			DEMOCODE refers to ActiveLedIt! 2.3 not 3.0.

020501	FIXED	LGP			Done - mostly a few implicit type conversions needed explicit call
						to static_cast<> to silence warnings.
020429	REPORT	LGP			FIX warning we get building with MSVC 7.0 for the 3.0.1 release.
		(1082)

020429	FIXED	LGP			I was finally able to reproduce this. It only happens with
						RELEASE builds - and didn't reproduce with DEBUG builds.
							Trouble was calling isspace() in HTML reading code on WIDE-UNICODE
						characters (Led_tChar). Fix was to use little wrapper that checks properly
						for wide/narrow.
020429	REPORT	Blundell>FROM: Carl Blundell [cblundell@celador.co.uk]
		(1081)			...
						> I am trying this out on the 3.0c2 ocx.
						> 
						> The effect can be achieved without my own code on your web site:
						> http://www.sophists.com/Led/ActiveLedIt/ScriptingSampleActiveLedItPage.asp
						> 
						> 
						> If you type chinese using an IME, or by pasting text (I have been using
						> Arial Unicode MS) it all looks fine.
						> 
						> Click GetAllHTML - the HTMl looks good with embedded Unicode characters.
						> Click SetAllHTML and presto! the chinese disappears.
						> 
						> I have now discovered that the RTF version works fine.
						> 
						> This page may be using an older version (although I thought the older ones
						> were not Unicode at all). However, using the Beta 3 ocx, exactly the same
						> behaviour is displayed when I write a similar VB programme.
						> 
						> This control would be wonderful, however, if I can just use .Text with
						> pure
						> unicode strings (as VB uses internally).
						> 
						> I have tried setting the control's TextHTML to the sample you sent below.
						> This does not work either. In fact only two of the characters come out:
						> 
						> Out of this string:
						> &#36889;&#26159;&#19968;&#20491;&#22909;&#30340;&#28204;&#35430;&#12290;
						> 
						> &#22909 and &#12290 work - and reading TextHTML straight after writing it
						> produces:
						> 
						> <html>
						> <head>
						> </head>
						> <body>
						> <p align="left"><font face="Arial" size="3" color="black">&#22909;
						> &#12290;</font></p>
						> </body></html>
						> 
						> Note the space between the two characters - this comes out as a space as
						> well.
						> 
						> The resulting HTML can be reapplied without losing any more characters.

020423	FIXED				FIXED
011129	REPORT	LGP			FOUND A BUG in 3.0 FINAL. SIGH. Would have been
		(1080)			easy to fix too. If anything
						else serious comes up before i announce 3.0 - then fix this as well.
						Trouble is that SHIFT-ENTER is broken. Easy to fix. In 
						WordWrappedTextInteractor::OnTypedNormalCharacter () we must call
						GetSupressTypedControlCharacters/SetSupressTypedControlCharacters to save
						restore old and temporarily disable the flag for the context of the SHIFT-ENTER
						processing. If this does NOT get fixed for 3.0 - consider folding it into
						a 3.0.1 release?

020422	FIXED				I think there is no good reason to write the recomended WMF/EMF format, as they are less likely
						to work cross-platform. I think I now have DIB format working quite well cross-platform.
							Fix to my remaining problems was to write out additional fields: pich, picv, wbmbitspixel, 
						wbmwidthbytes, wbmwidthbytes as recomended in email from Joel Alley [joelall@microsoft.com] as part of
						resolving a query I had opened with them SRX020422602131.
010830	DEFER	LGP			DEFER for Led 3.0
000708	REPORT	LGP			Based on SPR#0700. VERY LOW PRIORITY. Could do a better job reading/writing \pict\ various formats.
		(0811)			I currently write out DIB - instead of WMETAFILE (which RTF Spec recomends). Reason is cuz I cannot easily
						read WMF format portably (mac/UNIX). Also - the code I wrote to create WMF/EMF didnt' seem to work consistently
						with MSWord - or even with my own code. There are probably several bugs here at once. Cuz MSWord 2000 didnt
						seem to behave my itself - when I pasted in a GIF, and tried to just save that as RTF and re-open it - it failed!

020422	FIXED				Largely fixed a while ago - except for problem with SPR#0811. That is now fixed so close this.
						\pict seems to work pretty well in Led 3.0.1.
010830	DEFER	LGP			DEFER for Led 3.0
990415	DEFER
971020	REPORT	LGP		Support Pictures/DIBs/Metafiels, etc, in RTF reader/writer. See spr#0493.
		(0495)	

020401	NOTE	LGP			Tested - this change fixed serious printing bug in LedIt (Win32),
						LedLineIt(Win32), and ActiveLedIt!
020401	FIXED	LGP			Changed Led_MFC_CViewHelper<BASECLASS>::CalculatePrintingRect () to compute
						size differently. Keep old (to preserve witdth and layout), but be sure to update
						HEIGHT of window to page height.						
							In Led_MFC_CViewHelper<BASECLASS>::OnPrepareDC (). do call SetWindowRect() again -
						but only bother to call TabletChangedMetrics if the
						width changes. There is some latent remaining bug when that method is called, which
						I'm not bothering with since i plan to rewrite the whole tablet/printing mechanism after
						3.0.
020401	REPORT	Sterl		MFC printing code cuts off bottom of page. To reproduce (after I simplified)
		(1079)			goto LedLineIt, and open some file with more than a page of text, and then shrink the window
						to 4 or 5 lines. Then print. Note how you get WAY too many pages of text.


------------------- Released 3.0 2001-11-26 - Below ------------------------------

011126	FIXED				Do at the VERY END.
011108	REPORT	LGP			Do a cvs commit -f(force?) to specify a special tag (as well as a cvs tag) to
		(1077)			appear in all the CVS log comments marking the 3.0 release. This is the LAST thing
						we do - when all sources changes are finished (and when we up the version# in LedConfig
						to final release status).

011126	FIXED				Already some work on this is done. Nothing todo with Led release itself.
						So mark this as complete, so I can finish build (before doing rest of web site).
010829	REPORT	LGP			Fixup web site so I can show off new NetLedIt
		(0991)

011126	FIXED				I couldn't find anything that needed updating. Recheck after first trial 3.0 build.
010915	WORKING	LGP			Most of what is really needed is already done. I updated the .inf file.
						Updated some docs. Revise the docs files for C2, and then DEFER the remainder.
990828	DEFER	LGP
990828	WORKING	LGP			I DID change the version# - but probably want to do the rest of this -
						NOT including the minor# in future releases to make maintance easier,
						so leave this bug OPEN.
990722	REPORT	LGP			Fix ActiveLedIt! .inf file. Refe2rs to WRONG file version. Must
		(0617)			fix release docs to note this. Should find some way so this isn't
						constant problem to update. Change the version# we write out there eventually
						to NOT contain Led minor version. And update (build/release) docs so clear when the
						.inf file needs revising.

011126	FIXED
010829	REPORT	LGP			Update installers (LedIt/LedLineIt WIN) to NOT say "(prerelease)".
		(0999)


------------------- Released 3.0c2 2001-11-09 - Below ------------------------------

011109	FIXED
010829	REPORT	LGP			Update/Revise licenses
		(1001)

011108	FIXED				Well - sort of fixed. I've applied a somewhat inelgant workaround to
						the problem to the code in WordProcessorTextIOSinkStream::Flush ().
011108	WORKING	LGP			The bug does NOT appear to affect writing of RTF - just reading.
011108	WORKING	LGP			Created SPR_1074a.rtf - which is more interesting. The file SPR_1074.rtf
						doesn't clearly demonstrate a Led RTF reading bug. If anything - it may demonstrate
						a bug with MSWord (or a quirk/misunderanding of mine about RTF). Anyhow - its
						no matter. The more curious thing is in SPR_1074a.rtf - which is clearly a Led
						RTF reading bug, and which could explain how the SPR_1074.rtf file was created in
						the first place.
011108	WORKING	LGP			Created SPR_1074.rtf to reproduce the problem (a bit smaller)
011108	REPORT	LGP			Based on file 'NetLedIt! Source Readme.rtf' we sometimes get funny paragraph at end
		(1074)			of buffer with wierd centering. Not sure if bug is in LedIt! reader or RTF writer.
						Based on SPR#1072 - but MUCH less serious.

011108	FIXED	LGP			Maybe I was wrong. I tried to reproduce problems - and I could not. Seems fixed
						with just a small change to CheckMarkerBounaryConstraints (). Will test a bit more -
						of course.
011108	WORKING				Partly fixed. But I saw SOME asserts even after this fix so test VERY carefully!
011108	REPORT	LGP			Spinoff of SPR#1074. Follow instructions in the file SPR_1076,rtf,
		(1076)			and create an assert erorr. Appears to be a regression (or additional
						case which was already broken) in SPR#1072.

011108	FIXED	LPG			Noticed the problem DIDN'T occur when I did a NEWDOC inbetween, so looked
						at that code. Just re-set fStleDatabase/paradabase/hiddabletextdatabase to new objects
						on loading new document.
011108	REPORT	LGP			Open file SPR_1012b.rtf. Then - immediately - open file SPR_1038.rtf.
		(1075)			Note the redundant bullet character at the end!	I think the issue is that we
						need to clean out old - default - settings when we clear the buffer???
	
011108	FIXED				I REVERSED my earlier decsion. Instead - I just fixed ParagraphDatabaseRep::CheckMarkerBounaryConstraints ()
						to properly split the style run elements when I needed to change the last part of a paragraph
						style run. This was the best choice because MSWord2k was very inconsistent and quirky about how it
						decided what pargraph info to keep, and my approach is very self-consistent. I just keep the info associated
						with the paragraph terminating character.
							I opened new SPRs#1074,1075 to track much smaller problems that came up as a result of investigating
						this.
							And - I retested SPR data files 1012/1014/1038/1072 to make sure they all looked good.
011108	WORKING				I THINK the first part of the fix is to NOT apply the style info from the following para 
						the preceeding one when merging. I COULD have fixed this code otherwise - preserving those semantics -
						but MSWord2k and WordPad always kept the para info of the preceeding paragraph. In the future - if 
						I change my mind - the fix is to create a new marker region - splitting the preceeding region at the
						start of the given partition element. Maybe not even neceesary to split cuz we may always have the handy
						zero-sized follwoiing marker. Anyhow - I changed it so I now keep the paragraph info from the left.
							But - that creates regressions with SPR#1038. Must fix that - and address a couple other smaller
						issues before this is really done (and before I'm sure I got the right fix above).
011108	NOTE				List of (related) SPRs with test files (so I can test those files for regressions):
								1012
								1014
								1038
								1072
011108	WORKING				New test file - SPR_1072a.rtf - now just reproduces the MarkerCover<> problem. Deal separately
						with the RTF / UNDO problems.
011107	NOTE				A couple problems. ONe is that the code about keeping the stuff to the right maybe wrong.
						In MSWord/WordPad - when you delete an empty centered paragraph just before a left justified
						(deleting the preceeding NL) - you end up with the paragraph preserving its formatting.
							Then - there is the separate bug about updating the entire 'run' of paragraph info instead
						of just the last paragraph.
011107	NOTE				I think the first bug (maybe several) is that
						ParagraphDatabaseRep::CheckMarkerBounaryConstraints () needs to handle merging in LAST
						(going away) marker right if the previous region contains MULTIPLE PMs. Then
						we must use BOTH - and just readjust positions - and don't delete the following
						one.
011107	NOTE				Maybe progress on crash part. Goto end of doc (SPR_1072.rtf) and do a backspace.
						(as usual). Then undo, and got end again, and hit backspace again. THIS TIME - ASSERT
						error!
011107	NOTE				After working on SPR_1072.rtf test file - retest on the original NetLedIt! source readme.rtf
						since the behavior there was slightly different.
011107	NOTE				This was probably broken as part of fix for SPR#1045, 1029, 1010, 1012, 0660, 0762, 1009, 1038
						So - retest all those after the fix (and look at those fixes). Check date range:
						2001-08-27 - 2001-09-26.
011107	WORKING	LGP			I've not been able to reproduce the crash - but I have reproduced
						most of the spooky behavior. I've created a new file - SPR_1072.rtf
						which reproduces the problem(s).
							The problems include:
							o	Move the cursor to the end of the document, and note the section
								is center justified. Open the same document in wordpad or MSWord
								and that section is NOT center justified.
							o	Backspace. Note how the last 4 paragraphs all get center justified (though
								the earlier ones may need a 'refresh' - resize window to get displayed that
								way). The bug here is almost certainly with the changes I made to the MarkerCover<>
								code. Also - some maybe related to the changes to the StyledTextIO_RTF reading code
								for handling a NL at the end of a document.
							Note - this same bug reproduces in c1, but not in b9. Though - the RTF reading in b9
							wasn't quite right either.
011107	REPORT	LGP			GOT SOME SPOOKY CRASH IN LEDIT 3.0c2x doing editing
		(1072)			(copy/paste at the end of the ActiveLedIt! ReadMe.rtf document.
						Something todo with paragraph info (word processor/alignment
						stuff. Crash - and oether weird behavior. TEST CAREFULLY
						AND FIX BEFORE RELEASE!!!)

011107	FIXED				Made several small docs/copy script changes/fixes because of this.
011106	REPORT	LGP			Doing a trail C2x build to make sure everything looks OK (scripts
		(1071)			copy right files etc).

011106	Change	LGP			Fixed LEDIT / LEDLINEIT app docs to handle ' CHAR in comments (used numeric entity ref
						- but must find the #!!!). A few other very small doc cleanups.

011106	FIXED				But still must test a bit when I do a trial C2 release.
011106	WORKING				Mostly done for ActiveLedIt! (didn't really write docs about
						HOW to revise GUIDs etc just said it must be done, and to ask
						Sophists if they don't know how).
010915	REPORT	LGP			NEED NEW ACTIVELEDIT SRC ReadMe doc. Must say how to combine with Led WIN32 sources,
		(1026)			 to do a build, and how to change GUIDS to avoid conflicts. Similarly for NetLedIt.

011106	FIXED	LGP			Really fixed a while back. Is part of the docs and sample code code ActiveLedIt.
011020	NOTE	LGP			This already exists. I just tested it - and it seems pretty good. Look into
						this more carefully, and assure its part of the package release and docs.
010829	REPORT	LGP			Do a simple VB test application (preferably with OPEN/SAVE dialog -
		(0985)			 but not critical). MUST be part of redistributed package for ActiveLedIt! customers.

011020	FIXED				Did tons of revisions (including fixes to AutoDoc). Now looks
						pretty good. Vastly better than 2.3 release. Opened SPR#1069 to
						track ongoing issue of improving reference docs.
011019	WORKING	LGP			Did lots of revisions as part of SPR#1068.
011017	WORKING	LGP			Have done tons - doing tons more.
011016	REPORT	LGP			Do TONS more DocComments for methods and classes throughout Led.
		(1067)

011020	CLOSED	LGP			Dup of 1067 (and fixed anyhow)
990721	DEFER	LGP
970723	DEFER	LGP			Defer, and probably do in Led 2.3.
970722	UPDATE	LGP			Added quite a bit more.
970715	UPDATE	LGP			Alot more todo, but I did alot of this in the last few hours. Much more respectable.
970712	REPORT	LGP			See #0459,#0460. Further embellish the Led sources with AutoDoc comments. I've
		(0461)			made a decent start at it. But there is a long way togo before these are truely
						helpful, and complete.

011020	CLOSED	LGP			Dup of 1067 (and fixed anyhow)
970723	DEFER	LGP			Defer, and probably do in Led 2.3.
970710	NOTE	LGP			Alot of work done on this for Led 2.2. But still more could and should be done.
						So leave it open.
961205	DEFER	LGP			Defer, and probably do in Led 2.2.
961205	Working	LGP			Improved a bit, enuf for this release, and do more for 2.2.
961030	REPORT	LGP			Generally update/improve both User and Programmer Led docs for 2.1.

011019	FIXED	LGP			Added FAQ#25 to cover this.
991222	REPORT	LGP			Update the Led docs / FAQ or somethign - wtih stuff from this help comments
		(0676)			>-----Original Message-----
						>From: m.pritt@epixtech.com [mailto:m.pritt@epixtech.com]
						>Sent: Wednesday, December 22, 1999 4:58 PM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: RE: Soft-returns
						>
						>
						>
						>Lewis,
						>
						>When on a marker boundary (i.e.
						>
						>   in the text "hello"  with the text 'he' is marked with a special marker
						>and "llo is marked with another tag"
						>
						>how do I specify when I start typing which marker is the one to be
						>expanded?
							You may want to look at http://www.sophists.com/Led/LedClassLib/ClassLibDocs/ReferenceManual/Marker.html
							Markers are defined by points BETWEEN characters. And so when you position the cursor between two characters, and have a marker at that same position, the characters typed at that position go into the FOLLOWING marker.
							This is not always convenient. Its convenient about 95% of the time. For the rest of the time - override AboutToUpdate/DidUpdate () methods - either on the marker - or MarkerOwner - to adjust the bounds of markers you want to behave differently.
						>In some situations fields (i.e. bounded by the markers) are right next to
						>each other.  For instance if the cursor was between the
						>'h' and 'e', and I move the cursor right so that it is between the 'e' and
						>'l', then the first marker should be expanded.  If the cursor
						>was between the two 'l's and I move it left so that it is between the 'e'
						>and 'l', then the second marker should expand.
							I'm not sure I understand your point here. You think moving the cursor should expand markers? Or you mean move the cursor and then type?
						>I've been looking at the code but not sure where to implement any function
						>overrides.
							As I said - you want to first understand the way Led markers work. I hope the docs above will do that. Then - you can easily override this behavior via overrides to AboutTo/DidUpdate methods (of either Marker or MarkerOwner - depending on what you want to do and your application logic - and where you have the right knowledge/data to decide how to adjust the markers.
							As an example of this sort of thing - consider looking at StandardStyledTextInteractor. Note that in LedIt! - you can click on a text boundary between bold (on the left) and plain (on the right). And Led will pick up the style on the left side and extend it to the right (counter to how I explained markers behave naturally).

011019	CHANGE	LGP			Tons of changes. Rewrote DesignManual, and cleaned up all the
		(1068)			rest of the ClassLibDocs so I think they are ready to ship (or
						very close). Still more todo on 1067... But probaby no more
						really needed.

011017	FIXED				Did a MAJOR cleanup of the AutoDoc generated HTML. It now uses
						style-sheets. It looks much better, and is much clerer, but to be at
						its best - all the various Led headers/sources must have their doc-comments
						fixed to assure they wrap paragraphs in <p>/</p>.
011015	REPORT	LGP			NOTE THAT some autodoc generated files have garbaged html (centering
		(1066)			when they shgould not). For example - TextImager.cpp has this problem.
						Maybe not a problem wtih AutoDoc - but with the content of comments not
						having balanced comments?

011016	CHANGE	LGP			WORKING ON REVIEWING and fixing few remaining problems
		(1064)			with RECIPIES/FAQ file. FIXED.

011016	CHANGE	LGP			Add item to FAQ listing (roughly) what files depend
		(1063)			on what - and what todo about linker errors (got xxx
						linker error - what do I do?)

011016	FIXED	LGP			Major revision of this tutorial. I chose NOT to do what Simone suggested -
						adding pre-built project files. That would prevent using the AppWizard. Someone
						who wants a prebuilt project can look at LedIt, LedLineIt, or LedTestWin32.
							I DID rewrite alot of this to make it clearer and simpler. I improved
						the 'SimpleLed' classes. I provided one for word-processor and one for
						line-editor.
970727	DEFER	LGP			Defer, and probably do in Led 2.3.
970727	REPORT	Simone		For CRichEdit / AppWizard tutorial, simone thinks I should provide pre-built
		(1062)			project file. I don't think this is quite right. But maybe close.
						Think about for next release

011015	FIXED	LGP			Fixed. Rewrote most of this documentation (partly spurred by feedback from
						customer Michael Howes.
991224	REPORT	LGP			See spr#0673. Major revision of SyntaxColoring tutorial needed. Most of this functionality has
		(0681)			now been incorporated into Led. We still want the tutorial, so that people know how to use and
						extend it.

011013	CHANGE	LGP			Moved some code from Led_MFC's Led_DrawText<> / Led_GetTextExtent<>
		(1059)			templates to shared code in LedHandySimple - GetTextExtent<>/DrawTextBox<>.
						Reimplemented the Led_MFC routines based on the new LedHandySimple ones.

011013	FIXED				Tested instructions on LedIt! Mac / PC, and LedLineIt! Mac/PC. Worked
						fine (at least decently).
011011	WORKING				Mostly done. Did PC test a while ago and updated docs. Now nearly
						done testing the MacOS conversion process. Made a few fixes to MacOS
						(and PC - for that matter) backward compat code.
011006	WORKING
						>>> MADE A COPY OF LEDITMFC FROM 2.3 PROJECT
							o	First rebuildall (at same top level relative to Led) Lib should build fine
							with a warning or two, but then app will fail left and right.
							o	Add define qSupportLed23CompatAPI=1 to ALL CPP flags and rebuild all.
							o	If you have the define qExtraWordWrapDebugging specified (usually in the project
								settings for CPP), then change this to qHeavyDebugging
							o	If you have any calls to GetMargins ()/SetMargins (), make sure
								the use the type Led_TWIPS instead of Led_Distance. For example,
								in LedItView::GetParaFormatSelection () - change the lines:
									Led_Distance	lhsMargin	=	0;
									Led_Distance	rhsMargin	=	0;
									Led_Distance	firstIndent	=	0;
								to:
									Led_TWIPS	lhsMargin	=	Led_TWIPS (0);
									Led_TWIPS	rhsMargin	=	Led_TWIPS (0);
									Led_TWIPS	firstIndent	=	Led_TWIPS (0);
							o	Because of quirks (bugs) with the MSVC include files and MFC, and
								because of the fact that some Led header files #include <windows.h>
								(perhaps indirectly) - you may need to include <afxwin.h>
								before the Led includes in LedItDocument.cpp (and perhaps others
								of your files).
							o	If you override InternalizeBestFlavor () - you must change your code
								significantly. It maybe you can simply DELETE your override, as it
								may no longer be needed. If it is needed, you must override the
								MakeDefaultInternalizer() method instead, and create your own
								subclass of WordProcessor::WordProcessorFlavorPackageInternalizer (or whatever
								was being built by your base class) and subclass that (which is where
								you now override the InternalizeBestFlavor).
								If you use WordProcessorCommonCommandHelper_CLASSLIB - as described below -
								this is done for you automatically.
								In the case of the LedItView::InternalizeBestFlavor override,
								it can simply be deleted.
									NB: for pasting of OLE embeddings to work with LedIt! 2.3 sample code - you
								must do one of these.
							o	Calls to AddEmbedding () require an extra argument - the
								StyleDatabase. So for example, in the LedItView::OnInsertObject ()
								call to AddEmbedding () - append the final argument
								GetDocument ().GetStyleDatabase () as in:
									AddEmbedding (pItem, GetTextStore (), GetSelectionStart (),
										GetDocument ().GetStyleDatabase ()
									);
							o	To fix the LedIt! sample code, fix RulerToolbar.cpp: RulerBar::Update
								delete calls to Led_CvtToTWIPSH and Led_CvtFromTWIPSH () (replace the
								calls with their argument).
								In call RulerBar::FillInParaFormat ()- replace Led_CvtFromTWIPSH with
								Led_TWIPS where we append to the vector 'v' and make the type of vector v
								vector<Led_TWIPS>. And a few other places replace Led_CvtFromTWIPSH () with
								its Led_TWIPS conversion.
							o	Consider using new WordProcessorCommonCommandHelper code to implement new shared
								code for supporting commands. See the LedIt! sample code for an example. But basically,
								you copy the struct	LedItViewCMDINFO and LedItViewCommandInfo declarations.
								Then inherit from WordProcessorCommonCommandHelper_MFC <LedItViewAlmostBASE, LedItViewCommandInfo>.
								(or _PP if you are using PowerPlant).
						>>> MADE A COPY OF LEDLINEITMFC PROJECT
							o	First - rebuild all at top level (lots of errors in app but none in library).
							o	Add define qSupportLed23CompatAPI=1 to ALL CPP flags and rebuild all.
							o	In LedLineItView.cpp, LedLineItView::CTOR ()- fTabStopList (of type SimpleTabStopList)
								now takes a required argument. Change:
									fTabStopList ()
								to:
									fTabStopList (Led_TWIPS (1440/3))
							o	SimpleTabStopList::fPixelsPerTabStop ==> fTWIPSPerTabStop
								Change:
									fTabStopList.fPixelsPerTabStop = kCharsPerTab * GetFontMetricsAt (0).GetMaxCharacterWidth ();
								To:
									Tablet_Acquirer	tablet_ (this);
									Led_Tablet		tablet	=	tablet_;
									fTabStopList.fTWIPSPerTabStop = tablet->CvtToTWIPSH (kCharsPerTab * GetFontMetricsAt (0).GetMaxCharacterWidth ());
							o	Changed signature of TextInteractor::OnTypedNormalCharacter ()
								In LedLineItView.cpp, change
									void	LedLineItView::OnTypedNormalCharacter (Led_tChar theChar)
									{
										inherited::OnTypedNormalCharacter (theChar);
								To:
									void	LedLineItView::OnTypedNormalCharacter (Led_tChar theChar, bool optionPressed, bool shiftPressed, bool commandPressed, bool controlPressed, bool altKeyPressed)
									{
										inherited::OnTypedNormalCharacter (theChar, optionPressed, shiftPressed, commandPressed, controlPressed, altKeyPressed);

011006	REPORT	LGP			Try convering some sample apps from 2.3 to 3.0. Be sure
		(1057)			we have good docs on how todo this.

011009	CHANGE	LGP			Based on SPR#1057. Added more Led backward compatability support (based on
		(1058)			compiling 2.3 versions of LedIt and LedLineIt MFC). Mostly these were #including
						new module .cpp files if qSupportLed23CompatAPI was turned on.

011006	FIXED	LGP			Had to do kludge workaround in LedIt's LedItApplication::CTOR - moved
						call of AddStadnardTypes () back to InitInstance () (MFC ONLY). Opened
						SPR#1055 to cover this kludge, and maybe clean it up in the future.
							Opened SPR#1056 to cover issue of MSWord2k support.
011006	REPORT	LGP			FIX LED URL OBJECTS SO THEY WORK WITH MSWORD2k (RTF)
		(1054)			and MSIE 6 (D&D). Not CRITICAL for 3.0 - but would be very nice.

011006	FIXED				Fix WaterMarkHelper::MyTrivialImager::EraseBackground () - renable
						the override to do nothing (and revise comments so clearer why its
						OK.
011006	REPORT	LGP			SERIOUS BUG that has to be fixed for C2. In ActiveLedIt!,
		(1053)			if the background is not the standard color (e.g. grey -
						like the background of some of the web pages) then the drawing
						of white from the DemoMode (or someplace/???) interferes and
						occasionally displays white as you type. Seems pretty
						reproducible if you simple CLICK at the END of a line in
						the "DEmo Mode" area.

010928	FIXED	LGP			I couldn't reproduce exactly the performance problem Remo described.
						But - I did find that opening the large doc (SPR_1052.txt) he sent me, and
						scrolling down from the TOP using the mouse drag select was much slower than dragging
						up. The trouble was that the mouse dragging code returned a target
						position to scroll to of ENDOFDOC, and internally, the code ended up calling
						Partition::GetPartitionMarkerContainingPosition () with ENDOFDOC offset. This
						wasn't wrong - but it had the side effect of making much less effective the
						caching that code did.
							I added a fPartitionMarkerLast field to the Partition object, and used
						that in the Partition::GetPartitionMarkerContainingPosition () code. That made
						things much faster.
							My only worry - at this stage - is that I correctly handled all the cases of updating
						the fPartitionMarkerLast field. I'll test a bit, but hopefully I got it.
010928	REPORT	REMO	> -----Original Message-----
		(1052)			> From: Remo Eichenberger [mailto:remo.eichenberger@datos.ch]
						> Sent: Friday, September 28, 2001 11:16 AM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: speed of scrolling up with mouse ?
						> 
						> 
						> when i load a file with 150'000 lines with LedLineit and go with the
						> selection in the middle of the text and press cursor up and scrollup then
						> this is very fast, but when i use the mouse to scroll (not cursor up) then
						> it is much slower. do you know why ?
						> 
						> btw. the speed of scrolling DOWN with the mouse is very fast.

010928	FIXED	LGP			Added 'forceShowSelectionEndpoint' flag to
						TextInteractor::ScrollToSelection () and change call in
						TextInteractor::DoSingleCharCursorEdit () to specify that flag.
							Made TextInteractor::ScrollToSelection () method nonvirtual since
						didn't appear to be needed as virtual (already a hook method - selchange),
						and any subclassers would just run into trouble cuz we changed signature
						anyhow.
010928	REPORT	Remo	> -----Original Message-----
		(1051)			> From: Remo Eichenberger [mailto:reeichenberger@tiscalinet.ch]
						> Sent: Friday, September 28, 2001 4:14 AM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Another Bug ....
						> 
						> 
						> hi lewis
						> 
						> i now use your latest RC1 but this bug is already in past betas ...
						> 
						> 1) Start LedLineIt
						> 2) Load a file that is greater as a few pages.
						> 3) Press CTRL-END
						> 4) Press Shift-CursorUp and stay pressed down
						> 
						> you see the window ist not scrolling down ... only when you press CursorUp
						> without Shift.


------------------- Released 3.0c1 010926 - Below ------------------------------

010926	CHANGE	LGP			qInternalErrorWithStaticRegionDeclaredInFunction added to work around Borland
		(1049)			C++ Builder 5.5 compiler bug.

010926	FIXED				Much improved. More room for improvement (see SPR#1048)
010915	REPORT	LGP			LEDIT/LEDLINEIT DOCS FILES (at least minimal cleanups)
		(1034)

010926	FIXED				Pretty good now.
010918	WORKING				Did some cleanups.
010917	REPORT	LGP			Go through compiler output - and cleanup (most) compiler warnings.
		(1035)

010926	FIXED				The display code was already portable to X-Windows (since I rewrote
						it a few week ago). The trouble was that the
						EmbeddedObjectCreatorRegistry::Get ().AddStandardTypes () routine
						wasn't being called in LedIt! for X-Windows. Moved that call into
						common portable code. Also - fixed that routine to NOT add
						DIB display embedding objects, since THOSE are REALLY not supported
						yet.
010829	REPORT	LGP			Fix display of URL objects (Led ReadMe.rtf file) on Linux.
		(0996)

010926	FIXED				must reset windowrect on each event passed to plugin on MacOS in case Netscape
						window has scrolled (else we dont seem to get notififed)
010925	REPORT	LGP			Mac NetLedIt! bug when you scroll the encloding HTML doc. The editor
		(1046)			doesn't display properly. This is likely due to the SetPort () change I made
						to SPR#1042?? Or something like that.

010926	CLOSE				Could not reproduce. Probably fixed by EraseBackground () fix from
						a couple days ago.
010925	REPORT	LGP			When Mac NetLedIt! (Mac) window first displays, there is a bit of flicker.
		(1047)			This is a small enough matter, we may DEFER for Led 3.0.

010925	FIXED				fix TextInteractor::DoSingleCharCursorEdit () to ignore smart-cut-and-paste
						flag when backspacing over text (with empty selection).
010924	REPORT	LGP			Bug introduced with latest smart-cut-and-paste code. Type "good t" and then
		(1044)			hit a backspace key. Deletes BOTH the t and the space. The backspace key shoudln't
						do that!

010926	FIXED				I tested ActiveLedIt, and NetLedIt! Win, and NetLedIt! MacOS. Actually
						this was fixed a few days ago as part of EraseBackground fix (earlier).
010925	WORKING	LGP			Test a bit - but this is mostly fixed as part of SPR#0993.
010830	DEFER	LGP			DEFER for Led 3.0
010829	REPORT	LGP			NetLedIt DemoMode flicker (has tood with SBAR code??)
		(0989)			(and worse - with ActiveLedIt! - when you scroll up and down its a bit flaky sometimes)

010925	FIXED				Apparantly - together with other previous changes - the SPR#1045 was all
						that was needed. I'm not 100% sure its perfect, but its at least very good now.
						CLOSE.
010925	WORKING				Think much of the remaining problem is really due to SPR#1045. Work on
						that for a bit, and then come back to this.
010924	WORKING				trying to fix this.
010830	DEFER	LGP			DEFER for Led 3.0
010829	REPORT	LGP			Assure no more quirky behavior on mac with scrollbar position when you transition
		(0993)			from displayed to not in autoshow mode. in NetLedIt!_MAC

010925	FIXED
010925	NOTE				Look into fix for SPR#0969 - I think that maybe relevant! But be VERY careful
						not to break what that had fixed in fixing this!
010925	NOTE				This is a regression since Led 3.0b8 (first appeared in Led 3.0b9).
010925	REPORT	LGP			The last character a lineheight that ignores the 'empty selection'
		(1045)			font specification, and just uses value in the currently unused section
						of the MarkerCover<>.
							To reproduce, open file SPR_1045.rtf, and 

010924	CHANGE	LGP			New Region support. Added Led_Tablet_::ClipNarrowAndRestore
		(1042)			and greatly improved Led_Region support. Added Led_Tablet_::Get/Set Clip
						methods. Make the region code much more portable (at least MacOS/Win32 - not yet
						tested on X-Win - but should only work there if not used - cuz no X-Win region
						support yet in Led).
							A bunch of new operators (e.g. operator* for intersection).
							See SPR#1043 for info about Get/SetClip/ClipNarrowAndRestore.
							This work was originally inspired by my attempts to debug SPR#0989 - but
						turned out to be irrelevant.

010919	FIXED				call cpc.SetHandleBOM () in StyledTextIOReader_PlainText::Read ()
010919	REPORT	LGP			OPEN UTF8 filein ledit - (.txt file) - LedIt! Win32 (e.g. new LedBugs
		(1041)			file).

010919	FIXED				I fixed the specific complaints, as well as a few more. I opened (and defered)
						SPR#1040 to cover the general ugliness/quirkiness of the design
						and implementation.
010919	WORKING	LGP			I made a few changes to this algorithm, but its fundementally broken. I don't
						have a good clear definition of what I'm trying todo. Its a bunch of
						touchy-feely empirical kludges. It FEELS better to me now, but I
						should test more, and then open a new SPR (lowpri) to revisit the issue
						later.
010918	REOPEN	LGP			I now can reproduce the problem. The trouble is - select and cut text which
						has as its initial character a space character. Then paste it someplace that already has
						a tab before it. I think - in this case - we should lose the space at the start of what
						we are pasting. I THINK so anyhow. Not so clear. Maybe we'll just defer this since its
						not clearly a bug.
010915	CLOSE				Couldn't reproduce. I suspect there is no such bug.
010915	REPORT	LGP			FIX SMART PASTE NOT TO INSERT SPACE IF PREV CHAR IS A TAB CHAR
		(1031)

010919	FIXED				ParagraphDatabaseRep::CheckMarkerBounaryConstraints () must keep the
						paragraph info from the second ofthe combined markers (info associated
						with the terminal NL)
010919	REPORT	LGP			Regression in undo code (cuz of RTF/para info changes made).
		(1038)			See file SPR_1038.rtf

010919	FIXED
010919	WORKING				Added Led_StdAlertHelper and added support to NetLedIt. Must test.
010919	REPORT	LPG			CATCH EXCEPTIONS/REPORT THEM ON MENU COMMANDS (like failed paste
		(1039)			on MacOS cuz not enuf mem) in NetLedIt.

010919	FIXED
010919	WORKING				Implemented for LedLineItPP and NetLedIt! - but must test.
010919	WORKING				Fixed TmpMem code on LedIt!. Still must fix other apps and test a bit. Took
						hours of pouring through MWERKS CW7Pro code, but eventually figured out what I need
						todo. Just provide replacement versions of __sys_alloc/__sys_free/__sys_pointer_size.
010915	REPORT	LGP			SEE IF NETLEDIT CAN/SHOULD USE MACOS TMPMEM... ALSO TEST
		(1030)			LEDIT AND LEDLINEIT MACOS.

010919	FIXED				See SPR#1030 - but fixing the memory allocation code sped things up quite a bit.
						There is still alot more todo, but now the performance is very reasonable (not quite as
						good as PC - but still good). Close this, and for the next release, as always, I'll
						review performance. NOTE - the tools on MWERKS for profiling (at least on the Mac)
						are MUCH better than those which are part of MSVC 6,0 on the PC (and I found NO profiling
						tools that worked in MSVC7(.net).
010918	WORKING	LGP			Tweek (hold reference) to WordProcessor::GetMargins () to avoid CTOR/DTOR
						of the tabstop list inside the ParagraphInfo record. Shows up as significant
						in MacOS/MWERKS profiling (paste several copies of ReadMe.rtf doc into window
						and then type for a while at the end of the doc).
010918	WORKING	LGP			Added SPR#1037 to track a new performance problem (will DEFER that
						for Led 3.0).
010918	WORKING	LGP			Added MarkerOfATypeMarkerSink<MARKER> template and used that
						in MarkerCover<>::GetInfo instead of CollectAllInRange () to avoid
						messing with vector CTOR/DTOR and copying. Came from MacOS profiling,
						but should help PC as well
010915	REPORT	LGP			TEST PERFORMANCE ON LEDIT TYPING ON MACOS
		(1029)

010918	FIXED				Added (used common code and fixed some mac-specific parts) to support this option, and a
						couple others (e.g. smart cut and paste).
000616	REPORT	LGP			For LedIt! Mac- enable shutting off of wrap-to-window code - even if we have no
		(0791)			ruler support. That way - we can at least VIEW the text properly - even if I cannot
						do new para-style setting there yet.

010918	CHANGE	LGP			Fix MapToUNICODE codepage code handling of byte-order marks.
		(1036)			Use CodePagesGuesser to find number of bytes to strip.

010917	FIXED				Added SetDefaultFont dialog and saved preferences to LedIt! (Windows only)
						and LedLineItMFC.
010911	REPORT	LGP			Maybe add SetDefaultFont dialog to LedLineItMFC (maybe others?).
		(1032)

010916	FIXED				Added new Led_Win32_FileRegistration wtih most of the code. Fixed LedIt! and LedLineIt (WIN32)
						to use the new code. Added support to Led_StdDialogs to support new common dialog.
010911	REPORT	LGP			Maybe add auto-associate-files (.txt etc) startup dialog and menu command
		(1033)			to LedLineIt! (and maybe LedIt?)

010915	FIXED	LGP			Fixed LedLineItDoc code to check if codepages are available
						(esp default ones) before using them. Then - also did portable
						UTF8 implementation, and make UTF8 the detault encoding.
010913	REPORT	LGP			Be sure to handle case of UTF7/UTF8 not avail - say under Win98.
		(1028)			Right now - they dont appear in the list of optional formats? SB
						forced in? Anyhow - if not in - use UNICODE WIDE as default. ALSO -
						make UTF8 default - NOT UTF-7.

010915	FIXED
010915	REPORT	LGP			Make sure LedIt.dsw and other sample MSVC projects build
		(1027)			when not at top level of the drive (eg whole dir is unpacked
						as \Led_src_TRGWIN_3.0\). Its mostly OK - but for include of LedStdDialogs.r

010915	FIXED				I did another test of this. Added doc SPR#1026 to take care of for C2.
010829	REPORT	LGP			Look throgh packages (for each platform etc) and see we
		(1000)			include the right files and that the docs/readmes are helpful/make sense.

010915	FIXED				I did another test of this. Found some small problems, but its mostly fine.
						I'll keep checking this more and more carefully as I get closer to release, but for now,
						I think this can be closed.
010830	WORKING				Did a painful test - and seems pretty good. Work on this some more
						later on the C1 DevCycle.
010830	WORKING				Did a first cut at fixing this - but time consuming/painful to test...
010829	REPORT	LGP			At least the Led_src_MacTRGMAC folder (Led) folder contains win32/UNIX stuff (like Led_Win32.h)
		(1005)			Be sure to strip stuff out that doesn't belong.

010915	FIXED				Got portable implementation from the net and warmed it over. Thanx to
						Mark E. Davis (original author). See copyright comments in the code. Then fixed
						CodePagesInstalled class to always return that UTF8 is present.
010915	REPORT	LGP			UTF-8 not available on Win98 (is from MSIE 5.5, but when I enum
		(1025)			code pages its not listed). It would be nice to support at least this basic code
						page.

010912	FIXED				Now fixed funny LHS region problem - and opened new (defered) SPR#1024 for
						X-Windows.
010912	WORKING				MacOS and Windows working fine. Add new SPR for X-Win implementation (region) and
						funny look of region on LHS on LedIt (with margins).
010911	WORKING				Got it basicly working for Win32 - now fix code so portable (at least to mac - no regions yet on
						Linux. ALSO - see about how region looks funny on LHS on LedIt (with margins).
010829	REPORT	LGP			Implement 'secondary hilight' implemenation - so when deactivated -
		(0987)			windows still show outline of selection. Easy todo, and I like feature.
						Must be disablable since non-standard, however.

010912	FIXED				Added _CW6 versions of each .mcp files in case anyone wants to build with CW6/68K.
010911	WORKING				They seem to have LEFT OUT 68K support in CW Pro7. For this reason - somehow
						must include old CWPro6 project files? Maybe? Grab last .mcp checkin for 3 projects
						(LedIt, LedLineItPP and NetLedIt) before 1pm 2001-09-11.
010911	WORKING				Strangely - I must include TextCommon stub lib and UnicodeConverter lib to link
						against MSL (at least for NetLedIt! - didnt seem to be needed in LedIt?). Hope not a problem.
010911	WORKING				Mostly working - but LedIt! carbon build broken and so is NetLedIt (link errors)
010911	WORKING				First pass done - but more todo.
010906	REPORT	LGP			Just ordered MWERKS CWPro7. Get compatable with that and wait to build C1 ti
		(1018)			it arrives.

010911	CHANGE	LGP			added LedItApplication::HandleBadUserInputException () code and other related fixes
		(1023)

010910	FIXED				Added GetHandleBOM/SetHandleBOM flags to CodePageConverter class and special overload of
						CTOR to handle when we do BOM stuff. Added docs to class about BOM. Fixed handling of UTF-7/UTF-8 BOMs
						(low level mapwidetounicoide/unicodetowide routineds DONT handle this).
							NOTE - I THIK MSWord2k support for UTF7 - at least UTF7 BOM - is broken. My code works fine with
						IE 6.0 - so I'm pretty sure its right (but not posative).
010910	REPORT	LGP			Some LedLineIt! UTF-7 bug. Save 'LedBugs' file as UTF-7 and then open as automatic'.
		(1022)			Note how ! characters messed up - and others. I MAY HAVE FIXED THIS - BUT TEST CAREFULLY.
						My UTF-7 code seems fine - and to work with MSIE - but MSWord2k doesnt seem to handle
						UTF7 right, and nor does notepad.

010909	FIXED				Fix in FlavorPackageInternalizer::InternalizeFlavor_FILEDataRawBytes () works for both
						LedIt! and LedLineIt!
010909	REPORT	LGP			Be sure Drag/Drop of files (Internalize_FILE - etc???) uses new CodePage module
		(1021)			code to autodetect encodings. Based on SPR#0994.

010909	FIXED				Added a bunch of support to CodePage.cpp module, and did UI in LedLineItMFC.
						Open new SPR#1021 to take care of D&D stuff.
010829	REPORT	LGP			LedLineIt! should do a FAR better job (LedIt! too) opening and saving to UNICODE (e.g. UTF-8)
		(0994)			 files. For example - opening UTF-8 files with LedLineIt! 3.0b4/5 fail to recongnize
						 the BOM and read the files as ASCII.

010909	FIXED				Added a bunch of support to CodePage.cpp module, and did UI in LedLineItMFC.
000117	REPORT	LGP			Add popup to LedLineItMFC's FileOpen/Save dialogs to select the character set to save in/read in.
		(0697)			For Read - make Automatic the default. For save - make the opened one default. This should all work
						regardless of Win95/98/NT5, and regardless of whether you have built UNICODE etc version of LedLineIt!.
							This request is based loosely on closed SPRs #0692, and 0537.
							See similar SPR#0698.

010908	CLOSED	LGP			I tried scrolling through a large document (this LedBugs file) with syntax coloring on.
						I looked at the performance meter (task mgr icon on Win2k in task tray). No apparent time being
						used and seemed quite fast empericly. NO PROBLEM. CLOSED.
991224	REPORT	LGP			Look into performance of scrolling with SyntaxColoring (and any other performance issues).
		(0682)

010908	CHANGE	LGP			Cleaned up some of the Led_Gtk g_message () calls output strings.

010908	FIXED				Really no bug (of mine). When the xclipboard view is running, it messes up what
						formats are available on the clipboard. WHen I shut that down - things work fine.
010908	REPORT	LGP			LedIt! on Linux - Cut/Paste doesn't seem to support preserving file/style info (maybe
		(1019)			just finding TEXT on clipboard for some reason).

010908	FIXED	LGP			Added EnsureRectInRect and EnsureRectOnScreen utility routines to help, and fixed
						LedIt/LedLineIt to use this in the mainframe::oncreate.
010906	REPORT	LGP			Give LedIt/LedLineIt! better default window/doc sizes on startup (WIN32)
		(1017)

010907	CLOSED				Done (basically a DUP of 1002 - so close it).
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960901	REPORT	LGP		Profile, and improve performance of RTF Reader (maybe only
		(0383)			need Caching/FileSink idea - SPR#0374)

010907	FIXED				Much more painful than I would have expected. Anyhow - now looks good. I tried to
						fix font choice - but failed at that. For some reason - dftb resource is ignored and
						I couldn't figure out how to set the font on Mac TE record (just setting the TERec
						field had no effect).
010829	REPORT	LGP			useWFont? to make text look nicer in about box in NetLedIt_MAC (and other mac
		(0997)			 aboutboxes) Or maybe a UserItem is easier?

010906	FIXED				It was hard to remember how to create an XPM file from a DIB. But I eventually found
						two tools (on the Mac - the Graphics Converter I've been using forever) and on Windows
						I tried "Image Explorer Pro").
010906	WORKING				Did for LedItMAC, LedLineItPP, and NetLedIt (MAC) about boxes. Just todo LedIt for XWin.
010906	WORKING				Did for Win32 so far (still todo mac/UNIX)
010829	REPORT	LGP			Go through all Copyright dates in about boxes etc and cleanup
		(1003)

010906	FIXED				Nothing todo immediately (Netscape plugins on mac use Netscape special plugin icon, not their own),
						except for about box which is done (SPR#1003).
010906	WORKING				Did for Win32 so far (still todo mac)
010829	REPORT	LGP			Need new/decent icon/about box for NetLedIt!
		(0998)

010906	CLOSED				No longer including address in about box. Besides - cleaning up
						AboutBox (SPR#1003) right now.
010413	NOTE	LGP		Not important enough to get excited about.
010102	REPORT	LGP		> From: Karl Pentzlin [mailto:pentzlin@acssoft.de]
		(0867)			> Sent: Tuesday, January 02, 2001 4:34 AM
						> To: info-led@sophists.com
						> Subject: LedIt! - Errors (regarding internationalization)
						> 
						> 
						> Sirs,
						> I have evaluated LedIt 2.3 because I need a text editing component for
						> a C++ application for plain Unicode (UTF8) text (as you promise to
						> support Unicode in your next application).
						> Nevertheless, I found the following errors in your demo:
						...
						> 4.) The about box shows a postal address without a country. This may
						> be offending to citizens of other countries than yours.

010905	FIXED				I THINK this is basicly fixed by adding a flag to WordProcessorTextIOSinkStream so
						for full document reads we pay attention to the last paragraph info block and for
						paste (and D&D, etc) we do not.
							Added StyledTextIOReader::SinkStream::EndOfBuffer () hook so that
						WordProcessorTextIOSinkStream knows when its at the buffer end.
010905	REPORT	LGP			In a COPY (RTF) command - only copy the PARAGRAPH info if
		(1014)			you select the trailing NL (try MS Word 2k). Maybe too hard to fix
						for 3.0 (cuz of implications on undo code etc).
							See file SPR_1014.rtf for example.

010905	FIXED			Change that code to:
							size_t			length		=	flavors.GetFlavorSize (SOME_FORMAT);
							Led_SmallStackBuffer<Led_tChar> buf (length);	// really could use smaller buffer
							length = flavors.ReadFlavorData (SOME_FORMAT, length, buf);
						Also - added docs to FlavorPackage class/methods, and added ENSURE specs in each ReadFlavorData ()
						implementation that it didn't ever return more than speciifed in the bufsize declaration.
							I'm not 100% sure this is a total improvement. There may have been SOME cases where we really
						wanted to treat a smaller return value as a problem (e.g. a return size of ZERO - for example - maybe
						should be treated as an exception always?). Anyhow - I think this is an improvement. Will test
						some before I check this in.
							Also note - I have noticed in the past where a PASTE command seemed to get ignored while using
						LedLineIt!. I always assumed - whenever that happened - I had just missed the keystroke. But now I
						wonder if Win32 would sometimes return different (but large enough) values for the GetHandleSize()
						calls. We'll see if that goes away ;-).
010905	REPORT	SWIGHT			FlavorPackage::GetFlavorSize () returns size which is too big on Win9X.
		(1016)			There was tons of the code of the form:
							size_t			length		=	flavors.GetFlavorSize (SOME_FORMAT);
							Led_SmallStackBuffer<Led_tChar> buf (length);	// really could use smaller buffer
							if (length != flavors.ReadFlavorData (SOME_FORMAT, length, buf)) {
								return false, or throw this or that;
							}

010905	FIXED				See SPR#1010.
010829	REPORT	LGP			Performance testing/tweeking
		(1002)

010905	FIXED				Of course, there is always room for speed improvements. But right now - performance in most
						respects is quite reasonable. I can see no more low-hanging fruit, nor any serious problems.
						Try opening RTF1.5 doc in LedIt! 2.3 and LedIt! 3.0c1x - and then do some typing. Not only is
						30 much faster opening the doc, but its much much faster typing.
010905	WORKING	LGP			Spedup TextImager::ScrollSoShowingHHelper () (affected typing times).
010903	REPORT	LGP			Do more performance tweeks of reading files/MarkerCover<> code. Based on SPR#0660, SPR#0762,
		(1010)			A great deal has been done already about this. Maybe all that needs to be done. But this SPR is to
						at least go through the profiling data and see if there is anything else that can be easily/resaonably
						done at this stage.

010904	CHANGE	LGP			Added a couple methods to TextInteractor::UndoableContextHelper to allow me to get rid of direct calls
		(1013)			PreInteractiveUndoHelper etc in Led_MFC/Led_PP. Not critical - but cleaned things up a bit. And I think now
						the code (because of the TextInteractor::UndoableContextHelper::SetBeforeUndoSelection addition) restores
						the selection in case of D&D a bit better.

010904	FIXED				Just needed to extend the StandardStyledTextInteractor::EmptySelStyleTextRep hack done
						to WordProcessor::EmptySelectionParagraphSavedTextRep.
010904	NOTE				Bug appears to be that the UNDO code doesn't capture any info about the current
						selection if its an empty selection. For font info - this is not a real problem. For
						paragraph info - it is.
010903	NOTE				This was also broken with Led 2.3. Note - the critical point is that the end
						of the bulletlist has no NEWLINE. If you select a region ending in a newline
						as the text to copy - the problem does not occur.
010903	REPORT	LGP			Small bug with undo and list styles. Perhaps related to SPR#0660/SPR#0762 (I discovered it testing
		(1011)			those fixes).
							Open file SPR_1011.rtf, and follow the instructions inside (basicly past
						bulleted text and then say UNDO).
							Note - though this was discovered while fixing SPR#0660/SPR#0762 (performance tweeks and code cleanups)
						it existed in Led 3.0b9 (perhaps no earlier cuz maybe no lists then?).

010903	FIXED
010903	REPORT	LGP			Misc MarkerCover<> bugs which I created/discovered fixing SPR#0660/SPR#0762. These bugs
		(1012)			are reported ONLY for their test files. They maybe handy to use as regression tests.
						The files contain their own instructions. Files SPR_1012a.rtf, SPR_1012b.rtf, 

010903	FIXED				I substantially rewrote the MarkerCover<> code (about 50% of it). I had to make related changes
						to the WordProcessing/ParagraphDatabase code.
							Basicly, I abstracted out alot of the gorp from the middle of the MarkerCover<>::SetInfo ()
						call, and then rewrote the MarkerCover<>::SetInfos () call to use that shared routine. This allowed
						me to greatly reduce the number of CollectAllXXXMarkers calls I was making.
							Then - I completely redid the way I cull/manage merges. Its now all called from a
						helper routine MarkerCover<>::NoteCoverRangeDirtied (). That makes the subclassing code in WordProcessor::ParagraphDatabase
						much cleaner. The NeedExtraUpdateCheck code is now completely private (was protected) and is now well
						documented and cleanly implemented. Most of the code for culling etc is now much more likely to run
						of a commonly collected list of markers than to keep re-grabbing that list itself (which saves alot of time).
							I wouldn't call the code super-speedy, or super-clear, but this is a major step forward.
							Another major step forward with this code is that I documented it much better.
							There were several bugs I ran into in rewriting this code. I've summarized a few useful test cases in the
						SPR#1011. I also noted another related bug - which was NOT a regression - so I'm treating it separately - which
						was SPR#1010.
							The new timing data - based on the table from SPR#0995 - is:
																RTF14 OPEN		RTF14 SEL-ALL-CUT-3XPASTE	RTF15DOC OPEN		RTF15DOC SEL-ALL-CUT-3XPASTE
								WORD 2000						4				1							6(a)				9(b)
								2.3(non-UNICODE)				2				11							14(c)				46
								3.0b9							4				9							32					25
								3.0c1x							4				12							13					24
								3.0c1x+THISFIX					3				11							7					24
000531	REPORT	LGP			Led RTF reading is slowed down significantly (for RTF 1.5 spec - by 2x) because of adding \sb\sa support
		(0762)			(part of SPR#0760). Seems like its not just a reading problem - but due to the fact that this doc makes MANY new
						paragraph entities in the MarkerCover.
							Should perhaps escalate SPR#0491 a bit more important. That may be the true fix for this.

010903	FIXED				SEE SPR#0762 for details.
991214	REPORT	LGP			MarkerCover<> template code is very awkward, and should be cleaned up (and maybe speed tweeked more).
		(0660)			I did a hack in SPR#0659 to make this perform acceptably. Either clean that hack up, or find some better
						way (clean up names etc at the very least).

010903	CHANGE	LGP			Change related to fix of SPR#0660/0762 (MarkerCover<> speedup).
		(1009)			Added method MarkerOwner::EarlyDidUpdateText () and called it from the
						TextStore::DoDidUpdateCalls () so you can detect if the text has truely
						been updated yet when an object is called after its AboutToUpdate and before
						its DidUpdateText() method calls.

010831	FIXED				There maybe several issues. But I've fixed a major one. Actually - the same problem struck Led 2.3.
						The problem was that - as a side-effect of the OLELoad () of at least one embedding, the COleMessageFilter callback
						was invoking a WM_PAINT message. Because of that - the file LOOKED like it was finished loading much sooner than it
						really was (so some of the numbers for Led 2.3 etc in SPR#0491 are slightly suspect).
							Anyhow - once the redisplay had happened - that disabled the IsWholeWindowInvalid () - and resulted in a BIG
						slowdown.
							The 'fix' was to have WordProcessorCommonCommandHelper_MFC<BASECLASS,CMD_INFO,CMD_ENABLER>::OnPaint ()
						trap OnPaint () messages, and not process them, but to squirel away the HWNDs for later processing.
							There maybe other performance issues that need addressing - and I'll look at those next as part of SPR#0762,
						But first - here's a revised performance test (of RTF 1.5 Spec):
																RTF14 OPEN		RTF14 SEL-ALL-CUT-3XPASTE	RTF15DOC OPEN		RTF15DOC SEL-ALL-CUT-3XPASTE
								WORD 2000						4				1							8(a)				9(b)
								2.3(non-UNICODE)				2				11							14(c)				46
								3.0b9							4				9							32					25
								3.0c1x							4				12							13					24
								
								(a)	Unclear when load is done...
								(b)	Unclear when done - go by when watch cursor disapears
								(c)	appears in only few seconds - but time when busy cursor goes away
010829	REPORT	LGP			LED RTF Reader Performance - try reading RTF 1.5 Spec with Led 2.3 and 3.0b5. Note its MUCH slower now. Try
		(0995)			stripping out the OCXs that don't load properly - and see what the difference is then.
						SEE SPR#0491.

010830	FIXED				catch command exceptions TextInteractorCommonCommandHelper_Gtk<>
010829	REPORT	LGP			Simply Start LedIt! on Linux and say paste - core dumped (must check for no valid input???)
		(1004)

010830	CHANGE				Go through SPRs and mark the remaining ones as DEFERED. Still maybe a few more to be
						defered - but I organized them much better, and put togther (above) the ones I will maybe to
						likely fix for the 3.0 release (mostly docs issues).

010830	FIXED				Fixed a while back. Now LedIt! app runs on Linux (decently - but not quite well yet).
000115	REPORT	LGP			Get Led lib really linking and running under Linux, and being able to insert some text under
		(0694)			program control. Then - maybe - use the Imager to draw that text to the Drawable.
							 See SPR#0658 for past work,

010830	FIXED				Fixed a while back. TextInteractorCommonCommandHelper<> template. Font list generation now done via
						Led_InstalledFonts class. Etc....
991208	REPORT	LGP		See closed spr#0606. Do a little more sharing of code via re-usable templates. Its pretty good now.
		(0644)			But there is still a lot of room for improvement. Specificly - SelectAllCommand() should be shared someplace.
						And maybe the FontList generation code. And the Ruler (maybe thats covered in another SPR?).
						And the UNDO/REDO code? We should be able to make LedItView TRIVIAL - or even empty.

010830	FIXED			Did this a while back. Led_InstalledFonts class
990415	DEFER
970927	REPORT	LGP		Consider moving the code in FontMenu.{h,cpp} code into a shared module.
						Maybe put it in Led_MFC????

010830	FIXED			Better yet - created a whole new module for this stuff.
990415	DEFER
980424	REPORT	LGP		Consider moving the TextStore::FindLineBreak() logic into WordWrappedTextImager. That
		(0571)			seems like a more logical place to store this code. Main reason to keep it in TextStore
						is historical affinity/shared code with FindWordBreak() stuff, which applies more generally.
						Not sure this is a good idea. But maybe?

010830	FIXED				Must be fixed (at least with UNICODE). I tried and cannot reproduce this (on Win2k at least).
990715	DEFER	LGP	
990615	NOTE	LGP		I sent him email asking for more information so I can reproduce this on a US system
980925	REPORT	Hordur		One of the language specific Icelandic characters (&thorn in HTML 
		(0587)			terms) changes to a ? when copied and pasted inside a LED document.  
						Whether the document is a HTML doc or native LED doc does not seem to 
						matter

010830	FIXED				Maybe fixed by switch to UNICODE? Anyhow - I cannot reproduce.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970717	NOTE	LGP		Not sure this is worth risking fixing for 2.2. At least investigate. Reproduced.
						Seems to happen for all non-truetype fonts.
970717	REPORT	JamesB	At 7:37 PM 7/17/97, James Brackett wrote: 
		(0467)			>3.  Script-font text copied from Microsoft Word does not retain its
						>apperance when pasted into LedIt, although the font name still appears as
						>Script.

010830	FIXED				I believe this was fixed quite some time ago. Cannot any longer reproduce, so assume fixed.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970710	REPORT	LGP		very anoyyinh Led-windows bug. Make a big selection (half window). Click outide selection, 
						and then very quickly back inside where the selection was. should have nothing selected (caret),
						but most of old large selection restored!

010830	FIXED				Now there is a 'DefaultFontFace' PARAM you can pass in (added a few releases back)
990715	DEFER	LGP	
990321	NOTE	LGP		Maybe fixed by (0559). RETEST.
980310	REPORT	JackNic	(ActiveLedIt!)
		(0526)			> From: Jack Nichols [mailto:jackn@nwlink.com]
						> 1.  There is no way to set the default font that the entire document
						> defaults to.

010830	FIXED				Did GetInfo support (for embeddings) about a month ago. CLOSED.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970628	Progres	LGP		Got rid of disabled items.
						Still remaing: "Add GETINFO command"
970304	Report	LGP		Improve Context Menu. Maybe eliminate items which are disabled?
						Add enuf support so we can GetInfo on selected OLE objects, and
						set URL info (and text to URL object).

010829	FIXED				Closed as OBSOLETE (done some time ago)
961205	DEFER	LGP		Defer, and probably do in Led 2.2.
961031	REPORT	LGP		Consider chaning URL for goto-addr in about box.
						Add goto-sophists / goto led-help home pages menu items
						to apple help menu and windows help menu.

010829	FIXED				Closed as OBSOLETE.
960430	DEFER			Reviewed
950601	DEFER			1.0RC1
950326	REPORT	LGP		Test Led configs other than Jap - try ascii - and see how well we can do with
		(0189)			one using Apples FindWordBreaks/LineBreaks. Is there a Led configuration that
						works right on single or multibyte character sets - I think not since I never
						use Apples FindNextChar () routines - nor windows ones - I should have
						some configuration where I do this... In fact - that should be the default.

010829	FIXED
010829	REPORT	LGP			Go through all Copyright dates in source code and cleanup headers.
		(0983)


------------------- Released 3.0b9 010827 - Below ------------------------------

010827	FIXED
010827	WORKING				On MacOS - fixed Led_PPView::PrintPanelSelf () to call SetUseGrafPort (). Just need to
						test a bit.
010827	WORKING				LedIt! / LedLineIt! Windows apps work fine now.
010827	REPORT	LGP			ASSURE/TEST BASIC PRINTING CODE FOR MAC/WIN LedIt/LedLineIt.
		(0980)

010827	FIXED				PowerPlant API name changes - call SetPrintSpec (mPrintSpec) instead of SetPrintRecord (mPrintRecord).
010827	REPORT	LGP			NEW LEDIT/LEDLINIET (MACOS) PRINT SUPPRT (LedLineItDocument::DoPrint ()).
		(0981)			 Had to disable a line of code. Assure still works...

010827	FIXED				Still some printing display bugs with LedLineItMFC (SPR#0979). Same bug
						existed with LedIt! - and fixed there as well.
010827	REPORT	LGP			Run LedLineIt! and open the LedReleaseProcess doc - and try to print
		(0978)			(on Cerberus). Exception raised and not handled well (several bugs then)

010827	FIXED				Just up project finder memory partition size
010827	REPORT	LGP			LedIt/68K just quits on startup - DEBUG IT.
		(0977)

010827	FIXED				Played around for another hour looking for a solution. Could find none. Opened
						SPR#0976 to really fix this in a future release (if there is any interest in the X-Windows
						version). For now - disable the optimization.
010827	REPORT	LGP			Either FIX or turnoff scrollbits optimization for X-Windows. I only see
		(0975)			it fail occasionally (mostly when doing invertrect drag scrolling) -
						but it fails enough to be a negative.

010827	FIXED
010827	REPORT	LGP			TRY -O4 for LINUX/GCC BUILDS (change ledit makefile)
		(0974)

010827	FIXED				Revise the display of hilighting (inversion) for the space before the LHS margin. Only
						invert the region if the selection extends OVER it in both directions OR if the entire line
						is selected. Works very well now - except it is slightly quirky when the whole line 
						is selected EXCEPT the end and then you select the end. But I think this is the best I can do.
010827	REPORT	LGP			Shouldn't always invert region at START of line just cuz we interesect start.
		(0973)			Type a word in a LedIt! buffer, and set first-indent to one inch. Then select whole
						word. Note how preceeding indent area is inverted. SOMETIMES that maybe right. But
						most often it looks disconcerting. MAYBE just do it for beginning of file? Or maybe never.

010827	FIXED				Both in ActiveLedIt! and NetLedIt (both GetLayoutMargins problem and adding ListStyle popup to
						NetLedIt (menu commands in Windows version only for now).
010825	NOTE				Mostly got this working (added menu items). But trouble with LedItView::GetLayoutMargins ()
						method (in wrap-to-window mode). Must fix so other stuff still works, and revise DOCS on that
						property.
010823	REPORT	LGP			TEST LIST CODE WORKING OK (including liust menu in context menu) for ActiveLedIt!
		(0972)

010823	FIXED				I think the old behavior was that for BOTH disabled and ReadOnly,
						the text was displayed as Gray (ignoring the background color).
							Now there is a new property - EnableAutoChangesBackgroundColor - which you
						can set to false (it defaults to true). If false - then we always honor the specified
						back color (else we autocolor gray when readonly/disabled).
010823	REPORT	Artinger> -----Original Message-----
		(0972)			> From: Werner Artinger [mailto:artinger@sympatico.ca]
						> Sent: Thursday, August 23, 2001 2:48 PM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: ReadOnly
						...
						>  Here's the issues I have right
						> now:
						> 
						> 1)  I liked the way the object behaved when setting Enabled=false but we
						> found that when the volume of text was greater than the size of 
						> the object,
						> the scrollbars wouldn't work.  I guess that makes sense in a way.  The
						> behaviour I liked about this setting though was that the 
						> BackColor could be
						> set as we needed it and object looked like a part of the web page.
						> 
						> 2)  As mentioned above (sort of) when we set ReadOnly=true, the BackColor
						> turns to grey and from what I can tell, can't be set.  But the 
						> scrollbars do
						> work which is cool.

010823	FIXED				Fixed the baseline I was using, and made the minimum size of the dot be 14 point (since
						thats what MSWord2k appeared to be doing - empicically)
010823	REPORT	LGP			FIX BULLET TO BE UP A BIT HIGHER.... MAYBE ALWAYS SAME SIZE and JUST CENTERED VERITCALLY???
		(0971)			

010822	FIXED				Last problem was covered in SPR#0969
010822	WORKING				The last problem related to SPR#0952- shouldn't have the final bulleted line...investigating...
						File (SPR968b.rtf) reproduces this problem clearly.
010822	WORKING				The next problem was masked by the first fix - but I created a second file to
						demonstrate it (SPR968a.rtf). The problem was that the bullets were being drawn in the
						font/style of the first character after the bullet. This has the problem that the bullet character
						might not exist in that font. In this example - the font was Symbol - and that character in the symbol font
						was not a bullet (one MIGHT argue this is a defect of the symbol font - but who cares). Anyhow - 
						I just changed the code to use the GetStaticDefaultFont () and to only copy the bullet SIZE (pointsize) from
						the size of the following character (even that is questionable - but most often will work well).
010822	WORKING				There were several problems here. The first one - that I read in \pntext groups
						and paid attention to their contents, is now fixed. I simply ignore them.
010822	NOTE				Created (smaller) SPR968.rtf file to reproduce problem.
010822	REPORT	LGP			FIX/DEBUG "(good)spanishprop1.rtf" display problem with bullet characters
		(0968)			

010823	FIXED				Removed the hack. Open SPR#0970 to track potential new problem - but defer that for Led 3.0.
010823	REPORT	LGP			Fix for SPR#0559 unwise.
		(0969)			I had added the hack:
							// See spr#0559. If program modifies font touching the LAST charater in the
							// buffer, he almost HAD to also want to apply it to the region just past the end
							// of the buffer.
							if (charAfterPos + nTCharsFollowing == GetTextStore ().GetEnd ()) {
								nTCharsFollowing++;
							}
						to 'MarkerCover<MARKER,MARKERINFO,INCREMENTALMARKERINFO>::SetInfo (size_t charAfterPos, size_t nTCharsFollowing, const INCREMENTALMARKERINFO& infoForMarkers)'.
						That was problematic. It caused the ListStyle (in sample file SPR0969.rtf).
							I don't have enough information stored with the original SPR to know for sure the right fix (I think it was a problem
						that occurred with LEC code). But I think the issue was with calls to SetDefaultFont (). Open a NEW SPR - 0970 - to track
						that I should re-engineer that API - so its less ambiguous / confusing what it does. But there are backward compat problems with that.
						Leave it for after 3.0.

010822	FIXED				Somewhat tricky to get RTFREADER to NOT emit the NEWLINE char at the end. Had to put in tricky delay
						emitting code in RTFReader::...Desitination code, and added Destination::Context code to better save/restore
						those context records, and to make the GroupContext stuff not force the last flush (of the newly added newline).
010712	REPORT	LGP			Related to SPR#0906 (most severely noticable after fixing this). Trouble is that \par should be
		(0952)			interpretted as terminating a paragraph, but not STARTING a new one. This is slightly at odds with
						how Led treats these. It adds a \n to the Led buffer when it sees one. Thats OK 99% of the time,
						but not on the final \par for the buffer. Sigh...

010821	FIXED				Did a quick hack implementation. Track the rest as part of SPR#0957
010713	REPORT				{\listtext support} in RTF WRITING (already supported this in READING)
		(0955)

010820	CLOSE				SelTextAsHTML works fine. Just CLOSE this.
010817	NOTE	LGP			Not sure if this is necessary. Reason is cuz its so easy to do basicly this using SelTextAsHTML
						along with an <A HREF=></a> tag.
000727	REPORT	dgertz	>> -----Original Message-----
		(0817)			>> From: Donald R. Gertz [mailto:dgertz@emagination.com]
						>> Sent: Wednesday, July 26, 2000 1:41 PM
						>> To: 'info-led@sophists.com'
						>> Subject: ActiveLedIt! Question
						...
						>	You would like for me to somehow make it easy from VBScript to create, and edit
						>URLs, which are embedded in the text stored in ActiveLedIt!. You are unsure about the
						>idiosyncratic URL icons I currently use (but not definitely against them).
						>
						...
						>	o	[putprop,getprop]SelTextAsAHREF ()
						>		get/set the link associated with the currently selected text

010820	FIXED				Didn't add any properties - but just changed Led's display of URLs. Within Led - you can still
						build with old display code (qStandardURLStyleMarkerNewDisplayMode).
000727	NOTE	LGP			Maybe first/just revise the UI of the existing ICON URL so that it displays as the
						same size of the enclosed text, and shows the link-to only
						as HOVERTEXT! That might work better than the existing standard UI - and certainly
						better than my current UI. But also must allow right click to
						get context menu to EDIT THE URL (and related stuff). Unpack, and MAKE_INTO_URL commands needed?
000727	REPORT	dgertz	>> -----Original Message-----
		(0818)			>> From: Donald R. Gertz [mailto:dgertz@emagination.com]
						>> Sent: Wednesday, July 26, 2000 1:41 PM
						>> To: 'info-led@sophists.com'
						>> Subject: ActiveLedIt! Question
						...
						>	You would like for me to somehow make it easy from VBScript to create, and edit
						> URLs, which are embedded in the text stored in ActiveLedIt!. You are unsure about
						> the idiosyncratic URL icons I currently use (but not definitely against them).
						>
						...
						>	o	[putprop,getprop]EditorAHREFDisplayStyle ()
						>		get/set the display style for links - either as the current iconic representation
						> or the more traditional (but error prone, and can't see where linking to) style link.

010817	CLOSE	LGP			Mostly fixed as part of SPR#0959. Remaining part about support for multiple commands
						is covered in SPR#0966. And idea about exploding/thawing HTML etc - maybe somewhat interesting -
						but is not anytime in the forseeable future going to be part of Led. It would make more sense
						as part of a new app. Anyhow - close this.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960906	REPORT	LGP			Tied somewhat to #0376.
		(0375)				Be sure we implement optional menu list of special commands for selected embeddings.
						One will be "GetInfo". But the list will be overridable, and for HTML embeddings,
						thaw will be an option (or explode into text). Similarly for URL objects.
						This will work nicely with #0376, and together with Paste/Drop As support.

010817	FIXED				Works with NetLedIt! (Mac & Windows)
010817	WORKING				Works with ActiveLedIt!.
010817	WORKING				XWindows support defered for 3.0 (SPR#0967). At least code still compiles now on X.
010816	WORKING				Fixed for MacOS (LedIt). Still todo X-Windows LedIt (and then maybe ActiveLedIt/NetLedIt).
010816	WORKING				Fixed except for SPR#0966 and support for MacOS/X-Windows.
010731	WORKING				At least dialog code now compiles on X-Windows - but still far from complete.
						 Also - URLS don't display in current X-implementation. Maybe just ignore this
						 for first X-Release.
010717	WORKING				First cut of this done. Implemented right-click properties dialog - at least so you can
						see basic type of embedding, and edit properties of plain URLs (not yet implemented for URL with pictures).
						Only tested on PC - still Mac/UNIX to test/fix. Open new SPRs to track small related issues
						later (once working on Mac/UNIX).
010717	NOTE	LGP			This comment was a separately filed new SPR, which happens to overlap alot with this
						one:
							Add RightClick properties support so I can get INFO on selected EMBEDDINGS. Then - change display
						of URL embeddings so that they display as NORMAL LINKS in other browsers. THEN - make them right-clickable - so
						you get certain commands from then (like navigate/open) and like GET / EDIT properties/URL TARGET!
961030	DEFER	LGP			Defer, and probably do in Led 2.2.
960521	DEFER	LGP			Not enuf time for substantial new (optional) feature.
960501	NOTE	LGP			Really just third separate (nearly identical) feature request merged together...
						Get Info On Selection (%i) command. For picts/DIBs etc say what they are.
						Eg. "The selected object is a 43x133 pixel Mac picture, of 4323 bytes."
						Or "The selected object is a string of 54234 characters of styled text".
						Most useful for the "?" questionmark embeddings.
						Eg. "The selected object is of type 'OLE2 Embed' - and that isn't known
						to this version of LedIt! Mac. Perhaps you should try a more recent version?"
						(actaully for OLE we can give a more specific message, but you get the idea).
960305	NOTE	LGP			Add in new selection menu - have generic ability for embeddings to add menu items
						and handle those menu items? This facility might subsume Getinfo - might just
						be first, and default item??? Maybe best to have BOTH, in a group (separator separated
						area) on Edit menu.
						Probably won't have time todo this for 2.0.
960305	REPORT	LGP			Open Selection/GetInfo commands for LedIt. Maybe have new selection menu?
		(0959)			Or maybe do like windows does and have Object hierarchical menu under
						Edit menu?

010815	FIXED				Fixed. SelColor/HidableTextColor now declared using OLE_COLOR
010815	REPORT				OLE_COLOR - for ActiveLedIt! ODL - see if we can / should use this type more widely.
		(0965)

010801	FIXED				Added ReadOnly and Enabled properties.
010731	REPORT			> -----Original Message-----
		(0964)			> From: Werner Artinger [mailto:artinger@sympatico.ca]
						> Sent: Tuesday, July 31, 2001 8:38 PM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Read Only?
						> 
						> 
						> Hi Lewis, sorry to send you another note so soon after the other one.  We
						> also need to be able to make the object Read Only for some 
						> windows.  Is this
						> possible?  Thanks!

010801	CHANGE				Added TextInteractor::BadUserInput class, and throw that from
		(0965)			TextInteractor::OnBadUserInput () instead of directly calling Led_BeepNotify ();
						Then fixed Led_MFC_ExceptionHandlerHelper<> to better deal with this cahnge, and
						similarly for the various wrapper tidbits in Led_Win32/Led_MFC modules.
							Based on request in SPR#0964
						<OLDCODENOTE>
							NOTE - any code that called this routine and assumed it wouldn't throw (even indirectly)
						may need to be updated to wrap/catch the throws.
						</OLDCODENOTE>

010801	FIXED	LGP			Now the 'BackColor' stock property is supported.
010731	REPORT	Artinger> -----Original Message-----
		(0963)			> From: Werner Artinger [mailto:artinger@sympatico.ca]
						> Sent: Tuesday, July 31, 2001 8:15 PM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Re: ActiveLedIt! license
						> 
						> 
						> Thanks Lewis, I have successfully downloaded version 3.0 beta of
						> ActiveLedIt.  Based on my preliminary tests, everything is 
						> working fine.  I
						> have one question for now:  althought I didn't see it in the 
						> documentation,
						> is there a way to set the background color on the object?  Thanks in
						> advance!

010731	CHANGE				Added SimpleActiveLedItASP2FromServerDemo.asp ActiveLedIt! demo page (to samples section)

010731	CHANGE				Added MS Visual Studio.Net support (MSVC70B2). Rebuilt/tested all projects with this compiler
						and added appropriate bug workarounds. Also - retested MWERKS CW6Pro and all seemed to be well.

010719	FIXED				Fixed, except for small SPR#0962 (has nothing todo with Led - just demo app).
010718	WORKING				Nearly got compiling with LedIt! application.
010717	REPORT	LGP			Support CW6 Pro/Carbon
		(0961)

010719	FIXED				Tested all apps, including LedIt, LedLineItPP, NetLedIt. Also got all these building OK on the Windows platform
						(cross compiled) as well (only hack is must copy StandardStyledTextInteractor.cpp to StandardStyledTextInteractor.cp).
010718	WORKING				Got LedIt! compiling. Still must update other projects, and test a bit more...
010717	REPORT	LGP			Support CW6 Pro.
		(0960)

010716	FIXED				Fixed a while back.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
961205	DEFER	LGP		Defer, and probably do in Led 2.2.
961015	REPORT	LGP		We must write out URLD embeddings in HTML writer as <A href=...>.
						Also, perhaps should map stuff in <a>XXX</a> (XXX part) a brackets
						to the title of the URL.

010716	FIXED				Basic reading/writing HTML support for <ul> bullet lists. VERY basic
						support. No support for nested UL lists, nor did I support type=xxx to specify list
						type. Opened new SPR#0958 to track some problems for a future release.
010713	REPORT				Bullet HTML support (based on SPR#0906)
		(0954)

010713	FIXED
010712	REPORT	LGP			Fix WordProcessor::AutoFormatIndentedText () so that its behavior (what it sets) cooresponds to
		(0953)			what MSWord does. This is important so that when you import (read) MSWord docs, and then do indent/unindent
						you get intuitive results.	

010713	FIXED				Basic bullet list functionality now works, and basic RTF reading/writing of RTF
						bullet lists now work. This code still leaves a lot to be worked on, and polished.
						Open new SPRs 0954 (HTML bullet list support), 0955, 0956
010712	WORKING				Implemented most of RTF reading (still no RTF writing), and no HTML support.
010712	WORKING				Worked around display bug. Now just RTF/HTML todo.
010711	WORKING				Partly done. Just did basic support (bullet lists, no other style lists). Did support
						indent levels (including new Increase/Decrease indent level commands). Still no RTF/HTML
						support, and a small display bug on following lines when I add bullet attribute.
010507	REPORT	LGP			Bullet support. So many people have asked for this. Looks like I really should do at least
		(0906)			a minimal version of this for Led 3.0.


------------------- Released 3.0b8 010605 - Below ------------------------------

010507	FIXED				Primitive find dialog in place (opened SPR#0951 to track improvements)
010507	REPORT	LGP			X-Windows. Find dialog for LedIt! (XWin)
		(0950)

010605	FIXED				Now have resolution set to 100-DPI. Stuff does look a bit better (and more like AbiWord).
010604	NOTE				Maybe include in this using 100-size font instead of 75 if available (seems that what AbiWord does
						and seems to look better).
010511	WORKING	LGP			Fixed it so it now supports italics, but still - probably more could be done. I did a first cut hack
						at font name mapping (Times New Roman to times). Expand on that as well.
010507	REPORT	LGP			X-Windows. Derivitive of SPR#0888. Improve Led_Tablet_::BestMatchFont () algorithm.
		(0905)			Make sure it takes into account italics etc. Right now - I think that - and a few other styles - are basicly ignored.
						Resolve/clarify what styles are supported. LOW PRIORITY.

010605	FIXED				Now also check file suffixes, and patch file suffixes.
010604	WORKING				Mostly done. Just need to fixup/examine file suffixes (end of file name, like .rtf).
010604	REPORT	LGP			X-Windows. Support DIFF FILE FORMATS IN LEDIT XWINDOWS. By this I mean a popup
		(0949)			to select file formats (as on Mac/Windows), and detecting/setting file name suffixes
						properly to guess read/write the right file type.

010604	FIXED				Did AppTitle support, but no dirty flag (new SPR#) for that and dialog on overwriting)
010522	REPORT	LGP			Handle filenames better in LEdIt! XWindows - add the filename to the titlebar,
		(0932)			 handle enable of SAVE menu item and maybe even do a dirty flag, and an are you
						sure dialog before overwriting DOC.

010604	FIXED				Now added StdFilePickBox to LedStdDialogs (X-Windows only for now), and used it in
						LedIt app.
010522	REPORT	LGP			XWindows - LedIt - redo its file dialog code to use the new LedStdDialog code
		(0931)			 (so its syncronous not callback based).Should make code sharing inside LedItDoc
						code etc much easier.
	
010604	FIXED				
010524	WORKING				Some progress, and still lots more todo. Looks like, for one thing, I must cache
						results of XLoadFont() calls. These appear quite slow?? Guessing a bit. I cached them SLIGHTLY
						and that seemed to help. But still quite slow. Deal with better caching after this beta release.
							ALSO - I noted we are busy waiting terribly. OnIdle stuff? Waiting in gtk code. Must fix this
						as well.
010522	REPORT	LGP			XWindows speed problem with ReadMe.rtf file near the end - ONLY on console
		(0929)			 (not using Win32-based X-Server)
	
010530	FIXED				Now this directory is copied (for both Mac/Windows NetLedItSRC projects).
010529	REPORT	LGP			NETLEDIT MAC SRC PROJECT NEEDS BUILT INTERMEDIATE FILES DIR COPIED
		(0947)			INTO IT

010523	FIXED				Used xcopy instead of cp -r - which presevers mac resource file forks and attributes
						in two scripts: CopyAndMakeNetLedItMACTarget.bat and CopyAndMakeNetLedItSrcTarget.bat
010529	REPORT	LGP			Look into build of NetLedIt! Mac folder - where resource forks not copied???
		(0946)			 XCopy in script?

010530	FIXED				Done for ActiveLedIt! as well (including docs, and demo). Added new
						Samples/HTML-JavaScript section with a JavaScript sample that initializes
						a DIV with the ActiveX control version# (Samples/HTML-JavaScript/SimpleAutomation.html)
010530	WORKING				Added GetVersionNumber/GetShortVersionString() Java APIs. Tested from
						ScriptingSampleNetLedItPage.html on MAC and PC. Added to the NetLedItReference.rtf.
						Still todo - the ActiveLedIt! version of all this.
010529	WORKING				1/2 did Netscape version - but still not tested... Incorporate the version# query
						into some test web page... STILL MUST WRITE DOCS/REFERENCE.RTF FILE
						AND DO ACTIVELEDIT - and TEST TEST TEST!!!
010529	REPORT	WRood@R	> From: Rood, William [mailto:WRood@randomhouse.com]
		(0945)			> Sent: Tuesday, May 29, 2001 5:27 PM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Cc: Anderson, Bob; Walter, Alex
						> Subject: RE: updates to ledITs
						> 
						> 
						> Lewis
						> 
						> One quick request please: we realized that we need to be able to retrieve
						> the version number of ActiveLedIt and NetLedIt through 
						> JavaScript. This way
						> we'll be able to know what version users have on their machines 
						> (helps much
						> in diagnosis) and also to notify the user if they need to do an update. A
						> method that returned the version of the plugin (e.g., 3.0b7) 
						> would be a much
						> appreciated addition.
						> 
						> Please let us know when you think you could implement this feature.

010529	FIXED
010529	WORKING				Open the file 0944/Test.rtf on the Mac - with either NetLedIt! or LedIt! Note
						how color of embedded image is messed up (colorized).
010529	REPORT	LGP			In NetLedIt! on Mac - change font color of some text - then succeeding
		(0944)			bitmaps get displayed colored.

010529	FIXED				This was significantly MORE broken on the PC. There was no code written to
						handle the checkmark and change of text strings in menu items for the PC (as in Undo 'font change').
						THAT is now fixed. Also - there were a couple of colors that weren't named properly (in LedGDI/Led_Color).
						I've since gone through all the named colors in a reference book, and made sure they were all right.
							And - I updated the color list / code to correspond to changes I made earlier for the X-Windows
						port (added a new define for last color cmd) - that was why it was breaking on the Mac - where I think
						it used to succeed (also changed to use new common code last release).
							Also - same sort of bug existed in ActiveLedIt! - so I fixed THAT to also use the new font name/number code.
							Anyhow - this seems fully fixed (except SPR#0944 which is an offshoot)
010529	REPORT	WRood@R	> From: Rood, William [mailto:WRood@randomhouse.com]
		(0943)			> Sent: Tuesday, May 29, 2001 1:27 PM
						> To: 'lewis@sophists.com'
						> Subject: new update to NetLedIt 
						...
						> Also, on the menu for color selection (open-apple mouse-click: color), if
						> the color is black (the default), then "black", "cyan", and "magenta" all
						> have checkmarks next to them in the colors menu. Selecting cyan or magenta
						> does nothing. No matter what color the font has, the color remains
						> unchanged.

010529	FIXED				A simple (sloppy) bug in my new HTML font code. Fixed.
010529	REPORT	WRood@R	> From: Rood, William [mailto:WRood@randomhouse.com]
		(0942)			> Sent: Tuesday, May 29, 2001 1:27 PM
						> To: 'lewis@sophists.com'
						> Subject: new update to NetLedIt 
						...
						> *	The nesting for bold and italic tags is perfect, but on underline
						> tags, while it is nested correctly, it creates a <U> tag for 
						> every letter in
						> a word if the whole word is selected and then underline is selected.

010529	FIXED				The new code still generates too many useless open/close tag pairs. But this code really needs to be
						completley rewritten (use style sheets). Don't worry too much about this detail for now.
010529	WORKING	LGP			Reproduced similar problem. Has todo with code I wrote to try to avoid emitting
						useless open/close font pairs just before a close-paragraph tag.
							Sample file test.html - open it - and re-save it - and assure the sizes remain the same
						(look at HTML or reopen).
010529	REPORT	WRood@R	> From: Rood, William [mailto:WRood@randomhouse.com]
		(0941)			> Sent: Tuesday, May 29, 2001 1:27 PM
						> To: 'lewis@sophists.com'
						> Subject: new update to NetLedIt 
						> 
						> 
						> Lewis
						> Thank you for getting the new version of NetLedIt! (3.0b7) to us 
						> so quickly.
						> I tested it out when it arrived, but I'm finding some unusual behavior and
						> want to confirm that I have our system setup correctly to work with the
						> plugin.
						> Could you please test NetLedIt in your environment and see if you can
						> confirm the following behavior? The issue is that the RTF stream works
						> perfectly, but the HTML stream has some unusual behavior:
						> *	The font size is always the same (4), even if there are different
						> sizes in the RTF stream.
						...
						> *	Custom colors (i.e., other than red or blue. E.g., #FFFFCE) in the
						> RTF stream become black if only part of the word has its color changed.


------------------- Released 3.0b7 010526 - Below ------------------------------

010525	FIXED	LGP			Surprise! The bug appears to be a clipping bug. Calling XSetClipRectangles () from
						Led_Gtk_Helper<>::Handle_DrawingHelper () seems to have solved the problem. Also had to be
						careful to set the clipregion before doing a scrollbits as well.
010522	REPORT	LGP			XWindows- On X-Console (only seen there), doing selection inversion, some chars
		(0936)			disapear. Seems related to style runs. Also seems somewhat random.

010525	CLOSED				This has largely been done already.	
991212	REPORT	LGP			More LedItView (etc) low hanging 'template' fruit. See spr#0651 for examples...
		(0654) 

010525	FIXED				There were a number of bugs here - beyond lack of support for RTF. Now I support 'TARGETS'
						type properly (mostly), and both text and RTF clipboard types.
010503	REPORT	LGP			X-Windows. Based on SPR#0894. Fix clipboard support to handle multiple formats - especially
		(0899)			RTF. At LEAST handle it internally (copy from within Led and paste within LedTextXWindows now loses RTF formatting).


010525	FIXED				It was a bit more complex than just getting the atom name. But now its all working - see SPR#0899.
010522	REPORT	LGP			XWindows - Look at ABIWORD clipboard RTF support (to get atom name - basicly)
		(0928)

010525	FIXED				Not great - but a good start.
010524	WORKING				See also SPR# 0898. Did a first cut at all of this. Very rough - esp on the docs/readme files.
010522	REPORT	LGP			XWindows - Build LedIt! LINUX installer
		(0934)

010525	FIXED				Not great - but a good start.
010524	WORKING				See also SPR# 0934. Did a first cut at all of this. Very rough - esp on the docs/readme files.
010502	REPORT	LGP			X-Windows. Do some kind of primitive packaging for LedTextXWindows (as LedIt! Xwindows -
		(0898)			a zipfile with an install readme). Something so I can link to it in my web site, and post to internet
						telling people to look at (beta).

010525	FIXED				Not great - but a good start. Did SOME testing - but going to have to go through next build process
						carefully, and fix things as I go.
010514	REPORT	LGP			Based on SPR#0918. ust move the old LedItMFC/LedItPP projects to the OBSOLETE section,
		(0919)			 and revise all build scripts  and revise all build scripts.

010524	FIXED				Don't scroll any on scrolltoselection call if enter window is filled with selected
						text. I'm not sure this is the ENTIRE solution. But it clearly improves things.
010524	REPORT	LGP			Offshoot of SPR#0939. Open LedIt's ReadMe.rtf. SelectALL, and say COLOR=>BLACK.
		(0940)			You are suddenly scrolled to the end of the document.
							Looking into this - the code was vaguly reasonable.

010524	FIXED				Color bug was a simple bug with WordProcessorCommonCommandHelper<>::OnFontColorChangeCommand ().
						Bug didn't exist in 2.3, so I GUESS it crept in when I templated (to share) all that command code.
						Also - there was a similar bug i a similar case for the display of the color checkmark (when there was no
						common color).
							The scrolling problem is another issue, and is covered in SPR#0940.
010524	REPORT	LGP			Offshoot of SPR#0929. I noticed if you open ReadMe.rtf (which
		(0939)			contains mixed colored text) and say "Select All", and then choose the color BLACK
						from the colors menu - you SCROLL UP - but don't change any colors! This happens on PC/X-Windows,
						and in the last (b6) version of LedIt! MFC (so before the code merge too!).
010524	FIXED
010523	REPORT	LGP			XWindows- Led_BeepNotify () so it works. Must do hook procesure in LedSupport which gets
		(0938)			replaced in Led_Gtk (where we know the gdisplay pointer) to respect modularity and still get this
						working.

010524	FIXED
010522	REPORT	LGP			XWindows - Center dialogs
		(0927)

010523	FIXED				Fixed trouble with TextInteractor::OnCommandUndo/Redo so they were more tolerant
						of being called inappropriately (as Gtk does). Also fixed bug with the PASTE handling code
						where we weren't handling paste when no data was available (really a different problem but it
						started out looking like the same thing).
010523	WORKING
010522	REPORT	LGP			XWindows- Fix CMD implementation so doesn't crash if command requested
		(0926)			when it was disabled. This can happen for example, with X-Windows, where
						accelerators are processed and cmds delivered even if the menu item is disabled.
		
010523	FIXED				Real problem was that LedTickCount2XTime () needed to return an
						unsigned long, instead of a long. That messed up the time value, and caused
						the selection_owner_set() to fail.
010522	REPORT	LGP			XWindows- Clipboard COPY command not working (at least on X-Console)
		(0935)

010523	FIXED				Trouble was code for GTK_CLEAR should have been for GDK_DELETE. FIXED.
010522	REPORT	LGP			XWindows- On X-Console DELETE key doesn't work (though backspace does)
		(0937)

010522	FIXED				This was a MAJOR PITA. None of the sample code made it at all clear how todo this. I think I
						came up with a good way, but only have exhaustive reading and re-reading the gtk source code. SUCKS!!!!
							Also - still not 100% complete. See SPR#0925.
010522	REPORT	LGP			X-Windows. Hook map signals for menus in LedIt! so I can properly enable/disable commands
		(0924)			and check menu items.	
						
010522	CHANGE	LGP			X-Windows. Added qUseGTKForLedStandardDialogs support to LedStdDialogs module. Added
		(0923)			support for Led_StdDialogHelper class with Gtk - as well as StdFontPickBox and StdColorPickBox
						classes (perhaps THESE should be made portable to MacOS/Win32?).

010520	CHANGE	LGP			X-Windows - fixed bugs with Led_GetTickCount () code which caused blinking caret to stop sometimes.
						OnIdle () code support, and cleanup handling of timer code.

010518	CHANGE	LGP			Added about box for LedIt! / Linux.

010511	FIXED				Didn't bother with the clipping stuff. Not sure its necessary (esp when I draw into an offscreen bitmap). Fixed most
						of the problems created by this - esp with scrolling, etc. Now speed is much better (but still could maybe use a little work).
						Anyhow - at least drawing is now flicker-free.
010511	WORKING				Offscreen bitmap (SPR#0915) done. Still a speed problem. Look into that now (maybe a big part of it is the clipping?).
010511	WORKING				Create new SPR#0915 to cover the offscreen bitmap stuff. Working on that first.
010501	NOTE	LGP			This means code like gdk_gc_set_clip_mask () etc from gtktext.cpp DRAW code etc. THEN
						if neccessary - add offscreeen bitmap code as we do for Mac/PC.
010426	REPORT	LGP			Get rid of flicker when drawing. No longer flickers gray then white - but does clearly redraw
		(0883)			more than it should. Just need to use physical and logical clipping.

010518	CHANGE	LGP			Added Led_Tablet_::ScrollBitsAndInvalRevealed () API - and called it from TextInteractor::PostScrollHelper ()
		(0922)			Instead of direct calls to Mac/Windows ScrollRect/Window APIs. Used that hook / abstraction then
						to implement this stuff for X-Windows.

010517	FIXED	LGP			Not great - but halfway decent about box done. Good enough for now.
010517	REPORT	LGP			Build LedIt! Linux AboutBox.
		(0921)

010515	CHANGE	LGP			Major cleanup to new LedIt! project. Still more todo - but now much more common code between platforms
		(0920)			(and more common behavior).

010514	CHANGE	LGP			MAJOR CHANGE Created new LedIt! project/App. It is a merging of the code from LedItPP, LedItMFC,
		(0918)			and LedTextXWindows (into one app source base). This is both to get somewhat better code sharing, and to
						illustrate to customers how to write a single-source cross-platform Led-based app.
							It still needs lots of cleanups (esp on the X-Windows side).
							Also - must move the old LedItMFC/LedItPP projects to the OBSOLETE section, and revise all build scripts
						accordingly (new SPR for this - SPR#0919

010511	FIXED				Cover remaining speed issue as part of SPR#0883.
010511	WORKING				See SPR#0917.
010511	WORKING				Basicly working. Do some more cleanups, and must speed tweek. Remaining (speed) problems maybe due to something
						else like clipping.
010511	WORKING				Created new OffscreeenTablet class, and redid code in MutliRowTextImager/SimpleTextImager
						to use this class. Now much cleaner and more elegant. And now can compile X-Windows code
						to use offscreen tablets, and it uses this class, and just degrades gracefully (cuz no tablet is
						retured yet). NEXT - implement the code so this class returns an offscreeen drawable for X-Windows.
010511	REPORT	LGP			Cleanup and make more portable offscreen bitmap code. Then implement X-Windows support.
		(0915)

010511	CHANGE	LGP			Added new TextImager::G/SetImageUsingOffscreenBitmaps () so we can dynamicly set
		(0917)			and set on a per imager basis, whether or not we use offscreen bitmaps. Default it to value of
						old, obsolete qUseOffscreenBitmapsToReduceFlicker.

010511	FIXED				Now we cache the font mappings in the tablet. Makes this MUCH MUCH faster.
010511	REPORT	LGP			XWindows - do fontname mapping / caching to speed up case where fontname not found (like
		(0914)			opening Led ReadMe.rtf file on Linux (using my current Win32 X-Windows emulator which doesnt have
						"Times New Roman" font).

010510	FIXED				Small bug in new StyledTextIOWriter_HTML::WriteBodyCharacter () code.
010510	NOTE	LGP			Original reported text saved in SPR#0913 folder/HTMLnRTFBUF.rtf
010510	REPORT	WRood	> -----Original Message-----
		(0913)			> From: Rood, William [mailto:WRood@randomhouse.com]
						> Sent: Thursday, May 10, 2001 4:22 PM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Subject: new version of ActiveLedIt (3.0b6)
						> 
						> 
						> Lewis:
						...
						> What follows is first the HTML stream and then the RTF stream 
						> from the same
						> ActiveLedIt instance. The HTML stream does not seem to reflect 
						> font changes
						> and inconsistently handles bold and italic tags. We didn't see 
						> this behavior
						> before and haven't changed how we capture the streams. Was there a change
						> made to the handling of fonts between version 3.0b4 and 3.0b6?


------------------- Released 3.0b6 010509 - Below ------------------------------

010509	FIXED				Just choose the first name.
010509	REPORT	LGP			test SPR 0909\SimpleAlignDivTest.html file - and note that the fontname has 
		(0912)			a comma in it. FIX fontName reader code...for HTML.

010509	FIXED				Tested quite a bit. Seems to work fine.
010509	WORKING				Had to do major-reorg of HTML writer code and maintain a stack of open tags. Test a bit
						more - but I think this is now done properly. NOTE - must open NEW SPR (0911) cuz reader isn't so good
						about reading tags not xhtml friendly.
010508	WORKING				Needs some thought...
010503	REPORT	LGP		> -----Original Message-----
		(0910)			> From: Anderson, Bob [mailto:BAnderson@randomhouse.com]
						> Sent: Thursday, May 03, 2001 3:32 PM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Cc: Walter, Alex; Rood, William
						> Subject: RE: time available...
						...
						> 3. Eliminate overlapped nesting. 
						> Sometimes in the HTML stream the following can occur:
						> some text <i>some italics <b> some italics and bold </i> some bold </b>
						> It should be written as:
						> some text <i>some italics </i><b><i>some italics and bold </i> some bold
						> </b>

010508	FIXED				Lowercase is now used throughout (for tags I generate; some tags are just remembered
						from the input - and they are simply preserved).
010503	REPORT	LGP		> -----Original Message-----
		(0909)			> From: Anderson, Bob [mailto:BAnderson@randomhouse.com]
						> Sent: Thursday, May 03, 2001 3:32 PM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Cc: Walter, Alex; Rood, William
						> Subject: RE: time available...
						...
						> 2. Consistent capitalization for tags in html. For example the 
						> open body tag
						> is written as <Body> and the close tag as </BODY>. The begin tags 
						> must match
						> the end tags; XML is case sensitive. It would also be nice, if 
						> all tags used
						> the same capitalization rule (e.g., always lowercase). For instance the
						> begin html tag is <HTML> but the begin head tag is <Head>.

010508	FIXED				Easy.
010503	REPORT	LGP		> -----Original Message-----
		(0908)			> From: Anderson, Bob [mailto:BAnderson@randomhouse.com]
						> Sent: Thursday, May 03, 2001 3:32 PM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Cc: Walter, Alex; Rood, William
						> Subject: RE: time available...
						...
						> Having an XML valid HTML stream would be ideal (or adding an XML stream),
						> but the important changes we need to the HTML stream are:
						> 
						> 1. Add quotes around all parameters within tags. For example the size
						> parameter of font tags in LedIt are currently written like:
						> <font size=3>
						> However, it should be:
						> <font size="3">
						> Anything that follows an = sign must be enclosed in quotes.

010508	FIXED				Just never implemented handler code (on mac/pc - code shared).
010503	REPORT	LGP		> -----Original Message-----
		(0907)			> From: Anderson, Bob [mailto:BAnderson@randomhouse.com]
						> Sent: Thursday, May 03, 2001 3:32 PM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Cc: Walter, Alex; Rood, William
						> Subject: RE: time available...
						...
						> Changes to NetLedIt (Mac plugin)
						> 
						> 1. The GetSelFontFace() and SetSelFontFace() functions do not work.  The
						> GetSelFontFace() function returns a null value.
						> 2. The GetSelFontSize() and SetSelFontSize() functions do not work.  The
						> GetSelFontSize() function returns 0.
						> 3. The GetSelFontColor() and SetSelFontColor() functions do not work.  The
						> GetSelFontColor() function returns 0.

010508	FIXED				Got basic (RTF) fileIO working. Only really need todo a better job if I do a
						LedIt! for XWindows.
010507	WORKING				Got dialogs up. Trying to see if I can structure things with sub-event loops so coding
						more natural, or if I must use full event callback style (don't like). Then - must actually
						implement save/restore code itself.
010503	NOTE	LGP			Should be easy. I just found a gtk sample that shows how to bring up GetFileName dialog.
010427	REPORT	LGP			X-Windows. LedTestXWindows - OPEN file and Save file dialogs/support.
		(0890)

010507	FIXED				Fixed. Somewhat related to fixes from SPR#0888. But mostly - just fixed RTF reader to handle font names
						properly for xinwdows fonts (was using NULL - so on undo it set the fontname to "").
010505	REPORT	LGP			X-Windows. In LedTestXWindows, SelectALL - set font to some named font. Say undo - and
		(0903)			we get an X-protocol error about invalid font. My guess it it has todo with our unloading
						the font.

010507	FIXED				Fixed. Last problem with Prestige 18 point was that I needed to implement a font-matching algorithm for
						when the requested font doesn't exist. That could still be improved upon (SPR#0905) - but is OK for now.
010507	WORKING				Fixed FontMetrics stuff. Now just have to handle case where font doesn't exist (e.g. Prestige 18 point).
						Now it causes X-Windows error and app to terminate.
010505	WORKING				Fixed MOST of the problems. They mostly stemmed from non invaliding the fCachedFontInfo
						when the font changed, and then more importantly, we looked at garbage strings - call to XTextWidth()
						in Led_Tablet_::MeasureText () had had argument. STILL must finish the Led_FontMetrics to get the ascent/descent
						stuff right...
010505	WORKING				Made more progress. But the more I enabled in the way of attributes for fonts - the more crashes/quirky
						behavior I saw. It was as if the TextWidth () code was producing the wrong - or garbaged answers.
							I see ONE bug that may have been responsible for part of it. Led_FontMetrics produces garbage on
						XWindows. Also - we probably need to do a fancier job of XTextWidth() (for each substring) when I use
						certain kinds of fonts (propertional? truetype? kerning?).
010505	WORKING				Added Style/Colors/Font Size/Font Style menus. All working - except for fontsize.
010504	WORKING				Now I'm up to the point where I generate a fonts list menu, and you can pick different fonts.
						Still much more todo (font matching algorithm - so we dont get back bad fonts from XLoadFont and crash).
010504	WORKING				Got it very roughly working. Can set fonts by name. TextImager::GetStaticDefaultFont() returns
						something half-decent. Still much more todo.
010426	REPORT	LGP			X-Windows. Font support.
		(0888)				(old note on this: Debug why XSetFont () call in Led_Tablet_::SetFont () 
						doesn't work (failure) and why the XGetGCValues stuff in Led_Tablet_::GetFont/SetFont dont work right -
						necessitating the fFontID data member!)

010505	FIXED	LGP			Very strange. I cannot understand what is going on. But I DID reproduce it with
						Borland C++ Builder-5. When the function is named mkDefaultCommandNames () it never
						gets called, and when I rename it MakeDefaultCommandNames () - it DOES get called. WOW! If I really
						counted on Borland C++ - this would spook me (note I tried doing a #undef mkDefaultCommandNames and
						that didn't help).
							BTW - I THINK bug had todo with mkDefaultCommandNames() in WordProcessor.cpp. But they are both STATIC.
						Maybe meaning of this has changed in C++? I know it could have cuz of namespace stuff. But I'd be surprised if it
						suddenly started meaning public?
							Anyhow - workaround was simple. I just renamed the function to MakeDefaultCommandNames ().
010504	REPORT	Claudio	> -----Original Message-----
		(0904)			> From: Claudio Nold [mailto:claudio.nold@gmx.ch]
						> Sent: Friday, May 04, 2001 5:09 PM
						...
						> There is another bug in TextInteractor.cpp. It's a namespace problem and
						> I think it only concerns the BCB compiler.
						> 
						> There is the following definition:
						> static inline TextInteractor::CommandNames mkDefaultCommandNames ()
						> And its "use":
						> TextInteractor::CommandNames TextInteractor::sCommandNames = 
						> mkDefaultCommandNames ();
						> 
						> But when you do a Paste-Command, the Undo-Helper gets the name of the
						> command - but it's empty and the pointer contents NULL (wich will cause
						> an access violation error). When you look at sCommandNames you see, that
						> they are not good initialized. Maybe it takes 'mkDefaultCommandNames'
						> from anywhere else but not this one above. I have simply changed this
						> name to 'mkDefaultCommandNamesA' and it works fine. Please rename this
						> function or use namespaces, ok?

010504	CLOSE				Really this was a DUP of 0888. Trouble was my hack for picking fonts was picking a really bad
						one. Nows the right time to solve this problem properly - I guess.
010503	REPORT	LGP			X-Windows. text is displayed as white-on-white with X-server running on Linux console
		(0900)			(maybe counting on default pixel/foreground pixel color?).

010504	FIXED
010503	REPORT	LGP			X-Windows. Right click in LedTestXWindows - and it core-dumps.
		(0901)

010504	FIXED	LGP			Added TextImager::GetEffectiveDefaultTextColor () and related functions. Didn't bother getting
						rid of old Led_XXX routines - at least not yet.
010503	REPORT	LGP			Add Fore/Back and selected Fore/Back color properties to TextImager. Make them DEFAULT to old
		(0902)			Ledsupport routines. But rename them - and only keep them aroudn for backward compat (if they were in 2.3).
						Note clearly in teh docs they are only avisory values - and maybe ignored by classes that override EraseBackground etc.

010425	CLOSE				No. I changed my mind. Builtin TE does this. But it conflicts with too many GUI standard
						cmds like CTRL-A => SelectAll. Note - AbiWord on X-Windows does NOT do this (it acts like
						standard Mac/Win apps for keybindings).
010425	REPORT	LGP			X-Windows - LOWPRI. Map emacs-cmds like CTRL-A => BEGIN-OF-LINE, etc - like
		(0884)			 GtkTextFunction control_keys.

010503	FIXED
010426	REPORT	LGP			X-Windows. Implement blinking caret.
		(0887)

010503	FIXED	LGP			Fixed - mostly. But this was difficult. Basic trick was to have the Clipboard
						FlavorPackage classes maintain a private clipboard (map of type to/from data). Then - in
						Led_Gtk_Helper<> template - hook into the gtkwidget/gtkselection classes to leverage that
						codes support for the X-protocols selection mechanism.
							Right now - only supports PLAIN-TEXT copy/paste - though MOST of the infrastructure is
						there to support other types. Open new SPR (0899) to deal with it.
010502	NOTE	LGP			This will have to wait a while. It looks complicated. To make it work across apps
						anyhow - you have to support a bunch of XSelection crap (see Selection section - Chapter 11
						of X programming manual, volume 1).
010501	REPORT	LGP			X-Windows. Clipboard support (Copy/Paste)
		(0894)

010502	FIXED				Changed hack global variable to SyncronizeLedXTickCount () API - and fixed Led_GetTickCount() to
						take advantage of gettimeofday() results. That made the minor problem with detecting how long
						arrow in SBAR held down problem go away (used for scroll acceleration). And having this time counting
						stuff right will be useful in lots of places (blinking caret +++ ?).
010502	NOTE				Maybe can pull trick by mixing local time (from machine where xclient runs with xtime fields
						from X-protocol records! Use that to bump time reported between events!
010502	NOTE				May have to turn off qDynamiclyChooseAutoScrollIncrement if I don't fix this! Causes me to
						scroll too much.
010501	REPORT	LGP			X-Windows. Current support for Led_GetTickCount () SUCKS. Not sure what right
		(0895)			way to do this is. Barely passable for now... MED PRIORITY.

010502	FIXED				There is still a slight issue with scrolling speed due to SPR#0895. But overall - it works pretty
						well (vertical and horizontal).
010501	WORKING				Roughy 1/2 implemented. Got GtkAttachments built into GtkHelper<> template. Got Main.cpp
						code changed so now creates two scrollbars (v/h). Still more debugging todo, and no hooking in
						with updating scrollbar values etc. Also - some logical question about SetScrollBarType () API.
010425	NOTE				Looked into this extensively. Code in gtktext.c (etc) not too bad. Basicly - I need to create these
						GtkAdjustment objects - and use those to hook into scrollbars. When I construct the adjustment objects - must
						then also specify hooks for certain scrolling messages. Altogether - looks like a good days work to get this
						working fully. But should fully support my fancy (by char - not pixel) scrolling model.
010425	REPORT	LGP			Support scrolling/scrollbars.
		(0882)

010501	FIXED
010501	REPORT	LGP			X-Windows. More configs in makefile - DEBUG vs. NoDEBUG and UNICODE vs. non-UNICODE
		(0896)

010501	FIXED
010501	WORKING	LGP			Mostly working. But still need to do timer with autoscroll support (so when
						mouse not moving but dragged outside of window - text still scrolls).
010426	REPORT	LGP			X-Windows. Implement mouse click/drag select support
		(0892)

010501	FIXED	LGP			FIXED. Added PeekIfTextStore()==NULL check to Led_Win32_Helper<BASE_INTERACTOR>::OnKillFocus_Msg ().
010430	REPORT	Claudio	> -----Original Message-----
		(0893)			> From: Claudio Nold [mailto:claudio.nold@gmx.ch]
						> Sent: Monday, April 30, 2001 5:38 PM
						...
						> 
						> I think I figured it out now. The error comes only if the window
						> with Led in it is active. In the destructor (in my TLed class), I call
						> SpecifyTextStore(NULL); after that ~Led_win32_SimpleWndProc_Helper()
						> will be called, wich itself calls ::DestroyWindow().
						> If Led is the focussed control, a WM_KILLFOCUS is sent automatically.
						> There happens the access violation as described. I think there are two
						> possibilites now:
						> 1) I manage the TextStore outside my TLed helper class. So I'm sure that
						> Led will be fully destructed and after that I can free the TextStore.
						> 2) You add a 'if' call in your Win32/KillFocus function for beeing sure,
						> that the text store is there. Obviously - this is my favorite option ;-)
						> 

010430	FIXED	LGP			FIXED. Added FocusIn/FocusOut support to Led_Gtk_Helper<> template.
						<OLDCODENOTE>
							Moved TextImager::Led_EraseBackground_SolidHelper/HilightARectangle__SolidHelper to
							Led_Tablet_::EraseBackground_SolidHelper and Led_Tablet_::HilightARectangle__SolidHelper ().
							These COULD have been called directly by user code - but not too likely. Anyhow - basicly just get rid of tablet
							first arg - and instead call as tablet METHOD.
						</OLDCODENOTE>
010426	REPORT	LGP			X-Windows. Implement SELECTION display (invertrect)
		(0886)

010430	FIXED	LGP			Trouble was ONLY with Win32 partial UNICODE builds. Chars come in to OnChar() message - it appears
						in charset derived from arg to WM_INPUTLANGCHANGE message. Capture that - and use its charset/codepage
						specification to map/translate incoming OnChar() messages. I only tested Win2k with Japanese, English,
						and Russian charsets. Warn LEC so they test more.
010430	REPORT	BobSwerd>	On Windows 2000, I can enable the Russian keyboard layout through the
	(0891)				>Regional Options by clicking on the Input Locales tab, clicking on
						>"Add.." and selecting Russian.
						> 
						>If I then open NotePad, change the input locale to Russian (by clicking
						>on the small input locale icon in the lower right of the screen and
						>changing it from "EN" to "RU"), I can then type Russian characters.
						> 
						>However, if I open LogoTrans, change the input local to Russian and
						>type, the characters appear as gibberish.  Copying from NotePad to
						>LogoTrans works successfully.

010430	FIXED				Not all commands work properly - and we may want to add more. But the basic infrastructure for cmd
						processing is in place, and many of the standard WP commands are available - and work.
						And - they all work using the builtin TextInteractor/WP CommonCommandHanldler code.
010427	WORKING				Mostly working. Added new TextInteractorCommonCommandHelper_Gtk<> template and related classes etc.
						Still needs some cleanup (esp so easier to deal with unsupported cmdnumbers - and dialogs not yet supported).
010426	WORKING				Close to seeing how Gtk menu commands work - and have CutCommand() sort of working (though
						no clipboard yet - make separate SPR for that) - but still need to do series of templates for CMD
						support like I do for other class libs. Still unclear exactly how todo that with Gtk menu commands.
010426	REPORT	LGP			Implement various menu commands - like selectall, Copy/Cut/Paste,Undo, etc...
		(0885)

010425	FIXED	LGP			Fixed - but opened SPR#0884 - to track additional keys we may want to handle.
010425	WORKING	LGP			Newlines fixed. Still todo- arrow keys.
010423	REPORT	LGP			X-Windows - More keystroke support - e.g NEWLINES, arrow keys, handle
		(0878)			 control keys (return false? so cmds work?).

010426	FIXED	LGP			Tested at LEC on WinNT 4.0 Spanish system. Files placed in "Achivo somehting or other" (localized
						program files dir). Assume this has always been right/fixed since switching installer technology.
010413	WORKING	LGP			Test NEW installer on Win9xJ next time I'm at LEC.
010102	REPORT	LGP		> From: Karl Pentzlin [mailto:pentzlin@acssoft.de]
		(0866)			> Sent: Tuesday, January 02, 2001 4:34 AM
						> To: info-led@sophists.com
						> Subject: LedIt! - Errors (regarding internationalization)
						> 
						> 
						> Sirs,
						> I have evaluated LedIt 2.3 because I need a text editing component for
						> a C++ application for plain Unicode (UTF8) text (as you promise to
						> support Unicode in your next application).
						> Nevertheless, I found the following errors in your demo:
						...
						> 3.) The installation program clutters my non-English system with a
						> literally called "Program Files" directory instead of getting the name
						> from the registry.

010423	FIXED	LGP			Added layout method - called on change of size and initially - and there do the SetWindowRect call.
010425	REPORT	LGP			Fix bounds of window (my Gtk subclass)
		(0881)

010423	FIXED	LGP			Got rid of most of the egregions background flicker by using NO_WINDOW flag like gtktext.c widget.
						Had to hook a few more widget messages - like realize / draw (as opposed to expose). Still kludged together - but
						now working much better.
010423	REPORT	LGP			Make base class be GtkEditable instead of GtkMisc - more like the builtin Gtk text edit support
		(0880)

010425	FIXED	LGP			Fixed. Moved TextImager::EraseBackground..SolidHelper to Led_Tablet_ and similar code move
						for SetFore/Back color code to Led_Tablet_ (from TextImager). Fixed a few LedGDI color/colortable bugs (XWINDOWS).
010423	WORKING	LGP			Mostly done. But must fix REFRESHRECT() code to not do an immediate-mode
						erase with the wrong background color.
010423	REPORT	LGP			X-Windows - EraseBackground support
		(0879)

010423	CHANGE	LGP			Fix bug where crash (assert) when we use default GetLayoutMargins () impl
		(0877)			- from WP - isntead of my currnet hack one in Main.cpp for X-Windows. Fix Led_Gtk.h
						Led_Gtk_Helper<>::RefreshWindowRect()

010423	CHANGE	LGP			Got XWindows sample app building with WordProcessor class!!!

010423	CHANGE	LGP			PortableGDI stuff from TextImager should go into Led_Tablet (if not
		(0876)			too hard - not entirely - but as much as is easy) to make X-Windows diffs
						more localized.


------------------- Released 3.0b5 010419 - Below ------------------------------

010419	FIXED	LGP			FIXED. The particular \object failed to load cuz it didn't support the IViewObject2 interface.
						But the BUG was that my code didn't catch this properly and read the \result \pict in. It would
						in some cases - if the \pict was formatted in just the right way. But not as written by Word2000.
						I had to change the reading code to be more forgiving.
010418	REPORT	LGP			Open 'RTF-Spec-1.5.rtf' file. Opens - but then issues error warning and
		(0875)			closed. Happened in 3.0b4 as well - but this certainly USED to work not too long ago.

010418	FIXED	LGP			Trouble was with code I had for CvtTo/FromTWIPS in Led_Tablet(). See SPR#0868.
						Anyhow - I THINK this is now finally fixed properly (though it maybe too slow the way its written now).
						I tested that the print fix from before still works. I also retested PrintPreview. That still did NOT work
						though probably cuz of the other Led_MFC print support MapMode changes/issues refered to in the SPR#0868.
010418	REPORT	LGP			tabstops broken in LedLineIt!. Something I broken THIS release cycle.
		(0874)

010418	FIXED	LGP
010418	REPORT	REMO	> -----Original Message-----
		(0873)			> From: Remo Eichenberger [mailto:reeichenberger@access.ch]
						> Sent: Wednesday, April 18, 2001 11:40 AM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: BUG Report Led 3.0b4
						> 
						> 
						> hi lewis
						> 
						> i have a bugreport for LedLineIt 3.0b4. I implemented a font-size-function
						> in my code then it crash in the led-code.
						> 
						> you can reproduce the bug:
						> 
						> 1) start LedLineIt 3.0b4
						> 2) open a file
						> 3) then select the menu options/font size/18
						> 4) CRASH !
						> 
						> could you please make a patch (workaround ... ?) for me to 
						> correct the code
						> ? thanks.

010417	FIXED
010417	WORKING	LGP			Substantial code cleanup on the way. I moved a bunch of redundant code from Led_Win32.h and
						Led_MacOS.h to TextInteractor.h (code relating to number of clicks - e.g.
						TextInteractor::GetCurClickClickCount).
							Also - new routines related to improved click handling there - like
						TextInteractor::UpdateClickCount () and TextInteractor::ClickTimesAreCloseForDoubleClick ()
						etc.
010417	WORKING	LGP			Done on Mac - but want to revisit it when I do PC code - and maybe share code better?
010417	REPORT	LGP			Fix Led_MacOS_Helper<BASE_INTERACTOR>::UpdateClickCount () code to do what PowerPlant does -
		(0871)			for checking if close enough (on DISTANCE). Must save distance. Then - if works well -
						fix Led_Win32 to do likewise. I think that may remove some quirks of the Windows
						dblclick handling code.

010417	FIXED				Unseemly - but not terribly costly kludge to fix this problem. I don't really know what
						caused this problem - but I've eliminated its symptoms by adding an extra Refresh() in the
						Led_MacOS_Helper<BASE_INTERACTOR>::HandleTrackDragSelectInText () method. Since it fixes the problem
						with no apparent cost - and since the MacOS implementation is much less important than the PC one -
						I'm going to just consider this kludge good enough.						
010417	REPORT	LGP			Quirky MacOSOnly display glitch when tracking from right-to-left. Bug introduced in B3? When I
		(0872)			moved a bunch of code from directly using PowerPlant to Led_MacOS.

010417	FIXED
010417	REPORT	LGP			Add new feature to 'ignore' control keys. This should be defaulted ON,
		(0870)			but shut-offable via a method call. Most TE fields ignore control keys when you type them.

010417	FIXED	LGP			Added PrinterSetupDialog, PrintDialog and PrintOnce OLE AUT methods. Also made plain
						print and printer setup dialogs available from the context menu.
010417	WORKING	LGP			Got basicly working. Test a bit more, and do OLEAUT interface yet...
010414	NOTE	LGP			Give it a quickie try. See if its easy todo (probably - cuz of my existing MFC support).
000911	NOTE	LGP			Another potential customer asked about PRINTING.
000114	NOTE	LGP		Should be able to print both under PROGRAM (OLE METHOD) and USER (context menu) control.
991221	NOTE	LGP		Dr. Robert-Andreas Schöning [mailto:robert@a-line.de] also asked for this.
990720	DEFER	LGP
990720	NOTE	LGP		I can tell you that when the control is embedded in MSIE5, it appears to
						NOT print out properly. I've added this issue to my SPR system.
990720	REPORT	DaMorag	FROM David Morag 990720
		(0610)			4) Can I print the ActiveX content as i can with the richtext control?

010414	FIXED	LGP			Probably far from perfect - but much better now. Just avoid a couple of
						TabletChangedMetrics () calls - so we keep old linebreak info. Someday later maybe
						rewrite so works even better.
010414	REPORT	LGP			Assure LedIt! (etc) printing is WYSIWYG. Based on SPR#0868.
		(0869)			

010414	FIXED	LGP			Broken since I converted to CvtFromTWIPS () stuff between 3.0d6 and 3.0b1.
						Fixed much of actual printing problem by using LPtoDP/DPtoLP in CVT routines. But that
						left two serious bugs remaining. One was that PrintPreview was still broken. I never totally
						understood this problem - since the MFC PrintPreview code is so awkward. But I think it stemed from
						the fact that I no longer use the CPreviewDC which subclasses from the CDC (with virtual methods getting overriden).
							Instead - I have my own Led_Tablet class - which doesn't get those overrides. I could have done a Led_Tablet subclass
						and made appropriate methods virtual - but that would have been alot of work - and just for MFC's print-preview. I think
						their print-preview sucks - so don't bother. I just disabled PrintPreview from LedIt MFC.
							The next problem is that the printing isn't truely WYSIWYG. To address this - I think I may just rewrite the printing
						support - and not use much - or any - of MFCs print support. Open new SPR for this: SPR#0869.
010414	REPORT	LGP			LedIt! (MFC) printing seems pretty broken...
		(0868)			

010413	FIXED				Wrote docs for NetLedIt! reference now as well.
011108	WORKING				Did halfway decent REFERENCE doc for ActiveLedIt! COM API. (See SPR#0704). Just left to write/
						warm over ActiveLedIt! stuff for NetLedIt!
011107	WORKING				Did first cut at better organized layout of ActiveLedIt! folder - and some very prelim docs.
011107	REPORT	LGP			Need (BADLY) AT LEAST some kind of toplevel readme file in the NetLedIt! purchaced project.
		(0844)			But really do FULL DOCS (couple pages in a dir with outline/organization/pointers - and IDL/CLASS file.
						Do basicly the same thing for ActiveLedIt! VERY SOON. IMPORTANT!!!

010413	FIXED				I'm not 100% sure this is for the best. But I've added a
						compile-var qUseWin32CompareStringCallForCaseInsensitiveSearch - which defaults to
						true for Win32 and false otherwise. If true - then the CompareString() routine
						is called on a char-by-char basis ONLY for case-insensative comparisons. The routine
						has lots of options - including an LCID - which I wasn't quite sure how to handle.
							I think this - at least - works better than what I had before for Windows - and the
						same for everyone else - so probably OK for now. FIXED.
010102	REPORT	LGP		> From: Karl Pentzlin [mailto:pentzlin@acssoft.de]
		(0864)			> Sent: Tuesday, January 02, 2001 4:34 AM
						> To: info-led@sophists.com
						> Subject: LedIt! - Errors (regarding internationalization)
						> 
						> 
						> Sirs,
						> I have evaluated LedIt 2.3 because I need a text editing component for
						> a C++ application for plain Unicode (UTF8) text (as you promise to
						> support Unicode in your next application).
						> Nevertheless, I found the following errors in your demo:
						> 1.) Case-insensitive search does not work when accented letters are
						> encountered. Apparently, you do not use the Windows API function
						> CompareString. As you probably know, case insensivity is not trivial for
						> Unicode (i.e. regarding the well known Turkish dotless i). But I
						> expect it to work flawlessly for Greek and Cyrillic. AFAIK
						> CompareString does it all.

010413	FIXED	LGP			Added BuildingNetLedIt.rtf to clarify build. Made the Javas stuff build automatically as part of the MSDEV
						project file. Deleted garbage readme.html.
010413	REPORT	LGP			Need clearer docs on building NetLedIt! (esp on mac - since need pc-built files).
		(0863)			Delete/revise the readme.html file which is part of the project.

010412	FIXED	LGP			Supported dialog / warning also for NetLedIt! on WINDOWS (NOT MAC YET). Open new SPR for MacOnly NetLedIt! issue.
010411	WORKING	LGP			Did for ActiveLedIt!. Still have yet todo for NetLedIt. Now write into registry expires date -
						7 days after first run. Each time on OnFocus() - warn (but no more than once every 2 minutes).
						Warning dialog lets you easily navigate back to our web site to buy product.
010411	REPORT	LGP			Do DEMO/LIMIT TO 30-days for NetLedIt! / ActiveLedIt! - think out details.
		(0861)			But do something so harder to use indefinitely (when demo has expired).

010409	FIXED				Fix ActiveLedItControl::SetBufferText () to make sure we treat input text as WIDE unicode.
010409	REPORT	LGP			Web page http://www/Led/ActiveLedIt/DownloadPreReleaseActiveLedItPage.asp doesn't
		(0860)			work PRELOADING TEXT with UNICODE (full unicode) build (b4).

010409	FIXED				Added LaunchFontSettingsDialog/LaunchParagraphSettingsDialog methods
010311	REPORT	shane@sh	I said I'd try to throw this in for my next release....
		(0859)			> -----Original Message-----
						> From: Shane McMurray [mailto:shane@shanemcmurray.com]
						> Sent: Thursday, March 08, 2001 11:00 AM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Re: ActiveLedIt! purchase
						....
						> 2. is there a way to call the font dialog and the paragraph 
						> spacing outside
						> of selecting it from the right clicked menu?

010409	FIXED				Added DefaultFontFace/DefaultFontSize params to OCX (<param> tags).
010311	REPORT	shane@sh>-----Original Message-----
		(0858)			>From: Shane McMurray [mailto:shane@shanemcmurray.com]
						>Sent: Sunday, March 11, 2001 11:35 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: Re: ActiveLedit
						>
						>
						>Thanks for you help, Lewis. i'll play with that. May i suggest allowing additional
						> <params> for setting default properties when the control is loaded. I don't see that
						>you would need them all, but the formatting properties would be useful.
						>
						>....
						>-----Original Message-----
						>From: Shane McMurray [mailto:shane@shanemcmurray.com]
						>Sent: Sunday, March 11, 2001 2:41 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: ActiveLedit
						>
						>
						>Lewis,
						>
						>Is there a way to set or change the default font for the control on load time?
						>I notice that it defaults to "arial" and i'd like to change it.

010409	FIXED	LGP			Retirned value from "TextBitmap" property is now an OLE Picture object (supporting
						the IPicture interface) created with OleCreatePictureIndirect  ())
000404	REPORT	LGP			Wild guess - see if IDataObject can be used as a return value from the "TextBitmap" method
		(0733)			of ActiveLedIt!.

000409	Fixed				Not SURE I should have done same for Mac/UNIX etc - but I did anyhow.
000409	REPORT	LGP		CTRL-BACKSPACE should remove previous word - I think. Test Notepad/Word/WordPad etc...
		(0857)			

000321	FIXED	LGP			A few bugs with ActiveLedIt GetHeight() wrapper. I applied the fixes there - AND
						to the NetLedIt plugin. And I clarified the docs in the ActiveLedItReference.rtf file.
000321	REPORT	JKSmith	>-----Original Message-----
		(0856)			>From: JK Smith [mailto:james@ebusiness-technologies.com]
						>Sent: Wednesday, March 21, 2001 2:48 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: Question
						>
						>
						>Hi Lewis,
						>
						>function GetHeight() {
						>  document.form1.Height.value = ActiveLedIt.GetHeight(-1,-1);
						>}
						>
						>I'm getting nothing but -1 back from the GetHeight method. Am I doing something wrong?

010305	LGP		FIXED	be sure TextStore itself is part of MarkerOwner list (so it gets adjusted by new code in
						ChunkedArrayTextStore which keeps separate marker trees for each owner)
010305	REPORT	REMO	> -----Original Message-----
						> Subject: AddMarker...
		(0855)			> From: Remo Eichenberger [mailto:reeichenberger@access.ch]
						> Sent: Monday, March 05, 2001 3:06 PM
						> To: Lewis Gordon Pringle; Jr.
						...
						> i try to understand the AddMarker. I use your LedLineIt. i add 
						> the following
						> code:
						> 
						> void LedLineItView::OnGotoLineCommand ()
						> {
						>     Marker* m_range_marker = new Marker();
						>     PeekAtTextStore()->AddMarker(m_range_marker, 0, 
						> 10,PeekAtTextStore ());
						> ...
						> }
						> 
						> then i start LedLineIt. then i open a file (>1024 bytes) and then i call
						> GotoLine then the ASSERTION throws that i have written you in the 
						> last mail
						> ! i think it's VERY simple to reproduce. why i can't make such things with
						> the current LED ?

010212	FIXED	LGP			Added this to ActiveLedIt! and ActiveLedIt! reference docs. Also to NetLedIt!
010212	REPORT	jksmith	> From: jksmith@uscertifiedletters.com
		(0854)				Requested OLE Automation ability to compute height - in pixels - of a document using ActiveLedIt!.
						
010205	FIXED	LGP			Antoine THEN complained that soft-line-break support was broken (I used to always emit <br> instead
						of <p> - and I guess my change - though an improvment - introduced some problems for people who counted on the
						old buggy behavior).
							Anyhow - I now treat <br> in reading/writing HTML as equivilent to a soft-line-break.
							FIXED!!!
010205	FIXED	LGP			Original request was to support align=center/etc in <p> tags. I DID fix this.
						But also had to sustantially rewrite the emitting of NLs and the reading of <p>
						codes. Now these work much better - I believe (more true to the HTML spec).
						AND they support justification.
010205	REPORT	ape@bow.> From: Antoine Perret [mailto:ape@bow.ch]
		(0853)			> Sent: Monday, February 05, 2001 10:43 AM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Subject: RE: ActiveLedIt
						> 
						....
						> To be clear:
						> 
						> If the text is "my paragraph" then
						> 
						> left aligned paragraph 	= my paragraph (no change)
						> right aligned paragraph = <p align="right">my paragraph</p>
						> centered paragraph      = <p align="center">my paragraph</p>
						> 
						> I noticed that text colors were not handled on version 2.3 and 
						> saw that they
						> were implemented in version 3. I guess that correctly taging the 
						> paragraphs
						> would be a welcome addition to version 3.
						> 
						> Could you let me know if you can include this feature to version 
						> 3 or if you
						> deem this to be a special development, what the cost and delays would be.


------------------- Released 3.0b4 010120 - Below ------------------------------

010119	FIXED	LGP			This would work better if I had UNICODE support on the Mac. There are limits to how well it can work
						without Mac UNICODE support (given the one charset model in Led's no-UNICODE support). But I think this
						now works very well for Windows - and at least decently for Mac.
010119	WORKING	LGP			Real issue is that HTML reader/writer didn't handle numerical entity references properly
						(e.g. &#394 or &endash). I think I have now fixed this for the case of UNICODE and done a decent job
						for the case of NON-UNICODE - at least on the PC. Still must test a bit on the Mac - and see how well it
						works there (with no UNICODE).
010118	REPORT	WRood@RH> -----Original Message-----
		(0852)			> From: Rood, William [mailto:WRood@randomhouse.com]
						> Sent: Wednesday, January 17, 2001 11:55 AM
						> To: 'lewis@sophists.com'
						> Cc: Anderson, Bob; Hart, Chris; Walter, Alex; Miller, Stephen
						> Subject: RE: Various (specifically: high ASCII characters)
						> 
						> 
						> Lewis:
						> 
						> Thank you for your reply, but at this time I think changes to the LedIt!s
						> will be necessary for our high ASCII character problems. I hope the
						> following will better illustrate what I was trying to get at before.
						> 
						> We are using the version 3.0d6 [Internal UNICODE] (May 1 2000) of
						> ActiveLedIt! and version 3.0b3 (Oct 23 2000) of NetLedIt!. I believe a
						> UNICODE version of NetLedIt! would be necessary to handle all of our
						> concerns, but if our primary concerns could be handled with a non-UNICODE
						> NetLedIt! that would be acceptable. Our primary concerns are the following
						> characters (note they may not display properly if an email server 
						> has parsed
						> them):
						> 	EnDash -
						> 	EmDash - 
						> 	Single Curly Quote Left '
						> 	Single Curly Quote Right '
						> 	Double Curly Quote Left "
						> 	Single Curly Quote Right "
						> 	Dagger ?
						> 	Double Dagger ?
						> 	Dot * 
						> 	Ellipse ... 

010108	CHANGE	LGP			Added (primitive) support for Borland C++.
		(0849)			Now we compile with Borland C++ Builder 5 - but also have a new demo project -
						BorlandCPPBuilderTest - to show how to call Led from Borland's VCL (Visual Class library).
							Note - this is a crufty - but usable - integration. The right thing - integrating fully with VCL
						and writing a VCL wrapper is covered in another SPR. Also - this demo program is fairly weak (again - covered
						in another SPR).
							This was all requested by Claudio Nold [claudio.nold@gmx.ch] - and I did only as much as he required.
							See also SPR#0850, 0851.

001117	FIXED
001117	REPORT	LGP			LEC SPR#7081. Don't allow D&D to be initiated from a READONLY view in
		(0848)			Led_MFC_DragAndDropWindow<BASECLASS>::HandleDragSelect ().

001117	FIXED				Use &* as a hack to work around this bug. That STL won't let you convert vector<T>::iterator to T*. But they DO
						have an operator * () method you can call which returns such a reference, and you can take & of THAT to get the pointer.
						This hack should work portably across all the same STLs that the simpler - more correct - code did.
001117	REPORT	LGP		>i think you know that the STL-Library from VC++ is the STL from Dinkumware. I use the
		(0847)			>newest version of this Library (included in VC 7 (VC-NET)), than the current version of
						> VC++-STL has MANY bugs ( see: http://www.dinkumware.com/vc_fixes.html )
						> When i try to compile your newest LEDb3 then i have ONLY following two ERRORS: 
						>
						>Led\Sources\FlavorPackage.cpp(567) : error C2664: 'memcpy' : cannot convert 
						>parameter 2 from 'class std::_Ptrit<char,int,char const *,char const &,char *,char &>' to 'const void *'
						>        No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called
						>
						>\Led\Sources\HiddenText.cpp(168) : error C2664: 'RemoveMarkers' :
						> cannot convert parameter 1 from 'class std::_Ptrit<class Led::Marker *,int,class Led::Marker * *,class Led::Marker * &,class Led::Marker * *,class Led::Marker * 
						> &>' to 'class Led::Marker *const []'
						>        No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called
						>
						>i know you don't support this library explicitly, but i think when you have only two error, then i think you see a way :-)

001110	FIXED				Mostly a bug not copying prevCharWordClass in TextBreaks_OLD::FindLineBreaks (). Also
						revised slightly the apopstrophe/quote char handling.
001110	NOTE	LGP			Bug NOT a regression. Doesn't occur in narrow-char mode. Its UNICODE specific.
001110	NOTE	LGP			Saved small example file - SPR_0846.rtf to reproduce problem.
001109	REPORT	LGP			SERIOUS REGRESSION SINCE 2.3 - LINEBREAKS CODE IS BROKEN. Quotes not always kept with word
		(0846)			they surround, and <PARAM> broken after the P in ActiveLedItReference.rtf

001108	FIXED
000910	REPORT	LGP			<Param> tag code produces garbage on FULL-UNICODE builds.
		(0845)			

001108	FIXED				DONE. Not great - but a decent start. See also SPR#0844.
000122	REPORT	LGP			We need DOCS files for ActiveLedIt!. Its something people frequently ask for. Even though
		(0704)			the docs are in some sense trivial - people expect them. So DO IT!!!

001108	FIXED				See SPR#0844. Now done - including about the 'TextRTF' <param> names.
000906	NOTE	LGP			Note also 'support for "Text", "TextHTML", and "TextRTF" param names can be now loaded'
000829	REPORT	LGP			Do at least BASIC ActiveLedIt! doc files, so that people who download/buy it get something they
		(0832)			can consider docs. At least restate the IDL contents, and provide pointers to sample code etc.

001106	FIXED				Problem with indent being set improperly is cuz tabs/li/fi/etc (paragraphinfo) need to be saved in
						the stack-based group contexts, and saved/restored appropriately. I tested original file,
						and now SEEMS to work better. Maybe have slowed things down (RTF reading) slightly - but not alot
001106	WORKING				New file - SPR#0843.rtf - reproduces the problem (smaller). Last bulleted line looks fine in MSWord 2K, but
						inappropriately shifted left on Led 3.0b4x.
001106	REPORT	LGP			Look into indentation problems in the LV71ProjectPlan20000920.rtf
		(0843)			 file 2 lines after "Barcenona Engine:" (bullet list)

001103	FIXED	LGP			MultiRowTextImager::ScrollSoShowing () and SimpleTextImager::ScrollSoShowing () must call
						ScrollSoShowingHHelper () at the END - after any vertical scrolling. This is because the vertical
						scrolling can affect the MaxHScrollPOS(). Still be careful about case with ONLY horizontal scrolling - and
						call hscrollhelper in that case too.
001103	REPORT	LGP			Horizontal autoscrolling (as called from the find command) would sometimes fail to scroll the selected
		(0842)			text into view - in LedLineIt.


------------------- Released 3.0b3 001022 - Below ------------------------------

001022	CHANGE	LGP			Changed binary version# scheme used in NetLedIt! and ActiveLedIt! - so first octet is now 0x30 instead of first two octets
		(0841)			being major/minor version#. Then shifted everything else left by one. Then use newly freed up least significant octet as a flag
						if DEMO-MODE or not. That way - if people have versionX NON-DEMO mode - it will always seem higher number than VersionX DEMOMODE,
						so custoemrs can specify in theier web site a version# which will REPLACE any demo-versions that a user might have downloaded.

001022	CHANGE	LGP			One MAJOR change. I added a new project NetLedIt! - which is a netscape plugin for Mac and Windows. Someday
						port to UNIX - once UNIX port done - and once Netscape 6 is stable (cuz that uses GTK). Probably not til next major
						release.
							Closely related to this new feature was that I greatly elaborated the support for Led_MacOS. Now lot of stuff
						that was only supported for PowerPlant is genericly supported. NedLedItMac doesn't use PowerPlant.
							In a similar vein - I pulled LOTS of common code out of the various applets (like find dialog, aboutbox, and many more commands)
						and implemented them genericly in Led - so they just get USED in each applet - not reimplemented/cloned.

001020	FIXED	LGP			Build 3210 of WinZip SelfExtractor 2.2 seems to fix the problem. Now I've re-enabled the
						signing of the installers - and it seems to work. Yet to try downloading with MSIE - but I expect it
						will work better now (and give warning about code being signed).
000709	WORKING	LGP			Added to the build scripts - LedLineIt PC and LedIt PC Installers to be signed.
						But that caused the self-extractor from WinZip to barf. So commented out for now.
						Sent them email (winzip folks) today. Hope they fix it!
000619	REPORT	LGP			Sign Installers
		(0796)			

001006	CHANGE	LGP			Finally got to BETA stage for new NetLedIt! netscape plugin (for mac and windows - Linux to come later).
						Made LOTS of changes to Led_PP/Led_MacOS stuff, and the generic command handling code etc, to save a huge amount of
						code that was duplicated across a now growing number of Led-based apps I maintain.

001003	CHANGE	LGP			Add WaterMarkHelper<> template and LedHandyHelper module for crap like that. Use it in ActiveLedIt! and
		(0840)			new NetLedIt! demo mode.

001003	CHANGE	LGP		reorganize the WordProcessorCommonCommandHelper/TextInteractorCommonCommandHelper<> code. Now
		(0839)			MFC wrapper support MUCH simpler, and all this stuff much easier to use from other platforms.
						OnPerformCommand/OnUpdateCommand simple virtual overrides, and _MSG simple single msg hooks for MFC.

000926	Fixed	LGP			Fixed StyledTextIOReader_HTML::ParseHTMLTagArgOut to support quotes around font (and other) names.
000926	REPORT	Hordur	> >> -----Original Message-----
		(0838)			> >> From: Hordur Thordarson [mailto:hordur@lausn.is]
						> >> Sent: Monday, September 25, 2000 7:08 AM
						> >> To: Lewis Pringle
						> >> Subject: Led Bug
						...
						> >> I just found a small bug in StyledTextIOReader_HTML::ParseHTMLTagArgOut
						> >> in Led 2.3.  When parsing a font face tag, and the name of the font
						> >> contains a space in it, only the part of the name up to the 
						> first space,
						> >> is returned.  Is there a quick way to fix this without 
						> breaking anything
						> >> else ?
						> >
						> >	Can you please send me a sample file? That would help. I may have
						> >already fixed in this Led 3.0.> -----Original Message-----
						> From: Hordur Thordarson [mailto:hordur@lausn.is]
						> Sent: Tuesday, September 26, 2000 7:16 AM
						> To: Lewis Pringle
						> Subject: RE: Led Bug
						...
						> Here is some example html that I used:
						> 
						> <html><body>
						> bla bla bla <font face="SilDoulos IPA93" size=5>some stuff</font>
						> </body></html>
						> 
						> The 'some stuff' text is shown as Helvetica I think.  I tried some other
						> fonts and got the same result as long as the font name had a space in it
						> (such as Andale Mono).
						
000920	CHANGE	LGP			Add new StyledTextIOReader::BadInputHandler class to replace StyledTextIOReader::HandleBadlyFormattedInput,
		(0837)			and make so it can be set for all StyledTextIOReaders. Use this a bit more in StyledTextIOReader_RTF - so we are more
						tollerant of badly formatted input RTF - and we ingore more errors (and therefore successfully read more files).
							Changed SinkStreamDestination CTOR args as a result of this to also keep track of whole reader object to let it
						handle errors.


------------------- Released 3.0b2 000909 - Below ------------------------------

000909	FIXED	LGP
000619	REPORT	LGP			Remove WrapperSetup from Mac Distribution
		(0798)			

000909	FIXED	LGP
000619	REPORT	LGP			Update Copy/Build scripts (by looking at b1 release) - and remove WrapperSetup stuff from appropriate projects XWin and Mac).
		(0803)			

000909	FIXED	LGP
000831	NOTE	LGP			Also - make sure name of install dir (pre-release part) same between LedIt! and LedLineIt!).
000619	REPORT	LGP		Fix LedLineIt! MFC Installer to not sure volume list
		(0797)			

000906	CHANGE	LGP		<OLDCODENOTE>
		(0836)					Changed order of calling Imager/Interactor in InteractorImagerMixinHelper<IMAGER>::HookLosingTextStore ()/GainingTextStore.
							Because of changes ChunkedArrayTextStore (SPR#0491), it is now much more picky about having markers removed before their
							owning TextStore. And if you had started a change to the text - and then deleted the text object (as LEC's QT and TA did),
							before the TextInteractor::AbortChange() got called - there would still be that one marker in the TextStore. This wasnt
							really a bug with the TextInteractor code - cuz it trapped HookLosingTextStore () to call that Abort () method. But - because
							of the order in this mixin - the TextImager got deleted before teh hooklosingTextStore call.
								I'm slightly nervous about such a subtle change breaking peoples code - but I think this order makes more sense, and
							I hope it will cause no problems.
						</OLDCODENOTE>

000906	Fixed	LGP			Added support for "Text", "TextHTML", and "TextRTF" param names can be now loaded.
						Fix was in 'ActiveLedItControl::DoPropExchange'. I'm likely to want to add more of these in the future.
							And added a demo of this to the web page.
000901	REPORT	DaClegg	>From: David Clegg [mailto:cleggda@networld.com]
		(0835)			>Sent: Friday, September 01, 2000 12:03 AM
						>To: info-led@sophists.com
						>Subject: ???
						>
						>
						>Trying out demo. Interested in activeledit. what parameters can i try out on demo with asp? 
						> would like to use param tags to assign default value as page loads. possible? thanks 

000905	FIXED	LGP			MAJOR X-Windows breakthrough. Decided to start with Gtk toolkit for X-Windows. Now have simple
						GTK hello world app working. And created Led_Gtk<> template to implement a Led-based GTK widget.
						Now displays text and accepts primitive typing. Mostly hooked into Gtk lib / message maps etc.
							Still alot todo - but we're now half-way there to a usable text editor on X-Windows - I think.
000905	REPORT	LGP				XWINDOWS WORK - GOT HELLO WORLD - BUT NEST STEP IS  KEY TYPING TO WORK - or maybe just jump to
		(0834)			'widget wrapper' template which can hook any messages.

000831	CHANGE	LGP		Got everything compiling again on Mac/XWindows.

000829	FIXED
000123	REPORT	LGP			Led ClassLibDoc Recipies.html has hooks of the form @'FOO' - it must use REAL URLS - that file doesn't get processed
		(0706)			by AUTODOC!

000829	Fixed				Added qIncludeLedNativeFileFormatSupportInStandardStyledTextInteractor config define to be able to
						eliminate this code.
000706	NOTE	LGP			Agreed. I had broken these modules (like RTF and HTML) into separate files for
						just this reason.
							I believe there is no problem with simply not linking in the HTML/MimeEnriched
						etc formats.
							There is - sadly - a slight dependency on LedNative format in
						StyledTextFlavorPackageInternalizer::InternalizeFlavor_Native.
							At one point - I think you suggested that it was questionable why I used
						templates etc all over the place. The best way I know to allow you to NOT includ
						modules like the LedNative stuff - but still have everything link together and
						work together - is using templates.
							I want to provide this StyledTextFlavorPackageInternalizer::InternalizeFlavor_Native functionality
						automatically. Yet I DONT want everyone to have to link it in.
							I may try to address this last complaint - about Led_Native format being linked in -
						by use of templates.
000705	REPORT	MVOlman	> -----Original Message-----
		(0810)			> From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						> Sent: Wednesday, July 05, 2000 9:17 PM
						> To: lewis@sophists.com
						> Subject: Some feedback
						...
						> feedback 5:
						> -----------
						> I don't use LedNativeFormat, maybe in the code it would be a good 
						> idea if we
						> could just stripout easily support for certain formats. In our 
						> first release
						> we don't use HTML, MimeEnriched and LedNative format. Just to reduce the
						> size of the ledtextengine.dll to the maximum. Size is important 
						> for internet
						> applications. We had a long internal discusion about this... but current
						> size of the Led engine was considered as acceptable. (about 320Kbytes
						> Windows VC++ 6.0 sp3) our previous viewonly (not editable) RTF TextEngine
						> was about 60Kbytes.

000829	FIXED				Now reads and writes A/HREF tags in HTML - converting them to StandardURLStyleMarker objects.
000829	WORKING				Fixed specific complaint. But also noticed that doing GETHTML (or saving HTML) of doc with AHREF= links ignores those
						links.
000727	REPORT	LGP			Run ActiveLedIt!. Enter "<a href=foo>test</a>" into the HTML test window and say SetSelHTML. You get a URL named foo, and the
		(0819)			"test" text comes AFTER the URL - instead of embedded in it.

000829	CHANGE				Fixed HTML reader code to recognize standard HTML colors (in <FONT color="Red">).
							Also, fixed HTML writer code to close off <b>/etc tags when they occur at the end of the document.

000828	Fixed				I couldn't exactly reproduce #1. Instead - I saw that the <b> etc tags WERE being closed - just in the wrong order
						with respect to the close of the <font> tags. That is now FIXED.
							As for #2, Led's HTML code writes red as "ff0000". Other than this - it looked like the led HTML generator was
						doing the right thing - but the HTML READER wasn't always getting the color read properly. It now should be working OK.
000727	REPORT	LGP		> -----Original Message-----
		(0820)			> From: Donald R. Gertz [mailto:dgertz@emagination.com]
						> Sent: Thursday, July 27, 2000 10:52 AM
						> 	1.  When using the .TextHTML method, same tags are not being closed.
						> Ex: <b> and <i>
						> 
						> 	2.  When using the .TextHTML method with a color applied to some or
						> all of the text, the color attribute is not being applied.  Ex:  When
						> selecting a portion of text and applied the color RED, the text in the
						> control displays it as red, but when you retrieve the text via 
						> .TextHTML it
						> does apply the <FONT COLOR="RED"></FONT> tags.  This behavior can be
						> duplicated on the demo portion of the website.

000828	Fixed	LGP`		It turns out most other places - we add embeddings to the fStyleRunDatabase as the markerowner. It doesn't
						matter too much which markerowner we use. But since the way the MFC code is structured - on a quit - we only do
						a delete-contents after we've destroyed our view - it makes more sense to make the embedding and add it to the
						StyleRunDatabase (esp since thats where it goes when its created byu reading a doc).
							So just made small cahnge to LedItView::OnInsertObject ()
000828	REPORT	LGP			Bug - add embedding to LedIt! via InsertObject menu command. Then quit. Get assert
		(0831)			error cuz nobody removes that marker (at least not on-time...).

000928	Fixed	LGP			Really fixed this a while back - but the last step was to incorporate this change into
						ActiveLedIt! - and change the IDL so that you can either have colreed hidden text, or just the
						default MSWord Algorithm - of a gray underline. Now all changing in ActiveLedIt! through IDL
						calls.
000928	REPORT	LGP			Changed display of hidden text (by default) to use same as with MSWord - gray underline.
   		(0830)			Must test/fix ActiveLedIt! and mac code. Handle ActiveLedIt! IDL specifying color.
   						(75% done - just better integrate new and old display code)

000828	FIXED	LGP			I HOPE without intrdocing any regressions (like double-tabs coming out when you hit a tab key with older web browsers?).
000828	REPORT	LGP			Typing a TAB char in ActiveLedIt! causes navigation in the web browser using MSIE 5.5, not getting the
		(0829)			tab character entered. I REPRODUCED though some potential customer called about it.
							Don't know - but I suspect its ONLY in MSIE 5.5.

000828	Fixed	LGP			I believe this is now fixed due to all the other hidden text rewrite changes. I can not reproduce any such bugs.
000613	NOTE	LGP			See SPR#0784 before trying this!
000427	REPORT	LGP			Remaining problems with SPR#0722. Saving hidden embeddings doesn't work right (TEST MORE CAREFULLY FOR WHAT CASES,
		(0746)			But the reader guy I wrote doesn't even pretend to). Similar problems for hidden text justification (when not shown).
						Not sure what else doesn't work. TEST TEST TEST! Finish implementation of RTFReaderSinkStreamHelper.

000828	Fixed	LGP			Now done as well as in MSFT (roughly). Default is gray underline, but you can still override and do differnet
						behavior for this (like colorizing - which is done now in ActiveLedIt!).
000613	NOTE	LGP			See SPR#0784 before trying this!
000331	REPORT	LGP			The HidableText marker code (maybe shared code) must handle the case of SimpleEmbeddings - so when
		(0725)			they are "shown hidden" - they look reasonable.

000819	Fixed	LGP			Fixed. That code was all eliminated as part of SPR#0784.
000613	NOTE	LGP			See SPR#0784 before trying this!
000508	NOTE	LGP			Put code into HidableTextMarkerOwner::ReifyMarker () to workaround this crash, so now just asserts out.
						But this should be understood and fixed.
000508	REPORT	LGP			Open doc RTF 1.5 Spec. Scroll down a page or two. Select a half page of text. Say HideSelection.
		(0757)			Then toggle "Show hidden text" OFF, and then back on. We get an assertion error (used to be crash,
						but I put in assert-workaround code there).

000819	Fixed	LGP			Fixed.
000613	NOTE	LGP			See SPR#0784 before trying this!
000331	REPORT	LGP			The HidableText code must deal with UNDO interactions. This is non-critical, since it
		(0723)			how uses the sledgehamer of a COMMIT to avoid bugs. But its unfortunate.

000819	Fixed	LGP			Fixed over the last couple weeks. Works well enough now to mark FIXED.
000613	REPORT	LGP			Rewrite much of HiddenText feature  (at least try) to use the trick of setting the MeasuredWidth to zero,
		(0784)			patching the computeNExtCursorPosition code, and patching the various internalize methods (at least internalize_TEXT())
						to deal with hidden text properly.
							Another Led customer (MPRIT?) did this - and he said it worked quite easily for him. I should have done that to begin
						with!
							This may make irrlevant SPR 0725,07233,0757,0746

000819	Fixed	LGP			Added new class TextInteractor::UndoableContextHelper. Use that as simpler
						wrapper on Pre/Post Undo handling code.
						<OLDCODENOTE>
							Also - changed args to Pre/PostInteractiveUndoHelper controled by define qBackwardCompatUndoHelpers -
							which defaults to qLed23Compat. Point of change was that ref-args that change values
							bad style (cannot tell  what they are changing from the call-point).
						</OLDCODENOTE>
000819	REPORT	LGP			Make stack-based ObjHelper to do the PReUndo/PostUndo etc crap -
		(0828)			 so there is less cut and paste of that stuff.

000817	FIXED	LGP			But see SPR#0826,0827 in related work.
000816	WORKING	LGP			All working, but note addition of change #0826, and assure this is done in all sensible
						place and test a bit more.
000816	WORKING	LGP			Mostly done. Moved actions into WordProcessor and its helper template.
						Wrapped with presetupforUNOD/PostSetupForUndo calls. Added new
						(nice - document better) base class form CMD-NUMBERS. Still must clean all this up,
						and do similar new support for setting Cmd-NAMES.
							But as of now - we DO get "Undo HIDE" etc in undo menu, and undoing seems to work.
000816	REPORT	LGP			UNDO should be handled better (in UI for saying hide/show)
		(0825)

000816	CHANGE	LGP		<OLDCODENOTE>
		(0826)				Added new WordProcessorCommonCommandHelper_DefaultCmdInfo class to make it easier
						to add new commands to various pre-built command handlers. Used only for WordProcessor
						class now - but maybe soon use same technique for other command handler templates?
						</OLDCODENOTE>

000816	CHANGE	LGP		Related to SPR#0825.
		(0827)			<OLDCODENOTE>
							Made obsolete direct command-name setting like 'StandardStyledTextInteractor::SetFontChangeCommandName'.
							Instead - each class has a bundle of command names, and you can set each bundle together.
							This reduces the API polution, adding new pointless methods each time I add a new command name.
								There is backward compat code for this, which defaults to true iff qLed23Compat is on.
						</OLDCODENOTE>

000813	REPORT	LGP		<OLDCODENOTE>
			(0824)			change DECLARE_USE_BLOCK_ALLOCATION TO LED_DECLARE_USE_BLOCK_ALLOCATION - to avoid
							possible name conflicts.
						</OLDCODENOTE>

000812	FIXED	LGP
000812	WORKING	LGP			Mostly fixed. The trouble is that MarkerMortuary<>::AccumulateForDeletion()
						doesnt prevent the marker from being 'collected' again in future calls - until
						they've been finalized.
							So I added a 'PreRemoveMarker' method to TextStore - and ChunkedArrayTextStore
						and called it from MarkerMortuary::Accum... This fixes the problem.
							Still must add this override to SimpleTextStore.
000812	REPORT	LGP			Open SPR0822 - select all - and hide selection and then show selection (with
		(0822)			show hidden ON). Note assert - apparantly cuz DidUpdate () causes width/height cached
						prematurely - when looking at HIDDEN marker - not unhidden one.

000811	Fixed	LGP
000811	REPORT	LGP			Open the file SPR0821.rtf. Then Insert a NL at the first
		(0821)			position of the buffer - just before the picture. We get an
						assertion error in StandardDIBStyleMarker::MeasureSegmentWidth ().
							The trouble is that because this row is at the top of the buffer
						we are forced to call MultiRowTextImager::ReValidateSubRowInTopLineInWindow ()
						which calls a premature FillCache () - before OUR DidUpdate () call whcih sets
						us back to a width of one character.
							The fix was FIRST - to comment out that assertion (and like ones for other
						embedding markers).
							Then - I noted that the premature FillCache () had caused the rowHeight
						to be cached wrong. This I fixed by having MultiRowTextImager::ReValidateSubRowInTopLineInWindow ()
						preserve the 'invalid-row-cache' flag - even though it temporarily wraps
						the given line. This COULD be a SLIGHT performace loss. But better than having
						it do the wrong thing.

000727	Fixed	LGP			As a side-effect of SPR#0491, I put in better assertions. That helped me track this down.
						Bug was that when we remove a marker, and decide all its underlings were hackmarkers, and delete them
						thats good. But that fact COULD have created a situation where our PARENT was THEN a useless hack marker.
						Must walk UP the tree after removing any marker to see if parent is useless hackmarker.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970605	NOTE	LGP		Bug still present. I tried commenting the code back out in the CATS::DTOR.
						But then we get assert. Track down some other time. Not that important.
960430	DEFER			Reviewed
950527	DEFER
950527	REPORT	LGP		Cleanup Hackmarkers better. We still appear to need to check for
		(0300)			hackmarkers left over at ChunkedArrayTextStore::DTOR().
						Comment out workaround at start, and open nafta.txt sample
						file. Immediately close, and get assert error in DTOR.

000726	Fixed	LGP			<OLDCODENOTE>
								Lose CompareSameMarkerOwner () class, and related templates eg. MarkersOfATypeMarkerSinkWithCompare2Vector<T,COMPARE>.
								Instead - new 'MarkerOwner' arg to TextStore::CollectAllMarkersInRange_OrSurroundings etc functions. Can either pass
								kAnyMarkerOwner to get the old behavior, or the specific marker owner you used to specify with CompareSameMarkerOwner.
							</OLDCODENOTE>
							Performance numbers:
																SDKDOC OPEN		SDKDOC SEL-ALL-CUT-3XPASTE	RTF15DOC OPEN		RTF15DOC SEL-ALL-CUT-3XPASTE
								WORD 2000						1				2							5					11
								2.3(non-UNICODE)															2					19
								3.0b1							1				8							6					35
								After (nocache)					1				8							5					21
								After (1 cache)																4					19
								After (2 cache)					1				7							4					18
								After (5 cache)																4
								After (2 cache+CountRowsLimited)1				4							4					10
000723	WORKING	LGP			Started to try this out. See how easy/how much of a speed boost...
000723	NOTE	MarkOlm		Complained of speed of copy/pasting in large Led docs. I told him this was probably the fix.
000531	NOTE	LGP			Maybe important to fix SPR#0762.
990321	DEFER	LGP		Defer, and probably do AFTER Led 2.3.
970930	REPORT	LGP		Speed Tweek.
		(0491)			Keep separate list of markers per-MarkerOwner in ChunkedArrayTextStore.
							Add separate "collect" APIs that allow specificion of MarkerOwner,
						so collects can go much faster (not interfered with by lots of markers
						with differnt owners).
							Probably require all markers to have an owner. Make the collect API
						use NULL as a special token in Lookup meaning grab from ALL (like *).
							Should have the net effect of making RTF reading significantly faster.
						See spr#0490 and spr#0446 for tests of efficacy of this optimization.

000726	Fixed	LGP			See SPR#0491.
000723	LGP		NOTE		I saved this file to work on the speed later. With the b1 build - on my PC - it opened
						in about a second, and copied in about a second, but paste took around 8 seconds (and more
						for successive appends/pastes).
000723	REPORT	MVOlman		Led Speed Bug.
		(0814)			> I included my RTF document, I did similar tests. I used the LedIt 3.0b1
						> (about 908Kbytes) (build by you) on MacOS System 9.04 PowerPC 400mhz G3,
						> 300MBytes of Ram.
						> I takes about 6 seconds to open the document. It takes about 11 seconds to
						> copy it to clipboard. Paste itself took about 36 seconds.
						> 
						> When I use my own compiled version it is about 3 seconds to open. It takes
						> about 1 second to copy, it takes about 4 seconds to paste. (this 
						> version is
						> ledIt 3.0d5, but I don't think that is the big difference because I just
						> haven't a stable version working of the latest 3.0b1 version)
						> 
						> When I compare this latest times with Waste, it is just that Waste is
						> faster, everything is less then a second.
						> ( I can send you the waste source file in Stuffit 5.12 compressed format).
						> 
						> Also our own RTF engine reads the document in about 1 second.
						> 
						> For us this is not an urgent problem it was just to mention that there is
						> still some improvement possible.
000725	CHANGE	LGP		<OLDCODENOTE>
		(0816)				Renamed "Led" class to "SimpleLed" to avoid conflicts with new Led namespace. Adjusted
						MFC/AppWizard tutorial to use the new name. Now it compiles and works properly again.
						</OLDCODENOTE>

000723	Fixed
000712	REPORT	LGP		Line 165 of CodePage.cpp broken (LED b1)
		(0813)			Assert there is not QUITE right. Depends on GetACP () value (when on jap system -
						get diff answers for lookups that fail). I THINK the check is just for if the char == [?]
						then DONT assert - BAD CHAR vals can be different - maybe NEVER have this working assert?

000709	FIXED	LGP			Fixed bug (args to wsprintf for CreateMutex) in WrapperSetup.exe. Then also found
						the install SOMETIMES failed if you were not logged in as ADMIN - so added a warning to that
						effect (Win40 only - cuz that was the only place I saw the problem).
000705	REPORT	LGP			New installer fails (exception error) on NT40.
		(0812)

000708	FIXED	LGP			Just needs a bit of testing. But at least seemed to work copying pict-OLE object (pcpaint) from
						wordpad to ActiveLedIt! and back.
000708	WORKING	LGP			Mostly working. Just must add extra arg/facility to unknown-embeddedobj class to take replacement
						DIB.
000708	NOTE	LGP			Losely based on SPR#0700. More on mail from Ken Alpern dated July 7, 2000. Fix this -
						at least well enough so that ActiveLedIt! gets the images dragged to it from apps like WordPad when
						the have a pcpaintbrush object embedded.
990415	DEFER
971020	REPORT	LGP		See spr#0496,#497. Support reading/writing the \result tag / info for embeddings,
		(0498)			etc. This could allow MSWord to display private Led embeddings.

000708	Fixed	LGP			Read and write done. Untested on mac, but read/write of DIB should work on both.
						And read WMF,EMF should work on Win32. Still some wierdness with MSWord 2000 - but I think
						its a bug with Word2K (see new SPR#0811);
000708	WORKING	LGP			Did (decent support on Win32) for reading \pict. Still must do writing.
							See new SPR test files in \\PYTHAGORAS\Led\Sample&TestDocsEtc\SPRS\0700
000707	NOTE	LGP			Potential ActiveLedIt! customer complained about not being able to copy in/out PICTs using RTF. Fix that!
						(though you can save them using the \ledprivateemebdding tag - this isn't good enough for many people).
991220	REPORT	LGP			Support reading (and writing) \pict tags - as in the file \\PYTHAGORAS\Led\Sample&TestDocsEtc\SPRS\0619.
		(0700)			(note - that pict is in the header / footer - move it to body if I don't support headers/footers when fixing this)

000705	REPORT	LGP			Fixed
000704	REPORT	SSW			I was tracking down SPR 6173, which reported a bad tab order in TMA Editor,
		(0808)			when to my surprise it turned out to be a Led bug. In Led_Win32.h at line
						1775 or so, you post messages with WM_NEXTDLGCTL with reversed arguments for
						the case of forwards and backwards tabs. The if,else clause should read
							PostMessage (parent, WM_NEXTDLGCTL, shiftPressed, false);
							It is difficult to work around this in the apps, since I don't know which
						ones are affected  (TMAEditor and BrotherTMA editor for sure, but could be
						others). Should I check in the fix in Led, or will you make a new release,
						or should I hack up UI_Led???

000623	Fixed	LGP			Fixed
000623	REPORT	LGP			Drag of an entire file (of UNICODE) and drop into LedIt! or LedLineIt! doesn't do the right thing. Text
		(0805)			always treated as plain CP_ACP text. Worse - even if the file is an RTF file - it just inserts the original RTF-
						and doesn't interpret it (LedIt!.

000623	CHANGE	LGP			Handle reading in wide_char UNICODE in StyledTextIO_PlainText.cpp
		(0807)

000623	REPORT	LGP			Fix Led to better handle reading input files with NUL-characters in them (fixed Led RTF/HTML reading code).
		(0806)


------------------- Released 3.0b1 000617 - Below ------------------------------

000617	Fixed	LGP			I haven't heard back. Assume this algorithm is good enough. I can open a new SPR if it is not.
000617	NOTE	LGP			Related SPR#0649 still opened - to cover handling the 'CORRECT' UNICODE algorithm - which mine is only a rough
						approximation of.
000616	WORKING	LGP			Found simply kludge which maybe adequate. Treat unknown characters as WORDCHARS - not special - and the algorithm
						I already have seems pretty good. Also - after much reviewing the 3.0 Unicode Spec book - and surfing the web for code - it
						looks as if doing any better will be challenging (many many more days). I hope this is good enough.
000615	WORKING	LGP			Made TextStore own a smart pointer to a TextBreak object - and by default create one with the old algorithms.
						Next step will be to create one with the NEW algorithms, and at least optionally hook that in.
000615	WORKING	LGP		<OLDCODENOTE>
							Created new file - TextBreaks.h/cpp. That new file must be included in all Led projects.
						And any code that directly called TextStore::FindLineBreaks () directly will need to change
						somewhat as well.
						</OLDCODENOTE>
000610	NOTE	LGP			Should break out the basic word-wrap/linebreak calc code into a separate module, where users can subclass/
						refine the behavior. Then call that from TextStore () - as we do now... Or maybe create a word-break/linebreak object
						and make that a parameter of the TextStore?
000608	REPORT	LEC			LEC SPR#5899. Must handle word-wrap and double click behavior right for UNICODE characters - at LEAST
		(0778)			for ones where LEC supports a translation engine for thier language (but maybe as easy to fix ALL cases?).

000612	Fixed	LGP			Fixed - DUP of 0760
990415	DEFER
990415	DEFER
970817	NOTE	LGP			I'll have to consider this some more, and
						I've added it to my spr list. I'll probably add this
						for my next major release.
	       					But the first approach I would take would be to munge
	       				the values passed to SetRowHeight in
	       				WordWrappedTextImager::FillCache. I'm not sure that would
	       				work out exactly right. But I think all you mean by this
	       				is to have extra row-height? No?
970811	REPORT	JoeW	At 5:35 PM 8/11/97, Joe Willcoxson wrote:
		(0476)			>Lewis,
						>
						>Spacing - single, double, triple, 1.5, Letterman's teeth.
						>
						>Currently there is no provision in Led for any spacing besides single.  I'm
						>not suggesting you put it in, but... if I wanted to put it in--where?
						>
						>My single thought:  Currently, the partition marker is queried for the
						>interline space.  If, a derived PM was queried with a char index, it could
						>figure out the line height of the desired line and make a decision based on
						>that and perhaps the mode the view/document/paragraph was in and adjust
						>spacing appropriately.  Any thoughts?

000617	CLOSE			No longer important - as we now handle I18N through UNICODE.
960430	DEFER			Reviewed
950305	DEFER
950305	REPORT	LGP		See LEDSPR#156. Led_IsValidSingleByte () always returns true.
		(159)			Should be more picky - I think...

000617	DEFER	LGP			Fixed as SPR#0792
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970715	REPORT	LGP		The Caret height should only depend on the current text, not the whole
						row height.
							Before fixing this, test some other applications. My notes say that
						this is only a problem on Windows, not the Mac. But test that too.

000617	Fixed	LGP			Now seems to work well (sharing most of the same idiosyncracies with how MSWord 2000 decides to size the caret).
000617	WORKING	LGP			Also had to fix bugs relating to SPR#0760 in WordProcessor::MeasureSegmentBaseLine () to get this working decentlly.
000617	WORKING	LGP			Had to add TextImager::GetRowRelativeBaselineOfRowContainingPosition () (and subclass overrides for MRTI and SimpleTextImager).
000616	REPORT	LGP			The selection-rect in Led is right - but the size of the caret should mimic what MSWord 2000 does. 
		(0792)				Don't have the caret rect height take into account the stuff below the baseline (except for the decent of
						the current font - MAYBE). But not the SPACE-AFTER. Probably dont use CaretRect - but use font metrics
						of current selection directly... That will ALSO make it work better - I think - in the case where you are editing
						near a large picture inserted inline.

000617	CLOSE	LGP			Never heard back. Assume its OK.
000608	CLARIFY	LGP			Sent mail to simone asking her to clarify. I THINK the problem is with what font was chosen (not truetype)
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970619	REPORT	Simone	At 9:54 PM 6/19/97, simone wrote:
		(0448)			>2) Text which looks aligned on the screen prints unaligned.
						(LedLineIt)
000617	Fixed	LGP			I've noticed this for a couple years. But I've not had the patience to track it down til now. I never really
						understood exactly what the BUG was. I just looked at a case that worked - and one that didn't. Turned out all the
						styles you could see in SPY were identicial. But there are some extra 'style' flags kept in the CControlBar's m_dwStyle.
							These were set slightly differnetly (cuz of default args in the CREATE() overload). Added in CBRS_TOP
						style to the formatbar create - and the crufy disapeared!
000617	REPORT	LGP			LedItMFC applet gets cruft displayed around the edges of its formatbar - but not any of the other bars.
		(0794)

000617	CHANGE	LGP			Lose qUseSystemWordBreakRoutine define - and replace it with new TextBreaks_System class.
		(0793)

000616	FIXED	LGP			Change WordProcessor::GetJustification (size_t from, size_t to, Led_Justification* justification)
						family of functions to share common code - CheckForCommonParaValue<> TEMPLATE - rather than duplicating a WRONG algorithm.
						Then fixed that algorithm in that routine - to properly compare all the values.
000616	REPORT	LGP			WordProcessor::GetStandardTabStopList (size_t from, size_t to, StandardTabStopList* tabStops) const
		(0790)			and all the related functions (for margins, space before etc) are broken. They too easily will report no
						common answer - if there isnt a single record (cuz elts differ on some other attribute.
							To reproduce - make one line single space, next one double space, and next one single space. Then
						try checking if two lines share a common tabstop list or spacebefore value. It returns NO. It should
						return yes still. I think this has been broken since the original implementation. But its now more obvious
						as there are more attributes.

000616	Fixed	LGP			Fixed. Doesn't look great - but its usable (on ctiveLedIt! and LedItPP/LedItMFC).
000613	WORKING	LGP			Actually - not my bug. Turns out - MSWord has a queer defintion of when to copy paragraph
						properties when you do a copy. Some only come if you select the terminating NL of the paragraph.
						Still must do ActiveLedIt! and LedItPP!
000613	WORKING	LGP			Did for LedItMFC. Found some bugs with line spacing stuff (RTF reading from MSWord?). Debug
						those before I clone this stuff into ActiveLedIt/LedItPP.
000613	REPORT	LGP			DO UI FOR AT LEAST LedIt! Win and ActiveLedIt! - and maybe also for mac - for setting at least SOME)
		(0785)			interline space attributes - even if only picking from predefined list of possabilities from menu (like we
						do for font size - with other dialog?

000616	Fixed	LGP			Rewrote installer support - now using Visual Studio Installer (VSI). And still using
						exebuilder to package all into a single EXE (cuz right now - VSI doesnt support that - but
						I reported the complaint to MSFT - and hopefully they'll fix it for the next release).
							This also fixes SPRS# 0787, 0788, 0789.
							This was a MAJPR PITA - getting the .exe wrapper stuff to work. I had to use VSI to make the MSI file.
						Then use WinZip self-extractor to wrap the various parts into a single EXE. Then I had to get some sample
						code from MS (WrapperSetup) - and warm it over into a replacement setup.exe. VERY time consuming!
							But it now seems to work well. I'll distribute both the MSI file plain and the self-extracting EXE.
							I've never tested on a virgin machien (without MSI support yet)- thats my only worry.
000609	REPORT	LGP			Current LedIt!/LedLineIt! installers SUCK. Dont set program groups right - etc. MUST get new one
		(0779)			before I can do BETA! Use new MSFT stuff - URL on desktop.!

000616	FIXED	LGP			SEE SPR#0779
961213	DEFER	LGP		Defer, and probably do in Led 2.2.
961213	REPORT	LGP		Another installer bug. Leftover files from previous installers (like
		(0787)			OrbixWeb) seem to appear in the LedIt! installation. I think what is
						happening is that the installer they generate just looks for
						.bmp files for various sceens/stages, and uses defaults if none.
						Since i said to skip those, or provided none, instead of using default
						it uses the one lying around in that directory. Probably best fix
						is just to provide those specified screens.

000616	FIXED	LGP			SEE SPR#0779
961213	DEFER	LGP		Defer, and probably do in Led 2.2.
961213	REPORT	LGP		Sometimes installation under NT doesn't update the start menu to
		(0788)			contain a LedIt! menu item.

000616	FIXED	LGP			SEE SPR#0779
961213	DEFER	LGP		Defer, and probably do in Led 2.2.
961213	REPORT	Simone	Index file doesn't seem to get right icon associated with it
		(0789)			after installation in the start menu. Opening it still works, however.

000613	CHANGE	LGP		<OLDCODENOTE>
		(0781)				Lose Led_CvtFromTWIPSV () global functions - and replace them with methods of new Led_Tablet_ class.
						</OLDCODENOTE>
							Was necessitates by 0767 and making sure 0760 used right format - saving in TWIPS - not pixels - and computing pixel height
						at right time.
							Not TOTALLY done right - see SPR#0786.

000613	Fixed	LGP			Fixed.
000613	WORKING	LGP			Finsihed tabstops. Nest do StandardUnknownTypeStyleMarker::GetShownSize ().
000612	WORKING	LGP			Finsihed earlier the new SB/SA/SL stuff. Just now finished Margins (fi/li/ri) and doc margins/papersize (\margX),
						and first-indent (\fi). All that I know left todo is \tx - tabstops.
000612	WORKING	LGP		<OLDCODENOTE>
							Convert internal format of SpaceBefore/After/WP-interline spacing, and tabstops to be in Led_TWIPS - rather than
						in pixels.
						</OLDCODENOTE>
000603	REPORT	MarcVan		He presented me a problem - to which I THINK the solution is best implemented as changing Led to keep track of sizes in
		(0767)			something like twips - and converting more late in the game. Not everything - but somethings - like tabstops etc. They can be cached
						in pixels - but must be set by stuff like RTF - and the UI - in TWIPS. That way - they can be imaged at different resolutiosn without
						causing problems, and saved back to a file without roundoff errors.
							I REALLY should change this for Led 3.0! Even though its alot of work. Its really a significant defect. And closely related - I really
						should add ZOOMING support (SPR#0783). Its a good test of whether I've solved the above - and its usful functionality many may
						appreciate.

000612	Fixed	LGP			This is all working - saving stuff internally in the same format (basicly) it comes out of the RTF file - so
						we should be able to preserve values. All thats missing is UI display / setting (SPR#0782).
000612	WORKING	LGP			See SPR#0767 - converted this code all to using TWIPS, and Led_LineSpacing struct, etc.
000531	WORKING	LGP			Added SPR#0762 for performance problem. Still must add new UI for setting attributes, and assure
						current data structures work sensibly for when we change font size (RTF saves fully displayed height - not must flag saying
						double width - not sure thats good?).
000531	WORKING	LGP			Added SPR#0761 for remaining bug. Now working pretty well except for that, Speed (2x slower),
						and UI for setting attributes.
000530	WORKING	LGP			Added \sb\sa\sl\slmult RTF writing support. Still todo - UI for setting attributes.
000530	WORKING	LGP			Added preliminary support for word-processor line spacing. RTF reader support, and internal
						display support done. Still todo - RTF Writer support, and GUI for setting common spacing values.
000523	REPORT	MarcVan	> -----Original Message-----
		(0760)			> From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						> Sent: Tuesday, May 23, 2000 7:17 PM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Feedback: linespacing
						> 
						...
						> just some feedback, I just seem to find it logical that the standard
						> paragraph data would have a linespacing option. Also with RTF files
						> currently this information is ignored. I looked very quickly and it seems
						> that this is possible, because multirowmarker seems to be ready for it. I
						> gonna try to add it myself.

000612	CHANGE	LGP		<OLDCODENOTE>
		(0780)				Now universally- for Mac/Win/X-Win - Led_Tablet is a typdef of class Led_Tablet_ - and added a Led_Tablet_ class for MacOS.
							(so only code likely to break with this change is MAC code).
							Some GDI_XXX routines (for mac) gone - instead use methods of Led_Tablet_.
						</OLDCODENOTE>
							Change was triggered by needs resulting from 0767 - related 0781.

000608	Fixed	LGP			Fixed.
000608	REPORT	LEC		MS_MOUSEWHEEL handling backwards. Scrolls in wrong direction (compared to MSWord/WordPad etc). LEC SPR#5898.
		(0777)			

000608	Fixed	LGP			Fixed.
000608	REPORT	LGP		Must allow in LedLineIt! for longer line# - more chars - cuz of LEC dict files - add at LEAST two digits!!!
		(0775)			

000608	Fixed	LGP			Fixed. MFC deficiency. Its ParseCmdLineInfo/ProcessShellCommand() APIs
						don't support multiple file args. So work around them.
961213	DEFER	LGP		Defer, and probably do in Led 2.2.
961213	REPORT	Simone	If you select mutliple files in the explorer and drop them on
		(0775)			a shortcut to LedIt!, then only one of the files is opened.
						It should open mutliple instances of LedIt! - each with a differnet
						file.

000608	Fixed	LGP			Fixed. Added option to treat tab this way (defaults on).
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	Simone	Indenting of selected text should be just Tab or Shift-Tab no need
		(0774)			for Ctrl.

000608	CLOSE	LGP			Did something a bit simpler - but I think sufficient. See SPR#0773.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970304	Comment	LGP		Add 'File' icon to status bar, and allow drag and drop to/from THAT
						to change the current file being visited.
970226	Report	SLP		At 4:54 PM 2/26/97, Simone Pringle wrote:
						>1. When I drag a file from file manager to LedLineIt!, I think it  
						>should open that file (not just insert the text in).  We've had this  
						>discussion before but now it's REALLY aggravating...

000608	Fixed	LGP			Fixed in LedLineItMFC, LedItMFC - when you drop a file (not inside the LedVIEW- but anywhere else) then it opens that
						file.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	LGP		Drag&Drop into LedLineIt! desktop or anywhere outside of an
		(0773)			existing window should open file in a new window. 

000608	Fixed	LGP			Fixed in LedLineItMFC, LedItMFC, and ActiveLedItMFC, LedItPP, and LedLineItPP
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	Simone	When you do a find with all settings on except for whole word, then
		(0772)			if the caret is just before a match for what you're looking for, then
						instead of selecting that word, it beeps.  (eg. extern)

000608	Fixed	LGP			Fixed in LedLineItMFC - Close and CloseAll menu items
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	Simone	You should have a Windows/Close All menu
		(0771)

000608	NotABug	LGP			I did - its fine.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	Simone	Check minimize window behavior against standard.

000608	Fixed	LGP			Fixed in LedLineItMFC
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	Simone	MDI: Should support vertical and horizontal tiling (right now only
		(0770)			one menu item for "Tile" which does horizontal). 


000608	Fixed	LGP			Fixed in LedLineItMFC
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	Simone	You need a File/Close menu item.
		(0769)

000603	Fixed	LGP			Fixed regression in ComputeTabStop() code I had introduced only a release or two back. Re-instituted
						assertion/heavy-debugging check code to assure always predouces same old answer - for another couple of releases.
						Obviously wasn't long enough before.
000603	WORKING	LGP			Reproduced in LedItMFC - try setting some simple tab stops and typing tabs and they come out at wrong spot, and assert out!!
000602	REPORT	M.Pritt	> -----Original Message-----
		(0768)			> From: M.Pritt@epixtech.com [mailto:M.Pritt@epixtech.com]
						> Sent: Friday, June 02, 2000 7:15 PM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Problem with Led 3.0d6 
						> 
						> 
						> 
						> Lewis,
						> 
						> Hi, I have taken your 3.0d6 version (I was previously used version 3.0d3)
						> and just did the basic migration (ie. not changing any previously used
						> functionality)
						> and tried to run the code.  However it fails.  I did some tests and found
						> out when I commented out my setting up the tab settings I desired, it
						> worked.  I don't know
						> why the difference.  Therefore I'm sending you a zipped up the test code
						> that I have for my project using microsoft's VC++ compiler.
						> 
						> The problem was in a Led_Assert in TextImager.h at line 1232
						>      // Now we've scanned to a good spot to start looking...
						>      Led_Assert (guessIdx == 0 or guessVal <= afterPos);
						>      for ( ; ; ++guessIdx) {
						> --------->>>>>>     Led_Assert (guessIdx == 0 or ComputeIthTab 
						> (guessIdx-1)
						> < ComputeIthTab (guessIdx));  // assure monotonicly increasing so 
						> this will
						> complete!
						>           Led_Distance   d    =    ComputeIthTab (guessIdx);
						>           if (d > afterPos) {
						>                return d;
						>           }
						>      }
						> 

000531	Fixed	LGP
000531	REPORT	LGP			Some RTF controlwords contain upper case characters - and Led doesn't handle that well.
		(0764)			The RTF 1.5 Spec clearly says these controlwords must be lower case. However - their sample
						reader code merely checks for isalpha(). And - I've found MSWord2000 seems to sometimes
						generate undocumented control words that have mixed case. Sigh. Guess they hadn't read
						the spec :-)
							Try opening teh file SPR 0764.rtf to see the problem.

000531	Fixed	LGP			Turns out - same problem with centered text. Now both ignore trailing whitespace in the computation
						of how much to shift the text.
000531	WORKING	LGP			Reproduced. I think the complaint is simply that the amount of space the text is shifted right
						takes into account the width of all the text in the row INCLUDING the trailing whitespace. I will
						just strip the trailing whitespace from the computation.
000529	REPORT	MarcVan	> -----Original Message-----
		(0763)			> From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						> Sent: Monday, May 29, 2000 8:34 AM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Bug right justification
						...
						> I found a visual bug:
						> 
						> * when you do a right justifucation of paragraph that is longer then one
						> line you will notice that on the first line the space is put at the end of
						> the line and is also visual on screen. So this means that the first line
						> text isn't aligned to the right of the margin. the second line (in case it
						> is the last and in case last char no space, is aligned to the margin.)

000530	Fixed	LGP			Change WritePlainTCharCharacterHelper to WritePlainUnicodeCharCharacterHelper - even for non-UNICODE version
						of Led.
000517	REPORT	MarcVan	> -----Original Message-----
		(0759)			> From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						> Sent: Wednesday, May 17, 2000 8:35 AM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Re: Bug with ASCII above 128
						> 
						> 
						> Hi Lewis,
						> 
						> I just looked at 3.0d6, and the ASCII bug I reported is partly 
						> solved. When
						> you create a document on Windows, you save the RTF file all ASCII 
						> characters
						> above 128 are now also nicely translated when you open that document on
						> MacOS computer: for example I created a document with the text "é 
						> français,
						> ümber".
						> 
						> But when I create that same document on a MacOS computer with 
						> same text, and
						> I try to open that document on a Windows machine all these 
						> characters above
						> ASCII 128 are wrong.
						> 
						> For the test I used LedIt version 3.0d6 on both platforms,

000510	CHANGE	LGP			It was reported that display of (hilighting) of Chinese characters was messed up under Win98.
		(0758)				Fix Win32_GetTextExtentExPoint_Win95n98WorkAround () for display of Chinese under Win98 - the
						CodePageBetterOffUsingWideCharVersion () hack didn't work cuz GetTextCharset() for 'MingLiu' font
						returned zero. So instead - decide to use WideChar version iff there are any WIDE-CHARS!

000508	CHANGE	LGP			Workaround SPR#0757.


------------------- Released 3.0d6 000501 - Below ------------------------------

000501	CHANGE	LGP			fix StandardStyledTextImager::GetContinuous_ to handle TextColor () - 
		(0755)				and fix OnUpdateUICOmmandFOrColor() to call WordProcessorCommon.,..<>::AssureCurSelFontCacheValid

000501	Fixed	LGP		Cleaned up and fixed - a bit. And added WRITING font-color support.
990827	DEFER	LGP
990827	WORKING	LGP		Made SOME progress on this. Did really cheezy font color parser. And NO writing ability.
						Just enuf to make this example work. Not NEARLY adequate. But should do no harm, even
						though no error checking. So leave in half-assed support.
990826	REPORT	Hordur	>From: Hörður Þórðarson [mailto:hordur@lausn.is]
		(0622)			>Sent: Thursday, August 26, 1999 1:23 PM
						...
						>The following html:
						>
						><html>
						><body>
						><font color="#FF0000">red</font>, <font color="#0000FF">blue</font> and 
						><font color="#00FF00">green</font> text
						></body>
						></html>
						>
						>does not display any colors at all.  All the resulting text is black.  
						>This happens both in my Director Xtra and in the LedItPP application 
						>(pre-built version with 2.3c1).

000501	CHANGE	LGP			Note - I tested the RTF reading performance. On my new 700mz dual pentium machine - I got apx 2-3 seconds
						opening RTF 1.5 doc file on LedIt! 2.3 Release, and LedIt! 3.0d6x release. Its slightly slower when you build
						for internal-UNICODE (probably due to extra RAM copying?). This maybe a slight slowdown compared to eariler
						releases (cuz I thought I had sped that up). But the times are so fast - I need a better test to distinguish.

000429	Fixed	LGP			Fixed. Still slow - but should be OK. And added assertion/verify code to assure builtin tables produce same
						answer as Win32 API-based ones.
000429	REPORT	LGP			CODEPAGE -autogenereted from static tables code is all wrong on MapTOUNICODE - must SEARCH (SLOW)...
		(0754)

000429	Fixed	LGP			Needs some testing, and I'm sure there are loose ends and bugs, but this is basicly fixed.
						RTF UNICODE support is done.
000429	WORKING	LGP			Basicly fixed for UNICODE - but in the process - I broke the NON-UNICODE case. Must clean that code up,
						and fix so it works again on Mac - before I can release.
000427	WORKING	LGP			SPR#0748 - added separate CodePage module support.
000427	WORKING	LGP			I informed him this is probably a bug specific to the UNICODE control. I COULD build him
						a non-UNICODE version. But I really wanted to fix this soon anyhow. I'll try looking in more details
						today - and maybe do the full UNICODE / RTF fixup today.
000424	REPORT	BobAnd	> -----Original Message-----
		(0747)			> From: Anderson, Bob [mailto:BAnderson@randomhouse.com]
						> Sent: Monday, April 24, 2000 3:13 PM
						> To: 'lewis@sophists.com'
						> Cc: Walter, Alex
						> Subject: Character Sets
						> 
						> 
						> Hi Lewis,
						> 
						> We're having a few problems when we cut and paste into the 
						> control.  First,
						> open the attached file AmericanEnglishTest.doc (MS Word) and 
						> paste the line
						> into the control.  When we do it, the apostrophe (') either fails to paste
						> or pastes as an unrecognized character.
						> 
						> More pressing is the problem of foreign character support.  We have many
						> assets in Spanish and German.  The sample file "GermanTest.doc" (also MS
						> Word) is attached.  When we cut and paste it into the control, all the
						> accented characters drop out.
						
000429	FIXED	LGP
000428	REPORT	LGP			Support \uc \u keywords in RTF as part of UNICODE RTF support. This is the last major (and pretty easy)
		(0750)			thing needed before the INTERNAL_UNICODE version of Led's RTF reader is in good shape (I must add to reader and writer).
						Once this works - I should be able to copy and paste Japanese text between LedIt! and MSWord on Win2k (as well
						as Eurppean etc).
							Roughly related to SPR#0751, which is much less important.

000428	Fixed	LGP
000428	REPORT	LGP			Open the file JAPTEST.rtf. Note that (now since fixed) we get the right characters read (in development UNICODE version)
		(0749)			But we get a bogus font. Trouble was we get funky {} group at end of font name.

000427	CHANGE	LGP			<OLDCODENOTE>
		(0748)				Added new CodePage.cpp module. Will probably be initially used on in StyledTextIO_RTF - so only required to add to
						your project if you use StyledTextIO_RTF. Will PROBABLY end up getting used more, before long, so you may want to add it anyhow.
							</OLDCODENOTE>

000427	Fixed	LGP
000424	NOTE	LGP			Still exists. Reproduced under LedIt!. Seems like one simple approach maybe to avoid marking the
						internalized text as 'hidable' until we are ALL DONE. Or maybe just tila fter the flush? Maybe an even
						easier approach? But this doesn't look too hard.
000404	REPORT	LGP			Another (maybe serious) bug with HiddenText support - related to other save/restore one.
		(0731)			When we paste in NEW hidden text in ActiveLedIt! - at the end of the buffer - as part of a paste of mixed hidden and non-hidden text (wiht nonhiden at the end)
						and with the editor in the mode of HIDING text - then we get assert error - cuz intenralize code doesn't expect stuff its now
						inserting to disapear (so quickly).

000425	Fixed	LGP			This is substantially fixed. I have opened a new SPR to cover some remaining problems (SPR#0746).
000425	WORKING	LGP			As part of below - I've found one more bug. HidableTextMarkerOwner::ReifyMarker () is buggy if we have two
						consecutive (uncoaleced - and therefore starting at same pos) markers. We expand one find. They when we go
						to expand the second - its starting from the wrong position.
							This routine must first shove all others starting at the same position forward one, and then it can let them
						slip back (after any shoving has already been done by the natural marker mechanism. THINK THIS THROUGH BETTER.
						ITS HAPPENED BEFORE (with SBSMode?/TA?). See if there is a more elegant way? But at any rate - FIX - and then go
						back to what I was doing before.
000425	WORKING	LGP			Hacked around most of the below bugs with gSupressedDidUpdateText hack. Look into why this helped,
						and find a better fix. But first - fix remaining bug. Paste two successive hidden blocks, and HIDE hidable text.
						Then paste a third. It goes into ONE BIG block (coalced). Trouble with coalescing here is that we've already
						internalized the first! Must allow for NOT ALWAYS coalescing adjacent blocks!!!
000425	WORKING	LGP			Lots of bugs/troubles still. Working on this and SPR#0731 at same time (cuz sometimes bugs from one hard
						to tell from bugs with the other). Main trouble now is pasting in new (hidable) text when hidable text is HIDDEN.
						But also haven't seem embeddings work proeprly. Haven't tested various things like justification being hidden, and so
						on, but most of these probably not yet working. And Mark a single PICT embedding as hidden. COPY. and PASTE - it
						appears - but NOT hidden. Trouble seems to be on the reading/RTF side.
000425	WORKING	LGP			Got half-assed implemention of 'RTFReaderSinkStreamHelper' - which translates saved-package for
						hidden text into text that gets injected into {\v} section of output RTF. Copies only text right now.
000425	WORKING	LGP			Checked in some code which gets us a little closer (but makes things buggy temporarily).
						Now I use GetHidableRegionsWithData () which also returns the reader/writer package, and its
						passed all the way down into the RTF writing code. Just now must fix THAT code to handle
						the zero-sized case, and to stick in the right data there (From the package). Not easy - but
						all the info is in teh right place. And thats what I must do!
000425	NOTE	LGP			Now ready to work on this. Infratructure in place. Write code to grab all the hidden
						FlavorPackages and then write composite converter to convert stream of OUTPUT RTF to INPUT RTF
						and use that to stream in the hidden text.
000331	REPORT	LGP			Saving (RTF Writer) of Hidden text doesn't work if the text is not currently SHOWN on the
		(0722)			screen. This is a major design flaw with how I approached the RTF writer (of this stuff). And
						a bit of a flaw with the overall approach to hiding RTF text. Anyhow - this is critical,
						and must be fixed. Though it probably won't hold up my first beta release.

000426	CHANGE	LGP			<OLDCODENOTE>
		(0745)				Changed semantics of TextStore::Overlap () - AGAIN. And by implication, subtly changed the
						semantics of TextStore::CollectAllMarkersInRange () etc.
							Basicly - the change is to improve/clarify the behavior in the case of empty - zero-width -
						overlaps.
							This COULD introduce subtle bugs. BEWARE!
							</OLDCODENOTE>

000424	Fixed	LGP			Still - I'll need to test some more. But it all seems to be working now.
000424	WORKING	LGP			Got all this crap compiling - and apparently working as well as PC - on Mac again.
000424	WORKING	LGP			Fixed the circular reference problem. But its still acting flaky, and I haven't addressed
						the problem with unhideselection (and the flaky above)?
000424	WORKING	LGP			Mostly working - except that the making the HiddenText guy point to the FlavorPackager,
						and vice-versa creates a loop that doesn't get freed. Must resolve this before I can go on.
							Also - I think that under some circumstances (UNHIDESELECTION command when hidables shown)-
						things don't get restored properly. Causes fonts to get lost. Haven't yet
						tried debgginging. Could be another case like SPR#0722.
000424	WORKING	LGP			The ripping out of the flavorPackage stuff is now full done as of SPR#0742.
000413	NOTE	LGP			Consider ripping the TextInteractor::Internalize/Externalize / FlavorPackage stuff
						out into separate module (maybe mixed into TextInteractor) - and then the
						HiddenText code can depend on/use that - rather than depending on TextInteractor.
000413	WORKING	LGP			Do this before #0722 - because I think the solution there will be to return the
						'packages' we save here in a vector(with size/offsets etc).
000331	REPORT	LGP			The HidableText code must fix 'save' code to use internalize/externalize () -
		(0724)			so it saves RIGHT stuff - not just plain text

000424	CHANGE	LGP		<OLDCODENOTE>
		(0744)				Its no longer needed (or correct) to override InternalizeBestFlavor to create a LedItControlItem::DocContextDefiner
						as is done in the Led 2.3 LedItMFC sample code.
							And its no longer needed. This is done automatically by WordProcessorCommonCommandHelper_MFC<BASECLASS,CMD_ENABLER>,
						assuming you are using that class.
						<OLDCODENOTE>

000424	CHANGE	LGP		<OLDCODENOTE>
		(0743)				Added new Led_MFC_WordProcessor module. If you are using MFC and any of the word procssor classes, you'll
						probably want to change your #includes of Led_MFC to Led_MFC_WordProcessor, and you'll want to add
						Led_MFC_WordProcessor.cpp to your project file.
						</OLDCODENOTE>

000424	CHANGE	LGP			Very substantial change to the FlavorPackage stuff. No longer mixed into TextInteractor (done only very breifly).
		(0742)			Now - the package internalizer/externalizers are Led_RefCntPtr<> objects owned by the TextInteractor. Added
						lots of hooks for changes in Paragraph etc databases to reconstruct these objects. Now almost all working - except
						that I still must fix OLE embeddings (in LedIt!) - and test on the Mac (probably some not compiling - like Mac-specific
						formats).
							No REAL new functionality due to this - but should allow me to move on and fix rhe rest of SPR#0724 soon.
						<OLDCODENOTE>
							If you overrode or directly used any of the Internalize/Externalize code, you may need to make small changes
						to accomoidate the new design. Override TextInteractor::MakeDefaultInternalizer or TextInteractor::MakeDefaultExternalizer()
						to subclass the internalizer/externalizer and add particular formats etc.
						</OLDCODENOTE>

000414	CHANGE	LGP			Led now takes advantage of namespaces.
		(0740)			<OLDCODENOTE>
						In your code, either define qLedUsesNamespaces (in makefile) to false, or
						say 'using namespace Led;'. You can see the LedIt example code, LedItConfig.h
						</OLDCODENOTE>

000414	CHANGE	LGP			Broke FlavorPackage code out of TextInteractor.cpp into FlavorPackage.cpp.
		(0739)			Better breakup of functionality for supporting new flavor types, and functionality for
						updating caretPos on internalize etc.
						<OLDCODENOTE>
						All programs must now include FlavorPackage.cpp.
						Any programs which overrode TextInteractor::InternalizeBestFlavor () probably need to be revised.
						Any programs that made direct use of the ReaderFlavorPackage or WriterFlavorPackage classes probably
						needs to be revised (that should be rare).
						</OLDCODENOTE>

000414	Fixed	LGP			I heard back from Taro that this worked fine.
000413	WORKING	LGP			I think I fixed this (but haven't yet checked it in). I'm waiting to hear back from Taro.
						I tried running on a vanilla Win98 machine, and I didn't seem to have broken anything (like I rememeber -
						using bold or udnerline or something). Anyhow - it seemed to be working OK. Still must find out if I fixed
						the I18n bug though....
000413	NOTE	LGP			The trouble is that Win32_GetTextExtentExPoint_Win95WorkAround () etc need to handle
						code pages other than just SJIS (or find some other way to know when to apply the given hack)
000413	REPORT	Taro@lec.	Cursoring through Chinese characters in Win98 produced bad results.
		(0738)

000411	CHANGE	LGP			We now redistribute the "Internal UNICODE" version of the ActiveLedIt! OCX
						in the CAB file.

000411	Fixed	LGP		GetHTML () ole method wasn't handling UNICODE builds properly.
000411	REPORT	BobAnd	> -----Original Message-----
		(0737)			> From: Anderson, Bob [mailto:banderson@randomhouse.com]
						> Sent: Tuesday, April 11, 2000 1:00 PM
						> To: 'Lewis Gordon Pringle, Jr.'
						> Subject: RE: ActiveLedt! Project
						> Importance: High
						> 
						> 
						> Hi Lewis,
						> 
						> I think there's a problem.  In the previous version of the control, the
						> TextRTF and TextHTML buffers worked just fine.  In your new version the
						> TextHTML buffer contains what appears to be junk  (bad pointer?).  
						> 
						> In any case, we do need the TextHTML version of the buffer content (we're
						> using RTF, HTML and TextCRLF).  

000411	Fixed	LGP			WM_MOUSEWHEEL now supported in Led.
000404	REPORT	Dan@lec		Another recent LV request is for IntelliMouse support in TA.  I assume
		(0736)			they're talking about the ability to scroll with the scrolling wheel.

000410	Fixed	LGP			Fixed, and sent him a dev-release of the Release/PartialUNICODE OCX.
000410	REPORT	BobAnd		High Priority. Must have SelHidable OLE AUT method for ActiveLedIt!
		(0735)


------------------- Released 3.0d5 000405 - Below ------------------------------

000405	CHANGE	LGP			Cosmetic bug introduced in the HilightRow (etc) code by my fix to SPR#0730. I was selecting
		(0734)			to the end of the row when I shouldn't. HOPEFULLY this is now fixed (added a new
						TextImager::GetIntraRowTextWindowBoundingRect () method.

000405	Fixed	LGP			It was completely innocuous, and has been replaced with a test which is more
						complex, but correct.
							The trouble with the old test is that the currentRowRect is a WINDOW RECT. And
						the hilightRect COULD - in fact - be totally outside - to the left or right - of the
						currentRowRect. Thats not a bug. Thats what the assert now checks.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970721	REPORT	LGP		Debug innocuous assert it MultiRowTextImager::DrawRow ().
		(0470)			Led_Assert (Intersect (hilightRect, currentRowRect) or hilightRect.IsEmpty ());
						Line commented out til this spr fixed.

000404	CHANGE	LGP			Got X-Windows port to the point of displaying "Hello World". Still no keyboard input supported (though that should be
						easy). Next (non-trivial) step is to write Widget-Wrapper for Led code.

000404	Fixed	LGP			DUP of SPR#0730 - looks like I already had this SPR - and never got around to fixing it. Fixed now.
000123	REPORT	LGP			(exited in LedIt! 2.3 as well). Create one line of text in LedIt! (spanning 2 rows).
		(0705)			Make it CENTERED. Select from the middle of the first row to the middle of the second.
						Note how BEGINNING of first row displayed as selected!

000404	Fixed	LGP			Revised Led_ThrowOutOfMemoryException () API, and added Led_Set_OutOfMemoryException_Handler ()
						functions for each of the different exceptions thrown in Led.
						<OLDCODENOTE>
							If you were not using MFC, or PowerPlant - you're app probably already provided these Led_ThrowOutOfMemoryException ().
							They will now generate link errors. You maybe able to just delete yours, or use the new
							Led_Set_OutOfMemoryException_Handler () (etc) APIs to specify your own handler.
						</OLDCODENOTE>
							Note - I never understood the Led_Debug_Trap () complaint - and suspect it was a build error, or a makefile error.
000404	REPORT	Hordur	> -----Original Message-----
		(0732)			> From: Hordur Thordarson [mailto:hordur@lausn.is]
						> Sent: Tuesday, April 04, 2000 11:03 AM
						> To: Lewis Pringle
						> Subject: LED 30d4 questions
						> 
						> 
						> Lewis,
						> 
						> I am trying to compile Led 3.0d4 with the Win32 stuff in and MFC out, and 
						> so far have it compiled with a few warnings but I have some crippling 
						> link errors which I cannot solve.  Most of them have to do with the 
						> Led_ThrowBadFormatDataException, Led_ThrowOutOfMemoryException and 
						> Led_DebugTrap functions.  I have the functions defined in my project but 
						> I still get link errors of the following kind:
						> 
						> unresolved external symbol "void __stdcall _Led_Debug_Trap_(char const *, 
						> int)" (?_Led_Debug_Trap_@@YGXPBDH@Z)
						> 
						> unresolved external symbol "void __cdecl 
						> Led_ThrowOutOfMemoryException(void)" 
						> (?Led_ThrowOutOfMemoryException@@YAXXZ)
						> 
						> unresolved external symbol "void __cdecl 
						> Led_ThrowBadFormatDataException(void)" 
						> (?Led_ThrowBadFormatDataException@@YAXXZ)
						> 

000404	CHANGE	LGP			Added Led_InstalledFont class and used it in the Led32 sample apps (and activeledit).
						Added optional filtering, and by default, filter out '@' fonts.

000403	Fixed	LGP			MultiRowTextImager::DrawRowHilight () should use RemoveMappedDisplayCharacters () to replace
						ifdefed out code that was handling NL special case - so we only grab rect for a single row.
							TextImager::GetTextWindowBoundingRect () was simplified, and fixed to handle single-row case
						properly (and other cases more simply).
							All I really reproduced was the second bug report. I never really understood the first one (since the
						picts didn't come through for me in the email). But his second message seemed to indicate the second problem
						was the same as the first, so we'll assume its fixed til I hear back otherwise.
000402	NOTE	MarcVa	>-----Original Message-----
						>From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						>Sent: Sunday, April 02, 2000 8:46 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: Selecting Bug
						>
						>
						>Hello Lewis,
						>
						>the bug I reported last week with 3.0d4 appears to be there in other cases
						>also:
						>
						>Select a sentence = short paragraph, in the middle of the first line
						>sentence and then move mouse downwards as soon the second line 
						>gets selected
						>the complete first line also get selected. I have this in the case when
						>first indent was set.
000325	REPORT	MarcVa	>-----Original Message-----
		(0730)			>From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						>Sent: Saturday, March 25, 2000 6:06 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: Alignment bug
						>
						>
						>hi Lewis.
						>
						>first of all I would like to thank you for the smooth transition of 2.3 to
						>3.0d4 I just did it an hour ago and it was so easy, thanks! I 
						>moved to 3.0d4
						>because I'm starting with the Windows version today.
						>
						>We also gave a first demo to a few customers of the new text 
						>features in our
						>product and they were thrilled about it. lot's of credit goes to you!
						>
						>I discovered an Alignment bug:
						>
						>included pictures are in macos pict format but I assume you have quicktime
						>installed on you windows machien
						>
						>1. I'm using LedIt wordprocessor version 3.0d4
						>2. Select the text like in picture 1. I think font size are important and
						>also the way the window rectangle is setup.
						>3. Change the Alignment to center instead of left.
						>4. You will notice that the visual selection changed (the blue 
						>hilite color)
						>5. But when you do copy it copies only the text that was selected before.
						>I assume that the visual selection data is incorrect. When I do a force
						>refresh of the screen (switch color depth) it will draw the hilite 
						>still the
						>same way.

000403	Fixed	LGP		<OLDCODENOTE>
								<p>If you're code directly calls WordProcessor::WordProcessorTextIOSrcStream () or
							WordProcessor::WordProcessorTextIOSinkStream (), you may need to pass an extra argument for the
							HidableTextDatabase (if you call the multiarg CTOR - if you call the one that takes a WordProcessor* - you
							are all set; also note - if you define qSupportLed23CompatAPI none of this is required).
								<p>Also - if you have a document with a fParagraphDatabase - you will probably want to create
							a fHidableTextDatabase (as is done in LedItMFC or LedItPP). And call SetHidableTextDatabase () in your
							View class. Note - there is deftault behavior for most of this code so much of this is optional.
								<p>Also - there maybe better templated helpers for building LedItMFC-like applications before
							Led 3.0 is released.
								<p>ALSO- you must add HiddenText.cpp to your projects if you use the WordProcessor class.
						</OLDCODENOTE>
000331	REPORT	LGP			Update Mac (etc) code to work with new HidableText stuff, and related changes. Make sure all
		(0727)			(even x-windows) compiles and runs. Make notes in a "<Chng>" section about backward non-compat code
						changes.

000403	CHANGE	LGP			Fixed a bug (due to UNICODE changes) with pasting in URLs into ActiveLedIt!. Disable
		(0729)			qUseSpyglassDDESDIToOpenURLs since ActiveLedIt! didn't init DDE (could have - but since its an
						OCX - that seemed unsafe). Could have had ActiveLedIt! only disable the feature, but it seemed
						DDE should be of little use these days. ActiveX API is fairly old now.
							<OLDCODENOTE>
							qUseSpyglassDDESDIToOpenURLs = defaults OFF now.
							</OLDCODENOTE>

000403	Fixed	LGP
000331	REPORT	LGP			Incorporate the hidentext support into ActiveLedIt! in the manner agreed with
		(0728)			Bob Anderson.

000402	Fixed	LGP			Implemented both.
000316	NOTE	BobAnd		I asked if he wanted the method to bring up a dialog or be a low level call to find
						the matched text, and he responded:
						>		Ideally, both.  But if creating an OLE method which takes a
						>search string, and parameters about forward, backwards, match-case etc, and
						>returns an offset in the text where the next match can be found is 
						>difficult
						>or will delay us significantly, then I'd settle for just bringing up the
						>dialog for now.
000315	REPORT	BobAnd		ActiveLedIt/OLEAUT. The Find method exposed (existing  dialog is fine).
		(0716)			<See 'HiddenTextAgreement.rtf' in RandomHouse client directory for details>

000331	Fixed	LGP			Now we have RTF WRITING working (except for one serious bug/case - see spr#0722). This SPR
						is getting long. And the feature now basicly works. I'm going to cover the remaining issues in
						separate SPRS (#0723,0724)
000330	WORKING	LGP			Most of the RTF code now in, and the WordProcessor code now has the HiddenText stuff integrated
						into it. There is a new WordProcessor::HidableTextDatabasePtr treated similarly to the existing
						WordProcessor::ParagraphDatabasePtr. I updated the LedItMFC sample to use this new database and
						store it in the document. NB: there will be some code changes due to this stuff - but I'll capture
						them in a "<CodeCng>" section when I try to get this stuff working on the Mac.
							In the meantime: the remaining items todo include:
							o	RTF WRITING.
							o	deal with UNDO interactions.
							o	fix 'save' code to use internalize/externalize () - so it saves RIGHT stuff - not just plain text.
000330	WORKING	LGP			Now all the infrastructure to show/hide regions is in place, including coalescning, and
						splitting, and culling zero'd items. Now all thats left is:
							o	support RTF
							o	deal with UNDO interactions.
							o	fix 'save' code to use internalize/externalize () - so it saves RIGHT stuff - not just plain text.
000327	WORKING	LGP			HIDDEN items now display properly (SPR#0718). Now, we next must properly manage the list
						of hidden markers, coalescing, etc. THEN - we must support RTF, and deal with UNDO interactions.
						Plus we must fix 'save' code to use internalize/externalize () - so it saves RIGHT stuff - not just
						plain text.
000317	WORKING	LGP			See notes on SPR#0718 - new feature added to make this display of HIDDEN items better.
000317	WORKING	LGP			Added MakeHidable/unhidable selected range menu commands and show/hide all potentially hidden
						text commands in LedIt! Got this working for a very simple case (but still no text displaying with funky style
						when show-hidden on)
000315	WORKING	LGP			Created HiddenText.cpp module and began work on it. Most of it is designed. About 50% of
						the implemantion of the first peice - actually adding/removing the text. But then the tricky issue
						of combining display from different marker sets remains...
000315	REPORT	BobAnd		Hidden text supported.  (i.e. the rich text '/v' tag), along with a flag which displays or
		(0717)			suppresses the display of hidden text (i.e.HiddenText - Read/Write).  Setting it true would cause
						the control to repaint and display it (preferably in a HiddenTextColor).  Setting it false 
						would cause the control to repaint and hide it.
							<See 'HiddenTextAgreement.rtf' in RandomHouse client directory for details>

000331	CHANGE	LGP			Added and used DECLARE_USE_BLOCK_ALLOCATION/DECLARE_DONT_USE_BLOCK_ALLOCATION macros.
		(0721)

000329	Fixed	LGP
000327	REPORT	LGP			Consider making SyntaxColoringMarkerOwner::ColoredStyleMarker, SyntaxColoringMarkerOwner::FontChangeStyleMarker,
		(0720)			and HiddenTextMarkerOwner::HiddenTextMarker into trivial helper classes that go into StyleMarker.h,
						instead of being in these other modules. They are too common to want this kind of functionality.
						Even though they are trivial - why duplicate? Esp when I can put the combining behavior in one
						place (if I can find a good way to parameterize that so its not required!!! Better than what i do now 
						in HiddenText style marker).

000329	Fixed	LGP			Taro has tested a pre-release build at LEC. It all SEEMS to be working OK.
000328	REPORT	LGP			Test at LEC - and assure Microsoft GlobalIME works fine for QT for Korean, Chinese, etc.
		(0719)		Test both QT and LedIt! etc programs.

000328	CHANGE	LGP			New (experimental - needs testing) - IME code. Should work better on Win2k (MS Global IME) now.

000328	CHANGE	LGP			New TextImager::GetStaticDefaultFont(CHARSET) code. Still horribly kludgy - but should work at least
						somewhat better now.

000327	Fixed	LGP			I believe this change is complete. The new HiddenText code seems to use it just fine. LedItMFC seems
						to compile with qOldStyleMarkerBackCompatHelperCode either on or off (not yet done thourough testing yet). 
000327	CHANGE	LGP		More work on related stuff and 3/18 code note below.
000318	CHANGE	LGP		DRAFT<OLDCODENOTE>
							In order to better support combining the drawing behavior of different, overlapping
						"StyledTextImager::StyleMarker"s serveral APIs have changed.
							<p>StyledTextImager::RunElement now has an additional data member (this SHOULD cause no compatability problems).
						But the StyledTextImager::StyleMarkerSummarySink class has changed significantly. If you simple USED this, or
						some Led-based subclass - you don't need to change your code. But if you subclassed it yourself, beware that the
						basic algorithm has changed, and the arguments to CombineElements () have changed.
							<p>Related to this, the 'StandardStyledTextImager::SummarizeStyleMarkers' override no longer exists. It used
						to restrict summary (by default) to the StandardStyleDatabase. But since markers can now be combined, there is
						little point in this default.
							<p>You can use qOldStyleMarkerBackCompatHelperCode (defaults true iff qSupportLed23CompatAPI true)
						to help with backward compatability for Led 3.0 (and pre-release versions).
						</OLDCODENOTE>
000317	CHANGE	LGP			Inspired by - and even probably required by - SPR#0717 - I've made a major improvement to how
		(0718)			we summarize style markers, to allow for COMBINING the display effects of different overlapping style markers
						more effectively.
							Got first stage working - controled by IFDEF. Did PerfTest - on RTF1.5 doc - and no noticable change in
						reading/scrolling through the doc. Next todo is code cleanup, docs, care about backward compat, etc. Then
						go on and push the RunElt stuff into the args for the StyleMarkers - so future subclasses can use the extra data
						(namely - EG - the new HiddenText guys).
							
000315	Fixed	LGP			Added a read/write SelJustification property.
000315	REPORT	BobAnd		ActiveLedIt/OLEAUT. The paragraph alignment variable(s) exposed (Left, center, etc). Read/Write.
		(0715)			<See 'HiddenTextAgreement.rtf' in RandomHouse client directory for details>

000315	Fixed	LGP			Fixed. DUP of 0714
000308	REPORT	BobAnd	>FROM:  Anderson, Bob [mailto:banderson@randomhouse.com]
							The OCX currently does NOT have any properties for a dirty flag. NOR does it have any
		(0710)			properties for setting paragraph info - like justification. These are trivial to add.
						I've added SPR#0710 to track these two addition requests.
							They should get in within the next month or so.

000315	Fixed	LGP			Fixed.
000315	REPORT	BobAnd		ActiveLedIt/OLEAUT. The editor's dirtyFlag exposed.  Read/Write (you need it writable so you can
		(0714)			reset it controled by program logic - like after you grab the text via a 'get-Text' call).
						<See 'HiddenTextAgreement.rtf' in RandomHouse client directory for details>

000315	Fixed	LGP			Fixed.
000313	WORKING	LGP			Added elaborate UNDO support - allowing you to configure maxUndos, Undo/Redo/CanUndo etc to
						the IDL. Still have NOT hooked any of this code in, to make it active.
000313	REPORT	BobAnd	>FROM:  Anderson, Bob [mailto:banderson@randomhouse.com] (as part of contract)
		(0712)			Add UNDO command to ActiveLedIt! IDL

000313	Fixed	LGP			Main fix was that Led_CvtFromTWIPS () - etc - should take Led_Coordinate - not Led_Distance. Trouble
						was immediately caused by a \fi - first indent - argument that was negative. Completely legal, and appropriate.
							Then - I noted that the resulting code - even after the fix - in TextImager::StandardTabStopList::ComputeIthTab
						and TextImager::StandardTabStopList::ComputeTabStopAfterPosition () we would waste HUGE amounts of time if given
						out of range values. I rewrote those routines to be smarter, and so not apparently 'hang' when given bad values.
000313	NOTE	LGP			There were a few complaints in this message, but the bug report came down to the fact that
						when you turned on kWrapMode in LedItView.h for LedItPP on the Mac - and did a release build - opening
						Led's ReadMe.rtf file caused a hang.
000312	REPORT	M.Olmen	>-----Original Message-----
		(0713)			>From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						>Sent: Monday, March 13, 2000 12:02 PM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: Re: Cursor movement bug.
						...
						>
						>I tried that but, when you open an rtf file that has indent information,
						>like the readme.rtf of version 2.3 (included in the stuffit package). The
						>LedIt applications halts forever. Maybe there is something else that I have
						>to switch on/off.

000313	Fixed	LGP		
991221	WORKING	LGP		I (mostly) diagnosed and understood this problem. Nothing tough. Just was sloppy. Now I have
						"TextRTF" propput/propget working. Just alot of gruntwork to test each of the others in each possible
						build configuration.
991209	REPORT	LGP		ActiveLedIt! UNICODE build IDL functions don't work. EG GetSelRTF etc all produce garbage.
		(0647)			Trick I did of renaming arg in MFC hooks from LPCSTR to LPCTSTR obviously not good enuf!

000313	CHANGE	LGP			Noticed bug where .led format files were not properly read or written for (partial or full) UNICODE
						builds. FIXED.

000311	Fixed	LGP			First - introduced new methods to TextImager: GetRealEndOfRow () and
						TextImager::GetRealEndOfRowContainingPosition (), to NOT remove hiden chars at the end.
						These are handy helpers.
							The main fix tho this report was that MultiRowTextImager::PositionWouldFitInWindowWithThisTopRow ()
						should check if markerPos < GetRealEndOfRow () rather than markerPos <= GetEndOfRow (lastRow).
						That fix - however - forced out another bug in TextInteractor::ScrollToSelection () - where cursoring up
						would scroll too agggresively.
							Then in TextInteractor::ScrollToSelection () - don't specify a 'lastCharShown' arg to
						ScrollSoShowing () if they are on separate lines. The given trick about showing one-char away is
						helpful - but creates a situation where when we cursor upwards to the first character of the window,
						we force showing one EXTRA row above - which seems queer.
000311	WORKING	LGP		Reproduced on PC, on current Windows build, AND on LedIt! 2.3 Windows released build.
						and saved file as 0711.rtf on \\Pythagoras\Led bug folder.
000311	REPORT	M.Olmen	>-----Original Message-----
		(0711) 			>From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						>I found a small bug with cursor movement. I used to the LediT wordprocessor
						>to test it. MacOS 9.02f1. I included an stuffit file, I'm not sure you are
						>able to read it. Becuase last time we had trouble with that. I used Windows
						>Base64/Mime Outlook 5.0 to send it to you.
						>
						>Description of the problem:
						>
						>1. Take one paragraph of text (about 200 characters):
						>----
						>Hello this is the text we hope to have a large text that can be used to have
						>a great watte way this can of course be a hit and certainly on radio Donna.
						>especialy with the House beat. Je kunt ook luisteren naar Studio Brussel to
						>get your tickets of 101 dance performacne. Op 11 maart is in de AB een Drum
						>and base party.
						>----
						>You have to remove the returns Added by Outlook.
						>
						>2. Use a large font : 24 Times.
						>3. Make the height/width of your windows small enough so the vertical
						>scrollbar is working.
						>4. Put the cursor at the beginning of the last visible line.
						>5. Now press the Down Arrow key.
						>	
						>a. You will notice that the text doesn't scroll.
						>
						>If you press again the Down Arrow key then it will scroll one line but it
						>shows one line less then it has too.
						>
						>b. Instead of placing the cursor before the first character, place the
						>cursor after the first character and then hit the Down Arrow  key, you will
						>notice that it works.

000308	Fixed	LGP			I sent mail to him. Really problem was that MultiRowTextImager::HilightARectanle_ needed to set forecolor
						and backcolor properly. That code was duplicated, and nonvirtual, in MTRI and SimpleTextImager. Instead,
						I replaced it with NEW VIRTUAL TextImager::HilightARectangle and TextImager::HilightARectangle__SolidHelper ().
						Open new SPR#0709 to track future PC enhancement.
000202	WORKING	LGP			I looked at this. I think he maybe wrong about what should be done (cuz if text color black and
						background/invert color black - you get black on black). I responded in email, and we'll see what Marc
						has to say.
000202	REPORT	M.Olmen	>-----Original Message-----
		(0708) 			>From: Marc Van Olmen [mailto:marc.van.olmen@sky4studios.be]
						>Sent: Wednesday, February 02, 2000 1:10 PM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: Just a thought for Showing Hilite
						>
						>
						>Hi Lewis,
						>
						>Showing Hilite, is a problem on the MacOS because the InvertRect routine
						>does only work correctly on white background or some simple colors. Because
						>I need LedTextEngine for multimedia applicatons can have also other colors
						>as background or have even pictures has backgrounds. Also when you use
						>InvertRect to hilite, the corners of the hilited text are not very 
						>nice when
						>you use Fonts Smoothing on System  8.1. (just try with SimpleText and you
						>will see the result).
						>
						>I found a way to solve this in LedText Engine, wow isn't this text engine
						>great:-)
						>
						>First thing to change is :
						>
						>MultiRowTextImager::DrawRow
						>
						>I moved DrawRowHilight before 'DrawRowSegments', so first we hilite the
						>background and then we draw the Text. So Fonts Smoothing on System  8.1
						>works great because the background color is the one that needs to be
						>smoothed.
						>
						>    if (not printing) {
						>        DrawRowHilight (row, tablet, currentRowRect, invalidRowRect,
						>textBuf, start, end);
						>    }
						>
						>    DrawRowSegments (row, tablet, currentRowRect, invalidRowRect, textBuf,
						>start, end);
						>
						>
						>
						>Then I changed 'HilightARectangle_' to
						>
						> RGBColor    aColor;
						> RGBColor    oldcolor;
						>Pattern     aBlack = { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };
						>            Rect    qdHiliteRect = AsQDRect (hiliteRect);
						>        
						>                LMGetHiliteRGB (&aColor);
						>                ::GetForeColor (&oldcolor);
						>                ::RGBForeColor (&aColor);
						>                FillRect (&qdHiliteRect, &aBlack);
						>                ::RGBForeColor (&oldcolor);
						>
						>So that the hilite color is painted on the background instead of inverting
						>it. I know that InvertRect could lead to other results then what I have
						>here,
						>
						>but just tell you this in case you have other clients needing the same
						>trick.
						>
						>The same trick can also be used on Windows

000202	Fixed	LGP			Fixed (though primitive). His problem was that he must force a NL at end of <DIV> section so setting
						of paragraph justification for following section (including NL of his DIV) gets set to different justification.
000201	WORKING	LGP			Hooked in basic 'div' support - but waiting to hear back from Hordur with test case.
						Not sure if this is the problem - but maybe his problem had todo with stack-based restore code
						not written for paragraph styles etc...
000127	REPORT	Hörður	>>-----Original Message-----
		(0707)			>>From: Hörður Þórðarson [mailto:hordur@lausn.is]
						>>Sent: Thursday, January 27, 2000 10:05 AM
						>>To: Lewis Pringle
						>>Subject: LED justification question
						>>
						>>
						>>Hello Lewis,
						>>
						>>I'm currently trying to add support for the <div align="..."> tag to my
						>>html reader subclass.  I overrode HandleHTMLThingyTagUnknown and called
						>>my HandleHTMLThingyTag_div where I'm doing the following:
						>>
						>>void LEDXHtmlReader::HandleHTMLThingyTag_div (bool start, const char*
						>>text, size_t nBytes)
						>>{
						>>	WriteToLogFile ("LEDXHtmlReader::HandleHTMLThingyTag_div");
						>>
						>....
						>>What am I doing wrong ?

000124	Fixed	LGP			Now I've updated release procedure script, and done my first Led X-Windows release (3.0d4).
000117	NOTE	LGP			rcp -r -a can be used to copy a whole directory to UNIX and fix the CRLFs (Thanx to AlecW for
						the hint/reminder).
000115	WORKING	LGP			Half done. New script created. Haven't yet updated release procedure.txt file with what todo.
						Still alot more polishing. Haven't updated we page yet for new licence type etc.
						For now - allow any Led customer (regardless of licence type) to download X sources.
000115	REPORT	LGP			Revise build scripts to build an XWindows target distribution (and Mac&X and Win&X and WinMacAndX)
		(0695)			and strip X stuff out of OTHER distributions.


------------------- Released 3.0d4 000122 - Below ------------------------------

000122	Fixed	LGP			Fixed.
991129	Report	LGP		fix the Led_Win32_Helper STARTUP code so we can get the object pointer from
		(0633)			the window earlier - so we can handle OnCreate() messages etc...

000122	Fixed				Managed to share a little code (HScrolling part) - but mostly its still duplicative.
						But - its now duplicative but FIXED!. It now tries to keep the interesting area centered when
						it has to scroll by more than one row.
000121	NOTE				Really must updated (currently) SimpleTextImager::ScrollSoShowing () and
						MultiRowTextImager::ScrollSoShowing (). See if there is any way to share this code in TextImager.
						Anyhow - even if it must be duplicated - get it RIGHT!!!
							I THINK the right definition is that if I can show the line I want by scrolling ONE ROW then
						do so. Otherwise - if I must scroll more - then scroll so the new selection is in the middle of the window.
991130	NOTE			High priority. I find this annoying. Especially in conjunction with "Find" operations.
990415	DEFER
971020	NOTE	LGP		Do nicer job autoscrolling. Sometimes when you paste (or other operations?)
						I find that the screen autoscrolls so that my current selection is showing, but not
						the stuff I just pasted in. Of course this may be necessary, and is not quite a bug.
						But I find it disconcerting, when it happens.
							I'm not sure what the general rule SHOULD be. Try other apps. But maybe its to scroll
						as little as you can to satisfy the request?
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	LGP		TextIteractor::ScrollSoShowing() doesn't seem todo a very intuiite job of
		(0499)			where it scrolls to, when it needs to. Try some other editors, and see what
						they do. Not exactly broken now. But just doesn't feel right to me.
						Especially on a paste?

000122	Fixed	LGP		
000122	REPORT	PArchiba>-----Original Message-----
		(0703)			>From: Paul Archibald [mailto:PArchibald@intellitools.com]
						>Sent: Friday, January 21, 2000 6:55 PM
						>To: 'lewis@sophists.com'
						>Subject: quick question
						>
						>
						>Lewis-
						>We have a request for a change in the way undo works. Currently, if you
						>select a chunk of text and change its fontsize, then undo and redo a few
						>times, you see that the text toggles between the two sizes, but the
						>selection range keeps getting changed, too. Our product people find this
						>disturbing, and would like to change it so that the selection is maintained
						>while the undo/redo commands are issued. (We only have single level undo,
						>which we get by using 	m_commandHandler(1),  in our docpane's ctor's
						>initialization list.) 

000121	Fixed	LGP			Update logic in TextInteractor::GetCharAtClickLocation () for SPR#0702- don't interpret click in line
						terminated with a SOFT-RETURN (really any zero-width character(s) as being after the zero-width characters
991220	REPORT	LGP			Double/TripleClicking on an empty row created by SHIFT-RETURN doesn't select the right row.
		(0702)			Created as a result of SPR#0667

000119	Change	LGP			Treat RTF \header and \footer tags as INGORED on input. Makes reading docs with headers & footers
						look a litlte better. Old behavior of just dumping their text into the beginning of the doc (really section)
						may have allowed you to see more information - but was pretty ugly (generaly).
							See SPR#0701

000119	Change	LGP			Treat RTF \cell tags as TAB characters on input. Makes reading tables look slightly better - at least
						til we really support tables.

000119	Fixed	LGP			Originally tried fixing StyledTextIOReader_RTF::ReadControlWord(see comments) -
						but decided from RTF docs it wasn't really broken - the example was broken. Instead -
						introduced HandleBadlyFormattedInput () virtual method - and became far more forgiving
						of input errors (by default).
000117	NOTE	LGP		Fixed similar spr#0696 - try again...
990723	NOTE	LGP		Files stored on \\PYTHAGORAS\Led\Sample&TestDocsEtc\SPRS\0619
990615	NOTE			Please respnd to 'Andy Dent' - see message 'Thu 6/4/98 5:45 PM' - when this is fixed.
990504	DEFER	LGP
990504	REPORT	LGP		Reading the file 'chokeLed.rtf' causes LedIt! to choke. There are several problems with Led's
		(0619)			RTF reader. One has todo with handing of CRs stuck in bad places in the middle of \colortables.
						Another has todo with when we don't get a spec for the default font.
						Neither of these SHOULD come up very often. They aren't generated by MSWord anyhow.
						So they can probably be defered moderately safely. At least for this release since we are so near the end.

000119	Fixed	LGP			I added more assertions/checking that the right number of markers gets deleted. I saw no such
						bug. See new assertions for fPartitionMarkerCount.
000119	REPORT	m.pritt	>-----Original Message-----
		(0699)			>From: m.pritt@epixtech.com [mailto:m.pritt@epixtech.com]
						>Sent: Wednesday, January 19, 2000 11:23 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: Re: Led 3.0d3 available
						>
						>
						>
						>Lewis,
						>
						>     I'm finding two memory leaks that Microsoft VC++ seems to claim to
						>exist in the current version of Led (Led3.0d3 - and I've seen the same ones
						...
						> and in the second
						>function it is the partition marker that's added to fTextStore.AddMarker
						>which also seems to not get freed at the close of the application.
						.....
						>// Second Memory Leak that I'm finding in Led
						>void Partition::FinalConstruct ()
						>{
						>     #if       qDebug
						>          Led_Require (not fFinalConstructCalled);
						>          fFinalConstructCalled = true;
						>     #endif
						>     Led_Assert (fPartitionMarkerCount == 0);
						>     Led_Assert (fPartitionMarkerFirst == NULL);
						>     PartitionMarker*    pm   =    MakeNewPartitionMarker (NULL);
						>     #if       qDebug
						>          fPartitionMarkerCount++;
						>     #endif
						>     fTextStore.AddMarker (pm, 0, fTextStore.GetLength ()+1, this);    //
						>include ALL text
						>}

000117	Fixed	LGP			Allow for RTF files where the \deffN specifies a font number that doesn't appear in the
						\fonttable
000117	REPORT	PArch	>-----Original Message-----
		(0696)			>From: Paul Archibald [mailto:PArchibald@intellitools.com]
						>Sent: Monday, January 17, 2000 3:13 PM
						>To: 'Lewis Gordon Pringle, Jr.'
						>Cc: Scott Schafer
						>Subject: RE: some problems with 2.3
						>
						>
						> <<The quick brown fox.rtf>>  <<Scrap Parsing.sit>>
						LedIt! fails to open this rtf file. The file is saved on \\Pythagoras\Led
						as "SPR#0696-The quick brown fox.rtf".

000117	Close-	LGP			Close. Replaced with more specific 0648, and 0697, 0698.
990321	DEFER	LGP		Defer, and probably do AFTER Led 2.3.
980422	REPORT	LGP		See SPR#0536. 
		(0537)				Must provide a reasonable FileIO
						UI for selecting UNICODE vs. mybyte charset output. And supporting UTF7/UTF8, etc, on
						input/output.

000117	Fixed	LGP			Now we at least work as well as we did before in Partial UNICODE mode. But do better - see
						new SPRs 0697 and 0698.
000114	REPORT	LGP			Fix LedLineIt PC UNICODE build to read/write UNICODE and non-UNICODE files properly
		(0692)			(at least be able to read non-UNICODE files!)


000115	Fixed	LGP			Got simply hello world program working, with makefiles etc nicely setup. See spr#0694 for next step.
991214	REPORT	LGP			Get X-Windows port to the next level. Get something linking with XLib - and get a hello
		(0658)			world program to come up under X. See SPR#0657 for past work,

000111	REPORT	Fixed		Fixed. I hope. Further enhance/revise qHookIMEEndCompositionMessageToWorkAroundWin2KIMEForNonUNICODEBug
						hack. I tested now on WinNT40J, Win98J, NT5RC2 (with both English and Japanese default locale).
							<OLDCODENOTE>
								Lose GetInputCodePage/SetInputCodePage/HandledMByteCharTyping APIs. Simply no longer
								needed/used anywhere. The code page of stuff in WM_IMECHARs is always CP_ACP - as far as I
								can tell.
							</OLDCODENOTE>
000111	REPORT	June@lec	(really earlier). LEC SPR#5734. June reports that on WinNT40J, typing Japanese characters in Led-based Partial UNICODE
		(0691)			app - you get some garbage Japanese characters at the end.


------------------- Released 3.0d3 991229 - Below ------------------------------

991228	Fixed	LGP			LedLineIt! 3.0d3 non-unicode was slightly faster (8 secs vs. 7) than LedLineIt! 2.3, and both used the same RAM
						Opening my sample 10MB file (though 3.0d3 was doing syntax coloring as well). They both used around 31MB RAM (VM).
						With the 3.0d3PartialUNICODE build - we ran 8 seconds, and VMSize was 41MB used by the 10MB file.
							This means a roughly 1/3 more RAM for UNICODE. Not what everyone will want for ever need. But a small enuf
						increment that I think I'll switch my default for all shareware apps to Internal UNICODE. Esp since no speed hit
						(though my computer as 256MB RAM - I think anyone working with very large files probably will have a large RAMSIZE
						as well).
991209	REPORT	LGP		Redo BUILD scripts so that I use the new "Partial UNICODE" builds by default
		(0650)			for LedIt!, LedLineIt! and ActiveLedIt! (though more questionable for LedLineIt! - test mem/perf hit first).

991228	Fixed	LGP			Lost #define qUseGDIScrollbitsForScrolling. Instead added methods G/SetUseBitmapScrollingOptimization.
						And patched ActiveLedIt! to not define old define but to call this method.
991113	REPORT	LGP		Make scrollbits scrolling OPTIONAL (cuz doesn't work OFTEN when you override EraseBackground - and DOCUMENT that)
		(0628)			Fix ActiveLedIt! accodingly (in demo mode) cuz it overrides erasebacground then

991228	Fixed	LGP			Fixed. The underlying bug really affected all platforms (each just had different symptoms). The
						problem was that I had forgotten to pass a good default value in StyledDatabase::CTOR to base class
						MarkerCover<>. I HAD passed a good default value in the ParagraphDatabase code.
991228	REPORT	LGP			Mac LedItView bug. Open plain text file (like source code file). Drag and drop some word and size of text dropeed gets very small.
		(0690)			I think bug is intial size field in Led_IcrmemttalFontINfo is being set to zero(UNSET).

991228	Fixed	LGP		Fixed for Windows - and opened new generic SPR (#0689) for Mac prefs saving.
991228	REPORT	LGP		Save "Show paragraph markers" etc options in LedIt (MFC and PP)- MedPri
		(0688)

991228	Fixed	SWIGHT	Added these functions to Led_MFC. But had to make parts of this conditional on qSupportDrawTextGetTextExtent.
						See that define for more details.
991228	REPORT	SWIGHT	(really earlier)Add DrawText()/GetTextExtent() top level API functions like LECs (maybe in Led_MFC) which build right kind of
		(0688)			trivial imager/etc...

991228	REPORT	LGP		WordProcessor::DrawSegment () should be updated for Mac to draw arrow head (LOWPRI)
		(0685)

991228	CHANGE	LGP		FIX ARG ORDER FOR TrivialWordWrappedImager<> / TrivialImager><> to be cosnistent (STERL requested)
		(0687)			<OLDCODENOE>
						If you directly instantiated TrivialImager<> - the order of the two template args has been reversed
						</OLDCODENOTE>

991228	Fixed	LGP		Fixed a while back
990504	DEFER	LGP
990504	REPORT	Sterl	TrivialImager should by default use the background color and foreground color of the tablet handed
						to it. The only trick to doing this in TrivialImager is that it gets handed a pointer to
						an offscreen tablet. ONE - we may wish to have some per-imager way to disable the offscreen tablet stuff (not sure of this).
						And TWO - and more importantly - we should probably COPY the attributes from the source tablet to the offscreen tablet - like
						the foreground/background color, and perhaps a few others????

991228	Fixed	LGP		See SPR#0669.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970718	NOTE	LGP			I never really understood why anybody would want this. But I have noted that
						MS-Word does it (optionally). Must be some reason.
							Anyhow, I go through some trouble in MultiRowTextImager to detect NLs
						at the end of a row, and to just not draw them (as they get drawn as a
						garbage character). In retrospect, this may not have been the best approach. But even now,
						I'm not sure what a better one would be.
				       		Off hand, I think the RIGHT approach is for me to parameterize whether or
				       	not I draw the end NL character in MultiRowTextImager. Add a bool flag saying
				       	yes or now. Seach for occurences of '\n' (4 of them). Probably each of these places
				       	(maybe not all and maybe a few more) will need to be updated to only conditionally
				       	not draw the \n. Thats the hard part.
				        	The the easy part is to override the DrawSegment() function, and substitute
				        some funky character for NL at the end of the buffer, so the text draws as
				        you would want. Or to add a style-marker to each NL so it gets a special
				        hook to draw, if you want to draw an icon, instead of just a special glyph/character.
				        	I'm adding this as a request for my next release, and I'll think about it
				        some more. Do you think this is an important/commonly used WP feature?
970717	REPORT	JoeWill	At 7:08 PM 7/17/97, Joe Willcoxson wrote:
		(0464)			>Lewis,
						>
						>One of the next things on my list is to try and implement:
						>
						>1. paragraph markers, i.e. the little paragraph sign that shows the end of
						>a paragraph that can be switched on or off

991228	Fixed	LGP			Fixed.
991227	WORKING	LGP			Got LedItPP to turn on/off these options (and tuned chars for Mac).
							Now all that remains is must redo implmentation for TAB-CHARACTERS.
							This can probably be easily done via an override of DrawSegment() in the WordProcessor
						class.
991227	WORKING	LGP			Got ActiveLedIt! to turn on/off these options working for ActiveLedIt!.
						And test/finish getting this working for LedItPP.
							Then - must redo implmentation for TAB-CHARACTERS (and maybe tune what characters used
						for Macintosh for space/paragraph).
991227	WORKING	LGP			Got menu commands to turn on/off these options working for LedItMFC. Still must do
						PROPERTIES for ActiveLedIt!. And test/finish getting this working for LedItPP.
							Then - must redo implmentation for TAB-CHARACTERS (and maybe tune what characters used
						for Macintosh for space/paragraph).
991220	WORKING	LGP		Implemented new APIs in WordProcessor class. But still no doc strings written, no
						decent characters chosen (in some cases) and what to do for TAB-character is complicated - and
						not adequately implemented here. Perhaps a lot of work to get tab char right.
991219	REPORT	LGP		(Optionally) Show Hidden characters
		(0669)			Really reported many times long ago. I believe ChinaJoe had requested/implemted this.
						This is also covered in FAQ#26. Once I implement that - I can update FAQ#26 to cover
						this new implemantion (and the new API implemted in SPR#0670)

991227	CHANGE	LGP		<OLDCODENOTE>
						Renamed WordProcessorSelectionCommandHelper<> -> WordProcessorCommonCommandHelper<>
						</OLDCODENOTE>
	
991227	Fixed	LGP		Opening the file SoftReturnTest.rtf - we got no font-name for the opened text. This was true
991227	REPORT	LGP		Opening the file SoftReturnTest.rtf - we got no font-name for the opened text. This was true
		(0684)			in LedIt! 2.3. I incorporated the 'default font' name into the 'plain-font' - and that seemed to
						fix the problem. I'm not sure how that is really supposed to work.

991227	Fixed	LGP		Added \line support to the RTF reader/writer.
991220	WORKING	LGP		I think fully working now (STILL TEST MORE). And still haven't added RTF \line support yet.
991219	WORKING	LGP		Appears to work now - but still have not added \line RTF support. And still not 100% debugged. When I
						FAIL to hide the hidden characters - something funny is going on when I add the new char to the end of
						the buffer. I still don't fully understand this. BE SURE TO UNDERSTAND before shipping.
							Also - probably closely related SPR#0671.
991219	WORKING	LGP		Started adding support - so we'd trap this SHIFT_RETURN key sequence. Still must update word-wrapping code.
						And must update RTF code to hanlde / generate \line commands (empiricly - thats what MSWord seems to do).
991217	REPORT	m.pritt	m.pritt@epixtech.com reports Led should support SHIFT-RETURN as meaning "SOFT-LINE-BREAK". Try it in MSWord
		(0667)			to see what the behavior means.

991224	WORKING	LGP		Fixed on PC (now menu commands). But for Mac - not done (see spr#0683)
991224	WORKING	LGP		All done except part of docs (SPR#0681), and the menu commands to turn on/off. I'm not going to
						bother making the syntax tables extensible for right now (would be a LedLineIt! project - not
						really Led - and I'm not sure how valuable - wait til requested).
991221	REPORT	LGP		Add (nice) syntax coloring support to LedLineIt!. Add some way (registry?) to extend the table
		(0673)			of keywords. And ability to turn feature on/off. Already added the tutorial code into current
						LedLineIt! build. But instead - move it to decore. Maybe LOSE the tutorial? Or reword it
						so it fits with the classes being builtin to Led. Make the builtin classes more subclass friendly,
						etc. And be sure it works with MAC LedLineIt! as well.

991224	Fixed	LGP		Some time ago
990715	DEFER	LGP	
971223	REPORT	LGP		Remember prefs (like show toolbar/status bar) in prefs file in LedLineItMFC.
		(0502)			(See #0379)

991223	Fixed	LGP		He reported one bug, which I fixed. I think this is done.
991221	WORKING	LGP		Done. Sent him interum build. Unless I hear back otherwise - assume it worked.
991220	REPORT	LGP		Add AsBitmap () method to ActiveLedIt (OLEAUT) for Dr. Robert-Andreas Schöning [mailto:robert@a-line.de]
		(0672)

991223	Fixed	LGP			Web site updated.
991222	REPORT	LGP			Add http://www.abisource.com to my list of known competitors. I tried version 0.7.7 (991222).
		(0675)			It looked very interesting. But it was EXTREMELY buggy. I only tried the Win32 build.
						But it crashed so often that I was hard pressed to evaluate it. It maybe that alot of the problem
						had to do with RTF. I was testing it reading RTF docs. Reading the native format docs they provided
						seemed to work OK.
							Also - as constructed - more of a competitor with LedIt! than with Led class library - since its
						not really constructed as a re-usable library (though it probably could be adapted as such without too
						much effort).

991223	Change	LGP			Added Led_Win32_Helper<BASE_INTERACTOR>::SetDefaultWindowMargins () method - to automatically
		(0679)			provide window margin support (a little border around the Led 'WindowRect'). This had been manually
						implemented in LedItMFC. And I thought this might be handy elsewhere - and easy enuf to encapsulate
						here, so doesn't need to be cloned.

991223	Fixed	LGP			There was some extra code in TextImager::ComputeRelativePosition () and various overrides
						for handling eCursorByRow, and the special case of being at the end of the row. I couldn't understand
						why that code was there (perhaps it made sense in another context - like left/right arrows). Anyhow - when
						I got rid of the code, I saw no obvious regressions, and it fixed the problem with TA's cursoring.
991222	REPORT	LGP			LEC SPR#5009. In TA, SideBySide mode, type 1<CR>2<CR>3<CR>. Click in translation pane.
		(0677)			Try using the up and down arrows. They don't go the right distance. Right/Left Arrows OK.

991221	Fixed	LGP		As near as I can tell - this is all done. Just needs a little time for the code to sit around and
						get tested.
991220	WORKING	LGP		Got rid of all references to \n in MultiRowTextImager.cpp - except in new function overrides
						MultiRowTextImager::ContainsMappedDisplayCharacters/MultiRowTextImager::RemoveMappedDisplayCharacters.
						But those can easily be overriden in subclasses (and even those MAY not be necessary).
991219	REPORT	LGP		Cleanup '\n' code in MultiRowTextImager.cpp. Instread use new
		(0671)			ContainsMappedDisplayCharacters/ReplaceMappedDisplayCharacters () APIS

991221	Fixed	LGP		DONE - and added DEMO Partial UNICODE target as well.
991213	REPORT	LGP		Be sure to implement both the Partial and FULL UNICODE stuff for ActiveLedIt! (rename existing target and add
		(0655)			the other)

990721	CHANGE	LGP		Make a partial unicode version of ActiveLedIt!, and a DEBUG Partial UNICODE
						(and renamed old UNICODE target to conform to new convention). And updated
						the about boxes to day UNICODE or InternalUNICODE (for partial UNICODE) for
						all sample apps.

991219	CHANGE	LGP		Added new TextImager::ContainsMappedDisplayCharacters/ReplaceMappedDisplayCharacters () APIS.
		(0670)			This was initially done to facilitate fixing SPR#0667 (SOFT-RETURNS) - hiding those characters.
							But it occurred to me - this will be a very helpful feature for implementing things like
						SHOWING hidden characters (like tabs, spaces, etc) - SPR#0669.

991219	Change	LGP		<OLDCODENOTE>
		(0668)			Added shiftPressed, etc args to TextInteractor::OnTypedNormalCharacter () virtual function.
						This will cause exising programs which override this function to FAIL TO WORK!. Please update
						your overrides to take the right set of arguments.
						</OLDCODENOTE>
						This change was made to accomodate a fix to SPR#0667

991219	CHANGE	LGP		<OLDCODENOTE>
		(0666)			#if		qSupportLed23CompatAPI
							// Old name obsolete - was really identical. Left over vestige of when Led_Array existed, and differed from vector<T>
							#define	MarkersOfATypeMarkerSinkWithCompare	MarkersOfATypeMarkerSinkWithCompare2Vector
						#endif
						Similarly - lose StandardStyledTextImager::CollectAllStandardStyleMarkerInRange()/CollectAllStyleMarkersInRange()ifdefed for Led23Supp...
						</OLDCODENOTE>

991219	Fixed	LGP		StandardStyledTextImager::GetContinuousStyleInfo () must check sub/super scripts.
991218	WORKING	LGP		Only broken with SUBSCRIPT/SUPERSCRIPT - NOT BOLD...
991218	REPORT	LGP		Working on SPR#0663 - I noticed that menu checking code is broken (currently and in LedIt! 2.3MFC) - select a region with superscript and plain and
		(0665)			menu leaves Plain checked!

991218	Fixed	LGP		Fixed. Problem was FontCacheInfoUpdater::FontCacheInfoUpdater () caching code. Really affected SIZE of sub/superscripts. Was broken Win32 ONLY.
991218	REPORT	LGP		Working on SPR#0663 - I noticed that display of superscript is completely broken in LedIt! 2.3 (for Arial 12 at least - nothing shows)
		(0664)

991218	Fixed	LGP		Fixed, but see 0664, 0665
991217	WORKING	LGP		Did HTML READER/WRITER support (UNTESTED).
991217	REPORT	RobertS	Robert Scho(umlaut)ing called and was interested in ActiveLedIt!, but wanted
		(0663)			me to fix HTML reader (and I'll do writer) for SUB/SUP HTML tags.

991217	Close	LGP		Close. These are used in other places (StyledEmbeddingObjects)
991208	Report	LGP		When I break up StyledTextIO into separate modules, I will create one for the OLD Led (.led) file format. When
		(0646)			I do that - check that that is the only place still using the 'Led_USHORTToBuf' family of functions. If so, then
						move those from Led_Support into the .cpp file of that new module for that old file format.

991217	Change	LGP		break up StyledTextIO into separate modules cuz it was really huge - and it will likely grow alot
		(0662)			this release as I improve the RTF code, and maybe write new XML code.
						<OLDCODENOTE>
						StyledTextIO has been broken into many constutuent parts. Where you used to include
						StyledTextIO.h, you may need to include some of:
							#include	"StyledTextIO_HTML.h"
							#include	"StyledTextIO_LedNative.h"
							#include	"StyledTextIO_MIMETextEnriched.h"
							#include	"StyledTextIO_PlainText.h"
							#include	"StyledTextIO_RTF.h"
							#include	"StyledTextIO_STYLText.h"
						Similarly for include these .cpp files in your project file (if you are using those formats).
						Note - these includes are done automatically if you define qSupportLed23CompatAPI.
						</OLDCODENOTE>

991215	Fixed	LGP		Fixed
991215	REPORT	SSW		TrivialWordWrappedImager<> had hardwired WordWrappedTextImager in its body...
		(0661)


------------------- Released 3.0d2 991214 - Below ------------------------------

991214	Fixed	LGP		Fixed TrivialImager<> template to copy background color and font from the Tablet.
991130	WORKING	LGP		Party fixed. Added TextImager::EraseBackground_SolidHelper() to make some of the below code simpler/go away.
						Still must adapt TrivialImager - or variant - to use the background color from the DC as the one to
						erase with.
991129	REPORT	LGP		DO SOMETHING LIKE THIS IN LED:
		(0639)			class	TrivialImager_BetterBackground : public TrivialImager<IMAGER,TEXTSTORE>
						{
							public:
								TrivialImager_BetterBackground (Led_Tablet t, Led_Rect bounds, const Led_tString& initialText) :
									TrivialImager<IMAGER,TEXTSTORE> (t)
								{
									SetWindowRect (bounds);
									GetTextStore ().Replace (0, 0, initialText.c_str (), initialText.length ());
								//	fBackgroundColor = t->GetBkColor ();
									sBackgroundColor = ::GetBkColor (t->m_hDC);
								}
								override	void	GetLayoutMargins (MultiRowTextImager::RowReference row, Led_Coordinate* lhs, Led_Coordinate* rhs) const
								{
									Led_RequireNotNil (lhs);
									Led_RequireNotNil (rhs);
									Led_Ensure (GetWindowRect ().GetWidth () >= 1);
									*lhs = 0;
									*rhs = GetWindowRect ().GetWidth ();
								}
								override	Led_Distance	GetHeight () const
								{
									return GetHeightOfRows (0, GetRowCount ());
								}
								override	void	EraseBackground (Led_Tablet tablet, const Led_Rect& subsetToDraw, bool printing)
								{
									// Don't erase when printing - at least by default. Tends to screw up most print drivers.
									if (not printing) {
						//				Led_Color	eraseColor	=	Led_Color (fBackgroundColor);
										Led_Color	eraseColor	=	Led_Color (sBackgroundColor);
										Led_Rect	eraser		=	subsetToDraw;
										CBrush					backgroundBrush (eraseColor.GetOSRep ());
										Led_Win_Obj_Selector	pen (tablet, ::GetStockObject (NULL_PEN));
										Led_Win_Obj_Selector	brush (tablet, backgroundBrush);
										eraser.right++;	// lovely - windows doesn't count last pixel... See Docs for Rectangle() and rephrase!!!
										eraser.bottom++;
										tablet->Rectangle (CRect (AsRECT (eraser)));
									}
								}
							private:
						//		COLORREF	fBackgroundColor;
						};
						
991214	Fixed	LGP			This is now dramaticly faster. I'm not at all happy with the way I fixed it (at the very least - the fix
						needs more testing and cleaning up of names etc). See SPR#0660 to track that cleanup/revision. But I've tested
						now for 10 minutes and found no new problems, and it is dramaticly faster.
991214	WORKING	LGP			I first made a small change to TextInteractor::UpdateIfNoKeysPending () which helped a little. But
						not much. Just enuf to expose the SECOND problem which is what I had suspected all along. Its the code
						in MarkerCover<> - as used by the paragraphinfo database. Under these circumstnaces - it rechecks WAY
						too much text.
							I'm now looking into how that can be fixed (without breaking anything).
991214	REPORT	LGP			mrp@amlibs.com complained Led was too slow in DEBUG mode even in release mode - with a WordProcessor class
		(0659)			when you are typing. He said as a reference - try a 1MB file (typical text) - and try typing.
						Its very slow responding (> 1 second per character typed). Note - this ONLY applies to LedIt! - not LedLineIt!.

991130	CLOSE	LGP		I missed this bug before when I looked. Close now as DUP of 0658. See SPR#0657 for work done.
991130	Report	LGP		Implement Linux port of Led. This must include sample (simple for first release?) version
		(0641)			of LedIt! for Linux.

991214	CHANGE	LGP		Got new Linux machine setup. Using GCC. Created new project LedTestXWindows.
		(0657)			Did TRIVIAL makefile (that needs lots of work).
						But I did manage to get all the Led sources to COMPILE on the Linux box (had to add
						#defines to LedConfig.h etc and make lots of little changes)
						See SPR#0658 for next stage.

991214	CHANGE	LGP			mrp@amlibs.com complained Led was too slow in DEBUG mode. Sterl had complained of this before as well. Maybe others.
		(0656)			Added 'qHeavyDebugging' which defaults to OFF - but is turned ON in all my sample code. This turns off
						enuf stuff to make Led debug-mode editing pretty decent.
							Also updated the Led Recipe file to note this change / new feature.

991214	Fixed	LGP			Opened Case#SRX991213601271 with MSFT. After a couple days - I eventually got a bad kludge out of them.
						See qHookIMEEndCompositionMessageToWorkAroundWin2KIMEForNonUNICODEBug in the source code for more details.
						But it does seem to work.
991211	WORKING	LGP			Now works properly entering Japanese characters through the IME - for -D_UNICODE case.
						But still FAILS (on US mode Win2K). I always get "?" characters sent to my app - even
						when I hook WM_IME_CHAR messages. I sent them an email message - but I really must call Monday.
							I think I need to contact MSFT about this - and get thier tech support.
991211	REPORT	LGP		Fix UNICODE (partial/full) so we can type Japanese characters on NT5 (Win2K).
		(0653)			Right now - they come out as garbage (at least if US is your default region - if Japan
						is default region - they come out OK).
						
991209	Fixed	LGP		Fixed, but added spr#0654 to track doing even more of this.
991209	REPORT	LGP		LedItView::OnChooseFontCommand () should go into template I just created
		(0651)			(WordProcessorSelectionCommandHelper). And do something with more of the low hanging 'template' fruit.

991211	Fixed	LGP		I wasn't able to make it much faster. But a bit. Added qUseLRUCacheForRecentlyLookedUpMarkers, defaults to
						ON - ChunkedArrayTextStore. Got about a 20% speedup for this particular sequence.
							The real trick for amslibs.com is to write all the text in one big chunk. Write an FAQ about
						that 
991210	REPORT	mrp@am	mrp@amlibs.com complained 991210 - that doing about 10000 small appeds to a TextStore in Led (LedIt!)
		(0652)			takes almost 5 seconds (on 400 Mz PII). This should be at least 10 times faster. Look into speed tweeking
						this special case. As I told him - you can cache up appends (as I do in the file IO code). But this is a
						sufficiently common practice - appending like that - that I should try to make that special case as fast as
						I can. And maybe more - maybe anytime we can take advantage of special info to know we have an easy case for
						grabbing markers to notify (where is where most of time time goes - I think).

991209	Fixed	LGP		Got ALL (windows) apps building and mostly working with UNICODE (LedIt! LedLineIt! ActiveLedIt! and LedTestWin32).
						Opened new SPRs to deal with small remaining problems (SPR#0647,0648)
991208	WORKING	LGP		Got Led, LedLineIt, and ActiveLedIt! to compile with -DUNICODE. ActiveLedIt! even seems to work pretty
						well. More todo. But very close.
991208	NOTE	AMERILB	Got voice and email complaints about this not building when you define -DUNICODE or -D_UNICODE
						See if there is some trivial stuff I can do to get this mostly (or fully) working. Even if
						I must stub out implemenations iwth Led_Assert(false) here and there so I keep track of just
						what code still doesn't work (probably RTF FileIO).
990715	DEFER	LGP	
980427	REPORT	LGP		Fix few small problems with ActiveLedIt! compiling in UNICODE version (at least if really easy
		(0645)			- do the ones in LedSupport.h)

991208	Fixed	LGP		Fixed LedItPP. Now consider this basicly finished. Open new SPR#0644 to cover a few remaining things we
						may want todo.
						<OLDCODENOTE>
						People who have cloned LedItView from LedItMFC or LedItPP or whatever - may want to consider
						using the new templates WordProcessorSelectionCommandHelper etc. These can allow you to eliminate
						a lot of code which would have been cloned/copied from LedItView, and use a Led-maintained shared
						copy (and yet you still can customize your implementation of this stuff via overrides or explicit template
						instantation).
						</OLDCODENOTE>
991207	NOTE	LGP		Still TODO - do this for LedItPP. And save even MORE code in re-usable templates - ESP things like
						Cut/Copy/Paste and SelectAllCommand () should be done automatically (at least for MFC).
991207	WORKING	LGP		Revised ActiveLedIt! to also use this new template (similarly saved about 350 lines out of 1400).
991207	WORKING	LGP		Added new template WordProcessorSelectionCommandHelper<> based on code in LedItMFC/LedItView. Many other
						helper templates as well (including MFC specific version). Saved about 350 lines in LedItView.cpp (out of 1400).
990715	DEFER	LGP	
990715	REPORT	LGP		See spr#0601. Do more code sharing - moving stuff out of LedItView in LedItMFC - and into Led itslef
		(0606)			so we can reduce pointless duplication among the sample programs, and facilitate end-users clonging
						those apps and usaing that functionality.

9991207	REPORT	LGP		Fixed LedItMFC, LedLineItMFC, ActiveLedIt, LedTestWin32
9991207	REPORT	LGP		Got call from someone at "Ameritech Library Services" (customer). Complained of Led
		(0643)			Be sure LedIt! and other sample programs BUILD PROPERLY when installed on a directory with root dir not = SLASH.
						Change \Led\headers etc in dir includes to be .\Led\Headers etc.... Or something like that....
					
9991207	FIXED	LGP		I updated FAQ#17 to be clearer about qExtraWordWrapDebugging.
9991207	REPORT	LGP		Got call from someone at "Ameritech Library Services" (customer). Complained of Led
		(0642)			being too slow.


------------------- Released 3.0d1 991129 - Below ------------------------------

991129	Fixed	LGP
991129	Report	LGP		Add CutAndPaste and Open/Save support to LedTestWin32. That maybe all thats really needed for this release.
		(0635)			

991129	Fixed	LGP		Untested - but I did a first cut. Any problems I'll have to debug during my
						next release build.
991129	Report	LGP		Add LedTestWin32 to build scripts and to script for building Win32 release folder
		(0632)			

991129	Fixed	LGP		I was unable to reproduce the bug. But I have a guess what the problem is. I
						added a line to Led_Win32_Helper<BASE_INTERACTOR>::DidUpdateText_ (...) to pin
						the fDragAnchor value. That should help. Close this for now. Re-open if Remo says
						its still broken.
991126	Report	Remo	>-----Original Message-----
		(0637)			>From: Remo Eichenberger [mailto:remo.eichenberger@datos.ch]
						>Sent: Friday, November 26, 1999 2:44 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: I found another bug in LED 2.3 with fDragAnchor !!
						>
						>
						>hi Lewis
						>
						>i found another bug in Led 2.3 (Release) with the fDragAnchor in
						>"Led_MFC_Helper". But the problem is to explain you how can i reproduce
						>that. it's very complicated ! another problem is that our customer 
						>have trap
						>in this bug VERY OFTEN! I can only say that i load a file with 
						>short text in
						>it, so that the text not fill the full screen. the problem is that the
						>fDragAnchor is (when the mouse is captured) invalid on a OnTimer call. then
						>with this invalid positition OnTimer calls whiletrackingmouse... 
						>and then we
						>lookup a invalid position and CRASH !
						>I send you a patched Led_MFC.h (2.3 Release) that output te following text.
						>To reproduce the crash i can only say you should write text and quickly
						>click the mouse and dragging in the same time between clicks. i now it's
						>very complicated to understand what i mean. but i can say you i'm 
						>100 % sure
						>that THIS IS A BUG ! It's not a bug from me ... so its be worth while to
						>analyse this bug ...

991129	Fixed	LGP		Built project. Some libs don't load - but I think thats cuz I may not have full Win32
						subsystem installed on my Mac cross compiler? Or maybe wrong lib name? Anyhow - good enuf
						for now.
991129	Report	LGP		Be sure LedTestWin32 cross-compiles with MWERKS compiler on Mac (build .mcp project file)
		(0636)			

991129	Fixed	LGP		Added qPeekAtQuickDrawGlobals define. Defaults ON for 68K, and OFF for PPC (really
						should default ON for PPC - but OFF for building shared library - but I don't know how to check that yet).
991129	Report	LGP		See the qMarkVanOlmen ... flag - in code he sent me. Basicly - it means
		(0634)			get rid of ALL refrences to 'qd." in the code.
						Instead call GetPort and GetPen etc... So he can build "Shared Library? - or so he says". -
						LGP991128 (email from about a week ago).

991129	Fixed	LGP		The new templates Led_Win32_Helper<> and Led_Win32_SimpleWndProc_Helper<>
						are implemented, and working well. And the new sample application LedTestWin32 is implemented
						and usable. There are still a bunch of SPRs about small things to be fixed with these, but
						this can be closed (still open and related are: 0632, 0633).
991128	Working	LGP		<OLDCODENOTE>
						Led_MFC_Helper<> and therefore DoDeclare_Led_MFC_Helper_MessageMap now take a second
						argument. Pass 'TextInteractor' to be exactly compatable with Led 2.3 usage. Template uses
						default parameter - but no such thing for the Macro. This should only rarely have been used
						by Led users.
						</OLDCODENOTE>
991128	Working	LGP		LedTestWin32 now builds and displays "HelloWorld" - but no key handling etc yet. About 85%
						of the hard work done. And just alot of simple gorp yet to be moved from Led_MFC to Led_Win32_Helper.
991127	Working	LGP		New preliminary Led_Win32 support - REQUIRED for Led_MFC
						<OLDCODENOTE>
							For any project currently using Led_MFC - you must also add/include Led_Win32.
						</OLDCODENOTE>
991115	Working	LGP		All the below is now DONE.
						<OLDCODENOTE>
							Code that assumes Led_Tablet == CDC*, or that Led_Region == CRgn - for MFC - will now - mostly - fail to compile.
							Instead - there are operator HDC/HRGN methods to get the low level SDK handles, and from these you can
							do whatever calls you need to.
							Alternately - you can use Led_MFC_TabletFromCDC/Led_MFC_CDCFromTablet to create a CDC/Led_Tablet which you
							can use to access methods taking the other type of argument.
						</OLDCODENOTE>
						<OLDCODENOTE>
							Include new file LedGDI.h/cpp. Much of LedSupport (GDI) code moved there.
						</OLDCODENOTE>
						<OLDCODENOTE>
							Changed args to Led_IME to not support CWnd* - and instead use HWND (so easier to support non-MFC apps)
						</OLDCODENOTE>
							Led now has ALL use of MFC removed from it - except that which is in Led_MFC.h/cpp.
						This means it SHOULD now be pretty easy to build a plain Win32-based Led application (though missing
						lots of the features MFC helps with - like D&D, fancy menu stuff, dialogs, etc).
							One remaining thing todo - not ORIGINALLY part of this SPR/Request - is to add a DEMOAPP - which
						demonstrates Led building/running without MFC.
960430	DEFER
960215	DEFER
960215	Report	LGP		There is alot of code in Led marked as qWindows which is REALLY
		(0631)			MFC code. This should be only a few hours to rewrite using SDK calls
						directly, and we should do that (making OWL port easier).
						But we can live with the little lie til then.

991113	Fixed	LGP		
990908	REPORT	DGarret	>-----Original Message-----
		(0629)			>		From Dennis Garret -990908
						>P.S.  My prior comments do still hold true as follows:
						>
						>Also, I think I did find one problem in the code within
						>TrivialWordWrappedImager. WordProcessor::DrawSegments calls 
						>GetLayoutMargins
						>at line 924 as follows:
						>
						>	GetLayoutMargins (row, &lhsMargin, NULL);
						>
						>TrivialWordWrappedImager::GetLayoutMargins has the following code:
						>
						>	Led_RequireNotNil (lhs);
						>	Led_RequireNotNil (rhs);
						>	Led_Ensure (GetWindowRect ().GetWidth () >= 1);
						>	*lhs = 0;
						>	*rhs = GetWindowRect ().GetWidth ();
						>
						>The Led_RequireNotNil triggers because NULL is passed.  I changed this code
						>as shown below.  Just so I stay in sync... is this what you want?
						>
						>	// Led_RequireNotNil (lhs);
						>	// Led_RequireNotNil (rhs);
						>	Led_Ensure (GetWindowRect ().GetWidth () >= 1);
						>	if (lhs) *lhs = 0;
						>	if (rhs) *rhs = GetWindowRect ().GetWidth ();

991113	Fixed	LGP		Added "ScrollToSelection" method to ActiveLedIt! IDL
991022	REPORT	MHiggins>-----Original Message-----
		(0623)			>From: Michelle Higgins [mailto:michelle.quackenbush@provox.com]
						>Sent: Friday, October 22, 1999 4:04 PM
						>To: info-led@sophists.com
						>Subject: quick question about ActiveLedIt!
						>
						>
						>Hello,
						>
						>I am playing with the demo to see if it will suit our needs and 
						>there is one
						>critical thing I have not been able to make it do.  I'm using VB 6.  The
						>user does not type into the text box.  All text is placed into the text box
						>programmatically.  The problem is that if there is more text than will fit
						>in the box the vertical scroll bar appears, but the focus in the box does
						>not move to the end of the text.  In other words, if I put a long piece of
						>text in the box, the user will have to scroll through all of the 
						>text to see
						>the stuff at the bottom.  We are placing this text into the box as it comes
						>in from another control, one word at a time.  The user watches the words
						>come in to the box and we need to be able to show what is coming in without
						>needing to scroll down for each new word that comes in.
						>
						>Is there any way to do this with your control programmatically?


------------------- Released 2.3 990828 - Below ------------------------------

990828	Fixed	LGP
990827	Working	LGP		Maybe a FEW more touchups here todo. But this is basicly done. Make sure NEW licnece
						ends up in built LED packages - not just on web site!!!
990721	REPORT	LGP		The Led Licences are ALL WRONG and must be rewritten. One for commercial. Lose noncommercial.
		(0611)			And add new one for ActiveLedIt!

990828	CLOSE	LGP		Cannot reproduce. Simone saw this on early NT5 beta. Who knows? Anyhow - seems OK now when
						I test on NT5rc1.
990827	REPORT	Simone	Associate some random file suffix to a file type to LedLineIt!. Then double
						click in the explorer. The file not opened.

990828	Fixed	LGP		Fixed specific complaints - but didn't really re-review docs much.
990722	REPORT	LGP		Fix date on ClassLibReference (RunAutoDoc script). Pin to final Release date.
		(0614)			Also - look at autodocs on MarkerCover. This is important, and should be better
						documented. Perhaps docs lost cuz of bug with doc-templates?
						And doc string for Led_MFC/qScrollTextDuring... has '*' where it shouldn't.
						Generally proof-read and review these docs a bit.

990828	Fixed	LGP		Fixed DLL deps and version# and a few other very minor fixups.
990723	REPORT	LGP		At least minor touchups on LedIt! and LedLineIt! shareware app help files (at least chagne version# and
		(0618)			'required DLLs'

990828	CLOSE	LGP		Seems to be fixed in NT5(rc1). Assume this is OK. Don't worry about other OSs then...
990828	NOTE	LGP		find some way that works!  - shell exec?
990723	REPORT	LGP		Try a try/catch in ActiveLedIt! around call to launch docs - see if that fixes
		(0620)			trouble with crash in MSIE (old versions - and VB?/Access?) - perhaps call stack
						corrupt - not right args?

990828	Fixed	LGP		Re-review spr#0596. So much got folded into this, I left out part of the fix due to sloppy
						testing. When I re-reviewed the spr and support note on MSFTs web site (see earlier spr),
						and added back the swtich code (plus some small changes) in the PreTranslateMessage()
						this all started working again.
990722	REPORT	LGP		Arrow keys not working in ActiveLedIt when embedded in MSIE again. FIXIT DAMIT!
		(0616)			

990827	Fixed	LGP		Cuz a customer asked about this, I added it to the FAQ.
990721	DEFER	LGP
970817	NOTE	LGP		I'll either add this to LedIt!, or add an FAQ entry describing how todo
						it.
970811	REPORT	JoeW	At 6:13 PM 8/11/97, Joe Willcoxson wrote:
						>This is about the kind that show, so you can tell where your CR/LFs are in
						>the document.  Implementation was freakin' easy.  Override DrawRow and
						>replace the "\n" with the paragraph marker, then call the base class
						>version.  Well, I also had to add a flag to indicate when I should do it
						>and some UI junk, but still, it was simple.

990827	Fixed	LGP
990825	REPORT	Hordur	>From: Hörður Þórðarson [mailto:hordur@lausn.is]
		(0621)			>Sent: Wednesday, August 25, 1999 6:24 AM
						>To: Lewis Pringle
						>Subject: LED html bug
						>
						>
						>Lewis,
						>
						>I think I've stumbled on a bug in led's parsing of html.  Check out the 
						>following code:
						>
						><html>
						><body>
						>stuff <b>and</b>
						>more stuff
						></body>
						></html>
						>
						>When displayed in LedIt (and my Led Director Xtra) it looks like this:
						>
						>stuff andmore stuff
						>
						>Notice the lack of a space between "and" and "more".


------------------- Released 2.3c2 990722 - Below ------------------------------

990722	CHANGE	LGP		Implement new scripts to create new Mac/Win/MacWinTarget directories

990721	CLOSE	LGP		Will be revising/revamping whole web based download system. Not part of release process however.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970315	REPORT	LGP		Update Ledsrc download page to incorporate questions
						about how users found out about Led.

990721	Fixed	LGP		Not only is this done, but I've created a new file - 'Led_Release_Candidate_Procedure.txt'
						to keep track of these sorts of things for following releases.
990721	Working	LGP		Tested LedItMFC and LedLineItMFC against FAQ for upgrading 2.2 to 2.3.
990720	Working	LGP		Almost through fixing the FAQ. Rebuilt LedLineIt! 2.2 using Led 2.3 (and made lots
						of qLed22Compat flag fixes to make this easy). Just finish FAQ, and testing LedItMFC 2.2
						with Led 2.3.
990719	Working	LGP		Reviewed ALL Tutorials. Reviewed almost all the FAQs. But still a little more there. Still
						have NOT tried building Led with backward compat switch, nor old 2.2 sample apps.
990503	REPORT	LGP		Test ALL tutorials, and take Led 2.2 sample apps and try to get them working with 2.3 lib
						and write a FAQ/Tutorial entry on what was involved in the conversion.

990721	Fixed	LGP		Added to the new document 'Led_Release_Candidate_Procedure.txt'.
970911	REPORT	LGP		Be sure to include old builds on the CD

990721	Fixed	LGP
980427	REPORT	LGP		Add description of UNICODE support to FAQ

990719	CLOSE	LGP		Did documentation in FAQ, and added new spr#s 0607 and 0609 to cover later implementation
970817	NOTE	LGP		Thanx for this feedback. I'll either add this to my next release
						of LedIt!, or I'll document how-to in the FAQ.
        					And, I'll fix the bit about passing along the Led_Tablet for my next
        				Led release. That would make perfect sense on the mac as well. And besides,
        				I care considerably less about the Mac nowadays. I still support it. But
        				I don't consider it of any commercial value. Windows is obviously the only
        				platform remaining of comercial signficicance.
970813	REPORT	JoeW	At 6:23 PM 8/13/97, Joe Willcoxson wrote:
		(0477)			>Lewis,
						>
						>Your suggestion for page breaks worked fairly easily.  I did derive a new
						>embedding marker.  When displaying on screen, I made its height small.
						>When printing, I made it the height of SytledTextImager::GetWindowRect().
						>I had to do some hacking to the new marker class to make it work.
						>Basically, I made it a friend of LedItView and then I monitor the
						>fPrintInfo member to see if printing is occuring.  
						>
						>Usually, if you want to know how big an element should render on a device,
						>you pass it a device context--which in Led is a Led_Tablet.  You don't pass
						>one of these in the calls to measure the height and width of an embedding.
						>I know you're interested in Mac stuff, but simply for MFC, I could have
						>called tablet->IsPrinting() to determine if printing was occuring instead
						>of doing nasty dynamic typecasts and hacking to see if the view was
						>printing.  Just my .02.
						>
						>Well, I also had to add \page handlers for the RTF stuff.

990719	CLOSE	LGP		Did documentation in FAQ, and added new spr#s 0607 and 0609 to cover later implementation
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970718	NOTE	LGP			I think your right on target. Only I think what you described should
						turn out to be pretty easy.
        					Also, it probably shouldn't be a plain MARKER. Instead, make it an
        				EMBEDDING. And make it short, but really wide. This way, it will display
        				(like in MSWord) as a gray selectable object which people can easily remove,
        				copy, paste, etc.
							Then - as you say, pay attention to these objects in your printing code.
						You might even get away with chaning their measureSegmentHeight () method to
						return a small answer when drawing to the screen, and a BIG answer when
						printing (or print preview). That way, it might all come for free.
970717	REPORT	JoeWill	At 7:08 PM 7/17/97, Joe Willcoxson wrote:
		(0465)			>2. hard coded page breaks
						>
						>
						>For paragraph markers, it might not be too hard to figure out if a "row" is
						>the last "row" in a "line" and draw the little symbol at the end.  
						>
						>However, for hard coded page breaks it might be a little harder.  I would
						>have to have a special marker type and then during printout and print
						>preview, end the printing of that page when I hit that special marker.

990715	Fixed			Note only did I fix this, but doing so made clear another bug. We were't properly updating the
						enable status and thumbsize of the h scrollbar. It turns out, this code was being done
						manually in LedItMFC\LedItView. So I pulled alot of that code out into a common template
						(WordProcessorHScrollbarHelper). And then used that template in ActiveLedIt. Note - there
						is alot more code duplicated between the LedItVew in LedItMFC and then one in ActiveLedIt.
						That should be someday (soon) cleaned up and shared - probably through templates (see spr#606).
990628	REPORT	LGP		Change HasVert/Horz SBar property to INT (from BOOL) so we can support the 'autoshow' property.
		(0601)			Maybe use ENUM, if I can figure out how.

990715	Fixed			CASE_ID_NUM: SRX990624601196
						MESSAGE: 
						********************** The message for you follows
						************************
						Hello, Lewis,
							Good news. The shortcut key combinations work as you'd expect in Word
						2000. Word hooks the keyboard and manages every keystroke. It had some
						problems passing the keystrokes through to the object in focus in
						earlier versions of Word.  Those problems were addressed in the current
						version. The modifications apparantly were right on target for your
						issue.
							Please assure your customers that Microsoft was alerted to the problem
						and corrected it. If your customers were to normally use your control on
						Word 97 and earlier documents you might need a workaround. However, in
						our first telephone conversation you discussed the problem, and I
						summarized the issue saying the following (in the case notes):
990629	WORKING			They said they will refer me to another group inside of MSFT to handle the MS_Word specific issue.
						I will need to wait a few days to hear back from them on that point.
990628	WORKING			Maybe STILL a problem. DEL key works OK, but CMD-Keys (copy etc) don't work when embedded in
						MSWord97 (pretranslatemessage never called).
990628	WORKING	LGP		I sent mail to MSFT asking about whether I should do this change of UIActive stuff in OnSetFocus. Pending
						that response, I can close this spr.
990626	WORKING			Sent mail to MSFT complaining about what still wrong. And went away. And came back and tried again.
						And now seems to be working PERFECTLY? Not sure what happened. Wait a bit. See if problem comes up
						again, and maybe I can debug/see what changed. Anyhow - good for now...
990625	WORKING			Microsoft refers me to <http://support.microsoft.com/support/kb/articles/q168/7/77.asp>. This HELPS
						(fixes backpace and arrow problems). But doesn't fix CMD-X problems.
990624	WORKING			Contact Microsoft. Open case# SRX990624601196.
990623	REPORT	LGP	 	ActiveLedIt! - When embedded in MSIE, and you hit the backspace key, it navigates pages. This makes it
		(0596)			VERY hard to use. Also - CMD-X / CMD-C keyboard shortcuts don't work.
						Try using Microsoft support to fix this!

990716	Fixed			I now have a real digital certificate for SophistSolutions. And the signing seems to work
						(except for some warning about timestamping - maybe more bells and whistles could be thrown
						in here, but good enuf for release).
990629	WORKING			Mostly done! Got the code signing process all working. All I need now is the official PVK/CERT files
						from some CA (Certificate Authority). Working on that now. But will probably release it as-is, for now.
990629	NOTE			See spr#0455
990629	WORKING			Tried what they sent. Not nearly enuf. Replied and waiting for more.
990628	NOTE			Got email from MSFT on this case#, and will try to apply their recomendations tomorrow.
990624	WORKING			Contact Microsoft. Open case# SRX990624601163.
990624	WORKING			Changed makefiles so always build with NO DLLS (staticly link MFC). Wasn't possible, I bleive on earlier
						MSVC releases?
990331	REPORT	LGP		Assure .inf file is done properly for ActiveLedit! - using JUST the two DLLs we require (not teh old wones
		(0603)			from earlier MSVC versions).

990629	NOTE			See spr#0603
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970626	REPORT	LGP		Consider using CAB file for distributing ActiveLedIt!, so its smaller.
		(0455)			And consider getting code-signing working. All the above is deferable for
						2.2.

990713	Fixed			They made lots of changes, so this was more of a pain than I expected. But now works.
990614	NOTE	LGP		Waiting for new MWERKS CW5 - due real soon now...
990503	WORKING	LGP		Couldn't yet add UAppearance.cpp, nor WindowsLib since they are not part of
						CWPro4. When CWPro5 comes out, I will add them.
990428	REPORT	PArchib	>From: PArchibald [mailto:parchiba@intellitools.com]
		(0577)			>Sent: Thursday, April 29, 1999 8:27 PM
						>To: lewis@sophists.com
						>Subject: beta 9 looking good!
						...
						>I just got down beta9, and want to report something while it is fresh in my
						>mind. I am using the newest PowerPlant 1.9.3 with Universal 
						>headers 3.2, and the
						>LedIt! sample does not link as is. The fix is very minor, just adding a few
						>files. One is UAppearance.cpp from the Utilities folder, and the other is
						>WindowsLib from MacOS Support/Libraries/MacOS Common. These are 
						>changes brought
						>about by updating to the newest compiler/linker from Metrowerks. 
						>Check out the
						>attached file, which comes with PPlant 1.9.3 and describes the 
						>dependencies of

990712	Fixed			Char arg to Led_MFC_Helper<MFC_BASE_CLASS>::HandledMByteCharTyping () SB unsigned char.
990712	NOTE			Only happens in LEC products, NOT in LedIt! etc. Big hint! UNICODE!
990712	REPORT	LGP		LEC reported that typing Spanish characters in QT, and TA produced garbage.
		(0605)			To reproduce on a US system, hold down the ALT key, while pressing these
						numbers (on the keypad)
						á	-	160
						é	-	130
						í	-	161
						ó	-	162
						ú	-	163
						ñ	-	164/5
						ü	-	129
						¿	-	168
						
990702	Fixed			See TextInteractor::InteractiveReplaceEarlyPostReplaceHook, and
						StandardStyledTextInteractor::InteractiveReplaceEarlyPostReplaceHook. Had todo (slighly tricky and worrysome)
						re-org of flow of code here to make this work.
990701	WORKING	LGP		Largely understood. When you first type a character in a new buffer, the font setting is garbage.
						It is StandardStyledTextInteractor::InteractiveReplace_ () which sets the font to the fEmptySelFont.
						But unfortunately, the code that does the EXTERNALIZE for UNDO purposes happens FIRST.
							NOTE: the bug is NOT that the font is initially garbage (empty). Thats OK, since there is no
						text at that point anyhow. No harm. Fixing THAT font wouldnt help anyhow. Cuz when the user changed
						the font/size or whatever, and typed a single char, and then said undo, that last font change would be
						lost. So the problem which must be fixed is this ordering issue.
990701	REPORT	LGP		Type in a few lines of text in either ActiveLedIt! or LedIt!. UNDO. Then REDO. You will
		(0604)			see the first character of the redo-inserted text has a bogus font setting. This bug does
						NOT seem to appear VISIBLY under NT, but does happen under Win98. But only cuz
						of the default font choice under NT. By selecting the first char of text, you can see
						it has a bogus font name - even under NT.


------------------- Released 2.3c1 990630 - Below ------------------------------

990629	Fixed	LGP		Fixed to handle UNICODE a while back. Probably will NEVER do anything about mutlibyte strings there.
960430	DEFER			Reviewed
960430	DEFER
951105	REPORT	LGP		Whole StyledTextImager module must be done to take into account
						multibyte text strings!

990629	Fixed	LGP		Must adjust RHS of rectangles for LHS margin as well in WordProcessor.cpp
990628	REPORT	LGP		In LedIt, open ReadMe.rtf, and select a word which is indented for some reason.
		(0600)			Then try to drag that word. Nothing hapens. Drags elsewhere work. Trouble must be code
						which computes bounding region for text doesn't support the indent changes yet!

990628	Fixed	LGP
961205	DEFER	LGP		Defer, and probably do in Led 2.2.
961031	REPORT	LGP		Fix PC LedIt! "oringal filename" in PC VERSION resource.
		(0602)			(activPad's too)

990628	Fixed	LGP		Actually - I had only 95% fixed it. It needed further cleanups/fixes, like getting rid of duplicative
						GetUpdateOurselvesMode (), and subtly NOT resetting the fNeedExtraUpdateCheck flag in
						MarkerCover<MARKER,MARKERINFO,INCREMENTALMARKERINFO>::HandleCallBeforeDidUpdateComplete () cuz we COULD get
						our flag set TRUE in an early AboutToUpdate and then as a side-effect of a later AboutToUpdate, the flag could get
						cleared (cuz someone called GetInfo). If someone calls GetInfo in that context - we must refresh the cache, but
						NOT mark it clean, cuz then when the REAL update takes place, we may not then refresh the cache.
990628	Fixed	LGP		The trouble was that the order of MarkerOwner::DidUpdateText's for the many marker owners can be
						sometimes un-fortuitious, for the MarkerCover<> code. I made that code more rebust in dealing with
						when it gets called for a GetInfo() (etc) call, after an AboutToUpdate () but before the
						'DidUpdateText' has been handled by it. Also - neatened/documented the sematics (ordering) of
						TextStore::DoDidUpdateCalls ().
990628	REPORT	LGP		In LedIt, open ReadMe.rtf. Select some word. Cut. Paste it elsewhere. Then do a NEW-DOC command.
		(0599)			Assert in MarkerCover<MARKER,MARKERINFO,INCREMENTALMARKERINFO>::Invariant_ () (for paragraph info).

990628	Fixed	LGP		Fixed a while back. Did with templates.
960530	DEFER	LGP		
960530	REPORT	LGP		Should (MAYBE) break up Led_MFC into two modules, one subclassing
						from CWnd? And one from CView? Or maybe just break out all the OLE
						crap? Right now, its a big module, and we could find some ways
						to break some stuff out.

990628	Fixed	LGP		Fixed a while back. Did with templates.
960430	DEFER			Reviewed
950603	DEFER	LGP
950603	REPORT	LGP		Allow building Led for either CWnd or CView under MFC. Either use
		(0314)			#define, or maybe build as virtual subclass of CWnd. Can we then
						mixin with CView which is nonvirtual subclass of CWnd? Unsure!
						I've never tried this! And must readup on docs? And test!
						Maybe similar concern on Mac? Not use CAbstractText?

990628	Fixed	LGP		Fixed a while back.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970613	NOTE	LGP		See SPR#0433,432
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
961029	REPORT	LGP		Led_Array etc, and switch entirely to using STL directly. This may
		(0431)			have to wait til we get rid of qLedFirstIndex/SPR#0273 first?
						Maybe just back-end Led_Array using STL?

990628	Fixed	LGP		Fixed a while back.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970613	NOTE	LGP		See SPR#0433,432
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
961029	REPORT	LGP		Led_Array etc, and switch entirely to using STL directly. This may
		(0431)			have to wait til we get rid of qLedFirstIndex/SPR#0273 first?
						Maybe just back-end Led_Array using STL?

990628	Fixed	LGP		Fixed a while back.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970709	NOTE	LGP		See SPR#0458. Converted Led_Array to use STL vector internally.
						But due to compiler/STL bugs, conversion not complete and won't be further pursued
						til things improve.
970613	NOTE	LGP		See SPR#0432,431
970119	REPORT	LGP		Convert a bit to using STL. Lose - if possible - Led_Array etc,
		(0433)			and start using list<>/vector<>/etc.
						First send email to beta users and be sure OK to only support
						CW10/later and MSVC42 and later.

990628	Fixed	LGP		Serarched for all const_casts< and ones that can be avoided by mutable were fixed.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970613	REPORT	LGP		Use new mutable keyword in order to get rid of alot of cases of
		(0598)			const_cast<>. I believe support for mutable is new to MSVC50 and
						CW12. So wait til we drop MSVC42 and CW11 support todo this (Led 2.3?).

990628	Fixed	LGP		Did the rest of the events implementation, and tested well in ActiveX Test container applet.
990626	WORKING	LGP		Mostly working now. I have the infrastructure in place. I've added the IDL, copied largely from
						the MS RichText control's API (mostly just stock events). And I've implemend CHANGE and SELCHANGE.
						The others SHOULD be handled automatically by COleControl, but cannot be since my real guts are in
						a separate control (window - LedItView). And though I've tried to merge them, a compiler bug has
						prevented me (I'm following up with MSFT on that bug - SRX990625602291). In the meantime, I'm just cloning
						some of the fire-event logic into my own LedItView guy, and that should do the trick.
980310	REPORT	JackNic	(ActiveLedIt!)
		(0528)			> From: Jack Nichols [mailto:jackn@nwlink.com]
						> 3.  There are no events to indicate when a key has been pressed, mouse
						> clicked, etc.  This especially is vital information to my potential use, as
						> I will need to know the moment a key is pressed as well as what key that is.

990625	NOTABUG	LGP		MSWord 97 behaves this way as well. So does LedIt!. Caret size based on prev char eight.
980310	REPORT	JackNic	> From: Jack Nichols [mailto:jackn@nwlink.com]
		(0527)			> 2.  When setting SelFontSize from code, the caret's height remains as if the
						> height were still 12 pt.  For example, set the font size to 10 via code and
						> notice the height of the cursor before and after you press a key.  This goes
						> away once typing, but comes back when the caret is at the beginning of the
						> document.

990625	Fixed	LGP		add 'MaximumInputLength property to control. Most of this was trivial. We do a throw
						from AboutToUpdateText() method if too much text entered. Easy. But the trick is that for an OCX -
						there is no top level catcher to handle these excptions. They go unhandled. To address this,
						the Led_MFC_ExceptionHandlerHelper<> template as added.
980625	REPORT	FLaurnt	Have a property which is max# of characters typed in
		(0595)			in ActiveLedIt!

990624	Fixed			Trouble was the VBScript itself, cuz these routines return 0,1,2, and the VB not function didn't work as desired(C++)
						on those values, so use if test instead.
990623	REPORT	LGP	 	ActiveLedIt! - SelBold/then UNSEL Bold doesn't seem to work right on a selection of text (same with underline).
		(0594)

990623	Fixed			Added IDL command to select which mode
990310	REPORT	LGP	 	Fix ActiveLedIt! to either support BOTH wrap-to-screen and wrap-to-ruler, or at least
		(0593)			JUST wrap-to-screen for now. Now it wraps to ruler, which is bad, since you cannot even see
						the ruler, and this is infrequeltny what you want with this control.

990623	Fixed			use new Led_MFC API
980310	REPORT	JackNic	(ActiveLedIt!)
		(0529)			> From: Jack Nichols [mailto:jackn@nwlink.com]
						> 5.  Setting HasHorizontalScrollbar to true, running the program, and
						> returning finds HasHorizontalScrollbar set to false.  This also occurs with
						> all other properties.  This may be a VB specific issue; I don't know.

990616	Fixed	LGP		According to HTML 4.0 spec, these are now deprecated, but should be treated just
						as a UL, when encountered. 
980925	REPORT	Hordur	>Along the same lines, I noticed in your HTML reader that you don't handle 
		(0592)			>the <DIR></DIR> tags.  Any chance of that being added soon or would it be 
						>easy for me to add ?

990616	Fixed	LGP		There was a bug in StyledTextIOReader_HTML::ScanTilAfterHTMLThingy which prevented
						it from finding entity refs that were alphanumeric, and contianed a # sign. I've fixed
						that. As for the rest - I'm not sure its going todo what you want. Nor am I sure it
						should. MSIE5 seems to largely ingore (treat as whitespace) the &#9. So does Led.
980925	REPORT	Hordur	>-----Original Message-----
		(0591)			>From: hordur [mailto:hordur@gagarin.is]
						>Sent: Friday, September 25, 1998 10:34 AM
						...
						>I am trying to make LED recognise the tab html token (&#9;) when reading 
						>html files (as explained in my last email to you) and for the moment have 
						>decided to subclass HTMLInfo, added some virtual methods to HTMLInfo that 
						>return the entity mappings and then overrode those methods in my subclass 
						>of HTMLInfo.  I also modified StyledTextIOReader_HTML and 
						>StyledTextIOWriter_HTML to use the new virtual methods of HTMLInfo 
						>instead of referring directly to the static members of the class.
						>
						>But even if my entity map is set to map "#9" to 0x09, LED seems to draw a 
						>space instead of a tab when reading a .html file containing the &#9; tag. 
						> Hitting the tab key in the same LED field works fine, and writing that 
						>out as .html writes a &#9; correctly.  Any ideas as to why this is not 
						>working for me ?

990616	Fixed	LGP		Fixed. Dont create StandardURLStyleMarker directly - but vector lookup through the EmbeddedObjectCrea...
						for HTML files (was aleready doing that for other types).
980904	REPORT	Hordur	>-----Original Message-----
		(0590)			>From: hordur [mailto:hordur@gagarin.is]
						>Sent: Friday, September 04, 1998 10:07 AM
						>To: LED
						...
						>I am reading/displaying HTML docs with LED and I wanted to override the 
						>StandardURLStyleMarker used to display URLs.  I copied the code from 
						>EmbeddedObjectCreatorRegistry::AddStandardTypes into an initialization 
						>routine of mine and modified it to do the following:
						>
						>     emb.AddAssoc (LEDXtraUrlMarker::kURLDClipFormat, 
						>LEDXtraUrlMarker::kEmbeddingTag,
						>                              LEDXtraUrlMarker::mk, LEDXtraUrlMarker::mk);
						>     #if		qWindows
						>          emb.AddAssoc (LEDXtraUrlMarker::kWin32URLClipFormat, 
						>LEDXtraUrlMarker::kEmbeddingTag, 
						>                                   LEDXtraUrlMarker::mk, 
						>LEDXtraUrlMarker::mk);
						>     #endif
						>
						>LEDXtraUrlMarker subclasses StandardURLStyleMarker and overrides the 
						>drawing and measuring methods in order to draw something other than the 
						>default URL marker.
						>
						>However, this doesn't work since 
						>StyledTextIOReader_HTML::HandleHTMLThingyTag_a instantiates 
						>StandardURLStyleMarker directly.
						>
						>So, do I need to subclass the html reader as well ?  If so, then what is 
						>the purpose of the EmbeddedObjectCreatorRegistry associations ?

990616	Fixed	LGP		Fixed (see http://msdn.microsoft.com/workshop/components/com/IObjectSafetyExtensions.asp).
990510	NOTE	LGP		I read stuff on a web page I printed out. Basicly use catalog manager to say safe for init and
						safe for scripting. AND/OR support IObjectSafety interface.
990331	REPORT	LGP		Fix ActiveLedIt! signing problem. As is, it cannot be scripted under MSIE5 (so far as I can tell)
		(0589)			without being signed.

990616	Fixed	LGP		Fixed. Now there are virtual StyledTextIOReader/Writer_HTML::GetEntityRefMapTable () to
						override.
980924	REPORT	Hordur		I need to override the HTMLInfo::sEntityRefMapTable struct which the 
		(0588)			StyledTextIOReader_HTML uses in order to add some enitity mappings.  I am 
						using my own subclass of StyledTextIOReader_HTML and was planning to 
						subclass the HTMLInfo class as well but that won't work since 
						StyledTextIOReader_HTML references some static members of HTMLInfo 
						directly rather.
						
						I see only 2 ways to do this, neither of which is good:  Modify the 
						HTMLInfo class in the LED source I'm using or overriding and copying the 
						code of all the methods in StyledTextIOReader_HTML which access HTMLInfo 
						static members.
						
						Is there a better way of doing this ?

990614	Fixed	LGP		Fixed. still kludgely but now works a little better
980929	REPORT	Hordur	I have some more details on the problem where the HTML reader puts spaces 
		(0586)			in front of each line read from a html file.  This file:
						<HTML><Head></Head><Body><font face=Geneva 
						size=4>1<br>2<br>3</BODY></HTML>
						is read correctly.  This file however:
						<HTML>
						<Head>
						</Head>
						<Body>
						<font face=Geneva size=4>
						1
						<br>
						2
						<br>
						3
						</BODY>
						</HTML>
							results in a file with 5 spaces in front of the "1", 1 space in front of 
						the "2" and 1 space in front of the "3".  So, every paragraph break in 
						the file (\r or \n) seems to generate an extra space character in front 
						of the line following the break.
							It would be good if you could fix this since this makes .html files with 
						heavy formatting look all wrong.

990614	Fixed	LGP		Fixed
						As I commented in email, I cannot tell if the OLE library is loaded. Instead, I broke out the D&D support
						into a separate, mixinable template. You can simply leave this template out if you don't want D&D support.
981114	REPORT	Remo	>-----Original Message-----
		(0585)			>From: Remo Eichenberger [mailto:reeichenberger@access.ch]
						>Sent: Saturday, November 14, 1998 8:50 AM
						>To: Lewis Gordon Pringle
						>Subject: Idea to simplifying Led ...
						...
						>i have try to create a absolutly simple LED-Editor.
						>
						>1) Create MFC-Project
						>2) Derive View from Led_MFC_X<SimpleTextInteractor>
						...
						>i can't create the view WITHOUT initialized OLE-Libraries with AfxOleInit. The Problem is the COleDropTarget (fDropTarget) in your Led_MFC.
						>Could you initialize this only when the OLE-Libraries are initialized ?

990614	Fixed	LGP		Fixed
990517	REPORT	Remo	>-----Original Message-----
		(0584)			>From: remo.eichenberger@datos.ch [mailto:remo.eichenberger@datos.ch]
						...
						>could you please support searchTo ? (searchTo != eUseSearchParameters). We
						>must change this on every release ... :-)
						>
						>size_t TextStore::Find (const SearchParameters& params, size_t searchFrom,
						>size_t searchTo)
						...

990614	Fixed	LGP		Not really. But this can confuse memleak detectors. So I've added a hack
						(like the one for Led_IME) to cleanup this memory at exit.
990520	REPORT	Remo	>Do you have a memoryleak at: ?
		(0583)			>
						>  inline Led_GDIGlobals& Led_GDIGlobals::Get ()
						>   {
						>    if (sThe == NULL) {
						>     sThe = new Led_GDIGlobals ();
						>    }
						>    return *sThe;
						>   }

990614	Fixed
990609	REPORT	SSW		Currently, it is difficult to support tabbing between Led views if they
		(0581)			want to be multiline. This is largely due to Microsoft's really brain
						damaged desing for GetDlgCode. There is no way to get enter keys but not
						get tab keys. My workaround was to get all keys, and then process tab keys
						by calling GetParent ()->SendMessage (WM_NEXTDLGCTL, 0, 0). This is
						obviously not quite right in general, because the view's parent may not be
						the appropriate recipient. But something along these lines, perhaps in its
						own virtual function, should be invoked if a tab is gotten in an edit view
						with the WS_TABSTOP style.

990614	Fixed
990609	REPORT	LGP		Led_MFC_Helper methods OnChar and OnKeyDown () should NOT be virtual/override. They
		(0582)			should just use MESSAGEMAP code.
						<OLDCODENOTE>
						NOTE - any programs that subclassed Led_MFC and overrode these without adding the
						appropriate message map entries will BREAK. To fix - add message map entries.
						</OLDCODENOTE>

990614	Fixed
990609	REPORT	SSW		Led_MFC_Helper changes the way it draws if it readonly or disabled.
		(0580)			Unfortunately, it does not hook into the EnableWIndow call to call
						Invalidate.

990614	Fixed
990518	REPORT	SSW		Led does not send EN_CHANGE messages when processing a delete key. The
		(0579)			delete key never gets sent as a WM_CHAR so it is handled in the OnKeyDown
						call, but the SendMessage of EN_CHANGE is never made. I added a new bug
						flag in EditText_Led to work around this problem.
						#if qLedDoesNotReportDeleteKeyTextChange
						void	EditText_Led::OnKeyDown (UINT nChar, UINT nRepCnt, UINT nFlags)
						{
							inherited::OnKeyDown (nChar, nRepCnt, nFlags);
							#if		qSupportWindowsSDKCallbacks
								if (nChar == VK_DELETE) {
									(void)::SendMessage (::GetParent (m_hWnd), WM_COMMAND, MAKELONG(::GetWindowLong (m_hWnd, GWL_ID), EN_CHANGE), (LPARAM)m_hWnd);
								}
							#endif
						}
						#endif


------------------- Released 2.3b10 990503 - Below ------------------------------

990503	FIXED	LGP
990302	REPORT	LGP		add CF_NOVERTFOTNS to LED CFOngDIalog in pc apps

990503	FIXED	LGP		TextInteractor::DoSingleCharCursorEdit () should not assume so much about what InteractiveReplace() does
						in deleting characters. Don't assume WE know how to (or need to) adjust the selection in the delete case).
990503	REPORT	DAN@lec	Assure SmartCutAndPaste is ON.
		(0576)			In an empty LedIt! document - Type "I  I".
						Hit the backspace key. Assertion error.
						(Actually - what Dan reported is much more complicated, but this is my eventually distilled version).


------------------- Released 2.3b9 990428 - Below ------------------------------

990428	Fixed	LGP		Fixed. Also fixed strikeout support for RTF.
980625	REPORT	FLaurnt	HTML filter should support UNDERLINE and STRIKEOUT.

990415	NOREPRO	LGP		I'm not sure why I thought it didn't work that way. It does now. Perhaps I already
						fixed this? Anyhow - right now - it seems the word "Jim's" is treated as atomic, and
						is not broken by the line-break code.
980424	REPORT	LGP		Led's FindLineBreak() routine must take into account apostrophe. "Jim's" can get
		(0540)			broken after the "'" - but it should be treated as part of the word Jim.
						Use the OtherCLASS stuff to map it back to word-class.

990415	Fixed	LGP		A few more minor tweeks in TextInteractor::OptionallyExpandSelectionForSmartCutAndPasteModeDeletes ().
						Also fixed another couple related minor bugs with SmartCutAndPaste, via adding extra default arg to
						TextInteractor::PreInteractiveUndoHelper ().
980724	REPORT	LEC		LECSPR#3813 - Edit/Clear includes next space.
		(0570)			Enter text "Thisbe is test.". Select "be", and and Edit/Clear.
						Result is "Thisis test.". When smart cut and paste is on.

990401	Fixed	LGP		Many changes to TextInteractor::OptionallyAddExtraSpaceForSmartCutAndPasteModeAdds and
						lose ispunct call in IsShouldBeSepWithWhitespaceWordChar.
990331	REPORT	LGP		One more bug with SmartCutAndPaste. Still true in LedLineIt with smart custand paste
						on that pasting a single line of text causes an extra spurrious space to be inserted.

990401	Fixed	LGP		Trick for ME to reproduce this was to set the double-click time to very LONG.
							Trouble is on a TRIPLE-CLICK, MSWindows will send you a click/double click events
						and then a WM_CHAR, and then another click close enuf together that Led_MFC interprets it
						as a triple click. And it assumes between clicks the text never changes.
							My fix was to overide DidUpdateText() and set the click count back to zero if the
						text ever changes during clicks.
990401	REPORT	Remo	In LedLineIt
		(0569)			1. Type Text
						2. Position the mousecursor to the position of the arrow.
						3. Press 2x the LEFT Mousebutton (DON'T MOVE THE MOUSE !)
						4. Press the 'd'-Key to replace your Text with 'd' (DON'T MOVE THE MOUSE !)
						5. Click 1x the LEFT Mousebutton
						6. NOW, here is the Assertion !
						please don't wait longer then ¼ seconds between 3,4,5 !


------------------- Released 2.3b8 990331 - Below ------------------------------

990331	Change	LGP	 	AND MUCH MORE, now only covered in the cvs logs (appear in each .h/cpp file)

990331	Fixed			None of these DLLs are needed for LedIt! and LedLineIt! (just standard MS system DLLs).
						The only ones which are MSDEV dependent and are required are:
							MSVCRT.dll
							MSVCP60.dll
						And THESE are only required for ActiveLedIt.ocx. Thats cuz OCXs with MFC - apparantly - MUST
						be compiled without static linking. No idea why (though I DO understand why its encouraged, I've no
						idea why its REQUIRED).
							I updated the two installers that were installing and old dll and WILL update my web site with these
						new DLLs.
990305	NOTE	LGP		>Try 'dumpbin /imports ActiveLedIt.ocx | grep .dll
						>I get:
						>	 MSVCRT.dll
						>    KERNEL32.dll
						>    USER32.dll
						>    GDI32.dll
						>    SHELL32.dll
						>    OLEAUT32.dll
						>    MSVCP60.dll
						>
990208	REPORT	LGP		Various EXEs no longer need to redistribute that DLL, but review (with dumpbin)
		(0568)			just what DLLs need to be redistributed with ActiveLedIt, and be sure they are
						available (and part of .inf/cab file stuff?).

990329	Fixed			Now works better, and its better documeneted. And now - I HOPE - handles Japanese characters properly.
						We'll find out about that from June next time I do a Led release.
990222	REOPEN	LGP		LEC complained a bit about this, but mostly about the fact that it does the wrong thing
						with Japanese text. Be sure to NOT insert spaces around Japanese text (at least in UNICODE mode, since
						that maybe only place easy to tell). At the same time, try to fixup the rest of this bug.
						Do before 2.3 goes final.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	REPORT	LGP		Smart Cut-N-Paste doesn't work perfectly. I find it does the wrong thing in
		(0567)			LedLineIt, nearly as often as it is helpful. Perhaps its most useful in LedIt! - not
						LedLineIt!? Or maybe I have the definition wrong?

990325	Fixed			Somewhat tricky change. Had to create new ParagraphInfoChangeTextRep class in WordProcessor.cpp
						and use that instead of old RTF-Internaize/Externalzie code. This is a better approach.
						And we SHOULD use it for StyledTextInfo chagnes as well (setting fonts etc to doc - see spr#0564)
990324	REPORT	LGP		Related to #0534. Undo of paragraph format chage in an empty doc doesn't work.
		(0563)			

990324	Fixed
990324	REPORT	LGP		Because of how I implemented #0534, there was a kludgely behavior where upon undo, there
		(0562)			was an extra character selected (if the original action had an empty selection).


990324	Fixed			Mostly implemented, but for a few rough edges. Kludge with selection being left wrong.
						Can I do this as templated member function? Undo fails in empty doc (works for fonts).
						Follow up on these problems as spr#0562, and spr#0563, and suggestion about templated
						member functions just doesnt work with MSVC60SP1.
980408	REPORT	LGP		Undo of Paragraph/format change doesn't work. Have a line with a single
		(0534)			character in it. Center it. All other lines left justified. Delete the single character
						and preceding NL, so lines merged, and center style lost. Then say
						UNDO. No centering. Also check on when we do a justification command,
						and then say undo (not sure if works or no - maybe related)?

990323	Fixed			TexImager::NoTabletAvailable now subclasses from TextImager::NotFullyInitialized,
						and TextImager::NotFullyInitialized now used in appropriate places as thing caught,
						and WordProcessor::NoParagraphDatabaseAvailable added.
990220	REPORT	LGP	 	Deal with 'throw NoTablet' calls in WordProcessor.cpp. That is BASICLY
		(0561)			a good idea but sloppily implemented. Create a better named common base
						class exception, and use that, I think.

990322	Fixed			Trouble was needed to override ResetTabStops() to take into account margins.
990220	REPORT	LGP	 	Tabs-stops and margins don't work together properly in LedIt (really in word processor class)
		(0560)

010823	NOTE	LGP			See SPR#0970 for further details. This maybe RE-BROKEN.
990312	Fixed	LGP			The problem was that we never set the style on the last magic character position
						past the end of the text. And when you deleted ALL the text, the only style left
						to be applied when new text was PROGRAMATICLY (not a problem if through user
						typing cuz of the fEmptySelectinStyle stuff) was the font from the magic region
						at the end of the buffer. And that was the old default value.
							Now the fix was in MarkerCover<MARKER,MARKERINFO,INCREMENTALMARKERINFO>::SetInfo ()
						to make changes which affect the last character to ALSO apply to the magic character
						just past the end of the buffer.
990312	REPORT	SWIGHT	Still seem to have the problem where the magic original marker does not get
		(0559)			the proper font in SetDefaultFont (Japanese Pane loses proper font). I have
						a workaround, but think this should be fixed in Led. Latest version of my
						code has explicit compilation directive for this problem.


------------------- Released 2.3b7 990310 - Below ------------------------------

990310	Change	LGP	 	AND MUCH MORE, now only covered in the cvs logs (appear in each .h/cpp file)

990310	Fixed	LGP	 	WordProcessorTextIOSinkStream::~WordProcessorTextIOSinkStream () needed override to call
						Flush(), cuz base class version binds to wrong vtable entry (base classes)
990310	REPORT	LGP	 	D&D and Copy/Paste no longer preserve paragraph markup (like margins). Broken very
		(0558)			recently (probably latest round of performance tweeks). Fix while its still fresh
						in my memory.

990310	Fixed	LGP	 	Now DRAMATICLY faster. Lots of small tweeks from profiling, but the biggest effect came from
						better caching in WordProcessorTextIOSinkStream. Now never causes a flush. Instead it caches
						each change in an array (the way its base class had done for style changes).
						Now:
							MSWord97							-	3 seconds
							Led 2.2								-	6 seconds
							Led 2.3b6							-	24 seconds
							Led 2.3b7x (with my current tweeks)	-	4 seconds
990302	Note	LGP	 	It would be REALLY nice to speed this up since this is used internally for UNDO, copy/paste etc,
						and this makes THOSE operations slower as well.
990301	Working	LGP	 	Maybe good enuf. After more profiling, I found that with reading rtfspec1.4:
							Led 2.2								-	6 seconds
							Led 2.3b6							-	24 seconds
							Led 2.3b7x (with my current tweeks)	-	12 seconds
						While this is NOT GOOD. I think it maybe acceptable. At least there are no real
						low hanging fruit to speed this up.
990221	REPORT	LGP	 	RTF reading performance. Reading the RTF spec went from 4 seconds to about 30 seconds
		(0546)			when I added the code to handle \fi\li\ri (and set them to defaults in \pard).
						This MUST be fixed before release. 
	
990309	Fixed			I hope I got this right. I never asked Joe. I just inferred from the docs you use the
						\paperw, and subtract out the \margl\margr. And this gives you the full doc width.
						And then apply the indidual indents on a section/paragraph/etc basis on that basic
						perdocuemnt value. I store the value(s) in the RTFInfo (which is now much cleaner and
						simpler and now stored by default in the LedIt document object).
990221	REPORT	LGP	 	Code for handing \ri uses hardwired WIDTH of document (6 inches). Find hte RIGHT way
		(0548)			to handle this (maybe \margl\margr, etc, or maybe ask ChinaJoe?).

990308	Fixed			Performance tweeking of RTF read code gone awry. in WordProcessorTextIOSinkStream::Flush ().
990306	REPORT	LGP	 	VERY SERIOUS BUG:
		(0556)			"In LedIt - type in the text "This is a good test."(no quotes). Then select "good". And drag
						it to the right, and let go, trying to insert it just past the final "t" in "test" (aka before the ".").
						CRASH in the markercover code!!!
	
990307	Fixed	LGP		Massive changes. Created several separate, combinable templates and Led_MFC is now
						just a typedef. Should be fully backward compatable. Now allows things like
						Led_DialogText to be based on CWnd (or so I hope - do that soon?).
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970119	TODO			Use TEMPLATES hack (like Led_MFC_X template) to allow Led_MFC_
		(0557)			to be built off of either CView or CWnd (all common stuff in template,
						and non-common stuff goes in subclass).

990302	Fixed	LGP	 	Mostly. Now I write out SOME \objh\objv values (but I'm not sure these are right).
						The files I create are STILL HUGE (same size). But now can be read back in by WordPad
						properly. MSWord97 still does NOT read back in the picture embeddings properly (see spr#0555)
990302	REPORT	LGP	 	Open 'spanishprop.rtf' from VPG. Then examine the pictures (OLE embeddings). They look fine.
		(0554)			Then save. File goes from 2MB to 26MB. And when you read it back in, you get bogus images
						(at least in MSWord).

980724	DONE	LGP		Only noted 990302, but fixed way back then.
980427	REPORT	LGP		Add TextImager::GetStaticDefaultFont() overload tkaing LOGFONT _CHARSET arguments, so
						we can grab default SJIS (etc) font for each lang pane (maybe add similar info to
						TranslationEngine APIs - no - better - prebuilt table hardwired in TA - mapping LANGNAMES
						to default CHARSETS!!!

990301	Fixed	LGP	 	I have made a fix in the same spirit, but the implemeantion is different. See
						SimpleTextImager::ScrollSoShowing ().
990223	REPORT	Remo	>-----Original Message-----
		(0553)			>From: Datos / Remo Eichenberger [mailto:remo.eichenberger@datos.ch]
						>Sent: Monday, February 22, 1999 10:24 AM
						>To: Lewis Gordon Pringle, Jr.
						>Subject: ::ScrollSoShowing (size_t markerPos, size_t
						>andTryToShowMarkerPos) ...
						>
						>
						>Could you please optimize SimpleTextImager::ScrollSoShowing for very large
						>files (pressing Ctrl-End) ... I mean something like that :
						>
						> RowReference newTop  = GetTopRowReferenceInWindow ();
						>
						>// INSERTED CODE
						>*******************************************************************
						>*********
						>*****
						> if(GetLength() - markerPos < markerPos -
						>newTop.GetPartitionMarker()->GetStart())
						>  newTop = GetRowReferenceContainingPosition(GetLength());
						>
						> if(markerPos < GetLength() - markerPos)
						>  newTop = GetRowReferenceContainingPosition(0);
						>// END INSERTED CODE
						>**************************************************************************
						>
						> while (markerPos < newTop.GetPartitionMarker ()->GetStart ()) {
						>  newTop = RowReference (newTop.GetPartitionMarker ()->GetPrevious ());
						> }
						> while (markerPos > newTop.GetPartitionMarker ()->GetEnd ()) {
						>  if (newTop.GetPartitionMarker ()->GetNext () == NULL) {
						>   // could be going to row IN last line
						>   break;
						>  }
						>  newTop = RowReference (newTop.GetPartitionMarker ()->GetNext ());
						> }
						> Led_Assert (Contains (markerPos, markerPos, *newTop.GetPartitionMarker
						>()));

990228	Change	LGP		Made ability to change Led_MFC scrollbar handling of autohide/autoshow sbar done on
						a PER editor instance basis, rather than on a compile-time #define basis, cuz some apps (LEC)
						need to have SOME text fields work one way, and others another.
						<OLDCODENOTE>
							qMakeWindowsScrollbarAppearOnlyIfNeeded is obsolete. Instead call Led_MFC::SetH/VScrollBarType ().
						</OLDCODENOTE>
						<OLDCODENOTE>
							Setting the window style WS_VSCROLL or WS_HSCROLL is also obsolete. Instead call 
							Led_MFC::SetH/VScrollBarType ().
						</OLDCODENOTE>
						<OLDCODENOTE>
							Overrides of (ESPECIALLY since not detected by compiler) and calls to SetV/HScrollInfo () must
							be corrected to take an extra argument.
						</OLDCODENOTE>

990223	Fixed	LGP		They just sent me the source for a way to reprodiuce the problem today.
						Turns out the trouble was the CopyBits call in MultiRowTextImager needs to have
						a ::GDI_RGBForeColor (Led_Color::kBlack.GetOSRep ());/::GDI_RGBBackColor (Led_Color::kWhite.GetOSRep ());
						in front of it to avoid colorizing.
990125	REPORT	Mercato	>A second problem I'm having is with an earlier version 2.3b2. I've created
		(0552)			>a sample program where the Led is used in a control. There are other
						>controls in the window including buttons. If the window background colour
						>is not white the first line of the Led control is the same colour as the
						>window. Each time you press enter the next line changes colour to the same
						>colour as the window.
						>
						>The function Led_GetTextBackGroundColor() returns Led_Color::kWhite on the
						>Mac.
						>Somehow the text background colour is being reset to the window colour.


------------------- Released 2.3b6 990222 - Below ------------------------------

990222	Fixed	LGP	 	Fixed, and also keep track of autoindent flag across runs
990220	REPORT	LGP	 	Fix LedLineIt to keep track of 'smart paste' option in registry (and default off)
 
990221	Change	LGP	 	AND MORE, now only covered in the cvs logs (appear in each .h/cpp file)

990221	Fixed	LGP
990220	REPORT	LGP	 	New LedIt doc-dirty bug. App starts wtih doc dirty. PROBABLY cuz of
		(0550)			the SetInfo(default) values I just added for paragraph stuff.

990221	Fixed	LGP	 	Finished a while back (for windows, and for Mac see spr#0549)
971223	REPORT	LGP		Finish implementing Ruler UI in LedIt!. See spr#503.
		(0504)

990221	Fixed	LGP	 	Did writing support.
990221	WORKING	LGP	 	Added the READING support (but created spr#0546) 
990220	REPORT	LGP	 	Add RTF support for Margins, First Indents, and tabstops
		(0545)

990220	Change	LGP	 	Added WINDOZE UI support for tabstops setting, margin setting, and first-indent
						support (really ruler support) per-paragraph. Really done much earlier. But now
						mostly (entirely?) complete.

990212	Fixed	LGP		Below note from much earlier on, and fixed earlier as well.
??????	REPORT	LGP		Fix LedLineItMFC to call utility GetLongPathName () - just added to
						LedItMFC - to make the pathnames of docs opened in long-form. Was in
						some version of LedLineItMFC - but I killed it when I lose the override
						of DOCMGR. Maybe put back or find a less invasive way...--LGP 980417

990212	Fixed	LGP		Below note from much earlier on, but all this is basicly finished now
??????	NOTE	LGP		In middle of adding code for losing GetLayouWidth(PM) to and changing GetLayoutMargins(RowReferece)
							NOW not 100% sure that was needed. Maybe just ADD a GetLayoutMargins() method in WP class and
						have GetLayoutWidth() vector to that THERE.
							THEN maybe do ALL draw code changes for margins theirin - and not have them leak outside. I think
						this can be done cuz I managed to get all the justification stuff done there.
							AT ANY RATE - if I DO change APIS - be careful to CAREFULLY DOCUMENT backward compat and changes
						needed.

990212	Fixed	LGP		Below note from much earlier on, but all this is basicly finished now (though perhaps not well tested).
??????	NOTE	LGP		Finish RULER stuff, margins, inclduing
						RTF support for these data. Top priority for B1 release! BEFORE OTHER PARAGRAPHINFO BUGFIXES!!!

990209	Fixed	LGP		Be much more careful in a bunch of places in Led about handing excpetions, and throw NoTablet
						when no ParagraphInfo dbase avialable in WordProcessor stuff, and many related changes.
990206	WORKING	LGP		Real problem with drop of file in LedIt! is new ParagraphInfo/Paritition code. The partition
						is associated with the imager (for tmp-hack reasons) and that hasn't been associated by the time
						we try to read in the file. Tricky to fix but must find SOME WAY.
							DID fix the problem with LedLineIt.
980427	REPORT	LGP		On PC, drop of file in explorer on LedIt! icon crashes on startup. Maybe new LONGFILENAME
		(0544)			code? Anyhow - fix that - and get taht long file name code working in LedLineIt!


------------------- Released 2.3b5 990205 - Below ------------------------------

990205	CHANGE	LGP		Support MWerks CWPro4

990205	CHANGE	LGP		Many fixes accumulated from various customers patched into Led.

990205	CHANGE	LGP		Now most/many of the change comments aren't going to be kept here, but in the
						CVS log (til I can figure a way to get them automatically moved here? Maybe?)

990205	CHANGE	LGP		Support CVS (really took a bit of time before and after)


------------------- Released 2.3b4 981022 - Below ------------------------------

980923	CHANGE	LGP		Support Visual C++ 60.

980923	CHANGE	LGP		<OLDCODE>
						Remove all Led_Array<T> support. Replace with STL <vector>.
						</OLDCODE>

980925	CHANGE	LGP		Reorg how I deal with disabling warnings in source code (changed define names
						and use push/pop to comport better with MSVC60 bugs/quirks, instead of 50 ones.
						Also - new scheme a little simpler.


------------------- Released 2.3b3 980723 - Below ------------------------------

980723	Change	LGP		Over last month or so, added several fixes to UNICODE/SJIS imaging support,
						and minor handly improvments to facilitate LEC TA project.

980709	Change	LGP		Added handy new classes, TrivialWordWrappedImager and TrivialImager<IMAGER,TEXTSTORE>.

980707	Change	LGP		qWorkAroundWin95UNICODECharImagingBugs 

980629	Change	LGP		Added extra arg (from) to PartitioningTextImager::ResetTabStops(), so can figure
						width of tabs whose size depends on where the substring of text appears WITHIN
						the partition (e.g. in LEC SBSMODE, initial tabstops zero-width). And lost
						partitionelt arg (can be derived from 'from' arg added).

980617	Change	LGP		TextInteractor::ExternalizeFlavor_TEXT () now strips embedded NUL-characters.

980609	Change	LGP		Added virtual GetHVScrollInfo/SetHVScrollInfo() methods to Led_MFC, to make
						it easier for subclasses to hook into alternate scrollbar implementations
						(e.g SBSMode in LVTA).

980608	Change	LGP		REMO ASKED FOR SimpleTextImager::GetInterlineSpace() to be overloaded
						to take PM as arg. 

980608	Fixed	LGP		TextStore::GetStartOfLineContainingPosition  () and
						TextStore::GetEndOfLineContainingPosition () would die
						a horrible deadth - occasionally - in UNICODE mode - when called
						from DblClick handling code.


------------------- Released 2.3b2 980602 - Below ------------------------------

980602	Fixed	LGP		qUseOffscreenBitmapsToReduceFlicker was wrong in SimpleTextImager
						and MultiRowTextImager (both cases Draw method). Need to take into
						account 'interlineSpace' height in size of offscreen bitmap!
980528	REPORT	REMO	SimpleTextImager::DrawInterLineSpace () is buggy. Add a call to
		(0542)			SetInterLineSpace (40) to LedLineItView::CTOR(). Then run. You will
						see garbage all over screen. Then goto SimpleTextImager::Draw() code
						and shut-off qUseOffscreenBitmapsToReduceFlicker. Then this code works fine.

980602	Fixed	LGP		New SJIS/UNICODE / TextStore / Kinsoku code I added asserted out on
						sytems without SJIS code page.

980602	Fixed	LGP		qWorkAroundWin95BrokenUNICODESupport
980424	REPORT	LGP		kTEXTClipFormat/CF_TEXT/CF_UNICODETEXT. Must think this out better. Simple 
		(0539)			solution is to change kTEXTClipFormat to point to CF_UNICODETEXT under when qUNICODE.
						This works GREAT under NT. But fails under Win95. Need some compromise. Maybe do that,
						but add special case extra-hack code to write UNCIDOE and TEXT?

980504	CHANGE	LGP		Ported to Metrowerks Code Warrior Pro 3 (CWPro3). Remove obsolete
						bug workarounds.


------------------- Released 2.3b1 980424 - Below ------------------------------

980423	CHANGE	LGP		Led_FontSpecification::SetFontName() etc now set the
						lfCharSet field to DEFAULT_CHARSET. After reading the LOGFONT
						docs better, this (value=1) works much better than ANSI_CHARSET),
						since it takes the charset from the font NAME - which is generally what
						we want.

980422	CHANGE	LGP		Enable IME (windows) support by default.

980422	CHANGE	LGP		Added preliminary UNICODE support. Hopefully enuf for LEC. You can compile most
		(0536)			of the Led modules - with the main exception being the StyledTextIO module - and things
						that depend on it - for UNICODE Led_tChar.
							Most of the remaining work to be done, has todo with providing a reasonable FileIO
						UI for selecting UNICODE vs. mybyte charset output. And supporting UTF7/UTF8, etc, on
						input/output. See SPR#0537 for this.
							Also - added - as best I can - support for Kinsoku rule, and UNICODE version of
						word-selection logic Led 1.0 had. I wish I knew of a generic Win32 mechanism for all this.
						But hopefully this will be good enuf for LEC's needs. Track improving/fixing this furhter
						as spr# 0538.

980422	CHANGE	LGP		Finished per-paragraph tabstop support. Got UI working in LedItMFC (ruler).
		(0535)			Added reading/writing support to StyledTextIO/RTF. Finished support in
						WordProcessor::ParagraphInfo, etc.


------------------- Released 2.3a3 980408 - Below ------------------------------

980408	Fixed	LGP
980407	REPORT	LGP		Serious AutoDoc bug. ChunkedArrayTextStore class doesn't
						appear in ChunkedArrayTextStore module. I think these
						module-name-records are clobbering the same-name class
						records. Must treat them separately so I can keep BOTH (with same name)
							Similarly - see the MarkerCover module docs for an example of how broken things
						are.

980408	Fixed	LGP
980407	REPORT	LGP		Open "RTF-Spec.rtf" - old rtf spec(pre1.4). Note hoep all the text
		(0533)			is centered! Must be a big in the new setjustification() code I wrote
						(probably in styledtextimager::sink::SetJustification ()

980408	Fixed	LGP		Rewrote the CheckMarkerBounaryConstraints () code.
980407	REPORT	LGP		Open "Bug7.rtf"
		(0532)			Copy/Paste first line 5 times (not replacing, but always appending
						Select lines 2-3(but not last period).
						RightJustify.
						DeleteKey
						DeleteKey
						(second one causes assert error).
						The bug probably is with ParagraphDatabaseRep::CheckMarkerBounaryConstraints ().

980407	Change	LGP		Checkins - but not released yet...

980406	Fixed	LGP		This code (see TextInteractor::GetCaretShownAfterPos) is comlicated
						by the need to work for both word-wrapped, and non-word-wrapped
						code, both where there is a real-character getting 'eaten' in the display
						by the wrapping, and where there is none. Hopefully
						this code now better addreall these issues (but I've
						had bugs here before, so I won't be surprised if
						I didn't get it right this time either!).
980402	REPORT	Remo	Arrow keys / Home/End keys don't work right.
		(0531)			Steps to reproduce in LedLineit! 2.3a2:
						*)	Load a file with more than one row
						*)	Press end-key and the cursor-right key
						*)	You see the cursor did not jump to the
							next line.
						*)	after you press the 2nd cursor-right, then
							the cursor jumps to the 2nd column in the
							next row.	

980406	Fixed	LGP		See #0530, #0492.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970304	Report	LGP		See #413.
		(414)			Someday - we should rewrite MultirowTextImager etc to be able to subclass
						from any different PartitioningTextImager (to facilitate things like
						LECs SideBySide mode). Perhaps use templated base class?
						Anyhow, even without that, this should improve the clarity of
						the code.

980406	Close	LGP		RTF supports color, and LRTF now obsolete format.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970707	NOTE	LGP		Done for LRTF and RTF - only HTML todo.
970119	REPORT	LGP		Update various supported Led file formats to handle color - now that
		(0410)			Led itself handles color.
						Including:
							¥	LRTF	(most important, since needed for undo, D&D etc)
							¥	RTF
							¥	HTML

980406	Fixed	LGP		Fixed.
						<OLDCODENOTE>
						Had to move StyledTextIOWriterSrcStream_StandardStyledTextImager and StyledTextIOSinkStream_StandardStyledTextImager
						to StandardStyledTextInteractor module, and split out WordProcessor/ParagraphPtr specific stuff into
						a subclass in that module.
						So - any place use used the names, you will need to replace them according to this typedef:
							#if		qSupportLed22CompatAPI
							typedef	StandardStyledTextInteractor::StandardStyledTextIOSrcStream	StyledTextIOWriterSrcStream_StandardStyledTextImager;
							typedef	StandardStyledTextInteractor::StandardStyledTextIOSinkStream	StyledTextIOSinkStream_StandardStyledTextImager;
							#endif
						</OLDCODENOTE>
						Rest of the fix was in WordProcessor class, to override new mkStandardStyledTextIOSrcStream () method to
						return appropriate subtype of StandardStyledTextIOSrcStream with knowledge of ParagraphPtr. Then use that
						in the Internalize/Extenralize methods of StandardStyledTextInteractor. Trouble with old code was it overloaded
						on STATIC TYPE of call point - which was StandardStyledTextIOSrcStream - not WordProcessor.
971020	REPORT	LGP		Undo/Cut/Copy/Paste don't always (ever) preserve justification?

980404	Fixed	LGP		Not sure how much this will help (or even HURT) performance. It adds a fair amount
						of indirections, and added callbacks. Hopefully the added flexability it afords
						will make any extra overhead worth while.
							In particular, it is very nice being able to separate out the abstraction of
						how to partition the text from the rest of the editor. It makes doing things
						like LogoVista Translation Assistant / SideBySide mode much easier.
							Also - it has the potential to save alot in memory and time when multiple views
						all examine the same (large) file.
							This change was complicated, and caused many internal changes. It should require few-
						if any CODE - changes for most folks. But it will require changes to projects.
						<OLDCODENOTE>
							The file LineBasedTextImager.h/LineBasedTextImager.cpp are now obsolete, along with
						the class LineBasedTextImager. Instead - you directly use its base class -
						PartitioningTextImager.
							Also, you must now INCLUDE in your projects LineBasedPartition.cpp (and .h as appropriate).
						</OLDCODENOTE>
971015	REPORT	LGP		Consider major reworking of PartitioningTextImager. Make
		(0492)			Paritition object separate (but owned) by PartitioningTextImager.
						That way, you could have several Imagers which shared the same partition
						(which would save memory/time). Also, it would make it much easier to
						abstract out different partitioning styles (linebasedtextimager would go
						away, and line-based-partitioner). Maybe use the existing MarkerCover code?
							Notify Remo when this is done, cuz he may use this to speedup his reading
						large files code.

980402	Change	LGP		Broke the file StyledTextImager.h/cpp into StandardStyledTextImager and StyledTextImager.h/cpp 
						And renamed StyledTextInteractorh/cpp to StandardStyledTextInteractorh/cpp.
						With one significant hiccup. On mac, limit of file name length forced me to name the .cpp file
						"StandardStyledTextInteractor.cp" - note the missing trailing 'p'.
						For PC users, I will add a file StandardStyledTextInteractor.cpp which #includes
						StandardStyledTextInteractor.cp, so they can create more sanely named project files. And
						I will soon update all MY project files accordingly.
						<OLDCODENOTE>
						Most projects which included StyledTextImager.cpp, now also need to include StandardStyledTextImager.cpp,
						and most projects which included StyledTextInteractor.cpp now need to include StandardStyledTextInteractor.cp
						(or .cpp on pc)
						</OLDCODENOTE>

980402	Fixed	LGP		Fix was to make CheckMarkerBounaryConstraints  virtual in MarkerCover<> template
						and to override it in ParagraphDatabaseRep. This code caused a little bit of
						awkwardness in LedItDocument, where we construct the ParagraphDBase, since that
						now requires a referece to the partionmarkerview. This is akward in the document
						class, esp if we try to ahve multiple views.
						Really the best thing is to finally bite the bullet and break out the partition
						into a separate object (see spr#0492)
971020	REPORT	LGP		Fix bug with ParagraphDBase, so assure that SetInfo()'s are on
						paragraph boundaries (I think main bug is sometimes we can get
						split where two markers on one paragrah - esp from RTF input, but
						also from editing - like joining two paras with differnet justification - 
						we need to deleete following one (or at least adjust it to push it
						down to next para).

980310	CHANGE	LGP		IME support didn't compile. Not really tested yet, but at least it now
						compiles.


------------------- Released 2.3a2 980304 - Below ------------------------------

980304	Fixed	LGP
980303	REPORT	LGP		ActiveLedIt! should have smart cut n paste be option settable from properites.
		(0519)

980304	Fixed	LGP		Took a fair amount of debugging, but finally working.
980304	REPORT	LGP		ActiveLedIt! sample page should demo clearly how to access ActiveLedIt! properties,
		(0523)			demo grabbing text, munging it, etc...

980303	Fixed	LGP		Can no longer reproduce problem. Perhaps its fixed in MSIE40?
971020	REPORT	LGP		When ActiveLedIt! is embedded in a web page with MSIE40, and you select browse-documetnation
		(0511)			command, MSIE crashes (exits). Works OK when in tester applet. Trouble is the HLinkSimpleNav
						code / call, I guess.


980304	NOTE	LGP		Maybe not totally fixed. See #0524.
980303	Fixed	LGP		Not quite sure what I did to fix this, but lots of stuff relating to #0515 seems to
						have fixed it.
980224	REPORT	BruceRu	The backspace key in ActiveLedIt! causes the browser to go back a page, rather than
		(0512)			deleting any text.

980304	NOTE	LGP		Maybe not totally fixed. See #0524.
980303	Fixed	LGP		Override COleControl::PreTransalteMessage() to call TranslateAccelerator(). Tried (and should
						have worked - I believe) overriding OnGetControlInfo() - but nobody ever seems to call that.
980303	REPORT	LGP		ActiveLedIt! accelerators don't work.
		(0515)

980303	Fixed	LGP		Support DoPropertyExchange() method of COleControl. Saving contents now works fine (OleSave/
						what is done with most standard containers - eg. Wordpad, WinWord, LedIt!).
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970723	Defer	LGP		Not entirely obvious how to approach this. None of the MSVC50 MFC samples
						are very leading. Best one is an ATL sample (ATLButton). Maybe rewrite
						ActiveLedIt! using ATL for next release, and then this will come easier.
970405	REPORT	LGP		In ActiveLedIt, See how you are supposed to get data into
						and out of an activeX control.

980303	Fixed	LGP		Implemented most of the API used in MicrosoftRichTextControl. At least partly tested.
						Also did API to read/write files (locally on disk). See#0510.
971021	REPORT	LGP		ActiveLedIt! should have Property "Text" and "RTFText" which allow getting/setting
		(0513)			the text of the control.

980303	Fixed	LGP		Implemented most of the API used in MicrosoftRichTextControl. See #0513.
						And did flat to turn on/off context menu support.
980108	REPORT	jackn@n	From: Jack Nichols [mailto:jackn@nwlink.com]
		(0510)			> Sent: Friday, January 09, 1998 12:51 AM
						> To: Lewis Gordon Pringle, Jr.
						> Subject: Re: Question about Led
						> 
						> 
						> Lewis,
						> 
						> I checked out the ActiveLedIt! sample with IE 4.0, and liked the
						> capabilities of the control from the visual standpoint.  I also tested in
						> from within Visual Basic.  However, the right click popup menu cannot be in
						> the applications I'm writing.  I also used the VB Object Browser (which lets
						> me see all of the properties/functions/events of an object) and found no
						> code control over the component.  The ActiveLedIt control would work for me,
						> except for the fact that the programmer (at least from what I can tell) has
						> no control over formatting, color, etc. from code.  For example, the
						> RichTextBox control, which I use now, has SelStart and SelLength properties
						> that control where the selected text starts and how long it is.  Then, you
						> can use the SelColor or SelFont properties to change the font and color, for
						> example.  If the ActiveLedIt control had this capability, it would be really
						> cool.  I would also need the control to have the ability to put pictures and
						> OLE objects inline, from code, controlled by the programmer.  The
						> RichTextBox control does this, but it requires the user to drag and drop
						> files from Explorer to embed them; you can't do it from code.  Obviouslly I
						> could modify the Led sample to fit my needs, but I work primarily in Visual
						> Basic, not C++, so it might take me awhile and would be prone to failure on
						> my part :-).  Also I am on a tight schedule to locate a control with my
						> required capabilities for some future programs I am working on.
						> 
						> I would be interested in testing the beta of ActiveLedIt 2.3, as you
						> mentioned it had more OLE Automation, like I just described.  This control
						> looks very promising, and I will keep my eye on it.
						> 
						> Thanks!

980225	Fixed	LGP
980119	REPORT	REMO	TextImager::FontCacheInfoUpdater::FontCacheInfoUpdater  (...
		(0509)			has the compare:
							if (fontSpec != imager->fCached...
						But in point of fact, we don't need to compare the full FONTSPEC - cuz
						colors handled separately. So if all that has changed is the color, we needlessly
						create a new font.
							A speed tweek is possible if you dont check the color.

980224	Fixed	LGP		Must hook LedLineItView::DidUpdate() to set fLayoutWidth=kBadDistance.
980224	NOTE	LGP		Remo (a couple times over the last month while I was busy) reported this on the Windows
						version.
970910	NOTE	LGP		On Mac, in LedLineIt - when typing - we don't horizontally autoscroll far enuf.
						But it does the right thing for other types of autoscrolling (like from arrow keys).
970727	DEFER	LGP		Defer, and probably do in Led 2.3.
970727	REPORT	LGP		AutoScroll for horizontal case not working correctly. At least sometimes on the mac,
						when you do a find or soemthign that should horizontally autoscroll, it doesn't.
						At least not completely, and correctly.

980119	Fixed	LGP		Fixed in AutoDoc. Still must actually use the keywords some places.
971020	REPORT	LGP		add public/private/protected access spec on DOCS items in AutoDoc 

980119	Fixed	LGP		Fixed in AutoDoc. Still must write the content (or move over from design
						doc as starting point).
971020	REPORT	LGP		Do the support for Module declarations in AutoDoc - need better docs! 

980107	Fixed	LGP		Problem was that I accidentally droped TabletChangedMetrics call when I merged
						code in Led_MFC::OnCreate (). Turns out wasn't THAT broken. If you simply changed fonts
						things worked fine (and always work fine now).
971223	REPORT	LGP		Tabstop handling totally fucked up in LedLineIt! on Windows
						right now (2.2a1 - d3 was fine). 

980107	Fixed	LGP		Problem was that StyledTextIOReader_RTF::ReadInFontTablesEntry () needed to handle
						subgroups embedded in the font-table-entry (word has apparantly started adding comment
						groups there).
980106	REPORT	ann@gen	ann@gensol.u-net.com reports:
		0506			RTF import and cut & paste from MS Word97 - I've attacked a small RTF file
						created in MS Word97. The text is 'The big brown fox'. The word 'big' is
						in Maturna MT Script Capitals, size 24. The other text is Courier New 10. When
						I open this in the distributed (ie 32bit) LedIt! 2.2, the FontName is lost.
						All other text attributes, in this example - size, seem OK.

980106	Fixed	LGP		Problem was that ActiveLedItApp::InitInstance() needed to call
						EmbeddedObjectCreatorRegistry::Get ().AddStandardTypes ();
971231	REPORT	baglym@	Monte Bagley <bagleym@nashua.edu> reports:
		0507			Drag & Drop a DIB (picture) into ActiveLedIt! and the editor displays
						a character dump instead of a picture.


------------------- Released 2.3a1 971223 - Below ------------------------------

971223	DONE	LGP		I added "Text", "RTFText", and "HTMLText" properties to ActiveLedIt. These
						can be both read and written. See SPR#506 for next steps.
971223	REPORT	LGP		Be sure to do at least primitive property/OLE Aut support for next beta
		(0505)			release of ActiveLedIt!!!!

971223	CHANGE	LGP		UI Added to LedIt!. Still must add more functionality and hook in tabs part.
						Rest tracked as SPR# 504.
971020	REPORT	LGP		Add ruler UI to LedIt! windows, and then implement per-para tabstops,
		(0503)			first indents, margins, etc.

971214	CHANGE	LGP		Fixed for LedItMFC - still todo for LedLineIt
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
961030	DEFER	LGP		Defer, and probably do in Led 2.2 .
960910	COMMENT	LGP		See #0378-#0381
960531	DEFER	LGP		
960503	REPORT	LGP		Remember prefs (like show toolbar/status bar) in prefs file.
		(0379)

971223	CHANGE	LGP		<OLDCODENOTE>
						Led_MFC::OnCreate () now calls fDropTarget.Register ()
						so there is no need for subclasses (like LedLineItView)
						todo this in their overrides. All the sample code has 
						been updated, but your code may wish to change as well.
						</OLDCODENOTE>

971111	Changed	LGP		Integrate with latest CodeWarrior releaes (Code Warrior Pro2). Test which
						compiler bugs fixed (several), and which new ones introduced (several, but
						fewer than removed).
							Distributed project files for sample apps now in CWPro2 format
						(not compatable with CWPro1, but hopefully now compat between mac and windows
						versions of their IDE - though I haven't tested this yet).

971020	Fixed	LGP		No trouble reproducing the bug. But my fix was considerably different than his.
						Basicly fix to lookup char via LookupCharByIndex () in right table (as he did), and to deal
						with case where returned NULL, and to then map to output table (has he did).
						But check for if "GetCurrentInputCharSetEncoding ().LookupCharByIndex (c) == NULL" is really
						needed (according to my read of the 1.4 RTF spec).
971020	REPORT	Per@WW	At 4:12 PM 10/20/97, per.gustafson@wordwork.se wrote:
		(0501)			>Hi Lewis,
						>
						>Here's some bugs and comments concerning rtf-reading and code pages.
						>
						>When trying to open the following file in Ledit (Windows version, haven't
						>tried MacOS) an exception
						>is thrown in ::strcmp when it's called in
						>RTFInfo::CharsetCodeMap::LookupNamedChar.
						>
						>(See attached file: E6.rtf)
						>This is a stripped down version of a file we received from a customer,
						>isolating the bug. The original file had
						>wandered through an organization and had been edited on different platforms
						> (Mac, Win) with different versions
						>of Word.
						>
						>When investigating the above bug I found some strange stuff in
						>StyledTextIOReader_RTF::ReaderContext::PutRawCharToDestination.
						>
						>The strange stuff  is indicated in the cut n'pasted code by //-comments
						>below.
						>
						>if ((GetCurrentGroupContext ()->fCCHSCodePage != NULL) and
						>     (fDocumentCharacterSet == GetCurrentInputCharSetEncoding ()) and
						>     (GetCurrentInputCharSetEncoding ().LookupCharByIndex (c) == NULL)
						>// Because of this condition charName below will always be NULL
						>     ) {
						>     const char*    charName  =    GetCurrentInputCharSetEncoding
						>().LookupCharByIndex (c);     // charName will always be assiged NULL here
						>     Led_AssertNotNil (charName);
						>     (void)GetCurrentGroupContext ()->fCCHSCodePage->LookupNamedChar
						>(charName, &c);
						>}
						>else {
						>     c = fCharsetMappingTable.Map (c);
						>}
						>GetDestination ().AppendText (&c, 1);
						>
						>This made me look closer at that function and I think I discovered a design
						> error in it.
						>Here's how I think the above code should look like.
						>(I'm sorry my indentation style etc isn't the same as yours ;) )
						>
						>// I couldn't see the reason for the (GetCurrentInputCharSetEncoding
						>().LookupCharByIndex (c) == NULL) condition so I've excuded it.
						>if((GetCurrentGroupContext()->fCCHSCodePage != NULL)
						>&&(fDocumentCharacterSet == GetCurrentInputCharSetEncoding()))
						>{'ve
						>     // The cchs control word indicates in which code page non-ASCII
						>characters within it's scope should be interpreted.
						>     // Hence we lookup the name of the current char value in the cchs code
						> page.
						>     const char* charName =
						>GetCurrentGroupContext()->fCCHSCodePage->LookupCharByIndex(c);
						>     Led_AssertNotNil (charName);
						>     //  Our goal is to represent that named character in Led. So now we
						>look it up in the code page used internally in Led.
						>     GetCurrentOutputCharSetEncoding().LookupNamedChar(charName, &c);
						>}
						>else
						>{
						>     c = fCharsetMappingTable.Map (c);
						>}
						>GetDestination ().AppendText (&c, 1);

971020	CHANGE	LGP		Fixed problem in LedIt! PC, where if you typed no suffix in file-save dialog, you would GET
						no suffix. Now we generate a default based on the file type selected.
971020	Fixed	LGP		But see #0497
971020	REPORT	LGP		Fix RTF code to handle various types of embeddings not known
		(0496) 			by standard RTF (do my own special embedding tag). Use that for things
						I don't know how to write yet.
	
971020	Fixed	LGP		By virtue of supporting OLE embeddings, this appears to be fixed.
						Creating a picture embedding within MSWord, and then drag/dropping
						in in Led, now works fine. Dragging back as well.
							Still, there are some occasional problems with this. Parts broken out
						as new sprs #0494, 0495.
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
961029	REPORT	LGP		On PC, make pict in MSWord document, copy to Led (or drag). Led gets
		(0493)			unknown RTF embedding. First RTF reader should detect dib embeddings etc.
						Plus, perhaps more importantly, the DIB on the clipboard should
						be given preference in this case. We really must re-organize how
						we deal with picking the 'right' format off the clipboard/D&D package.

971020	Fixed	LGP		Similarly, changed defaults for Internalize/Externalize methods, since the RTF
						Externalize now is strictly more info than the Led-format one - now that we can write
						Led-private-emebddings.
970911	REPORT	LGP		Change defualt file format to RTF
		(0484)

971020	Close	LGP		We don't depend on .led file format anymore. Use .rtf. .led only for backward compat.
970730	REPORT	LGP		Sample Led Document.led (or any .led format file / version 6)
						doesn't get certain style bits read properly cross-platform. Underline becomes
						subscript.
							Also, the embedded picture doesn't display properly using QTW. This part
						may be a dup of #0473.

971009	Fixed	LGP		Now you can simply override ReCalcRowHeight ().
970930	REPORT	Remo	SimpleTextImager doesn't easily let you specify differnt row heights. It always
						computes 'right' rowheight  itself.


------------------- Released 2.3d2 970930- Below ------------------------------

970930	FIXED	LGP		Now much faster. Tweeked RTF reading code. Now apx 2x faster than Led 2.2 for
						reading "RTF 1.4 spec"; and now about same speed as Word 7.0.
						For future speedups which may help reading RTF files, see spr#0491.
970930	Working	LGP		See spr#0446.
970929	Report	LGP		My latest changes (probably mostly markercover stuff) seems to have
		(0490)			slowed down reading RTF files (at least the 1.4RTF spec on pc).
						Profile, and speed tweek this code, at least up to the point it
						was with Led 2.2.

970930	FIXED	LGP		Now much faster. Tweeked RTF reading code. Now apx 2x faster than Led 2.2 for
						reading "RTF 1.4 spec"; and now about same speed as Word 7.0.
970930	Working	LGP		See spr#0490.
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970620	REPORT	LGP		See spr#0455. Reading RTF files should be an order of magnitude FASTER!
		(0446)			WordPad on Windoze is almost an order of magnitude faster at reading
						'rtf1.4spec.rtf' - a 500K RTF file.
							I did some profiling as part of SPR#0455, and from this I the the main
						thing we need todo to get a big speedup is to avoid incrementally adding stuff
						to the buffer. Save it all up (as I read) in a big chunk, and write it into
						the buffer all at once.
							I think the performance right now is probably acceptable for 2.2, so this
						will probably be derfered to 2.3.


------------------- Released 2.3d1 970929- Below ------------------------------

970929	Change	LGP		Allow zero-width markers to be picked up in TextStore::Overlap, and therefore in
		(0489)			TextStore::CollectAllMarkersInRange(). See TextStore::Overlap documentation for
						details.

970927	Fixed	LGP		Well, Fixed is an overstatement. But as part of other changes earilier in this
						release, I made the size of partition markers smaller.
							And in response to this complaint, I profiled (on windows) and found nearly
						all the problem was due to large numbers of lines, NOT large files (or amounts
						of text).
							So I tweeked the ChunckedArrayTextStore::AddMarker code even further! Still haven't
						tested alot to see no bugs introduced. But seems nearly 2x faster for large numbers of
						lines (600,000 lines).
970926	REPORT	REMO	Remo complained that loading files in LedLineIt! was too slow. We discussed
						a number of different alternatives (though the communications gap limitted the
						effectiveness of discussion).
							I basily concluded I could either do some stuff to speed tweek adding partition
						markers, to do a whole new TextImager implemntation which didn't bother
						partitioning the entire text into lines (or maybe did on demand? as displayed? or something
						like that).

970926	Fixed	LGP		Done. Added RTF writing support. I doubt its bug free, but seems mostly
						functional.
970916	Working	LGP		Did RTF reading support. Started writing RTF support, but needs more work.
						Both need testing.
970911	REPORT	LGP		RTF (& src sink stream) justification support
		(0485)

970917	Change	LGP		Simplify qAllowBlockAllocation / Led_BlockAllocation template usage slightly.
						When qAllowBlockAllocation defined off, Led_BlockAllocation is still defined, but
						it vectors to ::operator new/::operator delete. So existing code which was itself
						wrapped in #if qAllowBlockAllocation no longer needs to be.

970917	Change	LGP		MutiRowTextImager::MultiRowPartitionMarker::GetOwner () now returns a reference -
		(0488)			not a pointer - to MultiRowTextImager.
						Illegal to call when not added to an Imager - cuz then would not have an owner.
							PartitionMarker::fOwner is now private. Instead use PartitionMarker::GetOwner() - which asserts
						not NULL and returns a reference. Illegal to call when not added to an Imager - cuz then would
						not have an owner.
							The main point of these changes is to be able to piggyback (via a cast)
						of the Markers copy of the Owner field. And not to have it redundantly. This will
						save 4Bytes per partition element.
							Then I got rid of PartitionMarker::fOwner field, and did the piggybacking. 
						<OLDCODENOTE>
							Any code that calls MutiRowTextImager::MultiRowPartitionMarker::GetOwner () or
						refered directly to PartitioningTextImager::PartitionMarker::fOwner will need
						to be changed (should be quite rare).
						</OLDCODENOTE>

970917	Fixed	LGP		SimpleTextImager no longer inherits from MultiRowTextImager. It still uses
						LineBasedTextImager - which may be a mistake. Perhaps I should make it even more
						lightweight, and not use PartitionMarkers at all? Anyhow, not for now.
						This is a good start.
						<OLDCODENOTE>
							This shouldn't affect any old code unless you assumed SimpleTextImager inherited
						from MultiRowTextImager.
						</OLDCODENOTE>
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970318	NOTE			Did something much like this, with the new class SimpleTextImager
960430	DEFER			Reviewed
941102	DEFER	
941102	REPORT	LGP		Implement new class SingleRowMonoFontTextImager. Not
		(0062)			Needed for LEC - release 1.0. Needed to do programming-
						style editor. See bug# 0021.

970916	Fixed	LGP		In StyledTextIOSinkStream_StandardStyledTextImager, use Add/InertEmbedding global
						function utilities (code sharing of obscure nonsense surrounding adding embeddings)
970915	Fixed	LGP		<OLDCODENOTE>
						Got rid of class StandardStyledTextImager::SharedStyleDatabase. Replaced with
						StandardStyledTextImager::StyleDatabasePtr, StandardStyledTextImager::StyleDatabaseRep, etc.
						Added a backward compatability routine StandardStyledTextImager::SharedStyleDatabase
						if qSupportLed22CompatAPI is defined.
							In the same vein as the new StandardStyledTextImager::StyleDatabasePtr interface, there
						is a new WordProcessor::ParagraphDatabasePtr you can use to share paragraph styling information
						across views as well.
							Note that StandardStyledTextImager::StyleDatabasePtr etc use the new class  - Led_RefCntPtr -
						to implement the refernece counting which used to be performed manually in
						StandardStyledTextImager::SharedStyleDatabase. 
						</OLDCODENOTE>
970912	REPORT	LGP		See notes about new templated module MarkerCover<> in spr#0486. Based on this 
		(0487)			code, rewrite StandardStyledTextImager's StyleDatabase code (basicly just for
						code sharing sake).

970915	Change	LGP		<OLDCODENOTE>
						CalcSegmentSize() was overloaded in PartitioningTextImager, to have both a 2 and 3 argument
						version. The three argument version is now called CalcSegmentSizeWithImmediateText ().
						This should mainly be relevant if you had overridden this routine (unlikely).
						</OLDCODENOTE>

970914	Change	LGP		Get rid of a few uses of Led_Array (use vector instead)

970913	Change	LGP		Require qLedFirstIndex = 0 - get rid of qLedFirstIndex = 1 support

970913	Change	LGP		Require qUseVectorToImplementLedArray  always true (throw away old implementation) 

970912	Fixed	LGP		Created new templated module MarkerCover<>, based losely on old
						StandardStyledTextImager::StyleDatabase code (see spr#0487 rewriting said).
						Used this in WordProcessor module to keep track of justification
						flags.
970912	REPORT	LGP		Keep track of justification flag on a per-para basis (right now in one per/editor
		(0486)			field).

970912	Fixed	LGP		Implemented nearly all the functionality. Except small peices remainging in spr# 485, #486
970723	DEFER	LGP		Defer, and probably do in Led 2.3.
970623	REPORT	LGP		See #0450. Must still rewrite/redesign ResetTabStops () support for easier
		(0451)			justification implementation. 

970911	Change	LGP		Lose StyleDbase arg to StyledTextInteractor CTOR and StyledTextImager,
						(was always passed as null anyhow).

970910	Change	LGP		Lose compiler bug-workaround support for CW11, and MSVC4.2 (only supporting CW1Pro & MSVC50 and later).

970910	Change	LGP		Introduced new InteractorInteractorMixinHelper<I1,I2> template
						Used it to simplify StandardStyledWordWrappedTextInteractor (almost obsoleting it).
						Eliminated StyleDBase CTOR arg from StandardStyledWordWrappedTextInteractor.

970910	Fixed	LGP		Still looks kinda crufty, but I made these changes. I should take the time
						to put in a nicer icon!
970908	REPORT	PERG@WW	At 3:09 AM 9/8/97, per.gustafson@wordwork.se wrote:
		(0483)			>And finally some nitpicking:
						>In StandardURLStyleMarker::DrawSegment the calls to GetMacPicHeight and
						>GetMacPicWidth are reversed when initiating IconRect. The iconRect should
						>also
						>be offset by the border width.

970910	Change	LGP		Originally motivated by spr#481.
		(482)			I changed the way (in the spirit of what I started towards the end of Led 2.2)
						I did overrides of methods which were declared in TextImager, but needed overrides
						to take an UpdateMode. It is much cleaner and simpler now.
							But alas, it could have some backward compatability implications.
						<OLDCODENOTE>
							Existing code which overrides:
								SetTopRowInWindow
								SetWindowRect
								SetHScrollPos
								ScrollSoShowing
								ScrollByIfRoom
								SetFontSpec
								SetSelection
								SetSelectionShown
							will need to be updated. The TextInteractor version with an UpdateMode
						argument is no longer virtual. You must override the TextImager version with no
						UpdateMode argument. This will be communicated to the right place via the Get/SetDefaultUpdateMode
						mechanism.
							In particular!!! - LedItView from the LedIt! sample code - needs to be changed!!!
							It overrides SetWindowRect(). The fix is already done in the latest LedIt! code. But
							if you cloned an earlier version, you will need to update your override accordingly.
						</OLDCODENOTE>

970910	Fixed	LGP		I added the pragma in two places. But mostly I went through the code
						and restructured the use of overrides to be simpler, and more elegant,
						and to eliminate the problem to begin with (rather than just quieting the
						warning). See spr#482.
970908	REPORT	PERG@WW	At 3:09 AM 9/8/97, per.gustafson@wordwork.se wrote:
		(481)			>Also you may want to insert #pragma warn_hidevirtual off in a couple of
						>places
						>to get rid of the unnecessary compiler warnings.

970910	Changed	LGP		Removed all references to qSupportLed21CompatAPI, and added new define
						qSupportLed22CompatAPI. We only support backward compat API for one release.

970909	Fixed	LGP		I haven't been able to reproduce any ill-effects of the
						lack of a FocusDraw() call here. But I agree it looks one should be
						there, so I added one (in both functions). 
970908	REPORT	PERG@WW	At 3:09 AM 9/8/97, per.gustafson@wordwork.se wrote:
		(0480)			>You need to call FocusDraw() in Led_PPView::HiliteDropArea and in
						>Led_PPView::ClickSelf, otherwise bad things happen when the view
						>doesn't have 0,0 as origin.

970829	Fixed	LGP		Needed calls to LocalToPortRect () in Led_PPView::RefreshWindowRect_.
970827	REPORT	PERG@WW	At 4:16 AM 8/27/97, per.gustafson@wordwork.se wrote:
		(0479)			>Hi Lewis,
						>
						>There seems to be a problem with the Led_PPView implementation if the view
						>does not have (0, 0) as top left coordinates.
						>You can reproduce this by changing the relevant lines in
						>LedItDocument::BuildDocumentWindow to:
						>
						>editorView->PlaceInSuperFrameAt(50, 50, false);
						>editorView->ResizeFrameTo(winsize.width-50, winsize.height-50, false);
						>
						>The problem seems to be that PP is changing the port origin on you.
						>I can't see any obvious solution to this, but hopefully you can help me.
						>
						>Thanks,
						>Per. 

970730	Fixed	LGP		Fixed URL.
970730	REPORT	Simone	AboutDocsNotice.html - icons at bottom don't show up

970730	Fixed	LGP		StyledTextIOReader_LedNativeFileFormat::Read_Version5 () needs to subtract one
						(and add qLedFirstIndex) to correct for qLedFirstIndex change in stuff written to
						file.
							Similarly, fix StyledTextIOReader_LedNativeFileFormat::Read_Version6 ()
						and StyledTextIOWriter_LedNativeFileFormat::Write_Version6 () to read/write
						independent of how they are compiled (keeping exsting in-the-field format of the
						file unchanged). 
							Also, related, added check for sentinal & throw bad format if not present
						in StyledTextIOSinkStream_StandardStyledTextImager::InsertEmbeddingForExistingSentinal ().
							Uncertain if this is important enuf for a point-release. I'll probably wait another
						week or two, and see what else comes up. So at least I only need one point release.
970730	REPORT	LGP		Open Sample Led Document.led (old one, in version5 format). Select all,
						and say COPY. Crash!


------------------- Released 2.2 970727 - Below ------------------------------
970727	Change	LGP		A few more docs cleanups.

970724	Fixed	LGP		qLedFirstIndex bug fixed in Led_PPView::HandleScrollBarClick ().
						I checked the analogous code in Led_MFC, and there was no analogous
						bug there.
970724	REPORT	LGP		Open RTF-SPEC.RTF in LedIt! 2.2rc1, on the Mac. Grab the thumb, and
		(0472)			scroll to the end of the document. CRASH.


------------------- Released 2.2rc1 - 970723- Below ------------------------------
970723	Fixed	LGP
970723	REPORT	LGP		Try to include some/all DEBUG builds on release disk as well (for my own easier testing
						if nothing else)

970723	Fixed	LGP
970723	REPORT	LGP		Review and defer remaining sprs.


970723	Fixed	LGP
970304	Comment	SLP		Make sure we build each of the tutorial applets and save the BINARIES
						on the CD (colored text etc)

970723	Fixed	LGP		Added menu item that goes to hardwired page. Still haven't authoered real
						help text, but I can do that after 2.2 release.
970627	NOTE	LGP		Add HELP support to ActiveLedIt! context menu. Probably just link to
						a special web page on sophists.com.
970405	REPORT	LGP		decide on packaging for ActiveLedIt! Do I distribute online docs?
						Or only widget. Probably need to be able todo both.

970723	Fixed	LGP
970715	REPORT	LGP		ActiveLedIt! Undo menu has a CTRL-Z in it. It should not.

970723	Fixed	LGP		Fixed a while back
960520	DEFER	LGP		
960520	REPORT	LGP		In WordWrappedTextInteractor::SetDefaultFont () - we should modify thie
						code so we can pass teh updateMode through to the place
						where it is appropriate. Now we PRONBALY double-inval.

970723	Fixed	LGP		Fixed a while back
970321	REPORT	LGP		As a side-effect of #418, I seem to have broken dbl-click on
						an empty line. Actually, this is really not "broken". Since
						roughly half of the apps I tried did nothing (BBEdit, MSVC IDE).
						And half DID select the line (old LedIt!, MWERKS IDE). But I prefer
						having it select the row - so change the behavior back sometime
						soon.

970723	Fixed	LGP
970710	REPORT	LGP		Build ActivePad with Led 2.2, to see backward compat works well (with backward compat flags) 
						And use this to form instructions on upgrading from Led 2.1 to 2.2.

970723	Fixed	LGP
970710	REPORT	LGP		Make sure to write up clear, specific docs on converting from 
						Led 2.1 to Led 2.2 (search for OLDCODENOTE , and also try building
						some old apps, like LedIt! 2.1, and ActivePad 1.1).

970723	Fixed	LGP
970119	TODO			WRITE FAQ/RECIPIE FOR:
							USERS MUST CHANGE THHEIR CODE!!!!
							WRITEUP WHY, and HOW/RECIPIES.
							AND NOTE NOT BACKWARD COMPATABLE.
							WRITE FAQ ENTRY FOR (running list of) diffs
						(really porting hints for Led 2.1 to 2.2 based code).
						WRITE FAQ/RECIPIE FOR: qSupportLed21CompatAPI

970723	Fixed	LGP
970712	REPORT	LGP		Add FAQ "How long does it take to learn led?" - two weeks? 

970723	Fixed	LGP		Added tutorial.
970712	REPORT	LGP		Add FAQ saying step by step, how to convert AppWizard generated
		(0471)			CRichText app to using Led (fixup Led class first). 

970723	Closed	LGP		No longer a need. Easy-todo tutorial on building Led-based apps (see spr#0471).
970707	NOTE	LGP		TCL de-supported. Only worry about LedTestMFC.
960718	DEFER	LGP		
960702	REPORT	LGP		Test LedTestMFC / LedTestTCL builds of Led

970723	Closed	LGP		No longer a need. Easy-todo tutorial on building Led-based apps (see spr#0471).
970707	NOTE	LGP		TCL de-supported. Only worry about LedTestMFC.
970119	REPORT	LGP		Get LedTestTCL/LedTestMFC, and OD editor working again with latest Led class library.

970723	Closed	LGP		No longer a need. Easy-todo tutorial on building Led-based apps (see spr#0471).
961205	DEFER	LGP		Defer, and probably do in Led 2.2.
961015	REPORT	LGP		Fix/Build LedTestMFC

970723	Fixed	LGP
970119	REPORT	LGP		Cleanup Led.h/Led.cpp file/support

970723	Fixed	LGP
970715	REPORT	LGP		When opening first file (or new file) LedLineIt! should open the window
						maximized.

970722	Fixed	LGP
970717	NOTE	LGP		Reproduced
970717	REPORT	JamesB	At 7:37 PM 7/17/97, James Brackett wrote: 
		(0466)			>2.  There is a debug assertion in StyledTextImager.cpp, line 1254, that can
						>be fired in the LedIt sample (and our test bed) by performing the following
						>steps:
						>    a) Enter one line of text into the edit window (do not terminate with a
						>carriage return)
						>    b) Select a range of characters on the entered line
						>    c) Use Format/Choose Font Dialog to change the font of the selected
						>characters
						>    d) Select the entire first line and copy to clipboard
						>    d) Set the selection to the end of the first line and press RETURN
						>    e) Paste a duplicate of line 1 to line 2
						>    f) Undo the paste
						>Is this assertion at all serious?

970722	Fixed	LGP
970716	REPORT	LGP		Add LedFeatures page to Class Library Docs. And maybe future directions?

970722	Fixed	LGP		I'm not sure I really like this better, but it does seem fairly common practice.
						And I'll never get anybody elses feedback without trying it. Thanx for the
						hint.
							I changed LedIt! todo this, and left LedLineIt! the way it was. This was partly
						cuz of my ambivilence. And partly cuz NotePad, Notespad, and ?maybe? MSVC50 don't do this.
970718	REPORT	JoeWill	At 4:18 PM 7/18/97, Joe Willcoxson wrote:
						>One of the things I changed about our app which would be good for your demo
						>apps:
						>
						>Get rid of the 0-pixel left margin in the display.  It just doesn't look
						>right to have the lines all jammed up against the left side of the window.
						>
						>How?  You could probably fix it as fast as I could tell you, but...
						>
						>Obviously, in the LedItView::OnSize change arguments to SetWindowRect to
						>make them like:
						>
						>#define MARGIN_OFFSET 8
						>CRect r(MARGIN_OFFSET, 0, cx, cy);
						>SetWindowRect(AsLedRect(r)); 
						>
						>add an ON_WM_ERASEBKGND handler to LedItView
						>in code
						>
						>CRect &r;
						>// probably more correct to use cliprect, but what the hay
						>GetWindowRect(&r);
						>r.right = r.left + MARGIN_OFFSET;
						>pDC->FillSolidRect(&r, GetSysColor(COLOR_SCROLLBAR)); /* or whatever color
						>suits you*/

970722	Fixed	LGP		Was fixed a while back.
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
961003	REPORT	LGP		Open Markers.html. Then we get some asserts about reference
						word-wrap code producing different answer than hours. These asserts are
						REAL. In this case I saw one word that was partly cut-off. And there
						was a tab in the line (a hint that might be the trouble).

970722	Fixed	LGP		The original fix I had made in b2 was #0442. And restoring the old code, restored the bug.
						Now I've fixed this properly!
970715	Fixed	LGP		The fix is just to revert back to the Led 2.2b2 code for TextInteractor::WhileTrackingConstrainSelection_ForWholeRows ()
						I cannot recall why I changed this code. But clearly the old code works much better,
						so we'll leave it there.
970715	REPORT	Remo	At 7:53 AM 7/15/97, Remo Eichenberger wrote:
		(0462)			>Hi Lewis,
						>
						>in the current prerelease (2.2B4) the multirowselection with mousedragging
						>don't work correct.
						>you can reproduce that with your built (LedLineIt). press three times the
						>left mousebutton and drag the 
						>mouse...

970722	Fixed	LGP		Was fixed a while back.
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
961030	REPORT	LGP		Why is current scrollbits code in WordWrappedTextImager? Shouldn't it be
		(0402)			in TextInteractor? TextInteractor::ScrollByIfRoom (); not 
						WordWrappedTextImager::ScrollByIfRoom ()???

970722	Change	LGP		Lots of work on AutoDoc, and the docs in the source code themselves. Use tables now,
						added alot more content.

970722	Fixed	LGP
970715	REPORT	LGP		Find some way to get the proper date into AutoDoc generated files.
						Perhaps a command line argument. Or use todays date when run?

970721	Fixed	LGP		I fixed this, and a whole host of related scrolling bugs. Apparently I broken things
						pretty badly when I switched to the new Win32 32-bit scrolling API (SCROLLINFO).
						Should be OK now, though.
970721	REPORT	Remo	At 5:53 AM 7/21/97, Remo Eichenberger wrote:
						>I believe i found an extremely nasty bug.
						>A couple of weeks ago, I reported a bug to you in vertical scrolling.
						>I can now reproduce for this with the LEDLINEIT.
						>This bug occurs namely in the DEBUG mode!!!
						>
						>1) open a file that greater as the window (because of the vertical
						>scrolling).
						>2) set the vertical scrolling bar (DRAGGING) into the centre with the mouse
						>and dropping mousebutton.
						>3) you should now see the bug... The bar goes down.
						>
						>
						>The bug is with Led_MFC::OnVScroll.

970721	Fixed	LGP			I fixed the tutorial. The trouble was that when you remove lines (by deleting NL characters),
						I never 'checked-range' on those newly exposed markers (problem was only for
						qSupportOnlyMarkersWhichOverlapVisibleRegion).
							Anyhow, tutorial fixed.
970721	REPORT	Remo	At 5:53 AM 7/21/97, Remo Eichenberger wrote:
		(0468)			>One of my main bug's are the full recheck of whole window
						>when i deleted one char at time. Even more speed around the whole make
						>would must I which improve syntax analysis. However, this is at this time
						>too complex me.
						>
						>One tip for your syntaxcoloring-tutorial: I believe if one remove marked
						>blocks the RECHECK at the lower end of the window does not work right.
						>However i'm not certain :-)

970717	Fixed	LGP		Trouble was with arrow keys not UNDO. qLedFirstIndex bug in TextStore::FindFirstWordStartAfterPosition 
970717	REPORT	Remo	At 10:56 AM 7/17/97, Remo Eichenberger wrote:
		(0463)			>Hi Lewis
						>
						>sorry for the poor bug description.
						>
						>i have edited a file and pressing several UNDO. then i trapped in a endless
						>loop in the following method. You can looking down and
						>you see the callstack.
						>size_t  TextStore::FindFirstWordStartAfterPosition (size_t position)
						>{
						>        /*
						>         *      Quick and dirty algorithm. This is quite in-efficient - but should do
						>         *      for the time being.
						>         *
						>         *      Start with a goal of position and start looking for words.
						>         *      The first time we find one whose end is AFTER position - we are done.
						>         */
						>        for (size_t goalPos = position; goalPos < GetLength () + 1; goalPos = FindNextCharacter (goalPos)) {
						>                size_t  wordStart       =       0;
						>                size_t  wordEnd         =       0;
						>                bool    wordReal        =       false;
						>                FindWordBreaks (goalPos, &wordStart, &wordEnd, &wordReal);
						>                if (wordStart != wordEnd and wordStart >= position and wordReal) {
						>                        return (wordStart);
						>                }
						>        }
						>        return (GetLength () + 1);
						>}
						>CALLSTACK:
						>
						>TextStore::FindWordBreaks(unsigned int 0x000000de, unsigned int * 0x0163f948, unsigned int * 0x0163f944, unsigned char *
						>0x0163f940) line 940
						>TextStore::FindFirstWordStartAfterPosition(unsigned int 0x00000077) line 1053
						>TextImager::ComputeRelativePosition(unsigned int 0x00000076, TextImager::CursorMovementDirection eCursorForward,
						>TextImager::CursorMovementUnit eCursorByWord) line 1032 + 21 bytes
						>MultiRowTextImager::ComputeRelativePosition(unsigned int 0x00000076, TextImager::CursorMovementDirection eCursorForward,
						>TextImager::CursorMovementUnit eCursorByWord) line 745
						>TextInteractor::DoSingleCharCursorEdit(TextImager::CursorMovementDirection eCursorForward, TextImager::CursorMovementUnit
						>eCursorByWord, TextInteractor::CursorMovementAction eCursorExtendingSelection, TextInteractor::UpdateMode eDefaultUpdate, unsigned
						>char 0x01) line 1775 + 47 bytes
						>DNCEditor::DoSingleCharCursorEdit(TextImager::CursorMovementDirection eCursorForward, TextImager::CursorMovementUnit eCursorByWord,
						>TextInteractor::CursorMovementAction eCursorExtendingSelection, TextInteractor::UpdateMode eDefaultUpdate, unsigned char 0x01) line
						>942
						>Led_MFC::OnKeyDown(unsigned int 0x00000027, unsigned int 0x00000001, unsigned int 0x00000001) line 966
						>DNCEditor::OnKeyDown(unsigned int 0x00000027, unsigned int 0x00000001, unsigned int 0x0000014d) line 895
						>CWnd::OnWndMsg(unsigned int 0x00000100, unsigned int 0x00000027, long 0x014d0001, long * 0x0163fdbc) line 1811
						>CWnd::WindowProc(unsigned int 0x00000100, unsigned int 0x00000027, long 0x014d0001) line 1555 + 30 bytes
						>AfxCallWndProc(CWnd * 0x00302e88 {DNCEditor hWnd=0x003b0396}, HWND__ * 0x003b0396, unsigned int 0x00000100, unsigned int
						>0x00000027, long 0x014d0001) line 217 + 26 bytes
						>AfxWndProc(HWND__ * 0x003b0396, unsigned int 0x00000100, unsigned int 0x00000027, long 0x014d0001) line 371
						>AfxWndProcBase(HWND__ * 0x003b0396, unsigned int 0x00000100, unsigned int 0x00000027, long 0x014d0001) line 203 + 21 bytes
						>DispatchMessageWorker@8 + 135 bytes
						>DispatchMessageA@4 + 11 bytes
						>CWinThread::PumpMessage() line 864
						>CWinThread::Run() line 480 + 11 bytes
						>_AfxThreadEntry(void * 0x0153fe04) line 126 + 11 bytes
						>_threadstartex(void * 0x005092d0) line 212 + 13 bytes


------------------- Released 2.2b4 - 970715- Below ------------------------------
970715	CHANGE	LGP		Alot of fine points and bugfixes to AutoDoc (like #0460). And typed in alot
						more docs.

970715	CHANGE	LGP		There were a couple of major, DOA bugs in ChunkedArrayTextStore, because of the
						qLedFirstIndex=0 change. I don't know how I missed them. Anyhow, must do IMMEDIATE
						release cuz of these.

970715	REPORT	LGP		@'XXXX' now looks up the string XXXX in the method, and then class table, and tries
						to generatea a link to it.
970712	REPORT	LGP		See #0459,#0461. Ehance AutoDoc to either automaticly generate more cross-links 
		(0460)			between methods, or to have some sort of additional tag indicating to lookup
						in the maps a parcticular URL, and use it. This should make the reference manual
						more usable.


------------------- Released 2.2b3 - 970712- Below ------------------------------
970712	Fixed	LGP		Simone's Java approach didn't work out. So I hacked together a trivial
						comment parser called AutoDoc. And I did a quick first cut at annotating
						the Led sources. There is more work I could do to improve AutoDoc. And
						alot more commenting to add to the Led sources. But this is a major milestone,
						and so I'll mark this as done, and track the rest in other SPRs.
						(#0460,#0461)
970321	Working	LGP		Got very rough first draft of docs from Simone. And I'm reworking
						the rest of docs structure so all fits together well.
970226	REPORT	SLP		++++ NEW REFERENCE DOCS - SIMONE WORKING ON THIS!!!!!!
		(0459)

970710	Fixed	LGP		Fixed. What a major pain! But now I think its right (at least running LedIt,
						LedLineIt, and ActiveLedIt! on mac and windows show no signs of problems).
						<OLDCODENOTE>
							Not only did I fix Led to support when qLedFirstIndex==0, but I changed
						the default (due to popular demand). Unless you have qSupportLed21CompatAPI on,
						qLedFirstIndex will not default to zero.
							Depending on feedback from customers, I may even abandon support for the
						qLedFirstIndex != 0 case, for clarity of code sake, in future (post 2.2) Led
						releases.
							If your code assumes qLedFirstIndex == 1, then simply change the #define,
						and all should be well. But better yet would be to update your code. If you've used
						the qLedFirstIndex define/paradigm properly (as the Led code did), you should have
						no problems.
						</OLDCODENOTE>
970709	Working	LGP		Progress, but not there yet. Converted Led_Array (see spr#0458).
						And got to the point where LedLineIt at least starts up without crashing.
						But still along way togo, I'm afraid, before this works totally.
970707	NOTE	LGP		EMail from JoeWillcox complaining this is a "PITA". I should at least make some
						small effort to really fix this for 2.2. If not possible, OK. But at least try.
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960430	DEFER			Reviewed
950520	DEFER
950520	REPORT	LGP		Finish applying use of qLedFirstIndex throughout Led and test
		(0273)			that it works with other values. See closed SPR 0272.

970710	CHANGE	LGP		qSupportWindowsSDKCallbacks off by default (was on)
						<OLDCODENOTE>
						If you counted on Led generating callbacks like EN_CHANGE, turn this on.
						I suspect most people won't use Led that way, and then there is no reason for the
						performance hit.
						And its easy to turn on if you want.
						</OLDCODENOTE>

970708	CHANGE	LGP		See#0433 & SPR#0273. In trying to pursue getting rid of dependence on one-based 
		(0458)			indexing (spr#0273), I converted Led_Array to use STL internally, and just add/remove
						qLedFirstIndex, as appropriate.
							This turned out to be far harder than I expected, due to a spate of MSVC50 template
						compiler bugs (mostly over-expanding templates, but also barfing on templates of nested classes).
							There should be no user-visible functional changes in this class. You can change which
						you compile for via qUseVectorToImplementLedArray (to get old implementation). But only the NEW
						implementation works with qLedFirstIndex != 1 (see spr#0273).

970708	Fixed	LGP		Fixed.
						<OLDCODENOTE>
						You must rename all occurences of TextStore_ --> TextStore, TextImager_ --> TextImager,
						and TextInteractor_ --> TextInteractor in your code.
						Or define the qSupportLed21CompatAPI #define to be able to use the old names.
						</OLDCODENOTE>
970707	REPORT	LGP		Lose _ crap from class names. Not consistently applied. Confusing.
						TextStore_, TextImager_, TextInteractor_. I think thats it. Use typedefs
						for backward compat. And document all the new names.

970708	Fixed	LGP		Fixed. Had done InsertNewObject  before. Did context/selection-specific
						OLE verbs today.
970315	REPORT	LGP		InsertNewObject and EditObject (whole object popup) should be
						in context menu in LedIt! Windows applet.

970708	Fixed	LGP		Fixed.
70320	DUP				Duplicate of #0417 (except that 417 points out the important requirement
						about the line wrapping).
970320	REPORT	ElanPaz	At 6:59 PM 3/20/97, Elan Paznesh wrote:
		(0416)			>Bugs Report:
						...
						>the Led_src_2.2d3
						...
						>2. When using the "End" key of the keyboard the cursor is moved to the left
						>of the first character of the following line, if there is a following line,
						>rather then to the end of the current line, as it does when there is no
						>next line.

970708	Fixed	LGP		Fixed TextInteractor_::DoSingleCharCursorEdit (). Also, similarly, HOME
						key was broken as well. Now alls well, I believe.
961223	REPORT	Simone	At 1:16 PM 12/17/96, Simone Pringle wrote:
		(0417)			>If you have a line that wraps, and you hit the "End" key, the  
						>cursor seems to go to the spot before the first character of the  
						>next visible row.  If you hit "End" again, the same behavior is  
						>repeated until the last bit of segment of the line, which REALLY  
						>goes to the end...

970707	CLOSE	LGP		No longer any need. Mac is dead.
960430	DEFER			Reviewed
950323	DEFER
950323	REPORT	LGP		Write a LedTestPortable (MFC/TCL/more?) program so peole can see
		(0182)			how easy it is to write cross platform app - not single platform
						app - using Led.

970707	CLOSE	LGP		Did a while back
960430	DEFER			Reviewed
950519	DEFER
950519	REPORT			Rewrite Draw loop to use row references
		(0266)			AFTER THIS - GO AND DO SPR#0267

970707	CLOSE	LGP		TCL de-supported. Only worry about LedTestMFC.
970119	REPORT	LGP		TCL templated mixins? Maybe if easy...

970707	CLOSE	LGP		TCL de-supported.
960430	DEFER			Reviewed
950601	DEFER			1.0RC1
950419	REPORT	LGP		Consider adding a Led_CDialogText for TCL support like
		(0214)			TCLs CDialogText. I think just does a pane border, and perhaps
						a couple of other minor additions.

970707	CLOSE	LGP		TCL de-supported
961205	DEFER	LGP		Defer, and probably do in Led 2.2.
961015	REPORT	LGP		Fix/Build LedTestTCL (should be nothing todo here. Just be sure
						we build for 2.1 release).

970707	CLOSE	LGP		Not supporting such old devsys.
961205	DEFER	LGP		Defer, and probably do in Led 2.2.
961015	REPORT	LGP		Add options/directories setting ofr Building LedIt docs
						for MSVC 4.1 - for people who do activeX stuff. Must get
						activeX SDK too. Or just set flag to disable activeX.

970707	NOTE	LGP		Fixed. DUP of #0415.
970707	REPORT	LGP		BUG. Ctrl-RightArrow (forward word) doesn't work under some circumstances.
						Like when you get up to a word ending with a period. It gets stuck.

970707	Fixed	LGP		Fixed (TextImager_::ComputeRelativePosition code).
970320	REPORT	ElanPaz	At 6:59 PM 3/20/97, Elan Paznesh wrote:
		(0415)			>Bugs Report:
						...
						>the Led_src_2.2d3
						...
						>1. When using the ctrl-right_cursor_key combination to skip to the
						>beginning of the next word, this process fails if there are non-alphanum
						>characters - such as "{" or "-" located somwhere in its path. The cursor
						>positions itself immediately to the left of the non-alpha character and
						>refuses to skip over the that character when ctrl-right_cursor_key is used
						>again. Once you step over that non-alphanum character (i.e. using
						>right_cursor_key without the control key) you can continue to use
						>ctrl-right_cursor_key until another non-alphanum is encountered. 

970707	CHANGE	LGP		Fix a few usages in TextInteractor to use RealUpdateMode, and eDefaultUpdateMode instead
						of assuming old eDelayedUpdateMode.

970707	CLOSE	LGP		Tried, and not a good idea. Documented in code header why.
970707	REPORT	LGP		Consider making StyledTextInteractor subclass for InteractorMixinHelper,
						or document why I didn;t do that in the headers for StyledTextInteractgor,

970707	CHANGE	LGP		Command-name support (InteractiveReplaceCommand::CTOR) and TextInteractor_::GetCutCommandName () etc)
						now use string class, instead of char*s, copied manually. Should almost certainly not
						affect any user-written code, so no backward compatability.

970707	CHANGE	LGP		Lose qSupportWholeWindowInvalidOptimization  define. Always build with this optimization
						enabled.

970707	Fixed	LGP		Fixed end-selection calc in TextInteractor_::WhileTrackingConstrainSelection_ForWholeRows  ().
970616	REPORT	LGP		Triple click on row sometimes selects first char of following row)
		(0442)

970707	Fixed	LGP		Mostly by virtue of MSVC50.
970323	REPORT	LGP		Led should be buildable right out of the box on WinNT. Right now
						we require a subst. See if this can be made to work easier

970707	Fixed	LGP		Fixed a while back. See SPR#0435.
970113	RE-OPENED		RE-OPENED. Still not right. Still we occasionally get assert
						errors on the mac. Re-enable ASSERT in
						WordWrappedTextImager::FillCache () to retest, and reproduce bug.
960313	Fixed			Rewrote tab support - hopefully fixed...
950519	REPORT			In WordWrappedTextImager::FillCache :
		(0256)			Assert (bestRowLength == FindWrapPoint_ReferenceImplementation (buf + startSoFar, leftToGo, wrapWidth, start+startSoFar, fontSpec, markers));
						fails occasionally. Tabs, dbcs-spaces in alecs example, and probably
						others can rarely cause this to find different word-wrap points.


------------------- Released 2.2b2 - 970628- Below ------------------------------
970628	Fixed	LGP		Fixed a while back.
970119	REPORT	LGP		Fix icons/picture etc for LedLineIt (about box)

970628	Fixed	LGP		Fixed a while back.
970323	REPORT	LGP		Need revised artwork/about boxes etc for LedIt/LedLineIt 2.2. New
						version#, copyright date, new text about products!

970628	CHANGE	LGP		In BuildLedItDocs.sh script, also copy Image files, and 'index.htm' and 'index.html' files.

970628	CHANGE	LGP		Add "Insert New OLE Object" into Context menu on LedIt! Windows.

970628	Fixed	LGP		Fixed. Trouble was that I'm still a little confused about the various
						notifications when control gets moved, etc. But I think I'm a bit
						closer now.
970627	WORKING	LGP		Reproduced
970627	REPORT	Simone	At 1:11 PM 6/27/97, Pringle, Simone wrote:
		(0457)			>Type text and it seems that you ignore the horizontal size of the scroll
						>bar.  So text gets hidden behind the scroll bar.

970628	CHANGE	LGP		Fixed infinite recursion / overload bug with Led_MFC_::GetWindowRect (LPRECT lpRect) const

970628	Fixed	LGP		Done.
970405	REPORT	LGP		In ActiveLedIt, Get target stuff working for context menu, so cut copy paste
						etc work. And add AboutBox to context menu.

970628	Fixed	LGP		Done.
970617	REPORT	LGP		LedIt! and LedLineIt! Windows should have Undo/Redo in context
		(0443)			menu (I guess ActiveLedIt! too)

970628	Fixed	LGP		Done.
970315	REPORT	LGP		on the fly, remove disabled items from the context menu
						(except be careful about seperators - treat them specially (ignore enable flag) -
						and only delete if two right next to each other.

970628	Fixed	LGP		Done.
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960522	DEFER	LGP		
960522	REPORT	LGP		Should do a CONTEXT MENU for LedIt! Windows. Would make things like setting
		(0404)			font etc much easier.

970628	Fixed	LGP		Done.
970315	REPORT	LGP		on the fly, remove disabled items from the context menu
						(except be careful about seperators - treat them specially (ignore enable flag) -
						and only delete if two right next to each other.

970628	CHANGE	LGP		And \tx, \li, \ri as well.
970626	CHANGE	LGP		Added \qc\qr hooks to RTF reader (still not fully implemented in Led yet).

970626	Fixed	LGP		Trouble was that TextInteractor_::PreInteractiveUndoHelper () and
						TextInteractor_::PostInteractiveUndoHelper () made a FlavorSavorTextRep,
						which didn't know anything about the subclasses (StyledTextInteractors)
						fEmptySelectionStyle field.
							My solution was to abstract out of Pre/Post...UndoHelper a new
						virtual method - InteractiveUndoHelperMakeTextRep () - which makes the
						textRep.
							Then, subclass this in StandardStyledTextInteractor, and capture
						the info about the fEmptySelectionStyle .
970625	REPORT	JoeWill	At 12:37 PM 6/25/97, Joe Wilcoxson wrote:
		(0456)			>2.  When you try to Undo, it doesn't take.  It will write in the font that
						>was changed to.
						>
						>
						>To duplicate:
						>1. Type some random text.  
						>2. Position the cursor in the middle of the text without selecting anything.
						>3. Change the font somehow.
						>4. Select undo.
						>5. Try typing some new text.
						>
						>The text you try typing will be in the changed font.  It should be in the
						>original font since the font style change was the victim of an undo.  You
						>will also notice that your ReadVersion6 (sic) routine is not called in this
						>case.  I don't think the undo mechanism works where there is no text
						>replacement.  It only seems to work where there is text replacement.

970626	CHANGE	LGP		Replace global variable sDoingUpdateModeReplaceOn in TextInteractor_ with
						a data member for thread-safety (e.g. for activeX controls).

970626	Fixed	LGP		StandardStyledTextInteractor::SetDefaultFont () needs to call AboutTo/DidUpdateText(),
						for empty selections where we change font (since StandardStyledTextImager::SetStyleInfo()
						to smart and optimizes away these calls).
970620	REPORT	JoeWill	At 9:54 PM 6/20/97:
		(0449)			>One other thing, I found a bug in Led that is visible in LedIt and even
						>more in my application (since I have toolbars that reflect the current
						>font).  
						>
						>How to reproduce bug:  1.  Create new document, 2. Change font size, 3.
						>Look at font size again.
						>
						>If you look at the font, the update handler (maybe because of the cached
						>font) does not properly reflect the new font.  If you type something, it
						>will reflect the new font and then the update handler works.  However, it
						>doesn't update the font until you type something.
						
970626	Fixed	LGP		Needs mfc42,dll, msvcrt.dll, olepro32.dll, msvcp50.dll. See SPR#0454, #0455.
970405	REPORT	LGP		In ActiveLedIt, See what DLLs are required to be distributed with ActiveLedIt!
		(0453)

970626	Fixed	LGP		This is now working at least acceptably. I'm now using an .inf file (cuz easier to
						edit on HTTP server side). And I have referred to proper needed DLLs (see spr#0453).
						This doesn't work always. But - for now - I think I can defer the remaining problems.
						At least til real users start reporting them. And I can ignore the code-signing issue
						to MS/Verisign get their collective acts together. See #0455.
970623	Working	LGP		Mostly done. Have CAB file stuff mostly working. I still need to register
						and get a secured ID (tried once but webpage stuff crashed).
						And on some machines CAB download stuff doesn't seem to work right (I think problem
						with MFC DLLs not found).
970405	REPORT	LGP		In ActiveLedIt, See what needs to be distributed so CODEBASE stuff works with
		(0454)			control (so I can put it on my web page)

970625	Fixed	LGP		Fixed. Also, I got rid of the LedIt! & LedLineIt! gCurrentlyOpeningDoc
						hack used to communicate which doc was being opened to the VIEW CTOR.
						Instead - use the more MFC-friendly OnInitialUpdate() mechanism.
							Now - for LedLineIt! PC, is MDI. And has the NewWindow command,
						so you can create two simultaneous views onto the same file, and edit
						either one, and see the other dynamicly redisplay. Cool.
970619	REPORT	Simone	Make LedLineIt! MDI. At least for programming, she thinks this would
		(0452)			make it much more usable. I'm not sure. But I may at least try it.

970625	Fixed	LGP		Fixed. Also, see #0452.
970624	REPORT	JoeWill	At 7:04 PM 6/24/97, Joe Wilcoxson wrote:
						>Lewis,
						>
						>Most people who use your lib will be lazy like me and not want to derive
						>their own document class, they will just hack yours.  Your performance hack
						>assumed SDI.  I modified it so it is independent of the frame window:
						...
						>                        // Peculiar performance hack. Lots of parts of Led will do 'Refresh' to
						...
						>                        POSITION pos = GetFirstViewPosition();
						>                        CView* pView = GetNextView(pos);
						>                        LedItView*      v               =       dynamic_cast<LedItView*> (pView);
						>                        if (v != NULL) {
						>                                v->Refresh ();
						>                        }


------------------- Released 2.2b1 - 970623- Below ------------------------------
970623	Fixed	LGP		Did the LayoutWidth part (reset - ResetTabStops now #0451).
						Substantial change.
							The focus of this change was to facilitate writing a full-word-procesor
						(ie adding the feature that margins can be specified on a per-partitionmarker
						basis).
						<OLDCODENOTE>
						Any old code that called GetLayoutWidth()/SetLayoutWidth(), or
						ComputeMaxHScrollPos () will probably need to be looked at closely,
						and probably changed substantially.
							The good news is that this code is much improved, and there is a good chance
						whatever you were trying todo here is now much simpler.
							There is no longer a SetLayoutWidth () method. And GetLayoutWidth() has
						been removed from TextImager_, and moved to WordWrappedTextImager, and had
						a 'currentPartitionMarker' argument (for supporting differnet wrap-widths on
						different paragraphs).
							Old code which called SetLayoutWidth() is probably simply unneeded anymore.
						Instead, you probably must override GetLayoutWidth() and provide the value you
						would have SET with SetLayoutWidth().
							Old code which called GetLayoutWidth () now requires an argument specifying
						which PartitionMarker you need the LayoutWidth for.
							Also, ComputeMaxHScrollPos () is now virtual. The default is to not allow
						any HSCROLLING. If you want HSCROLLING, you'll need to override this to say how
						much. Thats generally pretty trivial (see LedLineItView:: ComputeMaxHScrollPos ())
						in the LedLineIt! shareware app for an example).
							Calls to ComputeMaxHScrollPos () shouldn't need any changes. 
						</OLDCODENOTE>
970616	WORKING	LGP		Do more on ResetTabStops/LayoutWidth etc to implement
		(0450)			left-right-center justification per-paragraph, and margins too.

970623	Fixed	LGP		Fixed
970323	REPORT	LGP		When doing release, rename mac LedIt! and LedLineIt!
						shareware release packages "Install_..." like I did
						on the server this last (a1) release. And put the
						mac .sit files into the PC release _src folder as well.
						(idea is to keep packages as similar as possible/heflpul)

970623	Fixed	LGP		Fixed
970405	REPORT	LGP		In ActiveLedIt, Fix version string (include in about box)

970623	Fixed	LGP		Fixed
970405	REPORT	LGP		ActiveLedIt! - Do about box (based on old ones)

970623	Fixed	LGP		I did all the icons. They don't look great, but acceptable.
970617	REPORT	LGP		Need decent icons (before b1 release).

970623	Fixed	LGP		Revised (slightly) all the about boxes. Now they at least say
						properly which product, and have the right icon.
970617	REPORT	LGP		Fix ALL about boxes (before b1 release).

970623	Fixed	LGP		I did all the icons. They don't look great, but acceptable.
970323	Note	LGP		Got first cut icon from Patty. Get more recent ones and other
						artwork updates before b1.
970226	REPORT	SLP		At 5:05 PM 2/26/97, Simone Pringle wrote:
						> New icon for ...LedLineIt!  Maybe Patty can do it?

970623	CHANGE	LGP		Lose debug code to test _OrSurroundings() change is working properly.

970620	Fixed
970620	REPORT	LGP		ActiveLedIt! control doesn't display when not active.

970620	REPORT	Fixed	Trouble was code to update statusbar with curLine#.
970619	REPORT	Simone	At 9:54 PM 6/19/97, simone wrote:
		(0447)			>1)  ANY print preview in my machine seems to crash with a memory error.
						(LedLineIt)

970620	CHANGE	LGP		Speed tweek RTF reading. Fixed some Windows-specific hotspots
		(0455)			in reading RTF files (rtf spec as an example).
						TextImager_::GetStaticDefaultFont () now caches results. Is expensive
						to compute, and was called quite often in reading RTF files.
						Similarly, added PokeTMHeight () speed tweek to avoid costly calls
						to GetPointSize/SetPointSize (no scaling to 'points' really needed)
						in MergeIn, which is called alot reading in RTF files.
							Break Led_SmallStackBuffer<T>::GrowToSize () out into two impelemntation
						routines to get it better inlined by MSVC50.
							And added private GetMarkerStart_/GetMarkerEnd_ () utilities in
						ChunkedArrayTextStore to avoid virtual function call overheads, and
						further tweek RTF file reading (this should help both mac and
						windows, but this time I'm only profiling on windows).
							Use vector<string> instead of map<string> for keeping track of
						atom database in rtf reader. This saves a bit of time on Windoze, cuz
						I can use binsearch, and with the magic of specifying own comparator
						I can avoid constructing a string object on lookup.
							And several other small tweeks. Now times look like this:
						(reading RTF 1.4 Spec, on PentPro200, running NT)
						Word7.0:		3 seconds
						LedIt!2.1		18 seconds
						LedIt!2.2a2		24 seconds
						LedIt!2.2b1x	8 seconds		(as of now; current build)
						WordPad			1 second
							So my tweeks so far are a big improvement. But they still leave ALOT to
						be done (I should be at least as fast as WordPad!). See spr# 0446.

970619	Fixed	LGP
970619	REPORT	LGP		In LedLineIt!, select somewhere in the last line of the buffer, and
						say shift-right/shift-left. Crash.

970618	Fixed	LGP		Well, the user docs have never been that good. But a little
						better.
970617	REPORT	LGP		Need reasonable first cut at UserDocs (before b1 release).

970618	Close	LGP		I can find no way todo this. No need though. Just create a 'shortcut'
						on windows, or alias on mac.
970323	REPORT	LGP		See if I can do auto-redirect index.html files in Led class lib docs.

970618	Fixed	LGP		Fixed.
970323	REPORT	LGP		Test BuildLedItDocs script on NT (with gnu stuff)

970618	Fixed	LGP		Fixed. Added a few ifdefs for LedLineIt case. Lots more editing needs to
						be done, but at least most of the names are now right. And script to build
						docs now targets LedIt! and LedLineIt!.
970323	REPORT	LGP		Do first cut at LedLineIt docs.

970618	Fixed	LGP		Worked on installers. Now it seems we only need MSVCRT20.DLL on pc.
						Go figure!
970323	Note	LGP		Did most of this. But review the installer technology before b1.
970318	REPORT	LGP		Update Installer before my next pre-release (or at least before
						Beta). Try new installer stuff from MSVC50. New demo apps require
						new MSVC50 DLLs.

970618	CHANGE	LGP		Moved OD stuff and TCL stuff into new folder "(Obsolete)".


------------------- Released 2.2a2 - 970617 - Below ------------------------------
970616	CHANGE	LGP		ResetTabStops change (at least small one first so I can finish
						#0444.
							And moved 3-arg CalcSegmentSize() call from TextImager_ to
						PartitioningTextImager. Probably will make further changes to
						this code.
							The point of all these changes is in support of #0444, and
						to support having different alignments, tabstops, etc on a per-paragraph
						basis.
							Add xtra PartitionMarker* arg to PartitioningTextImager ::ResetTabStops (). 
						<OLDCODENOTE>
							If you had called ResetTabStops () directly, you'll need to add an extra (pm)
						arg. Watch out if you had called TextImager_::CalcSegmentSize () directly (instead
						of through a virtual function call). 
						</OLDCODENOTE>
							I'll probably be revisiting all this very soon. But I'm unsure how to
						proceed further towards a full word-processing style editor. I'll give
						it a days rest. And think some more.

970616	CHANGE	LGP		No more SetTabStopList (). Instead, made GetTabStopList()
		(0444)			virtual. And a 'containingPos' arg has been added.
						The purpose of this change is to allow for differnt
						tabstop lists being associated with different
						partitionmarkers (for word-processors).
						<OLDCODENOTE>
						Replace old calls to SetTabStopList () with an override
						of GetTabStopList (size_t), which returns the variable
						you HAD been passing to SetTabStopList().
						</OLDCODE>

970616	CHANGE	LGP		Break TextInteractorMixins.h into parts.
						<OLDCODENOTE>
						SimpleTextInteractor moved into SimpleTextInteractor.h. 
						WordWrappedTextInteractor moved into WordWrappedTextInteractor.h. 
						StandardStyledWordWrappedTextInteractor moved into WordProcessing.h.
						Typically this will just mean you need to change your #include
						in your MainView.h file (e.g. LedItView.h for the LedIt! applet).
						</OLDCODENOTE>

970616	CHANGE	LGP		Built Mac and Windows project files (and renamed
						project files from .proj to .mcp) for CWPro1. Tried
						to build on either mac or
						windows targetting either Mac or Windows. Not quite.
						Maybe it will work by CWPro2. But I'm a little closer.

970616	Fixed			Fixed. Also had to fix/update the RTF_Preserving
						tutorial (cuz now I read in colortable for real).
970616	REPORT	LGP		Support color in RTF format files.
		(0441)

970616	Fixed			Fixed. Introduced new VERSION6 fileformat. Can read old. But
						old copies of Led (& LedIt! won't be able to read version 6 files).
						Use RTF for better cross-version compatability.
970616	REPORT	LGP		Support subscript/superscript and color in Led-private
		(0440)			file format.

970616	Fixed			DUP of #0436.
970305	REPORT	SLP		At 2:18 PM 3/5/97, Simone Pringle wrote:
						>How about being able to select a bunch of text and tab it left or right?

970616	REPORT	LGP		Fixed (except see#0440)
970501	REPORT	JoeWill	Support subscript/superscript. Joe did much of the work.
		(0439)			Sent me some code-fragments.

970615	Fixed
970323	REPORT	LGP		Select a paragraph. (Windoz, LedIt! only). Move cursor over word
		(0438)			at end of selection (end of paragraph, more than one row
						down). click, and let the mouse up slowly, then dbl-click again
						fast - selects whole para that was selected before above again.
						Maybe I need to be more careful about moving the cursor and still
						calling it a double click?

970615	Fixed			First added TextInteractor_::WhileSimpleMouseTracking ()
						utility method. Then used in it Led_PP_, and Led_MFC_.
						Then, revised the WhileSimpleMouseTracking () to handle
						hscrolling (and qDynamiclyChooseAutoScrollIncrement, since
						that was already being done in the PC-specific code).
						Now much clearer/cleaner code for this stuff. And does h-autoscroll!
970323	NOTE	LGP		SB easy, and cleanup/better share code for class-lib wrappers.
						Add method like WhileSimpleMouseTracking (Led_Point mousePos) to
						TextInteractor_, and have that do the logic for auto-scrolling
						(including NEW logic for h-autoscrolling). Then replace old
						manual autoscroll calls from Led_MFC_, etc. with this helper
						calls. 
970115	REPORT	LGP		Autoscrolling during mouse drags should do horizontal as well
		(0437)			as vertical scrolling (currently does only vertical).

970615	Fixed			Implemented for Mac and PC.
970614	REPORT	LGP		ShiftLeft/ShiftRight UI command support in LedLineIt.
		(0436)			Ctrl-[/Ctrl-] on mac, and Ctrl-TAB/Ctrl-TAB-Shift on PC.
						Handling UNDO was slightly tricky. Should consider a simpler programming
						API for handling UNDO. What I have works. But its far from idiotproof.

970614	Fixed	LGP		There were two bugs here.
							The first appears to be a bug with GetTextExtentExPoint () on Windows95
						when talking to Printer drivers. Seems there is a fairly small max# of
						pixels. So we must breakup our calls accordingly. This is the problem which
						Joe Willcoxson reported the fix for.
							The second problem was more generic. It really affects all use
						of measuretext for word-wrapping. The details are pretty well documented
						in WordWrappedTextImager::FindWrapPointForMeasuredText (). But basicly
						they come down to the fact that for rows after the first, the calculation
						for word-wrap-point can be wrong by up to a pixel. I've made some small coding
						changes which should account for this, and added asserts to check.
970613	WORKING	LGP
970523	REPORT	JoeWill	At 6:02 PM 5/23/97, Joe Willcoxson wrote:
		(0435)			>Lewis,
						>
						>I found a nasty printing bug affecting word wrapping.  It's your own fault
						>for believing Microsoft documentation ;).
						...
						>// Because this implementation is so complex and we have one which is so
						>simple - call the //simple one
						>// to make sure it produces the same results (of course only when debug
						>turned on!!!)
						>Led_Assert (bestRowLength == FindWrapPoint_ReferenceImplementation (buf +
						>startSoFar, leftToGo, wrapWidth, start+startSoFar));
						>
						>
						>Cause:
						>
						>Well, you made some assumptions based on MS documentation.  The problem
						>occurs in the API call ::GetTextExtentExPoint().  While calculating the
						>size of my paragraph (which was 1160 bytes), I noticed that the
						>Led_Distance array maxed out at 6553 starting at index [960].  From 960 to
						>1160, the array was filled with the constant value 6553.  The SIZE
						>structure returned by the API call had a .cx member value of 6553.  This
						>means that the API thought the string/paragraph was 6553 bytes long
						>OR............  it maxed out.
						>
						>Actually, it maxed out.  My printer is 600 dpi, and my display is 120 dpi
						>using GetDeviceCaps(LOGPIXELSX).  This is a ratio of 5:1.  32767 / 5 =
						>6553!!!  So, the call is limited by physical pixels not logical pixels.
						>
						>FIX:
						>
						>In static void PortableGDI_MeasureText(), make this change:
						>
						>#elif   qWindows
						>        Led_Distance    kMaxTextWidthResult     =       kRunning32BitGDI? 0x7fffffff: 0x7fff;
						>        if (tablet->IsPrinting()){
						>                CSize ve = tablet->GetViewportExt();
						>                CSize we = tablet->GetWindowExt();
						>                kMaxTextWidthResult = MulDiv(kMaxTextWidthResult, we.cx, ve.cx) - 1;
						>        }
						>#endif
						>
						>I made it divide the max GDI value by the ratio of printer pix to display
						>pix.  This seems to solve the wrapping problem.
						>
						>I am still getting a problem with the Led_Assert I mentioned, but it might
						>be a problem in the simpler calc width routine.  I am still looking into
						>it.  If you need the text file this occured on to duplicate the problem, I
						>can send it to you.

970613	Fixed	LGP		Fixed. This call to SetLayoutWidth () is a vestige of the 2.1 way of handling
						LayoutWidth (). It was simply deleted.
970613	REPORT	LGP		At 1:23 PM 5/22/97, Joe Willcoxson wrote:
		(0434)			>I looked at the Led_MFC_::OnPrepareDC() routine where you setup the printer
						>DC.  It seems as if you scale the printer DC so it maps to a display DC.
						>This is why tab offsets do not have to be adjusted when printing occurs.
						>The default action you have for LedIt is that the tab positions get
						>readjusted.
						>
						>I know that using SetLayoutWidth is new for 2.2.  I found two printer
						>related issues for you to look at:
						>
						>1. In Led_MFC_::OnPrepareDC(), remove the call to SetLayoutWidth
						>(winRect.Width ());.  At least you might want to consider this.  I
						>originally set my layout width to be 6 inches.  I don't want it to wrap to
						>the width of the page, I want it to stop at the width I specify and see on
						>the screen.

970613	Fixed	LGP		As you had hinted at (maybe even directly found/stated someplace, but I
						couldn't find where), the trouble was TextImager_::TabletChangedMetrics () 
						was resetting the fDefaultTabStopList.fPixelsPerTabStop based on
						the new DC. This isn't needed anymore, now that I use MM_ANISTROPIC
						mapping mode to print.
						At the same time, hardwire that I use MM_ANISTROPIC - lose old code
						that manaully tried to scale the font. I think MM_ANISTROPIC
						approach is strictly better.
970520	REPORT	JoeWill	At 5:04 PM 5/20/97, Joe Willcoxson wrote:
		(0430)			>Lewis,
						>
						>My experience with SetLayoutWidth:  It works for screen display, but not
						>for printing.  Instead of wrapping at a predefined width, text wraps at the
						>device edge during printing.
						>
						>Tabs:  They get displayed OK, but they do not print correctly.  They take
						>up way too much space on the printed page.  The following string takes up
						>nearly the whole width of the page: "s\th\ti\tt".

970613	Fixed	LGP		The fix was that TextImager_::ResetTabStops () must be careful to subtract out
						and then re-add left margin position surrounding calls to
						ComputeTabStopAfterPosition  ().
970528	REPORT	JoeWill	At 3:20 PM 5/28/97, Joe Willcoxson wrote:
		(0429)			>Lewis,
						>
						>I found a problem with using custom tab stops after the first line of a
						>paragraph.  This problem does not manifest itself with the default tab stop
						>list.
						>
						>The TextImager_::ResetTabStops tries to figure out where the tab stops are
						>by calling GetTabStopList().GetTabStopAfterPosition(widthSoFar).  The
						>problem with this is that values greater that the wrapping width get passed
						>for tabs that are after the first line of a paragraph.  However, there is
						>no way for the tab stop list to know how to translate from the widthSoFar
						>into a left margin based value.  You can't simply do a modulus on the
						>wrapping width because words don't get wrapped evenly on the wrap width,
						>there is usually a difference.  With the default tab list, you can do a
						>simple calculation that will work even though "widthSoFar" is not quite
						>correct.
						>
						>Any suggestion?  It seems to me that to correctly pass in the value to
						>GetTabStopAfterPosition(), we would need to know where the wrap point is
						>for the previous line.

970613	Fixed	LGP		Largely addressed by spr#0428.
960528	DEFER	LGP		I should write a release note about this!
960528	Close	LGP		I now understand this reasonably well. The problem does NOT occur with
						true-type fonts. It only happens with bitmap fonts. And I think only then
						when the printer does font substitution.
960226	REPORT	LGP		Fix MFC printing !!! maybe only problem now is where word-break happens? Is that it?
						And do styles come through at all in printed docs???

970613	Close	LGP		See spr#0428. We pick true-type fonts by default now. If user picks other font,
						thats his problem. I see nothing I can do about this. If anyone disagrees,
						they can report this again.
960718	DEFER	LGP		Now I can reproduce this. I develop on NT,
						and the bug does NOT
						reproduce under NT. But it DOES under Win95
						(when using NON-truetype fonts).
960711	REPORT	LGP		At 9:54 AM 7/11/96, Douglas B. Stein wrote:
						>>At 5:06 PM 7/8/96, jmitchell@cc-mail.derwent.co.uk wrote: 
						>>>     Text Engine Class Library or just the Led It! application. When typing 
						>>>     in italics some of the characters aren't displayed properly, ie, parts 
						>>>     of them are cut off and the caret is a long way from where the
						>>>     character appears.

970613	Fixed	LGP		Fixed. See spr#0428 
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960910	COMMENT	LGP		See #0378-#0381
960528	DEFER	LGP
960528	REPORT	LGP		Not happy with how we pick default font. Especially in light of how badly
		(0378)			we print with Non-TRUETYPE fonts we probably should pick a truetype font
						by default. But I'm not sure of any good way todo this.
						I've experimented a bit with the code in TextImager_::GetStaticDefaultFont ()
						but haven't found anything reasonable. So I'm sticking to my old code
						which just uses the ANSI_VAR_FONT.
						Eventually, part of a better solution would be to allow a user-preference
						to specify this.

970613	Fixed	LGP		Fixed. I now have a much smarter algorithm to try to pick a good
						default font. I hope it will well in a variety of circumstances.
						But it weighs finding "Arial" enuf that on my machine, thats what
						it picks. And it weights finding TRUETYPE VERY heavily.
970318	REPORT	LGP		On LedIt! / Windows, try setting default font to Ariel, so its
		(0428)			truetype, and printing works better??? See how well that works.
						Similarly, pick a good default font for LedLineIt.

970613	NOTE	LGP		Fixed (thanx Joe!)
970424	NOTE	JoeWill	At 5:14 PM 4/24/97, Joe Willcoxson wrote:
						>Lewis,
						>
						>Found and fixed problem in:
						>
						>void    TextImager_::SetDefaultFont (const Led_IncrementalFontSpecification&
						>defaultFont)
						>
						>
						>In 2.1 you had a member called fooo (windows of course) that you put the OS
						>rep into and then you merged it into the default font.  In 2.2 you directly
						>put the OS rep into default font.  That resulted in members that were not
						>zero-ized that should have been zero-ized because of the way fonts are
						>merged throughout the rest of the code.  By re-adding another
						>Led_FontSpecification and doing the OS rep then merge, the fonts are now
						>being displayed properly.  Because of the way fonts are merged, it matters
						>a great deal what the original font is.
970424	NOTE	LGP		I sent email to him saying I'd fix this for 2.2.
970424	REPORT	JoeWill	At 1:42 PM 4/24/97, Joe Willcoxson wrote:
		(0426)			>Message I sent yesterday which must have gotten lost in the ether:
						>
						>Lewis,
						>
						>LedIt 2.2a does not display the fonts correctly.  The Arial 10 and Times
						>New Roman 10 look as if they are magnified when compared to WordPad or Word
						>or LedIt 2.1.  This occurs in a normal view as well as print preview.  I am
						>talking about the MFC versions.

970613	FIXED	LGP		Fixed. Led_IncrementalFontSpecification now has a 'fDidSetOSRepCallFlag'
						flag. If true, then MergeIn() will do a full memcpy of the LOGFONT.
						This should allow arbitrary LOGFONT specifications. However, the rest
						of the API may work unpredictably if you mix and match incremental font
						specifications (say changing font size or face) with SetOSRep() calls.
						The details of what happens when you use SetOSRep () directly with a LOGFONT
						are up to your understanding of the Windoze FontMatcher.
970512	REPORT	Remo	> From: Remo Eichenberger
		(0425)			> Subject: DefaultFont ???
						> Date: Montag, 12. Mai 1997 16:05
						...
						> I have a problem with "set default font".
						> The whole font selection functions with the most fonts but not with all
						> of them.
						> I need for example for my MS LINEDRAW character font the following
						> LOGFONT  settings:
						> 
						>       lf.lfWeight = FW_NORMAL;
						>       lf.lfCharSet = SYMBOL_CHARSET;
						>       lf.lfPitchAndFamily = FF_SWISS | FF_ROMAN | FIXED_PITCH;
						>       lf.lfOutPrecision = OUT_STROKE_PRECIS;
						>       lf.lfClipPrecision = CLIP_STROKE_PRECIS; 
						>       lf.lfQuality = DRAFT_QUALITY;
						>       lf.lfWidth = 0;
						> 
						> However, these are not undertaken logically with MERGEIN.
						> IncrementalFontSpe...::MergeIn don't work with such fonts. I
						> How does it bring to this one that for LED that such character fonts also
						> works? Or how can i set any font with any characteristics as default ?

970612	Change	LGP		Lose compiler bug define support for CW10 (now only support CW11 and later on mac
						and msvc42 and later on windows).

970612	Change	LGP		Update PowerPlant apps to define no backward compat flags
						(for PowerPlant1.7/CW12/CWPro1), and eliminated use of obsolete
						PowerPlant constructs (mostly registrar).

970612	Change	LGP		ChunkedArrayTextStore code optimized with
						QUICK_Contains() check which avoids virtual function call.

970613	NOTE	LGP		This feature is now conditional on qLedAssertsDefaultToMFCAsserts,
						and it defaults OFF. I find this behavior to be a MAJOR pain.
						If (as is common in Led, since thats its nature) you get asserts
						during display, the MFC assert code brings up an alert, which - when
						dismissed (or moved or whatever) triggers re-entrant calls
						into the display code before you even bottom out and get to the
						next instruction after the assert which triggered. Makes debugging
						a major pain.
970610	Fixed	LGP		I added filename/line# to my assertion macros and conditionally
						set the led assertion handler to one which vectors to the MFC version.
						This isn't exactly what you asked for, but it respects the module
						bounaries I've tried to preserve, and I think it has all the
						functionality you requested.
970603	REPORT	JoeWill	At 6:31 PM 6/3/97, Joe Willcoxson wrote:
		(0424)			>2. Somewhere, maybe LedSupport.h ?
						>
						>#ifdef qMFC
						>#define Led_Assert(x) ASSERT(x)
						>#define Led_Require(x) ASSERT(x)
						>#define Led_Ensure(x) ASSERT(x)
						>#define Led_Verify VERIFY(x)
						>#endif
						>
						>IMHO, MFC assert macros are a little nicer than the led ones, and are
						>handled a little better by the debugger.

970610	Fixed	LGP		Added #if qIncludePrefixFile then #include "stdafx.h" to the start of
						each Led source file (didn't use qMFC, cuz not ALL MFC users will want this).
						NB: you must now define qIncludePrefixFile in MSVC/C++ settings dialog to
						get the file included.
970603	REPORT	JoeWill	At 6:31 PM 6/3/97, Joe Willcoxson wrote:
		(0423)			>I lied about one more thing in the last post...
						>
						>If you want to make Led more friendly for MFC developers, which are
						>possibly your biggest potential customer base, here are a few suggestions:
						>
						>1.  Include at the top of your .cpp files:
						>
						>#ifdef qMFC
						>#include "stdafx.h" // makes easier use of VC++ precompiled headers
						>#endif

970609	Change	LGP		ChunkedArrayTextStore::CollectAllMarkerInRange  () optimized with
						QUICK_Overlap() check which avoids virtual function call.

970609	Change	LGP		Cleaned up lots of code which used to CollectAllMarkerInRange() code spread
						throughout Led which followed a complex idiom like:
						CollectAllMarkersInRange ((from>1)? (from-1): 1, (to <= GetLength ()+1)?(to+1): to); 
						into a terser, more clear
						CollectAllMarkersInRange_OrSurroundings (from, to);
						Old code doing things the old way will continue to work.

970609	Change	LGP		Take advantage of new templated MarkersOfATypeMarkerSinkWithCompare , and
						CollectAllMarkersInRange () support to cleanup/simplify alot of code. See
						spr# 0422. And in a few places (really several) avoid extra copying of
						markers which could save time (like SummarizeStyleMarkers).
						SummarizeStyleMarkers 
						<OLDCODENOTE>
						StyledTextImager ::SummarizeStyleMarkers () API changed incompatably.
						Very unlikely anyone would have called this. 
						</OLDCODENODE>

970605	Fixed	LGP		Fixed. Calling old APIs should work.
						<OLDCODENOTE>
						Code which overrode TextStore::CollectAllMarkersInRangeInto () will need to be updated. 
						</OLDCODENODE>
						It used to take as arg a Led_Array. Now there is an abstract class MarkerSink which is used,
						and a helper class and backward compat/utility methods which return a Led_Array of the found
						markers.
							I considered using member templates, but since MWERKS didn't support this, and since
						I'm not sure it would work out anyhow (having to peek at details inside the .cpp files).
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960829	REPORT	LGP		Led_Array<Marker*>		markers	=	GetTextStore ().CollectAllMarkersInRange (from, to);
		(0422)			Add a version of CollectAllMarkersInRange - maybe as a method of MarkerOwner - that
						restricts to grabbiung markers owned by that guy. Also maybe add one that takes
						a filter-proc ptr.

970605	Fixed	LGP		See SPR# 420 for more details. But the fix was to eliminate the start!=end test
						in 'Overlap()'. But I also did lots of re-org of this code as well to
						improve clarity.
970604	REPORT	JoeWill	At 12:53 PM 6/4/97, Joe Willcoxson wrote:
		(421)			>Lewis,
						>
						>I haven't looked to find the solution, but partition markers have a neat
						>"feature".  This code will fail to return a partition marker if the cursor
						>is at the beginning of a line with nothing selected:
						>
						>
						>size_t from, to;
						>GetSelection(&from, to); // interactor method
						>Led_Array<Marker*>      markers;
						>GetTextStore().CollectAllMarkersInRangeInto (from, to, &markers);

970605	Fixed	LGP		After much consideration, and feedback from JoeWillcox (see SPR# 421),
						I've decided to change the Overlap test to allow for the case where
						'start == end' for the given marker. I'm not sure why I ever prohibited
						that particular case. I think is was merely a stupid mistake. But if there
						was some good reason for it, I hope it makes itself know quickly, now that I've
						taken the plunge and made the change.
							Also, I've gotten rid of a bunch of unused Overlap/Contains() methods from
						Marker.h. And the Overlap code from there is now gone algotether.
						Instead it is a (static) method of TextStore_ (since the only meaning of Overlap
						is in defining the behavior of CollectAllMarkersInRange())
							The old code is still available via defining qSupportLed21CompatAPI.
						<OLDCODENOTE>
							If you have code which called Overlap or Contains (), or counted on details of the
						results of the return value of TextStore::CollectAllMarkersInRange (), you should
						review SPR# 420, and either update your code, or define qSupportLed21CompatAPI and
						call the _Compat21 versions of these functions. 
						</OLDCODENOTE>
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960829	REPORT	LGP		Reconsider the OVERLAP() code in Marker.hh.
		(0420)			Has very wide implications so consider
						carefully. But right now, if i have a bunch of zero-width markers,
						collectAllMarkersinRange never finds them!!!

970405	Change	LGP		Implemented first cut at ActiveLedIt! - an ActiveX control based on
						the Led class library. Its mostly working, though very crufty
						around the edges.

970326	Change	LGP		Created a new CW project file with the new CW20 alpha release for LedIt!.
						Not sure its ready to bother checking in or not.

970326	Fixed	LGP		Done. Helped a bit, but not enourmously.
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960911	DUP		LGP		RTF Speed Tweek (from profiling):
						string copy/compare very expensive. Do the tokenizing hack
						mentioned earier for rtf control words
						to make handling them much faster.
960901	REPORT	LGP		Add IDs as performace hack for ControlWords in RTF reader/writer.
		(0385)			Extend ControlWord structure to
						either have string, or ID, and have table of predefined
						(for common cases) IDs. Maybe ALWAYS
						use IDs, and have IDs consed up and kept in auto-growing (hash?)
						table? Profile first to see
						if any need.

970326	Fixed	LGP		Mostly fixed. See #0419
961030	DEFER	LGP		Defer, and probably do in Led 2.2.
960911	REPORT	LGP		RTF Speed Tweek (from profiling):
						void	StyledTextIOReader_RTF::ScanForwardFor (const char* setOfChars)
						takes alot of time. It could be faster by doing a block read, and scanning directly.
						Maybe? Avoid single char-at-a-time read overhead anyhow.

970326	Fixed	LGP		I fixed the RTF table entry, and did a speed tweek (2-3x). I didn't
						make the structure change he suggested. I sent mail explaining why.
						Also, added qOverrideDefaultSentinalValue in response to one of
						his requests.
970130	REPORT	PERG@WW	PERG@WordWork email from 1/30/97 - speed tweek and RTF bugfix in table.
		(0419)


------------------- Released 2.2a1 - 970322 - Below ------------------------------
970321	Fixed	LGP		See #418.
970315	REPORT	LGP		Tripple click should select whole line (or row) on Windows version
						(does - I believe already on the mac)
 
970321	Fixed	LGP		See #418.
951030	DEFER	LGP		Defer, and probably do in Led 2.2.
960430	DEFER			Reviewed
950611	DEFER	LGP
950611	REPORT	DougSt	Triple-click/drag should select by rows. Currently
		(0331)			doesn't even track

970321	Fixed	LGP		This worked out WONDERFULLY.
						Added a new virtual method WhileTrackingConstrainSelection ()
						to TextInteractor. Then changed Led_XXXClassLib classes to
						call this, instead of manually doing their own constraint code.
						That greatly simplified things. And then this will also allow
						Remo to cleanly solve his problem as well.
						At the same time, this made it easy to add triple-click support
						to select row for MSWindows. Also, I never had tripeclick
						properly tracking - even on the mac - selecting lines 
						(see SPR#0331).
970321	Note	LGP		The basic idea I have is to rewrite the code in Led_MFC (and
						Led_TCL etc) to call a ConstrainSelectionDuringTracking() method.
						This could then be overriden to implement the existing
						constraint-to-word-boudaries code - greatly simplifying it I expect.
						And more importantly, Remo could use it for his line-based selection
						(without having to get into the guts of Led_MFC_).
						Redoing the word-selection code is a bigger committment. But just
						putting in calls to a no-op hook should be easy, and give Remo
						what he needs. I can then do the rest later. I think I'll try this
						for my next release.
970321	REPORT	remo@ac	At 3:16 PM 3/21/97, Remo Eichenberger wrote:
		(0418)			> 
						> >And another little problem is that i want a new
						selection-block-mechanism
						> >that allow me to select only whole rows. i think
						> >this is simple to implement, or ?
						...
						>>         I'll need to think about this some more. I cannot promise this
						>new
						>> functionality will be in Led 2.2. But you should let me know how
						>important
						>> it is to you, since that will affect my priorities.
						>
						>this feature is very important for us in the feature. It would be good if
						>you 
						>would be able to implement that (if it is not a too large expenditure).
						>I can also attempt it myself.

970321	Fixed	LGP		Ugh! After hours in debugging hell, I've emerged victorious :-)
						God I hate that scrollbits code!
970318	Working	LGP		And - perhaps also related - scrolling on LedIt! Windows appears
						very crufty as well (vertical). Leaves cruft behind. LedIt! Mac
						works fine.
970315	REPORT	LGP		As part of my earlier mac fix for scrolling - I appear to have
						introduced a windoz bug. Scrolling UP when I had a selection
						near the bottom of the window, sometimes leaves some black cruft
						at the bottom.

970318	Change	LGP		On Windows, use new GetScrollInfo/SetScrollInfo 32bit
						SBAR API, so I now can set page-size of elevator.
						Also, allowed me to lose hack code to scale sbar values to 16bits.
951030	DEFER	LGP		Defer, and probably do in Led 2.2.
950611	DEFER	LGP
950611	REPORT	LGP		SBar thumb doesn't adjust size on Win95
		(0332)			

970317	Fixed	LGP		Nope. I was wrong. The problem is that Windows (at least NT40),
						can sometimes return a POS for the scrollpos arg (in OnVScroll)
						larger than the Max value. This seems like a Windows bug to me.
						But who am I to say. Anyhow, I now test for nPos >= max, instead
						of equal-to - to handle the special case of dragging the thumb
						to the end of the scrollbar.
970315	Working	LGP		Close to solving. Problem has todo with the fact that the
						values we retrieve in Led_MFC_::OnVScroll()'s call
						to GetScrollRange() on the SB_THUMBTRACK can be stale
						cuz we've scrolled several times (and the max depends on
						getlength() MINUS amount in window - which itself changes
						as we scroll).
						A workaround - which doesn't work terribly well - is to place a
						call to UpdateScrollbars() just before our call to GetScrollRange().
						This may be too much of a performance hit? Maybe its OK.
						Anyhow, another choice would be to adjust the logic to not
						depend on a proper value haivn been set into the max-field.
						That would probably be better.
970315	Working	LGP		Can reproduce. First must open large file. Then the problem
						happens with smaller ones.
970315	REPORT	SLP		Drag of thumb to end of sbar on Windows doesn't necesarily
						take you to the last line.

970318	CHANGE	LGP		Added qDynamiclyChooseAutoScrollIncrement. Now - if defined (yes by default),
						then we scroll by more than one (pixel/h, line/v) after you've scrolled
						a bit. This makes scrolling appear much faster. And since we don't do it
						when you do your first scroll, it doesn't detract from your ability todo
						fine positioning. Really primarily of use for slower machines.

970318	REPORT	LGP		Fixed
970315	Working	LGP		Lost Cmd-G goes to stats bar. Still must handle tab/return key.
970305	REPORT	SLP		Be sure to lose CMD-G goes to status bar. Bring up dialog.
						And make tab/return etc be aliiease to lose focus when in ledlineit
						gotoline dlog/status bar edit field.

970318	REPORT	LGP		Fixed
970315	Working	LGP		Mostly understood. The problem has todo with calculating
						the scroll-width of the hscrollbar. In particular, if you comment
						out the code in LedLineItView::UpdateScrollBars() which
						calls CalcualteLongestRowIn... and uses that for a call
						to SetLayoutWidth () - then the speed problem goes away.
						Not really sure how to resolve this. Must think some...
970315	Working	LGP		Did reproduce on WinNT40 (Thales) with d4x release build.
						Seems to only happen just after you do a goto line command.
970315	REPORT	SLP		At 4:57 PM 2/26/97, Simone Pringle wrote:
						>Scrolling slows down...
						>
						>If you hold the mouse down on the down arrow and watch things  
						>scroll, you'll notice that the speed of scrolling slows down  
						>drastically!

970318	REPORT	LGP		Fixed
970318	REPORT	LGP		Fix bug with TextImager_::CalculateLongestRowInWindowPixelWidth ()
						on first line of window (ignores its width)

970318	Fixed	LGP		Bug when we do vscrolling in LedLineIt with a non-zero GetHScrollPos().
						Now we pin our max value so this scroll-to-pos never becomes invalid.

970315	Fixed	LGP		I think this now works better. You still get a space AFTER the word.
						But not before. OK?
970305	REPORT	SLP		At 5:08 PM 3/5/97, Simone Pringle wrote:
						>If you copy a word ("word") and you paste it to an empty line, you get:
						>
						> word
						>
						>with a space before the word...

970315	Fixed	LGP		Was toggling its value in the SetupMenuCmdUI hook, not the
						menu hook for changing value!
970315	REPORT	SLP		Smart cut and paste menu option on windows appears flaky.

970315	Fixed	LGP		Well, improved anyhow?
						I no longer perform smart cut and paste unless the text starts and
						ends with a non-space character. This seems to make it behave a little
						more intuitively (for me anyhow). Anyone out there got a more
						rigorous definition of how this should work?
						Also, I fixed a bug where the undo information got lost. Hope its
						right now, but still not sure.
970315	Note	LGP		And works pretty badly with copying of whole lines. Very annoying in that
 						case. And pretty annoying when you copy just whatspace. Need to be
 						considerably more selective.
970304	REPORT	LGP		Smart Drag And Drop not quite perfect. Debug a bit more.
						And retest CutAndPaste as well. Seems occasionally we forget
						a space or two (with d&d - undo OK?).

970315	Fixed	LGP
970315	REPORT	LGP		lose syntax editor stuff from LedLineIt project.
						Should be able to rebuild it from the docs in the syntax editor demo.
						Also, add "this" keyword to demo source.

970315	Fixed	LGP		Trouble was we need to invert from region from end of last
						line to end of windowrect (bottom). Used to correct for this
						in scrollbits code. But apparently not anymore. Better now
						that we invert to the end. Makes scrollbits code simpler/clearer.
						And produces more visually pleasing result.
970304	REPORT	LGP		OpenLedBugs file in LedIt! Macintosh. Select ALL text.
						And start scrolling in the down arrow scrollbar icon.
						Occasionally drops lines!
						VERY BAD!!!

970315	Fixed	LGP		Easy. Trouble was in WordWrappedTextImager, I had forgotten to get
						rid of some tests for qUseTabStops when I deleted the #define and
						just always supported tabstops.
970304	REPORT	LGP		Word wrap code not quite right. Serious problem. Try the top-level
						Led ReadMe file on the mac. Goes a character or two too wide.
						DEBUG THIS IMMEDIATELY!

970314	CHANGE	LGP		PORT TO MSVC50

970314	Fixed	LGP		Aha! Now I see. The key thing is the fact that you are using
						the styled-text stuff TOGETHER with LedLineIt!. Thats why I
						couldn't (and though you didn't say so, I can now see that
						you could not either) reproduce the problem with
						the LedLineIt! Windows binary I distributed.
        				The problem was a logical clipping bug with StyledTextImager::DrawSegment (),
        				not taking into account horizontal scrolling.
970314	Report	remo@ac	At 5:47 AM 3/14/97, Remo Eichenberger wrote:
						>Hi Lewis,
						>
						>OK, I have try to create the error with your project (LedLineIt 2.2d3).
						>
						>First, my Environment:
						>
						>1) Pentium 133, NT 4.0, Ati Mach64, 64MB Ram
						>2) Visual C++ 4.2 with 4.2b Patch.
						>3) Led Release 2.2d3
						>
						>you can reproduce the problem with following steps:
						>
						>1) Insert my patched LineItView.cpp/.h in your 2.2d3 ( it's only the
						>tutorial-version.)
						>2) Insert your tutorial-syntaxcoloring.cpp/.h
						>3) Build LedLineIt
						>4) Start and load sourcefile SyntaxColoring.cpp in the led-editor
						>5) Goto Endofline
						>6) Write 20x "return" with (copy/Paste) . It is important that it is a
						>"Keyword".
						>7) you see that "return" disapear.
						>
						>I hope this helps.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
????	REPORT	LGP		Must hide caret on loss of last facet before frame closed
						and be careful to get right on facet creation as well

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
960305	REPORT	LGP		Reimplement LedParts Drag/Drop and clipboard support using the same Led stuff
						that LedIt! Mac does. That may not make it into 2.0.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
960226	REPORT	LGP		Add ability of OD part to read LedIt! private formaat files

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
951104	REPORT	LGP		(Actually, this only happens from SimpleText 1.2 - Finder OK,
						how about others??
951103	REPORT	LGP		Drag of file or text with more than 1 format onto Led Part will cause
						Alert to appear which makes Led hang. Investigating via net workarounds.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
960514	REPORT			qUseOffscreenBitmapsToReduceFlicker doesn't work for OpenDoc, and is
						currently disabled. Not a big deal, since only of minor benefit.
						The trouble is with the facet/processing of embeddings. We must
						do some magic to make all this offscreen crap work with facets.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
960215	REPORT	LGP		There is still some code in Led marked #if qOpenDoc. Its mainly allocating
						regions usind ODNewRgn() and using special #define for qd globals.
						Should find some way - if possible - to not use that define. Would be better
						if no OD dependencies at all in Led itself.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
??????	REPORT	LGP		Halfway added SamplePart DoDialog() code. Still have old Alert()based
						about box. Swtich to new way. And either get DoDialog stuff working
						for error alerts, or simply replace with assertion errors.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
??????	REPORT	LGP		Debug cut&paste - why no tet on clipboard? And placement of cursor
						and what gets cut and paste not quite right.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
??????	REPORT	LGP		Distant future TODO is to add a preferences dialog, 
						or maybe a formatting dialog, saying a margin around the window
						and perhaps specifiying a fixed layout width rather than the size
						of the window.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
??????	REPORT	LGP		Place a LedPart into a TestContainer. Do a ViewSource Window. Then
						close the original test container. We get a crash closing the
						'view in source' window in call from our own code (CloseAndRelease on Window).
						I just copied code for this from SampleC++ part. Unsure what might be
						wrong, but don't worry too much for now - maybe post to the net.

970315	Closed	LGP		Now that Apple has declared OpenDoc dead, I think I can declare this closed!
960718	DEFER	LGP		<OPENDOC>
??????	REPORT	LGP		At 11:22 PM 4/29/96, RM DAscenzo <rmd103@psu.edu> wrote:
						>Also, after launching LedIt, it seems that whenever I try to change 
						>the "Kind" section under Document Info to anything other then LedIt 
						>Styled Text...LedIt closes. What am I missing?

						This is a bug, and I've filed it in my bug database. My top priority are bugs with the
						mac and windows LedIt! applications, so I cannot promise when I will get to this. I
						will notify you if/when it is fixed, via email however.


------------------- Released 2.2d3 - 970304 - Below ------------------------------
970304	Change	LGP		Extract most of the 'line independent' and really partitioning-only
		(413)			code from LineBasedTextImager and put it into new base class
						'PartitioningTextImager'. LineBasedTextImager is now a trivial
						subclass of PartitioningTextImager.
						Someday - we should rewrite MultirowTextImager etc to be able to subclass
						from any different PartitioningTextImager (to facilitate things like
						LECs SideBySide mode). Perhaps use templated base class?
						Anyhow, even without that, this should improve the clarity of
						the code. See SPR#414.

970304	Done	LGP		Added this as an option to TextInteractor_ (defaults true).
						Note we do both cut&paste/drag&drop. The trickiest part here
						was with the undo support.
						Also note there are some rough edges about what we constitute
						spaces/word breaks etc. We may want to fine tune this. But the
						most obvious, most glaring cases work.
						On LedIt/LedLineIt MAC - this option is on/off via #define in LedIt/LedLineIt
						Config. On Windows, we added menu item option (soon to be options dialog - I hope).
951030	DEFER	LGP		Defer, and probably do in Led 2.2.
960518	DEFER	LGP		
960516	REPORT	LGP		Intelligent cut&paste/drag&drop, the way Style on Mac does
						it. Then lose the silly whitespace selecting dblclick
						crap for windows (I think? at least optionally).
						Probably will DEFER this.

970303	Closed	LGP		Did for 2.2d2, and a little for this release.
951030	DEFER	LGP		Defer, and probably do in Led 2.2.
961015	REPORT	LGP		Use templates (as with new LEC dict design) to simplify
						the various text interactor mixin classes, and make easier
						doing different mixins. (not well thought out, just a guess
						that this can be used).

970303	Closed	LGP		This is logically equivilent to the "New" command for an SDI app.
						Really no point. Do you still disagree?
970226	REPORT	SLP		At 4:54 PM 2/26/97, Simone Pringle wrote:
						>2. It (LedLineIt!) needs a File/Close

970303	Done	LGP		See #0391
970226	REPORT	SLP		At 5:00 PM 2/26/97, Simone Pringle wrote:
						>Re: LedLineIt! has no lines!
						>I can't go down to a particular line!

970303	Done	LGP		Well - enuf. LedLineIt! Windows now shows current line # in the status bar.
						Both LedLineIts have a goto line command (which shows the current line).
						And if you click on status bar line# in LedLineIt, it can be edited in place (neat!).
951030	DEFER	LGP		Defer, and probably do in Led 2.2.
961030	Note	LGP		And also place row/column# there as well (someone else requested line#).
961002	DEFER	LGP		Low priority feature request
960918	REPORT	AWI		PC-version only.
		(0391)			(ST#02, priority=minor)
						The Text Editor does not indicate which page the cursor is on
						in a multipage document
						Reproduce:
						1.  Open a large document with many pages.
						2.  Page down several pages and notice that there is no pagination.
						3.  The work around is to go to print preview.
						Expected behavior:
						Suggest that the active page number appear in the bottom status bar,
						near ‘press F1 for help’.

970303	Done	LGP
970228	REPORT	LGP		Add Goto LedIt (and LedLineIt and Sophist Solutions)
						Web Page command to help menu. 

970228	Done	LGP		The erasebackground call is made virtual so that you can use this
						as a hook to provide some sort of multi-media, picture or whatever
						as your background. Note that the is called during the draw
						process as a side-effect.
						So to have a changing background, you would need to both force periodic
						updates, and override this routine.
						Note - this change necessitated changing the API for MultiRowTextImager::DrawInterLineSpace ().
						<OLDCODENOTE>
						void	MultiRowTextImager::DrawInterLineSpace (MultiRowPartitionMarker* pm, Led_Tablet tablet, Led_Coordinate vPosOfTopOfInterlineSpace, Led_Color eraseColor, bool printing)
						became:
						void	MultiRowTextImager::DrawInterLineSpace (MultiRowPartitionMarker* pm, Led_Tablet tablet, Led_Coordinate vPosOfTopOfInterlineSpace, bool segmentHilighted, bool printing)
						</OLDCODENOTE>
970120	REPORT	LGP		Add TextImager::EraseBackground () method todo the current
						eraserects. The reason is to give a good hook for
						some applications that want to change the background.
						One such example might be for watermarks. The one
						asked for was some multimedia application.

970228	Done	LGP		For both Mac and Windows versions of LedLineIt. Mac always has on.
						Windows has it as a user-configurable option.
970120	REPORT	LGP		LedLineIt should support (optionally) auto-indenting.

970228	Done	LGP		Except for the note to MWERKS. Guess I'll wait til Led 2.2 is released.
						I'm so bad at marketting/sales :-)
970119	REPORT	LGP		Do simple Syntax coloring demo (first hack it into LedLineIt, and then
						rip it out, and put the diffs into a tutorial). When this is done,
						drop a note to MWERKS, and see if they would be interested in using this
						for CW12.

970129	CHANGE	LGP		Tried. Autoinline vs. inline made no diff in speed (at least
						after minimal testing), but a very big difference in code size.
						Go with 'normal' inlining. NOT 'auto-inlining'.
970120	REPORT	LGP		When I get CW11 - try out differnt compiler options
						to see what is best. Esp. autoinline vs. normal inlining.

970129	CHANGE	LGP		Lose StyledTextIOReader_CheckFileAndQueryUserDesiredFormat. Was
						unused. Gonna rethink anyhow.

970120	Fixed	LGP		
960718	DEFER	LGP		
951105	REPORT	LGP		Test builds of NO-STYLE versions of Led


------------------- Released 2.2d2 - 970119 - Below ------------------------------
970119	Fixed	LGP		Mostly fixed, except for file format support (covered under SPR#0410).
970115	Working	LGP		Beginning to look into this...
951030	DEFER	LGP		Defer, and probably do in Led 2.2.
961030	Note	LGP		See closed 0356 (DUP).
961022	REPORT	robm	robm@shore.net says:
		(0400)			Support colored text, including color information from RTF.

970118	Change	LGP		tabstops set to 4 chars in LedLineIt (LedIt! uses 1/3 inch)

970118	Change	LGP		default font set to monaco for mac, and Courier 10 for Windows
						versions of LedLineIt.

970115	Change	LGP		Instead of being a simple portable typedef, Led_Color is now
						a portable wrapper class, and added new predefined colors,
						kRed,kBlue, etc as members. kBlackColor/kWhiteColor now
						obsolete (supproted via qSupportLed21CompatAPI).

970115	Change	LGP		Added Get/Set TextColor() methods to Led_FontSpecification/
						Led_IncrementalFontSpecification classes. Still haven't done
						anything with it yet though...

970115	FIXED	LGP		Done
961030	NOTE	LGP		See #0184
960820	NOTE	LGP		I've thought about this, and thouyh you can mostly fake this via
						SetWindowRect(), that seemed to me a little bit of a kludge. Plus
						I think it makes impossible having TextInteractor do the right thing
						in ScrollToSelection (hscrolling to make caret visible). So the RIGHT
						thing I believe todo is to add a SetHScrollPos() method to
						TextInteractor, and to use this field/value in most of the places we use
						GetWindowRect().left. Plus - of course - fix above mentioend scroll-to-selection,
						and need special code to shift HScrollPos back to (less? zero?) when we
						vscroll and don't need the extra space to see the whole page.
960430	DEFER			Reviewed
941029	Defer	LGP		First - I don't think this report accurately reflects
						what is happening. I believe (on the Mac) there IS
						a horizontal scrollbar. I believe there are two
						problems. One is a display problem - not properly
						refreshing the screen on horizontal scrolls. And the
						other is not properly setting the ImageWidth to reflect
						how long the longest line is. Neither of these
						problems - however - have any relevance for LVEJ,
						since it will always run in word-wrapped mode. I will
						fix this problem eventually - but it is not needed
						for the LVEJ product, and so I am defering this.
941028	REPORT	Jeremy	(LEC#6007)    a1      Horizontal scroll bar doesn't
		(0052)			exist.  Thus if you type beyond your window's width
						you cannot view what you're typing.
						Resolve Jeremy  Lewis   3 Mac     Quadra 840 AV   
						7.1+JLK 94.10.28        Medium  Editor  

970115	FIXED	LGP		Use SimpleTextImager (or set large layoutwidth) to shut off
						wordwrap. And Led_MFC/Led_PP support scrollbars. And Led itself
						now supports Get/SetHScrollPos() and related methods.
961030	NOTE	LGP		See #0052
960430	DEFER			Reviewed
950323	DEFER
950323	REPORT	LGP		Add ability to shut word wrap off, and to do horizontal scrolling
		(0184)

970113	Change	LGP		Added eDefaultUpdate to list of UpdateModes, and added a
						'default update mode' attribute to TextIteractor. This turns out
						to be a very useful hack (together with stack-based setter/resetter
						helper class TemporarilySetUpdateMode), to implement mixins of
						differing UpdateMode methods, which call each other, and want to shut
						off default updating of the other.


------------------- Released 2.2d1 - 970109 - Below ------------------------------
970109	CHANGE	LGP		New SimpleTextImager implementation. Very rough, but usable. Not wordwrapped.
						Will probably change name soon.

970109	CHANGE	LGP		Renamed WordWrappedTextInteractor.h --> TextInteractorMixins.h
						At same time added lots of templated mixin helpers... Docuemnt better!!!
						<OLDCODENOTE>
						Must update makefiles. And if qSupportLed21CompatAPI is off, you cannot
						use several predefined mixin classes, and must use instead new, more
						flexible templated mixin helpers.
						</OLDCODENOTE>

970109	CHANGE	LGP		Added qSupportLed21CompatAPI. Defaults to off. Turn on to make it
						easier to get Led2.1(and earlier)-based code working with Led 2.2.

970109	Fixed	LGP
961230	REPORT	LGP		For Led 2.2, include the Led Licenses in the package of sources!!!

970109	CHANGE	LGP		Massive change to how scrolling code organized. Much work with
						templated mixin stuff (now much simpler than even before - scrolling
						stuff much simpler).
						Obsoleted some routines, but mostly things should work as before, old
						APIs emualted.

970109	Fixed	LGP		Did as requested
970109	REPORT	perg@ww	At 4:31 PM 1/9/97, perg@wordwork.se wrote:
						>Hi Lewis!
						>Just now I'm writing a class that needs to inherit 
						>StyledTextIOReader_RTF::ReaderContext::Destination_.
						>However StyledTextIOReader_RTF::ReaderContext is declared as protected in 
						>StyledTextIO.hh and I saw
						>no other way around this than changing it to public in your Led code.
						>Now, modifying Led code is something I'd rather avoid since it requires more 
						>work when you ship updates,
						>so I wonder if you could make the same change in future releases of 
						>StyledTextIO.hh aswell?

970107	CHANGE LGP		New strategy for SetLayoutWidth()/SetWindowRect/DidUpdateText ().
		(0409)			Now no longer AUTOSET of LayoutWidth. Subclassers of Led must do so. Default is
						zero layout width (ERROR).
						&&&&&&&&&&&&&&&&&&NOT BACKWARD COMATABLE&&&&&&&&&&&&&&&&&&
						<OLDCODENOTE>
						VERY IMPORTANT!
						Old Led subclasses will likely compile OK, but not run properly. This is
						because the default LayoutWidth () is zero. You must specify one somehow.
						To replicate the old, Led2.1 and earilier behavior, override SetWindowRect ()
						as below:
						override	void	LedItView::SetWindowRect (const Led_Rect& windowRect, UpdateMode updateMode)
							{
								// Hook all changes in the window width, so we can update the wrap-point
								SetLayoutWidth (Led_Max (windowRect.GetWidth (), 1));
								inherited::SetWindowRect (windowRect, updateMode);
							}
						Or alternately, you can Set the LayoutWidth () just once in your CTOR
						to some predefined width (and add scrollbars). Or any of several other
						variations. See the upcomming FAQ/Recipies document on calling 'SetLayoutWidth'.
						</OLDCODENOTE>

970107	CHANGE	LGP		Added :
						nonvirtual	size_t			GetStartOfNextRowFromRowContainingPosition (size_t charPosition) const;
						nonvirtual	size_t			GetStartOfPrevRowFromRowContainingPosition (size_t charPosition) const;
						helper functions. perhaps someday utilize this idea to may a portable (templated?)
						RowReference that works genericly for TextImager_ - with no performance loss. Anyhow, can use
						these routines in much the same way...

970107	CHANGE 	LGP		Added :
						nonvirtual	Led_Distance	CalcSegmentSize (size_t from, size_t to) const;	// simple wrapper that grabs text first
						Simple helper/wrapper.

970105	Fixed	perg@ww	The real trouble is that I had only half-way enforced a decisions that I
						had made back then. AboutToUpdateText () no longer returns any value, and
						you must throw an exception to prevent text updates. The Recipies file
						has been updated to reflect this change.
						Also, to enforce something else in comments, I've added throw () specifiers
						to the DidUpdate() calls.
						<OLDCODENOTE>
						So note: 
						Marker::AboutToUpdateText () && MarkerOwner::AboutToUpdateText () no longer
						return a bool. Instead, to interupt text update, throw an exception.
						And Marker::DidUpdateText () && MarkerOwner::DidUpdateText () now have
						a throw () specifier to disable throws theirin.
						</OLDCODENOTE>
970103	REPORT	perg@ww	At 6:58 AM 1/3/97, perg@wordwork.se wrote:
						>Hi Lewis!
						>Yesterday I wrote a marker subclass that needs to prevent updates of the 
						>text it marks.
						>I override  AboutToUpdateText and return false if certain conditions are 
						>met.
						>The problem is that this doesn't seem to work the way you describe in 
						>recipies.html -001.
						>>From what I can see the return value of  AboutToUpdateText doesn't cause the 
						>update to
						>be abandoned anywhere.
						>Am I doing something wrong or isn't it implemented?
						>If it isn't implemented when do you plan to do it?
						>If you don't plan to do it in the near future, could you please provide some 
						>tips/suggestions,
						> and I will do it myself cause this is really urgent.
						>/Per

961230	Change	LGP		Removed old 20CompatHeaders (.hh)

961223	Change	LGP		STARTED WORK ON LedLineIt! - a lined-based version of LedIt
						(with horz scrolling)

------------------- Released 2.1 - 961213 - Below ------------------------------
961213	NOTE	LGP		A few minor changes to docs, and names of things (version# etc).


---------------- Released 2.1rc1 - 961205 - Below ------------------------------
961205	Fixed	LGP		OK.
961031	REPORT	LGP		Add 100K to SIZE resource for 68K project

961129	Fixed	LGP		Mirror .hh file names in a special 20CompatHeaders directory. Why pollute
						main folder with lots of silly names, which will needless confuse new users.
						Old users who need the compat can easily add this dir to their include path.
961108	NOTE	LGP		OK. But also add in mirror .hh file names for backward
						compatability.
961108	REPORT	KDJ		Don't use .hh file name suffix. Use .h (much more common,
						on pc and elsewhere). And .hh doesn't work well with MSVC4.2.

961129	Fixed	LGP		Fixed. Added working (though slow) TextStore_::GetLineContainingPosition ()
						etc implementations (were stubbed out as NYI).
961129	REPORT	remo@ac	At 5:56 AM 11/29/96, Remo Eichenberger wrote:
						>Hi Lewis
						>
						>i belief i have found a bug ... it's replicable with your current Ledit
						>Release ... Press
						>CTRL-CRSDOWN .
						>
						>It's call TextStore_::GetLineContainingPosition that not implemented ...
						>
						>call stack:
						>
						>TextStore_::GetLineContainingPosition(unsigned int 0x0000003a) line 287
						>TextImager_::ComputeRelativePosition(unsigned int 0x0000003a,
						>TextImager_::CursorMovementDirection eCursorToEnd,
						>TextImager_::CursorMovementUnit eCursorByLine) line 1062 + 50 bytes
						>MultiRowTextImager::ComputeRelativePosition(unsigned int 0x0000003a,
						>TextImager_::CursorMovementDirection eCursorToEnd,
						>TextImager_::CursorMovementUnit eCursorByLine) line 771 + 39 bytes
						>TextInteractor_::DoSingleCharCursorEdit(TextImager_::CursorMovementDirection
						>eCursorToEnd, TextImager_::CursorMovementUnit eCursorByLine,
						>TextInteractor_::CursorMovementAction eCursorMoving,
						>TextInteractor_::UpdateMode eDelayedUpdate, int ...) line 1233 +
						>Led_MFC_::OnKeyDown(unsigned int 0x00000028, unsigned int 0x00000001,
						>unsigned int 0x00000001) line 922

961122	Change	LGP		Fix comments about GetLineCount() etc in LineBasedTextImager.

961122	Change	LGP		Make StyledTextImager::SummarizeStyleMarkers() virtual
						so easier to make multiple views keep different lists of
						style markups.

961121	Fixed	LGP			
961121	REPORT	dougst	OpenURL when IC misconfigured
						doesn't properly fall through to Spyglass AppletEvent
						code.

961101	Change	LGP		PC-Only. DIBs dragged out of MSIE 3.0 now work.
						A bit of a hack. MSIE 3.0 generates both FILE and DIB objects on the clip
						for when we drag out pictures.
						Made a minor change to
						StandardStyledTextInteractor::InternalizeBestFlavor () to allow
						us to grab the dibs in that case.
						I just hope it doesn't cause too much trouble for other cases.
						For Led 2.2, we must completely rewrite this code and find
						a better way to choose what to grab out of a clip package...

961101	Fixed	LGP		Added StandardDIBWithURLStyleMarker
961101	REPORT	LGP		Need DIBWithURL embedding

961101	Fixed	LGP		Fixed (and updated ActivPad code)
961031	REPORT	LGP		StandardPictureURLSt... should have SetURLD() mehtod - cleanup
						AWI override code to just thunk to old constructer-static function
						and then call this (really two cases of this on mac and pc in AWI
						code).


---------------- Released 2.1b2 - 961030 - Below ------------------------------
961030	Fixed	LGP		
961015	REPORT	LGP		Re-upload binary IC 1.3 files. They got screwed up on upload
						to prodicus. Allow default upload as hqx as I had before and
						problem with go away!

961030	Fixed	LGP		Fixed/Worked around. In StandardStyledTextInteractor::ExternalizeFlavors ()
						disable optimization where we only write out single-selected-embedding.
						Must also write other flavors, cuz we don't write a sensible type for
						unknown embeddings like RTF-picts. Someday maybe come up with
						a better, less costly solution.
961015	REPORT	LGP		Drag RTF unknown embedding fails. Then when we just
						click on it it fails (at least on pc).
						See #0397.

961030	Fixed	LGP		Fixed (also related bug where fTitle not stored into HTMLInfo).
961015	REPORT	LGP		Keep an HTMLInfo structure associated with each LedIt! document.
						so save/restore will preserve header info.

961030	Close	LGP		DUP of SPR#0400
960529	DEFER	LGP		
960529	REPORT	LGP		We should support colored text.
		(0356)

961030	Fixed	LGP		Fixed (dup of 0403)
960917	REPORT	LGP		Mac scrolling bug. See #0388.
		(0389)			Scroll up arrow one line and under certain circumstances we get cruft
						at very bottom of page. No erase last line.
						Really we should revisit both the mac and windows code. On windows, though
						I've never seen cruft left, I do see a funny line of crufy temporarily while
						scrolling. This looks ugly.

961030	Fixed	LGP		Was on Mac and PC.
						On PC, seems main trouble is that ScrollDC() seems to produce eratic
						results, and switching to ScrollWindow() seemed to make all the problems
						(including magic constants I used to have to add for windows) go away.
						This is much simpler now, and in fact, works!
						Also, major speed tweek on scroll up. When we scrollup we must
						invalidate sliver at top and bottom of screen, and so we get
						very large bounding rect on update region (defeating some
						logical clipping optimizations). Just update each sliver separaetely
						and logical clipping optimizations work again.
961015	REPORT	LGP		Scrolling bug (at least on mac). On a several page long document
		(0403)			hit the scroll one-line button (topmost arrow pointing up).
						We sometimes (frequently) don't erase the bottom exposed line (area
						past bottom of last line) when there are more lines left below the
						end of the page.
						This bug existed in Led 2.0 as well.

961030	Fixed	LGP		New Led build option - qScrollTextDuringThumbTracking -
						defaults to true (only available for Led_MFC).
960820	REPORT	SLP		Simones says we should do dynamic screen update while
						dragging thumb (scrolling) on PC.
						Not so sure, but not too hard todo, so why not...

961030	Fixed	LGP		
960917	REPORT	LGP		Open file on LedIt! Mac. Save as LedIt file format. Then save-as plain text
						ontop of already existing (open) LedIt! file, and we get error -47.

961029	Fixed	LGP		Fixed.
961022	REPORT	robm	robm@shore.net says:
		(0401)			Support the forward-delete key from LedIt! mac application.

961029	Fixed	LGP		Fixed. Now LedIt! pc code actaully uses eDefaultType by default
						from LedItConfig.h
961029	REPORT	LGP		On PC, default file type for new doc is HTML. Should be
						.led.

961029	Change	LGP		Lose Led_LinkedList implementation. Never used, and would be
						better now to just use STL.

961029	Fixed	LGP		Fixed
						Basicly rewrote how we handling printing. Instead of scaling our
						font size in TextImager, instead I use an appropriate Anistropic
						mapping mode strictly within Led_MFC. This is MUCH nice and MUCH
						cleaner. I'm not sure why I didn't do this to begin with, except
						possibly gross stupidity, or fear about how it would work with
						OLE (doc says doesn't work with anistropic, but maybe misleading,
						and sure seems to work fine).
960918	REPORT	AWI		PC-version only.
		(0392)			(ST#08, priority=moderate)
						ActivPad on the PC prints graphics and objects too small, not to scale.
						Reproduce:
						1.  Embed some objects and pictures in an ActivPad file.
						2.  Go to print preview.
						3.  The result is the text is OK, but the graphics preview very tiny.
						The print resembles the preview. 
						Expected behavior:
						The graphics and objects should print the same size as the ActivPad displays.
						(The same objects (and all other print samples) are correctly sized on
						the Mac printouts.)

961029	Fixed	LGP		Fixed
960918	REPORT	AWI		PC-version only.
		(0390)			(ST#01, priority=minor)
						The Next Page button in Print Preview will not gray out at
						the end of a multi page document or on a one page document.
						Reproduce:
						1.  Open a one page document and click on File/Print Preview from the menu bar.
						Result: the next page button will redraw the current print preview document.
						And:
						Open a multi page document and click on File/Print Preview from the menu bar.
						Continue to click on Next Page button to the last page of the document. 
						Expected behavior:
						The Next Page button should be grayed out.  

961028	Fixed	LGP		EM_UNDO/EM_CANUNDO etc support in Led_MFC.

961028	Fixed	LGP		Trouble wasn' font. Was code to set font/size. But forgot to reset
						TextFace(0) (problem was maconly).
961015	REPORT	LGP		URLD display code counts on existing font of surrounding text, or some
						such. Appears to vary randomly, so we get funny displays! (try opeing some
						HTML files with anchors).

961028	Fixed	LGP		Changed defaults in TextStore_ object declaration itself.
961015	REPORT	LGP		LedIt! Mac/Windows find default should NOT be whole word checked.

961028	Fixed	LGP		This got rid of most of the warnings I had in Led. Still a few
						remain, mostly for good reasons, as a reminder to me to fix
						some minor things.
961015	REPORT	LGP		Add Led_Arg_Unused() macro hack to shutup compiler about
						silly warnings for case where we cannot comment out
						parameter (where we use the parameter for some conditional
						compile cases).

961022	Fixed	LGP		I just look for "\rtf" instead of "\rtf1"
961022	Note	LGP		Hmm. I've gotten to the bottom of the problem. I'm not 100% sure
						if its more of a Led bug or a ClarisWorks bug. The trouble is the
						arg to \rtf. According to the SPEC I have, the arg should be "1" not "0".
961022	REPORT	LGP		>>        I just downloaded the Macintosh version of LedIt! 2.1b1
						>>        and tried to Open... and drag-n-drop RTF files, but LedIt!
						>>        is not translating them properly.
						>>
						>>        Here is the sample RTF file as seen by LedIt!
						>>
						>>{\rtf0\mac\deff21{\fonttbl{\f1024 \fnil American Heritage;}{\f2011 \fnil
						>...
						>>
						>>        I used ClarisWorks 4.0v4 to generate a four line
						>>        wordprocessing file and saved it as RTF.  The third
						>>        line should have a bold style; the fourth line should
						>>        be in color red.
						>>
						>>        Am I doing something wrong?

961021	Fixed	LGP		See #0399.
961021	REPORT	LGP		Open file 'a' file and crash. HTML reader/detector bug
						also.

961021	Fixed	LGP		See #0399. And fixed Reader for HTML to NOT think this is an
						HTML file.
961015	REPORT	LGP		A source file from DataDesk caused Led to crash in the
						RTF/HTML readers/format guesser code. The file has been saved
						as CRASH_LED_21b1 in my current Led source directory. Delete
						this file when done as it contains proprietery DataDesk material.

961021	Fixed	LGP		Fixing HTML format guesser code makes these problems go away.
						Probably STILL some bug with the HTML reader code for these
						files, but it looks like thats a problem with MSL string class
						lib. And shouldn't be a problem now unless someone manually opens
						these files as HTML.
961021	Working	LGP		Still some problems with this 'test' file. Very hard to debug.
						Menu gets corrupted after throw!??
						My guess is has todo with new string stuff in
						HTML reader. Commenting out code to auto-detect
						file as HTML seems to make most of the problems go
						away. First, we should fix HTML guess-format code not
						to guess this file is HTML!
961021	Working	LGP		Also there was a problem cleaning up in the LedItDoc
						CTOR - deleting the mWindow. I don't really understand
						why. I suspect some sort of MWERKS exception handling bug.
						Anyhow, pulling the BuildWindow() code out of the CTOR
						and forcing people to call it separetely seems to have
						fixed the problem.
961021	Working	LGP		Bug was mostly that STL resets set_new_handler to NULL
						internally. So our newhandler never called, and new was
						just returning NULL. I reported bug to MWERKS, but workaround
						was to not set our own newhandler, and instead say:
							__throws_bad_alloc = 1;
						in Main.cpp (where I used to set new handler).
						Then in LedItApplication, must catch (bad_alloc)
						and map that to our old low-mem handling exception code.
961021	REPORT	LGP		Open file 'test' (large sample file). LedIt! 2.1b1 on mac
		(0399)			crashes.


---------------- Released 2.1b1 - 961015 - Below ------------------------------
961015	Fixed	LGP		A number of minor changes if qThrowAwayMostUnknownHTMLTags true,
						to insert "\t¥\t", for <li>, and "----..." for <hr> etc.

961015	Fixed	LGP		HTML reader now deals better with unknown font names on the mac.
						Default to Geneva isntead of Chicago.

961015	Fixed	LGP		HTML writer now writes fontsize info.

961015	Fixed	LGP		HTML reader now interprets A hrefs as embedding URL-object embeddings.

961015	Fixed	LGP		HTML reader now interprets H1..H7 as changing font size, and going bold.

961015	Fixed	LGP		Added new qThrowAwayMostUnknownHTMLTags define. Default to TRUE. This makes
						reader VERY lossy, but makes its appearance MUCH more intuitive as well.
						This is NOT meant for professional HTML editing. Just enuf to be very simple
						for naive use.

961015	Fixed	LGP		HTML writer now supports entityrefs, and we added a few additional
						ones to the table of supported entityrefs.

961015	Fixed	LGP		PC OpenURL code for MSIE required linking to urlmon.lib, which
						caused LedIt! PC to fail to start on systems without MSIE.
						Fix was to use LoadLibrary/GetProcAddress() instead of
						directly calling URL apis (in LedSupport, URLManager).

961015	Change	LGP		Moved some char/case instensative helper routines to LedSupport.

961014	Fixed	LGP		As a side-effect of #0396.
						At least for now. May need to be careful if we ever stop writing
						full RTF version of copy-to-clipboard out.
960901	REPORT	LGP		Copy/Paste of RTF embeddings doesn't work (when singly selected -
		(0397)			works OK as part of Led-private file format).
						Also, make sure we interoperate with MSWord via clipboard/RTF
						(even for special case of embedded pictures).

961014	Fixed	LGP		As a side-effect of #0396.
960917	NOTE	LGP		I think simone saw this with mailer, but you can reproduce with news on NT4.0
						(MSIE 3.0 news reader).
						Select some text from an article being read, and try to paste it. You get
						back an error. Trouble must have todo with what formats are on the clipboard,
						and my trying to embed object, when I should be just grabbing the text.
960820	REPORT	SLP		Simones paste bug. Ask her for help characterizing it.

961014	Fixed	LGP		Really just did RTF. HTML isn't really dealt with in this way.
						When we support paste-as/drop-as, maybe we'll support the type.
961002	REPORT	LGP		Integrate HTML/RTF support into Internalize/Externalize code, so it works
		(0396)			with clipboard/D&D.

961014	Fixed	LGP
960917	REPORT	LGP		Fix width on Mac of file type list popup in sfgetfile/sfputfile dialogs.

961014	Fixed	LGP		Works acceptably now. At least a credible first cut at writing HTML.
961014	Working	LGP		Supported Font & BaseFont tags <Font Size=X, FACE=Y>.
961014	Working	LGP		Supported entity refs (at least those 3; there is a table to add more).
961003	REPORT	LGP		HTML reader/writer.
		(0394)			Support reading <Font Size=X, FACE=Y>.
						Support reading some entity refs (&lt,&gt,&quot).
						Currently no decent writing HTML support - so make that work as well
						as reading HTML code.

961014	Change	LGP		Support/Include Internet Config 1.3 (just downloaded and tested,
						and change what we distribute. No code changes).

961014	Change	LGP		HTML. On Table/TR/LI tags, emit NL so spacing looks a little better.

961014	Fixed	LGP		Still rough around the edges, but I think its acceptable for now.
961003	REPORT	LGP		HTML reader.
		(0395)			Must normalize spaces (except in pre text etc). Not just drop NLs on the floor.
						Trouble is tabs do wrong thing, and if we stip out NLs at end of line words
						get stuck together. Normalize between words to a single space.

961014	Fixed	LGP		On Mac. Was already OK on PC.
961004	REPORT	LGP		SaveAs for different types doesn't seem to work on MacPP
						application. Gets wrong TYPE. Also look into SaveACopyAs
						and make sure THAT works too.

961012	Fixed	LGP		worked with doug on MSIE 3.0 URLD format stuff. Now it supports
						"UniformResourceLocator" clip/D&D format
						and uses ActiveX "HlinkNavigateString" to open URLs
						when activeX is present.
961003	REPORT	LGP		MSIE support for Addison Wesley/URLs. Waiting for feedback from them
						about how this should work.

961012	Fixed	LGP
961012	REPORT	LGP		ExternalizeFlavor_TEXT() on pc wasn't writing trailing
						NUL-byte so last char
						was being dropped on externalizes (like copy to clip).


---------------- Released 2.1d3 - 961004 - Below ------------------------------
961004	Change	LGP		Moved (updated) RTF Preserving code into Doc section, and
						created new "tutorial" docs showing how to use it.

961004	Fixed	LGP		I can see nothing wrong with my handling of any of these.
						Can you be more specific about whats wrong?
960923	REPORT	sven@ww	In addition, the following characters should be recognized and given   
						appropriate
						treatment:
						\~ (nb space), \_ (nb hyphen), \- (opt hyphen), \| (formula char),
						\: (index subentry), \tab, \bullet, \emspace, \enspace

961004	Fixed	LGP		Fixed. Similarly, \tab is now handled through the same mechanism.
960923	REPORT	sven@ww	Do very simple HTML Reader/Writer. At least support font/style markups fully.
						>* Support for RTF character names not complete.
						>
						>The following characters should
						>be output "by name" instead of by character code.
						>\emdash, \endash, \lquote, \rquote, \ldblquote, \rdblquote

961003	Fixed			I have something preliminary in place. Reading works decently, and still now
						WRITING support.
						See SPR#394 for remaining items togo.
960909	Working			Beginnings of HTML support in place. Still much more togo - even for this release.
960906	REPORT	LGP		Do very simple HTML Reader/Writer. At least support font/style markups fully.
		(0376)			For other markups, make atomic TAGS (embeddings) from the text of the item.
						Then - with paste-as
						people should be able to easily create these tags themselves. (future version could do
						better job with unknown tags, and optionally auto-coalesce them into atomic objects, and
						auto-thaw them as well). See #0375

961003	Fixed	LGP		I applied this re-organization to the RTF code, and the RTF_Preserving code.
						I think it makes it much clearer. Also applied the same technique for HTML.
961002	REPORT	LGP		Use _par, _b, _i, _UnknownTag() paradigm instead of just switch statement in
						HandleControlWord() within RTF code, and later use same technique for
						HTML reader. Should make subclassed 'preserving' class easier to maintain.

961002	Closed	LGP		I reviewed this code, and there was nothing obvious I could do to make it
						simpler or clearer. But I did find a way to make it a bit faster (caching
						results of GetTextWindowBoundingRect () calls). Made a 10% difference
						in typing speed (from looking at mac profiling results).
960914	REPORT	LGP		Go back and cleanup TextInteractor/PreReplace/PostReplace stuff now that we've
						made it fast. It could be much simpler than it is now, given our revised
						optimization strategy (hopefully implemetned first, in #0386, and #0387

961002	Fixed	LGP		Cannot reproduce.
960917	REPORT	LGP		Drop small .txt file (tutorial.txt) onto LedIt! Windows in explorer, and
						it appears to hang up startup. (pc only)

961002	Change	LGP		Lose ability to write old Led file formats (version4, though we can still
						read it). Other minor code cleanups in StyledTextIO.

961002	Fixed			There was a bug with the SetFontName() wrapper code I had done for the
						mac.
961002	REPORT	LGP		As of d2, I noticed that undo on the Mac echoed in Chicago font, regardless
						of what font was saved.

961002	Close	LGP		Cannot reproduce
960918	REPORT	AWI		PC-version only.
		(0393)			(ST#09, priority=moderate)
						When trying to add a Bitmap object to an ActivPad document,
						the paint edit box will close down before the image can be created.
						Reproduce:
						1.  From File menu, click on Edit/Insert Object
						2.  Click on Bitmap, New
						3.  At this point the behavior will not be consistent.
						When this function works, it is very friendly.  
						Result:
						Results are very inconsistent and too numerous to mention here.
						Mainly, the frustration will occur after the paint window is opened.
						Sometimes the paint edit box will not open even after several tries.
						Sometimes the paint edit box will open and clicking inside the box will
						close down paint, or clicking on the paint tools will close paint and
						return to ActivPad.
						Therefore, the desired picture cannot be created.
						When the function works, the bitmap will always paste into ActivePad as expected.
						(This error never occurred on the Mac.)
						Expected behavior:  
						ActivPad will open a paint edit box to create a new picture using the paint tools.

961002	Fixed	LGP		Also, since updating the SBAR invalidated the rect for the
						sbar, this interacted badly with the logical clipping code in
						Led_PP. This is now fixed. We use regions, instead of the
						bounding rectangle.
961002	Working	LGP		One reason was that the TextInteractor_::SetSelection ()
						could have been a bit smarter in its invalidate. Now it
						invalidates less (though it could still be better, its
						probably good enuf now).
961002	REPORT	LGP		As of d2, I made autoscrolling down very slow on PP (not PC for
						some reason). Investigate.

961002	Fixed	LGP		Fix was in Led_PP::DoVertScr...(), to call Update() at the end.
961002	REPORT	LGP		As of d2, I noticed that the scrollbar didn't always get properly
						updated while paging up and down with the mouse in the SBAR. Sometimes
						wouldn't redisplay its position til you let up the mouse button. Mac/PowerPlant
						only.

961002	Fixed	LGP		Trouble was a code-generation bug with CW10. Added new
						bug define qExplicitCastToBoolOfExpressionWithBitwiseAndFails - and
						worked around at least this case.
961002	REPORT	LGP		As of d2, I noticed that shift-selection didn't work for PP/Mac
						application.


---------------- Released 2.1d2 - 960930 - Below ------------------------------
960930	Fixed	LGP		I believe all of this is done, though I have no test cases, and since so much
						of the spec is self-contradictory, I cannot be sure I made the right choices
						where the spec contradicts itself. Hopefully this will be OK.
960923	NOTE	sven@ww	At 2:30 PM 9/23/96, sven@wordwork.se wrote:
						>Hello.
						>
						>Yes, the whole thing about supporting different computer platform   
						>character sets is
						>indeed a bit muddy in the MS Spec. I believe the right approach is not to   
						...
						>Now, to address your questions - I have never seen nested \cchs tags   
						>being output,
						>just as I haven't seen nested font tags. However, I'm sure it is safe to   
						>assume that
						>the \cchs and \cpg tags behave just as any other tag if they were to   
						>appear in a nested
						>scope.
						>
						>It also seems to be safe to assume that
						>
						>{\fonttbl {\f99 \fcharset 999} ...}
						>
						>text {\f99 in code page 999} and back to normal
						>
						>behaves exactly like
						>
						>{\fonttbl {\f99 ...} ...}
						>
						>text {\f99\cchs999 in code page 999} and back to normal
						>
						>Now, for this example:
						>
						>This is Mac text {\cpg999 {\cchs0 and this was added on a PC}}.
						>More Mac text.
						>
						>Looking at some actual RTF output it seems that the use of \cpg is
						>deprecated in favour of \cchs. It seems to be safe to assume that they
						>never occur mixed in the same document. And even if they did, the
						>normal scoping rules must apply, i.e. the \cpg999 doesn't do anyting
						>above, since no text is generated in it's immediate scope.
						>
						>And, finally:
						>
						>Again, quoting MYSELF:
						>>        Then the docs on \cchs say:
						>>        \ cchsN         Indicates any characters not belonging to
						...
						>Again, we will assume that the \cpg and \cchs tags do not occur in a
						>nested scope, thus the base character set will always refer to the
						>\rtf1\xxx tag.
						>
						>Also, as you have noticed, there is no way to specify the Mac character
						>set using a \cpg tag. I assume this is why it is (almost) never seen in
						>code generated from various RTF writers.
960912	WORKING	LGP		Sent email to sven@wordwork.se for clarification on what I must do.
960902	REPORT	sven	At 4:00 PM 9/2/96, sven@wordwork.se wrote:
						>In order to properly support different computer platforms, the \fcharset
						>and \cchs tags must also be recognised. The arguments here are
						>0 => ansi
						>254 => pc
						>255 => pca
						>256 => mac
						>
						>The \fcharset tag is used in a font definition to connect a particular
						>font to a character mapping. The \cchs tag is used in the normal
						>body text to mark text that has been edited on a different computer.

960929	Fixed	LGP		Add SetFontName/GetFontName (string) wrappers methods. Cleaned up StyledTextIO
						code a bit.
960929	REPORT	LGP		Old report/comment from RTF work.
						For LED 2.1, make simple font-name accessor which works
						cross-platform to avoid this drudgery (and use in StyledTextIO
						module as well)

960920	Fixed	LGP		Interpret \row as generating an NL, and things look much better.
960920	REPORT	LGP		RTF tables read in look lousy in Led.

960920	Fixed	LGP		Fixed.
960920	REPORT	LGP		When RTF text is marked up with \deleted - it shouldn't be incorporated
						into the doc. Caused embarresing problem for me when reading docs
						Bob Swerdlow had sent me.

960917	Closed			Can not reproduce.
960524	DEFER	LGP		Happens very rarely, and minor cosemetic problem.
960524	REPORT	LGP		Make a large selection (multi line). Then goto the finder and
						drag over a LedIt! PP -Mac window. Selection changes and we
						erase the drop hilight. Should redraw the drop-hilight from
						our draw code.
						Similarly, if we ever do scrolling when tracking a drop
						we must be careful of this as well.

960917	Closed			No longer refer to this define. Don't know if bug was fixed, or if we
						simply don't exercise it any longer
960430	DEFER			Reviewed
950601	DEFER			1.0RC1
950419	REPORT	LGP		Investigate if qAmbiguousAccessForSomeVBaseClassCasesBug is
		(0217)			a real bug, or just poor language design I must cope with in
						Led.

960917	Fixed	LGP		Fixed. See SPR#0387.
960523	DEFER	LGP		I think performance is adequate for 2.0 release. Unless I hear back
						otherwise...
960522	REPORT	LGP		From profiling, UpdateScrollBars() is a huge bottleneck(23%) on the PC.
						We should tweek this.
						Maybe just call it from Draw() and not all the places it currently is?
						See what Mac code does? Compare call-counts between mac and windows
						equivilents...

960917	Fixed	LGP		Fixed. Made a big difference in PC profile of typing (no more sbar crap).
						And made a huge difference in speed of reading RTF files.
960915	WORKING	LGP		<OLDCODENOTE>
						Renamed Led_<CLASSLIB>::various adjust/update/etc ScrollBar()
						methods to be a consistent UpdateScrollBars (). And made all
						those methods non-virtual (some were virtual, some non-virtual).
						This method is (now) just a helper method you can use to update
						sbar. Since it isn't virtual, you must hook it yourself in places
						like InvalidateScrollBarParameters () todo things differently.
						</OLDCODENOTE>
960915	WORKING	LGP		As part of this, TextImager::NotificationOf_Scrolling () callback
						has been eliminated in favor of simply using new
						TextImager::InvalidateScrollBarParameters() routine. Always did
						the same thing, and often both were called.
						<OLDCODENOTE>
						Overrides of this should be updated to being overrides of
						InvalidateScrollBarParameters ().
						</OLDCODENOTE>
960914	WORKING	LGP		<OLDCODENOTE>
						As part of this, cleanup semantics of old AdjustBounds (). Now its
						been renamed -->InvalidateScrollBarParameters ().
						</OLDCODENOTE>
960912	DUP		LGP		Major performance tweek idea!
						Add on-idle, or when done with lots of work callback, for handling things like
						updating the scroll bar. This is better than the current code which does this in
						reaction to DidUpdate() calls.
960911	REPORT	LGP		RTF Speed Tweek (from profiling):
		(0387)			AdjustScrollBar(), AdjustBounds, etc. All the implications of
						having done an insertion of text.
						PrePostReplace() etc. These all take alot of time,
						and shouldn't in this case.
						Must find a way to make these fast!!!

960916	Change	LGP		Led_PP - when we have multiple windows, I wasn't resetting sbar
						to disabled when deactivated properly.

960916	Change	LGP		Fixed caching bug with
						StyledTextIOSrcStream_FileDescriptor::read (void* buffer, size_t bytes)
						when read caused 'NotherRead to happen into new window.

960915	Change	LGP		Updated LedTestTCL, and Led_TCL to work with Led21.

960915	Fixed	LGP		Found a slightly better way so doesn't even need any hacks to
						the Led_<CLASSLIB> modules. Removed thost no-longer-needed
						hacks.
960913	Fixed	LGP		Fixed - integrated into LedIt OD.
960912	Working	LGP		Fixed (Really).
						Added qSupportWholeWindowInvalidOptimization flag in TextInteractor.hh
						module, defaulting to true. Then used this to optimize in a few places.
						One file opened in nearly 1/2 the time. Another was only 20% faster.
						Anyhow, made some difference.
						Applied this hack for Led_PP, and Led_MFC so far. Still must do OpenDoc
						(since requires a few minor hacks to the Led_OD module to make it all work).
						Still more todo on performance front, but this is a start (once I fix OD).
960912	REPORT	LGP		Major performance tweek idea! (based on profiling reading rtf files)
		(0386)			Add wholewindowinvalid flag to text interactor, and use that to avoid any 
						inval computations once it is set. (Cleared on display).

960913	Change	LGP		Wasted many hours tryig to get qUseOffscreenBitmapsToReduceFlicker
						working with OD (cuz looks so ugly without it). But alas - I couldn't
						get the embeddings to display properly with it. I went so far as to
						create offscreen canvases, and tried to setup all the right magic
						transforms so everything displayed OK, but it was just too much trouble.
						I probably could have implemented a Led-based OCX in the time I wasted
						on this. Sigh... I really shouldn't waste more time on this code-base.
						Just do a PowerPlant based version, in the next few months. If OD looks
						like its taking off...

960913	Change	LGP		Got LedODPart working with CW10 (prerelease) and Led21 (only ppc, but hopefully 68K
						won't be hard todo later).

960912	Fixed	LGP		Tmp Hack workaround cuz i'm gonna rewrite alot of this code. Retest after
						rewrite. But to fix in Led 2.0, you can add the line:
						updateRect	=	Led_Rect (updateRect.top, windowRect.left, windowRect.bottom-updateRect.top, windowRect.GetWidth ());
						Near the end of the routine void	TextInteractor_::PostReplace (PreReplaceInfo& preReplaceInfo)
						Here is more context:
						// Now if we've changed the height of the bounding rows region, we need to repaint to end of stable region.
						{
							Led_Rect	revisedRect	=	GetTextWindowBoundingRect (startPositionOfRowWhereReplaceBegins, startPositionOfRowAfterReplaceEnds);
							if (preReplaceInfo.fBoundingUpdateHeight != revisedRect.GetHeight ()) {
								updateRect	=	Led_Rect (updateRect.top, windowRect.left, revisedRect.bottom-updateRect.top, windowRect.GetWidth ());
						// tmp hack to fix update bugs - LGP 960912 - SPR#0384
						updateRect	=	Led_Rect (updateRect.top, windowRect.left, windowRect.bottom-updateRect.top, windowRect.GetWidth ());
							}
						}
960912	NOTE	LGP		To reproduce, produce a file of numbered lines (twentlylines.led).
						Eg:
						1
						2
						3
						...
						Then shrink window so only 10 lines showing. Select from the number
						3 down to the number 6 (inclusive). Hit the return key. Screen doesn't
						properly redisplay. Note the behavior is slightly different if you
						select the NL after the 6 or not. But broken in either case.
960911	NOTE	LGP		Probably related (though indirectly) to #0383 - RTF reader performance.
						Trouble is all the logic in pre/post refresh in text interactor. We want it
						to be SIMULATEOUSLY FAST, MINIMALISTIC, and CORRECT! A bit of a challenge :-)
960809	REPORT	DougSt	Serious bug in editing/invalidate code. Roughly you make multiline selection
		(0384)			and hit return key, and screen below where you were editing doesn't all
						update. If I have any trouble reproducing, ask Doug again...

960911	Fixed	LGP		Added this method (really just enabled it, it was there but commented out).
						And updated RTF reader code to use this.
960910	REPORT	LGP		do operator== for Led_IncrementalFontSpecification&.
		(0382)			Then update RTF reader code to take advantage of it (hopefulyly will
						run faster.

960911	Fixed	LGP
960829	REPORT	LGP		We should have a Led_IncrementalFontSpecification::MergeIn (Led_IncrementalFontSpecification&)
						method to COMBINE Led_IncrementalFontSpecification's.

960910	Fixed	LGP		Done for Mac. No need for windows since app is SDI.
960829	REPORT	LGP 	LedIt! Mac application needs windows menu.

960910	Fixed	LGP		See #0377. Also made this fix for Windows.
960910	Working	LGP		Fixed on the mac. Packaged up string and other search parameters into
						an object. And inited etc in LedItApplication. Still must do same
						coding for PC. Also, should we put the search parameters object into
						Led itself? Use as parameter to TextStore FIND function!!! YES! This is better!
960909	REPORT	LGP		Find command should associated string with the whole APP, not the
						current view. (fix on Mac and PC). Use string class, rather than
						char* array currently used to keep track of string (simplification)

960910	Change			Changed TextStore_::Find() api to have new class SearchParameters which
		(0377)			packages up various search parameters (several reasons for this, including
						so we can add new search parameters more easily, and so we can store
						search parameters more easily in prefs file etc).
						NB:
						<OLDCODENOTE>
						old code written calling TextStore_::Find() can be
						simulated as:
						size_t	Find (const Led_tChar* pattern, size_t searchFrom,
										size_t searchTo, bool matchCase, bool wholeWords
										)
							{
								SearchParameters sp (pattern, searchTo == kBadIndex, wholeWord, matchCase);
								return Find (sp, searchFrom);
							}
						</OLDCODENOTE>

960910	Fixed
960528	DEFER	LGP		
960528	REPORT	LGP		Font names in Font Menu in MFC application should be sorted alphabeticly.

960909	Fixed			Really fixed a few days ago.
960901	REPORT	LGP		Add LedItConfig.hh file for LedIt! Windows.

960909	Fixed			
960904	REPORT	LGP		Never throw on file save cuz not enuf memory for buffer. Alloc cheesebuf,
						and then alloc file buffer (the free cheesbuf) to preflight - make sure we've
						enuf memory for the write.
		
960909	Fixed			I reviewed this code and I now think it is fine.
960904	REPORT	LGP		On save in new SinkStream_FileDescriptor, make sure we do buffering
						before last saved at - setup window in FLUSH() - rather than write.
						I think its just possible the current way is buggy?	

960909	Change			Beginnings of HTML support in place. The IOReader/Writer have been created
						and are in place in the LedIt! applications, and file type lists.
						Beginings of HTML parsing code in place. But still does almost nothing
						with the actual html, and still does ABSOLUTELY nothing writing it out.

960909	Change			Fixed bug in CTOR of LedItApplication/Powerplant, for CW10. They moved when
						menubar loaded, so I had to move where I patch the font/help menus.
						Also, I switched to using MSL (perhaps a bad move, since app size increased by 200K!).
						And maybe a few other minor changes for CW10 (nearly final?).

960907	Change			StyledTextIOReader_::GetSrcStream/GetSinkStream () now public instead of
						protected.
						Moved some utility methods from from RTF stuff StyledTextIOReader_
						as helper functions - used in many subclasses (peek char, unget char etc).

960906	Fixed			
960904	Working			Mostly done. Test a bit more, and maybe re-order names, and cleanup
						names used (mac & pc).
960820	REPORT	LGP		On PC code, add "all known formats" section to openfontdialog, and
						make that the default (.led, .rtf, .txt).
		
960906	Change			Rationalized (between Mac/PC) names for Led document format (now "Led Rich Text Format")
						and ordering of file types in file-type-popup-list
						(first text, then the rest alphabeticly)

960906	Change			Added StyledTextIOReader_::SrcStreamSeekSaver utility class. Then used this
						in all the QuickLookAppearsToBeRightFormat methods to restore the seekpos.
						Then rewrote the "unknown file format" code for LedIt! (mac and pc) to use
						QuickLookAppearsToBeRightFormat () - instead of trying/failing to read the files
						(sb faster in this very common case).

960904	Close			Bug may or may not have been fixed, but we no longer need this workaround
						(use a little less MI, could explain why).
960430	DEFER			Reviewed
950417	DEFER	LGP		No point in worrying about this if it really is compiler bug.
						Maybe at some point send the whole list of MWERKS compiler bugs
						to MWERKS/Microslop?
950415	REPORT	LGP		qLotsOfSubclassesFromMixinPointYeildTemporarilyBadVTable
		(0206)			Partly in an attempt to clean this up I got rid of the vbase
						TextInteracter_ and made it a regular base of Led_TCL and
						Led_MFC, and got rid of the SimpleTextInteracter class.
						And then I looked closely at this - at least on the Mac.
						I am now coninced there is no easy way around this bug other
						than what I've done, and that - at least on the Mac - it is
						still a compiler bug with MWKERS. I haven't retested MSVC 2.1
						again.

960904	Close			We will never again implement Kinsoko rule. Instead I will find some generic
						'code-page/script manager' based replacement which will work genericly.
960430	DEFER			Reviewed
950301	DEFER	LGP		LEC is happy with the way things are now - Led uses the CharlesView
						definition. Someday - I should probably upgrade the behavior to follow
						the STANDARD - to the extent there is one. As far as I can tell - Lunde
						is as close as it gets to a Standard. DEFER for now.
950301	REPORT	LGP		LEC has had lots of complaints about Kinsoku rule implementation.
		(152)			Though there were bugs earlier - most of the problems now come down
						to differences in the SPEC of what is a BOL and EOL character between
						some Microsoft FAR EAST document they have, and what Charlesview had
						implemented. And the Lunde book appears different than either of those.

960904	Fixed	LGP		Fixed.
960904	REPORT	LGP		Turns out we needed todo buffering on WRITES as well as Reads in SrcSink..._FileDescriptor
						classes (to get good speed writing to network volumes). Only needed for Mac.

960904	Fixed	LGP		Fixed. Now there is a TextInteractor utility method - OnUndoCommand/OnRedoCommand()
						to help with this.
960904	REPORT	LGP		LedIt! Mac/Windows. Undo/Redo should ScrollToSelection ().

960904	Fixed	LGP		Fixed, I think. The real problem is I had overridden LWindow::DrawGrowBox()
						for reasons I didn't clearly document, and had changed its behavior. For now,
						I've just gone back to the old behavior, and so far things appear fine. Maybe
						I'll soon discover why I had done this. But from the comments it appears it
						might have been a bug workaround for a PowerPlant bug which has since been
						fixed.
960904	REPORT	LGP		LedIt! Mac - PowerPlant - when window activated, must inval growbox.

960904	Fixed	LGP		
960904	REPORT	sven	// In the MS-RTF Spec 1.3, it reads: "Note that ASCII 9
						// is accepted as a tab character", so it appears we can just write the tab character
						// blindly. BUT,
						// As sven@wordwork pointed out (960904 email):
						// "MS Word 6 for Mac does _not_ accept ASCII 9 as tab, whereas Word 7
						// for Win95 _does_". So make 'em all happy.


---------------- Released 2.1d1 - 960903 - Below ------------------------------
960903	Fixed	LGP		Fixed
960902	REPORT	sven@ww	Honor "cpg" tags in RTF input stream, at least for code pages 437,819,850.

960902	Fixed	LGP		Fixed
960902	REPORT	sven@ww	Only output 7-bit characters in RTF writer

960902	Fixed	LGP		Fixed, for Reader/SrcStream only. Output performance doesn't seem bad
						for some reason. Didn't solve all my performance problems, but does help
						some (especially on slow disks, like network disk).
960901	REPORT	LGP		Add Caching to File Src/Sink Stream, and get rid of RTF caching
		(0374)		 	we do for ?? some place i hacked
						it in. Really should be in Led fileIO stream. Then probably get get rid of from other
						file format readers? Maybe.

960902	Fixed	LGP		Fixed.
960901	REPORT	LGP		Must use Charset mapping on RTF WRITING as well as reading. To reproduce,
						On mac enter text with bullet/and or "..." (as single char - option;). Then
						save as RTF. Then re-open file. You get garbage for these characters. I think
						the reading code is fine. But our default output charset is ANSI (OK I guess, 
						thats what RTF spec says - I think). But we must do output mapping in that case!

960901	Fixed	LGP		Fixed. Hacked in, and working. But must add icons, etc.
960901	REPORT	LGP		Add RTF support to LedIt! Windows

960901	Change	LGP		Change MSVC makefile to use symbolic drive letter, and do LedIt! Windows build
						all root-relative for that symbolic drive. This is to avoid embedding
						my personal build path into the makefile, which confuses MSVC if you try
						to build with the Led directory in any other place. I should update the
						BuildingLed instructions to reflect this change.

960901	Fixed	LGP		Fixed
						<--****START_CHANGE which could affect Existing code compiled from earlier Led releases****-->
						Also, as part of this fix, I renamed
							StyledTextIOReader::SinkStream_::InsertEmbedding -->
							StyledTextIOReader::SinkStream_::InsertEmbeddingForExistingSentinal.
						<--****END_CHANGE which could affect Existing code compiled from earlier Led releases****-->
						And added 
							StyledTextIOReader::SinkStream_::AppendEmbedding ();
960829	REPORT	LGP		Serious/Crasher Bug in StyledTextIOSinkStream_StandardStyledTextImager::AppendText()
						void	StyledTextIOSinkStream_StandardStyledTextImager::AppendText (const Led_tChar* text, size_t nTChars, const Led_FontSpecification* fontSpec)
						{
							Led_RequireNotNil (text);

							Led_AssertNotNil (fTextStore);
							fTextStore->Replace (fInsertionStart, fInsertionStart, text, nTChars);
							if (fontSpec != NULL) {
								fStyleRunDatabase->SetStyleInfo (fInsertionStart, fInsertionStart + nTChars, Led_IncrementalFontSpecification (*fontSpec));
																								 ^^^^
																				SB just nTChars!!!

							}
							fInsertionStart += nTChars;
						}
						When we fix this, we can eliminate
						qWorkAroundLed20StyledTextIOSinkStream_StandardStyledTextImager_AppendTextBug
						from new RTF code...

960901	Fixed	LGP	
960829	REPORT	LGP		This routine asserts out if we pass a marker past the end of fRootMarker (BUFFER).
						This is OK, but we should add an EARLY, CLEAR REQUIRE at the start of it to make
						clear why.
						void	ChunkedArrayTextStore::AddMarker (Marker* marker, size_t lhs, size_t length, MarkerOwner* owner)
						{
							Led_RequireNotNil (marker);
							Led_RequireNotNil (owner);
							Led_Require (owner->PeekAtTextStore () == this);
							Led_Require (marker->fTextStoreHook == NULL);
							Led_Require (lhs < 0x80000000);				// not real test, just sanity check
							Led_Require (length < 0x80000000);			// not real test, just sanity check
							...

960901	Change	LGP		Lose compiler support for CW7, and CW8, and lose all the compiler bug workaround
						code for these old compilers.

960901	Fixed	LGP		See earlier Change#0373
960430	DEFER			Reviewed
960204	DEFER	LGP		
951105	REPORT	LGP		Support Reading RTF

960901	Fixed	LGP		See earlier Change#0373
960430	DEFER			Reviewed
960204	DEFER	LGP		
951105	REPORT	LGP		Support Writing RTF

960901	Change	LGP		Incorporated RTF support into StyledTextIO and LedIt! Mac - which
		(0373)			I had developed as a standalone module for Led20, for WordWork.
						I've only included the simple (lossy) version into Led. The extra
						code which tries to preserve tags in associated markers will be
						distributed as an FAQ/Demo module, outside of Led.

960901	Change	LGP		Update LedConfig.hh for prerelease CW10 compiler. And change policy
						there so newer versions of the compiler simply elicit a warning, not
						an error - and default to using the older (last) compilers bug-define
						settings (only did for CW - do later same thing for MSVC).

960901	Change	LGP		Mark all Led headers/sources RCS entries as end of 20, and starting 21


---------------- Released 2.0 FINAL - 960804 - Below ------------------------------
960804	Change	LGP		Added Led_Set/Get AssertionHandler() routine, since I had
						put it in the docs.

960804	Change	LGP		A few misc name changes in TextStore stuff (parameters only)
						to sync up with new programmer documentation.

960804	Change	LGP		Built and tested LedItTCL

960804	Fixed	LGP		Fixed a couple port setting (MacOnly) bugs in TextImager.cpp
						that only manifest themselves under Led/TCL (Think Class Library).
						Also, fixed a number of lingering problems with Led_TCL code itself
						for changes I've made over the last few months - I haven't compiled
						it in a long time. Problems mostly were with new FontSpec stuff.

960804	Change	LGP		Revised programmer ClassLib documentation.

960804	Fixed	LGP		Changed interpretation of D&D option/control keys on Mac, and
						default (unmodified) behavior dragging between windows and applications
						from copy to move. Though I like this interface less, it is appearently
						the mac standard. What I already had WAS Windows standard, and so I've
						left that alone.
						
						At 10:47 PM 8/4/96, Lewis Gordon Pringle, Jr. wrote:
						...
						>        As we discussed on the phone this evening, what
						>you suggest is almost certainly wrong for Windows (try MSWord).
						>And - though silly, illogical, and inconsistent for the Mac,
						>it DOES INDEED appear to be NEARLY the mac standard. Also,
						>there were ambiguities in what you suggest. I've played
						>around with SimpleText and OpenDoc, and I THINK inferred
						>as set of rules consistent with both, and with what you've asked for.
						>
						>  -> optionKey forces copy in SimpleText 1.3.1,
						>        and OpenDoc 1.0 (DR4)
						>  -> controlKey forces MOVE in OpenDoc 1.0 (DR4)
						>        (no such feature for SimpleText)
						>  -> Default for BOTH is COPY across windows (& apps)
						>        and MOVE within a window.
						>
						>        So this is what I've implemented for Led 2.0 Mac.
960804	REPORT	DougSt	>At 5:27 PM 7/26/96, Douglas B. Stein wrote:
						>>Can you "flip the default behavior" for inter-window drag. That is,
						>>
						>>1) Drag between windows means "Copy"
						>>2) Option-drag between windows means "Move"
						>>
						>>We've been back and forth on this here and find that the Finder is the 
						>>only app that does this (and only within the same volume). It seems to be 
						>>less confusing this way to users. One of the arguments for switching to 
						>>this is that users are much more likely to copy than to move. It is also 
						>>consistent with all Mac programs (i.e. TeachText, ClarisWorks, BBEdit). I 
						>>think it's also consistent with most Windows programs.

960804	Fixed	LGP		Fixed on Mac and PC (Led_PP/Led_MFC). (was dup of 0371)
						Feels fine on my implementation. Not sure what MPW did wrong?
960718	DEFER	LGP		
960718	REPORT	LGP		When I move mouse over selected text, and click would produce a drag operation,
		(0372)			I should over visual cue with cursor. New MPW does this. Seems very logical
						but FEELS awkward when I use it. Not sure why. Investigate before I actaully
						try this.

960804	Fixed	LGP		Fixed on Mac and PC (Led_PP/Led_MFC). (was dup of 0372)
960804	REPORT	DougSt	At 4:32 PM 7/26/96, Douglas B. Stein wrote:
		(0371)			...
						>On Mac, UI guidelines require arrow or hand cursor when over selected 
						>text. This indicates that drag is possible... Currently, you still have 
						>the I-beam. I don't know what the Windows guidelines. We probably want 
						>the same cursor on both platforms...


---------------- Released 2.0rc4 - 960724 - Below ------------------------------
960724	Change	LGP		A few more minor LedIt! user-doc edits.

960724	Fixed	LGP		It took only a few minutes to fix this, and a closely related
						bug. Luckily the bug was in the READING code, not the writing
						code, so the existing files you have are fine, and will
						be read properly by the next LedIt/ActivPad release (tonight).
        				By the way, just so yo don't report/worry about additional
        				bugs, some other manifistations of this bug would include
        				links disapearing on undo of changes to text which included
        				the link, and copy-paste of the link with other text at
        				the same time, etc. Anything that caused Led to SERIALIZE
        				the pict/URL object and then UNSERIALIZE it, would
        				exhibit these bugs.
960724	REPORT	LGP		>At 12:26 PM 7/24/96, Douglas B. Stein wrote:
						>>Lewis,
						>>
						>>Here's a bug:
						>>
						>>1) Paste or drop a picture into an ActivPad document.
						>>2) Select it and choose "Make ActivLink..."
						>>3) Put whatever you like in the Name and URL fields. The link works.
						>>4) Save the document, close it, and reopen it.
						>>5) The link doesn't work. If you select it and choose "Edit ActivLink..." 
						>>you will find that both fields are blank.


---------------- Released 2.0rc3 - 960719 - Below ------------------------------
960718	Fixed	LGP		Two bugs. One was a bug with the MWERKS runtime library.
						new char [UINT_MAX] - instead of raising an out of memory
						exception, returned a very small buffer instead (integer overflow
						bug).
						Another bug/quirk was that NT3.51 appleshare server allows
						SetFPos (UINT_MAX) - and raises no error (plain apple file system
						returns posErr, which I HAD counted on).
960718	REPORT	LGP		Open file on PC on NT 3.51 Server network (shared as appleshare)
						drive. Then open the SAME file on Mac. Get exception raised.
						OK, but we crash handling the exception.

960718	Fixed	LGP		I think the problem was solely with the Backspace, and I think
						it now behaves as you wish.
960711	REPORT	LGP		At 9:54 AM 7/11/96, Douglas B. Stein wrote:
						>Lewis Gordon Pringle, Jr. wrote:
						>
						>>         Ugg. I can recall a long drawn out discussion with another Led
						>> users about how this should work. Something todo with grabbing style info
						>> from the left when clicking, but grabbing it from the RIGHT when cursoring
						>> from the right, and grabbing from the left when cursoring from the left.
						>> 
						>>         I'll have to dig up my old notes, and experiment with some others
						>> apps. If you have any clear sense of just what the rule should be for
						>> setting the NUL-STYLE, please let me know (I'm especially looking for a
						>> GENERAL rule, not yet another 'in such and such case I wish it did such').
						>> 
						>
						>I'll have to see if there are any guidelines... The reason
						>this behavior is so heinous is that it happens 
						>whenever a user makes a typo, deletes the typo with the
						>Delete key, and wants to continue in the style. (Sorry 
						>if I confused the issue by saying "Backspace"
						>in the earlier message - I meant 

960718	Fixed	LGP
960718	REPORT	LGP		Change naming of help file to deal with mutlifile help doc
						format.

960718	Fixed	LGP
??????	REPORT	LGP		More work on LedIt! docs - separators, break file into parts? Maybe?
						Support alias/link when opening (already done? Mac/PC?) Then store parts
						in DOC subfolder? Fix command refernece, etc, proofread.

960718	Fixed	LGP		
960718	REPORT	LGP		Fix file to URL converter on mac so deals with
						space and funny characters - 
						at least enuf so we can open ledit docs file
						(when folder on desktop etc)

960718	Fixed	LGP		
960718	REPORT	LGP		DEBUG CRASH BETWEEN DRAG IN ONE WINDOW INTO THE
						OTHER - TROUBLE IS GLOBVAL VARIABLE IN Led_PP
						CHECK OUT WINDOWS CODE AS WELL!!!

960718	Fixed	LGP		Trouble was we were destroying the embeddings on StyledTextIntarctor
						DTOR. Should do it in the StyledTextDatabase DTOR, and be sure we add
						embeddings INTO that database (not with owner of interactor).
960718	REPORT	LGP		At 3:52 PM 7/18/96, Douglas B. Stein wrote:
						...
						>if you drag links onto ActivPad, then print out the list of links and
						>whatever text you've added, the links disappear (those that have scrolled
						>off screen) and whichever were not off screen and didn't instantly
						>disappear, if you try to use them, they disappear. the only way to fix this
						>is to save the file before printing, print, then close the old one, and
						>open the saved copy. seems like kind of a hassle. but it also seems like a
						>fairly large bug.

960718	Fixed	LGP		Trouble was not enuf stack space. SetApplLimit() doens't
						return any error code if not enuf heap space to extend
						the stack. And the particular use (about box) used alot
						of stack space.
						Fix is to make sure the 68K EXE has at least 140K more than
						filesize as its minimum size. See #0370.
960717	Working	LGP		(only happens with 68K build, but happens on PPC as well) - trouble
						only happens if Internet Config not present
	 					(Interent Preferences file not found in system Preferences folder)
960702	REPORT	LGP		debug crash on 68K build (I think I repro'd on ppc with 68K exe)
		(0369)			doing open of about box url.
	

960718	Fixed	LGP		See #0369. Use 140K + 68K BinSize
960702	REPORT	LGP		Carefully pick proper mac partition size
		(0370)


---------------- Released 2.0rc2 - 960702 - Below ------------------------------
960702	Fixed	LGP		Maybe I'll do a few more minor revs of docs before release, but
						its basicly done.
960702	Working	LGP		Removed old help build files from LedIt! Windows project
960701	Working	LGP		Now did LedIt! Windows. Now all that remains is cleaning up docs!
960701	Working	LGP		Now LedIt! Mac has help menu item to launch URL for help docs.
						Still must add for windows, and then final doc cleanups.
960625	REPORT	LGP		NEW LedIt! UserDoc support
						-	Now compiles properly.
						-	Edit it so its COMPLETE and coherent
						-	Fix mac/windows menu so they invoke reading THESE DOCS

960702	Done	LGP		Did using InstallSheildExpress.
960430	REPORT	LGP		Do InstallSheild installer for LedIt! Windows

960702	Fixed	LGP		OK done, but only primitive busy cursor support (I really
						prefer when apps only display busy cursors when something
						will REALLY take a long time, and LedIt! now does this for
						ALL opens/saves, regardless of how long it will take).
						See defered SPR#0368.
960611	REPORT	SVEN	>At 2:03 PM 6/11/96, sven@wordwork.se wrote:
		(0367)			>>Hi.
						...
						>>In LedIt, use the watch cursor when opening a file - it can still take   
						>>some time.
						>
						>Yep. I'll try to get this in for 2.0rc2.

960702	Fixed	LGP		I tested on Win95, and it seems to work fine there. Assume
						fixed.
960701	Working	LGP		More quirky CDC::ScrollRect() workarounds. Just doesn't
						seem to work as advertised. Now SEEMS to work OK on
						NT 4.0b2, with NumberNine Imagine 128 graphix card.
						Must test on other configs (esp Win95) to have ANY confidence
						this scrollrect stuff works. TEST CAREFULLY!!!
960625	REPORT	LGP		Make a small selection (windows only?) at the top of 
						a window (scrolled down some - I used this doc). Then
						scroll down a little, and cruft from selection gets left on top!
 
960702	CHANGE	LGP		Fixed a few rare cosmetic bugs with Drag&Drop hilighting
						together with scrolling.

960702	Fixed	LGP		Though I really personally dislike the "Apple Approved Way",
						I dislike individual tool developers putting their own tastes
						above standards. So I now handle this the "apple-approved" way.
						Sigh :-)
960611	REPORT	SVEN	At 6:49 PM 6/11/96, sven@wordwork.se wrote:
						>>Autoscrolling when dragging works ok - good idea to turn off the drop
						>>feedback rect while scrolling. Two points here though: According to   
						>Apple
						>>HIG you are only supposed to use the drop feedback rect if the drag
						>>originates outside the target area. I.e. don't use the feedback rect
						>>until the user has dragged outside the text area and then moved back
						>>again.
						>
						>        Ugh. This seems so silly and inconsistent. I noted that most   
						...
						>Besides, if you do it the Apple approved way, you can be smart about the   
						>autoscrolling
						>and (at least most of the time) not use the drop hilite at all, and thus   
						>avoid the
						>update problems.

960702	CHANGE	LGP		Cleanup PowerPlant D&D stuff in a number of respects.
						Simplified excpetion handling cuz new PP fixed some
						excpetion handling bugs (can now throw in Receive item
						cuz PP does catch).
						Also fixed bug where we dropped from a selection right onto
						itself. We replaced text with itself. Not tragic, but much better
						to simply REJECT the drag.

960702	Fixed	LGP		I had been building with a pre-release of CW9 (hybrid between CW8
						and CW9). Led release 2.0rc2 is built with a vanilla CW9
						(so the problems you alluded to are all fixed).
960611	REPORT	SVEN	At 6:49 PM 6/11/96, sven@wordwork.se wrote:
						>I'm building with Codewarrior 9 and PowerPlant 1.4. Incidentially, you   
						>can't
						>compile LedIt directly as it comes, but you have to include "Strings.h"
						>in LedItView.cp (to get p2cstr) and add the files LArray.cp,   
						>LArrayIterator.cp,
						>and LComparator.cp (and you can probably remove LDynamicArrayXXX) to
						>get it to pass the linker.

960702	Fixed	LGP		Ah! Finally I can now reproduce it. Pardon my stupidity.
						The previous bug (report?) involved selecting the last
						character of the WINDOW. That is what I had fixed earlier.
						Since your report was so similar, I MISSED the bit about
						the last character of the DOCUMENT.
						SORRY. Once I read your report carefully enuf,
						it was trivial to fix.
960611	REPORT	SVEN	At 6:49 PM 6/11/96, sven@wordwork.se wrote:
						>You wrote:
						>
						>>When the selection extends to the last character of the document, the
						>>drag outline is wrong - it outlines the actual text instead of the
						>>selection (i.e. it is not a block, but a more complex jagged region).
						>>This still happens the same way as in 2.0b9 even though you say it is
						>>fixed in the release notes :-( A real problem with this (except for
						>>confusing the user) is that you have to click on some actual text to
						>>start the drag or else the selection just goes away.
						>
						>        I did reproduce this in an earlier Led release, but I cannot
						>reproduce it any longer. I cannot make this happen with 2.0rc1. When I   
						...
						>Hmm, strange ... This is my setup
						>
						>Report generated by Now Profile 6.0.1.
						>System profile for: Sven Axelsson

960701	Change	LGP		Some minor dialog cleanups on Mac/PC.

960701	Fixed	LGP		only enable save command if dirty, or no file name associated with this document
960625	REPORT	LGP		Save should be disabled (windows bug) if the
						doc is not dirty (ie after a save).

960628	CHANGE	LGP		SetRegistryKey ("Sophist Solutions") for LedIt! Windows
						app. No noticable effects, except if users read their
						registry dbase...

960628	CHANGE	LGP		Find Again should be F3 on Windows, and not %G.

960619	Fixed	LGP		I'm not sure I'd call this a bug, but a feature with room
						for improvement. But anyhow, its fixed for the rc2 release.
960619	REPORT	DStein	Rewrote DLOG code to use PPOb's on LedIt! Mac Application.
						At 5:51 PM 6/19/96, Douglas B. Stein wrote:
						>Hi Lewis,
						>
						>1) ActivPad ignores font Smaller/Larger commands on mixed size 
						>selections. It should increase each style run by a point size. This bug 
						>also exists in LedIt 2.0rc1.

960626	CHANGE	LGP		Rewrote DLOG code to use PPOb's on LedIt! Mac Application.
						Reason is to get mutlifinder switching and drag of
						moveable modal dialogs working. Just isn't done for you
						with Apples Dialog Manager, apparently. Sigh. Hopefully
						cleaned up some of the dialogs a bit as well.

960616	CHANGE	LGP		Discovered MSVC 4.1 really DOESN'T support string class.
						CRAP! And I already started using it!
						So did quicky string class vectoring to MFC CString
						#if !qNoANSIStringClassSupportSoFakeWithMFCCString.

960615	CHANGE	LGP		Renamed StandardURLStyleMarker::URLDData to Led_URLData, and
						moved it to LedSupport. Added Led_URLManager to LedSupport,
						and made it subclassable (replace the mgr - useful for ActivePad
						$ActivPhysics$ subst in URLs). Then move most of the URL support
						from StandardURLStyleMarker to Led_URLManager.
						NB: this was my first use in Led of the ANSI string class. Both
						CW9 and MSVC4.1 have this, so I'm expecting to be OK. Start small,
						and then maybe later cleanup some char* uses with this...

960615	CHANGE	LGP		Neatened LedIt! Mac dialogs a bit.

960614	CHANGE	LGP		Got rid of StandardURLStyleMarker::URLAndTitleToURLD () etc.
						Instead added new StandardURLStyleMarker::URLDData object.
						Changed some StandardURLStyleMarker to use this little
						helper class.

960614	CHANGE	LGP		Added StandardURLStyleMarker::URLAndTitleToURLD ()/
						StandardURLStyleMarker::URLDCracker () utilties (for use
						in ActivPad).

960614	CHANGE	LGP		Lose TryToSendSomeTmpMemBackToOS () code/hack for powerplant app.
						Maybe retry this post- Led 2.0. Was disabled anyhow.

960613	CHANGE	LGP		Support CW9 final CD. Prerelease I was working from
						basicly same as CD, except I was using old PowerPlant.
						A number of changes for new PowerPlant.


---------------- Released 2.0rc1 - 960531 - Below ------------------------------
960531	Fixed	LGP		Fixed.
960530	REPORT	LGP		Drag & Drop of a little text bundle on PC only gets undone as two parts.
						On PC only must be accidentally putting a BREAKCOMMAND in between.

960531	Fixed	LGP		Fixed. Cleaned up a bit. Could do more someday to clean this up. See #0366.
960226	REPORT	LGP		On change of selection (other than by one as when editing?? think out details)
		(0365)			do a command break (so for example, when we do a find, we don't get
						undo's strung togheter - then we don't need the break crap on
						mouse clicks.

960531	Fixed	LGP		Fixed. Cleaned up a bit. Could do more someday to clean this up. See #0366.
960226	REPORT	LGP		THINK ABOUT - can we just do BreakInGroupCommand () call when selection
		(0364)			changes by more than just advancing past insertion? (ie except in context
						of InteractiveReplace () call?) - then we catch nearly all cases in one
						fell swoop!

960531	Fixed	LGP		Fixed. Only did for Mac and Windows applications. Don't bother with ODPart.
						Wait til rewrite. Didn't do anything with help menu - just AboutBox.
960305	REPORT	LGP		Add URLs and IC links to about box (make them hot) and maybe add help menu
						items on mac which open URLs.
		
960531	Fixed	LGP		Fixed.
960530	REPORT	LGP		Redo the about box to say shareware, and price and POBox etc. And make prettier.
						And mention class lib and other products etc.
		
960531	Fixed	LGP		Fixed.
						I ended up deciding there was no need todo the shared-dbase version
						for style info. By just using a few other tricks, I managed to get about
						the same space savings.
						At least for one sample file (made up of copies of my release notes, catted
						together I got)
							PlainTextSize		267K
							AppleSTYLTextSize	295K
							Led-ver4-format		627K		(Led b10 and earlier)
							Led-ver5-format		287K		(Led b11 and later)
						So this new format is roughly 30% more compact that Apples STYL represenation
						(for the STYL part - the text is the same). Also, these numbers can easily
						vary quite a bit depending on font names, etc. The above I think is typical, but
						not always true. Anyhow, this is a big enuf improvemnet to
						not warrant and further tweeks right now.
						Note that new version of Led can read new and old format files. But OLD versions
						of Led will just see this as a bad file format, and fail to open the file.
						Also, though the LedIt! programs provide no way to write old format files, the
						programming APIs make it easy todo so.
						Use StyledTextIO...::Read/Write_Version_X for reading/writing differnt formats.
						By default version 5 (current compact) format is now used.
						Also note that it is only in version 5 format that you get the fix for SPR#0363.
960503	REPORT	LGP		More compact Led-private-format. In particular, make table of style info,
		(0342)			and simply store indexes in text.

960531	Fixed	LGP		Fixed. See #0342
960520	REPORT	LGP		Current Led private format doesn't support some styles.
		(0363)			Its least-common-denominator between windows and Mac.
						That MUST be fixed before release, since that format is used
						internally for cut/paste, and drag drop, etc.
						Delay fixing this till we fix #0342 - since we don't want
						too many format changes (as few as possible).

960530	Fixed	LGP		Fixed. Quick-and-dirty version (saves text as well). Later do a more
						efficient version. See SPR#0362
960430	REPORT	LGP		Undo style-info changes.
		(0361)

960530	Fixed	LGP		Fixed. On the Mac, this was easy. Just passs updateRgn arg to ScrollRect()
						and do InvalRgn(), and lose some of the xtra Refresh() I'd done.
						But for windows, the Rgn retruned by ScrollDC() is WRONG!!!! for the case
						of little windows obscuring the window during a scroll (like a floating pallet).
						Even using the RECT argument to ScrollDC() isn't quite right. But using the RECT
						arg and enlarging it SLIGHTLY produces an acceptable scrollbits optimization,
						plus seems to work on all cases I've tried. But its awefully kludgy. I wish I
						could have something cleaner I could have confidence in.
960527	REPORT	LGP		Code for scrollbits is slightly broken. It assumes all area that we scrollbits
						was visble. If parts weren't we need to INVAL those. Right now, we get cruft coming
						out for parts obscured by floating pallets etc while scrollbitsing.

960530	Fixed	LGP		Fixed - sort of. Not really sure what I should do. Allowing the scroll
						to happen would be bad cuz - even if windows supported it, scrolling the
						active item offscreen would be wierd (since all the active menus would be for
						some selected object not visible on the screen, and with no easy way to
						get it back). I considered (even implemented, then threw it out) simply
						eating OnVScoll() events - beeping instead of scrolling when we had
						an active item. Instead I decided it worked better if in the OnVScroll()
						code we simply call COleControlItem::Close() on the active item. This
						appears to me to be a reasonable UI choice.
960530	REPORT	LGP		Scroll while OLE activte item inplace activated. activated item doesn't move
						and that provides visual screw up.

960530	Fixed	LGP		Fixed.
960522	REPORT	LGP		Click outside of embedding while embedding active (on PC/MFC) should
						deactivate the embedding.

960530	Fixed	LGP		Trouble was end-of-window range-clipping in GetSelectionWindowRegion ().
						Do 	to = Led_Min (to, FindNextCharacter (GetMarkerPositionOfEndOfWindow ()));
						rather than to = Led_Min (to, GetMarkerPositionOfEndOfWindow ());
960529	REPORT	sven	At 10:00 PM 5/29/96, sven@wordwork.se wrote:
		(0358)			>When the selection extends to the last character of the document, the   
						>drag outline is wrong - it outlines the actual text instead of the   
						>selection (i.e. it is not a block, but a more complex jagged region).

960530	Fixed	LGP		Fixed for PC.
						Turns out to be almost as much of a pain for the PC, though for
						different reasons. On PC no trouble with hilight rect, but instead
						we don't get OnDragOver () mouse messages when the user doesn't
						move the mouse. So the autoscrolling just stops. (Just like the
						problem for autoscrolling on a drag-select). So same solution - use
						a timer proc. Sigh... Anyhow, it works now. I hope somebody really
						cares about this D&D stuff :-).
960530	WORKING	LGP		Fixed for Mac.
						This was a REAL PAIN!!!
						Try SimpleText, or CW9, and do drag-of-text with scrolling, you'll
						see that these applications screw up the drag-hilight when scrolling.
						Style 1.4 DOES seem to correctly handle this (though they do pixel
						scrolling which I think is a poor choice).
						Anyhow, after a bit of futzing and trying differnt approaches, I stumbled
						on one that works.
960529	REPORT	sven	At 10:00 PM 5/29/96, sven@wordwork.se wrote:
		(0357)			>When dragging some text to the edge of the window the contents should   
						>auto scroll, so you can drop the text somewhere not originally visible.

960529	Fixed	LGP		Fixed. See #0359.
						Fix was a combination of more careful definition of
						StandardStyledTextInteractor::SetSelection_ () taking into
						account fLeftSideOfSelectionInteresting.
						Coupled with more careful updating of fLeftSideOfSelectionInteresting
						in TextInteractor_::SetSelection () and
						TextInteractor_::DoSingleCharCursorEdit ().
						David - I'm not sure this is exactly what you had in mind, but I
						hope its at least closer.
960529	NOTE			>        Led has no concept of paragraph, or document font
						> (though the style architecture is flexible enuf to easily
						> implement one, I just don't have a clearly thought out one
						> in mind, and it would need to be clearly defined).
						>
						>        I'll think a little more about this, based on our
						> dicussions yesterday. I will only be able to address this 
						>for 2.0 if I can find some simply way to address your concern.
960528	REPORT	DLyall	At 12:02 PM 5/28/96, David Lyall wrote:
		(0360)			>Erasing all the text in the control makes the insertion 
						>font revert to the original default. I would have thought 
						>the desired behavior is to maintain a paragraph font. An 
						>empty control still has an empty paragraph which should  
						>retain its selected font.

960529	Fixed	LGP		Fixed. See #360
960528	REPORT	DLyall	Based on my meeting with David, he suggested that when cursoring
		(0359)			we should fill in the fEmptyStyle (NULL-STYLE) from where you
						cursored FROM - and just grab from right (as we do now) on mouse
						clicks.

960529	Change	LGP		Attempt support for Copeland Universal Headers STRICT_...
						support. But several things seem impossible right now.
						Like accessing whether control is visible, etc.
						I've submitted bug reports to Apple. And PowerPlant currently
						doesn't compile with these options either.
						All of Led compiles with them exception Led_PP. I'll keep an
						eye on this as Copeland approaches.
						#define	OLDROUTINENAMES		0
						#define	OLDROUTINELOCATIONS	1	/*Cuz of PowerPlant (pre-cw9 - try CW9 version)*/
						#define	CGLUESUPPORTED		0
						#define	SystemSevenOrLater	1
						#define	STRICT_CONTROLS		0	/*Cuz of PowerPlant (pre-cw9 - try CW9 version)*/
						#define	STRICT_WINDOWS		0	/*Cuz of PowerPlant (pre-cw9 - try CW9 version)*/
						#define	STRICT_LISTS		1
						#define	STRICT_MENUS		0	/*Cuz of PowerPlant (pre-cw9 - try CW9 version)*/

960529	Fixed	LGP		Lose all qNoRTTISupport code. Wasn't 100% right anymore anyhow (since
						I always compile with RTTI enabled. Not worth much to me right now to
						be compatable with old compilers.
960529	REPORT	sven	At 10:00 PM 5/29/96, sven@wordwork.se wrote:
						>Minor point: You are not consistent in using the RTTI cast macros. In   
						>StyledTextImager.cpp all the casts are done with the real dynamic_cast   
						>syntax instead of with the macro, and in MultiRowTextImager.cpp both   
						>syntaxes are used.

960529	Fixed			
960529	REPORT	sven	At 10:00 PM 5/29/96, sven@wordwork.se wrote:
						>In FilteredFilePicker.cpp (LedIt) the Append_DITL function needs to be   
						>bracketed by
						>#pragma options align=mac68K or else it crashes on a PowerPC.

960529	Fixed			I think this now works as you would expect. But it was
						more complex than I would have liked, and I'm nervous
						I could have messed up some of the rest of the (moderately
						complex) cursoring code. Please see that this, and other things
						like forward/backward word cursoring etc work as desired.
960529	NOTE			>        I'll try to fix this for my next release except for
						> blinking caret (even MSWord doesn't support that).
960528	REPORT	DLyall	At 12:02 PM 5/28/96, David Lyall wrote:
						>When selecting text with the arrow keys, the user can only 
						>expand the selection. That is, suppose the user holds down 
						>the shift key and presses the right arrow. Characters to 
						>the right are selected. But the user goes too far to the 
						>right. To correct his error, he presses the left arrow key 
						>(without releasing the shift key), intended to shrink the 
						>selected range. To his surprise, the selection starts 
						>being extended to the left of the original insertion 
						>point. He has no choice but to start over. (Feature or 
						>bug? If feature, definitely non-standard, unusual 
						>behavior, at least for the Windows crowd.)

960529	Fixed	LGP		Led_MFC OnTimer() code was shabby, and forgot the SetSelection
						code done in mouseMoved. Rather than DUP it, added helper routine
						to share this code. Now SetSelection done in
						both places. Also use eImmediateUpdateMode so we get
						immediate redraw (matters? maybe not).
960516	REPORT	LGP		On PC, when autoscrolling (drag selection), blackness
						only updates when you move cursor (at least on NT 4.0).

960529	Fixed	LGP		Fixed bug where we forgot to set timer on dblclick so we lost
						autoscrolling without mouse move after dbl click.

960529	Fixed	LGP		Well, this is one of those corner cases I wasn't sure what
						the right thing todo was. I HAD adopted the approach that
						we would scan back over a whitespace if you dbl clicked on
						whitespace, and over non-whitespace if you dbl clicked on non-whitespace.
						
						Now I've surveyed various applications and this is what they do:
						
						¥	MSWord (On windows) selects the whole row
						¥	All Mac text editors do likewise
						¥	WordPad does something VERY CLOSE to what Led did up til now (b10 and earlier)
						¥	NotePad did something REALLY NUTS. I'll let you try it :-)
						
						Since there is a CLEARLY right way specified by the Mac, and since windows
						apps are at best ambivilent about this, I'll adopt the Mac/MSWord approach.
						That is what is implemented for the next Led release.
960528	REPORT	DLyall	At 12:02 PM 5/28/96, David Lyall wrote:
		(0354)			>Double-clicking on a blank line (a line with a CR only) 
						>selects the last word on the previous line.

960529	Fixed	LGP		
960529	NOTE			Very minor bug. Recorded as SPR#0352. 50% chance I'll fix this
						before 2.0 release. Otherwise, soon after.
						Also, based on my visit to David, and his showing me this, you
						must click on the very beginnign of the word, and hold the mouse
						down a while on the second click. Probably a bug with the ProcessSimpleClick
						tracking code?
960528	REPORT	DLyall	At 12:02 PM 5/28/96, David Lyall wrote:
		(0352)			>For example, if you double click on the first character of 
						>a word, the space to the left of the word is selected 
						>along with the word (feature or bug?)  

960529	Fixed	LGP		Color info no longer shown in dialog. Separate SPR#0356 to track
						future colored text feature.
960529	NOTE			>        As we discussed, there are two issues here. The font
						> size change is indeed a LedIt! bug (spr#0353), and has been fixed
						> for b11. The color is more marginal. I simply don't support color.
						> I will either see if I can safely remove the color control from the
						> dialog, or note this defect in the release notes. A future version
						> of Led will support colored text (easy, I just don't think its
						> important, so its not a priority). This will be tracked as SPR#0354.
960528	REPORT	DLyall	At 12:02 PM 5/28/96, David Lyall wrote:
		(0354)			>Selecting a color in the choose font dialog results in a 
						>smaller font, not a change in color (this may not be a 
						>problem in LED, I guess.)

960528	Fixed	LGP		This is extremely rare and minor, and I was about to defer it til
						I realized it was easy to fix. Trouble is I was drawing in copy
						rather than TRANSPARENT mode (in text out code do SetBkMode (TRANSPARENT).
960528	REPORT	DLyall	Ariel-24 for a line of text. Have successive g's in text. Make
		(0355)			left half of g's italic - right half plain. At the boundary, the
						top-right of the left g is cut-off (barely noticible).

960529	Close			Though I saw this myself at your office, I cannot reproduce it. Seems
						to work fine on my machine. All I can think of is it might be an NT 3.51
						bug (I'm using 4.0) or low memory or ???? Who knows.
960528	REPORT	DLyall	Do Alt-PrintScreen, and then try to paste resulting picture into Led.
						It just beeps.

960529	Fixed	LGP		The bug was that we set the style-database to the doc created one
						in OnInitialUpdate(), but we read in a file before then. During
						this interum, there are two style databases associated with the
						textstore. The StyledTextImager code uses both, and sometimes
						grabs style markers from one, and sometimes the other.
						There are two fixes here. First its not a BUG - its by design
						the way the style text imager code is working. So we simply
						add a ADVISORY assert to SummarizeMarkers() if we ever get
						conflicting markers of the same priority.
						Second - the REAL fix was to set the style database earlier. I
						no longer override OnInitialUpdate() in LedItView (don't remember
						why I did to begin with). Instead set style database in CTOR
						for LedItView.
960528	REPORT	LGP		Dbl click on Led b10 release notes.led munged to have 24 point
						first line, and ndbg version of application on PC. First line
						hight not right. Display all correct, but somehow calc of line
						hight wrong. Funny, cuz this doesn't happen in other cases (like embeddings)
						but does here consistently.

960528	Fixed	LGP		On MFC application, the font size was ignored as arg to ChooseFontDialog
						so the dialog always came up with no font size selected, even if there
						was an appropriate one.
960528	REPORT	DaveLy	On MFC application, the font size was ignored as arg to ChooseFontDialog
		(0353)

960528	Fixed	LGP		Fixed. Fixing this also introduced a bug where we got a blank
						page at the end, but I fixed that too.
960528	REPORT	LGP		MFC printing. ForceAllRowsShowing flag not set properly. We
						see way too much on last page.

960528	Closed	LGP		Cannot reproduce. I wish I took better notes on this
						bug. I thought I even understood it. But I cannot get
						it to fail right now. So assume its fixed til I hear back
						from some user (David L?).
960523	REPORT	LGP		PC only Italics bug. Discovered just after b10 release.
						Trouble is if char overwrites PREVIOUS character cell,
						and we erase that char, not good enuf what we currently
						do, cuz draw of prev characters gets clipped.
						To reproduce, type word in italics, place cursor at end of word
						and backspace. For some chars you should see bits of overhang
						from following char drawn in prev not erased when following
						char deleted.

960527	Fixed	LGP		Fixed a few days ago, I believe.
960430	REPORT	LGP		Drag object (eg. large picture) on DEBUG version of Mac under low
						memory situation, and app suddenly exists. Reason appears to be
						throw in RecieveDragItem() does an 'unexpected' when we try to throw
						across Apple API/DragMgr boundary.

960527	Fixed	LGP		Fixed. At least well enuf for now. Gonna have to rewrite all that code
						when I support mixed/better charset support anyhow.
960315	REPORT	LGP		Fix word break code to always break on embeddings.

960526	Change	LGP		Fixed. And at same time cleaned up LedItView PC code for invalinding
						chached selected font (override DidUpdate).
960520	REPORT	LGP		Document dirtying flag broken on PC. Test carefully on Mac when I fix this
						to be sure fixed everywhere. And there is the view/font/selection
						(at least on PC) cache which probanbly can just get invaled where
						we set the dirty flag.

960526	Change	LGP		Move most of the LedItControlItem code to the Led Class library.
						The main reason for this is we want the written format to remain
						the same even for different applications built from Led (eg.
						the AWI notebook). As the applications diverge we want this
						bit of code to remain the same. And it turns out most of it
						can usefully be moved down to Led Class Lib.

960526	Fixed	LGP		In working on #0349, #0350 I noted some exception handling problems
						on PC (display of alerts and MFC trapping our thrown expcetions).
						These should all be fixed now.

960526	Fixed	LGP		See #0350.
						Completely rewrote LedIt! MFC filename / registration / DocTemplate
						code. MFC does a really piss-poor job of this stuff.
						Anyhow, I think its all fixed, and working properly now.
						At least as PROPERLY as you can on a PC (fundemental confusion
						exists between file type and file name).
960523	REPORT	LGP		On system that had win95 and old LedItPC installed, we get MFC small
		(0349)			icon displayed. Read up and figure out how to fix this - proabbly
						need to provide the small icons and regsiter them.
						(see Johns PC).

960526	Fixed	LGP		See #0349.
960430	REPORT	LGP		Gross hack how we detect file type on PC & no catch handle for
		(0350)			exceptions. Do a better job - much as we do on the mac.
						Maybe better.

960526	Changed	LGP		Renamed LedIt! MFC files LedIt.cpp/h to LedItApplication.cpp/h.

960524	Fixed	LGP		
960523	REPORT	LGP		Pretty sure the DragAccept/OnDropFiles stuff I did for the PC
						was unneeded (now handled better deep in Led/TextInteractor).
						Be sure first- but then delete this crap.

960524	Fixed	LGP		Fixed LedMFC_::OnMsgSetFont ().

960524	Fixed	LGP		Fixed, and at the same time I made zooming work much
						better. It now zooms to a window about the size of
						a page of text (width wise, if it fits)
960315	REPORT	LGP		Size of default LedIt! application document window
						should be more reasonable.

960524	Fixed			Lots of low-memory fixes for PowerPlant application.
						Do new alerts for when low on TmpMem and application
						memory (on IdleTime). Now we do the only warn after
						10 seconds since last warn, but not for exceptions.
						LedIt! PowerPlant should now be VERY STABLE under low
						memory conditions. Well - make the PRETTY stabe :-)

960524	Fixed	LGP		new bug with PP excpetion handling. Keep creating
						windows till one fials. PP doesn't catch our out of
						mem excpetion, cuz presumably wrong format. Be sure
						we throw exceptions so PP DOES catch tehm... Else unexpected!!!

960524	Fixed			UpdateGWorld seems to crash with 7.5.3 when we are low on
						memory in our app heap. So just treat being low on memory
						as a failure result from UpdateGWorld, and avoid the call which
						could crash. Just get flicker/no gworlds in that case.
960524	Fixed			
960501	REPORT	DougSt	Need minimum size for document window in LedIt! Mac (PP).

960524	Fixed			Cleaned up.
960523	REPORT	LGP		Look at old StyledTextImager::DrawSegment() code for old assert
						that was failing about measuretext results not agreeing with results
						coming back from draw. See if its still there and delete it - its
						obsolete.

960524	Fixed			Fixed.
960523	REPORT	LGP		LedItPP - HilgihtDropArea could do better (no inset maybe)?
						(minor cosmetic issue)

960524	DONE			Tried. At least on my system, no noticable difference.
						And according to docs, sleep time only done (sleeping only done)
						when we have no pending events.
960523	REPORT	LGP		Try new sleepTime on PP app. See if that speeds typing?
						(typing fast enuf, but so easy to try)

960524	DONE			Lose that hack about not showing out of memory alerts if not
						enuf time gone by. Was a stupid idea. Simply eating Draw()
						execeptions solves the same problem I had in mind. Now thats
						not a great solution either, but I'm more prepared to live with
						that.

960523	DONE			Did a few releases ago.
960430	DEFER			Reviewed
960423	DEFER	LGP
960314	Report	LGP		Should use GWorlds on mac embedding pictures to get rid of flicker.


---------------- Released 2.0b10 - 960523 - Below ------------------------------
960523	Fixed	LGP		on mac don't warn too often about out of memory exceptions
						(giving enuf time to maybe select the quit/save menu items?).
						and eat them for Update exceptions. No GOOD solution to these
						problems. I think this is just less BAD than before.

960523	Fixed	LGP		on mac don't throw out of a failed drop - hangs mac drag mgr badly

960523	Fixed	LGP		on mac fixed hilight region to take into account scrollbar
						for drag-target hilighting...

960523	Fixed	LGP		Well mostly. Now this works. But we always interpret the file
						as a plain text file. That - I think - is good enuf - for now.
						Open new SPR #0347 for support of different file formats.
960504	REPORT	LGP		Drag a text file from the finder (on mac or desktop on win 95) onto
		(0346)			content area of Led docuemnt. Should insert, but it doesn't.
						This WORKS with Notepad (and LedIt OD). Nice feature!

960522	Fixed	LGP		Fixed.
960430	REPORT	LGP		Handle registering icon/file types on LedIt! Windows

960522	Fixed	LGP		Appears to be an MFC bug in DocManager's OpenDocumentFile ().
						Work around by calling FindFirstFile() to convert 8.3 name
						from command line into long file name. Posted to USENET
						to see if anybody there had any better solution.
960522	REPORT	LGP		Open a file with a long file name in LedIt! Windows. It opens, but its name is in
		(0345)			garbled MSDOS format. And then subsequent save leaves it in garbled MSDOS format.
						Related to #0344?

960522	Fixed	LGP		Seems to work OK for me - dup of #0345?
960408	REPORT	DougSt	At 12:22 PM 4/8/96, Douglas B. Stein wrote:
		(0344)			...
						>Here's a silly one (Win95):
						>
						>1) Create foo.led in a directory with a long file name with a space in 
						>it. (We tried "My Briefcase" - the standard briefcase.)
						>
						>2) Quit Led.
						>
						>3) Double-click the Led file directly.
						>
						>4) WIndows complains about not being able to find "C:\Desktop\My"
						>
						>5) If you rename the directory (e.g. delete "My "), double clicking on 
						>the Led document works.
						>
						>I don't know if this is improper construction of the shell command by 
						>Windows or if the MFC code in LedIt improperly processes its argv/argc.

960522	DONE	LGP		Fixed a long time ago.
960226	REPORT	LGP		Make text BOLD on mac, and open on PC, and bold lost (need to write higher weight?)

960521	DONE	LGP		Fixed a long time ago.
960303	REPORT	LGP		Cleanup Web-URL support. Implement for PC.

960521	REPORT	LGP		Fixed. Replaced arg with optional pixelWidth arg, and the tab
						bug was with StyledTextImager::DrawSegment () - and the logical
						clipping stuff I did earlier in the this release (so it wasn't
						in b9). I forgot to read-adjust for tabstops. Now just use
						CalcSegmentSize() so I get all that taken care of for me.
						Must re-profile, and see we have IMPROVED speed rather than
						degrading it cuz of this.
960520	REPORT	LGP		Lose DrawSegment() update of areaRect. And closely related, debug
						occasional assert that fails on PC about this reutrning right answer
						and on Mac with tabs I think this happens (maybe both).

960521	Change	LGP		SHUTOFF	qDoubleClickSelectsSpaceAfterWord (even on
						windows - was off on Mac). I just think it was too weird. I'd
						added cuz a client asked for it (LEC). But I just hate it,
						so its off for my LedIt! builds. Do real intelligent CutNPaste
						soon.

960521	Fixed	LGP		Weird! Cannot really say FIXED - WORKED AROUND more appropriate.
						Oh well - see MultiRowTextImager::HilightARectangle_ () for
						more details...
960520	Working	LGP		test again - maybe fixed?
960520	REPORT	LGP		Invert color of empty rows broken on 68K builds.
		(0343)

960521	Fixed	LGP		Done earlier.
960430	REPORT	LGP		Fixup CRLF conversion script for PC, get it up to date.

960521	Fixed	LGP		Done
960430	REPORT	LGP		For font size menu, add OTHER... command, and add bigger/smaller commands
						(requested by DougSt).

960520	Close			Please retest, and see if still 'choppy'.
960520	WORKING			More progress - see #0341
960510	WORKING			Made a lot of progress in the last couple days speeding this up.
						Re-examine question after LedItView::FindCommandStatus_Font () is
						sped up (and its equivielnts on the PC). - See #0338.
960427	REPORT	DaLyall	At 11:03 PM 4/27/96, David Lyall wrote:
						>3. Processing of keyboard input is choppy. When a key is held down, 
						>the resulting characters appear in chunks, not smoothly one at a time 
						>as desired.
				        The "choppiness" is really a FEATURE, to prevent from falling behind when
				        you type very quickly (if Led cannot keep up with the typing/redisplay,
				        it skips the redisplay, and just eats the characters). The BUG/Problem,
				        is that the current release of Led is SLOW in handling typing. Try Led
				        1.0 for comparisons sake. You'll see that is several times faster,
				        and doesn't appear 'choppy'.
				        Speeding up typing, and a few other operations (e.g. select-all on
				        large document slow), is the main thing which I will be addressing
				        in the next couple weeks before release. I doubt Led 2.0 will be
				        quite as fast as 1.0. But it will be much better than it is currently.

960520	Close	LGP		This now performs reasonably, and my other attempts at tweeking
						didn't help. Leave this be for now. If it (or anything related)
						remains a problem, it will re-surface in future performance testing.
960518	Working	LGP		My fix to 0338 GREATLY improves this. Its now QUITE ACCEPTABLE
						(apx 1 second for 800K file). But we can (and should) still
						do better.
						Next todo is hack where we don't grab all style markers for whole
						range, but grab the ONE AT A TIME - til we see no completely contiguous
						run. May not always work, but should help alot of cases.
960516	Working	LGP		Note this is closely related to (338).
						There are many facets to this. The first is the code in
						GetStyleInfo () does a large allocate of markers, and then
						sorts them (later I'll fix the code which calls this, to not grab
						so many at once, but we grab alot at once other times so this is
						worth fixing). It then SORTs them. I had been using BubbleSort
						(and in fact, embarrassingly, there was a bug in it :-)).
						Now I've done a templated Led_ShellSort, and use that instead.
						For example, selectall on a 256K file (based on led relnotes,
						with styles) went from 45 seconds down to 3. Of course eventually
						we want to get down to ZERO. But the ShellSort helps alot.
						BTW, I also implemented QSort(), but it was almost twice as slow
						as ShellSort(), so don't use by default. Thanx to Sedgewick!
960503	REPORT	LGP		SelectAll is VERY SLOW. Trouble is code which does DoContinuous() stuff
		(0339)			to find fontmenu enablings etc. Its very slow for this case (and needlessly).

960520	Working	LGP		Many OF MINOR TWEEKS based on Mac profiling, like
						Marker::HookData::GetStartEnd (), more careful choice
						of Led_FontSpecification vs.
						Led_IncrementalFontSpecification, etc...

960520	Fixed	LGP		Another speed tweek to SharedStyleDatabase::SetStyleInfo ().
		(0341)			Delay call to DoAboutToUpdateCalls () (which calls expensive
						PreReplace()) in cases where we weren't going to
						change any styles anyhow. This is VERY COMMON in typing. Anytime
						you are typing anywhere EXCEPT at a style-run boundary - the
						marker-absorbtion of the inserted characters just happens to
						work out so we don't need to update the font info. So this tweek
						helps most cases of typing by another 10% or so (profiling #s on mac).

960518	Fixed	LGP		Substantial rewrite of the FontSpecification stuff. Now I can
						share much more code across mac/pc. Needed to fix several bugs
						on both Mac&Windows where we didn't have enuf granularity of
						bools for validity.
						Renamed DoContinuousStyle () --> GetContinuousStyleInfo ()
						(and similarly for _ method).
						No longer takes enum of font/style/etc to match. Does em all. And
						doesn't return which matched. Implied in the Led_IncrementalFontSpecification
						structure returned.
						This greatly simplified and made more efficent much of the application
						code which did the font menu checking, and was needed to fix
						the bug where you had overlapping bold/italic style runs, and 
						selected across both. Now you see No items or Both items checked
						as appropriate (and the toggle behavior now works).
960516	DUP-REP	LGP		Even on mac style stuff buggy - need separate flags for italics valid,
						bold valid etc, so set italics on small run, and then BOLD on bigger
						run works (currenty messes up even on mac!)
960515	REPORT	LGP		fix stylerun style menu bug on PC (set bold then set
						italic and then set font name and you lose italic -
						I think - or at least some combos don't work)

960518	Fixed	LGP		Now we cache last value (Mac/PC/OD-Mac) for whole menu setup.
960515	WORKING	LGP		Largely fixed in other 960515 note.
960510	REPORT	LGP		LedItView::FindCommandStatus_Font () is VERY SLOW.
		(0338)			I did some preliminary profiling, and the main thing which appears
						slow is the code to look for style runs, and figure out which menu items
						to enable. At the very least this can be sped up by nearly 10 times
						by caching results (cuz this routine called for each menu item, and
						we recompute answer for each).

960516	Fixed	LGP		I had some difficulty in reproducing this. Now I
        				understand what is going on.
						This problem only happens on windows (due to a quirk in how I
						reconciled the inconsitencies between GetTextExtentExWhatever32
						and GetTextExtent()), and only happens if the selection you make
						has a left-side in the midst (not at the right edge of) an
						italics selection, and the right edge of the selection
						cannot be in the exact same font/style run.
						Closely related, there was a much more subtle bug (on both mac and
						windows) I doubt you noticed at the edge between style runs with
						italics, where sometimes the ligatures crossing chracter cells
						might get erased. This too is fixed for b10.
						Actually, my first attempt at fixing this wasn't 100% right. I don't
						really need to invalidate any characters further back. All I need todo
						is in StyledTextImager::DrawSegment() - DONT be quite as agressive
						in my logical clipping of segments. Draw a segment whose last character
						might have drawn something into my cell.
						Doing this PERFECTLY would require some infrastructure I don't have
						in place yet, so as a temp hack, go 20 pixels on either side. That
						will be good enuf for now, and cause little extra work, and no flicker
						since I'm using offscreen bitmaps.
960516	REPORT	LGP		At 9:38 AM 5/16/96, David Lyall wrote:
		(0340)			...
						>FYI, I think italic still is broken in the 9 beta. Try 
						>this:
						>
						>Format some text italic. Select part of a line, then hit 
						>the delete key. Some of the line is not updated correctly.

960516	Change	LGP		TextInteractor_::DelaySomeForScrollBarClick () now does three (shorter)
						long delays, and then does the short delay.

960516	Fixed	LGP		Don't do offscreenbitmap on PC for printing (caused ugly blackshit to
						display). Oops.

960515	Fixed	LGP		Lose define for qUsingNewEraserIMCode, and just always assume that case.
						Also, lost invalidRect and segmentHilighted args to DrawSegment() method
						of EmbeddedObject. Lose segmentHilghted arg also for TextImager::DrawSegment().
						Instead we do the hilighting in DrawRow() etc. And we do all our logical
						clipping within TextImager(and subclass) DrawSegment(), so we don't need
						to pass it to the embedded objects (style runs, picts etc) themselves.
						Eliminated lots of complicated erasing/inverting code from embeddings, etc.
						Lose no-longer-needed EraseBorder() code.
						No real visible changes, just simplications and cleanup of code I did last
						release.
960514	REPORT			Go through code I just did for italic/etc rewrite, and do major cleanup,
						getting rid of unneeded code for selectionHilighted flag, and invalidRect
						args to DrawSegment() routines etc. Also, consider losing, or making
						optional ptr-return parameter of adjusted width, so we don't bother computing
						when not really needed. That would make our draw a little faster, and
						I believe cost us nothing.

960515	Changed	LGP		Major tweek of file open time. For a sample file made up of led
						release notes pasted together several times (800K long) it takes:
							->	Led 1.0.1		3 seconds to open.
							->	Led 2.0b9		270 seconds
							->	Next Led (b10)	2 seconds if we strip STYL info (so fare compare
												with Led 1.0.1)
												7 seconds WITH the STYL info.
							->	BBEdit Lite		1 second (it ignores style info and does no
												word wrapping)
							->	Style 1.4		13 seconds whether we strip the STYL info or not.

960515	Fixed	LGP		Fixed StyledTextIOSrcStream_FileDescriptor::seek_to (size_t to)
						to not ignore 'to' arg and to handle EOF case correctly (mac).

960515	Changed	LGP		Minor tweek to LineBasedTextImager::Split () to tune its
						behavior to quirks of the ChunckedArrayTextStore performance
						curve made reading in files DRAMATICLY faster. Also tweeked
						TextInteractor_::PreReplace () to not compute update info if
						off screen. This too helped make file reading MUCH faster.

960515	Changed	LGP		Went through a little bit of code and put in throw()
						specifiers on functions. Mainly for documentation
						purposes since none of the compilers I use yet generates
						useful diagnostics about them. All I did was about 20% of
						the TextStore code.

960515	Changed			Did profiling on MacPPC and saw most of the time in the typing
						case was cuz of the cost of doing GetFNum() etc in mapping
						font names in menus to numbers for compariosn with command numbers.
						Fixed this by just caching the mapping.
						
						Also, based on profiling data, quite a few more very minor tweeks.
						
						Still more to be done on the DoContinuous () front...


---------------- Released 2.0b9 - 960514 - Below ------------------------------
960514	Fixed			May need to revise this to see if there is any negative performance
						impact noticable. Revist cuz provides SO LITTLE value. So few cases
						where there was noticable flicker anyhow. Also, this offscreendraw
						crap doesn't work with OpenDoc (so disabled there). That is an open bug.
960510	REPORT			Because of new implementation of DrawRow() and moving the erase there
						instead of on-the-fly-segment erasing, we have some flicker (slight and
						rare). Only/Best way to fix this is Offscreen GWord/MemoryDC.
						My only fear is that it may slow things down, and is worth so little
						(without this I've gotten rid of most of the flicker).
						But probably must do this anyhow....

960510	Fixed			Now we do quite well, and display only from typing point to end
						of row (unless char causes word-wrap or new row in which case we
						draw least we can).
941105	DEFER			Mostly fixed now. Still some room for improvment, but we now
						only redisplay the line. Later - fix to only redisplay
						row, or part of row needed.
941019	REPORT	LGP		Typing a single character causes the whole screen to redisplay.
		(0011)			We should be smart about only redisplaying a single row if we
						can get away with it (like wordwrap doesn't change etc). Or at
						least only displaying the whole LINE. But not the whole page!

960510	Fixed			Really fixed in last release (960503). Trouble was the styled-text-io code for
						private format didn't write out pointsizes correctly.
960427	REPORT	DaLyall	At 11:03 PM 4/27/96, David Lyall wrote:
						>4. Pasting text resulted in the inserted text being displayed with an 
						>incorrect (smaller) fontsize, although the reported font size was 
						>correct. In other words, LED thought it had 10 point, but was 
						>actually displaying something smaller. Reformatting the affected text 
						>to 10 fixed the problem.
       					This is a Windows-only bug. The problem has todo with the two different ways
       					you can specify font-heights in windows - a positive height and a negative one
       					(where the size is interpretted slightly differently). Led currently (incorrectly)
       					treats a -10 size as the same as a 10 size (for purposes of display in the font
       					size menu, etc).
        				This will be fixed shortly.

960510	Fixed			Appears that we say refresh (RECT) and notice if
						interesection (even with no bits intersecting) we must call that
						DrawRow(). Trouble was code in MultiRowTextImager::Draw () was too
						forgiving in 'if test' to see if we needed to draw a given row.	
950527	DEFER	
950527	REPORT	LGP		Performance problem with drawing - we draw too much.
		(0297)			Enter a page of text. Click someplace in the middle. Set a breakpoint
						on MultiRowTextImager::DrawRow(). Type a single character. Gets
						called three times. SB only once.
						Cursory examination leads me to believe our code to get a bounding
						rect on the typing region isn't sufficiently agressive. Low priority
						for now since it doesn't appear high on the profiler, and we aren't seeing
						any flicker.

960510	Fixed			Fixed earlier as part of PreReplace/PostReplace() on 960509
941107	DEFER			OK for now. Defer further refinements until everything is stable
						and it is clear this needs to be addressed based on performance
						testing. Otherwise - this is fine.
941105	Working	LGP		Fixed most of the problems. Now two routines Pre/PostReplace
						in TextInteracter code that do all the work so all implemenations
						(different textstores and UI's) vectore through common code.
						And I added UpdateMode flag.
						All that remains to be done is further refining what gets redisplayed.
						And that can wait.
941102	REPORT	LGP		I did an OK version of SimpleLed_ChunkedArray_TCL::Replace ()
		(0080)			but there is room for improvemnt in getting even better
						refinement of what gets redrawn. And also - a better design
						so the code doesn't need to be duplicated between
						the (currently 2) Mac and (currently 2) windows versions.
						Add UpdateMode flag to Replace () method.  Use in
						MFC/other places as well.

960510	Fixed			As a result (mainly) of the SetSelection() tweek earlier.
950603	DEFER	LGP
950603	REPORT	LGP		Why do we draw so much in drag-select. Set breakpoint in draw
		(0313)			and see how often called when drag selecting. Since we draw
						flicker-free - this is only a minor performance issue. But we
						may as well fix it!

960510	Fixed			
960510	WORKING			Just handling case of ScrollByIfRoom (long) for one row up or down.
						Not too hard to handle more, but no point since wouldn't help.
						Maybe do more in the future, but this is all that is really helpful
						right now.
960510	REPORT	LGP		Should use Scollbits on scrolling. Not guaranteed to be faster, but
						frequently this will be faster.

960509	Fixed	LGP		fixed up AboutToLoseTextStore/GainedtextStore () mixins a bit (a few mixins
						didnt call all right _ methods... and base class versions).
			
960509	Fixed	LGP		fixed up PreReplace/PostReplace() TextInteractor_ code to use Opaque type
						for update info (instead of various parameters, like savedRect etc).
						Also, now it is MUCH more aggresive in minimizing what it draws.
						Greatly reduces how much we redraw when typing, and I'm hopeing will
						translated into a speedup.
			
						This is a huge change, and should be carefully tested (I found many subtle bugs
						in my first few attempts).

960509	Fixed	LGP		Fixed StandardStyledTextImager::SharedStyleDatabase::SetStyleInfo ()
						to not do a little of its updating, and in particular not notify
						markers of update if nothing changes. This turns out to be the case
						we run into frequently in typing, and that saves some refreshes
						(PostReplace calls).

960509	Fixed	LGP		
960507					MAJOR PEICE OF WORK! REDO ALL DRAW CODE IN IMAGERS DO MRTI::DrawRow()
						does the erase, and NOT any of the various segments. This is a big
						simplicatation of the code (especially for embeddings), and perhaps a slight
						performance boost. But most importantly, it should (mostly) solve my problems
						with italics/ligatures etc. Now character cells can overwrite adjacent cells.
						(still some problems relating to this need to be solved, but this solves 95%).

960509	Fixed	LGP		Rewrote SetSelection(RANGE, UpdateMode) code to do minimalistic update
						of just the range that changed. This selection changing update code should
						be carefully tested.

960509	Fixed	LGP		Possible occasional memory corruption in LedItControlItem::Write ().
						Most close (not just flush) CArchive() before its safe to Detatch()
						memoryBuffer (cuz close calls Flush again after detatch which has stale
						pointer - really I think this is an MFC 4.1 bug).

960509	Fixed	LGP		Completely rewritten, and redesigned. Now erase down on a per-row
						basis, and there is no longer and assumption that drawing one segment
						won't overlap another. BIG CHANGE, and this intruduced alot of flicker
						so I've started working on some bug reports about speed, and am reducing the
						flicker introduced by fixing this.
						Please test THROOUGHLY.
960501	WORKING	LGP		0335, 0336, 0337 are all closely related. And they are very painful, and difficult
						to fix. As such, I'm cutting the b8 release, and will make solving this the focus
						of my next (b9) release. Sigh - so much work for such a rare problem!
960226	REPORT	LGP		Debug/display of italics - seems like it wants to overlap into next character cell?
		(0337)			How to deal with erasing problem?
	
960509	Fixed			Italics handling completely redone. There is still room for improvement,
						but it is no longer really broken.
960427	REPORT	DaLyall	At 11:03 PM 4/27/96, David Lyall wrote:
		(0336)			>I'm a commercial developer interested in LED 2.0 for MFC. However, 
						>I'm concerned about the following bugs I encountered when playing 
						>with the demo app (version 2.0b7):
						>
						>1. Italic text isn't handled correctly. The last character in a line 
						>of italic text is truncated halfway through.
				        I was aware of such a problem for the Mac, but not for windows.
				        Apparantly this is something I just broke on Windows in my last release.
				        Sigh. I rewrote some code to compute text metrics for speed (it was
				        even slower typing), and it works fine on the mac, but apparantly I missed
				        some problem on the windows side. Sorry.
				        This will be fixed promptly.

960509	Fixed			Italics handling completely redone. There is still room for improvement,
						but it is no longer really broken.
960427	REPORT	DaLyall	At 11:03 PM 4/27/96, David Lyall wrote:
		(0335)			>2. Selection doesn't work properly with italic text. 
        				Are you refering to the fact that I don't use a different (tilted) cursor?
        				Oops. Now I just tried it again on windows. Now I see what you mean.
        				This problem was just introduced in my last release. I hadn't noticed it
        				(I guess cuz its windows only).


---------------- Released 2.0b8 - 960504 - Below ------------------------------
960503	Fixed			Nasty (hopefully last) corner case in SharedStyleDatabase::SetStyleInfo ()
960503	REPORT	LGP		Type in some new text. Select a word. Make its font size bigger. Then
						make it smaller. Assert error.

960503	Fixed			Trouble was only with the Led-private-format streaming IO code not writing
						proper "point" sizes. Caused havoc for undo, cut/paste, file IO, 
						etc sometimes messing up sizes on pc.
960503	REPORT	LGP		Font sizes on PC don't work right. Problem is confusion between negative and
						posative tmHeights on PC.

960502	Fixed			Implemented case-insensative compare (but by its nature, is very
						ascii-oriented, not sure what right thing todo here for other
						charsets?).
						Also, implemented match-word code. Again - some confusion. I'm not
						sure I know of any reasonable definition for what this should mean
						that is widely accepted/used. I came up with what I thought made
						sense (I did what the docs for the MSVC 4.1 IDE did). Hopefully good
						enuf.
960226	REPORT	LGP		Find case insensiative and whole words don't work right now (not implemented)

960502	NOTE			I've tried out Netscape 3.0b3 for Mac, and there is no change as
						far as this URL-related stuff is concerned. For Windows there is
						a BIG change. They now support D&D.And URLDs ("Netscape Bookmark") again.
						So basicly all the stuff AWI cares about now works decently on
						both Mac and Windows (except for dragging picts from netscape, but
						maybe that can fix that before their 3.0 release?).
960502	Fixed			Supported DDE OpenURL sent to wildcard DDE target (works at least
						with NT 4.0beta1, and Netscape 2.0) for URLD objects embedded
						from the mac side, and simply double clicked on windows.
						Netscape (or some target browser supporting SDI DDE) must already
						be running. Uses DDEML application name "" so grabs first responder.
						Right now in the process of downloading Netscape 3.0 Altlas PR2 on
						mac and PC to test how well they work with this.
960501	NOTE	LGP		Discussed with Doug. He said get latest Netscape 3.0 prerelease
						and see what it does. If worse comes to worse, we can get away
						with just supporting URLD pasting from mac/Netscape and on windows
						you create them only with AWINotebook command 'make text into URL'.
						So the only real work left to be done is the DDE to Netscape to
						open the URL. UGH!
960430	NOTE	LGP		Discuss this whole matter with Doug. There appears - at least
						with Netscape 2.0 final and NT 4.0beta to be more more URLD
						equivilent. I can either do something to parse strings into
						URLDs (he's already requested this, so maybe thats all I need)
						or do something with Windows ShortCuts (trouble is no way to make
						those work back on the mac - I think).
960226	REPORT	LGP		Support drag/drop and PASTE of URL on windows.

960501	Fixed
960430	REPORT	LGP		Erase background properly on Mac and PC for DIBs / Pictures (some cases
						working, but most not). Also do border around those that don't have one
						so we can see the selection color.

960501	Fixed
960430	REPORT	LGP		Do special failure-mode pictures/dibs for QT not avail, bad format pict/DIB etc.

960501	Fixed
960305	REPORT	LGP		Get embed unknown picts aren't working yet on PC

960501	Fixed
960303	REPORT	LGP		URL and Unknown Object StyleMarkers don't display on Windows.

960430	Fixed	LGP		Actually this was (mostly) fixed a while back. There is still a slight
						bug in ChunckedArrayTextStore where it could raise an excpetion on
						a marker Removeall(), but that is separately tracked as an SPR.
950527	REPORT	LGP		LineBasedTextImager::PartitionMarker::DidUpdateText () can raise
		(0298)			exceptions. This is strictly an ERROR! Serious! Rewrite it (and if
						need be subclasses) to preflight so these guys can NEVER
						raise exceptions!!!
						
						Fairly high priority if stability under low memory conditions is
						important!
950601	DEFER			1.0RC1

960430	Fixed	LGP
960226	REPORT	LGP		Fix status window help for LedIt! Windows

960430	Change	LGP		Two big changes to PICT support.
						On the PC, if QuickTime for Windows is present, then use it
						to display mac PICT embeddings. This doesn't work for ALL PICTs,
						but appears to work for most (those made up of bitmaps work, those
						which are a composite of other drawing commands I think DONT).
						
						Supported embedded DIBs being pasted/dropped on the PC. And added support
						for display of DIBs on Mac as well (only support uncompressed 8 and 24 bit
						DIBS for now - and only win31 format DIBs - good enuf?).

						So now the net effect is you can paste pictures into Led from the Mac
						or Windows, and (ususally) display them on the other platform without
						any loss of original content (like mac PicComments).

960428	Fixed	LGP		Pict code on Mac was counting on picSize field to see how much to grab/read/etc.
						This was wrong! picSize field meaningless for larger pictures, and so can NEVER
						be safely examined. Instead write leading-size field (for composite PICT/URLD
						embedding), and adjusted throw calls/tests elsewhere to take these facts into
						account.

960419	Fixed	LGP		And fixed (innocuous?) assert in MFC version.
960418	Fixed	LGP		Done.
960226	REPORT	LGP		maybe add a save a copy dialog to LedIt Mac.

960418	Fixed	LGP
960226	REPORT	LGP		PowerPlant "Refresh()" name clash

960418	Fixed	LGP		Now maintained separately as html files.
941107	DEFER			Not needed for LEC 1.0 release.
941019	REPORT	LGP		Need to embellish BuildingLed, LedFeatures, and UsingLed,
		(0019)			LedDesign files.

960418	Fixed	LGP		Trouble is bug with NT Server mac fileserver allows open
						of read-only files with fsReadWrite. Then we get file errors
						on our later write.
						
						The Led bug was we do an excpetion in
						StyledTextIOWriterSinkStream_FileDescriptor::DTOR, while unwinding
						other exception. This - at least for MWERKS - generates 'unexpected',
						and app just exists. Instead, we don't throw out of there, and
						add seperate flush method to call which can raise exception.
						
						Then next bug under this report was that the exception got reported
						as 'out of memory'. So I added alerts for the different
						sorts of exceptions, and now we get decent error messages for
						different sorts of exceptions (eg file io errors etc).
960418	REPORT	LGP		Open file not marked as locked, but readonly on the
						server (only NT 3.5.1 Mac Fileserver)
						and then modify the file, and say save. App silently exists.

960418	Closed	LGP		Doesn't really apply anymore. Much of this has been done with
						WordWrappedTextInteracter, etc...
950417	DEFER	LGP
950417	REPORT	LGP		As future code cleanup, introduce MultiRowTextImagerTextInteracter
		(0210)			to do multirow optimizations etc and mixins so less crap coding
						(duplication) needed between Led_TCL and Led_MFC. Not clearly thought
						out- but the idea is just to see if we can share more code between
						these modules.

960418	Closed	LGP		Doesn't really apply anymore. Much of this has been done with
						WordWrappedTextInteracter, etc...
950125	REPORT	LGP		Not sure what should really go in the SimpleTextInteracter
		(0126)			class. Right now choice is quite arbitrary. Perhaps get rid
						of it, or at least move OnTypeChar() into base class???
950322	DEFER			This doesn't need to be addressed for the first release.

960418	Fixed	LGP		VERY OLD
950608	REPORT	LGP		Condider adding Drawable objects which can be inserted into the text. They are
		(0330)			much like (and maybe should be related to) markers, and can draw themselves and
						take up space in the text, and be selected. Thus, when we ask for the text from 1..n, 
						we might get back something with "gaps" in it where these Drawable objects were. This
						is designed to allow for the addition of pictures and movies etc being inserted into
						the text. Using markers for this purpose was possible, but not attractive because of
						defining how the selection works (are they in the selected region or not if they are
						zero width - hard to select them etc...). This feature need not be implemented for the
						first release.
950608	DEFER

960418	Fixed	LGP		VERY OLD
950603	DEFER	LGP
950603	REPORT	LGP		Do recusion hack in CollectAllMarkersInRange
		(0317)			

960418	Fixed	LGP		Fixed In LedIt! Mac (not fully supporting tcl app now)
941029	DEFER	LGP		This is a total non-issue. This bug is with the file
						save code in the demo-app. It has nothing todo with the
						editor per-se, and - since LVEJ already has its own
						file/save mechanism - is completely unreleated to
						the behavior when Led is integrated into LVEJ.
						I will fix this at some point - but no time soon. It doesn't
						interfere with testing, and has nothing todo with
						the editor.
941028	REPORT	Jeremy	(LEC#6012)    a1      File:Save As - Saving over a
		(0056)			previously document (by using the same name) generates an
						error (Couldn't complete the last comand because of a Mac
						OS error. Result Code =-48)
						Resolve Jeremy  Lewis   3 Mac Quadra 840 AV
						7.1+JLK 94.10.28        Medium  Editor  

960418	Fixed	LGP		Fixed In LedIt! Mac (not fully supporting tcl app now)
951105	REPORT	LGP		For TCL app, add BNDL item for * (like BBEdit)
						so I can drop arbitrary files. This works nicely
						with the automatic file format detection
						stuff.

960418	Fixed	LGP		Fixed In LedIt! Mac (not fully supporting tcl app now)
951105	REPORT	LGP		Must add 'owner resource' to TCL app.

960418	Fixed	LGP		OLD - Fixed In b7
960316	COMMENT	LGP		Going to require some thought how to integrate this with my flavor
						and registry code...
960314	REPORT	DougSt	Add special marker which contains BOTH picture AND URLD composite.

960418	Fixed	LGP		VERY OLD
950601	DEFER			1.0RC1
950322	REPORT	LGP		Fixup Mac and PC testsuites. Make sure neither ever crashes (disable printing
		(0181)			or fix it if it doesnt work). And put in test code on the PC for UNDO - even
						though that is not implemented (should always be disabled since CanUndo returns
						false).

960418	Fixed	LGP		OLD - Fixed In b7
960305	REPORT	LGP		Be sure Windows code fully utilizes new common code for drag/drop and copy/paste.
	
960418	Fixed	LGP		VERY OLD
951102	REPORT	LGP		No validation currently done on drag/drop/cut/paste and file IO.
						Must validate not reading bad stuff - currently we probably crash
						on reading garbage.

960418	Fixed	LGP		OLD - Fixed In b7
951103	REPORT	LGP		Font menu checking is slightly buggy - at least for OpenDoc - see if OK
						under TCL or not???

960418	Fixed	LGP		VERY OLD
951105	REPORT	LGP		Coalesce adjacent identical font style markers. I handled
						most cases like this. But if I have to different fonts
						next to one another, and then select ALL text and make
						it one font, I reset, but don't coalesce away, the
						intermediate font run elements

960418	Fixed	LGP		VERY OLD
951105	REPORT	LGP		medium term todo- add popup to sfputfile dialog saying format
						to save in:
						text with STYL, RTF, or plain text???? - NO LED TYPE DOC!!!

960418	Fixed	LGP		VERY OLD
951105	REPORT	LGP		Find out about PC standard style text formats/?? Any styled clip
						format???

960418	Fixed	LGP		VERY OLD
						Well - did something very similar via 'QueryInputKeyStrokesPending'
950617	DEFER	LGP
950617	REPORT	LGP		Consider trying (via conditional compilation) hack where
		(0334)			we peek ahead in the event Q and grab lots of keystroke events
						at once and process them more quickly that way. Make it conditional
						since I remmeber what a pain it was when I dicovered
						WSE did things that way. BUt it could make a BIG difference
						to UPP of typing on large files.

960418	Fixed	LGP		VERY OLD
						Handled another way - OnCopyCommand_Before/OnCopyCommand_After
950611	DEFER	LGP
950611	REPORT	LGP		Improve Led_ClipTextAcquire object to handle open/close of 
		(0333)			clipboard. Do Paste version too!

960418	Fixed	LGP		VERY OLD
OLD		REPORT	LGP		Maybe not so distant future. Should have prefernces option
						about if I show scrollbar (VERTICAL). Default to TRUE in root
						frame, and default to FALSE for frames embedded in other documents.
  						Or maybe default to USER-PREFERENCE (or some combination thereof).
  						(OpenDoc)

960418	Fixed	LGP		VERY OLD
						Obsolete error - don't worry about old win32s versions
950326	REPORT	LGP		note that win32s EM_SETSEL problem does NOT happen under win95 - maybe means we
		(0190)			just ignore... Also note that it DOES cause problems with WM_NEXTDLGCTL - caused
						by tabloops - since that invokes WM_SETSEL message. Perhaps I should try one more
						netpost - and try compuserve too.
950410	NOTES			Got email from net. The hint from Jeff Feldman, #73164,1440
						was that the number for the EM_SETSEL message changed from
						0x00B1 to 0x0401. Perhaps win32s subssytem is xlating in
						one direction and not the other. This might make sense since calls
						from win32s to 16-bit editors work fine. Maybe I can
						add message map entry for old win16 call?
950601	DEFER			1.0RC1

960418	Fixed	LGP		VERY OLD
						Largely fixed in and around the InternalizeFlavor/InteractiveReplace_ code.
OLD		REPORT	LGP		Condider better integrating InteractiveReplace with my new
						StyleRunIO module.
						And similarot for Cut/Paste - esp code in TextInteracter_.
						Should all be better tied together. For example, paste should do
						format conversions for text on TCL and MFC - right now only done
						for OpenDoc - and even should
						share code among all three of these?? Maybe - like when I fix cursor 
						movement updating for OpenDoc on pastes, and dragdrops.

960418	Fixed	LGP		VERY OLD
941108	REPORT	LGP		Make Led version number appear in about box in sample apps.
		(0084)			And in VersionInfo/vers.
941108	Working			Added about box to Mac App. Will probably defer the VERS/VersionInfo
						part. Still should do PC about box though...
941109	DEFER			Implemented simple about box for Windows version with version#.
						Deal with 'vers'/VersionInfo resources later, if ever. These
						are merely demo apps after all.

960418	Fixed	LGP		VERY OLD
941107	REPORT	LGP		Several methods in TextInteracter (including TypeChar
		(0082)			and ScrollToSelection() should take UpdateMode flag.
941107	Working			Did for those two, but need to add overrides
						to various scrolling methods to ALSO handle UpdateModes
						properly...
941108	Defer			Basically done, but would also like to add to some
						of the scrolling methods. Since we are still working
						on their definitions (RowReference stuff) - I think
						I'll wait on those. The remainder of this is very
						low priority. It will have no effect on LEC
						editor display - so defer the rest.

960418	Fixed	LGP		VERY OLD - not a problem - close
941129	Defer			Used #pragma warning (disable : #) to get rid of this
						one warning in this one circumstance. Not really sure why
						MSVC issues this warning. Perhaps investigate later,
						and ask Microslop via Compuserve? The reason I still worry
						about this even with my workaround, is that when other
						users of my library subclass Led, they will see this ream
						of warnings.
941116	REPORT	LGP		Build LED on PC with all warnigngs turned on, and cleanup
		(0087)			warnigns -especaily dominance warnings (cuz so many) and
						unsigned/signed once cuz some are real bugs!!!

960418	Fixed	LGP		VERY OLD - LedIt! Mac now based on PowerPlant
941028	REPORT	Jeremy	(LEC#6016)    a1      Printing doesn't work correctly: stuff
		(0059)			gets printed super-small and blank space gets printed as black.
						Resolve Jeremy  Lewis   3 Mac     Quadra 840 AV
						7.1+JLK 94.10.28        Unknown Editor  
941029	Working	LGP		I never really planned to support printing in the DemoApp.
						So I never actually tested that. But as long as the support
						is there - I may as well make sure it works. This really
						has little - or nothing - todo with how the app will be
						when it is integrated into LVEJ - since LVEJ has its own
						print code. But since it does have SOMETHING todo with testing
						the editor I will get that working.
950125	DEFER	LGP

960418	Fixed	LGP		VERY OLD - LedIt! Mac now based on PowerPlant
941028	REPORT	Jeremy	(LEC#6015)    a1      Irreproducible error - program crashed
		(0058)			and sent me into the debugger while I was trying to print stuff.
						Resolve Jeremy  Lewis   5  Mac Quadra 840 AV
						7.1+JLK 94.10.28        Unknown Editor  
941029	Working	LGP		I never really planned to support printing in the DemoApp.
						So I never actually tested that. But as long as the support
						is there - I may as well make sure it works. This really
						has little - or nothing - todo with how the app will be
						when it is integrated into LVEJ - since LVEJ has its own
						print code. But since it does have SOMETHING todo with testing
						the editor I will get that working.
950125	DEFER	LGP

960418	Fixed	LGP		VERY OLD - LedIt! Mac now based on PowerPlant
941020	REPORT	LGP		CPanorama::PrintPage() may need updating in TCL- but I'm not
		(0028)			sure - and I'm not sure we ever use the routine...
950125	DEFER	LGP

960418	Fixed	LGP		VERY OLD - LedIt! Mac now based on PowerPlant
941019	REPORT	LGP		No TCL AboutToPrint() type support. Not really sure anything
		(0023)			needed here.
950125	DEFER	LGP

960418	Fixed	LGP		VERY OLD - No longer support such old win32s versions
950228	REPORT	LGP		In Led_MFC_: we SetSel() method call calls ::SendMessage (EM_SETSEL
		(146)			which never seems to make it to the callback under win32s. This also
						happens for EM_GETSEL. But WM_CUT seems to work fine.
950228	Working			Workaround for now using direct call in Led_MFC_::SetSel() to
						callback.
950309	DEFER			Never heard back from net. Try again with later version of win32s (last
						tried win 1.20).

960418	Fixed	LGP		VERY OLD - Implemented this tweek long ago.
950506	REPORT	LGP		MultiRowTextImager rowstart array should SKIP first row
		(0228)			(array elt) cuz it is ALWAYS ZERO (verify this). Just
		DEFER			ASSUME zero - and take this into account in accessors, and
						adjust array indexing by one for the rest. Do better
						encapsulation. Should save LOTS of memory - maybe can try
						using smaller buffer (2) to save memory? Experment and
						see what works best for typical text.

960418	Fixed	LGP		VERY OLD - don't worry about old betas of winnt. Doesn't happen now...
950410	REPORT	LGP		See that we don't call SetScrollRange() in Led_MFC
		(0198)			code - under Win95 beta and WinNT 3.51 beta casues sbar
						flicker. I fixed in LVEJ subclass - but probably should
						fix in Led standalone classes. Doesn't come up in demo app
						since we don't force sbar visible.
950601	DEFER			1.0RC1

960418	Fixed	LGP		VERY OLD
950519	REPORT			Done use GetPixelHeight () in draw loop - use GetRowHeight for that
		(0267)			row
						AFTER THIS - GO AND DO SPR#0268 (do 0266 first)
950519	DEFER


---------------- Released 2.0b7 - 960418 - Below ------------------------------
960417	Fixed	LGP	Big typing-speed tweek. Got rid of old
				'CalcSegmentSize()' support. Replaced it with automatic
				calculation based on MeasureSegmentWidth().
				This was a big simplification, but slowed things down
				slightly. But then in MultiRowTextImager, cache last row
				of measured text widths, and then we get a big speed win.
		
				Also, several (mainly) PC-specific tweeks, mostly having
				todo with AcquireTablet speed, etc.

960417	Fixed	LGP	Get LedIt! MFC working on MSVC 4.1
				Distribute new DLLs that come with 4.1 (ocx/runtime).
				Fixed version resource for PC application.

960417	Fixed	LGP	Add CFM Terminate routine to OD Part (as per
				1.0.2 OD releasenotes)

960416	Fixed	LGP	Quick hack support for picts on PC - just use OLE2 embedding
				(bad idea - must fix before release, cuz otherwise cannot
				see PC picts on mac - or even other pcs without same picture
				viewer...)

960416	Fixed	LGP	Support multi-flavor embeddings. For example (PICT/URLD).
				Specificly support this PICT/URLD combination on the Mac.
				Maybe soon do likewise on the PC.

960416	Fixed	LGP	Fixed a couple innocuous apparent memory leaks
				on windows. And one real one (LedItControlItem::Write()).

960416	Fixed	LGP	Fixed last know bugs with undo/drag and drop on windows
				& mac. Still haven't done all speed tweeks, but should
				at least work correctly now for all (known) cases.
				This mainly included fixing on PC copy/paste/drag/drop
				of single-selected embedding objects.

960328	Fixed	LGP	Redid windows cut/paste/drag/drop code to use new
				led flavor package stuff. Now because of this, undo
				works properly preserving embeddings, etc.

960328	Fixed	LGP	Added Clear cmd to LedIt! Windows menu

960328	Fixed	LGP	Got undo/redo stuff working nearly perfectly on PP.
				Only remaining problem I know of (there) is that I must
				support merging adjacent cmd objects
				within a group, when possible (as a performance/memory hack
				 - doesn't affect correctness). Haven't broken OD - though it
				doesn't use any of this codebase yet. And still must make
				sure all this works on PC.

960328	Fixed	LGP	Use %R for Redo, because more mnemonic, and thats
				what OpenDoc uses.

960327	Fixed	LGP	Plugged HUGE memory leak in class StyledTextIOWriterSinkStream_Memory.

960327	Fixed	LGP	New PurgeUnneededMemory () method in TextImager and
				subclasses, to cleanup use of caches, when we are
				low on memory. So far only used from LedIt!_PP.
				And fix undo code to allow typing command to proceed
				even though we ran out of memory computing undo information.
				Just silently skip that commands undoability,
				and commit the other commands.

960327	Fixed	LGP	LedIt! PP, no more growzone proc. Worked badly cuz
				worked off wrong growzone (we use tmp mem mostly).
				Instead, override LedItApp! Run to handle catching
				exceptions, and put up out of memory alert.

960327	Fixed	LGP	Fixed undo code to preserve selection.

960327	Fixed	LGP	Fixed bug in StandardStyledTextImager::SharedStyleDatabase::DidUpdateText ()
				where we weren't coalescing adjacent markers when needed
				(for example, when you had plain/bold/plain, and deleted
				the bold text in the middle).


---------------- Released 2.0b6 - 960316 - Below ------------------------------
960316	Fixed	LGP		And fixed home/end keys as well.
960226	REPORT	LGP		Page up and page down keys broken on Led_PP

960315	Fixed	LGP		This was significantly tricker than I thought. But I think
						it was well worth while, since even though I did a crappy
						job - it still appears to have significantly sped up
						display, and typing (since we had almost no runs of
						length > 1 for typed text). 
960226	REPORT	LGP		Debug/tweek StyleDBase::SetStyleInfo () - must do right
						thing so we don't get markers next to one another that
						are same (COALESCE)

960315	CHANGE	LGP		Use new MWERKS beta compiler. Only significant change is
						fixes CFM68K weak lib import bug (so no longer need
						QuickDrawGX Enabler for LedIt! OpenDoc 68K)

960315	Fixed	LGP		
960226	REPORT	LGP		Space overwrite on SBAR on Mac Appl

960315	Fixed	LGP		
960314	REPORT	DougSt	Command keys in LedIt! PowerPlant if they
						don't get interpretted as a menu shortcut get entered into the text.

960315	Fixed	LGP		Changed StandardStyledTextInteractor::ProcessSimpleClick () to
						use a 3 pixel margin around either side (left/right) which we don't
						interpret as selecting the embedding.
960303	REPORT	LGP		LedIt! Mac/PP - if URL object is at beginning of buffer, cannot
						click before it. Always selects object.


960315	Change	LGP		Lots of minor Led_Support graphix chanes. Eg.
						Lose H(p)/V(p) functions - use p.v/p.h directly. Led_Rect::Contains(),
						more operator<>= etc operators.

960314	Fixed	LGP		In earlier release.
960226	REPORT	LGP		File 'ReadMeAndCrashLed' causes crash. Try and fix.

960314	Fixed	LGP		Fixed LedIt! Windows ProcessSimpleClick () code so that it now
						properly invokes the OLE PRIMARY_VERB on double-click on embeddings.

960314	Fixed	LGP		Fixed LedIt! Windows embeddings should draw from baseline.
						And they should properly erase themselves (including part outside
						their bounds proper when they aren't biggest item in row).
						And the should draw the proper selection colors when selected.

960314	Fixed	LGP		Was a little harder to reproduce than that. But finally fixed. Trouble
						was a subtle bug with StyledTextImager::SummarizeStyleMarkers ().
960305	REPORT	LGP		Type after embedding bug on PC
960303	REPORT	LGP		on LedIt! MFC - embed new object with insert menu. And type single
						character after, and get asserts about char getting inserted into wrong
						object. Or maybe was wrong size toobegin with?

960314	Fixed	LGP		Fixed bug where LedIt! MFC on reading in files with embeddings, left those
						embeddings zero sized.

960314	Fixed	LGP		Fixed crash on LedIt! Mac overwriting existing files in SFPutFile dialog
						or openening locked files with SFGetFile dialog - cuz of when subdialog
						(alert) came up to ask questions, used same filter proc as was used for
						sfget/put dialogs - and that was unexpected, and caused grave disorder.

960314	Fixed	LGP		Added only the %E Enter Find String' - on all platforms. Didn;t bother with
						%H/Find Selection cuz I personally don't really use. And nobody has requested
						it. KISS. Until someone complains...
960306	REPORT	LGP		Need %E Enter Find String' command, and maybe %H 'Find Selection' commands.
						On all platforms.

960314	Fixed	LGP		Added help balloons for LedIt! Mac.
960226	REPORT	LGP		Fix help balloons for LedIt! Mac

960314	Fixed	LGP		Fixed Led OpenDoc part embeddings should draw from baseline.
						And don't count bottom margin for embeddings in baseline calculation.

960314	Fixed	LGP		Fixed Led OpenDoc part bug with embeddings. Now handles
						RequestFrameShape() calls by embedded parts correctly.
						(though Led OD Part still provides no UI to allow you
						to manually resize your embeddings).

960314	Fixed	LGP		Mac picture embeddings weren't being drawn hilighted
						as nicely as I would like. Seems no reliable way to
						DrawPicture() with background I want (selected).
						Instead - I must draw with unselected background,
						and do a SetHilightMode/InvertRect. This - coupled
						with fact that DrawPicture () doesnt do erase
						(so I must) means picture drawing is somewhat
						flickery. But at least it produces the right results
						now. To get rid of flicker, I think I must use GWorlds.
						
960314	Fixed	LGP		Embeddings should change the baseline to their height.
						And they should respect the derived composite baseline, and draw
						above that point.

960314	Fixed	LGP		Added flag qUseMacTmpMemForAllocs, and Led_DoNewHandle.
						Use Led_DoNewHandle () in those few places where Led
						actually needs a handle. It doesn throw if not avialable,
						and respects qUseMacTmpMemForAllocs. If qUseMacTmpMemForAllocs
						true, Led tries tmp memory first, and then heap memory for
						its data structures. NB: Led MOSLY uses operator new(),
						and Led Library has no control over what this does (though LedIt! app
						DOES have control over this, and respects this flag and 
						uses tmp mem if it is set).
960226	REPORT	LGP		NewHandle calls should use TMP MEM!!! for LedIt! Mac -
						figure out good API to arrange for this???
						<< ACTUALLY - maybe we never need to call NewHandle - at least
						one case - in OnCopyCommadnd_CopySTYL we  should NOT use NewHandle -
						but just use a temp stack buffer!!!>>>

960313:	Change	LGP		When opening readonly doc, don't mark as dirty
						on open (LedIt! Mac only)

960313:	Change	LGP		Make sure ChunckedArrayTextStore::SetMarkerRange() doesn't
						ever do a throw Cleanup ChunckedArrayTextStore/PossiblyAddHackMarkers
						in presence of exceptions. Fixed LineBasedTextImager::Split()
						in case of exceptions.
						(Thanx to Alec@hq.lec.com for hints about these).

960313:	Change	LGP		Now support arbitrary tabstops via abstract class TextImager_::TabStopList
						and TextImager_::SetTabStopList ().
950323	REPORT	LGP		Add ability to set tabstops to Led - and to demo programs.
		(0183)
950323	DEFER

960313	Fixed			Rewrote tab support - hopefully fixed...
950519	REPORT			In WordWrappedTextImager::FillCache :
		(0256)			Assert (bestRowLength == FindWrapPoint_ReferenceImplementation (buf + startSoFar, leftToGo, wrapWidth, start+startSoFar, fontSpec, markers));
						fails occasionally. Tabs, dbcs-spaces in alecs example, and probably
						others can rarely cause this to find different word-wrap points.
950519	DEFER


---------------- Released 2.0b5 - 960305 - Below ------------------------------
960304:	Done	Broke Led_PP into TextInteractor_ subclass, plus mixins for different
				specialized Interactors (eg. StandardStyledWordWrappedLed_PPView).
960226	REPORT	Break up Led_PP into separate classes and mixins (as we do for TCL/MFC etc)

960304	Fixed	And fixed 'vers' resource names as well (to say LedIt! rather than Led)
9602xx	REPORT	Change OpenDoc NMPAP resources so when we drop part editor on opendoc app icon,
		we get a good named stationary - currently name too long - strip "opendoc editor"
		from some of the NMAP UI string names.

960304	Fixed	Now we fully support Drag and Drop on Mac/PowerPlant.
				Also, redid the clipboard code - AGAIN - so it is now FULLY and very
				nicely integrated with the DragDrop code. We have these little
				FlavorPackage objects and Internalize/Externalize methods which
				read/write the packages which get easily back-ended on mac clip or
				DragDrop, and windows clip or drag drop (actually - haven't fully done windows
				dragdrop part).
960303	REPORT	Must support Drag/Drop on Mac PP Application

960304	Fixed	As side effect of Clip/DragDrop rewrite
960303	REPORT	Support drag drop of type URL. on Mac.

960304	DONE
960303	REPORT	make sure triple click works in places where we do drag drop (
				check click count == 1 in code to detect drag)

960304	DONE	We now first try to use IC on LedIt! Mac for opening URLs.
				If that fails, then we fall back on trying to talk to Netscape.
960303	REPORT	Internet Config suport (LedIt! mac)

960304	Fixed	Now if we read a locked file, we open R/O, read contents, and then
				close file and though we keep its name, we treat it internally as
				'untitled' so next time you
				save you get promted for a new name.
960226	REPORT	reading REadOnly files? - currently causes CRASH with finder drop on
				app of locked file


960304	Fixed	Implemented, except no checkbox for save as stationary. Reading Finder
				InsideMac Finder Interface chapter, they didn't mention that you
				are supposed todo that.
960226	REPORT	Support reading stationary files (similar to case of read only -
				read it, and close file, and set file spec to be non-existnet? -
				must read up on stationary?) maybe have save dialog have checkbox
				for save stationary?

960304	Fixed	Now quite elegant.
OLD		REPORT	Go back and cleanup code in StandardStyledWordWrappedTextInteracter::OnPasteCommand ()
				really hackishly done so I could get paste of objects working...


---------------- Released 2.0b4 - 960303 - Below ------------------------------
960303:	Fixed	Much nicer job of packaging up copy/paste code. Not fully integrated
				into OD Part, but IS fully integrated into LedIt! Mac (PP) and Windows;
				which is all that matters for now.
				Can select single embedding, and copy it in native format. Can select
				range - and if contains any embeddings, we copy native. If none, on mac
				we copy only STYL text (win we copy native). Etc...
				And all cases of pasting should work now.
				Only supported embeddings are OLE on windows, and PICT on mac.

960303:	Fixed	Mostly anyhow. Now can paste 'URLD' resources into LedIt! mac. And we get
				embedded objects. Can then double click on that object, and talkes to
				netscape - and opens URL (must fix to use Internet Config, and to work on
				windows).
960226	REPORT	Still must do netscape URL support (at least on mac immediately - no logging)

960303:	CHANGE	Much cleaned up Cut/Paste code. Now pretty well done. Support cut/paste
				of native (Ledit rich text) on all platforms. Can even select embeddings, and
				say copy and get proper native specific form copied to clipboard. Smart about
				not copying Ledit private format on mac if no need (ie if STYL captures all
				same info).

960303:	CHANGE	Added URL Standard Style Marker (to support embedded URLs).

960303:	CHANGE	Added 'object type unknown' embedding. Now when we read a PC file with
				OLE2 embeddings, we get a little "?" icon, and we don't lose the embedding
				information (if we write file again, or copy and paste, etc, all that
				info is preserved - even if done on mac).
				Only trouble is icon display doesn't work yet on windows.

960303:	CHANGE	Implemented HandleClick API for Embedded objects. This means that now
				on MFC and LedIt! Mac when you click in objects, they
				now get selected. And double clicking calls their OPEN method. This is
				how URL Marker does its OPEN command.

960302	Change	Fixed bug where in LedIt! Mac we were filtering out folders in SFGetFile dialog

960302:	Change	now set the scrpHeight/scrpAscent fields of ScrpSTEleemnt in
				StandardStyledTextImager::Convert (). Seems totally pointless that these
				exist, and I assumed if I left them zeroed, people would calc them
				themselves. Some do, some don't. Anyhow - I now calc them so files
				written by Led in STYL format, and clip contents should be read
				better by other apps.

960302:	Fixed	MWERKS default op new doesn't do throw on no mem. Fixed for
				LedIt! Mac.
960226	REPORT	Copy and Paste need lots of cleanup work, including
				support for Led private format, better shared code,
				copying SOLE embeddings as their native type, 
				unknown objects embedding (so when we read a PC file a PC OLE obj
				doesn't get dropped on floor, but gets carried along)

960227 Fixed	Actually, the trouble was ONLY when opening files of unknown type
				(well, sort of unkown) If you used open dialog and said show
				me only text files, then this worked fine.
960227 REPORT	Reading STYL resource on text files broken! Though writing works!


---------------- Released 2.0b3 - 960226 - Below ------------------------------
960226	Change	LGP		Updated document icons to distinguish between text, LedPrivate
						and Led OD format files.

960226	Change	LGP		Deleted obsolete docs, and now distributed LedIt HTML docs
						with source distribution. And update name of ReadMe template
						to include word template to avoid confusion.

960226	Change	LGP		For LedIt! Windows, updated name of help file so now should
						be found automaticly.

960226	Change	LGP		Main change for this release is support for PowerPlant
						class Library, and now LedIt! Mac application is based
						on PowerPlant - not TCL.

960226	Change	LGP		Typing in all LedIt! applications should be a bit
						faster/more responsive, since I fixed a few logical clipping
						bugs/problems (notably, when typing in styled text edits, I was
						redrawing the entire screeen - needlessly)

960223	Change	LGP		LedIt! PowerPlant - implemented popups in SFGet/Put
						file dialogs, and support reading/writing plain text, styled text,
						and led private formats. Tried to support Macintosh easy open.
						Did some research. But looks like it may take another days work.
						We'll see if I have time...

960222	Change	LGP		LedIt! MFC - fixed a bug where opening new files sometimes
						produced a second framewindow, only confusingly connected with the application.

960222	Change	LGP		LedIt! MFC - printing - now works much better, partly due
						to aforementioned changes to common printing code, and partly
						cuz I now set fewer fields of LOGFILE (fixing FontSpecification::MergeIn)
						so we get fewer conflicting styles. We were getting overspeciifcation,
						and Win32 GDI dealt badly with this. Also, things like the font name,
						size, style menus should work much more reasonably and predeictably,
						as well.

						One point where I hacked a bit is when I get back a default
						font Size (from ANSI_VAR_FONT), I hack it so its negative. Now
						I genericly (I hope) deal better with posative font sizes.
						I create font, say gettextmetrics on the screen dc, and use that to
						get its real point size. I hope thats right. Seems to work pretty well so far.

960222	Change	LGP		LedIt! MFC - On a DROPEFFECT_NONE return from our
						initiated drag, set the selection to an isnertion point at where
						user originally clicked. Not 100% sure this is the right
						thing todo. But plausible enuf. Not terribly broken at least -
						like before when I just preserved the old selection. That
						worked terribly.

960222	Change	LGP		Add bool printing flag to TextImager_::Draw(), and a
						few related MultiRowTextImager::Drawing methods. don't eraseRect
						backgournd when printing! Maybe need a few more changes for
						printing as well? Above was done for PowerPlant port, but when
						I integrated change into OD Part, I fixed a bug there
						with printing. Now works much better, but still not perfect -
						doesn't print whole document, just text displayed on current frame!!!

960222	Change	LGP		Use kBadIndex instead of size_t (-1)

960215	Change	LGP		Renamed *Interacter* to *Interactor* on spelling
						advice of Simone and Alec.

960215	Change	LGP		Renamed Min/Max/Abs ->Led_Min,Led_Max,Led_Abs to avoid
						name conflicts

960215	Change	LGP		Added 'kind' resources for OpenDoc part editor/viewer.

960215	Change	LGP		Obsoleted file LedDialogText, and moved that class
						into Led.hh. May merge the class with the 'Led' class
						itself in the future? No more kVersion string member of
						class Led - use qLed_ShortVersionString instead.

960215	Change	LGP		Cleaned up alot of the qSYS defines that were
						class lib sepcific, and cleaned up most of the class
						lib specific code from Led itself. Esp cleaned up the Led_Rect/etc.
						classes. no more qMFC or qTCL. All TCL/MFC specific config
						defines done in Led_TCL.hh, and Led_MFC.hh.


---------------- Released 2.0b2 - 960204 - Below ------------------------------
960204	Fixed	LGP		LedIt! Windows, fixed print bug where wasn't paying
						attention to selected font

960204	Fixed	LGP		LedIt! Windows, added application/document icons (from mac)


960204	Fixed	LGP		LedIt! Windows, fixed bug where initial font was NULL-LOGFONT,
						so no name matcheind/size matched etc in font menu. Now use
						ANSI stock font as default. Also, fixed ChooseFontDialog
						to init from current value.

960204	Fixed	LGP		LedIt! Windows, now handles all the cases of updating font menus,
						size/style menus, etc, including emtpy selection case.

960204	Fixed	LGP		LedIt! Windows, find cleaned up and all of GUI working (all
						3 checkboxes etc). Still must implement case insensitive
						search and whole word search in search engine in TextStore.

960203	Fixed	LGP		LedIt! Mac-Find dialog/Find again implemented (with same
						limitations as OpenDoc version - problem only with TextStore
						searching code in complete).

960203	Fixed	LGP		Did new portable DoContinous method for StyledImager,
						and made virtual so StyledInteracter could override to
						hook in for case of empty selection (which is often
						wehre it reeally gets used). Then made mac-specific
						one thunk to portable one. Now NULL-Styles work right
						(at least as far as I can tell) for Mac (both OD and LedIt!
						TCL). Will get PC working soon.

960202	Fixed	LGP		Got rid of passing in CTOR args of TextStore_ - seemed to
						agrivate compiler bugs too often to be worth it. Instaed -
						classes like StandardStyledWordWrappedLed_TCL
						no longer magicly create TextStores depending on how called.
						Subclass or owning class must always do this. Instead -
						utility class 'Led' is now the one that does
						this magic. That gets rid of lots of compiler bug workarounds,
						and hacks with SpecifyTextStore() etc... Unfortunate I cannot
						make various imager classes a little
						easier to use (automagic detect and consing up of text store) -
						but it just wasn't worth the pain. And for cases where that
						is helpful, just use class Led.

960202	Fixed	LGP		Introduced StyledTextInteracter class, and changed handling
						of messy SpecifyTextStore () function... (now new hook
						functions - before/after methods).

960202	Fixed	LGP		OpenDoc- fixed help ballons as suggested on net by Jens -
						tried ballon for finder icon, but couldnt get that working...

960129	Fixed	LGP		OpenDoc- ran diff on 1.0.1 versus 1.0 DrawEditor (predr4
						cd vs DR4 cd). Lots of diffs. I tried to apply as much as
						I could of the diffs to LedPart. No obvious improvemnts or
						degredations. embedding still pretty buggy (but hopefully
						closer to right?).

960129	Fixed	LGP		OLD REPPORT	Must keep one scrollbar per facet. Currently
						only kept in first facet of each frame.

960129	Fixed	LGP		OpenDoc-On letting go with no-drag started from within LedPart,
						we forgot to shutoff hilite in one case - handled now...

960129	Fixed	LGP		OpenDoc-On click in selected region, if no drag out of
						hysteresis region, then don't interpret as drag - but as
						(empty/de)select. This - empricily - seems to be what other
						mac editors do...

960129	Fixed	LGP		OpenDoc-Fixed bug in LedFrameEditor::GlobalToLocal() which
						prevented drag initiation from working when LedPart was embedded...

960129	Fixed	LGP		OpenDoc-Find dialog/Find again implemented (all opendoc code
						is set,but Led-textstore code still doesn't handle wholeword
						/case-insensative)

960129	Fixed	LGP		OpenDoc-Prefs dialog. Now can show/hide scrollbar. (though
						showing sbar in embedded parts slightly buggy).

960129	Fixed	LGP		
951105	REPORT	LGP		NULL Style record (case of empty selection)
						doesn't work right. Must think and maybe experiment
						a bit to decide how this is SUPPOSED to work.


---------------- Released 2.0b1 - 960121 - Below ------------------------------
960121	Note	LGP		Feature COMPLETE!

960121	Change	LGP		LedItMFC - Supported drag/drop. Except for style runs, and not
						100% working with embedded objects.

960121	Change	LGP		LedItMFC - Printing, and PrintPreview now work (though there is a
						bug on the printing the last page - scroll bug)

960121	Change	LGP		LedItMFC - supports Find / Replace (very primitive support -
						TextStore() hooks in and trivial ugly UI. No word/case insensative
						matching yet. No replace support.

960121	Change	LGP		LedItMFC now supports UNDO. Led common code, multi-level
						undo. Redid TCL App to use new common code undo as well.
						Haven't updated LedPart yet. Main trouble with this
						implemenation - must be more efficient with sequences of
						characters typing. Currently we generate separate commands,
						and these can get big. Also, we don't yet support
						style run info, and embeddings, nor restoring selection.
 
960121	Change	LGP		Disabled tab support, since it was buggy. Now they get
						echoed as black box on pc, and space on mac. Better
						than miscalculating positions! But must
						fix this tab-stop bug soon.

960115	Fixed	LGP		FIXED STUPID bug I had introdudced in Led_MFC tracking when mouse
						down and NOT doing double-click case.


---------------- Released 2.0a8 - 960110 - Below ------------------------------
960110	Fixed	LGP		LedPart is now a FAT binary part (though since there is a bug with
						weak-refs in CW8/CFM68K, we require installing

960110	FIXED	LGP		Cleaned up word selection UI code, so now works much better (better handling
						of when we double click in space mainly). Also, added qDoubleClickSelectsSpaceAfterWord
						support. By default on for windows, and off otherwise. This feature was
						requested by Jeremy@lec (LEC#6024) on 941104, and by mathias@wordwork.se on 960108.
						Also fixed long-standing but nearly unreproducible bug with double click, on
						mac only - where double click sometimes would be ignored and not select
						the word.
941104	REPORT	Jeremy	(LEC#6024)    a1      Intelligent Cut and Paste not supported.
		(0074)			New     Jeremy  Lewis   3       3       Mac     Quadra 840av
						7.1+JLK 94.11.03        Unknown Editor  Intelligent Cut and
						Paste creates white space for Pastes and removes white space
						after cuts in the way you would want this to happen, as in
						Word.  See Mac Huan Interface Guidelines for more info.
941107	COMMENT	LGP		Should make this optional. I really don't like this behavior.
						Not - by any means - standard. I don't THINK Mac TE does it.
						Add #define qFlag to control if we do this or not.
						Anyhow - very low priority - possibly deferable.

960108	CHANGE	LGP		Fully support new MWERKS CW8 compiler.

960108	Fixed	LGP		fixed sizes of created items on windows OLE - and sizes of markers
						now track when item resized.

960103	Fixed	LGP		LedIt! Mac bug with writing files. Wasn't seeking/setting
						end properly.

960110	FIXED	LGP		A while back
951102	REPORT	LGP		(OpenDoc)Don't update insertion point properly when inserting text wtih
						cut/paste or drag drop

960110	FIXED	LGP		A while back
951102	REPORT	LGP		(OpenDoc)Only accept drags. Don't allow drags of our text OUT to other
						apps.

960110	FIXED	LGP		A while back
951102	REPORT	LGP		Drag/drop cut/paste support flickery.

960110	FIXED	LGP		A while back
951105	REPORT	LGP		Default font choice on PCs (at least my NT machine)
						sucks. Not so great on the Mac either.

951105	NOTE	LGP		I regiersted these creators/file types etc with Apple 951103
						Application Signatures:
						LDVW	-	Led Part Viewer
						LDED 	-	Led Part Editor
						LDAP	-	Led Application
						 
						File Types:
						LDDC	-	Plain Led document
						LDOD 	-	Led OpenDoc document
						LDsC  	-	Plain Doc Stationary
						LDsD  	-	OpenDoc Led Stationary

960110	FIXED	LGP		A while back
941201	REPORT	LGP		Finish support for font/style runs, and add API somewhere to
		(0113)			make its use easy.
941201	DEFER

960110	FIXED	LGP		A while back
950212	REPORT	LGP		See if there is some way to tell from #define values (__MWKERS__) what patch level
		(0140)			the compiler is???
950308	WORKING			I sent email to them to ask (mptp list). Still have not heard back.
950309	DEFER			I just got back mail saying no way. That said they maybe in a future version.

960110	NOTE	LGP		We now have a CW8 project for building LedIt! MFC. Doesn't link, but
						useful for testing if things compile.

960110	FIXED	LGP		A while back
950301	REPORT	LGP		put testsuites, docs, makefiles etc under RCS.
		(0149)
950601	DEFER			1.0RC1


---------------- Released 2.0a7 - 960103 - Below ------------------------------
960103	CHANGE	LGP		NEARLY BETA. Only a few minor tweeks here and there
						before beta (undo, and printing).

960103	CHANGE	LGP		Support new MWERKS CW8 compiler (prerelease).

960103	CHANGE	LGP		Completely rewrote LedIt! MFC application. Now supports
						OLE2 embedding, file IO of those OLE2 objects. And format is
						portable between mac/windows (using new common code file
						IO support in Led). Currently Mac TCL app only reads
						"LedNative" files if built with special define. Later it
						will work better with this format.

960103	CHANGE	LGP		Misc minor fixes to OpenDoc part - including drawing handles when
						only item selected. And rewrote private format file IO code
						to use new common code in Led library (now also used by OLE2
						etc).

951219	CHANGE	LGP		OpenDoc: more cleanups of som wrappers - now all prefixed with
						od_ and have no Environment* arg.


---------------- Released 2.0a6 - 951215 - Below ------------------------------
951215	CHANGE	LGP		(OpenDoc)Fixed simple, but very annoying bug with drag/drop
						where drop in same area as original selection (if in same frame)
						caused all selected text to be deleted. Right thing todo here
						is to refuse to drop.

951215	CHANGE	LGP		(OpenDoc)Fixed up the undo-typign support a bit. Still only
						< 1/2 done, but now works passably.


---------------- Released 2.0a5 - 951214 - Below ------------------------------
951214	CHANGE	LGP		(OpenDoc)Primitive undo support. Some cases of
						undo typing now work. Rest shouldn't be too hard (except maybe
						for embeddings?).

951214	CHANGE	LGP		(OpenDoc)Primitive printing support (but better
						than any of Apples sample code. NONE of them support
						printing. Only PENG does, and that supports printing
						by enabling the print command, and crashing when you
						select it :-).
						Right now I print in my existing frames. To get proper
						text editor printing, I'll need todo a lot more work and
						create an auxiliary printing frame (and subframes for
						embeddings).

951214	CHANGE	LGP		(OpenDoc)Externalize plain text, and styled text.
						This means that copy in LedPart now shows up in
						non-OD applications as text, and can be seen as
						text in other text editors (even within OD). Applies
						to cut/copy/paste, drag drop, and (if it worked right)
						hot-swapping of editors. I've never seen any cases
						of editor hot-swapping work.

951214	CHANGE	LGP		(OpenDoc)Drag and drop initiation (ie - now we
						support FULL drag and drop).

951214	CHANGE	LGP		(OpenDoc)Moving thumb to end of scrollbar document now works
						properly for large documents.

951214	CHANGE	LGP		(OpenDoc)DragWithin tracking (draw caret as user tracks
						over text, and adjust insertion point)

951214	CHANGE	LGP		(OpenDoc)Old code for adjusting positions (and whether they
						are realized or unrealized) of embeddings was way too slow.
						Redid it so its much faster now.

951214	CHANGE	LGP		(OpenDoc)Better logical clipping within a row
						to speed display of rows with embeddings

951214	CHANGE	LGP		(OpenDoc)Lose many uses of non-typesafe OrdList from
						sample code.


---------------- Released 2.0a4 - 951212 - Below ------------------------------
951212	CHANGE	LGP		Fixed a number of embedding display bugs which caused
						cruft to be left around the edges of embedded parts.

951212	CHANGE	LGP		Fixed code where we delete an embedded part. Now
						it should be properly removed.

951212	CHANGE	LGP		Fix scrolling of embedded parts bug. Now we
						remove/purge proxy frames. I hope this is
						the right thing todo. This stuff is still flaky
						but unsure what the cause is. Might even be fault of
						other parts?

951212	CHANGE	LGP		Reimplement caret code for TCL/OpenDoc to be
						more like MFC implementation (and share more
						code). Use Inval, and draw caret on Draw message
						approach.

951212	CHANGE	LGP		Lose NT 3.5J blink caret bug workaround

951212	CHANGE	LGP		Deactivate on OSEvt - suspend/resume.

951212	CHANGE	LGP		Use ODNewRgn in a few places I hadn't.

951212	CHANGE	LGP		Set cursor in OD Part

951212	CHANGE	LGP		Cleaned up most of the global SOM environment crap.

951212	CHANGE	LGP		Fixed another speed/display OD bug (wasn't logically
						clipping based on invalid shape).

951212	CHANGE	LGP		Set selection to embedding on click on it, or change
						of focus to it.

951212	CHANGE	LGP		Major cleanup of SOM interface code. Now exception
						safe. Environment crap less obtrusive

951212	CHANGE	LGP		Embed PICTS as OD Parts instead of raw pictures for OD
						Part. No point in handling these specially, since I do
						no better at displaying picts than pict viewer.

951212	CHANGE	LGP		Ripped out CSelection code. Didn't apply to text editors,
						and it was just confusing matters.

951212	CHANGE	LGP		Did work on proxy, fDisplayProxies stuff. Bug with
						weak storage references when we've written embedded objects
						to files.

951212	CHANGE	LGP		Killed all OpenDoc linking support for DrawShapes
						Example. Didn't work anyhow, and would be easier to
						rewrite than to fix.

951212	CHANGE	LGP		Lots of OpenDoc code cleanups


---------------- Released 2.0a3 - 951208 - Below ------------------------------
951208	CHANGE	LGP		Fixed several bugs with scrolling, and scroll bar hilighting
						in the OpenDoc part.

951208	CHANGE	LGP		Now about to rebuild IDL files from scratch, and have updated
						SOM version to correspond to Led version.

951208	CHANGE	LGP		Fixed further window update code (still somewhat slow, so still
						maybe a problem) according to hints from Sussman@apple, or something
						like that. Call Validate() after Update mainly, and use biasCanvas.
						(OpenDoc only)

951208	CHANGE	LGP		Substantially cleaned up new LedItMFC app. Got rid of unneeded
						crap. Pretty close to being able to ship that as a replacement
						for LedTestMFC. Mainly have to fix fileIO.


---------------- Released 2.0a2 - 951205 - Below ------------------------------
951204	CHANGE	LGP		Got first cut at MSVC 4.0 OLE2 embedding app working. Still has
						lots of rough edges - mainly surounding file IO, so won't release
						this binary to the net yet. But first cut at OLE2/OCX support came
						pretty easily.

951204	CHANGE	LGP		Got OpenDoc embedding largely working. Still alot of work to be done
						to shake out the rough edges. But you can paste or drop objects, and
						they move with the text.

951204	FIXED	LGP		Fixed. Now have GetTextStore() method of MarkerOwner.
951204	REPORT	LGP		SimpleEmbeddedObjectStyleMarker::DidUpdateText (const UpdateInfo& updateInfo)
						is badly hacked so it will crash if used with multiple imagers
						as in under opendoc!!!! MUST FIX - delete self later as with 
						other finalize cases!!!!
951204	CHANGE	LGP		First got promise stuff working again (on cut/paste).
						Then decided (when I noticed I must IMMEDIATELY fullfill
						promise on CUT) decided the whole thing was stupid, I
						and EXCISED it entirely. If I ever decide there
						is any use to it, I will re-implement it later!


---------------- Released 2.0a1 - 951124 - Below ------------------------------
951124	CHANGE	LGP		Put all font/style etc menus as submenu for Format
						menu. Not sure I like this better, but Doug Stein does.

951124	CHANGE	LGP		New artwork (first cut) from xgroup. Mac only.

951124	CHANGE	LGP		Most of this release was devoted to converting the LedPart
						to DR4 (OpenDoc 1.0), and rewriting part based on DrawEditor
						demo.
						Still not as good as old version in some ways, but better
						than others. And at least now it works with DR4.

9511??	CHANGE	LGP		TCL App uses temp memory now, and so has a much smaller
						paritition.
						And fixed up pict pasting quite a bit (still not perfect).
	

---------------- Released 2.0d6 - 951104 - Below ------------------------------
951102	REPORT	LGP		Drag and drop of text file with STYL doesn't get style info read.
						Must look in res fork in Internalize method.
951104	FIXED

951101	REPORT	LGP		Don't draw mixed-font text from proper baseline
951104	FIXED

951101	REPORT	LGP		Don't erase whole row rectangle for characters smaller
						than tallest character in row (causes visual cruft to be left
						on rows with multi-height text)
951104	FIXED

951104	CHANGE	LGP		Genererally cleaned up Demo apps, including BNDL resources, cleaned
						up about boxes to indicate sophists URL, etc. (TCL, OpenDoc).
						Contracted out for ICON artowork.

951104	NOTE	LGP		Decided NOT to update PC for new fileIO stuff, and cleanup UI.
						Instead wait til MFC 4.0/MSVC 4.0 arrives, and restart the application
						from scratch.!!!

951103	NOTE	LGP		Decided NOT to support styleRun IO for now on PC til I can support
						RTF. Easy to invent my own format, but not a good idea.

951103	CHANGE	LGP		Support Reading MIME/enriched. In fact, I have a new plug-in
						file format architecutre, and on insert / open of text file, we
						autodetect if text is RTF, or whatever, and ask user if he wants it
						interpretted, or internalized as plain text (or whatever format)
						{Mac, and OpenDoc}

951102	CHANGE	LGP		Fixed style run setting/display in menus for OpenDoc

951102	CHANGE	LGP		Drag and drop and cut and paste with style runs now work in OpenDoc
						(with a few minor caveats)

951101	REPORT	LGP		still must implement I/O with STYLERUN info, and STYL resources
951101					FIXED

951101	CHANGE	LGP		Created SharedStyleDatabase object so multiple StandardStyledTextImagers
						all share the same style run info, and updating one notifies and updates
						the other (important for view in source in OpenDoc).

951031	REPORT	LGP		We allow zero-length style runs.
951031	FIXED

951031	REPORT	LGP		Don't coalesce adjacent identical runs and summary records
						(this makes things very slow, and italics look choppy)
951031	FIXED

951030	CHANGE	LGP		Much better version of StyledTextImager::SummarizeFontStyleMarkers.
						Still incredibly slow, but at least it now coalescses adjacent blocks
						so editor appears slow, and not BROKEN. Still must rewrite at some
						point todo EFFICEINT summary and coalese.


---------------- Released 2.0d5 - 951019 - Below ------------------------------
951019	CHANGE	LGP		Mostly implemented Styled-text - still several bugs
						remaining, such as:
						*	We allow zero-length style runs
						*	still must implement I/O with STYLERUN info, and STYL resources
						*	Don't coalesce adjacent identical runs and summary records
							(this makes things very slow, and italics look choppy)
						*	Don't draw mixed-font text from proper baseline
						*	Don't erase whole row rectangle for characters smaller
							than tallest character in row (causes visual cruft to be left
							on rows with multi-height text)
						*	Probably alot more...

951018	CHANGE	LGP		Lose old non-measuretext based versions of findWrapPoint code.

951017	CHANGE	LGP		REMOVED CW6 bug workarounds

951017	CHANGE	LGP		lose old win32s bug workaround support - 
						qSupportWindowsSystemsWithNoMeasureText and
						qWin32s_EM_Messages_Broken


---------------- Released 2.0d4 - 951009 - Below ------------------------------
951009	CHANGE	LGP		OpenDoc part: Font/Style etc menu support working (though
						no underlying style run in Led engine yet.

951009	CHANGE	LGP		OpenDoc part: Scrollbars mostly work (all but multiple facets)

951009	CHANGE	LGP		Word wrap / word selection code now works for ASCII/Extended
						ASCII. Was broken before, and we always compiled for SJIS. Now
						default is to compile for extended ascii.

951009	CHANGE	LGP		Now we require CW7 to build for Mac/Metrowerks. And the
						sample projects further require the rez compiler for CW7 be
						installed.

951009	CHANGE	LGP		OpenDoc part: Fixed problems with font metric calculations before
						facets added. Now we should fully support updating all facets
						and frames correctly, and doing font metric calculations on an
						offscreen tablet when no facet available. All bad port setting
						problems and clipping problems (except for size-box) should
						now be fixed.

951009	CHANGE	LGP		OpenDoc part: Balloon help now works

951009	CHANGE	LGP		OpenDoc part: reviewed differences between HelloPart and
						SampleC++ part from DR3, and applied many patches to LedPart.

951009	CHANGE	LGP		OpenDoc part: got rid of most (nearly all) flicker in display.
						Only remaining problem appears to be when embedded in
						TestContainer, and there I think the problem is that THAT part
						is erasing the grafport before I get a chance, and so that is
						causing flicker.


---------------- Released 2.0d3 - 950908 - Below ------------------------------
950908	CHANGE	LGP		Lots of changes since 1.0.1 - mainly by way of adding
						OpenDoc support.

						Some include:

						-- huge changes for 2.0 - mainly added first cut at opendoc part support
						-- renmane Assert to Led_Assert, and added requires/ensures...
						-- Blinking caret now works (mostly - not sure all focus gain/lose logic right)
						-- dbl/triple click now work (first cut anyhow)
						-- Made TextImager_ no longer subclass from TextStore_ - BIG CHANGE - and now
							owns one. Affected many subclasses. In particular, no more mixin for
							SimpleTextStore and ChunkedArrayTextStore. Instead, have CTOR that takes one
							or the other, and by default create simple one.
							This changed designed to allow multiple text imagers associated with a single
							text store - needed for multiple frames associated with one part in OpenDoc.

						-- BROKE TEXTSTORE OUT OF Led mixin. Now TextImagers own a TextStore
							and we support multiple imagers seeing the same text store.
							This works - and is only really tested in teh multiview case
							in the Led opendoc part.

						-- DoInit/DoCleanup()
							Gone away. Instead this stuff is taken care off by overriding new method
							SpecifyTextStore() of TextImager_. Eliminates all those sloppy compiler
							bug workarounds as well.


---------------- Released 1.0.1 - 950619 - Below ------------------------------
950619	CHANGE	LGP		Fix slight bug in secondary hilight display - sometimes hilighted
						to end of line when it shouldn't have.


---------------- Released 1.0 - 950611 - Below --------------------------------
950611	CHANGE	LGP		Fix a couple types to avoid compiler warnings.
						And update bug list.


---------------- Released 1.0c4 - 950608 - Below ------------------------------
950608	CHANGE	LGP		Update Docs files - LedFeatures (current and planned),
						LedDesign, and

950608	CHANGE	LGP		Fix MultiRowTextImager::GetCharAtLocationRowRelative () to return prevChar when
		(0328)			we get offset > H(where) - not >=. This fix made fix for 315 work better, otherwise
						I wouldn't have risked the change so late. I'm pretty sure its the right thing
						todo anyhow...

950603	REPORT	LGP		Up/Down row arrows should use pixel goal rather than column# goal
		(0315)			
950603	DEFER	LGP
950607	Fixed	LGP		Alan said he'd kinda like this fixed, and since it was easy - what
						the heck!
						Fix applied to both MultiRowTextImager::ComputeRelativePosition ()
						and TextImager_::ComputeRelativePosition ().

950608	CHANGE	LGP		Cleanup Led_MFC_ default font setting code in CTOR
		(0327)

950608	CHANGE	LGP		chnage PC autoscroll timer interval - so we autoscroll faster (was 1/10 sec, now 1/40)
		(0326)			This improves performance of drag-selecting text on the PC.

950608	CHANGE	LGP		Remove hack/work around for MSVC compiler bug in
		(0325)			SimpleLed_MFC::Invariant_ ()/SimpleLed_ChunkedArray_MFC::Invariant_ ();

950608	CHANGE	LGP		DO CODE CLEANUPS THIS PASS. This means removing most old
		(0324)			code that was #if 0'd. And other similar cleanups.
						
950608	CHANGE	LGP		Get rid of pointless (counter-productive) sysfont crap in
		(0323)			Led_MFC_::CTOR.

950608	CHANGE	LGP		Fixed MultiRowTextImager::GetSelectionWindowRegion () and
		(0322)			TextImager_::GetSelectionWindowRegion () to not hilight to rhs of window
						in case of selecting very end of buffer. Special case this way simply
						to match the pre-existing (and presumably right) hilighting code
						in DrawRow(). (LECSPR#7839)

950608	CHANGE	LGP		Added a couple of asserts in WordWrappedTextImager, and did code clenaups
		(0321)			(mostly deleing commented out obsolete code)


---------------- Released 1.0c3 - 950605 - Below ------------------------------
950605	CHANGE	LGP		Lose override WordWrappedTextInteracter::SelectWholeLineAfter
		(0320)			(was a speed tweek but now
						TextInteracter_::SelectWholeLineAfter () can use 
						GetStart/EndOfRowContainingPosition... instead).
						And fix TextInteracter_::SelectWholeLineAfter to only include next
						character after end of row if it is a newline.
						LECSPR#7824. Note this should only affect MAC build since this routine
						(triple-clicking) only implemented for Mac.

950605	CHANGE	LGP		Build Led with MWERKS 'direct-destruction' option turned on.
		(0319)			Sadly - this is BROKEN with MWKERS CW6. I just sent them a
						bug report. But fails to cleanup exception stack on catch
						calls. Revert to NOT using direct-destruction til I hear back
						from MWERKS a workaround. Too bad - got a 4% code-size reduction!


---------------- Released 1.0c2 - 950604 - Below ------------------------------
950603	CHANGE	LGP		Fixed a bug with MultiRowTextImager::GetSelectionWindowRegion ()
		(0312)			(LEC SPR#7807/7808?). Trouble was added rect for interline space
						on all rows - should only add on LAST ROW of LINE!
						Also, cleaned up code abit and cleaned up
						TextImager_::GetSelectionWindowRegion ()

950603	CHANGE	LGP		Fixed BUG IN TextStore_::GetStartOfLineContainingPosition ()
		(0311)			(routine was only called in debug mode for assertions). When we had
						to go back more than 64 characters, first char after that we looked at
						was garbage. A similar bug existed in
						TextStore_::GetEndOfLineContainingPosition (). That bug could have
						caused double-clicking (word selection) to occasionally fail.

950603	CHANGE	LGP		embellished version number stuff to support release candiates
		(0310)


---------------- Released 1.0c1 - 950601 - Below ------------------------------
941201	REPORT	LGP		Get more recent ime.h from latest Jap SDK. Existing one
		(0112)			seems fine, but undoubtedly years old. May as well use latest.
950601	Fixed			Got the version of ime.h from the Jap SDK 3.5 from
						the April '95 Developer Network Developer Platform CD, Disk 13, mstools\h\ime.h

950215	REPORT	LGP		On a related note (to #144) - on both platforms - if I stop autoscrolling by lifting
		(0145)			the mouse while I am outside the window - I select to the end of the file -should
						only be to end of window!!!
950601	FIXED

950601	REPORT	LEC		LECSPR#7782 - Cannot place caret at the end of a wrapped row
		(0309)			other than those that end in a newline.
		FIXED	LGP		VERY SCARY!!! This bug was a bug with
						MultiRowTextImager::GetEndOfRow() for wrapped lines, and the
						subrow being other than the last. We were computing prev char
						when we shouldn't have.
						I'm VERY nervous about changing the return value of such
						a widely used function so late in the release cycle, but I do
						believe this is an important fix, and that it was responsable for
						both SPR 308 and 309. Not much choice. But test thoroughly!

950601	REPORT	LEC		LECSPR#7781 - Secondary hilight contains extra char at end of
		(0308)			row
		Fixed	LGP		Fixed. There were several bugs here. Hopefully this code
						is finally right. Most importantly, the main bug was
						that MultiRowTextImager::GetEndOfRow() was returning the
						wrong ANSWER in some cases!!!! VERY SAD - SEE SPR 0309!!!!

950601	CHANGE	LGP		Got rid of flicker in arrow key processing on Mac by doing
		(0307)			DoCursorMovement () calls in Update () calls.
						PC code already had immediate update calls to this routine.
						Now we check qPeekForMoreCharsOnUserTyping and use edelated if
						true and immeidate otherwise, and then after cursor movemnt, use
						#if		qPeekForMoreCharsOnUserTyping
							UpdateIfNoKeysPending ();
						#endif
						Really only reason we had flicker on mac was cuz of
						CWindow::Update() bug - calling EraseRect(). But rather than
						working around that/fixing it, lets just do fewer updates,
						and do immediate update when appropriate. Should give better
						interactivity anyhow.

950601	CHANGE	LGP		Be more aggressive in optimization in
		(0306)			GetTextBoundingRect/GetTextWindowBoundingRect (). Use left edge of caretEnd.
						Therefore, for empty selection, we return empty rect.
						Reduces flicker, hopefully produces no bugs.

950601	Fixed	LGP
950601	REPORT	AlecWy	LECSPR#7693 - Find again doesn't cause cursor to show. Alec points
		(0305)			out the real trouble is in MultiRowTextImager::ScrollSoShowing()
					 	which doesn't always work if the new position in in the same
					 	partition marker, but a different row.

950531	CHANGE	LGP		Support LMGetHiliteRGB () to use the Mac Color cdev specified
		(0304)			color for selection. (BTW - empiricly discovered funny rules
						for how to when to draw text in black vs. white. Very poorly
						designed Apple! MS much better on this matter!
						Thanx to Bob Swerdlow for point out the LMGetHiliteRGB () routine
						and reminding me I'd forgotten to support this.


---------------- Released 1.0b39 - 950531 - Below ------------------------------
950531	REPORT	LGP		Added TextInteracter_::CalculateCaretRect () routine to share
		(0303)			code between Mac/PC, and a couple places this came up
						on PC (new place is we need to call in UpdateCaretState()
						as arg to RefreshWindowRect!!!)	

950530	REPORT	LGP		Fixed bug in Led_MFC_::Refresh_/Update_ which caused updating to
		(0302)			be too aggressive. We redisplayed more than we needed too,
						possibly sometimes causing some flicker, and - at least -
						wasted CPU time. Similarly, fixed bug where we called
						Refresh(AREA) instead of RefreshWindowRect(AREA)


---------------- Released 1.0b38 - 950529 - Below ------------------------------
950529	CHANGE	LGP		Change emacs comment/C++ mode as kdj requested
		(0301)

950527	REPORT	LGP		Open large file and start drag selecting. While selecting, hit any
		(0299)			key. On PC - we crash. This is cuz the key to delete selection is
						processed, even during a drag!!! And we then - on the MouseMove
						event set the selection way past the end of buffer.
						Fix of course is to NOT process ANY key, or any other editing operations -
						while drag-selecting! When this happens, we do an OnBadUserInput () -
						which by default beeps at the user.
950527	Fixed	LGP		Note that PC Notepad ignores keys in this situation. And on the Mac,
						SimpleText ignores them while dragging, and the we process them
						after the user lets up the mouse (whichever ones are still
						left in the Mac event Q).
						On the Mac, I exacty replicate this behavior. On the PC - I do so
						nearly - the only deviations is that by default I beep on
						such characters.

950527	CHANGE	LGP		Ran profiling, and ChunkedArrayTextStore::AdjustMarkersForInsertAfter1 ()
		(0296)			was still the bottleneck for typing at the end of a large file. Turns out
						I forget the optimization where we punt out looking at submarkers if
						the insertion point is after our end! This dropepd us from top of the list
						to way off the list.
						Ran profiling, again and saw that ChunkedArrayTextStore::CollectAllMarkersInRangeIntoAndBelow  ()
						was now the bottleneck. So I did tail recursion hack on that. And it diseapred from the
						proliling list of relevant functions.
						Now the top of the list is MultiRowTextImager::GetCharLocationRowRelative ().
						Fixed a couple of easy problems with this.
						May fix this later to use binary search on calls to CalcSegmentSize() instead
						of going character by character. That should help alot there. Not sure its worth
						worrying about now.

950527	CHANGE	LGP		Marker now concrete class. No need to intruduce trival subclasses. Useful as is.
		(0295)			(got rid of sucblass tmp marker in TextInteracter

950527	CHANGE	LGP		Reworked ChunkedArrayTextStore::InsertAfter_ () to handle
		(0292)			exceptions. Don't leak memory any more, and assure
						we update marker starts for exactly how much we added!

950527	CHANGE	LGP		Reworked ChunkedArrayTextStore::PossiblyAddHackMarkers () to handle
		(0293)			exceptions. Don't leak memory any more.

950527	CHANGE	LGP		Handle exceptions in calls to DidUpdate()  - keep calling DidUpdate()
		(0294)			on the rest of the markers.
						We allow exceptions to be raised in Marker::AboutToUpdateText ().
						We FORBIT IT from Marker::DidUpdateText (). We wrap the calls to
						DidUpdateText () in DEBUG mode to assert no excetptions
						raised.
						Now I believe all of ChunkedArrayTextStore is totally exception
						friendly.

950527	CHANGE	LGP		Got rid of WordWrappedTextImager::AssureFontCacheUpToDate () in
		(0288)			favor of stack-based resource allocation
						class	WordWrappedTextImager::FontCacheInfoUpdater
						Used to get rid of memory allocations from doing selectobject
						calls in MFC (Selectobj of CFont creeats tmp obj for return
						value which does malloc, which can cause fragmentation
						needlessly - LECs/Alecs frag concerns). Anyhow - simpler,
						clearer, and more efficeint.

950527	CHANGE	LGP		use new const_cast() macro, instead of commenting (~const).
		(0289)			Closer to  new ANSI syntax soon to be available

950527	CHANGE	LGP		Cleanup ChunkedArrrayTextStore - looking for memleak/bugs with
		(0290)			catch/throw. Lost old recusive implementations now that new
						faster ones seem to be working. Lots of minor cleanups.

950527	CHANGE	LGP		Tested under new boundschecker - 1.5/NT. What a racket.
		(0291)			That softwares GUI is such shit. And every new MS release
						breaks it. Merely looking at it wrong breaks it. But -
						none-the-less - it can be quite useful, and I feel better
						that it passed!


---------------- Released 1.0b37 - 950526 - Below ------------------------------
950526	CHANGE	LGP		Lots of work on speeding up marker tree implementation. BIG
						WINS! Got rid of most recusion, and used explicit stack
						in few cases where necessary (Kevin Jackson points out even
						these may not be necessary - but I found it easier).
						
						Turns out there were subtle bugs in the hack marker addition so
						when we added hack markers we didn't push the markers
						at that level down into them. They had to make themselves
						usefull later. And we - for many cases - ended up having
						lots of useless hack markers cluttering the tree. For example
						- hackmarkers with only one child are totally useless.
						I now prune MOST of these. In a future release, I will have the
						code cleaned up enuf that I can assure I've pruned ALL.

						These speedups (together with a few changes to LVEJ) made
						a SBSMode swich in LVEJ for basics.txt.scanned go from
						two minutes first time, and 50% longer each try to 2 seconds,
						and never 'appearing' to slow down from there.
					
						This code is currently pretty messy and hacked up and should
						be cleaned up for the next release.
						
						Thanx to Sterling Wight and Kevin Jackson for their advice
						and help on this.


---------------- Released 1.0b36 - 950525 - Below ------------------------------
950525	CHANGE	LGP		Fixed bug in WordWrappedTextImager::AssureFontCacheUpToDate ()
		(0287)			on PC where I wasn't setting clean bit on cache so always filling.
						(Alec pointed out in his malloc during core work survey)

950525	CHANGE	LGP		Dont malloc CWindowDC - keep CDC as field and do manual attach/deteach
		(0286)			to avoid malloc overhead in Led (and avoid frag for LEC/Alec - 950524)

950525	CHANGE	LGP		Do ::GetObject/::SelectObject rather than CDC:SelectStockObject() to
		(0285)			avoid malloc calls/update of MFC obj map, both for speed (not really), memory frag
						in LVEJ (maybe?). Just to set Alecs mind at ease about this source of frags. And
						is simple enuf todo and more efficent (though probably no matter there).
						Still must apply this fix for CFont objects.

950525	CHANGE	LGP		added qCanUseAlloca define. Consider in the future using it for Led_SmallStackBuffer
		(0284)

950525	CHANGE	LGP		Added GrowToSize () method to Led_SmallStackBuffer
		(0283)

950525	CHANGE	LGP		Tablet_Acquirer/Led_Win_Obj_Selector to facilitate safe allocation/dealocation of
		(0282)			sysresources etc. Alloc on CTOR, and auto destroy for ease of use, exception safety,
						and less verobose. Also - unlike MFC versions, do no mallocs/entry into map
						of CObj->GDI object stuff - so faster, less fragmentation.
 
950525	CHANGE	Sterl	Sterls stack-depth hack. Largely untested.
		(0281)

950525	CHANGE	LGP		Put in conditional code in ChunkedArrayTextStore marker code to use
		(0280)			a varient of tail recursion optimization - use explicit stack instead of
						function calls to save time (I hope - claim of speedup largely untested).


---------------- Released 1.0b35 - 950523 - Below ------------------------------
950523	Fixed	LGP		TextImager::fSelectionShown now defaults to FALSE - ALECS call...950523
		(0276)

950523	CHANGE	LGP		Attempted hack qUseLocalBoolFlagToKeepTrackOfShowHideCaretForNTJCaretBug
		(0277)			See SPR#0254

950523	CHANGE	LGP		Marker code optimizations in ChunkedArrayTextStore - work in progress.
		(0278)

950523	Fixed	LGP		Fixed bugs with GetSelectionWindowRegion () - having todo with interline
		(0279)			space and when to show it. Not 100% sure I got external leading right?


---------------- Released 1.0b34 - 950521 - Below ------------------------------
950521	CHANGE	LGP		Did first cut at LedDialogText (mainly for PC, but later do
		(0275)			Mac version. See SPR 0233 for Rest.

950520	REPORT	LGP		LECSPR#7635 - enter key doesn't work when ES_WANTRETURN
		(0274)			
950520	Fixed	LGP		OnGetDlgCode() must check that both ES_WANTRETURN
						and ES_MULTILINE are set, and then we or in DLGC_WANTSALLKEYS
						and we are all set.

950520	CHANGE	LGP		InsertAfter/DeleteAfter have been removed from TextStore_
		(0270)			and TextInteracter_. I found the difference in args
						confusing, and simply providing the Replace() interface
						I think was sufficient.

950520	REPORT	LGP		LVEJ SPRs 7638, 7672, 7668. Assert (fTotalHackMarkersPresent==0)
		(0271)			failed when closing some files.
950520	Fixed			Fix bug in ChunkedArrayTextStore - deleing lat few hack markers.
						Trouble was one of my optimizations to check for hack-trees
						skipped checking if fewer than four children of a particular
						marker. At end if all the children of fRootMarker happened
						to be top level children and all hack markers, they didn't
						get deleted.

950520	CHANGE	LGP		Added new define qLedFirstIndex. Defaults to ONE. Must be this
		(0272)			way for quite some time to come (See defered SPR 0273). But the
						intent is to later allow Led to support zero-based vs one-based
						indexing for those who prefer that style (many).

950519	Fixed	LGP		Redid Interline space. Now no setter. Instead invalidate
		(0269)			and Calc methods added. And we simply cache result.
						Default calc method just returns zero.
						(all this Sterls idea)

950519	Fixed	LGP		fix LedMFC draw logical clipping bug. Was using whole
		(0259)			window rect. Now uses bounding rect of clipping region.
						Should update portions of screen faster now.

950519	REPORT	LGP		qAllowRowsThatAreLongerThan255	- SEe 0258
		(0257)			Add variable to control if we perform an optimization
						which saves space in return for lack of flexabilty. We
						pack rowheights (and soon starts - see 0258) into
						bytes in rowstart array. This is nearly always enough.
						You'd have to use a huge font. To support the large fonts,
						define as true. By default defined as false, and so we
						do the optimization.

950519	CHANGE	LGP		Renamed ScrollSoMarkerPositionIsInTopRow to
		(0260)			SetTopRowInWindowByMarkerPosition ()

950519	CHANGE	LGP		finsh checking which MWERKS bugs still exist

950519	CHANGE	LGP		BIG change. Introduced new intermediate class -
		(0261)			WordWrappedTextInteracter to get code sharing between
						Led_{TCL,MFC}_{ChunkedArray,SimpleTextStore}.
						Major code cleanup, and now MUCH more code shared between
						MFC and TCL versions.

950519	CHANGE	LGP		Cleaned on Led_TCL, Led_MFC and related classes quite a bit.
		(0262)			Cleaned up overloading crap etc. Now all the overloading
						(or nearly all anyhow) is done quite sanely and simply, with
						many fewer (now few) compiler overloading bug workarounds.

950519	CHANGE	LGP		Fix spelling errors Invariant

950519	CHANGE	LGP		Massive WindowRect/LayoutRect change - BUG IMRPIOVEMNT
		(0263)			Thanx Sterl for helping me think straight about this
						and for hte LayoutRect name. Now we no longer have an
						ImageRect. Instead - we have an ImageWidth. Nearly all
						of Leds usage of GetImageRect was wrong. Nearly all should
						have been GetWindowRect (), and a few should have just
						been zero.
						
						ImageRect - well - sort of doesnt exist anymore. Always starts
						at zero/zero top/left. And bottom floats. User really can only
						specifiy width.

						MUCH cleaner. Much simpler. And fix needed to implement
						traditional pixel scrolling (used to correct for problems
						in SBSMode scrolling when not enoufh rows on one side in
						LVEJ).

950519	CHANGE	LGP		Removed assertion that the reference implementation of
		(0264)			FindWrapPoint() returned the same value as new measuretext
						version. Done so cuz of speed considerations (even debug mode
						must be TOLLERABLE). And more importanltly, cuz the assertion
						could sometimes fail. Mainly for obscure reasons with tabs.
						
						Anyhow - I'm defering fixing of that bug - SPR 0256.

950519	CHANGE	LGP		Optimize Size of PMs - down from 92(nodebug PPC) to 68.
		(0265)			Used bitfields in ChunkedArrayMarkerHook (4 bytes).
						Got rid of _Buf guys in MultiRowTextImager::MRPartitionMarker,
						and instead override pointer itself, and use tricks
						about first rowstart always zero so no need to store it.
						Got rid of a couple flags (eg. fCacheValid gone - use
						fRowCountCache != -1 instead). 
						Wrapped access to this PMs fields MUCH better. Now much
						cleaner how these updates, though there is still room
						for improvement.
						(thanx Sterl)

950125	REPORT	LGP		Consider having MultiRowTextImager::GeRowReferenceContainingPosition()
		(0127)			maintain some cache of mappings - maybe just for current
						selection, or start of window or something. But this could help
						a lot.
950322	Note			I looked at this. Easy todo. But I'm reluctent to try til I've seen this
						show up in profiling data.
950509	Note			Closed DUP #0215
950519	Fixed	LGP		Implemented LineBasedTextImager::GetPartitionMarkerContainingPosition ()
						which does this caching. And MultiRowTextImager::GeRowReferenceContainingPosition()
						now calls that.


---------------- Released 1.0b33 - 950517 - Below ------------------------------
950517	CHANGE	LGP		Fixed LVEJ NewSBSMode problems with adjusting selection after inserts/pastes
 		(0252)			by keeping tmp stack marker before insertion, and letting it keep track
 						of how much text inserted / deleted (takes into account sentinals), so
 						we can properly adjust at the end the final selection.

950517	CHANGE	LGP		Fixed GetSelectionWindowRegion ().
 		(0251)			

950517	CHANGE	LGP		Implemented CONTROL-PAGEUP/DOWN for PC.
		(0255)

950517	CHANGE	LGP		Add define qMakeWindowsScrollbarAppearOnlyIfNeeded and make default to true.
 		(0248)			This supports funny behavior in WordForWindows adjusting selection during
						page up/down operations. (LECSPR#7566)

950517	CHANGE	LGP		Fixed CalculateRowDeltaFromCharDeltaFromTopOfWindow routine to be much simpler
  		(0253)			using rowreferences machinery. And implemented complimentary
						CalculateCharDeltaFromRowDeltaFromTopOfWindow (long deltaRows) 

950517	CHANGE	LGP		Keep extra field in MultiRowTextImager::MultiRowPartitionMarker for fInterlineSpace.
		(0250)			Speeds calls to GetInterlineSpace()
						and avoids troubles where this routine used to HAVE TO fillcache. Caused
						slight difficulties in LVEJ cuz called INSIDE of FillCache.

950517	CHANGE	LGP		Recieved CW6, and tested existing compiler bug defines. No changes since last beta.
		(0249)			But I did go through and delete all the old bug defines that were only needed for
						CW5, and all the inbetween patch releases (10 or so of them).


950517	CHANGE	LGP		Cliff tells me this code infinite loops doing ::ShowCaret under WinNT J (version?).
		(0254)			Not good. He says luckily WinNTJ DOES return an error in the GetLastError() field,
						so we use that to jump out. I think the old code without the error test is RIGHT
						given the API description in the docs. But we must match the CODE - not the DOCS!
						But in a few assertions to check exactly how this behaves on different systems.
						If they fail, they can be removed.


---------------- Released 1.0b32 - 950515 - Below ------------------------------
950515	CHANGE	LGP		Added utility GetFontMetricsAt ()

950515	CHANGE	LGP		Added utility GetSelectionWindowRegion ()

950515	CHANGE	LGP		More asserts in TextInteractor typing code to deal with obscure cases
						that came up in LVEJ SBSMode (from > to)

950515	CHANGE	LGP		Added InteractiveReplace() method

950515	CHANGE	LGP		Led_TCL::SetSelection's all vector through same virtual function now
						making subclassing/overriding easier.

950515	CHANGE	LGP		Fixup when we call SetCaretShownAfterPos - now done in InteractiveReplace ().


---------------- Released 1.0b31 - 950514 - Below ------------------------------
950514	CHANGE	LGP		In MultiRowTextImager::MultiRowPartitionMarker::SetInterLineSpace,
						call GetOwner ()->()->InvalidateTotalRowsInWindow () on change.


---------------- Released 1.0b30 - 950512 - Below ------------------------------
950512	CHANGE	LGP		Define qComplilerDoesNotInlineIntrinsics for MWKERS compiler.

950512	CHANGE	AlecWys	Fixed serious bug in Led_SmallStackBuffer where I compared
		(0244)			size with nElements - which is of course wrong exect in
						case where T is char (as it usually was). THANX ALEC.

950512	CHANGE	LGP/SSW	Added FindLineBreaks_ReferenceImplementation () so I could refine
						implementation (speed tweek) and keep assuring I wasn't breaking
						anything.

950512	CHANGE	LGP		Code cleanups on the MFC Serialize/CArchive support.
		(0247)			Added overrides for OnNcCalcSize/OnGetDlgCode/OnNcPaint for
						WS_BORDER fixes. Maybe didn't need the NC overrides. OnGetDlgCode ()
						was pre-emptive fix to make sure I returned same answer as other
						TEs in windows.
						Add new define qMakeWindowsScrollbarAppearOnlyIfNeeded for PC (default false)
						Also - fixed subclasswindow guy to delete old and re-create. Seems
						far simpler way of assuring things get setup right. THis is what old
						CV editor code had done. Otherwise I got funny behavior from
						base-class which I really didn't want.

950512	REPORT	SSW		Fix a bug with tab processing in word-wrap code. 
		(0245)

950512	REPORT	SSW		All STERLs changes to speed tweek word-wrapping,Mainly he reduced calls to FindLineBreaks
		(0246)			by guessing a good spot to start calling it based on measuretext info.
						This code is ghastly, and really needs major cleanups! The use of multiple
						meanings of indexes (what they are relative to) has become VERY confusing.
						I just a little nervous about chaning it this late in the release cycle.


---------------- Released 1.0b29 - 950509 - Below ------------------------------
950509	CHANGE	LGP		fix bug with TCL test program opening readonly files

950419	REPORT	LGP		GetRowReferenceContainingPosition should cache last lookup value and search
		(0215)			from there - if it turns up (as I expect it will) in LVEJ profile...
950509	Closed			DUP of 0127.

950509	Change	LGP		Comment out assertion that fSubRowInTopLineInWindow <= fTopLinePartitionMarkerInWindow->GetRowCount ()
		(0243)			cuz too slow - even for debug mode - reading in large files.

950509	REPORT	LGP		Added qUseWidthOfSpaceForTab, defaulting ON. Tabstops look better now by
		(0242a)			by default. Later add more powerful tab interface.
950509	Fixed

950509	REPORT	LGP		Added OnTypedNormalCharacter/HandledMByteCharTyping/QueryInputKeyStrokesPending to
		(0242b)			vector more code to one spot from Led_TCL/Led_MFC - cuz I was going to have
						to override thier typechar stuff in LVEJ - and was needless spread
						across routines in differnt classes.

950509	REPORT	LGP		MultiRowTextImager::MultiRowPartitionMarker::InvalidateCache
		(0241) 			now calls GetOwner ()->InvalidateTotalRowsInWindow ();
						fPixelHeightCacheValid used instead of fRowHeightCacheValid - lose extra bool.
950509	Fixed

950509	REPORT	LGP		Lose unused withWhat parameter to Pre/PostReplace.
		(0240)
950509	Fixed

950509	REPORT	LGP		Added Led_ThrowOutOfMemoryException () utility so I can throw memory
		(0239)			excpetions when I detect no more mem calling OS routines
						like clipboard routines.
950509	Fixed

950509	REPORT	LGP		qSupportWindowsSystemsWithNoMeasureText
		(0238)
950509	Fixed

950509	Change	LGP		Lose GetByteLength () backward compatability.


950506	REPORT	LGP		New MeasureText based word-wrapping code doesn't work right
		(0234)			handling tabs. Whenever it screws up with calc - we WILL
						get assert failure!
950509	FIXED	LGP&	Added virtual ResetTabStops () to MRTI for proper tab handling
				Sterl	w/measuretext.


---------------- Released 1.0b28 - 950507 - Below ------------------------------
950507	REPORT	LEC		LECSPR#7496. Line up double-byte chars over one another.
		(0237)			Hit space key down arrow into middle of double byte char.
950507	Fixed	LGP		Simple. I had just never checked for this in
						ComputeRelativePosition (TextImager/MultiRowTextImager).


950507	REPORT	LEC		LECSPR#7438,7475. Led sometimes positions blinking caret
		(0235)			incorrectly.
						Example. Type "One". Backspace over the 'e', and type 'e'
						again, followed by <return>. Caret does NOT go to the next
						row as it should.
950507	Fixed	LGP		This was an outgrowth of the SetCaretShownAfterPos ()
						enhancement made to support SBSMode in LVEJ. Now fixed,
						I hope.

950507	CHANGE	LGP		There were lots of problems with LVEJ SBSMode having todo
		(0236)			with computing how many rows there were in the window.
						This code generally counted on AdjustBounds() fixing
						this var. And a bunch of other things too. Big cleanup.
						Now adjustBounds is just a non-specific name for
						adjust sbar in TextImager_ class. All the other functions -
						like making sure all of window used (now done in
						AssureWholeWindowUsedIfNeeded if bool param et) and
						we have cache for totalrowsinwindow, and people now call
						InvalidateTotalRowsInWindow. Much more orthoginal, and less
						kludgy. I worry slightly since there were so many changes
						I may have forgetten one or two places todo invals
						of totalrowsinwindow, or some such. But if I can get
						reproducible examples, these should be easy to track down.


---------------- Released 1.0b27 - 950506 - Below ------------------------------
950303	REPORT	DStein	Type a very long line - maybe 10K ...and performance is very
		(155)			bad editing.
		COMMENT	LGP		Trouble is my optimizations really assume single line doesn't get
						too big. Line that big and array doesn't work great. Here are a few
						things todo to make things better. First - FillCache() needs
						to be modified to not wrap an entire line, but to take a target row
						argument, and only wrap to that point. That - coupled with being
						more careful to only invalidate from a particular row down when
						editing - should solve, or greatly ameliorate this performance
						glitch. My inclination is to defer this for the first Led release.
						But I will run this past LEC.
950506	Fixed			MeasureText makes this MUCH faster.

950322	REPORT	LGP		Consider AGAIN rewriting word wrap code to use MeasureText (). Assuming
		(0180)			MeasureText is nearly as fast as TextWidth (test this theory!) - we should
						be able to wrap MUCH faster (also assuming that TextWidth calls are our
						bottleneck). One problem is the lack of a MeasureText() routine on the PC.
						We could simulate with GetTextExtent() calls - but then we'd have to be
						very careful about errors being introduced because of kerning etc.
						Also - we must be careful about overflow (we should be careful now too
						of course!). Not clear we need any more speed than we have currently. Especially
						since we are so smart now about not wrapping at all unless we need to. But
						we could make what wrapping we do very substantially faster (10x speedup
						not impractical) by doing this.
950329	WORKING			Got feedback from the net. The MSWindows equivilent to this routine
						is GetTextExtentExPoint (). The docs are vague about if this takes into
						account Kerning or not. So I may yet have some trouble with this. I've yet
						to do timing tests on this vs. GetTextExtent() and similarly on the Mac.
950505	WORKING			Much work in this direction. See SPR#0226.
950506	Fixed			Much work in this direction. See NEW SPR#0234 for remaining problems.

950506	REPORT	LGP		Tried playing with NOT doing Update in TypeChar on PC. Tried
		(0231)			skipping draw when there were pending key events. Visually it
						appeared awkward. (I had debug on, but it WAS a 90Mz pentium!).
						Maybe not such a good idea. Perhaps better is to improve/refine
						GetStableTypingRegion!
						
						See Alan Pollacks email to me as of 950505 - 5pm about
						LVEJ/Led typing speed. I asked him for more feedback.
950506	WORKING	LGP		Even after MeasureText () speedup - this is still TOO slow.
						Maybe I CAN do the above trick, and I just need to try
						harder. Trouble maybe I only want to peek for WM_CHAR messages
						and I was peeking for ANY key messages. Cuz of KEYUP message
						I may have NEVER done the update which is why things looked
						so bad.
950506	Fixed	LGP		New Led configuration variable: qPeekForMoreCharsOnUserTyping.
						By default this is TRUE. I believe this GREATLY AMELIORATES
						the problem, without going so far as to fix it.
						I'd appreciate user feedback as to how people think this feature
						works.

950506	REPORT	LGP		I think I now know fully how to deal with Led API issues
		(0232)			for mbyte vs. UNICODE vs. singlebyte. Mostly done by now.
						All APIs refer to Led_tChar offsets and characters unless
						otherwise specificly noted. Lose GetByteLength() routine.
						Instead - rename it GetLength().
						
						Add new routines TCharIndexToCharacterIndex(). Trivial
						for single/wide character sets. VERY SLOW for mbyte. But people
						CAN use them if they want.
						
						POSSIBLY add for some - or systematicly (probably just for a few
						things) BYTE and CHAR versions of things. Actually - probably
						just a bad idea. The universal conversion routines mentioned
						above should be good enuf!
950506	Fixed	LGP		Added routines:
							size_t	TextStore_::CharacterToTCharIndex (size_t i);
							size_t	TextStore_::TCharToCharacterIndex (size_t i);
						Renamed GetByteLength () to GetLength().
						TEMPORARILY ADDED inline
							GetByteLength () to CALL GetLength (). This will disapear soon!

950506	CHANGE	LGP		Optimized WordWrappedTextImager::AssureFontCacheUpToDate () for PC.

950506	CHANGE	LGP		DE-Support Symantec C++ 7.03. I doubt anyone uses it anymore
						(now that version 8 has been out a couple months). And I haven't
						tested it in so long. Someday I should test/port to SymC++ 8.0.

950506	Fixed	LGP		Improved Led_FindPrevOrEqualCharBoundary thanx to Alec
		(0231)			Wysocker.


950506	CHANGE	LGP		More UNICODE support. Not tried yet. But nearly everything in place.
		(0230)			I think I now use Led_tChar EVERYWHERE I should, and use it properly.
						SB only thing todo is make sure we use right Win32 APIs for UNICODE
						when building for UNICODE. Try after 1.0 release...


950506	REPORT	LGP		SimpleLed_ChunkedArray_MFC::AdjustBounds ()/
		(0229)			SimpleLed_MFC::AdjustBounds () should check for m_hWnd != NULL
						and skip otherwise. (Called from MultiRowTextImager::SetForceAllRowsShowing
						by apps at startup before realization).
		Fixed


---------------- Released 1.0b26 - 950505 - Below ------------------------------
950505	CHANGE	LGP		Added Get/SetForceAllRowsShowing to change behavior of
		(0227)			MultiRowTextImager::AdjustBounds(). Shutting this off is
						handy for slaved scroll views like in LVEJ.

950504	CHANGE	LGP		More work on MeasureText stuff - CalcSegmentMeasure() API -
		(0226)			at least add it in!!! And make CalcSegmentSize() vector
						to it!

						NO! Added MeasureSegmentSize() and NOW does indeed
						use MeasureText() (Mac&PC). But performance of MeasureText
						is VERY BAD compared to TextWidth. So we MUST maintain the
						old CalcSegmentSize() VIRTUAL API. And add MeasureSegmentSize
						API IN ADDITION. Post to the net to see why MeasureText so
						slow on mac - and MUCH WORSE on PC!

						500,000 characters
						
									Mac (PowerMac7100)			WinNT 3.51 (P90)
									TextWidth MeasureText		TextWidth MeasureText		

						10chars		2.84		4.45			0.19		5.0
						at a time

						100chars	0.43		1.25			0.06		1.91
						at a time

						1000chars	0.18		0.94			0.05		1.86
						at a time

						(Also - 2chars at a time on PC - got .81 with TextWidth,
						implies could do our OWN measuretext on PC for 1.6 seconds)


950504	REPORT	LEC		On win31 and SOME 68K macs hangs opening SOME files
		(0224)			with 8000 char lines. (TextWidth overflow bug)
						LECSPR#7426
950504	Fixed	LGP		?? I cannot test - Ask Alec/Dan to test. Rewrote Led's use
						of TextWidth()/GetTextExtent () calls to handle special
						case of LARGE arrays of text.

950504	REPORT	Alec	Please destroy Led_IME on application exit
		(0225)
950504	Fixed	LGP

950504	REPORT	LEC		3 Paste on PC garbage chars at end SPRs (LECSPR#7440,
		(0223)			LECSPR#7486, LECSPR#7493)
950504	Fixed	LGP		TextInteracter::OnPasteCommand () - use strlen()
						rather than resource length for Windows.
						[Don't forget to fix LVEJ MTTransText::OnPasteCommand ()]

950504	CHANGE	LGP		Added Led_FindPrevOrEqualCharBoundary () to find if the given
						index is a valid break in an mByte string - or if back one
						is. This is useful when using a guess of a midpoint is used
						(for an mbyte string) and you must make sure your guess doesn't
						split a character (e.g. wordwrap code).

950504	CHANGE	LGP		Better use of Led_tChar in Led APIs - probably SB everywhere,
						but now at least done through the textstore classes (so we can
						easily support UNICODE)

950504	CHANGE	LGP		Led_SmallStackBuffer now templated, and use templated
						version as appropriate.

950504	CHANGE	LGP		Led_FontMetrics class instead of old Led_FontLineHeight
						routine. Better system specific encapsulation.


---------------- Released 1.0b25 - 950503 - Below ------------------------------
950425	Fixed	LGP		update Led build flags for new MWERKS compiler

950427	WORK	LGP		piddly start at measuretext support in WordWrappedTextImager.cpp

950428	Fixed	LGP		worked on (fixed) bug with MultiRowTextImager::AdjustPotentialTopRowReferenceSoWholeWindowUsed
						with rows of different heights (had oversimplied cuz I didnt need style runs - but
						same problem comes up with interline space!)

950503	Fixed	LGP		A number of interline space bugs - especially MultiRowTextImager::AdjustBounds ()


---------------- Released 1.0b24 - 950424 - Below ------------------------------
950424	Fixed	LGP		Fix problem with MultiRowTextImager::Coalese() with when we fixup current marker
		(0218)			at top of window. Trouble was with when its OK to call GetRowCount/FillCache().
						Led wasn't too picky, but LVEJ SBSMode was! So only call GetRowCount () at END
						- thereby having things in better shape in LVEJ for FillCache() override. And slightly
						simpler for Led cases anyhow.

950424	Fixed	LGP		TextInteracter::DrawCaret() for Mac infinite mutual recurse bug with SetCaretShownAfter().
		(0219)			Fix by only doing change when drawing caret ON.


950424	Fixed	LGP		MultiRowTextImager::GetCharLocationRowRelative () - fix bug i had introdcued
		(0220)			earlier where we returned zero-width charcell. Not noticed cuz nearly everybody
						only uses LHS of returned value. Except new draw caret code (which depends
						on leading/trailing of following etc). That now works better.

950424	Fixed	LGP		Fixed bug I had introduced clicking past end of line (cursor would go to next
		(0221)			char) in b22.

950424	Fixed	LGP		Cleanup OnPasteCommand stuff - vector a bit into helper class so subclassing
		(0222)			OnPasteCommand requires less duped code.


---------------- Released 1.0b23 - 950419 - Below ------------------------------
950419	NOTE	LGP		Upgraded to MW C++ 1.2.2b3. If you are building with an earlier
						patch of MW C++, define qUsingPreMWPatch950419 to be 1 in your
						precomp.pch file.

950419	Fixed			Fix MultiRowTextImager::ComputeRowsThatWouldFitInWindowWithTopRow to take into
		(0216)			account interline space (comes up in LVEJ NewSBSMode)

950419	Fixed			Use block allocation for hack markers
		(0213)			

950418	Fixed	LGP		Fixed LVEJSPR# 7330 - PC Only - caret displayed in wrong place at start.
		(0211)			Fix is to have fCaretShownAfterPos default to true!


---------------- Released 1.0b22 - 950417 - Below ------------------------------
941104	REPORT	Jeremy	(LEC#6019)    a1      Paste too many (> 78) copies of a
		(0070)			screen's length of text and the editor crashes you into
						the debugger. New     Jeremy  Lewis   5       2       
						Mac     Quadra 640 AV   7.1+JLK 94.11.03        Unknown
						Editor  
950125	NOTE	LGP		I tried this(MAC). And though I don't get the crash, things
						don't work terribly well. Some menus become disabled, and
						we get warnings about being low on memory. But even after close
						we still have new file menu item disabled.
950129	NOTE			Tested again (after fixing memory leak problem). And we do run into
						assertion errors if we fail in the middle of an insert - cuz we don't
						get all the markers updated properly. If markers not updated properly
						that we are SOL!!!! This is serious, and tricky to fix. Probably my best
						bet is preflighting.
950329	NOTE			Posibly a good place to do much of the relevant preflighting is on the
						AboutToUpdate method of the marker before we actually change the text. Perhaps
						we can allocate our markers there, and use new (BUF) () to allocate them again?
						Would work better if we didn't use Array<T> so much. But this may be a start.
950417	Fixed			At least for the NODEBUG version this is fixed. We still do get assert
						errors and anamolgous behavior. But most of this bug is now fixed
						(see SPR# 0202).
						The remainder of the problems are now tracked in new SPR# 0209.

950417	Fixed	LGP		added GetStart/EndOfRowContainingPosition () methods - simple/fast if we know we
		(0208)			are a subclass of multirowtextimager, but needed to give fast access to this for
						classes that don't know that - (e.g. Led_TCL, TextInteracter_).

950126	Fixed	LGP		Speed up deleting lots of text.
		(0207)			This was bad before. On PowerPC 7100, before LinkedList fix (Led SPR#0202) it took
						10 seconds to delete a 500K text buffer. After LinkedList chnage - it took 20.
						With the addition of a RemoveMarkers () method to textstore, and its usage from
						Coalece, this number dropped to apx 1 second. Thanx to Kevin Jackson for the
						RemoveMarkers suggestion.

950415	Fixed	LGP		Got rid of SimpleTextImager class.
		(0205)

950416	REPORT	LGP		Ambiguity about where to put blinking caret when on position between characters
		(0204)			on two different rows.
950416	Fixed	LGP		I thought this was an old defered bug, but I can find no reference. Anyhow - needed
						to be fixed cuz this case comes up so prominently in LVEJ NewSBSMode.

950415	Fixed	LGP		On Led_TCL::TypeChar/Led_MFC/OnChar () in default case advance selection after insert
		(0203)			by using FindNextChar () - generally better cuz of multibyte chars (though wasn't
						buggy before cuz we handled mbyte chars above). But better style. And needed for
						LVEJ where the insert of the character might not fully/really go through (might
						be after sentinal char at end of buffer). Just use FindNextCharacter () after
						replace - and that solves all these problems (I hope).

950126	Fixed	LGP		Rewrite array usage in ChunkedArrayMarkerHook to use linked list where fields are embedded
		(0202)			directly in that object. Use 8 bytes (child+next ptrs) instead of 12 for Led_Array for EMPTY case
						and Led_Array of couse uses MUCH more for cases where we have children. And this reduces fragmentation,
						and - by far most importantly - makes the code less fragile in low memory circumstances cuz I never
						have to worry about half constructed ChunkedArrayMarkerHook objects. Later when I implement
						preflighting before the insertion, I can much more easily compute/test/reserve my memory needs
						since I have no variable length (malloced) datastructures (no idea how big the Led_Arrays would
						eventually get, and so hard to predict memory usage). See SPR# 0070.

950415	Fixed	LGP		Fix copytextrange () bug for TCL - and added asserts. Thanx to
		(0201)			Sterl for the fix.

950126	REPORT	LGP		TextStore_::GetStartOfLineContainingPosition () could be made much
		(0128)			faster by copying out several characters at a time (say 32?).
950214	Working			Only reason this mattered is cuz it was used in FindPreviousCharacter()
						and that was used alot. Now I do this trick in FindPreviousCharacter() and
						don't even call this. May still want to apply the hack in
						GetStartOfLineContainingPosition (). Look at FindPreviousCharacter().
950228	DEFER			Same applies to GetEndOfLineContainingPosition (). But no point in this -
						at least for now - since this routine is no longer a bottleneck.
950417	Fixed			(actually fixed quite some time ago)


---------------- Released 1.0b21 - 950410 - Below ------------------------------
950410	REPORT	LGP		TextInteracter_::OnCopyCommand () no longer causes scroll. I tested
		(0199)			Windows Notepad and TE in CW5 to assure this was the right thing.

950410	Fixed			fixed bug (soon to be bugs) with display of interline space
		(0197)			display (lvej/sbs mode).

950410	Fixed			Add more assertions for split characters...
		(0200)


---------------- Released 1.0b20 - 950329 - Below ------------------------------
950329	Fixed	LGP		Added new method MultiRowTextImager::CountRowDifference () - to
		(0196)			faciliate Bob-scrolling. Warning - this routine CAN BE SLOW.
						I hope it doesn't unduly slow down Bob-scrolling!!!

950329	FIXED	LGP		In TextInteractor::SetSelection () got rid of PC hack where we set
		(0195)			caret pos when not needed, and don't refresh selection positions
						if GetSelectionShown() false (slight flicker optimization I noticed
						in LVEJ show-matching-word).

950329	REPORT	Alec	At 9:58 AM 3/29/95, Glenn A. Akers wrote:
		(0196)			>Delete key doesn't delete text.
						>
						>Type something.  Select it.  Press delete key.
						>
						>Result: nothing happens.  Selected characters should be deleted.
						>
						>3/24/95 Lewis: fixed in b10.
						>
						>95.03.29 Alec: Not completely fixed.  Delete now works to erase selected
						>characters.  However, if the selection is an insertion point, it should
						>delete the character after the insertion point.  It does not.
950329	FIXED	LGP		I don't know how I tricked myself into believing this was already correct.
						But I did. I thought Delete key on PC was a CLEAR - not a ForwardDelete.
						Anyhow - I've now tested with NotePad - and confirmed you are right.
						Led now behaves as you indicate it should.

950328	REPORT	AlecWys	> LECSPR#6828
		(0194)			>I can reproduce it.  There is a subtlety of mouse movement required
						>which I hadn't realized before.  It is on Mac only.  
						>
						>To reproduce:
						>
						>Type "Hello xxxxxxxxxxxxxxxxxxxxxxxxxxxxx" where there are enough x's
						>so that they wrap onto the next line.  Click in the middle of the x's,
						>below & to the right of "Hello".  Drag into "Hello".  The highlight
						>follows correctly.  Then, while keeping the mouse button down, move to
						>the area to the right of "Hello" on the same line as Hello.  Then move
						>the mouse down to the next line.  
						>
						>Result: the highlight is not cleared from the area to the right of
						>Hello.  
950328	WORKING	LGP		I reproduced this.
950328	Fixed	LGP		Much harder than I expected. It turns out the basic problem existed on
						the PC too. But there we redraw more than we needed - compensating for
						the most obvious ramifications of the bug (cruft left on screen til
						dunk).

						The real issue is that we were drawing the EOR hilight at the wrong times.
						A big part of the confusion was because all the editors I had looked at didn't
						seem to agree on this point. So here is what I do now. I draw ALL characters
						in a row - with the only exceptions being the undefined character at the end
						of the last partitionelement, and NL characters. All others - including those
						used to wrap - are displayed.

						So this fix required changes to how we draw rows.
						MultiRowTextImager::GetCharLocationRowRelative () -
						which I originally suspected - was fine (except it needed to use GetImageRect instead
						of GetWindowRect in one place).

						Given the variety of ways in which editors approach this area - I'm afraid
						this will not be the last bug report I see in this area. But I do hope so!

950328	REPORT	LGP		Changed PC UpdateCaretPos code. Now TextInteracter instead has method InvalidateCaretPos()
		(0193)			and this just hides the caret and does a Refresh(). OnDraw() we call new UpdateCaretPos_ ()
						which does what the old one did - actually move the caret. This new approach COULD POSSIBLY
						FAIL in some wierd case where we don't get the update message (like the caret is invisible?).
						Though in that case it shouldn't matter since we we probably shouldn't see the caret. But I'm
						unsure how the IME will react to this. Should it be notified? Hopefully just hiding the caret
						is good enuf.
950328	Fixed

950328	REPORT	LGP		On some clipboard errors (like no text on paste, or bad characters) call
		(0192)			OnBadUserInput () (by default beeps).
950328	Fixed

950327	REPORT	LGP		In Led_TCL_::DoClick () and Led_MFC_::OnLButtonDown () don't call
		(0191)			Update() at the beginning. Wait til after we've set the Selection for
						the first time to avoid the possible flicker of displaying the old
						selection (comes up mainly when clicking between TE's that had
						some selection in them but all but one were deactivated and so
						not showing that selection. This simply avoids flicker in those
						cases.
950327	Fixed

950326	REPORT	LGP		Led_TCL::InsertTextPtr () should more accurately mimic the CEditText/
		(0188)			TEPaste () behavior. In particilar - insert BEFORE the selection, not
						replacing it.
950326	Fixed

950324	REPORT	LGP		Get rid of ChunkedArrayTextStore::Split () since never used and the
		(0187)			name was confusing MFC's overloading mechanism (in LVEJ SBS implementation).
950324	Fixed


---------------- Released 1.0b19 - 950323 - Below ------------------------------
950323	REPORT	LGP		Can sometimes get both selection shown and caret blinking on PC
		(0186)
950323	Fixed	LGP		Win32 API for Show/HideCaret is truely braindead. I had to hack a
						bit - but I THINK I may have found a better workaround than my
						previous one (which had the above problem).

950323	REPORT	Alec	On Windows - DELETE key doesn't have any effect. (LVEJ SPR #6941)
		(0185)
950323	Fixed	LGP		Add handler for this key in OnKeyDown () - we don't get OnChar () call.


---------------- Released 1.0b18 - 950322 - Below ------------------------------
941019	REPORT	LGP		SPEED (qualify)
		(0009)
950322	Close			We have more specific and helpful reports to track the speed problems
						now. See LedSPR#180, 0114, 0115, 0134, 0012, 0127, 155 - and probably more.

950322	REPORT	Glenn	Type one character into a buffer. Then try to select it with the mouse.
		(179)			You cannot.
950322	Working	LGP		I tried this and at first could reproduce it. Then I discovered the report
						isn't exactly right. Though it is difficult to select. It seems you must place
						the cursor unnaturally high to actually select the character.
950322	Fixed			Small error in MultiRowTextImager::GetCharAtLocationRowRelative (). Same bug
						as Led SPR # 172.

950317	REPORT	Glenn	(From LEC SPR#LED SPR 6062)
		(172)			Enter the text:
						Hello xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
						
						Type enough x's so that they get word-wrapped onto the next line and the
						buffer looks like this:
						
						Hello
						xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
						
						If you click in the region to the right of "Hello", the insertion point is
						put between the first & second x's, rather than after the 'o' in Hello,
						unless you are right next to the 'o' when you click.
						
						Also, if you click in the middle of the x's, and then drag to the area to
						the right of Hello, the selection goes from where you clicked to after the
						first x.  It should extend to before the first x.
950317	WORKING	LGP		Reproduced
950322	Fixed			See LedSPR# 179.

941201	REPORT	LGP		Do Invarient() in TextStore:: to check all valid SJIS
		(0109)			characters.
950322	Fixed

950317	Fixed	LGP		Renamed Led_PrevioustChar () ==> Led_PreviousChar ()
		(178)			

950322	fixed	LGP		Triple click on line of japanese on Mac can produce assert error.
		(177)			Add in AssertNotCharSplits here. And be careful about adding one etc.
						And rewrite using rowreferences for speed!

950322	fixed	LGP		Windows CanUndo() now returns false instead of asserting. This is so
		(176)			we can write code in calling programs that won't need to change when
						we implement undo. Similarly for Undo, and EmptyUndoBuffer messages.

950322	fixed	LGP		Cleaned up IME code. Now have Led_IME::Get () instead of gIME - though
		(175)			that name remains briefly for backwards compat. It will disapear soon.
						And got rid of some misc cruft - like typedefs for IME procptr types.

950321	fixed	LGP		Added assertions on get/set selection about not splitting characters
		(174)

950317	REPORT	BobSwer	When you first display TCL dialog with 4 Led TEs in it the caret appears
		(173)			drawn in each.
950317	Fixed	LGP		Fixed - see comment in Led_TCL::CTOR(). Set active=false. Don't fully
						understand why.

941028	REPORT	Jeremy	(LEC#6008)    a1      If you type too long of a line
		(0053)			(4130 chars. is "too long", 4060 is o.k.) said line disappears,
						although it still exists in "ghost" form, appearing momentarily
						anytime any user-generated event occurs.
						Resolve Jeremy  Lewis   3 Mac Quadra 840 AV   
						7.1+JLK 94.10.28  Medium  Editor  
941029	DEFER	LGP		This is a bug. The problem is with the calculation of font-metrics
						for a very long line of text. The TextWidth() call returns
						a value that wont fit in a short. I'm not 100% sure how
						I will eventually deal with this - but for the time being
						I will simply defer it. This problem only comes up (mainly comes
						up?) because we are not doing word-wrapping. So long as I deal with
						this properly in the word-wrapped version - which is the only
						one LVEJ needs - I believe this becomes a non-issue.
950317	Closed			I don't think this happens anymore. I cannot reproduce it anyhow.


---------------- Released 1.0b17 - 950316 - Below ------------------------------
950316	REPORT	LGP		Fixup the scrollbar code to do delays properly on scrolling so its
		(171)			easy to scroll by a single line, and we don't scroll too fast on
						fast machines.
950316	Fixed

950316	REPORT	LGP		Do Speed tweeks to Led based on profiling LVEJ reading workspace files.
		(170)		
950316	Fixed			(1)	In TextInteracter - tweek PreReplace () and PostReplace() todo
						little or nothing if UpdateMode == eNoUpdate (still must AdjustBounds).
						(2)	In ChunkedArrayTextStore - tweek Repace () for case where we
						insert 0 bytes or delete 0 bytes not to call other routine. And add
						tweek to Delete_ for case of zero bytes (this saves on UpdateMarkers code).
						(3)	AllHackMarkers() test was VERY expensive. By getting rid of test for
						if marker was a hack marker by virtual method call on Marker and instead
						using data field of OutStuff () - went from like 25% of the time to 0.1%.
						Big difference - in other words. As currently setup - we now waste extra
						4 bytes per OutStuff - and that leaves room for improvemnt. But probably
						still worth the space for that kind of speedup.

950228	REPORT	LGP		New ScrollSoMarkerPositionIsInTopRow () doesn't quite fix the accuracy problems
		(147)			in scrolling with the thumb. Work on this and see why. I think it may have todo
						with being off by a charpos or so in my calculations. See SPR #0078 - I think that
						is the same thing.
950316	Fixed			Trouble was really with the sbar/panorama/Led_TCL stuff - this routine
						was fine.

950228	REPORT	LGP		On PC - do shift/scale of SBAR values correctly - so we work around problem
		(148)			with scrolling through lots of text. Only query SBAR value when needed. Don't
						use it as a repository of proper position in the text (since it isn't accurate enough - only
						16bits). See SPR #0046.
950316	Fixed


---------------- Released 1.0b16 - 950314 - Below ------------------------------
950314	REPORT	LGP		Fix a couple of bugs/quirks with MultiRowTextImager having todo with 
		(169)			Side-by-Side mode in LVEJ. In particular, for hit testing - count the
						interline space as part of the last row of the line. Make
						DoSingleCharCursorEdit () virtual (so we can override in LVEJ sbs mode to
						treat arrow etc as skipping many chars).
950314	Fixed

950314	REPORT	LGP		Breakup MutlRowTextImager::Draw() into smaller peices for easier subclassing.
		(168)			In particular, it should be easier to just override the drawing of
						interline space, or rows without having to redo everything.
950314	Fixed

941120	REPORT	Jeremy	(LEC#6038)    a4      Mac:If you type a very long word,
		(0097)			it will disappear from the screen (32000 chars is o.k.,
						33000 chars makes line disappear.)Windows:If you type a
						very long line other anomalous behavior ensues, e.g.if you
						try to insert text, blue vertical lines appear that overlay
						the original text, and the inserted text isn't displayed.
						New     Jeremy  Lewis   3               Mac & Windows
						Mac Quadra 840av        Mac 7.1 +JLK    94.11.20  Unknown Editor
950129	WORKING	LGP		Gee- I don't actually know any words that long :-)
						But seriously - I tried to reproduce this - and at least now that
						I wrap words in the middle if need be to get them to fit - this
						takes forever! I only got up to 2000 character words before I lost
						patiences. I suspect I know what is wrong here - the code
						I use to measure lengths really only works with up to 32K coordinates.
						But it seems like the speed for dealing with such long words is more
						pressing. I'm going to ignore this for now - since the situation is
						so anamolous. It is a case of somebody trying to BREAK the editor
						rather than somebody trying to reasonably USE it.
950313	Fixed			I never actually reproduced any of the effects quoted in the bug
						report. And so I never fixed them. They may still exist. But the
						most important thing is that Led is now MUCH faster at doing
						these word-wraps of VERY-LONG-WORDS. It is still quite a lot slower
						than MS Word however.

950312	REPORT	LGP		Just noticed new bug I introduced. Autoscrolling off end or start of doc
		(167)			yeilds crash (fairly reproducible - on PowerPC NDBG off end, on 68K NDBG
						off start, and on Windows DBG off end. High priority to fix.
950312	Fixed			Fixed. Bug in MutilRowImager::GetEndOfRow() from fixes I did as part of
						SPRLed#160.


---------------- Released 1.0b15 - 950312 - Below ------------------------------
950312	REPORT	Glenn	(really several people reported this). Led is TOO SLOW in debug mode.
		(166)
950312	Fixed			Most of the slowdown was because of Asssert_Charnotsplit function in
						TextStore. Most of this was because of speed of
						TextStore_::GetStartOfLineContainingPosition (). I redid this and 
						TextStore_::GetEndOfLineContainingPosition () to read out bytes
						in chunks. That made these two dramaticly faster and so no Led can
						do this assertion much faster and is much more responsive in debug mode.

950312	REPORT	Bob		(really several people reported this). Double click on first word in
		(165)			buffer and crash. This was as a result of bad fix to LedSPR#157.
950312	Fixed			Now fixed properly (I hope).

950312	REPORT	LGP		Some more renames to avoid conflicts - BlockAllocated, NLToNative() etc,
		(164)			should be prefixed with Led_ til we have namespace support.
950312	Fixed			Fixed

950309	REPORT	LGP		Cleanup IME code. Very sloppy and kludgy.
		(163)			
950309	Fixed			Now greatly cleaned up.


950309	REPORT	LGP		Rename Array<T> to Led_Array<T> to avoid name conflicts with other packages.
		(162)			If desired to use someone elses array package - define (typedef?) yours to
						map to Led_Array<T>. These hacks will become obsolete when namespaces become
						widely available.
950309	Fixed	

950308	REPORT	LGP		MultiRowTextImager code assumes partition markers NL terminated (except
		(161)			last). Really this isn't a bug considering the name of the base class,
						but it is very inconvenient for use in LVEJ side-by-side mode.
950308	Fixed	LGP		Hopefully fixed - at least enough for sbs mode in LVEJ. Still to test....

950308	REPORT	LGP		MultiRowTextImager::Draw (), MultiRowTextImager::GetCharLocationRowRelative (),
		(160)			and MultiRowTextImager::GetCharAtLocationRowRelative () need to be fixed
						so that they take into account the fact that the total line height may be
						greater than the height of the interveneing rows. This is needed (desired) for
						LVEJ. Actually - it might be better to get rid of the totalpixelheight cache
						for the line, and instead have an InterLineHeight field of the object? Perhaps
						just an access method for the interlineheight, and keep the current data structures?
						To be used in LVEJ side-by-side mode. At this point, it might also make sense
						to think out a mechanism to increase inter-ROW distances?
950308	Fixed??			partly at least. Not neatly fixed... Should still add wrappers!


---------------- Released 1.0b14 - 950306 - Below ------------------------------
950305	REPORT	Jeremy	(LEC#6667). The first character of a line always gets included
		(157)			in the first word of a line on double click.
950305	WORKING	LGP		I reproduced this.
950306	Fixed			Small bug in TextStore::FindWordBreaks() portable implemenation
						where forloop should have been while >= startChar and was
						> startChar so we never looked at it (and saw it was a space).

950305	REPORT	Jeremy	(LEC#6692,LEC#6545). Control-Home does not bring the cursor to
		(158)			the beginning of the document. Control-End does not bring you
						to the end.
950306	Working	LGP		See email to EditorReview 950306. Here is part:

       					My first comment on this bug report is that there appears to be some
       					slight confusion about where the cursor is versus what is the top row
       					of text displayed in the window. I think the bug reporting is considering
       					these two items to be equivilent. But they need not be.

        				My second comment is that I don't understand exactly where the expectation
        				came from that things would work this way. I wish I had a more precise
        				spec/source for this behavior.

						What I have done - is I've used Apples SimpleText (and TeachText -
						they both turn out to agree) as the de-facto Mac GUI standard,
						and Windows Notepad under NT 3.5 as the de-facto windows standard.

						Here is what I have found:

						On Mac:

       					HOME,CTRL-HOME, and CLOVER-HOME all SCROLL to the top of the document
       					without changing the selection.
						END,CTRL-END, and CLOVER-END all SCROLL to the bottom of the document
						without changing the selection.

						On Windows NotePad:
						HOME goes to beginning of the current selected row.
						END goes to the end of the current selected row.
						(in both cases if the selection spans rows, the END of the selection
						is used).

						CTRL-HOME moves the selection to the beginning of the buffer, and scrolls to the top.
						CTRL-END moves the selection to the END of the buffer, and scrolls to the bottom.


						Led 1.0b13 (current release):
       					Led behaves EXACTLY as Mac TeachText/SimpleText on the Mac.
        				Under windows - all HOME/END variants are ignored.

        				My proposal is to leave the current Led behavior on the Mac alone. I believe
        				it is currect (at least with respect to this de-facto standard).
950306	Fixed	LGP		I believe I made this change to the windows version

950304	FIXED	LGP		Modified Array<T>::RemoveAt() to call SetSlotsAlloced(0) when
		(NoNum)			fNumItems goes to zero. Questionable choice, but may save alot
						of memory with very little performance cost. Worth a try...

950303	REPORT	RSwerd	At 4:25 PM 3/3/95, Bob Swerdlow wrote:
		(156)			>At 9:08 PM 3/3/95, Alec Wysoker wrote:
						>>Confidential Property of Language Engineering Corporation
						>>
						>>   >Date: Fri, 3 Mar 95 16:03:01 EST
						>>   >From: bob@hq.lec.com (Bob Swerdlow)
						>>   >
						>>   >
						>>   >
						>>   >--========================_18818318==_
						>>   >Content-Type: text/plain; charset="us-ascii"
						>>   >
						>>   >The problem in this SPR is that on reading a text file with invalid
						>>   >double-byte characters, led is getting an assertion error trying to adjust
						>>   >the display bounds.  The stack crawl is:
						>>   >
						>>
						>>PMJI, but I don't understand how LED could get an assertion failure in
						>>this case.  MTDoc::DoReadTextFile is supposed to fix all invalid chars
						>>before stuffing the text into LED.  Do LED & the UI disagree on what
						>>is valid & invalid?
						>
						>**** Well....
						>
						>The assertion failure IS in led.  It could be caused by a problem in the
						>handling of the string, but I don't see such a problem.
						>
						>The assertion, however, is in led's display code.  I think that it may be
						>trying to measure the window before it has been drawn, or something like
						>that.  I got so far down into led that I thought it would be simpler for
						>Lewis to debug this.  I make no claim as to what code needs changing.
950304	Fixed	LGP		A couple of bugs. One was that LedSupports isascii() was wrong. I wrote
						inline bool isascii (unsigned char c) { return (c <= 0x79); } instead
						of 0x7f. Also - my Led_IsValidMultiByteString () wasn't sufficiently
						restrictive. It needed to prohibit Non-Ascii bytes as at charstart
						if it isn't a LedByte. Actually - most of the problem was that the
						core SJIS validation routine had the same bug.
						
						I also added checking for bad SJIS to the testsuite program on
						reading in a file. Now it puts up an alert and fails to read files
						with bad characters.
950305	Fixed++			Alec said my fix for validating SJIS strings was WRONG. He said it
						excluded half/width katakana characters. So I revised the
						validation algorithm to use Led_IsValidSingleByte () which for now
						returns true always (Alec said this was OK for now - and its a defered
						bug LEDSPR#159 to fix). And I revised Led_&TextStore FindPrevChar()
						to not check for isascii on prev byte byte Led_IsLeadByte().


---------------- Released 1.0b13 - 950303 - Below ------------------------------
950301	REPORT	AWP		When you hit an ESC key - don't replace all the text, but simply ignore the
		(150)			character (PC Only - do as we currenly do on Mac). LEC#5400.
950303	Fixed			Ignore ESC in OnChar().

950302	REPORT	LGP		ScrollToSelection () (like from shift-arrowing thru text) causes
		(153)			infinite loop/hang when selection bigger than will fit in window.
950303	Fixed			Needed xtra break at end of routine in loop

950302	Fixed	LGP		Fixed erronious assertion which itself caused deref of NULL pointer.
		(154)			I asserted wrong marker ->GetRowCount () >= newTopRow in
						AdjustPotentialTopRowReferenceSoWholeWindowUsed ().

950302	FIXED	LGP		Better version# support in LedConfig.hh. Now you can use a #define'd
						version #qLed_FullVersion - and compare it with the results of
						MAKE_LED_FULL_VERSION() to test for particular versions.
						Changed the Led::kVersion to use this #define to build its version#.

950301	REPORT	LGP		Run Led through BoundsChecker NT and Win32s. Haven't done so in a while.
		(151)
950302	Fixed			Did so, and found one case where we had a selectObject () and forgot
						todo a SelectObject (oldFont) in WordWrappedTextImager(). This generated
						lots of (innocuous as it turns out) screams from BoundsChecker. I also
						added a bunch of ASSERT_VALID's on the font objects in that file.
						
						Running under win32s was a bit more of an adventure. It turned out there
						was a bug in BCHECKER32s where I had to comment out strcpy/strcat routines
						in ROUTINES.DAT - otherwise BCHECKER32s would crash. After fixing that -
						LedTestMFC passed BCHECK32s as well as under NT (that is - all the problems
						it flagged were solely MFC problems - or memleaks due to MSVC runtime or
						BlockAllocation).


---------------- Released 1.0b12 - 950301 - Below ------------------------------
941026	REPORT	LGP		On PC, scrolling in large files is slightly broken (really only
		(0046)			thumb position/tracking. The trouble is that MS appears to
						only support shorts even though the API says LONGS. If this is right- 
						we will have todo our own scaling code (like that which TCL does).
						All in all- I think this is pretty minor.
950301	Closed			DUP of #147.

941104	REPORT	Jeremy	(LEC#6029)    a2      Scroll box doesn't update correctly when paging
		(0078)			down some documents.  In a document of 144 lines, for example, if
						you scroll down as far as possible (with arrows, page down, or by
						dragging scroll box) the scroll box will stay about two widths
						above the bottm of the scroll bar even though you're at the end
						of the document.     New     Jeremy  Lewis   3       1
						IBM PC w. Windows       Dimension xps 466       Windows 3.1
						94.11.03        Unknown Editor  
950228	Working	LGP		Uses ScrollSoShowing when using the thumb for now...
950228	Closed			Now uses ScrollSoMarkerPositionIsInTopRow (). Works better - but still some
						slight problem at end of window. Close this report in favor of replacement
						#147 which tracks this one problem.

950212	REPORT	LGP		Either fix SetTopRowInWindow() to auto adjust so we deal with giving it a row
		(0138)			too big (now we must follow up call with AdjustBounds) or add new APi method
						that does this check and maybe doesn't scroll... Needed for LVEJ (cleanup hack calls
						to AdsjustBounds in MTPane when fixed...).
950228	Fixed

941130	REPORT	LGP		Put LED under RCS source control.
		(0105)
950301	Fixed			Led sources now under RCS. Still haven't put testsuites, docs,
						makefiles etc under RCS. See #149.

950228	Fixed	LGP		Added copyright/RCS standard header to Led source/header files. Soon going to
						put under RCS!!!

950228	Fixed	LGP		Updated LedConfig.h for MW compiler bugs fixed in 1.2.1c2 patch (950225apx).
						If you use older release of compiler - you can still define the bug workarounds.

950228	Fixed	LGP		Moved some code from MultiRowTextImager::ScrollByIfRoom_ ()
						to MultiRowTextImager::AdjustPotentialTopRowReferenceSoWholeWindowUsed ().
						This allowed me to rewrite MultiRowTextImager::ScrollSoShowing ()
						to use the new routine instead of ScrollByIfRoom(). This had the net
						effect of allowing me to scroll using the THUMB without wrapping
						interveneing text. THIS - in turn - sped up such scrolling DRAMATICLY.
						That was the last thing in Led that was noticably (problematicly) slow.
						Made a bunch of other related code cleanups / improvments. But that
						was the key noticable one.

950228	Fixed	LGP		Fixed case in WordWrappedTextImager::FindWrapPoint() where
						guessIdx could exceed rightGaurd (when we guessed in a pile
						of whitespace) and that triggered later assert in FindLineBreaks()
						call. Fix was to set guessIdx to Min (wordEnd, and rightGaurdIdx).
						This should have no effect on NODEBUG version and eliminate assert
						from DEBUG version.

941130	REPORT	LGP		Must Fix MultiRowTextImager code to not set
		(0104)			 fTopLinePartitionMarkerInWindow/fSubRowInTopLineInWindow.
						Instead vector through SetTopRowInWindow (RowReference),
						so we get 'hooked' in our later override to call
						::SendMessage(..., EN_VSCROLL,...)
950228	Fixed			Fixed some time ago.

950228	WrkArnd	LGP		In Led_MFC_: we SetSel() method call calls ::SendMessage (EM_SETSEL
						which never seems to make it to the callback under win32s.
						Woraround for now using direct call in Led_MFC_::SetSel() to
						callback. See Led SRP #146

950228	Fixed	LGP		In Led_TCL_ - don't blink caret when setwantsclicks() set false
						(noticed this cuz of alt xlate in LVEJ).

950227	Fixed	LGP		There was a VERY BAD memory leak on Mac/TCL version. Code inside
						of TCL (called when you did a backspace) called GetCharBefore()/
						GetCharAfter() which in-turn called GetTextHandle(). That I had implemented
						as allocating a new handle (not too much choice!). But CAbstractText::GetCharBefore
						and GetCharAfter() didn't free it!
						So my fix was two-fold. First - redo GetTextHandle to keep the handle in
						a static variable, and keep returning the same handle. This was its a one
						time leak - and not an on-going memory flush if anybody ever uses the API.
						Then I also got rid of use of the API in GetCharBefore()/GetCharAfter () by
						rewriting them to use Led APIs instead of the CharByte() crap. These should be
						much faster now as a result (of not allocing a handle with all the text). And no
						more memory leak because of either change.

950216	Fixed	LGP		Based on more input from Alec - instead of using explicity range
						for PrevChar() code - it turns out I can use Led_IsLeadByte(). Then
						the algorithm generalizes for ALL mbyte character sets which have at
						most two bytes. I don't know this is always true for MBYTE character sets,
						but I'm assuming so for now.


---------------- Released 1.0b11 - 950215 - Below ------------------------------
950215	Fixed	LGP		Fixed bug with Led_MFC_::OnMsgSetFont() - Must detach font from CFont - or
						we destroy our argument!!! Also - rewrote OnMsgGetFont() to avoid destroying
						the old HFONT pointer returned til the last possible moment.

950212	REPORT	LGP		See why global opt level III for CW5 PPC compiler makes selections screwy...
		(0136)
950215	NotRep			Doesn't seem to happen now. Keep an eye out though!

950212	REPORT	LGP		Add GetRowHeight (RowNumber/Reference) to Led (and then use it in LVEJ).
		(0142)
950215	Fixed

950215	REPORT	LGP		autoscrolling just 'stops' on the PC - we stop getting mousemoved events if the mouse
		(144)			stops moving. We must create a timer to wake us up occasionally to scroll some more.
950215	Fixed

950215	Fixed	LGP		caret caching bug I introced in the previous windows release. Caret
						used to sometimes disapear when swtiching windows, and especially changing fonts
						with multiple windows displayed.

950215	Fixed	LGP		Yet another attempt at fixing Kinsoku rule implementation. What can I say?

950215	Fixed	LGP		minor bugs and did more minor tweeks to PreviousChar () stuff based
						on advice from Alec Wysocker.

950215	Fixed	LGP		bug in Led_IsBolChar() - had a signed char / unsinged char comparison that
						screwed me up. Actually - the original code was wrong - I'm not quite sure
						why it worked on the PC.

950215	Fixed	LGP		cleanup some C++ warnings - by using Led_Distance more, and introducing Led_Size
						instead of point - in a few places - like CalcSegmentSize() etc...


---------------- Released 1.0b10 - 950214 - Below ------------------------------
941102	REPORT	LGP		Word wrap support could/should be optimized. Use guess
		(0064)			as to row length and bounce around that guess.
950212	Working			Mostly fixed. Use binary search now. But I should pick the
						pivot point more intelliegntly - not 1/2 in between, but
						something based on width values I have.
950214	Fixed

950212	REPORT	LGP		GET rid of workaroudn for qd. problem - just always use qd. instead of hack I did...
		(0137)
950214	Fixed			Really fixed earlier.

950212	REPORT	LGP		PortableGDI_TabbledTextOut is a bottleneck(at least on PC) according
		(0139)			to profiling, and it can be sped up by not calculating TabbedTextWidth
						in a secodn call - but basing it on results from TextOut - similarly
						for the Mac - though its less clear there how much it matters...
950214	Fixed			Actually - I did this earlier - it worked for the Mac - but I don't think
						it can be done for the PC - cuz TextOut () doesn't return the width of
						the text - only TabbedTextOut does. Don't you love the quirky windows
						SDK!!!

950212	REPORT	LGP		Condider re-implementing Led_FindPreviousCharcter, or perhaps TextStore::FindPrevChar()
		(0141)			using technique of going back and looking for first char which is first byte
						but not a second byte (or vice-versa).
950214	Fixed			Made a very big difference (in profile results - went from 13% to 0.3%).

950214	REPORT	Alan	Alan reported that the Kinsoku rule implementation is still badly screwed
						up.
950214	Fixed	LGP		HOPEFULLY fixed. Alec gave me some help with some characters I could use
						to reproduce the problem, and I did. I think i MAY have it fixed - or at
						least working better. Assume fixed til Alan tells me otherwise.		

950214	REPORT	ALAN	>6058:   Mostly fixed; lingering question concerns cursor appearing
		(0143)			>        as I-bar even when over the scroll bars.  Real bug, or artifact
						>        of the stand-alone applet?
950214	FIXED	LGP		Only process OnSetCursor () if nHitTest == HTCLIENT.

950213	FIXED	LGP		Bullet-proof to assure nobody can set a <= zero image width.


---------------- Released 1.0b9 - 950212 - Below ------------------------------
950126	REPORT	LGP		TextStore_::FindWordBreaks () doesn't properly interpret
		(0133)			the characters COMMA (between digits), PERIOD (before a digit),
						and APOSTROPHE (between letters and digits) as word-characters.
						(reason it should is alec@lec.com's 950111 email message/SPEC).
950212	FIXED

950126	REPORT	LGP		Optimize word-wrap bottleneck procedure (guessing - haven't
		(0132)			yet profiled) WordWrappedTextImager::FindWrapPoint () by
						doing a binary search - rather than starting at one char,
						and going til we get the whole line done.
950212	FIXED			(See #64 for exclusions)

941201	REPORT	LGP		Select All on large file, and then delete all the text	
		(0106)			got subtantially slower in the b1 release.
950212	FIXED

941201	REPORT	LGP		Check for bad SJIS on paste
		(0110)
950212	FIXED

950212	FIXED	LGP		Call ObscureCursor on Mac when typing. Seems wierd to me but Bob
						says you are supposed to, and testing a few example editors -
						he seems to be right!

950212	FIXED	LGP		Fix bug on PC where we always had same size caret (LEC#6059).

950212	FIXED	LGP		FIx bug on PC where we didn't show IBeam (LEC#6058)

950212	FIXED	LGP		Did SJIS bulletproffing (on paste, typing, and all APIs and did lots
						of internal consitnet checks.


950212	FIXED	LGP		Fixed few silly cases of word double click - like COMMA between digets etc..

950212	FIXED	LGP		put in LOTS of SJIS /DBCS bulletproffing, and as a result - found a few
						Led (splitting character) bugs. Also - found a couple in LVEJ as a result
						of better checking of my method input validity. Now on input (typing &
						Paste) when we get bad input - call OnUserBadInput() which by default
						does a sysbeep. On API calls to Led with bad chars - assert out.

950212	FIXED	LGP		Fixed bug in TextStore::FindLineBreaks() where I incorrectly handled
						Kinsoju rule - I hope (need 3 characters of context)

950212	FIXED	LGP		FIxed bug in TextStore/wordbreak support where I called isspace() without
						first checking isascii. This is what caused some jap words not to break
						on the right side of the screen (my higher level logic incorrectly
						thought they were spaces and just ate them up happily).

950212	FIXED	LGP		Based on condition compiles - removed a few calls
						to CollectAllMarkersInRange()  since they were only needed
						for style runs - which we don't currently support - and those calls
						are still expensive... The removeal didn't work on the PC - I think
						due to a compiler bug.
 
950212	FIXED	LGP		Rewrote WordWrappedTextImager::FindWrapPoint() so it
						does binary search instead of looking at every character.
						Preliminary profiling had this function plus thots it calls
						taking half the CPU. This also led be to the
						MutiRowPartiionMarker::DidUpdate() fix described below.

950212	FIXED	LGP		Fixed performance bug in MutiRowPartiionMarker::DidUpdate()
						where -  it would force a call to GetRowCount () every time
						the original partiion of all text read inwas split into sub-parts -
						EXTREMELY slow - instead - we check that the top subrow
						offset is valid in a new PostReplace() method for TextImagers... 
						This by itself made an ENOURMOUS difference in file open times!!!!


---------------- Released 1.0b8 - 950208 - Below ------------------------------

950208	NEWS	LGP		With the curent patch of CW5 (950203) you must always
						build the PowerPC version with SOME global optimization
						turned on. Otherwise - Led behaves very badly. See if
						Metrowerks people can fix this - else i must trace it down.

950208	FIXED	LGP		Fixed a couple more lingering multi-row type bugs - only
						triggered from within LVEJ. I'm afraid there may be more.

950208	FIXED	LGP		Did some performance tweeking for PC/Mac. Avoid calls
						to GDI routines by caching values like the font, and
						font metrics. Made about a 30% speedup. Used CW5 profiler
						and MSVC profilers.

950208	FIXED	LGP		Updated headers for LedConfig.h for new bugs fixed by
						CW people - CW patch 950203


---------------- Released 1.0b7 - 950207 - Below ------------------------------
950206	FIXED	LGP		Type a single line of text more than a page full (the
						window can be made small to test this). Then select from
						the third character to the end of the buffer with the mouse.
						Then type a 'b'. CRASH (or at least assert error!).
						There were several problems of this ilk I fixed in the
						MutlirowTextImager code. As far as I can tell these
						have been around for a while and nobody noticed them.
						But Sterl and I had seen some possibly related bugs
						in LVEJ - and Alec mentioned one today in email (about
						crash translating garbage like alt-trans.h). Some of
						the bugs which caused this problem could have resulted
						in my freeing garbage pointers - so they also could have
						caused the problem Sterl saw with realloc failing in the
						core (the OED lookup bug I think).


---------------- Released 1.0b6 - 950206 - Below ------------------------------
950206	FIXED	LGP		Fixed (I hope) bug with buffered read of double-byte SJIS
						characters. This was reported as LEC bug numbers: LEC#6056,
						LEC#6057, LVEJ#6652, LEC#6055.

950206	FIXED	LGP		A number of minor scrolling API functions to make LVEJ
						integration easier. Also wrapped try_, etc #defines in
						ifndefs.

950206	FIXED	LGP		TextImager_::SetSelection () override had forgot to call
						NotificationOf_SelectionChanged ()


---------------- Released 1.0b5 - 950202 - Below ------------------------------
950202	FIXED	LGP		Fixed problems with PowerPc build. Trouble was some TCL/SampleApp
						code crashed (gBartender->Enable(XXX)) when built with PowerPC
						alignment. No idea why - but 68K alignment seems to work much
						better. (NB: 68K-4byte also caused crash). Also - tracking was
						flakey until I cut back optimization to not include global optimizer.

950130	REPORT	LGP		Condider general new Notification API (see UserErrorNotify -
		(0135)			to ring bell I just did for sysbeep). Use this for handing
						updating scrollbars, etc... Is that simpler/better? Not sure?
950131	Working			I think I'll give this a try. Using this first just for
						scrolling and selection changes (thats what is used in LVEJ)
						promises to make things simpler (LVEJ code). And thats a good
						sign for the uility of the API in general.
						I also considerd if I should use callback functions or virtual
						function. Callback could be slighly more efficent if it was NULL
						we could avoid the call. But I think it will be rarely NULL,
						and this savings will be small compared to the other work in chaning
						the selction, or scrolling (moving all those bits).
						And the virtual function API is less likely to break (bad data - easier
						to debug control flow) and easier to handle chaining (subclassing
						rather than remmebring to keep ptrs).
950201	Fixed			Did this for set-selection, and for scrolling. Have yet to try
						it in LVEJ - should in the next day or so.

950131	FIXED	LGP		Running LVEJ on PC - I noticed dbl-click on Jap word caused
						assert error in SJIS_To_Kuten_Row(). I had transcribed
						Alecs code slightly incorrectly (singed vs unsigned) and that
						was a big mistake. Now fixed.

950131	FIXED	LGP		Building with LVEJ - I noticed that Led_MFC_::OnMsgSetSel()
						could get called with INT_MAX as an arg, and in that case
						the nStart++/nEnd++ could cause a wrap. Fix that.


---------------- Released 1.0b4 - 950130 - Below ------------------------------
941120	REPORT	Jeremy	(LEC#6037)    a4      Scrolling is messed up for lines
		(0096)			that are longer than a single window pane can hold.
						New     Jeremy  Lewis   3               Mac & Windows
						Mac Quadra 840av        Mac 7.1 +JLK    94.11.20
						Unknown Editor
						A two page line will scroll in a loop continuosly if
						you hold down the down scroll arrow - when it reaches
						the end of the document it scrolls back to the front.
						Also, if you're at the top of the doc and you click
						in the "page down" region of the scroll bar (anywhere
						between the scroll box and the down-scroll arrow)
						nothing happens (no page-down.).
950130	Fixed	LGP		There was a bug in MultiRowTextImager::ScrollByIfRoom_()
						in the code where it corrected for over-scrolling.

941205	REPORT	Alan	At 9:05 PM 12/4/94, Alan Pollack wrote:
		(0118)			>        **LEC REPSONE: There is another point which I think Lewis & 
						>        Alec agreed upon.  Led will provide a routine for peeking at the 
						>        DB char buffer so that LVEJ can do proper validation of byte which 
						>        come through TypeChar.
950129	NOTE			See #0111
950130	Fixed			Not really sure this is a good idea - but for now - I've done it.
						You can access protected member fMultiByteInputCharBuf.

941201	REPORT	LGP		Keep static buffer for SJIS IME typing (ala CV editor)
		(0111)
950129	NOTE			See #0118
950130	Fixed			

941019	REPORT	LGP		No autoscrolling.
		(0022)
941201	Note			See #0101,#0120
950130	Fixed

950125	REPORT	Jeremy	(LEC#6020)    a5      Use the mouse to make a
		(0120)			selection in a multi-page 
						file, extending it as far down as possible: The whole rest of the 
						document will be selected, and can't be deselected in the normal 
						fashion. Same for selecting "up" past top of screen.
						        Resolve Jeremy  Lewis   3       2       Mac & Windows
						        Quadra 840 AV   7.1+JLK 94.12.12        Unknown Editor
						        Led a5 update: whole document selection still happens, but 
						deselection is fine-maybe this 'bug' is a feature.
						Led 1.0b update: same.
950125	NOTE	LGP		(See #0022, #0101) - autoscrolling
950130	Fixed

941201	REPORT	Jeremy	Jeremy still thinks there are memory leaks. Try disabling
		(0116)			BlockAllocation (with conditional compile - may want to
						allow that anyhow as a feature), and running BoundsChecker
						on PC.
		NOTE	LGP		(See #1021)
950128	Working			Added flag to disable blockallocation, and run under boundschecker
						and found one PC-specific memrory leak (reading files) and fixed
						it. Nothing like what he said existed. But - I have noticed
						a new - serious memory leak on the Mac. Perhaps this is what he
						is refering to? The fact that it doesn't exist on the PC should be
						a big hint!
950130	Fixed	LGP		When I did the TCL patch from CW5, it screwed up on operator::delete
						(because I had edited that function). It never actually called free()!
						Leading - not surprisingly - to a BIG memory leak!

950125	REPORT	Jeremy	(LEC#6022) a5  Memory leakage: Opening and closing a 1MB file 3 
		(0121)			times leaks enough memory that the 4th time isn't allowed. (This 
						under a 6MB partition)
						After you try opening too large a file (resulting in an error message), 
						no memory at all remains available for opening files.   Resolve
						        Jeremy  Lewis   3       2       Mac     Quadra 840av    7.1+JLK
						        94.12.02        Unknown Editor  Led 1.0b - Opening and closing 
						a 712K file twice (sometimes once) leaks enough memory that the 
						third (sometimes second) time isn't allowed.
						(Under 4096K partition.)
		NOTE	LGP		(See #0116)
950130	Fixed	LGP		Try this test. Open a smaller file (say 1/2Meg). Close it. Drop into
						macsbug and say 'ht' (heap total). Then do so again. And again. And
						tell me if you see any trending. You might see slight fluctuations -
						that is not a bug. I do not believe you will see any trending.

941104	REPORT	Jeremy	(LEC#6023) a1  Selecting a word by double-clicking
		(0073)			doesn't work right; one has to release the mouse button
						after the second click to get a word selected.  Thus selecting
						a range of words is impossible. In version 1.0a2, double-clicking
						works better, but dragging after double clicking to get range
						of words is not allowed.     New     Jeremy  Lewis   3       3
						Mac     Quadra 840av    7.1+JLK 94.11.03        Unknown Editor
		DUPL			(LEC#6049)    a2      Double click and drag should select in word-sized 
						chunks.  "Word" is dinfed here to match what is considered by double 
						click to be a word. (Not Kinsoku rule)  Resolve Alan    Lewis   3
						       Mac     Mac Quadra 840av        Mac 7.1 +JLK    94.12.29
950129	WORKING	LGP		
950129	Fixed	LGP

941205	REPORT	Alan	At 9:05 PM 12/4/94, Alan Pollack wrote:
		(0117)			>1. If there are multiple spaces between two words which get a wrap between
						>them, the second word necessarily appears at the beginning of the next line
						>- but how to display remaining whitespace?
						>
						>        **LEC RESPONSE: Our bottom line is that when the insertion point 
						>        is in the whitespace which cannot be seen that the visible insertion 
						>        point should be visible at the extreme right margin.  This is what 
						>        Teachtext & Notepad do.  Otherwise, the insertion point disappears 
						>        completely, and this can be disconcerting.
950129	Fixed			DUP of 0123

941104	REPORT	Jeremy	(LEC#6025)    a2      Word wrapping doesn't wrap words that are
		(0075)			longer than window-length (as opposed to Word, for example, which
						wraps words that are longer than window-length.)  Both Mac and
						WIndows versions have this bug.      New     Jeremy  Lewis   3
						1       Mac     Quadra 840 av   7.1 + JLK       94.11.03
						Minor   Editor  
950129	Fixed	LGP		Fixed WordWrappedTextImager::FindWrapPoint() to wrap in the middle
						of words if need be, and fixed MultiRowTextImager::Draw () -
						it used to drop the last characer in a row cuz that used to
						always be a space or NL.

950125	REPORT	Jeremy	(LEC#6044) a2 When insertion point is in whitespace that cannot be 
		(0123)			seen, the insertion point still should be visible at extreme right margin 
						(Lewis #0117)   Resolve Alan    Lewis   3     Mac     Mac 
						Quadra 840av    Mac 7.1 +JLK    94.12.29        Unknown Editor  
950129	WORKING	LGP		Started working on. I think I have fixed mac code in TextInteracter_::DrawCaret ()
						and all I need todo is a similar hack in the MFC::UpdateCaretPos()
						code (btw - why is that in Led_MFC and this in TextInteracter?).
						But in doing so, I noticed a serious bug in word-wrap - seems that spaces
						are allowed to be broken (one at a time?) and so we break a string of
						spaces.
950129	Fixed			FIxed this - and the problem with spaces not being "eaten" at end of line.

941120	REPORT	Jeremy	(LEC#6042)    a4      Shift-selecting with arrow keys
		(0101)			allows cursor to travel out of the window.
						New     Jeremy  Lewis   0 NEC PC w. Windows
						Dimension xps 466V      Mac 7.1 +JLK    94.11.20
						Unknown Editor  
941201	Note	LGP		This is closely related to #0022
950125	Note	LGP		Maybe different problem than #0022.
950128	Fixed			Major cleanup of ScrollSoShowing() and related code.


---------------- Released 1.0b3 - 950127 - Below ------------------------------
950125	REPORT	Jeremy	(LEC#6045) a2      Word wrapping should follow Kinsoku rule on both 
		(0124)			platforms, which is what CV editor on Windows already does.
						        Resolve Alan    Lewis   3     Mac     Mac Quadra 840av
						        Mac 7.1 +JLK    94.12.29        Unknown Editor  
950127	Fixed			See #0131

941201	REPORT	LGP		Double click on last letter of a word only selects
		(0107)			the last letter instead of the whole egnlish word
						(when built for SJIS)
950127	Fixed			See #0131

950125	REPORT	Jeremy	(LEC#6046) a2      On double click, selection should behave per detailed 
		(0125)			spec provided by Alec   Resolve Alan    Lewis   3       
						        Mac     Mac Quadra 840av        Mac 7.1 +JLK    94.12.29
						        Unknown Editor  
950127	NOTE	LGP		Note that this spec differs from how Apples TE works (try double-clicking
						on a a string of $$$$ for example).
950127	Fixed			See #0131

941201	REPORT	LGP		Must use new next/char/word stuff in word-wrap code.
		(0108)			Perhaps rewrite TextStore:: stuff to vector exsting
						code further to routine that works on a single buffer
						line of text, and copy out whole line into that.
						Might even be faster (cuz fewer calls to CopyOut?).
						And certainly faster in critical Word_Wrap case.
950127	Fixed			See #0131

950126	REPORT	LGP		Utilize new TextStore::FindWordBreaks()/FindLineBreaks()
		(0131)			code in word-wrap and all word-oriented activities - and
						then delete the old, obsolete APIs.
						Then - move code from those obsolete API implementations
						(Kinsoko rule etc) into these routines, and write a portable
						implemntation. Also do new LEC definition for portable word
						breaks for ASCII and SJIS (as in their spec).
						(See #0108, #0107, #0125, #0124)
950126	WORKING	LGP		1/2 done. Now I have word-wrap and all the word navigation
						routines vectoring through here, and the old APIs deleted.
						I still must do portable implementations of the FindLine/Word
						Breaks() routines (based on code in old API implemenations,
						and Alecs new spec). Cannot test on PC til I do that.
950127	Fixed			This does have some slight deviations from Alec's spec, and
						that spec also deviates slightly form what Apples TE does. But-
						with the possible exception of the Japanese specific stuff - I'm
						pretty sure this is pretty close - and worth testing. Actually the 
						Jap stuff is also worth testing - I just haven't done any of my
						own.

950125	REPORT	LGP		Be sure I can easily build LedTest-native (ie using native
		(0119)			editor - minor problems have crept in.
950125	Working			Fixed on Mac. Still must do PC.
960127	Fixed

950125	REPORT	Jeremy	(LEC#6031) a2      Arrow key modifiers don't conform to 
		(0122)			Apple/Windows standards. (See long desc.)
						        Resolve Jeremy  Lewis   3       1       Mac     Quadra 840 
						av      7.1 + JLK       94.11.15        Unknown Editor  Apple conventions
						                
						       			Alone          W/Option          W/Shift or Command

						 Left Arrow		Left 1 char    Left 1 word       To beg of line
						 Right Arrow    Right 1 char   Right 1 word      To end of line
						 Up Arrow       Up 1 line      To start of par.  To top of wind.
						 Down Arrow     Down 1 line    To end of par.    To bott. of window
						
						(As listed in Mac. Human Interface Guidelines)
						Word for Mac uses the Command-Arrow conventions, but not the 
						Option-Arrow ones.

						Windows conventions
						                
						       			Alone          W/Ctrl
						
						 Left Arrow     Left 1 char    Left 1 word            
						 Right Arrow    Right 1 char   Right 1 word          
						 Up Arrow       Up 1 line      To start of par.    
						 Down Arrow     Down 1 line    To end of par.     
						(As listed in  "The Windows Interface: An Application Design Guide")
						The Windows Notepad uses the left/right Ctrl-Key conventions.
950125	NOTE	LGP		This spec is ambiguous (for Mac only) in case both option and
						shift (or command) keys are pressed.
						Actually, after a little experimentation - I'm pretty sure you have
						this wrong for the case of SHIFT-KEY on Mac. I think that affects
						whether you extend selection or not and has nothing todo with
						word vs to start/end of line.
						Also note that these instructions are ambiguous with respect to
						the case where the start end end selection differ!
950125	WORKING			Mostly implemented. All of Mac interacter code and Led_TCL code
						is working. Must finish hooking into Led_MFC.
						Got rid of MoveSelectionByIfRoom () - instead added
						DoSingleCharCursorEdit () and ComputeRelativePosition ().
						Other than doing MFC stuff - other thing todo is fix the BY-WORD
						code. This is a BIG-DEAL cuz I must think out basic naming and API
						for word-based routines in light of LECs somewhat strange choice
						for differnt word defintions in word-break and SOME word optioerations
						like double-click. Not clear which word-options should use what
						defintion, nor which to call which.
950126	WORKING			Fixed Windows version (except for common-code by-word problems).
950126	Fixed			Using new TextStore::FindWordBreaks() code. Still must write portable
						implementation of these routines - and fix bugs in the Mac-only-native
						one. But all the high level code is now tested.


---------------- Released 1.0b2 - 950125 - Below ------------------------------
941020	REPORT	LGP		Build for PowerPC. Not sure if I should use the Symantec PPC
		(0024)			stuff or wait for Metrowerks. Ask Bob.
950125	Fixed			Ported to Metrowerks CW5

941204	CHANGE	LGP		Made a few changes to integrate with LVEJ, and fix bugs
  and					that turned up running from LVEJ, including allowing
 earlier				args to SetSel() for windows (needed for AltXlate),
						and vertical pixel count scrolling (as opposed to
						character offset scrolling) support for TCL wrappers
						(controlled by #if qLed_UseCharOffsetsForTCLScrollAPI.
						Broke config stuff out into LedConfig.hh.


---------------- Released 1.0b1 - 941201 - Below ------------------------------
941120	REPORT	Jeremy	(LEC#6041)    a4      Display of lines that take up the
		(0100)			full window length gets a little skunged up if you move
						the windows around at all.  Odd-colored underlines appear
						towards the ends of lines. New     Jeremy  Lewis   3
						IBM PC w. Windows       Dimension xps 466V
						Mac 7.1 +JLK    94.11.20        Unknown Editor  
941201	Closed	LGP		I think this is a DUP of #0094. Anyhow - I assume this
						is fixed, unless I hear otherwise.

941120	REPORT	Jeremy	(LEC#6034)    a3      Ghost lines in longline documents
		(0094)			bug is gone, but when typing in a long word, cursor
						appears about 8 spaces in front of where you are typing,
						and you don't see the last eight characters you typed.
						(See also SPR 6038)      New     Jeremy  Lewis 3 Mac
						Mac Quadra 840av Mac 7.1 + JLK   94.11.20 Unknown Editor  
941201	Fixed	LGP		I think this was fixed quite a while ago (maybe a4?).

941120	REPORT	Jeremy	(LEC#6040)    a4      Selecting more than one line creates
		(0099)			white lines underneath all selected text.
						New     Jeremy  Lewis   3 IBM PC w. Windows Mac Quadra 840av
						Mac 7.1 +JLK    94.11.20        Unknown Editor  
941201	Fixed	LGP		The trouble was with differences between mac FillRect() coords
						and windows Rectangle() coords in filling in the leading.

941102	REPORT	LGP		Word wrap support doesn't support SJIS. See the charlesview
		(0065)			editor for this kind of support.
941201	Closed			Better bug description/plan in new bug #0108

941104	REPORT	Jeremy	(LEC#6022)    a1      Memory leakage: Opening and closing a
		(0072)			1MB file 3 times leaks enough memory that the 4th time isn't
						allowed. (This under a 6MB partition)After you try opening
						too large a file (resulting in an error message), no memory
						at all remains available for opening files.          New
						Jeremy  Lewis   3       2       Mac     Quadra 840av
						7.1+JLK 94.11.03        Unknown Editor
941129	Update			See #0014
941201	Fixed	LGP		At least the memory leak is fixed under normal circumstances.
						It may be there are leaks under failure modes.

941019	REPORT	LGP		ChunkedArray implementation of hierarchical markers is a mess.
		(0013)			It is functional - but I don't think I ever delete
						HACK_Markers (mem leak), and I cerntainly don't do a good job of
						maintaining balance. Also - I should tweek average breadth
						of tree for best performance.
941129	Update			See #0014
941201	Fixed			Memory leaks fixed, and better balancing. But still could use
						work - see new bug #0115

941019	REPORT	LGP		Switch to having class Marker having a UserLong field instead
		(0014)			of an explicit array to facilitate different represenations.
						Then re-use this UserLong to point to an info struct
						containing the child list, and possibly a parent pointer.
						Once THIS is done - we can redo the markers (at least for
						ChunkedArray) as being position relative to parent. This
						will save quite a bit of time on update of all the markers
						as the user types.
941129	Update			See #0072, #0013
941201	Fixed			All of this done but the parent-relative markers, and that is
						now bug #0114.


941019	REPORT	LGP		No font support.
		(0020)
941201	Fixed			Added concept of DefaultFont, which applies nicely to case
						where we have one font per buffer. But generalizes when we
						support runs: font of a char = default style + accumulated
						effect of text style markers overlapping that character.
						All that is fully implemented now is the single-font-per
						buffer stuff - and that is good enough for 1.0 (unless
						I hear otherwise).

941019	REPORT	LGP		No SJIS support
		(0008)
941201	Fixed			Added SJIS support. Still some bugs and holes (SPR #0107,
						#0108, #0109, #0110, #0111, #0112.


---------------- Released 1.0a6 - 941129 - Below ------------------------------
941116	REPORT	LGP		On Led_MFC, add support for LineIndex, GetSel(int&,,)
		(0088)			SelSel(int,,,)GetFirstVisibleLine(), LineFromChar(). Look in 
						MFC docs/headers to see if there are others I am missing...
941129	Fixed			Nearly all the APIs that make sense are now supported. We have
						wrappers on SendMessage() - just like MFC's, plus protected
						hook functions which recieve the messages, and perform the
						commands. This gives us MAXIMUM compatability with other code
						which might use the SendMessage() interface.
						Some minor things like Undo () that we might someday support
						are left un-implemented, and things which make no sense
						like GetHandle() are not present in the wrapper API, and
						generate assert errors in the message callback hooks.

941116	REPORT	LGP		For windows - do a Create() override like CV (iff CEdit does the same).
		(0093)			
941129	Fixed			

941120	REPORT	Jeremy	(LEC#6043)    a4      Word-wrapping doesn't work with
		(0102)			the "bullet" character (option-8).Type any word, then
						type a word of bullets that goes beyond the end of the
						window; at this point the bullet-word should wrap,
						but doesn't.   New     Jeremy  Lewis   3
						Mac     Mac Quadra 840av        Mac 7.1 +JLK
						94.11.20        Unknown Editor  
941129	NotRep	LGP		I tried this on a Mac with a6x (should be the same)
						and I couldn't reproduce the problem. Perhaps I've
						misunderstood, or maybe there is some critical information
						you are missing?
						The current definition of words for word-wrapping purposes
						is weak - it is space-delimited non-space characters. So
						bullets are treated like 'x's for example. Actually that
						isn't so bad, but punctuation should probably be handled
						differently. Anyhow, I think this is good enough for
						Led 1.0, and that doesn't appear to be your complaint anyhow.

941120	REPORT	Jeremy	(LEC#6039)    a4      Selecting a word by double-clicking
		(0098)			on it selects an extra space at the end of the word.
						New     Jeremy  Lewis   3               IBM PC w. Windows
						Dimension xps 466V      Mac 7.1 +JLK 94.11.20 Unknown Editor
941129	NotRepr	LGP		I cannot reporoduce this on either the Mac or Windows. They
						both seem to work fine in this respect.

941120	REPORT	Jeremy	(LEC#6036)    a3      Leda3 Win doesn't open files >1M :
		(0095)			Error message "Unexpected file format".      New
						Jeremy  Lewis   3               IBM PC w. Windows
						Compaq Pro/Linea 4/50   Mac 7.1 +JLK    94.11.20
						Unknown Editor  
941129	NotABug	LGP		This is almost certainly just a poor error message
						in the sample program reflecting the fact that there
						isn't enough memory to open the given file. Try the
						same file under NT, or with more virtual memory available.
						(and there is no need to worry about the quality of
						error messages in MFC - I don't think...)

941116	REPORT	LGP		Test SimpleLed (haven't i a while) and make Led refer to
		(0092)			ChunkedArray implementation.
941129	Fixed			Tested and works fine. Then made Led use Chunked array implementation
						by default.

941116	REPORT	LGP		Must deal better with Led::DoInit() stuff. Better if it can be
		(0091)			avoided altogherer.
941129	Fixed			There was really nothing that needed to be done about this.
						The two problems were a misunderstanding about an MFC
						bug (CFrameWindow::OnCreateClient() cast to CWnd*) and
						order of base class construction was wrong - must do
						Concrete TextStore class first! This coding style is
						still somewhat ugly. And I did come up with one alternative
						which was to use a bool arg in CTOR to say if we need to
						do DoInit_() here. But thats even uglier, and doesn't appear
						to be needed.

941116	REPORT	LGP		Search Led for GetStartOfLine() calls. They probably should be
		(0089)			GetStartOfRow(). There is at least one in Led_TCL!!! 
941129	Fixed			The one in Led_TCL was the only one.

941116	REPORT	LGP		At  1:28 PM 11/14/94 -0500, jeremy wrote:
		(0090)			>Led A4 bug
						>Scrolling is messed up for lines that are longer than a single window pane
						>can hold.  A two page line will scroll in a loop continuosly if you hold
						>down the down scroll arrow - when it reaches the end of the document it
						>scrolls back to the front.  Maybe you meant for this to happen - I actually
						>think it is kind of a neat feature - but if so it seems like maybe you
						>should scroll in a loop whether or not you're in a long line.  Also, if
						>you're at the top of the doc and you click in the "page down" region of the
						>scroll bar (anywhere between the scroll box and the down-scroll arrow)
						>nothing happens (no page-down.) -jr
						This is broken for both Mac and Windows he said in later email.
941128	Closed	LGP		Dup of #0096


---------------- Released 1.0a5 - 941117 - Below ------------------------------
941111	Add		LGP		Merged in some fixes/new code from sterl to handle
						Binning of markers. He did version for TextStore_
						and one specialized for ChunkedArrayTextStore.
						The code is still not ready for prime-time cuz of
						problems with array stuff with MFC - so just
						need to rewrite using linked lists.

941116	MISC	LGP		Quite a few renamings (mostly in LedSupport) to aid
						in integration with LVEJ.
						

---------------- Released 1.0a4 - 941110 - Below ------------------------------
941110	REPORT	LGP		Add AcquireTablet/ReleaseTablet/TabletChanged() mechanism.
		(0086)
941110	Fixed

941020	REPORT	LGP		Tabs don't work.
		(0027)
941021	EXPAND			Tabs currently treated as spaces in display (don't use
						Tabbed text out. Trouble is tab support is REAL WORK on mac.
941102	Working			Tabs now work on the PC - using GetTabbedExtent() and
						TabbedTextOut(). They assume tabstops at a width
						of 8*avecharwidth. Still have done nothing for the Mac
						tabstops.
941110	Fixed			In the process of writting the tabstop support for the Mac
						I realized the windows support was broken. The trouble
						was that with Windows- the API routine GetTabbedTextExtent()
						doesn't have a paramater (as TabbedTextOut () does) to specify
						the tabstop alignment.
						So - since I had to write all this for the Mac anyhow - I just
						use my portable code for both platforms instead of using
						GetTabbedTextExtent/TabbedTextOut().

941102	REPORT	LGP		Optimize TextInteracter_::SelectWholeLineAfter()
		(0067)			to not use row #'s (at least if possible).
941109	Fixed			Override in concrete subclasses where we know
						we are inheritting from MutliRowTextImager and use
						RowReference support...

941019	REPORT	LGP		Up and down arrows don't work.
		(0003)
941025	Working			Basicly fixed - but the current implemenation uses
						row numbers, and is therefore very inefficient.
						Later - as time permits, rewrite using rleative stuff.
941109	Fixed

941101	REPORT	LGP		Current ScrollTo() code (for Led_TCL) uses 
		(0061)			CalculateRowDeltaFromCharDeltaFromTopOfWindow (). The way this
						is currenrtly implemented - if you drag the scrollbar
						to the bottom of the window - it forces a full word-wrap
						all the way to the end of the window. This MUST BE FIXED
						SOON!
941108	Working			Did MOST of this. Added ScrollSoShowing() etc. routines.
						But haven't USED them yet. Use that in preference to
						CalculateRowDeltaFromCharDeltaFromTopOfWindow().
						Need to add updatemode to ScrollSoShowing ().
941109	Fixed			As of this point - word wrapping is REALLY ONLY DONE
						ON AN AS NEEDED BASIS!!! This makes window resizes
						DRAMATICALLY faster (compared with scrolled to the
						end and window resize on large document).

941108	REPORT	LGP		In a multirow line, backup deleting text (with that row being
		(0085)			near the top, but other lines above the top) and we get assert
						error in nodebug PC version. FIrst problem is I don't see how
						we got an assert error in the NODEBUG PC version. But more
						importantly - this code needs to be fixed. My bug report is vague
						and I didn't try reproducing it. But something along these lines
						broke.
941108	Working			Reproduced, but not well. Maybe has todo with
						MultiRowTextImager::Coalece() when we delete curtop marker.
						Need to redisplay in that case?? Reproduced misdisplay
						in that case anyhow... But no crash/assert. Fix then Keep trying...
941109	Fixed			I never saw any crash (on mac anyhow). But I fixed a bug in
						GetWindowLocationRowRef() and in TextImager::PostReplace()
						which were causing the screen not to update properly
						when we changed #rows and weren't on top row. Assume the
						rest fixed til I see another report.

941105	REPORT	LGP		Wrote new GetNextRowReference/GetPreviousRowReference/
		(0081)			GetIthRowReferenceFromHere () routines for
						MultiRowTextImager. Used them a bit, but need to use them
						more to cleanup existing row-based code, and simplify it.
						Also - I think there are still a few bugs/edge conditions
						with this row/code that need fixing. When I've cleaned things
						up, go through and do my own testing for a while to be
						sure we get no bugs/crashes etc.
941108	Fixed			Not sure this is perfect, but much better, and assume OK
						til I see specific bug reports.

941102	REPORT	LGP		Consider adding RowPosition object containg Marker* and
		(0069)			size_t subRow. This might make alot of the code that
						currently uses rowNumbers much simpler (and more
						efficeint). Just overload all row# calls with these!
						Needs more thought - but could be a big simplication in
						converting rest of code to not using absolute row#s.
941108	Fixed			Not sure this is perfect, but much better, and assume OK
						til I see specific bug reports.


941102	REPORT	LGP		Multiline support in class MultiRowTextImager is still
		(0063)			incomplete and buggy. See bug #0021.
941108	Fixed			Not sure this is perfect, but much better, and assume OK
						til I see specific bug reports.


---------------- Released 1.0a3 - 941108 - Below ------------------------------
941102	REPORT	LGP		Calls to GetPixelHeight() in MultiRowTextImager.cpp
		(0068)			need to be scrutinized. Probably most should be using
						row calls.
941108	Fixed			One was wrong - and the cause of bug#0071 (weird mosaics
						part).

941108	REPORT	LGP		Under some circumstances, selecting the EOR (end of row)
		(0083)			in word-wrapped rows doesn't extend the selection all
						the way to the right.
941108	Fixed			Turns out the problem only occurred on the last line.
						A special case test I had for the last row only looked
						for nextPtr == NULL. That was fine for single-row-per-line
						imager, but WRONG in multiline case.

941104	REPORT	Jeremy	(LEC#6020)    a1      Use the mouse to make a selection
		(0071)			in a multi-page file, extending it as far down as possible:
						The whole rest of the document will be selected, and can't be
						deselected in the normal fashion.  Weird mosaics of selected
						and deselected regions are possible. The whole-document selection
						also happens in Windows.    New     Jeremy  Lewis   3       2 
						Mac     Quadra 840 AV   7.1+JLK 94.11.03        Unknown Editor
941108	Working	LGP		I believe there may be several things going on here at once.
						The first - and main one I believe was an easy bug. I interpretted
						dragging the mouse of of the text as being off the bottom.
						This is fine if we drag down - but when we drag up, it should
						be interpretted as selecting up to the first character. That is
						fixed.
						The rest of the problems (weird mosaics) I believe is not totally
						accurate. I think what happens is that the screen momemntarily
						displays the weird mosaics, but then settles down to displaying
						the right thing (at least that was all I could reproduce). I still
						havent fixed that however. And I haven't tried any of this under
						windows yet.
941108	Fixed			I fixed the "weird mosaics" problem - at least all that I could
						reproduce. But I found no problem UNIQUE to Windows.

941020	REPORT	LGP		TextImager::FindPartionMarkerAfterHeight (Coordinate) function
		(0025)			should keep cache. Invalidate cache on DidUpdate calls by
						following backlinks from cache item and seeing if we hit
						item in the cache updated. Then use cache as start point
						in looking up item by height - adding and subtracting heights
						of adjacent items.
941108	Closed			This routine is obsolete.

941025	REPORT	LGP		Annoying flash (especailly noticable on lhs of screen) with
		(0043)			large selection - just after tracking. It seems we get an
						xtra redisplay - and a flashy one at that. Shouldn't have the
						xtra redsisplay - but also curious why the funny effect
						on the lhs of the screen...
941108	Fixed	LGP		See #0054.

941028	REPORT	Jeremy	(LEC#6009)    a1      Position the mouse somewhere and
		(0054)			hold down the button: the cursor will appear at (more
						or less) the desired location but will blink repeatedly
						as long as you hold the button down.
						Resolve Jeremy  Lewis   3 Mac Quadra 840 AV
						7.1+JLK 94.10.28        Minor   Editor  
941029	WORKING	LGP		I was able to reproduce this. But it is minor, and low
						priority to fix.
941108	Fixed			Wow. Much harder than I thought. There were several bugs
						here. One was just cleanups to the Mac DoClick() code
						where needed for new UpdateMode support. Another was
						a serious coordinate problem in call to ValidRect()
						in Led_TCL_::Update(RECT) code (not 100% this is fixed
						by I hope so). That problem was also responsable for
						Bug# 0043. And also, must redraw caret after Led_TCL_::Draw()
						call since that could obliterate caret.

941028	REPORT	Jeremy	(LEC#6011)    a1      Placement of cursor between two
		(0055)			characters is a little hard.If you click the mouse anywhere
						to the left (or right) of an imaginary line between two
						adjacent characters, the cursor is placed before the left
						(or right) character.  Easier (and used in MS Word, for
						example) is having the imaginary line in the middle of
						each character, such that clicking to right of the center
						of a character places the cursor on the right of the char.
						New     Jeremy  Lewis   3 Mac     Quadra 840 AV
						7.1+JLK 94.10.28        Minor   Editor  
941029	Working	LGP		Very good characterization! I had a sense that I hadn't
						done this right - it didn't quite "feel" right to me.
						But I wasn't sure EXACTLY what was wrong, and what was
						the right way to fix this. As you say this is minor, but
						I'll try to get to it soon.
941107	Fixed	LGP		Fixed. Added new routine TextInteracter_::GetCharAtClickLocation().

941104	REPORT	Jeremy	(LEC#6030)    a2      Cursor disappears offscreen when you <cr>
		(0079)			at the next-to-last line.     New     Jeremy  Lewis   3       1
						IBM PC w. Windows       Dimension xps 466       Windows 3.1
						94.11.03        Unknown Editor  
941104	Fixed	LGP		Wrong calculation of GetEndOfWindow().

941102	REPORT	LGP		Sterl mailed me some changes (speed tweeks mostly).
		(0066)			Review and incorporate.
941104	Fixed			I reviewed the changes. There were some code-vectoring
						changes where I had already done similar, or a better job
						in the TextImager code. Then - there was a tweek to the
						GetCharLocation() code (manually subsetting the existing
						marker list instead of recomputing). This makes the code
						more complex, without clearly addressing a bottleneck. Sterl:
						If you have any reason to believe this is a bottleneck,
						I'll apply the patch. Otherwise - I doubt its worth it.
						Then - there were two other interesting patches. One was
						to keep track of the max line length. But since LEC only needs
						word-wrapped text, I've been ignoring the code for
						SingleRowPerLine class of Imager, which is the only place
						this code would matter. I'll do something similar when I
						get to supporting non-word wrapped text for a future release.
						Then - the MOST interesting and useful change was for mimimizing
						redraw in the Replace code. I couldn't use what Sterl had
						done directly - since it didn't take into account
						word-wrapping. But I did something substantially similar,
						but generalized to take into account multiple rows.
						This implemenation of mine still has room for improvement
						(see bug # 0080), but is pretty good as-is.

941104	REPORT	Jeremy	(LEC#6028)    a2      Pasting doesn't work at all on Windows version.
		(0077)			New     Jeremy  Lewis   3       1       IBM PC w. Windows
						Dimension xps 466       Windows 3.1     94.11.03        Unknown Editor
941104	Working	LGP		It sure used to! I tried though and you are right. Should be something
						simple.
941104	Fixed			Actually, the problem had nothing todo with pasting. The bug
						was that a COPY would fail silently if there wasn't already
						text on the clipboard. So really - I was lucky to reproduce the
						problem.

941104	REPORT	Jeremy	(LEC#6026)    a2      Try to open an open document  and an
		(0076)			error message appears.(Couldn't complete the last comand
						beacuase of a Mac OS error (result code -49))
						New     Jeremy  Lewis   3       1       Mac     Quadra 840 av
						7.1 + JLK       94.11.03        Unknown Editor  
941104	NOTABUG	LGP		This is merely a poor error message from TCL/the demo app. All
						that is going on is that the file is already opened. Not a bug.
						(NB: E2J already does its own reading code and probably already
						generates a better error message in this case).


---------------- Released 1.0a2 - 941102 - Below ------------------------------
941019	REPORT	LGP		No word wrap support.
		(0006)
941102	Fixed			Word wrapping now works. But it isn't as efficient as
						it could be, and doesn't support SJIS word-wrapping yet.
						See new bug reports 0064, and 0065.

941019	REPORT	LGP		Need new class between TextImager and SimpleTextImager -
		(0021)			LineBasedImager. Then make new class StyledTextImager off
						of LineBasedImager. The idea is to move all code common to
						the StyledTextImager and the SimpleTextImager to a common
						class. Not sure where to put the word-wrapping code - but
						probably into LineBasedImager.
941030	Working			Right in the middle of this change. Got most everything
						switched over to this setup - but need quite a bit of
						cleaning up..
941031	Working			Nearly completed this. In the middle of rewritting
						the Multiline imager to pay attention to the RowCount
						and rowstarts fields of the new partition elt defined
						for this class. Hacked it up so it treats 50 chars as
						being the line-wrap point. Once this works well - it will
						be straight-forward to modify the wordwrap class to
						just wrap lines according to word boundaries instead.
941102	Fixed			Creating these intermediate classes is done. And
						SimpleTextImager is gone. SingleRowMonoFontTextImager
						is currently unsupported- and is being left for a new
						release (see new bug #0062). Also - there is still some
						debugging which needs to be done on the class
						MultiRowTextImager (See bug #0063). Since this report
						contains so much cruft which is done, it is being closed
						in favor of new reports 0062, 0063.

941028	REPORT	LGP		Move hilight enabled flags from interacter to Imager, and pay
		(0049)			attention to it in the draw. Also - there may be some logical
						clipping bug. Once the above works, try disabling it
						by NOT calling SetSelectionShown() in the activate/deactive
						code - and instead leave it alone. Then do window dunking
						and see if things redraw properly.
941029	Working	LGP		Moved enable flags, and got working properly redisplay of
						highilght on/off based on activation. Also, fixed serious,
						but slight miscalculation of what needs drawing in the logical
						clipping in SimpleTextImager::Draw ().

941027	REPORT	LGP		Add text normalizing fucntion/methods - in addition to
		(0047)			fixing NL2Normal etc for PC. When reading ANY text files
						(pc or mac) on ANY platform, we should do the right thing.
						Also at this time - we can strip bad characters depending on
						our character set.
941028	Working			Added and used on PC. Be sure used on Mac before closing.
941029	Fixed.			For TCL - I used NormalizeTextToNL() in
						Led_TCL::InsertTextPtr().

941027	REPORT	LGP		Add cut/copy/paste support to MFC sample app, and implement
		(0048)			PC Cut/Paste support in Led.
941028	Fixed			Basically done. But should go back and bullet-proof
						the failure modes. But this is really a general problem
						throughout the editor - and not specific to Cut/Copy/Paste.

941028	REPORT	Jeremy	(LEC#6018)    a1      Size limits on file size, no. of lines,
		(0060)			and length of lines aren't to "specs."  File - 968KB is o.k.,
						1088 is too big (file won't open)No. of lines - 31900 lines
						is o.k., 47500 is too big (file won't open)length of line: 4060 
						chars is o.k., 4130 is too big ("ghost line" bug happens)
						All of these are for LED newly opened, with 5MB memory
						allocated to it. The limits get shorter for "used" LED, e.g.
						if you open a big file, then close it, the max size file will
						be less than 968 KB.
						Resolve Jeremy  Lewis   3 Mac     Quadra 840 AV
						7.1+JLK 94.10.28        Unknown Editor  
941029	Closed	LGP		As I've covered in email with Alan - this really doesn't
						constitute a well defined BUG. There are several issues here,
						and they should be teased appart and dealt with in separate bug
						reports. The issue of memory leaks is coverd - at least 
						partly - in bug #0013. There may be more - but until I adress
						that - it isn't worth looking for more. The issue of the
						"ghost" bug is addressed in #0053. And the other - general
						capacity issues need to be clarified and re-submitted. Really
						what is needed is a characterization of current memory
						overhead, and a statement of what kind of overhead you feel
						is acceptable.

941028	REPORT	Jeremy	(LEC#6014)    a1      The "page up/down" mode of scroll-bar
		(0057)			use (clicking in the gray area above or below the scroll box)
						scrolls 10 lines, regardless of window size.
						Resolve Jeremy  Lewis   3 Mac Quadra 840 AV
						7.1+JLK 94.10.28        Unknown Editor  
941029	Fixed	LGP		This was fixed earlier for the a2 release.

941028	REPORT	Jeremy	(LEC#6003)    a1      Test:Test Simple Buffer option
		(0050)			doesn't seem to do anything.     Resolve Jeremy  Lewis   3
						Mac     Quadra 840 AV   7.1+JLK 94.10.28        Unknown Editor
941029	Fixed	LGP		This isn't really a bug. It was an early debugging hook
		(0051)			I used. The reason it didn't APPEAR to do anything
						was becasue it worked! (otherwise it would have asserted
						out). Anyhow, this debugging hook no loner appears
						to be needed, so its been removed.

941019	REPORT	LGP		On PC, blinking caret unimplemented.
		(0017)
941027	Fixed.			All but trivial to implement, but for a compiler
						bug - which took the better part of a day to diagnose,
						and workaround. The problem is with virtual bases
						and the this pointer fixup calling up class hierarchy.
						This bug has me very worried, and I dearly hope my
						workaround REALLY works around all the cases where this
						breaks. Actually - I'm surprised. I expected this sort of
						crap of Symantec - but their compiler actually worked.

941019	REPORT	LGP		On PC, most of keyboard navigation doesn't work.
		(0015)
941026	Fixed			Perhaps not all - but at least most PC key navigation
						works. I probably need to find some decent spec on
						exactly what you are SUPPOSED to be able to do.

941019	REPORT	LGP		On PC, scrolling doesn't work.
		(0016)
941024	WORKING			Actually now most - if not all of scrolling works, but there
						still is no scrollbar. Faked scrolling using arrow keys to
						test.
941026	Fixed

941024	REPORT	LGP		In word-wrap mode - what is the differnece between end of
		(0045)			one ROW and start of next ROW - in terms of how we
						keep track of selection positions!!! Important for how
						we display EOL marker - and how we calculate what to
						redisplay - and most importantly - can the user have
						a blinking caret at each of the two different positions/???
						How does MAC TE handle this???
941025	NoProb			I tried PC Notepad, MS Word, and Sterl tried WriteNow. ALL of
						them just don't let you ever get the cursor after the last
						char in a row by using the cursor keys. WriteNow doesn't
						let you under ANY cirsumstances. Word/MSNotePad allow the
						caret to be in one or the other of the ambiguous positions
						but they treat it as SOLELY DISPLAY- and any operations
						(like forward or back cursor editing) are treated as if
						the positions are the same. I won't bother with the fancy
						display that MS Notepad and MSWord do allowing the caret
						to be displayed in either spot. Perhaps for some future
						release. But I don't think it is too big a deal todo. Just
						keep a bool in textinteracter saying current caret drawn
						in first or second pos. Affects NOTHING ELSE - I believe.

941025	REPORT	LGP		Maybe need to override TCL HitSamePart.
		(0044)
941025	Fixed			Return same part if we are same character hit.

941022	REPORT	LGP		Support triple-click selecting whole line (at least on mac)
		(0036)			
941025	Fixed

941019	REPORT	LGP		Double clicking on words is buggy. Needs work on defining what
		(0007)			is a word. And also we sometimes (at EOL I think) get one xtra
						character.
941025	Fixed			Trouble wasn't selecting too far. Actually - there was a
						display error when we selected last char - also displayed
						last NL selected, plus other related bugs.
						What WAS really wrong here is is I had been skipping all white
						space before looking for non-whitespace characters. This
						meant that if you clicked on an empty line, it would jump
						down over a bunch of lines to the first word.
						I'm not quite sure what the right answer is here - but for now
						just not bothing with that sort of thing seems to work pretty
						well. We'll have to revisit the question of word boundaries
						at some point.

941021	REPORT	LGP		Selecting last character in a row, and then selecting the
		(0029)			newline doesn't IMMEDIATELY update the inversion for the
						end of the line. I think the bug is in the
						Redraw (size_t,size_t,UpdateMode) call in dealing with this
						special case.
941025	Working			Mostly fixed. But still have trouble selecting last char
						in line (not NL) selects NL at end... I think the trouble
						is only with the draw code now...
941025	Fixed

941019	REPORT	LGP		Shift-Select with keyboard doesn't extend selection
		(0005)
941025	Fixed

941019	REPORT	LGP		Shift-Select with mouse doesn't extend selection
		(0004)
941024	Working			Mostly done. Perhaps all - but then there may be some new
						bug. Try clicking at top of page (in 64K testfile). Then
						scroll to the bottom and SHIFT-CLICK at bottom of 64K
						testfile to extend selection. Seems like it really
						extends the selection - but that the display
						doesn't update properly.
941025	Fixed			The latter problem was with
						SimpleTextImager::GetCharWindowLocation() not giving the same
						answer for "not in the window" for the above and below cases.

941024	REPORT	Simone	Type in a few lines of text. Make a multiline selection.
		(0041)			Type Control-C (not Clover-C). Then say undo. The undo
						erases all the text, rather than undoing the typing.
						Simone thinks that under one circumstance it actually crashed
						but she cannot reproduce this.
		Fixed.	LGP		The trouble was the TCL typing task stuff gets screwed
						up if you don't call SelectionChanged() when the
						current selection point changes. Instead of hooking my
						SetSelection () method - I did what TCL did - and just
						modified DoClick() to call SelectionChanged(). I suspect
						that things will get screwed up if the user changes
						the selection some other way without calling this method -
						but I'm just trying to do as well as the CEditText support.
						At least for now...


---------------- Released 1.0a1 - 941024 - Below ------------------------------
941023	REPORT	LGP		Ignore WM_ERASEBKGRND on PC - produces flicker.
		(0040)			
941024	Fixed

941022	REPORT	LGP		Do trap-caching on Mac to improve draw speed
		(0037)			
941024	Fixed

941021	REPORT	LGP		Get rid of SetTotalRowsInWindow() method - and instead make
		(0033)			Get method do the calculation (and perhaps cache). This isn't
						too well thought out. But be sure to think it all out well.
941022	Fixed			Method no longer exists. Setting private var done in
						AdjustBounds () now.

941019	REPORT	LGP		Drag selections are too flickery (I think the trouble is
		(0010)			Led_TCL_::Update() doing an unneeded erase - call DrawAll()
						instead.
941022	Fixed			Did logical clipping in SimpleImager::Draw() and fixed
						Led_TCL::UpdateWindow... to draw immediately without going
						through CWindow::Update () which does and erase (and caused
						flicker).

941022	REPORT	LGP		On Cut/Clear/Paste - do an immediateupdate. I tried breifly
		(0039)			and doing so didn't seem to work right - investigate later...
941022	Fixed			Just forgot the refresh before the update!

941022	REPORT	LGP		Must fix Led_TCL_::GetFrameSpan() to not use
		(0038)			GetMarkerPositionOfStartOfWindow () etc insetead of SLOW
						GetTopRowInWindow () approach
		Fixed			.

941021	REPORT	LGP		Move Led_TCL::AdjustBounds () call into common gui code -
		(0034)			either Imager or Interacter. And then override in TCL
						to update scrollbars. Then we probably dont need to
						call it anymore from TCL support code...
941022	Fixed			Done.

941021	REPORT	LGP		In nodebug build of ChunkedArray version - read in TestFile
		(0035)			and cut first 5 or 6 lines. Then just kept pasting and
						pasting. After 4 or 5 pastes, I saw some garbage, and then
						hung.
941022	WORKING			ChunkedArrayTextStore::InsertAfter_ () logic is WRONG
						for splitting insertedt text across blocks in some cases.
						Now we try to insert into a block, and if there is no
						room, then we continue with the next. But the trouble is
						that if we INSERTED into a block, leaving some characters
						at the end unmolested, and then skip those and continue
						inserting into the next - we end up with hashed text! FIX
						IMMEDIATELY!!!
941022	Fixed			Boy - this was even more painful to fix than I expected.
						And whats worse - when I did - I discovered YET ANOTHER 2
						BUGs with ChunkedArrayTextStore::DeleteAfter_ (). The first
						was that we used (after-1) instead of chunkIdx.fOffset-1
						as argument to the chunk itself. I'm surprised it took so
						long to notice this! But further - I found the code didn't
						work right when we had zero length chunks. Not so surprising
						since I'd never intended to allow deleting from zero length
						chunks! So - I just did a little bit of the coalesce fix -
						deleting zero-length chunks.

941021	REPORT	LGP		With SimpleLed (no chunks needed) simply add newline
		(0032)			and then delete it - get assert error.
		Fixed			This turned out to be a side-effect of new scrolling
						code. I kept around a marker for the current top-of-window
						line. But when that marker got deleted - we were left
						with a marker hanging around (current top of window) which
						had been deleted. I wasn't so sure as to EXACTLY which new
						top to pick when we've deleted the current top. But I did
						what I could - and it seems to work better. Though I might
						imaginably need to revisit this.

941019	REPORT	LGP		Open TestFile using Led with Chunked arrays. Typing new
		(0002)			characters in the middle tends to produce assertion
						errors. Investigate.
941021	Fixed			Trouble was firstly in ChunkedArrayTextStore::Split ()
						code. It was off by one in the ptr it used to initialize
						new chunk. This got bytes off by one - and so we sometimes
						got the characteristic Assert(buf[i-1]==\n) when we checked
						that our partitionmarkers still correctly marked lines.
						The next trouble was more subtle - in
						ChunkedArrayTextStore::TextChunk::DeleteAfter () we copied
						too many bytes in the memmove() sliding things down. This could
						have (under some circumstances) resulted in a memory overwrite.

941021	REPORT	LGP		ScrollToSelection () doesn't work.
		(0031)			
		WORKING			Now it works - more or less - but it uses SetTopRowInWIndow().
						Must still be rewritten to utilize non-row# based Window
						based functions for speed (otherwise forces textmetrics to
						be calced for all lines above).
		Fixed			Rewritten to use the window-relative codings. Not too sure
						I got the GUI behavior right - that is where we go when we
						scroll (move the cursor to top of window or where?) But works
						OK for now.

941020	REPORT	LGP		Longer term optimization. Do Draw and keep track of scrolled to
		(0026)			position as partion marker/row, rather than screen offset.
						That way - we can avoid accurate calculation of word-wrapping
						for lines ABOVE what we are displaying. This goes hand-in-hand
						with optimization trick I discussed yesterday with LEC - where
						we adjust scrollbar based on character offsets rather than
						row offsets.
941021	Fixed			Fixed as part of #0001.

941021	REPORT	LGP		Dragging thumb with new scrolling strategy calls (indirectly)
		(0030)			SetTopWindowRow() which forces row calculations!!! Speed
						problem. And also sometimes seems to cause assert errors.
941021	Fixed			No somputes (from delta characters) appropriate delta lines
						and then vectors through the delta line code.

941019	REPORT	LGP		As of the latest version of the tweeks to TextImager::Draw () -
		(0001)			I sometimes display text in the wrong place. This is very
						important to fix immediately. Also, a serious and more
						long-standing bug has been when scrolling happens - it is a
						pixel at a time. And the exposed area isn't redisplayed. But -
						when I (used to - now this too is broken) scroll by page -
						things redisplayed properly.
		WORKING			Made lots of progress on this and mostly fixed. Still needs a
						little more banging however.
941020	WORKING			In light of #0026- I decided to redesign/reimplement the
						entire scrolling strategty to one based on char offset
						for first row on screen. This is a big job and has lots of
						implications - but solving this now is for the best - I hope!
941021	WORKING			Mostly fixed/rewritten. But some cleanups/debugging still
						needed. In particular - scrollbar behavior flakey.
941021	Fixed			Jumpiness of thumb is slightly disconcerting on small files,
						but I believe the behavior is consistent with the design.
						Anyhow - good enough to run it up the flagpole and see if
						anyone salutes.

// For gnuemacs:
// Local Variables: ***
// mode:text ***
// tab-width:4 ***
// End: ***
