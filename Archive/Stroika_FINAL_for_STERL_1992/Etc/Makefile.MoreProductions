# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Makefile.MoreProductions,v 1.5 1992/11/25 03:14:18 lewis Exp $
# 
# 
#  Description:
# 
# 		MPW Make production rules. This file is appened by MakeMake to all
#	automatically generated Stroika makefiles. It specifies how to build
#	Stroika objects from the environment flags defined in the Config files.
#
# 
#  TODO:
# 		
# 
#  Notes:
# 
# 
#	Changes:
#		$Log: Makefile.MoreProductions,v $
#		Revision 1.5  1992/11/25  03:14:18  lewis
#		Lots of changes to support Template stuff with recursive makes.
#
#		Revision 1.4  1992/07/06  18:08:05  lewis
#		Fix .l.o rule for case where LoadStatement="".
#
#		Revision 1.3  1992/07/02  23:36:17  lewis
#		Fixed minor bug in .l rule.
#
#		Revision 1.2  1992/07/02  02:36:13  lewis
#		Added Standard File Header.
#		Support setting LoadStatement to "" so we can shutoff loaddump in parts,
#		and have it still work.
#		Better quoting. Get rid of temporary variable SrcFile to make slightly faster.
#
#
# 

.cc.o		Ä		.cc
	Echo Compiling "{default}.cc"
	# If loaddump is one by default, then use the "{LoadStatement}"
	if ("{UseLoadDump}") 
		Set LDF "{LoadStatement}"
	End
	# If loaddump is off, or there was no "{LoadStatement}", then use the CPPDefines
	if (Not "{LDF}") 
		Set LDF  "{CPPDefines}"
	End
	if ("{ModelFar}" == "0") 
		Set ModelFarFlags "-s {default}"
	End
	if ("{UseTemplates}" == "0") 
		Set ExtraIncludes "{TmplGenDir}";
	Else
		Set ExtraIncludes "";
	End
	{CPlus} ¶
		{LDF}  ¶
		-i "{ExtraIncludes}" ¶
		{CFlags} ¶
		{COptions} ¶
		{ModelFarFlags} ¶
		-o "{targDir}{default}.cc.o" ¶
		"{depDir}{default}.cc"


.l.cc.o		Ä		.l
	Echo Compiling {default}.l
	flex {FlexOptions} "{depDir}{default}.l"
	duplicate -y lex.yy.c "{targDir}{default}.l.cc"
	delete -y lex.yy.c
	# If loaddump is one by default, then use the "{LoadStatement}"
	if ("{UseLoadDump}") 
		Set LDF "{LoadStatement}"
	End
	# If loaddump is off, or there was no "{LoadStatement}", then use the CPPDefines
	if (Not "{LDF}") 
		Set LDF  "{CPPDefines}"
	End
	if ("{ModelFar}" == "0") 
		Set ModelFarFlags "-s {default}"
	End
	if ("{UseTemplates}" == "0") 
		Set ExtraIncludes "{TmplGenDir}";
	Else
		Set ExtraIncludes "";
	End
	{CPlus} ¶
		{LDF}  ¶
		-i "{ExtraIncludes}" ¶
		{CFlags} ¶
		{COptions} ¶
		{ModelFarFlags} ¶
		-i "{FlexIncludesDirectory}" ¶
		-o "{targDir}{default}.l.cc.o" ¶
		"{targDir}{default}.l.cc"


.c.o		Ä		.c
	Echo Compiling {default}
	execute "{BuildFlags}"
	if ("{ModelFar}" == "0") 
		Set ModelFarFlags "-s {default}"
	End
	{C} {CFlags} {COptions} {ModelFarFlags} -o {targDir}{default}.c.o "{depDir}{default}.c"



tags	Ä {SRCS}
	execute "{BuildFlags}"
	if ("{UseTags}") 
#		ctags -local -update -cplusplus {CPPDefines} {COptions} {NewerDeps}
		ctags -update -cplusplus {CPPDefines} {COptions} {NewerDeps}
	End;



#
## Default template rules incase Templates.make not created yet...
#
Templates.make	ÄÄ	TemplatesList
	if ("{UseTemplates}" == "0") 
		echo Making Templates.make From TemplatesList;
		NewFolder "{TmplGenDir}" ·· Dev:Null || Set Status 0;
		{GenMake} {GenMakeFlags} -b "{Stroika_src}"Etc:CollectionInfo TemplatesList Templates.make;
		{DoTFileMapMove}
		echo Made Templates.make From TemplatesList;
	End;

TemplateClean	ÄÄ	Templates.make FORCE
	if ("{UseTemplates}" == "0") 
		Make -f Templates.make -d GenDir="{TmplGenDir}" -d TmplGenDir="{TmplGenDir}" -d TemplateHeaders="{TemplateHeaders}" ¶
			-d TemplateSources="{TemplateSources}" -d Includes="{Includes} {TemplateIncludes}" -d Etc="{Etc}" -d ObjDir="{ObjDir}" TemplateClean > tmp.make.2;
		tmp.make.2;
		delete tmp.make.2 ·· Dev:Null || Set Status 0;
	End;

TemplateClobber	ÄÄ	Templates.make FORCE
	if ("{UseTemplates}" == "0") 
		Make -f Templates.make -d GenDir="{TmplGenDir}" -d TmplGenDir="{TmplGenDir}" -d TemplateHeaders="{TemplateHeaders}" ¶
			-d TemplateSources="{TemplateSources}"  -d Includes="{Includes} {TemplateIncludes}" -d Etc="{Etc}" -d ObjDir="{ObjDir}" TemplateClobber > tmp.make.2;
		tmp.make.2;
		delete tmp.make.2 ·· Dev:Null || Set Status 0;
	End;

{ObjDir}TemplatesLib.o	ÄÄ	Templates.make FORCE
	if ("{UseTemplates}" == "0") 
		echo Making TemplatesLib.o via Templates.make;
		Make -f Templates.make -d GenDir="{TmplGenDir}" -d TmplGenDir="{TmplGenDir}" -d TemplateHeaders="{TemplateHeaders}"  ¶
			-d TemplateSources="{TemplateSources}"  -d Includes="{Includes} {TemplateIncludes}" -d Etc="{Etc}" -d ObjDir="{ObjDir}" ¶
				 -d Lib="{Lib}"  -d LibFlags="{LibFlags}" -d COptions="{COptions}" {ObjDir}TemplatesLib.o > tmp.make.2;
		tmp.make.2;
		delete tmp.make.2 ·· Dev:Null || Set Status 0;
		echo Made TemplatesLib.o via Templates.make;
	End;


FORCE	Ä
	echo ·· Dev:Null;




# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
