# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Config.bc,v 1.11 1992/12/07 12:26:44 lewis Exp $
# 
# Description:
#		Configuration flags for Stroika build
#		Included in Makefile
#
#		These flags are specially setup for compilation on a PC with
#		Borland C++/Turbo C++ 3.1.
#
# TODO:
#
#
# Notes:
#
#
# Changes:
#		$Log: Config.bc,v $
#		Revision 1.11  1992/12/07  12:26:44  lewis
#		Put quotes around QWindows, and QWindowsNT.
#		Use -V option in hopes in might solve the BCC linker problem-
#		it didn't.
#		Add if OS=Windows then append -W to CPlusFlags.
#
#		Revision 1.10  1992/12/07  10:50:30  lewis
#		Set Debug=0, Optimze=-)2, and StackOverFlowCheck= since these values
#		seem to work better - and were about to do a release. Test more thorougly
#		other values afterwards.
#
#		Revision 1.9  1992/12/07  08:58:41  lewis
#		Borland make doesn't like quotes(") - got rid of them.
#		Also, Model must be lower case.
#		Got rid of /E flag to tLib, which was supposed to add extended
#		dictionary, but it just gave warnings that it failed to do so
#		because of COMDEFS.
#
#		Revision 1.8  1992/12/05  17:46:10  lewis
#		Lots of cleanups. Main thing is tried to support Windows conditionally
#		and started depending alot on !if, etc. I hope all this works with nmake,
#		and MSC 7.x
#
#		Revision 1.7  1992/12/04  20:16:46  lewis
#		Use precompiled headers by default (since it seems to work just
#		fine).
#		Turn on stack overflow check by default - were having such problems,
#		now, and this is probably a good idea anyhow.
#		Shutoff warnings about inlines not expanded.
#
#		Revision 1.6  1992/12/03  19:24:35  lewis
#		Lots and lots of cleanups, and documenting configuration flags.
#		Try out precompiled headers, and more...
#
#		Revision 1.5  1992/11/25  03:12:57  lewis
#		Comment on what flags mean, a bit.
#		Get rid of UseTemplates support.
#
#		Revision 1.3  1992/07/16  05:53:12  lewis
#		Lots of cleanups/improvements including attempts to get del
#		to shut up, separate variable Model to say what memory model
#		where building for, and separate variable for UseTemplates
#		so we can shut this off if we wish (since it dont work!!!).
#
# 		Revision 1.2  1992/07/14  20:36:59  lewis
# 		Minor cleanups.
#
#
#
#


#
# Debug can be either 0 or 1, depending on whether or not you want the Stroika
# define qDebug on or off.  This configuration flag primarily indicates whether
# or not to expand asserts, and invariants.  But it also sometimes triggers the
# saving of extra information in structures, so it is important that ALL .obj's
# combined from both the Stroika library and the application agree on the
# value of this define...
# Debug=0
# Debug=1
Debug=0


#
# The -v flag tells the Borland C++/Turbo C++ 3.1 compiler whether or not to
# save symbolic information for running a source level debugger.  While the
# use of a source level debugger may be nice, it dramatically slows down
# lib, link time, and makes applications several times larger.  This can be
# turned on/off on a module by module (.o file by .o file) basis.
# DashVFlag= 		; DON'T save symbolics
# DashVFlag=-v		; SAVE symbolics
DashVFlag=


#
# Debugging in the presence of inline expansion can be extremely difficult, so
# if DashVFlag is set, inline expansion should be off, and vice-versa.
# InlineExpansion=			; on iff debugging off, and vice-versa
# InlineExpansion=-vi		; inlines on (for real performance)
# InlineExpansion=-vi-		; inlines off (better for debugging)
#
InlineExpansion=


#
#		Precompiled headers should speed up compiles. I leave it
#	off for now since it is untested, and I've run into troubles
#	with it before (in BCC and other compilers).
#
#UsePrecompiledHeaders=-H		;	on
#UsePrecompiledHeaders=-H=FRED	;	on, using file FRED
#UsePrecompiledHeaders=-H-		;	off
#UsePrecompiledHeaders=			;	off
UsePrecompiledHeaders=-H


#
#	What kind of link map would you like to generate?
#
#GenerateMap=/x		;	off
#GenerateMap=			;	short map
#GenerateMap=/m		;	long map
#GenerateMap=/s		;	very long map
GenerateMap=/s


#
#		Compile for Windows, or DOS. The libraries are not compatable because
#	of calls to either setjmp/longjmp, or Catch()/Throw(). There may be other
#	troubles too.
#
#DOS
#Windows
#WindowsNT
OS="DOS"


#
#		Use fastcall parameter passing. This means pass vars by register.
#	Should generate better code - not sure what compatability issues
#	may be.
#
#		<< Best to leave this off since for some reason its confusing bcc??? >>
#FastCall="-pr"			;	on
#FastCall="-pr -po"		;	on + fast pass of this...
#FastCall=				;	off
FastCall=


#
# This is a set of flags that will be handed to the compiler to indicate what
# optimization is to be done.  Since optimizing takes time, I generally set
# this to -Od (disable all optimizations), and go all out when I am shipping 
# code.
#OptimizeFlag=-O2
#OptimizeFlag=-Od
OptimizeFlag=-O2


#
# Select which model you are compiling for - l for lange, m for medium...
# Only tried l so far.
#
#Model=s		; small
#Model=m		; medium
#Model=l		; large
Model=l


#
#		Checks for stack overflow. This would seem to be a good idea,
#	when debugging, but since I have no idea how to set my stacksize,
#	and a tString barfs with stack overflow, I thouht I'd try it without.
#
#StackOverflowCheck=		;	no
#StackOverflowCheck=-N		;	yes
StackOverflowCheck=
!if		($(OS)=="Windows") && StackOverflowCheck=="-N"
!error "Warning: cannot use StackOverflowCheck with Windows"
!endif


#
# So far only off seems to work.
#
#UseTemplates=0
#UseTemplates=1
UseTemplates=1


#
#		Merge (overlay) identical portions of strings. This means
#	the must be constant(readonly). This is fine for all Stroika
#	Code, but is left optional for compatability with other peoples
#	code.
#
#MergeStrings=			;	no
#MergeStrings=-d		;	yes
MergeStrings=-d


#
# These flags probably need not be edited -- they define a bunch of things
# that tell Stroika what GUI, and so on to use.
#
#	qSnake			=>	Build for the HP PaRisk "snake" architecture
#	qUnixOS			=>	OS Services available can generally be summed up as
#						being Unix style
#	qWinOS			=>	OS Services available to Windows
#	qDOS			=>	OS Services available to DOS
#	qHPCPlus		=>	Development environment is HP provided cfront 2.1
#						based C++
#	qXGDI			=>	Graphix layer should assume compiling against X GDI
#						for graphix implementation
#	qMotifGUI		=>	For GUI decisions, prefered GUI for widgets, and
#						behavior is Motif
#	qXtToolkit		=>	Xt Toolkit instrinsics available to implement user
#						interactions
#	qXmToolkit		=>	Use OSF Xm implementation to get motif style widgets
#	_POSIX_SOURCE	=>	tell the compiler to show us ONLY posix symbols to
#						encourage us to be POSIX compliant
#	
#	
### << FIX ABOVE COMMENTS >>>
#environConfigDefines=-Di386=1 -DqDOS=1 -DqBorlandCPlus=1
environConfigDefines=-Di386=1 -DqBorlandCPlus=1
!if		($(OS)=="DOS")
environConfigDefines=$(environConfigDefines) -DqDOS=1
!elif	($(OS)=="Windows")
environConfigDefines=$(environConfigDefines) -DqWinOS=1
!elif	($(OS)=="WindowsNT")
environConfigDefines=$(environConfigDefines) -DqWinNT=1
!endif



# Used as shorthand by makefiles
!if		$(OS)=="Windows"
WFlag=W
!else
WFlag=
!endif


#
# Variables actually exported and referenced in Makefile scripts.  Generally
# these are defined by the control values above, and need not be tampered with,
# except when porting to a new system, or system software release.
#
RM=echo y | del
# There must be some way to get del to shut up, and delete things???
#RM=del
#RM=del\q\y # why does this not work...???
CPlusPlusSystem=BorlandC
CPlusPlus=bcc


Lib=tlib

# TLib options:
#		/E means use extended dictionary which should be faster
#		/C means case-sensitive
LibFlags=/C


Linker=tlink

# TLink options:
#		/c means case-sensative in symbols
#		/C means case-sensative in IMPORTS and EXPORTS
LinkerFlags=$(DashVFlag) /c /C $(GenerateMap)
!if		$(OS)=="DOS"
LinkerFlags=$(LinkerFlags) /Tde
!elif	$(OS)=="Windows"
LinkerFlags=$(LinkerFlags) /Tw
!elif	$(OS)=="WindowsNT"
!error "WindowsNT Not Yet Supported"
!endif
LinkerExtraLibs=


CPPFlags=$(environConfigDefines) -DqDebug=$(Debug) \
	-DqRealTemplatesAvailable=$(UseTemplates)


# -g0 means no limit on warnings before compiler barfs
# -w-ccc	means dont warn that some expressions are always false - happens
#			with asserts alot...
# -w-rch	means dont warn that some code is unreachable - happens
#			with asserts alot, and with block-allocated.
#			Would like to be able to localize this disable of warning, with
#			#pragma option -w-rch, but the trouble is Borland has no
#			#pragma push/pop.
# -w-inl	means dont display warnings of the form:
#			"Functions containing XXX are not expanded inline"
#
MoreCPlusFlags=	-g0 -w-ccc -w-rch -w-inl


# Investigate use of -A - currently breaks things so forget it for now...
# Simone had -3 here but thats not documented - not sure if I want -1 -1- or -2???
#
# -A means use only ANSI keywords - try this - it would be better...(optional)
#
CPlusFlags= $(StackOverflowCheck) $(UsePrecompiledHeaders) $(FastCall) \
	$(MergeStrings) -m$(Model) $(DashVFlag) $(OptimizeFlag) $(MoreCPlusFlags)\
	$(InlineExpansion)

!if	$(OS)=="Windows"
CPlusFlags= $(CPlusFlags) -W
!endif

## Use smart virtual tables
CPlusFlags= $(CPlusFlags) -V




# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
