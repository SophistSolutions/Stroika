        General Instructions on Building/Using Stroika under MPW


There is no requirement in Stroika, as to how it is to be built, except
that there are a bunch of #defines that must be defined from compiler
switches that define the particular environemnt you are building for, and
options and choices for how you wish Stroika to function (EG qDebug=1, or 0).

Stroika, as distributed, has two directory hierarcies that you may be
intersted in: Stroika_bin, and Stroika_src. For convienience, in MPW
we refer to these by the variables {Stroika_bin}, and {Stroika_src}.

There are a host of scripts setup to help building Stroika under MPW, that
you may wish to avail yourself of. These can be found in 
"{Stroika_src}Scripts:MPW:". These scripts assume that the two named variables
have been setup. Also, all of the makefiles in Stroika refer to {Stroika_bin}
and assume that they are run in appropriate subdirectories of {Stroika_src}.

Scripts:
		makeConfig <src_hier> <bin_hier>
	Can be used to build an objects heirarchy with objects directories, projectstartup
files, etc, parallel to the given <src_hier>. You typically do this once, and continue to
re-use the bin hierarchy. You might do it several times to maintain built versions with
differing sets of compile flags.

		CheckSyntax <filename>
	Runs the C++ compiler on the given named file in a mode where it just checks
for syntax errors. This is somewhat akin to the lightspeed C facility(%Y). It can
be used to verify that the headers pull in all the required headers before them, etc.

		TranslateLNs [-r] [-p] [-t] filename
			-r means recursive
			-p means show progress
			-t means show setfile -T TEXT
	This may be somewhat out of date, but doing DOS development can still come in handy,
occasionally.






# For gnuemacs:
# Local Variables: ***
# mode: Text ***
# tab-width:4 ***
# End: ***


