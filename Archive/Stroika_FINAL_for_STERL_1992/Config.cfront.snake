# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Config.cfront.snake,v 1.1 1992/11/15 04:14:13 lewis Exp $
# 
# Description:
#		This is a Bourne Shell Script. Its purpose is to define configuration
#	flags for a Stroika build. It is typically sourced by sh, before executing
#	make, and it exports variables that the makefiles are driven by.
#
#		These flags are currently setup here for:
#			+	Snake
#			+	HPUX 8.x
#			+	CFront version 3 (HPs)
#			+	X Windows (Xlib)
#			+	X Toolkit (Xt)
#			+	Motif (Xm)
#
# TODO:
# 
# 
# Notes:
# 
# 
# Changes:
#		$Log: Config.cfront.snake,v $
# Revision 1.1  1992/11/15  04:14:13  lewis
# Initial revision
#
#
#		<< Cloned from Config.cfront.aux >>
#
# 
#




#
# 		Variables NOT exported and NOT referenced in Makefile scripts.
#
# 		These are just a convienience to setup parameters for the exported
#	variables below.
#


#
#		Debug can be either 0 or 1, depending on whether or not you want the
#	stroika define qDebug on or off. This configuration flag primarily
#	indicates whether or not to expand asserts, and invariants. But it
#	also sometimes triggers the saving of extra information in structures,
#	so it is important that all .o's combined from both the Stroika library
#	and our application agree on the value of this define...
#
Debug=0
#Debug=1
#Debug=1


#
#	SymbolicDebuggingFlag:
#
#		The SymbolicDebuggingFlag flag tells the Unix compiler whther or not
#	to save symbolic information for running a source level debugger. While
#	use of a source level debugger may be nice, it dramatically slows down,
#	ar, and link time, and makes applications several times larger. This can
#	be turned on/off on a module by module (.o file by .o file) basis.
#
#SymbolicDebuggingFlag=""
#SymbolicDebuggingFlag="-g"
#SymbolicDebuggingFlag="-g1"
#SymbolicDebuggingFlag="-g1"


#
#	WarningFlags:
#
#		The WarningFlags flag tells the g++ what kind of, and how many
#	warnings to issue. A number of reasonable sets of warnings are presented
#	below.
#
#WarningFlags=""
#WarningFlags="    -Wid-clash-len    -Wunused"
#
# -Wshadow
# 		Dont use -Wshadow cuz you get lots of warnings about the variable 'index'
# hiding the name of the Standard C library routine index(char*).
#
# -Woverloaded-virtual
#		Seemed to give spurious warnings - at least with gcc 2.2.1
#		Also generated bogus errors?! LGP 10/10/92
#  -Wunused
#		Done bother with this because it causes all constants like
#		kMinSize_T etc to issue not-used warnings.
#
WarningFlags=""
#WarningFlags="-Wall -Wno-shadow -Wno-overloaded-virtual -Wno-unused"
#WarningFlags="-Wpointer-arith -Wwrite-strings -Wuninitialized -Wformat -Wreturn-type -Wimplicit -Wswitch -Wstrict-prototypes -Wenum-clash"


#
#		These default to the values of the controlling SymbolicDebuggingFlag
#	variable, but can be set seperately. In fact, -g with the link flag is
#	often all you really want since it makes most debuggers happier, and costs
#	no compile time (and doesnt slow linking appreciably).
#
CompileDashGFlag=$SymbolicDebuggingFlag
LinkDashGFlag=$SymbolicDebuggingFlag


#
#		OptimizeFlag
#
#		This is a set of flags that will be haned to the compiler to indicate
#	what optimization is to be done. Since optimizing takes time, I generally
#	set this to the empty string, and go all out when I am shipping code.
#
#OptimizeFlag=""
#OptimizeFlags="-O2"
#OptimizeFlags="-O2 -felide-constructors -fnonnull-objects"
#OptimizeFlag=""



#
#		UseTemplates
#
#		This variable can be set to 0 (FALSE) or 1 (TRUE). If True, then
#	the compilers template capability will be used. If FALSE, then we will
#	use GenClass/GenMake, and our pseudo-template implemenations.
#
#UseTemplates=1
#UseTemplates=0
UseTemplates=1



#
#		VerboseFlag
#
#		You can set gcc to be either verbose, showing each sub-command
#	generated, and its arguments, or to just silently compile. This can be
#	useful when trying to debug syntax errors, by seeing each step they can
#	be more easily reproduced in parts, and debugged individually. Normally
#	though, this is left off.
#VerboseFlag=
#VerboseFlag=-v
VerboseFlag=


#
#		dynLibFlag
#
#		flag to control dynamic link lib inclustion
#
#	for dynamic link libraries - the default, but it does not work well
#	with xdb.
#dynLibFlag=""
#
# for static link libraries (needed to use xdb - sometimes, but much
# bigger binaries)
#dynLibFlag="-Wl,-a,archive"
dynLibFlag=""



#
#		environConfigDefines
#
#		These flags probably need not be edited - they define a bunch of things
#	that tell Stroika what GUI, and so on to use.
#
#		qSnake			=>		Build for the HP PaRisc "snake" architecture
#		qUnixOS			=>		OS Services available can genrally be summed
#								up as being Unix style.
#		qHPCPlus		=>		Development envirment is HP provided
#								CFront 3.0.1 based C++
#		qXGDI			=>		Graphix layer should assume compiling against
#								X GDI for graphix implementation
#		qMotifGUI		=>		For GUI descisions, prefered GUI for widgets,
#								and behavior is Motif
#		qXtToolkit		=>		Xt Toolkit intrinsics available to implement
#								user interactions.
#		qXmToolkit		=>		Use OSF Xm implementation to get motif style
#								widgets
#		_POSIX_SOURCE	=>		tell the compiler to show us ONLY posix
#								symbols to encourage us to be POSIX complaint.
#
#
### << FIX ABOVE COMMENTS>>>
environConfigDefines="\
 -DqSnake\
 -DqUnixOS\
 -DqHPCPlus=1\
 -DqXGDI\
 -DqMotifGUI\
 -DqXToolkit\
 -DqXtToolkit\
 -DqXmToolkit\
 -D_POSIX_SOURCE\
 "


#
#		OtherCPPDefines
#
#		Whatever extra CPP Defines you want passed along, just add them here.
#
# Add -Dinline= so inlines not exapanded - works around CFront 3.0beta
# template/inline bug...
#
OtherCPPDefines="\
 -Dinline= \
 "


#
#		OtherCFlags
#
#		Whatever extra CFlags you want passed along, just add them here.
#
#
#
OtherCFlags="\
 +a1\
 "


#
#		OtherGenMakeFlags
#
#		Whatever extra flags you want to pass to GenMake, add them here.
#		This is only used if Templates not available
#
#
#
#OtherGenMakeFlags="\
# -short 8\
# "
OtherGenMakeFlags="\
 "


#
#		CPPDefines
#
#		CPPDefines actually passed to CPP(eventually- often directly to
#	compiler driver).
#
#
CPPDefines="$environConfigDefines $OtherCPPDefines -DqDebug=$Debug -DqRealTemplatesAvailable=$(UseTemplates)"


#
# Variables actually exported and referenced in Makefile scripts.. Generally this are defined by the control variables
# above, and need not be tampered with, except when porting to a new system, or system software release.
#
export	GenClass; GenClass=GenClass
export	GenMake; GenMake=GenMake
export	GenMakeFlags; GenMakeFlags="$OtherGenMakeFlags"
export	AR; AR=ar
export	RANLIB; RANLIB=:
export	RM; RM=rm;
export	CPlusPlusSystem;CPlusPlusSystem=cfront
export	CPlusPlus; CPlusPlus=CC
export	Linker; Linker=CC
export	LinkerFlags; LinkerFlags="$dynLibFlag $LinkDashGFlag $VerboseFlag"
export	LinkerExtraLibs; LinkerExtraLibs=""
export	CPPFlags; CPPFlags="$CPPDefines"
export	CPlusFlags; CPlusFlags="$CompileDashGFlag $OtherCFlags $WarningFlags $OptimizeFlags $CPPFlags $VerboseFlag"
export	UseTemplates;



# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
