# This makefile was produced at 11:00:29 PM on Sun, Dec 6, 1992 by
# Makemake version 2.0d34 (29 Jan 91), by Rick Holzgrafe and scott douglass.
# To change this Makefile edit the definition of MAKEMAKE below
# and execute Make Makefile.mac.


MAKEMAKE = MakeMake Х
			MAKEFILE=Makefile.mac Х
			'TmplGenDir={Stroika_bin}Demos:Foundation:HelloWorld:Templates:' Х
			'ObjDir={Stroika_bin}Demos:Foundation:HelloWorld:Objects:' Х
			'DoTFileMapMove=if ("{UseTemplates}" == "0"); catenate {Stroika_bin}Library:Foundation:Templates:TFileMap.hh TFileMap.hh > {TmplGenDir}TFileMap.hh; delete TFileMap.hh; End;' Х
			-post ::::Etc:Makefile.MoreProductions -objdir Х
			'{Stroika_bin}Demos:Foundation:HelloWorld:Objects:' -srcdirs Х
			:Sources: CTAGS= -i :Headers: -i ::::Library:Foundation:Headers: Х
			-i '{Stroika_bin}Library:Foundation:Templates:' Х
		-t BuildFlags Х
			-customonly 'execute "{BuildFlags}";' Х
		-t '{ObjDir}TemplatesLib.o' Х
			BuildFlags Х
		-t '{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld' Х
			BuildFlags Х
		-t '{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld' Х
			-f "-t 'MPST' -c 'MPS '" "FlexOptions=-v -cem" LoadStatement= -l Х
			'{LinkFlags}' :Sources:HelloWorld.cc Х
			'{Stroika_bin}Demos:Foundation:HelloWorld:Objects:TemplatesLib.o' Х
			'{Stroika_bin}Library:Foundation:Foundation.o' Х
			'{Libraries}ToolLibs.o' '{CLibraries}StdCLib.o' Х
			'{CLibraries}CPlusLib.o' '{Libraries}Runtime.o' Х
			'{Libraries}Interface.o'

{Stroika_bin}Demos:Foundation:HelloWorld:Objects:	─ :Sources:

TARGETS = BuildFlags "{ObjDir}TemplatesLib.o" Х
	"{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld"

DOT_H = ::::Library:Foundation:Headers:Config-Foundation.hh Х
	::::Library:Foundation:Headers:Debug.hh Х
	::::Library:Foundation:Headers:File.hh Х
	::::Library:Foundation:Headers:DateTime.hh Х
	::::Library:Foundation:Headers:Date.hh Х
	::::Library:Foundation:Headers:String.hh Х
	::::Library:Foundation:Headers:Character.hh Х
	::::Library:Foundation:Headers:Language.hh Х
	::::Library:Foundation:Headers:Sequence.hh Х
	::::Library:Foundation:Headers:Iterator.hh Х
	::::Library:Foundation:Headers:Shared.hh Х
	::::Library:Foundation:Headers:Time.hh Х
	::::Library:Foundation:Headers:Exception.hh Х
	::::Library:Foundation:Headers:Set_BitString.hh Х
	::::Library:Foundation:Headers:Set.hh

DOT_R =

SRCS = :Sources:HelloWorld.cc

# For "{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld"
OBJS_03 = "{Stroika_bin}Demos:Foundation:HelloWorld:Objects:HelloWorld.cc.o"

# For "{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld"
LIBS_03 = "{Stroika_bin}Demos:Foundation:HelloWorld:Objects:TemplatesLib.o" Х
	"{Stroika_bin}Library:Foundation:Foundation.o" "{Libraries}ToolLibs.o" Х
	"{CLibraries}StdCLib.o" "{CLibraries}CPlusLib.o" "{Libraries}Runtime.o" Х
	"{Libraries}Interface.o"

# For "{ObjDir}TemplatesLib.o"
DEPS_01 = BuildFlags

# For "{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld"
DEPS_02 = BuildFlags

MAKEFILE     = Makefile.mac
TmplGenDir   = {Stroika_bin}Demos:Foundation:HelloWorld:Templates:
ObjDir       = {Stroika_bin}Demos:Foundation:HelloWorld:Objects:
DoTFileMapMove = if ("{UseTemplates}" == "0"); catenate {Stroika_bin}Library:Foundation:Templates:TFileMap.hh TFileMap.hh > {TmplGenDir}TFileMap.hh; delete TFileMap.hh; End;
CTAGS        = 
FlexOptions  = -v -cem
LoadStatement = 
COUNT        = Count
COUNTOPTS    = 
DELETE       = Delete
DELETEOPTS   = -i
FILES        = Files
FILESOPTS    = -l
LIB          = Lib
LIBOPTS      = 
LINK         = Link
LINKOPTS     = 
PRINT        = Print
PRINTOPTS    = 
REZ          = Rez
SETFILE      = SetFile
SETFILEOPTS  = -t 'MPST' -c 'MPS '


AOptions = -i :Headers: -i ::::Library:Foundation:Headers: Х
	-i "{Stroika_bin}Library:Foundation:Templates:"

COptions = -i :Headers: -i ::::Library:Foundation:Headers: Х
	-i "{Stroika_bin}Library:Foundation:Templates:"

POptions = -i :Headers: -i ::::Library:Foundation:Headers: Х
	-i "{Stroika_bin}Library:Foundation:Templates:"

ROptions = -a -i :Headers: -i ::::Library:Foundation:Headers: Х
	-i "{Stroika_bin}Library:Foundation:Templates:"

all	─ {TARGETS}

BuildFlags	─
	execute "{BuildFlags}";




"{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld"	── {OBJS_03} {LIBS_03}
	{LINK} {LinkFlags} -o {Targ} {OBJS_03} {LIBS_03}

"{Stroika_bin}Demos:Foundation:HelloWorld:HelloWorld"	── {OBJS_03} {LIBS_03}
	{SETFILE} -t 'MPST' -c 'MPS ' {Targ}



{MAKEFILE}	─ NoSuchFile ::::Etc:Makefile.MoreProductions
NoSuchFile	─
	{MAKEMAKE}

clean	─
	{DELETE} {DELETEOPTS} {OBJS_03}

clobber	─ clean
	{DELETE} {DELETEOPTS} {TARGETS}

count	─
	{COUNT} {COUNTOPTS} {DOT_H} {DOT_R} {SRCS}

files	─
	{FILES} {FILESOPTS} {TARGETS} {MAKEFILE} {DOT_H} {DOT_R} {SRCS} Х
		::::Etc:Makefile.MoreProductions {OBJS_03}

print	─
	{PRINT} {PRINTOPTS} {MAKEFILE} {DOT_H} {DOT_R} {SRCS} Х
		::::Etc:Makefile.MoreProductions


"{Stroika_bin}Demos:Foundation:HelloWorld:Objects:HelloWorld.cc.o" ─ Х
		::::Library:Foundation:Headers:OSInit.hh Х
		::::Library:Foundation:Headers:Config-Foundation.hh "{CIncludes}float.h" Х
		"{CIncludes}limits.h" "{CIncludes}stddef.h" "{CIncludes}generic.h" Х
		::::Library:Foundation:Headers:Stroika-Foundation-Globals.hh Х
		"{CIncludes}iostream.h" "{CIncludes}String.h" Х
		::::Library:Foundation:Headers:Debug.hh Х
		::::Library:Foundation:Headers:File.hh "{CIncludes}fcntl.h" Х
		::::Library:Foundation:Headers:DateTime.hh Х
		::::Library:Foundation:Headers:Date.hh Х
		::::Library:Foundation:Headers:String.hh Х
		::::Library:Foundation:Headers:Character.hh Х
		::::Library:Foundation:Headers:Language.hh Х
		::::Library:Foundation:Headers:Sequence.hh Х
		::::Library:Foundation:Headers:Iterator.hh Х
		::::Library:Foundation:Headers:Shared.hh Х
		"{Stroika_bin}Library:Foundation:Templates:TFileMap.hh" Х
		::::Library:Foundation:Headers:Time.hh Х
		::::Library:Foundation:Headers:Exception.hh "{CIncludes}setjmp.h" Х
		::::Library:Foundation:Headers:Set_BitString.hh Х
		::::Library:Foundation:Headers:Set.hh :Headers:HelloWorld.hh


# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Makefile.mac,v 1.1 1992/12/07 04:02:37 lewis Exp $
# 
# 
#  Description:
# 
# 		MPW Make production rules. This file is appened by MakeMake to all
#	automatically generated Stroika makefiles. It specifies how to build
#	Stroika objects from the environment flags defined in the Config files.
#
# 
#  TODO:
# 		
# 
#  Notes:
# 
# 
#	Changes:
#		$Log: Makefile.mac,v $
#		Revision 1.1  1992/12/07  04:02:37  lewis
#		Initial revision
#
#		Revision 1.5  1992/11/25  03:14:18  lewis
#		Lots of changes to support Template stuff with recursive makes.
#
#		Revision 1.4  1992/07/06  18:08:05  lewis
#		Fix .l.o rule for case where LoadStatement="".
#
#		Revision 1.3  1992/07/02  23:36:17  lewis
#		Fixed minor bug in .l rule.
#
#		Revision 1.2  1992/07/02  02:36:13  lewis
#		Added Standard File Header.
#		Support setting LoadStatement to "" so we can shutoff loaddump in parts,
#		and have it still work.
#		Better quoting. Get rid of temporary variable SrcFile to make slightly faster.
#
#
# 

.cc.o		─		.cc
	Echo Compiling "{default}.cc"
	# If loaddump is one by default, then use the "{LoadStatement}"
	if ("{UseLoadDump}") 
		Set LDF "{LoadStatement}"
	End
	# If loaddump is off, or there was no "{LoadStatement}", then use the CPPDefines
	if (Not "{LDF}") 
		Set LDF  "{CPPDefines}"
	End
	if ("{ModelFar}" == "0") 
		Set ModelFarFlags "-s {default}"
	End
	if ("{UseTemplates}" == "0") 
		Set ExtraIncludes "{TmplGenDir}";
	Else
		Set ExtraIncludes "";
	End
	{CPlus} Х
		{LDF}  Х
		-i "{ExtraIncludes}" Х
		{CFlags} Х
		{COptions} Х
		{ModelFarFlags} Х
		-o "{targDir}{default}.cc.o" Х
		"{depDir}{default}.cc"


.l.cc.o		─		.l
	Echo Compiling {default}.l
	flex {FlexOptions} "{depDir}{default}.l"
	duplicate -y lex.yy.c "{targDir}{default}.l.cc"
	delete -y lex.yy.c
	# If loaddump is one by default, then use the "{LoadStatement}"
	if ("{UseLoadDump}") 
		Set LDF "{LoadStatement}"
	End
	# If loaddump is off, or there was no "{LoadStatement}", then use the CPPDefines
	if (Not "{LDF}") 
		Set LDF  "{CPPDefines}"
	End
	if ("{ModelFar}" == "0") 
		Set ModelFarFlags "-s {default}"
	End
	if ("{UseTemplates}" == "0") 
		Set ExtraIncludes "{TmplGenDir}";
	Else
		Set ExtraIncludes "";
	End
	{CPlus} Х
		{LDF}  Х
		-i "{ExtraIncludes}" Х
		{CFlags} Х
		{COptions} Х
		{ModelFarFlags} Х
		-i "{FlexIncludesDirectory}" Х
		-o "{targDir}{default}.l.cc.o" Х
		"{targDir}{default}.l.cc"


.c.o		─		.c
	Echo Compiling {default}
	execute "{BuildFlags}"
	if ("{ModelFar}" == "0") 
		Set ModelFarFlags "-s {default}"
	End
	{C} {CFlags} {COptions} {ModelFarFlags} -o {targDir}{default}.c.o "{depDir}{default}.c"



tags	─ {SRCS}
	execute "{BuildFlags}"
	if ("{UseTags}") 
#		ctags -local -update -cplusplus {CPPDefines} {COptions} {NewerDeps}
		ctags -update -cplusplus {CPPDefines} {COptions} {NewerDeps}
	End;



#
## Default template rules incase Templates.make not created yet...
#
Templates.make	──	TemplatesList
	if ("{UseTemplates}" == "0") 
		echo Making Templates.make From TemplatesList;
		NewFolder "{TmplGenDir}" ии Dev:Null || Set Status 0;
		{GenMake} {GenMakeFlags} -b "{Stroika_src}"Etc:CollectionInfo TemplatesList Templates.make;
		{DoTFileMapMove}
		echo Made Templates.make From TemplatesList;
	End;

TemplateClean	──	Templates.make FORCE
	if ("{UseTemplates}" == "0") 
		Make -f Templates.make -d GenDir="{TmplGenDir}" -d TmplGenDir="{TmplGenDir}" -d TemplateHeaders="{TemplateHeaders}" Х
			-d TemplateSources="{TemplateSources}" -d Includes="{Includes} {TemplateIncludes}" -d Etc="{Etc}" -d ObjDir="{ObjDir}" TemplateClean > tmp.make.2;
		tmp.make.2;
		delete tmp.make.2 ии Dev:Null || Set Status 0;
	End;

TemplateClobber	──	Templates.make FORCE
	if ("{UseTemplates}" == "0") 
		Make -f Templates.make -d GenDir="{TmplGenDir}" -d TmplGenDir="{TmplGenDir}" -d TemplateHeaders="{TemplateHeaders}" Х
			-d TemplateSources="{TemplateSources}"  -d Includes="{Includes} {TemplateIncludes}" -d Etc="{Etc}" -d ObjDir="{ObjDir}" TemplateClobber > tmp.make.2;
		tmp.make.2;
		delete tmp.make.2 ии Dev:Null || Set Status 0;
	End;

{ObjDir}TemplatesLib.o	──	Templates.make FORCE
	if ("{UseTemplates}" == "0") 
		echo Making TemplatesLib.o via Templates.make;
		Make -f Templates.make -d GenDir="{TmplGenDir}" -d TmplGenDir="{TmplGenDir}" -d TemplateHeaders="{TemplateHeaders}"  Х
			-d TemplateSources="{TemplateSources}"  -d Includes="{Includes} {TemplateIncludes}" -d Etc="{Etc}" -d ObjDir="{ObjDir}" Х
				 -d Lib="{Lib}"  -d LibFlags="{LibFlags}" -d COptions="{COptions}" {ObjDir}TemplatesLib.o > tmp.make.2;
		tmp.make.2;
		delete tmp.make.2 ии Dev:Null || Set Status 0;
		echo Made TemplatesLib.o via Templates.make;
	End;


FORCE	─
	echo ии Dev:Null;




# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
