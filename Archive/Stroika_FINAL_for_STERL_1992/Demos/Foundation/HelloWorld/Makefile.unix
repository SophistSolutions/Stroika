# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Makefile.unix,v 1.1 1992/12/07 04:02:37 lewis Exp $
# 
# Description:
#		Makefile to build StroikaHello World program for UNIX. This makefile
#	is setup to support either templates, or GenClass template emulation.
#
#		To modify this makefile to build your application, change the AppName
#	appropriately, and adjust the list of Objs.
# 
# TODO:
# 
# 
# Notes:
# 
# 
# Changes:
#		$Log: Makefile.unix,v $
#		Revision 1.1  1992/12/07  04:02:37  lewis
#		Initial revision
#
#
#

.SUFFIXES:	.cc .hh




# Edit these two variables to build off a different version of Stroika
ObjDir				=		./
LibDir				=		../../../../Library
StroikaIncludeDir	=		../../../../Includes
FoundationLibrary	=		$(LibDir)/Foundation/Foundation.a
Etc					=		../../../../Etc
TemplateHeaders		=		$(LibDir)/Foundation/Headers
TemplateSources		=		$(LibDir)/Foundation/Sources
TmplGenDir			=		../Templates
StroikaIncludeDirs	=		-I$(StroikaIncludeDir)/Foundation/
TemplateIncludes	=		-I$(TmplGenDir) -I$(LibDir)/Foundation/Templates/
Includes			=		-I../Headers $(StroikaIncludeDirs)




all:		Templates.make	TemplatesLib.a	HelloWorld






HelloWorld:	$(ObjDir)HelloWorld.o	TemplatesLib.a $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)HelloWorld.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

clean::
	@$(RM) -f  *.o lex.yy.c

clobber:: clean
	@$(RM) -f HelloWorld



### MASTER COPY OF THIS STUFF in :Library:Foundation:Makefile.unix
### GENERIC MAKEFILE STUFF????
### SEE IF THIS CAN BE GENERALLY APPLIED???
clean::		TemplateClean

clobber::	TemplateClobber
	@$(RM) -f Templates.make


.cc.o:
	@echo "Compiling $<"
	@if [ "$$CPlusPlusSystem" = "cfront" ] ; then \
		rm -f $*.C; \
		ln -s $< $*.C; \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) $*.C -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) $*.C -o $@; \
		fi; \
		rm -f $*.C; \
	else \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) $< -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) $< -o $@; \
		fi; \
	fi;


.l.o:
	@echo "Compiling $<"
	@flex -t $<  > lex.yy.c;
	@if [ "$$CPlusPlusSystem" = "cfront" ] ; then \
		rm -f lex.yy.c.C; \
		ln -s lex.yy.c lex.yy.c.C; \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) lex.yy.c.C -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) lex.yy.c.C -o $@; \
		fi; \
		rm -f lex.yy.c.C; \
	else \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) lex.yy.c -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) lex.yy.c -o $@; \
		fi; \
	fi;








#
## Default template rules incase Templates.make not created yet...
#
$(TmplGenDir):
	@mkdir $@

Templates.make::	$(TmplGenDir)
	

Templates.make::	../TemplatesList
	@if [ $$UseTemplates = 0 ]; then \
		echo Making $@ From TemplatesList; \
		mkdir ../Templates 2> /dev/null || echo > /dev/null; \
		$(GenMake) $(GenMakeFlags) -b $(Etc)/CollectionInfo ../TemplatesList Templates.make; \
		cat $(LibDir)/Foundation/Templates/TFndFMap.hh TFileMap.hh > XXX.hh; \
		mv XXX.hh ../Templates/TFileMap.hh; \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) TmpLinks; \
		echo Made $@ From TemplatesList; \
	fi

TemplateClean TemplateClobber:	Templates.make .FORCE
	@if [ $$UseTemplates = 0 ]; then \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) $@; \
	fi

TemplatesLib.a:	Templates.make .FORCE
	@if [ $$UseTemplates = 0 ]; then \
		echo Making $@ via Templates.make; \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) $@; \
		echo Made $@ via Templates.make; \
	fi

.FORCE:



# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
