# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Makefile.unix,v 1.11 1992/12/05 17:43:55 lewis Exp $
# 
# Description:
#		Stroika Makefile to build GenClass utility for UNIX
#
#		To modify this makefile to build your application, change the AppName
#	appropriately, and adjust the list of Objs.
# 
# TODO:
# 
# 
# Notes:
# 
# 
# Changes:
#		$Log: Makefile.unix,v $
#		Revision 1.11  1992/12/05  17:43:55  lewis
#		A bunch of misc cleanups directed towards being able to save
#		common makefile stuff in one file.
#
#		Revision 1.10  1992/12/03  19:33:44  lewis
#		Cleanup makefiles to not have / terminating name - caused some trouble
#		on suns.
#		Moved templates.make rule to bottom.
#
#		Revision 1.8  1992/11/15  16:23:50  lewis
#		Redid how we deal with Templates.make - now recursive make, rather
#		than include (kdjs help fixing this).
#
#		Revision 1.2  1992/09/28  04:02:41  lewis
# 		Broke up, and added files InfoDB, and DoTranslate.
#
#

.SUFFIXES:	.cc .hh


ObjDir=				./


# Edit these two variables to build off a different version of Stroika
LibDir				=		../../../../Library
StroikaIncludeDir	=		../../../../Includes
FoundationLibrary	=		$(LibDir)/Foundation/Foundation.a
Etc					=		../../../../Etc
TemplateHeaders		=		$(LibDir)/Foundation/Headers
TemplateSources		=		$(LibDir)/Foundation/Sources
TmplGenDir			=		../Templates
StroikaIncludeDirs	=		-I$(StroikaIncludeDir)/Foundation/
TemplateIncludes	=		-I../Templates -I$(LibDir)/Foundation/Templates/
Includes			=		-I../Headers $(StroikaIncludeDirs)




all:		Templates.make	TemplatesLib.a	GenClass GenMake






GenClass:	$(ObjDir)CPlusLexer.o	\
			$(ObjDir)DoTranslate.o	\
			$(ObjDir)InfoDB.o		\
			$(ObjDir)GenClass.o		\
			$(ObjDir)FileNameUtils.o	\
			TemplatesLib.a\
			$(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)CPlusLexer.o $(ObjDir)DoTranslate.o $(ObjDir)InfoDB.o $(ObjDir)GenClass.o $(ObjDir)FileNameUtils.o TemplatesLib.a	$(FoundationLibrary) -lm $(LinkerExtraLibs)

GenMake:	$(ObjDir)InfoDB.o $(ObjDir)GenMake.o $(ObjDir)FileNameUtils.o $(ObjDir)CPlusLexer.o $(ObjDir)DoTranslate.o TemplatesLib.a	$(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)InfoDB.o $(ObjDir)GenMake.o $(ObjDir)FileNameUtils.o $(ObjDir)CPlusLexer.o $(ObjDir)DoTranslate.o TemplatesLib.a	$(FoundationLibrary) -lm $(LinkerExtraLibs)

clean::
	@$(RM) -f  *.o lex.yy.c

clobber:: clean
	@$(RM) -f GenClass GenMake



### MASTER COPY OF THIS STUFF in :Library:Foundation:Makefile.unix
### GENERIC MAKEFILE STUFF????
### SEE IF THIS CAN BE GENERALLY APPLIED???
clean::		TemplateClean

clobber::	TemplateClobber
	@$(RM) -f Templates.make


.cc.o:
	@echo "Compiling $<"
	@if [ "$$CPlusPlusSystem" = "cfront" ] ; then \
		rm -f $*.C; \
		ln -s $< $*.C; \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) $*.C -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) $*.C -o $@; \
		fi; \
		rm -f $*.C; \
	else \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) $< -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) $< -o $@; \
		fi; \
	fi;


.l.o:
	@echo "Compiling $<"
	@flex -t $<  > lex.yy.c;
	@if [ "$$CPlusPlusSystem" = "cfront" ] ; then \
		rm -f lex.yy.c.C; \
		ln -s lex.yy.c lex.yy.c.C; \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) lex.yy.c.C -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) lex.yy.c.C -o $@; \
		fi; \
		rm -f lex.yy.c.C; \
	else \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) lex.yy.c -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) lex.yy.c -o $@; \
		fi; \
	fi;








#
## Default template rules incase Templates.make not created yet...
#
$(TmplGenDir):
	@mkdir $@

Templates.make::	$(TmplGenDir)
	

Templates.make::	../TemplatesList
	@if [ $$UseTemplates = 0 ]; then \
		echo Making $@ From TemplatesList; \
		mkdir ../Templates 2> /dev/null || echo > /dev/null; \
		$(GenMake) $(GenMakeFlags) -b $(Etc)/CollectionInfo ../TemplatesList Templates.make; \
		cat $(LibDir)/Foundation/Templates/TFndFMap.hh TFileMap.hh > XXX.hh; \
		mv XXX.hh ../Templates/TFileMap.hh; \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) TmpLinks; \
		echo Made $@ From TemplatesList; \
	fi

TemplateClean TemplateClobber:	Templates.make .FORCE
	@if [ $$UseTemplates = 0 ]; then \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) $@; \
	fi

TemplatesLib.a:	Templates.make .FORCE
	@if [ $$UseTemplates = 0 ]; then \
		echo Making $@ via Templates.make; \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) $@; \
		echo Made $@ via Templates.make; \
	fi

.FORCE:



# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
