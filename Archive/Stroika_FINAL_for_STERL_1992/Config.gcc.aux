#!/bin/sh
#
# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Config.gcc.aux,v 1.15 1992/12/03 19:27:12 lewis Exp $
# 
# Description:
#		This is a Bourne Shell Script. Its purpose is to define configuration
#	flags for a Stroika build. It is typically sourced by sh, before executing
#	make, and it exports variables that the makefiles are driven by.
#
#		These flags are currently setup here for:
#			+	Macintosh computer
#			+	A/UX 3.0
#			+	g++ version 2
#			+	X Windows (Xlib)
#			+	X Toolkit (Xt)
#			+	Motif (Xm)
#
# TODO:
# 
# 
# Notes:
# 
# 
# Changes:
#		$Log: Config.gcc.aux,v $
#		Revision 1.15  1992/12/03  19:27:12  lewis
#		Add MemoizeLookups flag. Use gcc instead of g++ to link, since g++
#		script is slow. Generally start cleaning this file up a bit more.
#
#		Revision 1.14  1992/11/15  16:25:10  lewis
#		Call gcc -x c++ instead of g++ since shell script g++ very slow.
#
#		Revision 1.13  1992/11/11  22:11:08  lewis
#		Delete obsolete IncludeRCSIDs.
#		_G_BROKEN_SIGNED_CHAR goes in the other CPP defines section with comment
#		explaining its purpose.
#		qRealTemplatesAvailable setting now depends on $(UseTemplates).
#		SymbolicDebuggingFlag defaults now to "".
#
#		Revision 1.12  1992/10/29  21:15:12  lewis
#		Added GenMakeFlags and OtherGenMakeFlags - use to make short file names
#		even under unix. Also, make GenClass/GenMake variables point to
#		whatever GenMake/GenClass in the path. Did differently before cuz
#		of some unknown makefile trouble I was having.
#
#		Revision 1.11  1992/10/21  03:52:47  lewis
#		Comments, and added $OtherCFlags and those default to -fmemoize-lookups
#		and -fsave-memoized, Symbolic flag default to -g1, as an experiment,
#		and add a few special optimizations to Optimize flag - not sure if they
#		were already implied or not - documentation vague - lookup in source.
#
#		Revision 1.9  1992/10/13  05:37:57  lewis
#		Get rid of -Woverload-virtual.
#
#		Revision 1.8  1992/10/10  20:25:58  lewis
#		Added new support for WarningFlags:
#
#		Revision 1.7  1992/10/09  14:22:10  lewis
#		Lots of cleanups, including how we define CPP defines.
#		Cleaned up most of the comments.
#		Added OtherCPPDefines.
#		Made obsolete IncludeRCSIDs.
#		Added  UseTemplates variable.
#		Added path for GenClass/GenMake (variable).
#		Renamed DashGFlag to SymbolicDebuggingFlag.
#
#		Revision 1.6  1992/09/18  20:23:56  lewis
#		Add new flags CompileDashGFlag and LinkDashGFlag which default
#		to DashGFlag.
#
#		Revision 1.5  1992/07/01  07:48:22  lewis
#		Change qGCC to qGCC_Aux.
#
#		Revision 1.4  1992/06/26  16:37:52  lewis
#		Leave -g off til we dont performance tests to seehow much it costs.
#
#		Revision 1.3  1992/06/25  03:01:40  lewis
#		Turn on -g by default for now. Make OptimizeFlag option (commented out)
#		-O2. Added VerboseFlag.
#		Add -D_G_BROKEN_SIGNED_CHAR to environConfigDefines for libg++/gcc bug.
#		Also added  -sposix to CPlusFlags and LinkerFlags. Added -pipe to
#		CPlusFlags.
#
#		Revision 1.2  1992/06/22  15:46:15  lewis
#		Added extra flag for -lg++.
#
#		<< Cloned from Config.snake >>
#
# 
#




#
# 		Variables NOT exported and NOT referenced in Makefile scripts.
#
# 		These are just a convienience to setup parameters for the exported
#	variables below.
#


#
#		Debug can be either 0 or 1, depending on whether or not you want the
#	stroika define qDebug on or off. This configuration flag primarily
#	indicates whether or not to expand asserts, and invariants. But it
#	also sometimes triggers the saving of extra information in structures,
#	so it is important that all .o's combined from both the Stroika library
#	and our application agree on the value of this define...
#
#Debug=0
#Debug=1
Debug=1


#
#	SymbolicDebuggingFlag:
#
#		The SymbolicDebuggingFlag flag tells the Unix compiler whther or not
#	to save symbolic information for running a source level debugger. While
#	use of a source level debugger may be nice, it dramatically slows down,
#	ar, and link time, and makes applications several times larger. This can
#	be turned on/off on a module by module (.o file by .o file) basis.
#
#SymbolicDebuggingFlag=""
#SymbolicDebuggingFlag="-g"
#SymbolicDebuggingFlag="-g1"
SymbolicDebuggingFlag=""


#
#	WarningFlags:
#
#		The WarningFlags flag tells the g++ what kind of, and how many
#	warnings to issue. A number of reasonable sets of warnings are presented
#	below.
#
#WarningFlags=""
#WarningFlags="    -Wid-clash-len    -Wunused"
#
# -Wshadow
# 		Dont use -Wshadow cuz you get lots of warnings about the variable 'index'
# hiding the name of the Standard C library routine index(char*).
#
# -Woverloaded-virtual
#		Seemed to give spurious warnings - at least with gcc 2.2.1
#		Also generated bogus errors?! LGP 10/10/92
#  -Wunused
#		Done bother with this because it causes all constants like
#		kMinSize_T etc to issue not-used warnings.
#
#WarningFlags=""
#WarningFlags="-Wall -Wno-shadow -Wno-overloaded-virtual -Wno-unused"
WarningFlags="-Wpointer-arith -Wwrite-strings -Wuninitialized\
 -Wformat -Wreturn-type -Wimplicit -Wswitch -Wstrict-prototypes -Wenum-clash"


#
#		These default to the values of the controlling SymbolicDebuggingFlag
#	variable, but can be set seperately. In fact, -g with the link flag is
#	often all you really want since it makes most debuggers happier, and costs
#	no compile time (and doesnt slow linking appreciably).
#
CompileDashGFlag=$SymbolicDebuggingFlag
LinkDashGFlag=$SymbolicDebuggingFlag


#
#		OptimizeFlags
#
#		This is a set of flags that will be haned to the compiler to indicate
#	what optimization is to be done. Since optimizing takes time, I generally
#	set this to the empty string, and go all out when I am shipping code.
#
#OptimizeFlags=""
#OptimizeFlags="-O2"
#OptimizeFlags="-O2 -felide-constructors -fnonnull-objects"
OptimizeFlags=""



#
#		UseTemplates
#
#		This variable can be set to 0 (FALSE) or 1 (TRUE). If True, then
#	the compilers template capability will be used. If FALSE, then we will
#	use GenClass/GenMake, and our pseudo-template implemenations.
#
#UseTemplates=1
#UseTemplates=0
UseTemplates=0



#
#		VerboseFlag
#
#		You can set gcc to be either verbose, showing each sub-command
#	generated, and its arguments, or to just silently compile. This can be
#	useful when trying to debug syntax errors, by seeing each step they can
#	be more easily reproduced in parts, and debugged individually. Normally
#	though, this is left off.
#VerboseFlag=
#VerboseFlag=-v
VerboseFlag=


#
#		MemoizeLookups
#
#		A hack to speed compilation. Not sure yet if, or how well it works.
#MemoizeLookups=0		;	off
#MemoizeLookups=1		;	on
#MemoizeLookups=2		;	on+SaveMemoized
MemoizeLookups=0


#
#		dynLibFlag
#
#		flag to control dynamic link lib inclustion
#
#	for dynamic link libraries - the default, but it does not work well
#	with xdb.
#dynLibFlag=""
#
# for static link libraries (needed to use xdb - sometimes, but much
# bigger binaries)
#dynLibFlag="-Wl,-a,archive"
dynLibFlag=""



#
#		environConfigDefines
#
#		These flags probably need not be edited - they define a bunch of things
#	that tell Stroika what GUI, and so on to use.
#
#		qSnake			=>		Build for the HP PaRisc "snake" architecture
#		qUnixOS			=>		OS Services available can genrally be summed
#								up as being Unix style.
#		qHPCPlus		=>		Development envirment is HP provided
#								CFront 2.1 based C++
#		qXGDI			=>		Graphix layer should assume compiling against
#								X GDI for graphix implementation
#		qMotifGUI		=>		For GUI descisions, prefered GUI for widgets,
#								and behavior is Motif
#		qXtToolkit		=>		Xt Toolkit intrinsics available to implement
#								user interactions.
#		qXmToolkit		=>		Use OSF Xm implementation to get motif style
#								widgets
#		_POSIX_SOURCE	=>		tell the compiler to show us ONLY posix
#								symbols to encourage us to be POSIX complaint.
#
#
### << FIX ABOVE COMMENTS>>>
environConfigDefines="\
 -Dmc68000\
 -DqUnixOS\
 -DqGCC_Aux=1\
 -DqXGDI\
 -DqMotifGUI\
 -DqXToolkit\
 -DqXtToolkit\
 -DqXmToolkit\
 -D_POSIX_SOURCE\
 "


#
#		OtherCPPDefines
#
#		Whatever extra CPP Defines you want passed along, just add them here.
#
#
# Include for libg++ 2.1 - not sure why...
# -D_G_BROKEN_SIGNED_CHAR
#
#
OtherCPPDefines="\
 -D_G_BROKEN_SIGNED_CHAR\
 "


#
#		OtherCFlags
#
#		Whatever extra CFlags you want passed along, just add them here.
#
#
OtherCFlags="\
 "


#
#		OtherGenMakeFlags
#
#		Whatever extra flags you want to pass to GenMake, add them here.
#	This is only used if Templates not available
#
#
#
#OtherGenMakeFlags="\
# -short 8\
# "
OtherGenMakeFlags="\
 "


#
#		CPPDefines
#
#		CPPDefines actually passed to CPP(eventually- often directly to
#	compiler driver).
#
#
CPPDefines="$environConfigDefines $OtherCPPDefines -DqDebug=$Debug\
	-DqRealTemplatesAvailable=$(UseTemplates)"




#
#		Variables actually exported and referenced in Makefile scripts..
#	Generally this are defined by the control variables above, and need
#	not be tampered with, except when porting to a new system, or system
#	software release.
#
export	GenClass; GenClass=GenClass
export	GenMake; GenMake=GenMake
export	GenMakeFlags; GenMakeFlags="$OtherGenMakeFlags"
export	AR; AR=ar
export	RANLIB; RANLIB=:
export	RM; RM=rm;
export	CPlusPlusSystem;CPlusPlusSystem=gcc
export	CPlusPlus; CPlusPlus=gcc
export	Linker; Linker=gcc
export	LinkerFlags; LinkerFlags="$dynLibFlag $LinkDashGFlag\
	-L/usr/local/lib -sposix $VerboseFlag"
export	LinkerExtraLibs; LinkerExtraLibs="-lg++"
export	CPPFlags; CPPFlags="$CPPDefines  -I/usr/local/lib/g++-include"
export	UseTemplates;
export	CPlusFlags;
CPlusFlags="-x c++ $CompileDashGFlag $OtherCFlags"
CPlusFlags="$CPlusFlags $WarningFlags $OptimizeFlags $CPPFlags"
CPlusFlags="$CPlusFlags -sposix $VerboseFlag -pipe"
if [ $MemoizeLookups = 1 ] ; then
	CPlusFlags="$CPlusFlags -fmemoize-lookups"
fi;
if [ $MemoizeLookups = 2 ] ; then
	CPlusFlags="$CPlusFlags -fsave-memoized"
fi;


# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
