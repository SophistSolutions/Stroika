# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Config.mac,v 1.7 1992/11/25 16:34:02 lewis Exp $
# 
# 
#  Description:
# 
# 		The flags in this file define the configuration information for the Stroika Library, and
#	Applications it is used for. Generally it should suffice to change flags at the top of this file,
#	though you may feel free to change any other part of it. If you find such a need, please let
#	Sophist Solutions know.
#
# 
# 
#  TODO:
# 		
# 
#  Notes:
# 
# 
#	Changes:
#		$Log: Config.mac,v $
#		Revision 1.7  1992/11/25  16:34:02  lewis
#		fixed typo.
#
#		Revision 1.6  1992/11/25  03:16:41  lewis
#		Quick hack - default names for GenClass/GenMake tools
#
#		Revision 1.5  1992/11/05  07:38:30  lewis
#		Added GenMake variable.
#
#		Revision 1.4  1992/10/08  00:06:55  sterling
#		Add SystemSevenOrLater=1 to CPPDefines. Should be done conditionally based on
#		other defines in this file - cleanup....
#
#		Revision 1.3  1992/07/21  18:49:42  sterling
#		changed qMacGUI to qMacUI
#
#		Revision 1.2  1992/07/02  23:32:58  lewis
#		Added flag AlwaysMergeLoadDumpDots.
#
#		Revision 1.1  1992/06/19  22:24:45  lewis
#		Initial revision
#
#		Revision 1.6  1992/06/08  20:59:01  lewis
#		Added a few more comments, and other cleanups of this file.
#
#		Revision 1.5  1992/06/08  20:30:49  lewis
#		Added a few more comments on the meaning of the various compile flags, and added new
#		flag PerformTemplateFlunge.
#
#		Revision 1.4  1992/05/14  14:16:32  lewis
#		Build for 020 by default.
#		Add separate script control flag CFrontOptimize - dont automatically tie
#		this to Debug flag - as before.
#		Add AllowFullInlineExp flag that only applies when CFrontOptimize on to use -z17 flag - tested
#		and did work this time.
#		Use -d XXX=1 isntead of -d XXX in a more thourough manner.
#
#		Revision 1.2  92/04/09  16:42:21  16:42:21  lewis (Lewis Pringle)
#		Get rid of support for qUsingCFront21 - we only support 2.1 for MPW versions of CFront for now.
#		Misc script cleanups - make only the necessary control variables exported, and document why each is.
#		Put in better defaults for building values for these flags.
#		
#		Revision 1.1  92/04/07  09:18:43  09:18:43  lewis (Lewis Pringle)
#		New Mac MPW config file format... April 2, 1992 LGP
#		
#
# 

Set Compiler	"applecfront";		Export	Compiler;
#Set Compiler	"ztc"
#Set Compiler	"gcplus"





#
# If the environment doesnt provide values for these variables, then set them
# to resonable default values...
#
Set Debug					1;			# Controls the definition of the Stroika qDebug flag, which in turn,
										# controls whether or not Stroika will be built for debugging. This
										# defines whether range checking is turned on, Assertions are on,
										# memory gaurd checking, and much, much more. Use a value of 1,
										# when still debugging code, and a value of zero for testing, and
										# for end users.

Set Use68020				1;			# Ask the compiler to generate code assuming this application will
										# only run on a 68020 or higher. This will result in better
										# codegeneration, but an application that will not run on older
										# machines. Stroika's startup code should safely recognize a 68020
										# binary is running on a machine that does not support it,
										# and gracefully shut down.

Set CCompilerOptimize		0;			# Ask the C compiler to optimize. This will turn on the highest
										# level of optimization for the C compiler that seems to be working.

Set CFrontOptimize			0;			# Ask the Cfront to do what optimizations it is cabable of. Apple
										# added these recently, and they don't seem to have much effect,
										# but we'll keep on trying...

Set ModelFar				1;			# Tells apples compiler to use the -model far for both data and
										# functions. For now, this is somewhat required, at least if we
										# continue using -b2. Its a long story. Not very interesting. Not real harm
										# I see in using this, so we don't try to relax the restriction for
										# now...

Set UseLoadDump				1;			# Use apples load/dump mechanism to speed compiles. This is not
										# totally semantics free, and using this for development can
										# occasionally cause minor problems, but it speeds compiles,
										# typically by a factor of two or three, so its really a necessity.

Set UseTags					0;			# (was used to generate tags files - not tested in a while)

Set UseSADE					0;			# Turn on generation of SADE information. This is necessary to use
										# SADE, or SourceBug. However it turns glacially slow compiles/links
										# into astronomically slow compiles/links. Only use this is you need
										# to, or you need time to catch up on reading news. (BTW, Needed for
										# performance measurement stuff).
										# Also, as of June 8, 1992, and ETO#7, this usally makes lib/linker
										# barf, and requires hand futzing to get a Stroika app built.
										# Not for the faint of heart (hacks).

Set CacheTraps				1;			# Defines the qCacheTraps CPP define to its value. A Value of one
										# means that it is OK to use TrapCaching as a technique to speed
										# up Stroika. A value of zero means not to use this optimization.
										# Apple docs seem to indicate it is unsafe, but I've used it for
										# years, under AUX/Sys6/Sys7, etc. and never a hitch?

Set UseMacsBugSymbols		"{Debug}";	# Turn on/off generation of macsbug sysbols. Generally a good idea,
										# but for final shipping products, and perhaps even Q/A testing,
										# leave off, as it greatly enlarges executables (apx 25%). By default,
										# this flags value is the same as that of the Debug flag.

Set ForceNoInlines			0;			# breaks under all compilers upto C 3.2b6 and CFront 1.1d13
										# now works under CFront 3.2a3, but causes too many symbols
										# so we get anon symbol problem in lib user.hh.o...

Set NativeControls			1;			# Defines the qNative CPP flag accordingly. This flags meaning is
										# defined in Config-Framework.hh, and is used to determine the
										# default for whether native, or portable controls are prefered.
										# Generally both are supported, and can be picked by specific choice,
										# but this defines the default behavior.

Set TraceOn					0;			# Sets the compiler -trace flag on. This is typically used in
										# conjunction with setting UseSADE on, and linking with proff.o,
										# so that profiling can be performed. This makes things run MUCH
										# slower (100%+).

Set	AllowFullInlineExp		1;			# when CFrontOptimize is 1, also allow inlines to be expanded
										# fully "-z17".
										# Ignored when debug is True, and can cause C compiler to break
										# in the past cuz could make really large functions depending on what
										# we've declared inline. Did get it to work on May 15, 1992

Set	PerformTemplateFlunge	0;			# CAUTION: Template flunging is EXPERIMENTAL. Flunge at your own risk!!!
										#
										# This is generally used only for final products. It uses semi-safe
										# techniques to decrease the size of the executable generated, and
										# perhaps some performance optimizations too.
										# These things all should really be done for us, and safely, by a
										# decent compilation environment, but they are not, so we are left
										# flunging for ourselves!!!


Set	AlwaysMergeLoadDumpDots		0;		# Only meaningfull when loaddump is turned on.
										# If true, then each time we build a library, like
										# Framework.o, then merge its loaddump .o into it.
										# This is needed if we will be using that .o by itslef
										# but that is slower than just merging it in later into
										# Stroika.o

Export	UseLoadDump;			# used directly by some scripts
Export	ModelFar;				# used directly by some scripts
Export	PerformTemplateFlunge;	# used directly by some scripts (Namely :Library:Makefile.mac)





#
# Setup the flags that the Makefile scripts look at based on the configuration
# flags defined above
#




#	-f1 CFRONT flag means output text not tokens....
#	-w1 generate additional warnings from CFront
#	-w2 generate maximum warnings from CFront and the C compiler
#	-w3  passed through to C compiler (supresses "unused" warnings)

Set	CPPDefines	"-d qMPW=1 -d qMacOS=1 -d qMacGDI=1 -d qMacUI=1 -d qMacToolkit=1 -d mc68000=1"; Export CPPDefines;

# DEFINE SYS7Or Later, now just as workaround, but make config flag for this - we may
# want to do anyhow...
Set	CPPDefines	"-d SystemSevenOrLater=1 {CPPDefines}"; Export CPPDefines;

Set	CFlags		"-w3 -mf -b2"; Export CFlags;
Set	LibFlags	"-mf -d"; Export LibFlags;
Set	LinkFlags	"-mf -msg nodup,multiple,warn -srt"; Export LinkFlags;

if ({Compiler} == "applecfront")
	Set	CPPDefines	"{CPPDefines} -d qMPW_CFront=1  -d qCFront21=1 -d qMPW_CFront_AppleC=1"
	Set CPlus "CPlus"; Export CPLus;
Else if ({Compiler} == "gcplus")
	Set	CPPDefines	"{CPPDefines} -d qMPW_CFront_GCC=1";
	Set CPlus "gcplus"; Export CPLus;
Else if ({Compiler} == "ztc")
	Set	CPPDefines	"{CPPDefines} -d __ZTC__=1"
	Set CPlus "ztc"; Export CPLus;
End;



## name of the genclass tool
set GenClass "GenClass"; Export GenClass
set GenMake "GenMake"; Export GenMake




if ("{Debug}")
	Set	CPPDefines	"{CPPDefines}	-d qDebug=1"
Else
	Set	CPPDefines	"{CPPDefines} -d qDebug=0"
End;
if ("{CFrontOptimize}")
	Set	CFlags		"{CFlags} -z15"; Export CFlags;
	if ("{AllowFullInlineExp}")
		Set	CFlags		"{CFlags} -z17"; Export CFlags;
	End;
End;

if ("{UseMacsBugSymbols}")
	Set	CFlags 		"{CFlags}		-mbg full"
Else
	Set	CFlags 		"{CFlags}		-mbg off"
End;
if ("{Use68020}")
	Set	CPPDefines	"{CPPDefines}	-d mc68020=1"
	Set	CFlags 		"{CFlags}		-mc68020"
End;
if ("{UseSADE}")
	Set	CFlags 		"{CFlags}		-sym on"
	Set	LinkFlags	"{LinkFlags}	-sym on";
	Set	LibFlags	"{LibFlags}		-sym on";
Else
	Set	LinkFlags	"{LinkFlags}	-sym off";
	Set	LibFlags	"{LibFlags}		-sym off";
End;
if ("{CacheTraps}")
	Set	CPPDefines	"{CPPDefines}	-d qCacheTraps=1"
Else
	Set	CPPDefines	"{CPPDefines}	-d qCacheTraps=0"
End;
if ("{CCompilerOptimize}")
	Set	CFlags 		"{CFlags}		-opt full"
Else
	Set	CFlags 		"{CFlags}		-opt off"
End;
# if b2/b3 doesnt matter move back up to top

# only applies to apple compiler for now...
if ({Compiler} == "applecfront")
	if ("{ModelFar}")
		Set	CFlags 		"{CFlags}		-model far"
		Set	LinkFlags 	"{LinkFlags}	-model far"
	Else
		Set	CFlags 		"{CFlags}		-model near"
		Set	LinkFlags 	"{LinkFlags}	-wrap -br on -srtsg all "
	End;
End;

if ("{ForceNoInlines}")
	Set	CFlags 		"{CFlags}		-z0"
End;

if ("{NativeControls}")
	Set	CPPDefines	"{CPPDefines}	-d qNative=1"
Else
	Set	CPPDefines	"{CPPDefines}	-d qNative=0"
End;


if ("{TraceOn}")
	Set	CFlags 		"{CFlags}		-trace on"
End;





if ("{UseLoadDump}" == "0") 
	Set LDF "{CPPDefines}"
End
if ("{ModelFar}") 
	Set ModelFarFlags "-s MainSeg"
End


# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
