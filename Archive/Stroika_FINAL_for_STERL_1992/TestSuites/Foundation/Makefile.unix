# Copyright(c) Sophist Solutions Inc. 1990-1992.  All rights reserved
#
# $Header: /fuji/lewis/RCS/Makefile.unix,v 1.30 1992/12/05 17:43:19 lewis Exp $
# 
# Description:
# 		Stroika Foundation TestSuite makefile for UNIX
# 
# TODO:
# 
# 
# Notes:
# 
# 
# Changes:
#		$Log: Makefile.unix,v $
#		Revision 1.30  1992/12/05  17:43:19  lewis
#		A bunch of misc cleanups directed towards being able to save
#		common makefile stuff in one file.
#
#		Revision 1.29  1992/12/03  19:22:47  lewis
#		Add tTally_LinkList.
#
#		Revision 1.28  1992/11/20  19:14:14  lewis
#		Added tCircularArray, tDoubleLinkList, and tLinkList.
#
#		Revision 1.27  1992/11/19  05:51:46  lewis
#		Deleted all references to *Fixed* classes.
#
#		Revision 1.26  1992/11/19  05:11:04  lewis
#		Deleted Fixed classes.
#
#		Revision 1.25  1992/11/16  21:49:56  lewis
#		Cleaned up a few rough-edges with stuff kdj and I did. Works
#		a little better now - no redundent builds of Templates.make, for
#		example.
#
#		Revision 1.24  1992/11/16  04:47:34  lewis
#		Lots of hacks for new strategy of invoking submake on Templates.make.
#		Works MUCH better.
#
#		Revision 1.21  1992/10/14  06:22:25  lewis
#		Added $(ObjDir)Mapping_FixedSortedArrayOfSimpleClass_UInt32_1000.o explicityly
#		to the link line of tMapping_FixedSortedArray to force linker to pick right
#		.o file from archive. Problem only exists for
#		non-template hacks.
#
#		Revision 1.19  1992/10/09  21:34:29  lewis
#		More fully support pseudo-templates. Mostly correct now.
#
#		Revision 1.16  1992/09/25  21:49:16  lewis
#		Started hacking in support for new GenClass stuff - just testing.
#
#		Revision 1.15  1992/09/21  07:01:02  sterling
#		Added a whole bunch of Mapping implementations.
#
#		Revision 1.14  1992/09/20  01:26:58  lewis
#		Got rid of CollectionTests stuff.
#
#		Revision 1.13  1992/09/18  03:13:25  lewis
#		Added tSimpleTree.
#
#		Revision 1.12  1992/09/16  22:00:06  lewis
#		Added tSorting/tSorting_Array.
#
#		Revision 1.11  1992/09/15  17:55:48  lewis
#		Include Set test suites.
#
#		Revision 1.10  1992/09/11  13:15:46  lewis
#		Fix build lines for Queue and Deque - wrong objects lists, and had been using
#		CollectionTests but thats apparantly wrong?
#
#		Revision 1.8  1992/09/04  02:07:30  lewis
#		Added tMath and tFormat.
#
#		Revision 1.7  1992/09/04  01:56:37  lewis
#		Converted from supporting both graphix and foundation to ONLY foundation.
#
#		Revision 1.5  1992/07/22  02:00:57  lewis
#		Renamed testsuite files more consistently.
#
#		Revision 1.4  1992/07/21  06:47:23  lewis
#		Re-order so Foundation testsuites come first - probably we should have
#		a separate directory for other layers.
#		Also do ../TestSuite hack so I can type make in top level dir.
#
#		Revision 1.3  1992/07/01  02:50:05  lewis
#		Cleanup makefile a bit - add LibDir Macro, and Rcs log header.
#
# 
#
#
#
.SUFFIXES:	.cc .hh

ObjDir	=	./
SrcDir=		../Sources

LibDir				=	../../../Library
FoundationLibrary	=	$(LibDir)/Foundation/Foundation.a
Etc					=	../../../Etc/
TemplateHeaders		=	$(LibDir)/Foundation/Headers/
TemplateSources		=	$(LibDir)/Foundation/Sources/
TmplGenDir			=	../Templates/
TemplateIncludes	=	-I$(TmplGenDir) -I$(LibDir)/Foundation/Templates/
Includes			=	-I../Headers/ -I$(LibDir)/Foundation/Headers/



TestSuites=						\
	tArray	 					\
	tBag	 					\
	tBag_Array	 				\
	tBag_LinkList				\
	tCircularArray				\
	tDate	 					\
	tDeque 						\
	tDeque_CircularArray 		\
	tDeque_DoubleLinkList 		\
	tDoubleLinkList				\
	tException 					\
	tFile						\
	tFormat						\
	tHashTable					\
	tInt64						\
	tLinkList					\
	tMapping					\
	tMapping_Array				\
	tMapping_HashTable			\
	tMapping_LinkList			\
	tMapping_SortedArray		\
	tMapping_SortedLinkList		\
	tMath						\
	tMemory 					\
	tOSConfiguration 			\
	tQueue 						\
	tQueue_CircularArray 		\
	tQueue_DoubleLinkList 		\
	tSequence 					\
	tSequence_Array 			\
	tSequence_DoubleLinkList 	\
	tSet	 					\
	tSet_Array 					\
	tSet_BitString 				\
	tSimpleTree					\
	tSorting 					\
	tSorting_Array 				\
	tStack_Array 				\
	tStack_LinkList				\
	tString						\
	tTally						\
	tTally_Array				\
	tTally_LinkList				\
	tTime





all:		TestSuites

../TestSuite:	TestSuites

TestSuite:	TestSuites

TestSuites:	$(TestSuites)

test:		$(TestSuites)
	@echo Running testsuites...
	@for i in $(TestSuites); do\
		$$i;\
	done;	


tArray:	Templates.make	TemplatesLib.a $(ObjDir)tArray.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tArray.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tBag:	Templates.make	TemplatesLib.a $(ObjDir)tBag.o $(ObjDir)BagTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tBag.o $(ObjDir)BagTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tBag_Array:	Templates.make	TemplatesLib.a $(ObjDir)tBag_Array.o $(ObjDir)BagTests.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tBag_Array.o $(ObjDir)BagTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tBag_LinkList:	Templates.make	TemplatesLib.a $(ObjDir)tBag_LinkList.o $(ObjDir)BagTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tBag_LinkList.o $(ObjDir)BagTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tCircularArray:	Templates.make	TemplatesLib.a $(ObjDir)tCircularArray.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tCircularArray.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tDate:	$(ObjDir)tDate.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tDate.o $(FoundationLibrary) -lm $(LinkerExtraLibs)

tDeque:	Templates.make	TemplatesLib.a $(ObjDir)tDeque.o $(ObjDir)DequeTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tDeque.o $(ObjDir)DequeTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tDeque_CircularArray:	Templates.make	TemplatesLib.a $(ObjDir)tDeque_CircularArray.o $(ObjDir)DequeTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tDeque_CircularArray.o $(ObjDir)DequeTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tDeque_DoubleLinkList:	Templates.make	TemplatesLib.a $(ObjDir)tDeque_DoubleLinkList.o $(ObjDir)DequeTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tDeque_DoubleLinkList.o $(ObjDir)DequeTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tDoubleLinkList:	Templates.make	TemplatesLib.a $(ObjDir)tDoubleLinkList.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tDoubleLinkList.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tException:	$(ObjDir)tException.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tException.o $(FoundationLibrary) -lm $(LinkerExtraLibs)

tFile:	Templates.make	TemplatesLib.a $(ObjDir)tFile.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tFile.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tFormat:	Templates.make	TemplatesLib.a $(ObjDir)tFormat.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tFormat.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tHashTable:	Templates.make	TemplatesLib.a $(ObjDir)tHashTable.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tHashTable.o TemplatesLib.a $(ObjDir)SimpleClass.o $(FoundationLibrary) -lm $(LinkerExtraLibs)

tInt64:	$(ObjDir)tInt64.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tInt64.o $(FoundationLibrary) -lm $(LinkerExtraLibs)

tLinkList:	Templates.make	TemplatesLib.a $(ObjDir)tLinkList.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tLinkList.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMapping:	Templates.make	TemplatesLib.a $(ObjDir)tMapping.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMapping.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMapping_Array:	Templates.make	TemplatesLib.a $(ObjDir)tMapping_Array.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMapping_Array.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMapping_HashTable:	Templates.make	TemplatesLib.a $(ObjDir)tMapping_HashTable.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMapping_HashTable.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMapping_LinkList:	Templates.make	TemplatesLib.a $(ObjDir)tMapping_LinkList.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMapping_LinkList.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMapping_SortedArray:	Templates.make	TemplatesLib.a $(ObjDir)tMapping_SortedArray.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMapping_SortedArray.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMapping_SortedLinkList:	Templates.make	TemplatesLib.a $(ObjDir)tMapping_SortedLinkList.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMapping_SortedLinkList.o $(ObjDir)MappingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMath:	$(ObjDir)tMath.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMath.o $(FoundationLibrary) -lm $(LinkerExtraLibs)

tMemory:	$(ObjDir)tMemory.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tMemory.o $(FoundationLibrary) -lm $(LinkerExtraLibs)

tOSConfiguration:	Templates.make	TemplatesLib.a $(ObjDir)tOSConfiguration.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tOSConfiguration.o $(FoundationLibrary) -lm $(LinkerExtraLibs)

tQueue:	Templates.make	TemplatesLib.a $(ObjDir)tQueue.o $(ObjDir)QueueTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tQueue.o $(ObjDir)QueueTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tQueue_CircularArray:	Templates.make	TemplatesLib.a $(ObjDir)tQueue_CircularArray.o $(ObjDir)QueueTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tQueue_CircularArray.o $(ObjDir)QueueTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tQueue_DoubleLinkList:	Templates.make	TemplatesLib.a $(ObjDir)tQueue_DoubleLinkList.o $(ObjDir)QueueTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tQueue_DoubleLinkList.o $(ObjDir)QueueTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSequence:	Templates.make	TemplatesLib.a $(ObjDir)tSequence.o $(ObjDir)SequenceTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSequence.o $(ObjDir)SequenceTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSequence_Array:	Templates.make	TemplatesLib.a $(ObjDir)tSequence_Array.o $(ObjDir)SequenceTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSequence_Array.o $(ObjDir)SequenceTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSequence_DoubleLinkList:	Templates.make	TemplatesLib.a $(ObjDir)tSequence_DoubleLinkList.o $(ObjDir)SequenceTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSequence_DoubleLinkList.o $(ObjDir)SequenceTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSet:	Templates.make	TemplatesLib.a $(ObjDir)tSet.o $(ObjDir)SetTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSet.o $(ObjDir)SetTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSet_Array:	Templates.make	TemplatesLib.a $(ObjDir)tSet_Array.o $(ObjDir)SetTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSet_Array.o $(ObjDir)SetTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSet_BitString:	Templates.make	TemplatesLib.a $(ObjDir)tSet_BitString.o $(ObjDir)SetTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSet_BitString.o $(ObjDir)SetTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSimpleTree:	Templates.make	TemplatesLib.a $(ObjDir)tSimpleTree.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSimpleTree.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSorting:	Templates.make	TemplatesLib.a $(ObjDir)tSorting.o $(ObjDir)SortingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSorting.o $(ObjDir)SortingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tSorting_Array:	Templates.make	TemplatesLib.a $(ObjDir)tSorting_Array.o $(ObjDir)SortingTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tSorting_Array.o $(ObjDir)SortingTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tStack_Array:	Templates.make	TemplatesLib.a $(ObjDir)tStack_Array.o $(ObjDir)StackTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tStack_Array.o $(ObjDir)StackTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tStack_LinkList:	Templates.make	TemplatesLib.a $(ObjDir)tStack_LinkList.o $(ObjDir)StackTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tStack_LinkList.o $(ObjDir)StackTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tString:	Templates.make	TemplatesLib.a $(ObjDir)tString.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tString.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tTally:	Templates.make	TemplatesLib.a $(ObjDir)tTally.o $(ObjDir)TallyTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tTally.o $(ObjDir)TallyTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tTally_Array:	Templates.make	TemplatesLib.a $(ObjDir)tTally_Array.o $(ObjDir)TallyTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tTally_Array.o $(ObjDir)TallyTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tTally_LinkList:	Templates.make	TemplatesLib.a $(ObjDir)tTally_LinkList.o $(ObjDir)TallyTests.o $(ObjDir)SimpleClass.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tTally_LinkList.o $(ObjDir)TallyTests.o $(ObjDir)SimpleClass.o TemplatesLib.a $(FoundationLibrary) -lm $(LinkerExtraLibs)

tTime:	$(ObjDir)tTime.o $(FoundationLibrary)
	@echo Linking $@
	@$(Linker) $(LinkerFlags) -o $@ $(ObjDir)tTime.o $(FoundationLibrary) -lm $(LinkerExtraLibs)





clean::
	@$(RM) -f $(ObjDir)*.o

clobber::	clean	TemplateClobber
	@$(RM) -f $(TestSuites) Templates.make




### MASTER COPY OF THIS STUFF in :Library:Foundation:Makefile.unix
### GENERIC MAKEFILE STUFF????
### SEE IF THIS CAN BE GENERALLY APPLIED???
clean::		TemplateClean

clobber::	TemplateClobber
	@$(RM) -f Templates.make


.cc.o:
	@echo "Compiling $<"
	@if [ "$$CPlusPlusSystem" = "cfront" ] ; then \
		rm -f $*.C; \
		ln -s $< $*.C; \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) $*.C -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) $*.C -o $@; \
		fi; \
		rm -f $*.C; \
	else \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) $< -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) $< -o $@; \
		fi; \
	fi;


.l.o:
	@echo "Compiling $<"
	@flex -t $<  > lex.yy.c;
	@if [ "$$CPlusPlusSystem" = "cfront" ] ; then \
		rm -f lex.yy.c.C; \
		ln -s lex.yy.c lex.yy.c.C; \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) lex.yy.c.C -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) lex.yy.c.C -o $@; \
		fi; \
		rm -f lex.yy.c.C; \
	else \
		if [ $$UseTemplates = 1 ] ; then \
			$(CPlusPlus) $(CPlusFlags) -c $(Includes) lex.yy.c -o $@; \
		else \
			$(CPlusPlus) $(CPlusFlags) -c $(TemplateIncludes) $(Includes) lex.yy.c -o $@; \
		fi; \
	fi;








#
## Default template rules incase Templates.make not created yet...
#
$(TmplGenDir):
	@mkdir $@

Templates.make::	$(TmplGenDir)
	

Templates.make::	../TemplatesList
	@if [ $$UseTemplates = 0 ]; then \
		echo Making $@ From TemplatesList; \
		mkdir ../Templates 2> /dev/null || echo > /dev/null; \
		$(GenMake) $(GenMakeFlags) -b $(Etc)/CollectionInfo ../TemplatesList Templates.make; \
		cat $(LibDir)/Foundation/Templates/TFndFMap.hh TFileMap.hh > XXX.hh; \
		mv XXX.hh ../Templates/TFileMap.hh; \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) TmpLinks; \
		echo Made $@ From TemplatesList; \
	fi

TemplateClean TemplateClobber:	Templates.make .FORCE
	@if [ $$UseTemplates = 0 ]; then \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) $@; \
	fi

TemplatesLib.a:	Templates.make .FORCE
	@if [ $$UseTemplates = 0 ]; then \
		echo Making $@ via Templates.make; \
		$(MAKE) -f Templates.make TmplGenDir=$(TmplGenDir) TemplateHeaders=$(TemplateHeaders) TemplateSources=$(TemplateSources) Includes="$(Includes) $(TemplateIncludes)" Etc=$(Etc) -$(MAKEFLAGS) $@; \
		echo Made $@ via Templates.make; \
	fi

.FORCE:



# For gnuemacs:
# Local Variables: ***
# mode:Text ***
# tab-width:4 ***
# End: ***
