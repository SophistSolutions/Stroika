Attached is a git repository for SkipList. This is *not* integrated with Stroika, 
although I may do that next. It will probably be non-trivial to grab the 
Stroika archive, because I don't have an ssh key on the machine I'm using, 
and last time I did that it was a total PITA (on a windows box).

I haven't tested under gcc either. I hope/expect that the SkipList 
part will all compile, but the current testbed file is hopeless. 
If you want to run the code you should build under VS (I have 2010 so 
I suppose there may be problems with 2012 but I doubt it). 

You can read the To Do file to see open questions. Most are pretty trivial. 
They were written for me so some may be opaque -- let me know if I need to clarify.

The current implementation already supports stuff like key extraction and 
Tally style counts via template specialization. A big potential problem 
in integration would be with my reliance on a Comparer class -- see Comparer.h. 
I use that as the basis for key comparisons. I assume you have something similar 
but, alas, different. I decided on the main interface being similar to strcmp, with

static int Compare (T v1, T v2) // zero->equal, <0 -> v1 < v2, >0 v1>v2

because that is most efficient for numeric and string keys, and can be 
easily implemented by default by depending on the usual equality and < operators. 
But other choices are certainly defensible, and I'm wondering why stl chose 
differently as I'm sure that they thought about it a lot.

Obviously, SkipList could keep using what it has, but you must need same thing 
in other cases, so better to pick a single design for this.

Main thing I know would be handy from Stroika is block allocation, 
as currently that is overwhelming the big cost. I'd probably like to keep a 
version of SkipList that can be used without Stroika, so I may lift 
a bit of code there for a non-intergrated version.

