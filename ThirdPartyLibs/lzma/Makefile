ifeq ($(CONFIGURATION),)
$(error This makefile requires a CONFIGURATION= parameter, or environment variable set)
endif

ProjectPlatformSubdir	=	$(shell perl ../../ScriptsLib/PrintConfigurationVariable.pl $(CONFIGURATION) ProjectPlatformSubdir)


.DEFAULT_GOAL := all
.PHONY:	all clean clobber check doBuild doCreate doPatch

DoCreateSymLink=0


# From:		http://www.7-zip.org/sdk.html



VERSION=1509
BASENAME=lzma$(VERSION)
ZIPEDFILE=../Origs-Cache/$(BASENAME).7z

FETCHURLS=
FETCHURLS+=http://www.7-zip.org/a/$(BASENAME).7z



ifneq (,$(findstring VisualStudio,$(ProjectPlatformSubdir)))
WIN_CC32=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) CC_32)
WIN_CC64=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) CC_64)
#WIN_AS32=$(shell cygpath -w "$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) AS_32)")
#WIN_AS64=$(shell cygpath -w "$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) AS_64)")
WIN_LIB32=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) LIB_32)
WIN_LIB64=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) LIB_64)
WIN_LINK32=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) LINK_32)
WIN_LINK64=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) LINK_64)
INCLUDE=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) INCLUDE)
LIBDIR32=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) LIBDIR32)
LIBDIR64=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) LIBDIR64)
PATH=$(shell perl ../../ScriptsLib/PrintEnvVarFromCommonBuildVars.pl $(CONFIGURATION) PATH)
endif

ifeq (Unix,$(ProjectPlatformSubdir))
CC=$(shell perl ../../ScriptsLib/PrintConfigurationVariable.pl $(CONFIGURATION) CompilerDriver-C)
LIBS=-lstdc++ -lc
endif

BUILDS_ROOT=../../Builds/


ifeq (Unix,$(ProjectPlatformSubdir))
PRODUCED_OUTPUT_ARTIFACTS=	\
	$(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/lib/lzma.a				\
	$(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/include/lzma/7z.h		\
	$(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/include/lzma/7zCrc.h		\
	$(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/include/lzma/7zTypes.h
else
PRODUCED_OUTPUT_ARTIFACTS=	\
	$(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/lib/lzma.lib						\
	$(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/include/lzma/7z.h					\
	$(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/include/lzma/7zCrc.h				\
	$(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/include/lzma/7zTypes.h				\
	$(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/lib/lzma.lib						\
	$(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/include/lzma/7z.h				\
	$(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/include/lzma/7zCrc.h				\
	$(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/include/lzma/7zTypes.h			\
	$(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/lib/lzma.lib			\
	$(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/include/lzma/7z.h	\
	$(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/include/lzma/7zCrc.h	\
	$(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/include/lzma/7zTypes.h\
	$(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/lib/lzma.lib				\
	$(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/include/lzma/7z.h		\
	$(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/include/lzma/7zCrc.h		\
	$(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/include/lzma/7zTypes.h	\
	$(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/lib/lzma.lib						\
	$(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/include/lzma/7z.h					\
	$(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/include/lzma/7zCrc.h				\
	$(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/include/lzma/7zTypes.h				\
	$(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/lib/lzma.lib						\
	$(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/include/lzma/7z.h				\
	$(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/include/lzma/7zCrc.h				\
	$(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/include/lzma/7zTypes.h			\
	$(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/lib/lzma.lib				\
	$(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/include/lzma/7z.h		\
	$(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/include/lzma/7zCrc.h		\
	$(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/include/lzma/7zTypes.h
endif





BUILDS_DIR=	CURRENT/Builds/


all:
	@echo "   Building Stroika/ThirdPartyLibs/lzma $(VERSION)..."
	@$(MAKE) --no-print-directory --silent $(PRODUCED_OUTPUT_ARTIFACTS)
	@$(MAKE) --no-print-directory check


.NOTPARALLEL:


$(PRODUCED_OUTPUT_ARTIFACTS):
	@$(MAKE) --no-print-directory check_prerequisites_
	@$(MAKE) --no-print-directory doCreate
	@$(MAKE) --no-print-directory doBuilds


$(ZIPEDFILE):
	@echo -n "      ..." 
	@../../ScriptsLib/WebGet.sh $(ZIPEDFILE) $(FETCHURLS)


check_prerequisites_:
	@echo "      ...checking tools..."
	@type 7za > /dev/null || echo "......Missing 7za"

doCreate:	$(ZIPEDFILE)
	@echo "      ...Extract $(ZIPEDFILE) to CURRENT..."
	@rm -rf CURRENT
	@7za x -oCURRENT $(ZIPEDFILE) > /dev/null
	@cp Subdir-Makefile CURRENT/Makefile

doBuilds:
	@echo "      ...Buidling, and redirecting messages to CURRENT/BUILD.OUT ..."
	@$(MAKE) doBuildInternal_ > CURRENT/BUILD.OUT 2>&1

doBuildInternal_:
ifeq (Unix,$(ProjectPlatformSubdir))
	$(MAKE) --directory CURRENT ProjectPlatformSubdir=$(ProjectPlatformSubdir) CC="$(CC)" LIBS="$(LIBS)"
	mkdir -p $(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/lib && cp CURRENT/lzma.a  $(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/lib/
	mkdir -p $(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/include/lzma/
	cp CURRENT/lzma CURRENT/7zDec $(BUILDS_ROOT)$(CONFIGURATION)/ThirdPartyLibs/
else
	$(MAKE) --directory CURRENT \
		ProjectPlatformSubdir="$(ProjectPlatformSubdir)" \
		CC="$(WIN_CC32)" \
		CPlusPlus="$(WIN_CC32)" \
		CFLAGS="-nologo -W3 -MTd -Z7" \
		INCLUDE="$(INCLUDE)" \
		LIB="$(LIBDIR32)" \
		LIBS="oleaut32.lib ole32.lib user32.lib" \
		LD="$(WIN_LINK32)" \
		AR="$(WIN_LIB32)" \
		ARCRATEFLAGS="-nologo" \
		ARTARGETPREFIX=-out: \
		LINKTARGETPREFIX=-out: \
		LDFLAGS="-nologo -debug -incremental:no -opt:ref" \
		EXESUFFIX=.exe \
		LIBSUFFIX=lib \
		OBJSUFFIX=obj \
		all
	mkdir -p $(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/lib && cp CURRENT/lzma.lib  $(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/lib/
	mkdir -p $(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/include/lzma/
	cp CURRENT/lzma.exe CURRENT/7zDec.exe $(BUILDS_ROOT)Debug-U-32/ThirdPartyLibs/
	$(MAKE) --directory CURRENT \
		ProjectPlatformSubdir="$(ProjectPlatformSubdir)" \
		EXESUFFIX=.exe \
		LIBSUFFIX=lib \
		OBJSUFFIX=obj \
		clobber
	$(MAKE) --directory CURRENT \
		ProjectPlatformSubdir="$(ProjectPlatformSubdir)" \
		CC="$(WIN_CC32)" \
		CPlusPlus="$(WIN_CC32)" \
		CFLAGS="-nologo -W3 -MT -O2 -Oy- -Z7" \
		INCLUDE="$(INCLUDE)" \
		LIB="$(LIBDIR32)" \
		LIBS="oleaut32.lib ole32.lib user32.lib" \
		LD="$(WIN_LINK32)" \
		AR="$(WIN_LIB32)" \
		ARCRATEFLAGS="-nologo" \
		ARTARGETPREFIX=-out: \
		LINKTARGETPREFIX=-out: \
		LDFLAGS="-nologo -debug -incremental:no -opt:ref" \
		EXESUFFIX=.exe \
		LIBSUFFIX=lib \
		OBJSUFFIX=obj \
		all
	mkdir -p $(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/lib && cp CURRENT/lzma.lib  $(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/lib/
	mkdir -p $(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/include/lzma/
	cp CURRENT/lzma.exe CURRENT/7zDec.exe $(BUILDS_ROOT)Release-U-32/ThirdPartyLibs/
	mkdir -p $(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/lib && cp CURRENT/lzma.lib  $(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/lib/
	mkdir -p $(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/include/lzma/
	cp CURRENT/lzma.exe CURRENT/7zDec.exe $(BUILDS_ROOT)Release-DbgMemLeaks-U-32/ThirdPartyLibs/
	mkdir -p $(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/lib && cp CURRENT/lzma.lib  $(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/lib/
	mkdir -p $(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/include/lzma/
	cp CURRENT/lzma.exe CURRENT/7zDec.exe $(BUILDS_ROOT)Release-Logging-U-32/ThirdPartyLibs/
	$(MAKE) --directory CURRENT \
		ProjectPlatformSubdir="$(ProjectPlatformSubdir)" \
		EXESUFFIX=.exe \
		LIBSUFFIX=lib \
		OBJSUFFIX=obj \
		clobber
	$(MAKE) --directory CURRENT \
		ProjectPlatformSubdir="$(ProjectPlatformSubdir)" \
		CC="$(WIN_CC64)" \
		CPlusPlus="$(WIN_CC64)" \
		CFLAGS="-nologo -W3 -MTd -Oy- -Z7" \
		INCLUDE="$(INCLUDE)" \
		LIB="$(LIBDIR64)" \
		PATH="$(PATH)" \
		LIBS="oleaut32.lib ole32.lib user32.lib" \
		LD="$(WIN_LINK64)" \
		AR="$(WIN_LIB64)" \
		ARCRATEFLAGS="-nologo" \
		ARTARGETPREFIX=-out: \
		LINKTARGETPREFIX=-out: \
		LDFLAGS="-nologo -debug -incremental:no -opt:ref" \
		EXESUFFIX=.exe \
		LIBSUFFIX=lib \
		OBJSUFFIX=obj \
		all
	mkdir -p $(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/lib && cp CURRENT/lzma.lib  $(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/lib/
	mkdir -p $(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/include/lzma/
	cp CURRENT/lzma.exe CURRENT/7zDec.exe $(BUILDS_ROOT)Debug-U-64/ThirdPartyLibs/
	$(MAKE) --directory CURRENT \
		ProjectPlatformSubdir="$(ProjectPlatformSubdir)" \
		EXESUFFIX=.exe \
		LIBSUFFIX=lib \
		OBJSUFFIX=obj \
		clobber
	$(MAKE) --directory CURRENT \
		ProjectPlatformSubdir="$(ProjectPlatformSubdir)" \
		CC="$(WIN_CC64)" \
		CPlusPlus="$(WIN_CC64)" \
		CFLAGS="-nologo -W3 -MT -O2 -Oy- -Z7" \
		INCLUDE="$(INCLUDE)" \
		LIB="$(LIBDIR64)" \
		PATH="$(PATH)" \
		LIBS="oleaut32.lib ole32.lib user32.lib" \
		LD="$(WIN_LINK64)" \
		AR="$(WIN_LIB64)" \
		ARCRATEFLAGS="-nologo" \
		ARTARGETPREFIX=-out: \
		LINKTARGETPREFIX=-out: \
		LDFLAGS="-nologo -debug -incremental:no -opt:ref" \
		EXESUFFIX=.exe \
		LIBSUFFIX=lib \
		OBJSUFFIX=obj \
		all
	@mkdir -p $(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/lib && cp CURRENT/lzma.lib  $(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/lib/
	@mkdir -p $(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/include/lzma/
	@cp CURRENT/lzma.exe CURRENT/7zDec.exe $(BUILDS_ROOT)Release-U-64/ThirdPartyLibs/
	@mkdir -p $(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/lib && cp CURRENT/lzma.lib  $(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/lib/
	@mkdir -p $(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/include/lzma && cp CURRENT/C/7z.h CURRENT/C/7zCrc.h CURRENT/C/7zTypes.h $(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/include/lzma/
	@cp CURRENT/lzma.exe CURRENT/7zDec.exe $(BUILDS_ROOT)Release-Logging-U-64/ThirdPartyLibs/
endif


ORIGS:	$(ZIPEDFILE)
	@7z x -oORIGS $(ZIPEDFILE) > /dev/null;

check:
	@echo -n "      ...Checking..."
	@for i in $(PRODUCED_OUTPUT_ARTIFACTS) ; do \
		if [ ! -e $$i ]; then\
			echo "   FAILED: missing $$i";\
			exit 1;\
		fi;\
	done
	@echo "   Stroika/ThirdPartyLibs/lzma -    [Succeeded]";

clean:
	@rm -rf CURRENT

clobber:	clean
	@rm -f $(PRODUCED_OUTPUT_ARTIFACTS)
