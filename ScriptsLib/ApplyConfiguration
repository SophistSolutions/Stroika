#!/usr/bin/env perl

# MUST FIX TO CHECK FOR --only-if-unconfigured - for now thats all the logic we'll support
# but should check flag...
#TRY THESE AGAIN, but for now generate too many problems...
#use strict;
#use warnings;

BEGIN{ @INC = ( "./", @INC ); }

require ("ScriptsLib/ConfigurationReader.pl");

use constant false => 0;
use constant true  => 1;
use constant DEFAULT_BOOL_OPTIONS => -1;



my $MAKE_INDENT_LEVEL = $ENV{'MAKE_INDENT_LEVEL'};
$MAKE_INDENT_LEVEL = $MAKE_INDENT_LEVEL + 1;

my $intermediateFiles	=	"IntermediateFiles/";
my $activeConfiguration	=	$ARGV[0];


my $PROJECTPLATFORMSUBDIR='';
my $TARGET_PLATFORMS='';
my $BUILD_TOOLS_ROOT=undef;


my @useExtraMakeDefines;
my @packageConfigLinkLines;

#
# BUILD iff LIBFEATUREFLAG_BuildOnly OR LIBFEATUREFLAG_UseStaticTPP
# HAS_FEATURE iff LIBFEATUREFLAG_UseStaticTPP OR LIBFEATUREFLAG_UseSystem
#
my $LIBFEATUREFLAG_BuildOnly = "build-only";
my $LIBFEATUREFLAG_UseStaticTPP = "use";
my $LIBFEATUREFLAG_UseSystem = "use-system";
my $LIBFEATUREFLAG_No = "no";


## FOR NOW ONLY USED ON Unix BUILDS (may not be true anymore - gradually changing so always used)
my $ENABLE_ASSERTIONS = 0;
my $FEATUREFLAG_LIBCURL = $LIBFEATUREFLAG_No;
my $FEATUREFLAG_OpenSSL = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_XERCES = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_ZLib = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_sqlite = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_boost = $LIBFEATUREFLAG_UseStaticTPP;
my $FEATUREFLAG_LZMA = $LIBFEATUREFLAG_UseStaticTPP;
my $ENABLE_TRACE2FILE = DEFAULT_BOOL_OPTIONS;
my $STATIC_LINK_GCCRUNTIME = 1;
my $COMPILER_DRIVER_C = "";
my $COMPILER_DRIVER_CPlusPlus = "";
my $AR = undef;
my $LIBTOOL = undef;
my $RANLIB = undef;
my $EXTRA_COMPILER_ARGS = "";
my $EXTRA_PREFIX_LINKER_ARGS = "";
my $EXTRA_SUFFIX_LINKER_ARGS = "";
my $CFLAGS = "";
my $CPPFLAGS = "";
my $CXXFLAGS = "";


#quite unclear why this is needed - or even if it is - but it appears to be that
# just regular
my $IF_STATIC_LINK_GCCRUNTIME_USE_PRINTPATH_METHOD = 1;


sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

sub	DoHelp_
{
	print("Usage:\n");
	print("	ApplyConfiguration.pl OPTIONS where options can be:\n");
	print("	    --help       /* print this help */\n");
	exit (0);
}

sub	ParseCommandLine_
{
	for ($i = 0; $i <= $#ARGV; $i++) {
		my $var = $ARGV[$i];
		if ((lc ($var) eq "-help") or (lc ($var) eq "--help") or (lc ($var) eq "-?")) {
			DoHelp_ ();
		}
	}
}


sub	ConfigParam2BoolInt
{
	my $v = shift;
	if ($v eq "0") {
		return 0;
	}
	if ($v eq "false") {
		return 0;
	}
	if ($v eq "1") {
		return 1;
	}
	if ($v eq "true") {
		return 1;
	}
	return DEFAULT_BOOL_OPTIONS;
}

sub	ReadConfiguration_
{
	$PROJECTPLATFORMSUBDIR = GetConfigurationParameter($activeConfiguration, "ProjectPlatformSubdir");
	$TARGET_PLATFORMS = GetConfigurationParameter($activeConfiguration, "TARGET_PLATFORMS");
	$BUILD_TOOLS_ROOT = GetConfigurationParameter($activeConfiguration, "BUILD_TOOLS_ROOT");
	$COMPILER_DRIVER_C = GetConfigurationParameter($activeConfiguration, "CompilerDriver-C");
	$COMPILER_DRIVER_CPlusPlus = GetConfigurationParameter($activeConfiguration, "CompilerDriver-C++");
	$AR = GetConfigurationParameter($activeConfiguration, "AR");
	$LIBTOOL = GetConfigurationParameter($activeConfiguration, "LIBTOOL");
	$RANLIB = GetConfigurationParameter($activeConfiguration, "RANLIB");
	$CFLAGS = GetConfigurationParameter($activeConfiguration, "CFLAGS");
	$CPPFLAGS = GetConfigurationParameter($activeConfiguration, "CPPFLAGS");
	$CXXFLAGS = GetConfigurationParameter($activeConfiguration, "CXXFLAGS");
	$EXTRA_COMPILER_ARGS = GetConfigurationParameter($activeConfiguration, "EXTRA_COMPILER_ARGS");
	$EXTRA_PREFIX_LINKER_ARGS = GetConfigurationParameter($activeConfiguration, "EXTRA_PREFIX_LINKER_ARGS");
	$EXTRA_SUFFIX_LINKER_ARGS = GetConfigurationParameter($activeConfiguration, "EXTRA_SUFFIX_LINKER_ARGS");

	$FEATUREFLAG_LIBCURL = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_LibCurl");
	$FEATUREFLAG_OpenSSL = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_OpenSSL");
	$FEATUREFLAG_WinHTTP = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_WinHTTP");
	$FEATUREFLAG_ATLMFC = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_ATLMFC");
	$FEATUREFLAG_XERCES = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_Xerces");
	$FEATUREFLAG_ZLib = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_ZLib");
	$FEATUREFLAG_sqlite = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_sqlite");
	$FEATUREFLAG_boost = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_boost");
	$FEATUREFLAG_LZMA = GetConfigurationParameter($activeConfiguration, "qFeatureFlag_LZMA");
	$ENABLE_ASSERTIONS = ConfigParam2BoolInt (GetConfigurationParameter($activeConfiguration, "ENABLE_ASSERTIONS"));
	$ENABLE_GLIBCXX_DEBUG = ConfigParam2BoolInt (GetConfigurationParameter($activeConfiguration, "ENABLE_GLIBCXX_DEBUG"));
	$INCLUDES_PATH = GetConfigurationParameter($activeConfiguration, "INCLUDES_PATH");
	$LIBS_PATH = GetConfigurationParameter($activeConfiguration, "LIBS_PATH");
	$LIB_DEPENDENCIES = GetConfigurationParameter($activeConfiguration, "LIB_DEPENDENCIES");
	$ENABLE_TRACE2FILE = ConfigParam2BoolInt (GetConfigurationParameter($activeConfiguration, "ENABLE_TRACE2FILE"));

	$IncludeDebugSymbolsInExecutables = GetConfigurationParameter($activeConfiguration, "IncludeDebugSymbolsInExecutables");
	$IncludeDebugSymbolsInLibraries = GetConfigurationParameter($activeConfiguration, "IncludeDebugSymbolsInLibraries");

	$STATIC_LINK_GCCRUNTIME = ConfigParam2BoolInt (GetConfigurationParameter($activeConfiguration, "STATIC_LINK_GCCRUNTIME"));

	foreach $mdef (GetConfigurationParameter($activeConfiguration, "ExtraMakeDefines")) {
		push (@useExtraMakeDefines, $mdef);
	}

	foreach $mdef (GetConfigurationParameter($activeConfiguration, "PackageConfigLinkLines")) {
		push (@packageConfigLinkLines, $mdef);
	}

	#print "PROJECTPLATFORMSUBDIR = $PROJECTPLATFORMSUBDIR\n";
}


ParseCommandLine_ ();

ReadConfiguration_();



mkdir ($intermediateFiles);



#
# For now KISS - just check if the file doesn't exist, and if so write a default value.
#
my $configFileDotHName	=	"$intermediateFiles$activeConfiguration/Stroika-Current-Configuration.h";
my $configFileMakeName	=	"$intermediateFiles$activeConfiguration/Configuration.mk";
my $vs2kIntellisenseCng	=	"Library/Projects/VisualStudio.Net-2019/Microsoft.Cpp.stroika.AllConfigs.props";


my $stkRoot	=	trim(`realpath .`);






sub WriteStroikaConfigCHeader
{
	#open(OUT,">$configFileDotHName");
	open(OUT,">:crlf", "$configFileDotHName");
	print (OUT "/*\n");
	print (OUT " * Copyright(c) Sophist Solutions, Inc. 1990-2020.  All rights reserved\n");
	print (OUT " */\n");
	print (OUT "#ifndef	_Stroika_Foundation_Configuration_StroikaCurrentConfiguration_h_\n");
	print (OUT "#define	_Stroika_Foundation_Configuration_StroikaCurrentConfiguration_h_	1\n");
	print (OUT "\n");
	print (OUT "//WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration.pl\n");
	print (OUT "//WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration.pl\n");
	print (OUT "//WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration.pl\n");
	print (OUT "//WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration.pl\n");
	print (OUT "//WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration.pl\n");
	print (OUT "//WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration.pl\n");
	print (OUT "//WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration.pl\n");
	print (OUT "\n");
	print (OUT "\n");


	print (OUT "//Defaults overrides:\n");

	print (OUT "//--enable-assertions or --disable-assertions to force a particular value. --default-assertions to depend on NDEBUG\n");
	 {
		print (OUT "// set\n");
		if ($ENABLE_ASSERTIONS) {
			print (OUT "#define	qDebug 1\n");
		}	
		else {
			print (OUT "#define	qDebug 0\n");
		}
		print (OUT "\n");
	}
	print (OUT "\n");


    print (OUT "//--LibCurl {build-only|use|use-system|no}\n");
	if (($FEATUREFLAG_LIBCURL eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_LIBCURL eq $LIBFEATUREFLAG_UseSystem)) {
		print (OUT "#define	qHasFeature_LibCurl 1\n");
	}	
	else {
		print (OUT "#define	qHasFeature_LibCurl 0\n");
	}	
	print (OUT "\n");


    print (OUT "//--OpenSSL {build-only|use|use-system|no}\n");
	if (($FEATUREFLAG_OpenSSL eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_OpenSSL eq $LIBFEATUREFLAG_UseSystem)) {
		print (OUT "#define	qHasFeature_OpenSSL 1\n");
	}	
	else {
		print (OUT "#define	qHasFeature_OpenSSL 0\n");
	}	
	print (OUT "\n");


    print (OUT "//--WinHTTP {use-system|no}\n");
	if ($FEATUREFLAG_WinHTTP eq $LIBFEATUREFLAG_UseSystem) {
		print (OUT "#define	qHasFeature_WinHTTP 1\n");
	}	
	else {
		print (OUT "#define	qHasFeature_WinHTTP 0\n");
	}	
	print (OUT "\n");


    print (OUT "//--ATLMFC {use-system|no}\n");
	if ($FEATUREFLAG_ATLMFC eq $LIBFEATUREFLAG_UseSystem) {
		print (OUT "#define	qHasFeature_ATLMFC 1\n");
	}	
	else {
		print (OUT "#define	qHasFeature_ATLMFC 0\n");
	}	
	print (OUT "\n");


    print (OUT "//--Xerces {build-only|use|use-system|no}\n");
	if (($FEATUREFLAG_XERCES eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_XERCES eq $LIBFEATUREFLAG_UseSystem)) {
		print (OUT "#define	qHasFeature_Xerces	1\n");
	}
	else {
		print (OUT "#define	qHasFeature_Xerces	0\n");
	}
	print (OUT "\n");


	print (OUT "//--ZLib {build-only|use|use-system|no}\n");
	if (($FEATUREFLAG_ZLib eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_ZLib eq $LIBFEATUREFLAG_UseSystem)) {
		print (OUT "#define	qHasFeature_ZLib	1\n");
	}
	else {
		print (OUT "#define	qHasFeature_ZLib	0\n");
	}
	print (OUT "\n");

     print (OUT "//--sqlite {build-only|use|use-system|no}\n");
	if (($FEATUREFLAG_sqlite eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_sqlite eq $LIBFEATUREFLAG_UseSystem)) {
		print (OUT "#define	qHasFeature_sqlite	1\n");
	}
	else {
		print (OUT "#define	qHasFeature_sqlite	0\n");
	}
	print (OUT "\n");

    print (OUT "//--LZMA {build-only|use|use-system|no}\n");
	if (($FEATUREFLAG_LZMA eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_LZMA eq $LIBFEATUREFLAG_UseSystem)) {
		print (OUT "#define	qHasFeature_LZMA	1\n");
	}
	else {
		print (OUT "#define	qHasFeature_LZMA	0\n");
	}
	print (OUT "\n");

    print (OUT "//--boost {build-only|use|use-system|no}\n");
	if (($FEATUREFLAG_boost eq $LIBFEATUREFLAG_UseStaticTPP) || ($FEATUREFLAG_boost eq $LIBFEATUREFLAG_UseSystem)) {
		print (OUT "#define	qHasFeature_boost	1\n");
	}
	else {
		print (OUT "#define	qHasFeature_boost	0\n");
	}
	print (OUT "\n");


	print (OUT "\n");
	print (OUT "\n");
	print (OUT "\n");


	print (OUT "// --trace2file enable or  --trace2file disable\n");
	if ($ENABLE_TRACE2FILE == DEFAULT_BOOL_OPTIONS) {
		print (OUT "// UNSET so defaulting\n");
	}
	else {
		print (OUT "// set\n");
		if ($ENABLE_TRACE2FILE) {
			print (OUT "#define	qTraceToFile 1\n");
			# though this is could be separately configured, it almost only makes sense to turn these on together and confusing
			# if one done but not the other.
			print (OUT "#define	qDefaultTracingOn 1\n");
		}	
		else {
			print (OUT "#define	qTraceToFile 0\n");
		}	
		print (OUT "\n");
	}

	print (OUT "\n");
	print (OUT "\n");

	print (OUT "#endif	/*_Stroika_Foundation_Configuration_StroikaCurrentConfiguration_h_*/\n");
	close(OUT);
}



sub WriteStroikaConfigMakeHeader_CachedLineItem_
{
	local  $vn = $_[0];
	local  $v = @_ >= 2? $_[1] : GetConfigurationParameter($activeConfiguration, $vn);
	print (OUT '#CACHED VALUE OF: ' . $vn . '			:=	$(shell $(StroikaRoot)ScriptsLib/GetConfigurationParameter "$(CONFIGURATION)" ' . $vn . ")\n");
	print (OUT "$vn=$v\n");
	print (OUT "\n");
}

sub WriteStroikaConfigMakeHeader
{
	mkdir ("$intermediateFiles");
	mkdir ("$intermediateFiles$activeConfiguration");
	mkdir ("$intermediateFiles$activeConfiguration/Library");
	
	open(OUT,">$configFileMakeName");
	print (OUT "#\n");
	print (OUT "#Copyright(c) Sophist Solutions, Inc. 1990-2020.  All rights reserved\n");
	print (OUT "#\n");
	print (OUT "\n");
	print (OUT "\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration\n");
	print (OUT "#\n");
	print (OUT "#This file mainly consists of CACHES of the values that could have been retrieved WITH\n");
	print (OUT "#      VAR :=	$(shell $(StroikaRoot)ScriptsLib/GetConfigurationParameter \"$(CONFIGURATION)\" VAR)\n");
	print (OUT "\n");
	print (OUT "\n");

	
	print (OUT 'ifndef StroikaRoot' . "\n");
	print (OUT '$(error, "StroikaRoot must be defined and included before this file")' . "\n");
	print (OUT 'endif' . "\n");
	print (OUT "\n");

	WriteStroikaConfigMakeHeader_CachedLineItem_("ProjectPlatformSubdir", $PROJECTPLATFORMSUBDIR);
	WriteStroikaConfigMakeHeader_CachedLineItem_("TARGET_PLATFORMS", $TARGET_PLATFORMS);
	WriteStroikaConfigMakeHeader_CachedLineItem_("BUILD_TOOLS_ROOT", $BUILD_TOOLS_ROOT);
	print (OUT "\n");

	WriteStroikaConfigMakeHeader_CachedLineItem_("ARCH");
	WriteStroikaConfigMakeHeader_CachedLineItem_("TOOLS_PATH_ADDITIONS");
	WriteStroikaConfigMakeHeader_CachedLineItem_("TOOLS_PATH_ADDITIONS_BUGWORKAROUND");
	WriteStroikaConfigMakeHeader_CachedLineItem_("CC");
	WriteStroikaConfigMakeHeader_CachedLineItem_("CXX");
	WriteStroikaConfigMakeHeader_CachedLineItem_("AS");
	WriteStroikaConfigMakeHeader_CachedLineItem_("RC");
	WriteStroikaConfigMakeHeader_CachedLineItem_("MIDL");
	WriteStroikaConfigMakeHeader_CachedLineItem_("EXTRA_COMPILER_ARGS");
	WriteStroikaConfigMakeHeader_CachedLineItem_("ENABLE_ASSERTIONS", $ENABLE_ASSERTIONS);
	WriteStroikaConfigMakeHeader_CachedLineItem_("ENABLE_GLIBCXX_DEBUG", $ENABLE_GLIBCXX_DEBUG);
	WriteStroikaConfigMakeHeader_CachedLineItem_("LIBS_PATH");
	WriteStroikaConfigMakeHeader_CachedLineItem_("INCLUDES_PATH");
	WriteStroikaConfigMakeHeader_CachedLineItem_("CFLAGS");
	WriteStroikaConfigMakeHeader_CachedLineItem_("CXXFLAGS");
	WriteStroikaConfigMakeHeader_CachedLineItem_("CPPFLAGS");

	print (OUT "\n");

	WriteStroikaConfigMakeHeader_CachedLineItem_("STRIP");
	WriteStroikaConfigMakeHeader_CachedLineItem_("AR");
	WriteStroikaConfigMakeHeader_CachedLineItem_("LIBTOOL");
	WriteStroikaConfigMakeHeader_CachedLineItem_("RANLIB");
	print (OUT "\n");

	WriteStroikaConfigMakeHeader_CachedLineItem_("RUN_PREFIX");
	WriteStroikaConfigMakeHeader_CachedLineItem_("CrossCompiling");
	print (OUT "\n");


	print (OUT "CONFIGURATION=$activeConfiguration\n");



	WriteStroikaConfigMakeHeader_CachedLineItem_("HasMakefileBugWorkaround_lto_skipping_undefined_incompatible");

	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_ActivePerl");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_ATLMFC");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_boost");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_LibCurl");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_LZMA");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_OpenSSL");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_OpenSSL_ExtraArgs");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_sqlite");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_WinHTTP");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_WIX");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_Xerces");
	WriteStroikaConfigMakeHeader_CachedLineItem_("qFeatureFlag_ZLib");
	

	print (OUT "\n\n");
	print (OUT "#Configured Command Line Arguments (-make-define)\n");
	foreach $var (@useExtraMakeDefines)
	{
		print (OUT "$var\n");
	}



	print (OUT "\n\n");
	print (OUT "LIBS_PATH_DIRECTIVES=");
	for my $l (split /:/, $LIBS_PATH) {
		if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
			my $tmp		=	trim (`cygpath --mixed "$l"`);
			my $len = length ($tmp);
			my $c = $tmp[length ($tmp)-1];
			if (length ($tmp) > 0 && substr ($tmp, -1) eq "\\") {
				$tmp .= "\"";
			}
			print (OUT "/LIBPATH:\"$tmp\" ");
		}
		else {
			print (OUT "-L$l ");
		}
	}
	print (OUT "\n");
	print (OUT "LIB_DEPENDENCIES=$LIB_DEPENDENCIES");
	print (OUT "\n");

	print (OUT "\n\n");
	print (OUT "# Extra dynamically computed link lines\n");
	foreach $var (@packageConfigLinkLines)
	{
		# Use `` so this is only evaluated when linking, not other times when the Configuration.mk file is loaded
		#print (OUT "LIB_DEPENDENCIES += \$(shell $var)\n");
		print (OUT "LIB_DEPENDENCIES += `$var`\n");
	}



	print (OUT "\n\n");

	WriteStroikaConfigMakeHeader_CachedLineItem_("LIB_SUFFIX");
	WriteStroikaConfigMakeHeader_CachedLineItem_("OBJ_SUFFIX");
	WriteStroikaConfigMakeHeader_CachedLineItem_("EXE_SUFFIX");

	
	print (OUT "\n");
	print (OUT "\n");

	print (OUT "#Linker-Driver\n");
	WriteStroikaConfigMakeHeader_CachedLineItem_("Linker");

	print (OUT "#\n");
	print (OUT "EXTRA_COMPILER_ARGS=	$EXTRA_COMPILER_ARGS\n");

	print (OUT "#\n");
	print (OUT "EXTRA_PREFIX_LINKER_ARGS=	$EXTRA_PREFIX_LINKER_ARGS\n");
	print (OUT "EXTRA_SUFFIX_LINKER_ARGS=	$EXTRA_SUFFIX_LINKER_ARGS\n");

	print (OUT "IncludeDebugSymbolsInExecutables=	$IncludeDebugSymbolsInExecutables\n");
	print (OUT "IncludeDebugSymbolsInLibraries=	$IncludeDebugSymbolsInLibraries\n");


	if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
		print (OUT "\n");
		print (OUT "##\n");
		print (OUT "##\n");
		print (OUT "## Windows format path versions of some of these variables\n");
		print (OUT "##\n");
		print (OUT "##WIN_\$var = cygpath --mixed \"\$var\"                OR\n");
		print (OUT "##WIN_\$var = cygpath --mixed --path \"\$var\"         (as appropriate)\n");
		print (OUT "##\n");
		print (OUT "##\n");

		{
			my $tmp = GetConfigurationParameter($activeConfiguration, "Linker");
			if (not ($tmp eq "")) {
				$tmp		=	trim (`cygpath --mixed "$tmp"`);
			}
			print (OUT "###DEPRECATED - 2020-01-07\n");
			print (OUT "WIN_Linker=$tmp\n");
		}
		{
			my $tmp = GetConfigurationParameter($activeConfiguration, "LIBTOOL");
			if (not ($tmp eq "")) {
				$tmp		=	trim (`cygpath --mixed "$tmp"`);
			}
			print (OUT "###DEPRECATED - 2020-01-07\n");
			print (OUT "WIN_LIBTOOL=$tmp\n");
		}
		{
			#Lib tool requires queer ARCH arguments (and probably Link) - so correct here
			my $tmp = GetConfigurationParameter($activeConfiguration, "ARCH");
			if ($tmp eq "x86_64") {
				$tmp = "x64";
			}
			print (OUT "WIN_LIBCOMPATIBLE_ARCH=$tmp\n");
		}
		{
			my $tmp = GetConfigurationParameter($activeConfiguration, "CC");
			if (not ($tmp eq "")) {
				$tmp		=	trim (`cygpath --mixed "$tmp"`);
			}
			print (OUT "###DEPRECATED - 2020-01-07\n");
			print (OUT "WIN_CC=$tmp\n");
		}
		{
			my $tmp = GetConfigurationParameter($activeConfiguration, "AS");
			if (not ($tmp eq "")) {
				$tmp		=	trim (`cygpath --mixed "$tmp"`);
			}
			print (OUT "###DEPRECATED - 2020-01-07\n");
			print (OUT "WIN_AS=$tmp\n");
		}
		{
			my $tmp = GetConfigurationParameter($activeConfiguration, "CXX");
			if (not ($tmp eq "")) {
				$tmp		=	trim (`cygpath --mixed "$tmp"`);
			}
			print (OUT "###DEPRECATED - 2020-01-07\n");
			print (OUT "WIN_CXX=$tmp\n");
		}
		{
			my $LIBS_PATH = GetConfigurationParameter($activeConfiguration, "LIBS_PATH");
			my $tmp		=	trim (`cygpath --mixed --path "$LIBS_PATH"`);
			print (OUT "WIN_LIBS_PATH=$tmp \n");		#nb: space important if $tmp ends in backslash
		}
		{
			my $INCLUDES_PATH = GetConfigurationParameter($activeConfiguration, "INCLUDES_PATH");
			my $tmp		=	trim (`cygpath --mixed --path "$INCLUDES_PATH"`);
			print (OUT "WIN_INCLUDES_PATH=$tmp \n");		#nb: space important if $tmp ends in backslash
		}
		#{
		#	my $TOOLS_PATH_ADDITIONS = GetConfigurationParameter($activeConfiguration, "TOOLS_PATH_ADDITIONS");
		#	my $tmp		=	trim (`cygpath --mixed --path "$TOOLS_PATH_ADDITIONS"`);
		#	print (OUT "WIN_TOOLS_PATH_ADDITIONS=$tmp \n");		#nb: space important if $tmp ends in backslash
		#}
		{
			# Not a great way to test, but hopefully adequate for now
			# esp since not critical always right -- LGP 2019-09-17
			if (index($CXXFLAGS, "/Zi") != -1 || index($CXXFLAGS, "/Zl") != -1) {
				print (OUT "WIN_USE_PROGRAM_DATABASE=1\n");
			}
		}

		print (OUT "\n");
		print (OUT "\n");
	}

	if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
		print (OUT "OUT_ARG_PREFIX_NATIVE=-OUT:\n");
	}
	else {
		print (OUT "OUT_ARG_PREFIX_NATIVE=-o \n");
	}

	print (OUT "###FUNCTION_CONVERT_FILES_TO_COMPILER_NATIVE DEPRECATED\n");
	if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
		print (OUT "FUNCTION_CONVERT_FILES_TO_COMPILER_NATIVE=\$(shell cygpath --mixed \$1)\n");
		print (OUT "FUNCTION_CONVERT_FILEPATH_TO_COMPILER_NATIVE=\$(shell cygpath --mixed \$1)\n");
	}
	else {
		print (OUT "FUNCTION_CONVERT_FILES_TO_COMPILER_NATIVE=\$1\n");
		print (OUT "FUNCTION_CONVERT_FILEPATH_TO_COMPILER_NATIVE=\$1\n");
	}

	print (OUT "\n");

	close(OUT);
}


sub WriteVS2kIntellisenseConfigFile
{
	#
	# Read in existing config info
	local %mapOfExistingEntries;
	{
		open my $in, "<:encoding(utf8)", $vs2kIntellisenseCng;
		local $extractingConfiguration = "";
		while (my $line = <$in>) {

			if (index($line, "<PropertyGroup Condition=") == -1) {
				## continue entry
				if (!($extractingConfiguration eq "")) {
					$mapOfExistingEntries{$extractingConfiguration} .= $line;
				}
				### mark end of entry
				if (index($line, "</PropertyGroup>") != -1) {
					$extractingConfiguration = "";
				}
			}
			else {
				# start entry
				local $x = "  <PropertyGroup Condition=\"'\$(Configuration)|\$(Platform)'=='";
				$extractingConfiguration = substr ($line, length ($x));
				local $stripAt = index ($extractingConfiguration, "|");
				$extractingConfiguration = substr ($extractingConfiguration, 0, $stripAt);
				$mapOfExistingEntries{$extractingConfiguration} = $line;
			}

		}
		close $in;
	}
	#print "***AFTER READ: mapOfExistingEntries = @{[ %mapOfExistingEntries ]}\n";

	#
	# then we write the new (current) section, and repeat all the others in our output
	#
	open(OUT,">$vs2kIntellisenseCng");
	print (OUT "<!--\n");
	print (OUT " Copyright(c) Sophist Solutions, Inc. 1990-2020.  All rights reserved\n");
	print (OUT "-->\n");
	print (OUT "\n");
	print (OUT "\n");
	print (OUT "<!--WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration-->\n");
	print (OUT "<!--WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration-->\n");
	print (OUT "<!--WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration-->\n");
	print (OUT "<!--WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration-->\n");
	print (OUT "<!--WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration-->\n");
	print (OUT "<!--WARNING: THIS FILE WAS AUTOGENERATED WITH ApplyConfiguration-->\n");
	print (OUT "\n");
	print (OUT "\n");
	
	print (OUT "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" TreatAsLocalProperty=\"Platform\">\n");

	# re-emit all entries except the current configuration
	while ( ($k,$v) = each %mapOfExistingEntries ) {
		if (!($k eq $activeConfiguration)) {
			print OUT "$v";
		}
	}

	# Emit the current configuration
	print (OUT "  <PropertyGroup Condition=\"'\$(Configuration)|\$(Platform)'=='$activeConfiguration|Win32'\">\n");

	#print (OUT "<!-- CPPFLAGS = $CPPFLAGS -->\n");
	local @words = split / /, $CPPFLAGS;
	local $defs2Print = "";
	foreach my $element (@words) {
		if (index ($element, "/D") == 0) {
			if ($defs2Print ne "") {
				$defs2Print .= ';'
			}
			$defs2Print .= substr ($element, 2);
		}
	}
	print (OUT "    <NMakePreprocessorDefinitions>$defs2Print</NMakePreprocessorDefinitions>\n");
	print (OUT "  </PropertyGroup>\n");

	print (OUT "</Project>\n");
	print (OUT "\n");

	close(OUT);
}



#print ("OS: $^O\n");


#
#@ todo write to temporary file and only update if actually changed
#

system ("rm -f $configFileDotHName $configFileMakeName");

unless (-e $intermediateFiles) {
    mkdir ($intermediateFiles);
}

#Really only for UNIX (for now) but harmless on WinDoze
unless (-e "$intermediateFiles/$activeConfiguration") {
	mkdir "$intermediateFiles$activeConfiguration";
	mkdir "$intermediateFiles$activeConfiguration/Library";
}

### OBSOLETE AS OF STROIKA v2.1d18, EXCEPT ON WINDOWS STILL NEEDED (cuz doesnt use makefile yet for #defines)
if ("$^O" eq "cygwin") {
	unless (-e $configFileDotHName) {
		print(`ScriptsLib/PrintLevelLeader $MAKE_INDENT_LEVEL` . "Writing \"$configFileDotHName\" ... ");
		WriteStroikaConfigCHeader ();
		print("done\n");
	}
}

unless (-e $configFileMakeName) {
	print(`ScriptsLib/PrintLevelLeader $MAKE_INDENT_LEVEL` . "Writing \"$configFileMakeName\" ... ");
	WriteStroikaConfigMakeHeader ();
	print("done\n");
}

if ($PROJECTPLATFORMSUBDIR =~ /^VisualStudio.Net/) {
	print(`ScriptsLib/PrintLevelLeader $MAKE_INDENT_LEVEL` . "Updating \"$vs2kIntellisenseCng\" ... ");
	WriteVS2kIntellisenseConfigFile ();
	print("done\n");
}
